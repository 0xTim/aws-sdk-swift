    public {{shape.struct.object}} {{shape.struct.name}}: AWSShape {
        {%if shape.struct.payload %}/// The key for the payload
        public static let payloadPath: String? = "{{shape.struct.payload}}"
        {%endif %}{%if shape.struct.members.count > 0%}public static var _members: [AWSShapeMember] = [
        {%for member in shape.struct.members %}    AWSShapeMember(label: "{{member.name}}", {%if member.location %}location: {{member.location}}, {%endif %}required: {{member.required}}, type: .{{member.typeEnum}}{%if member.encoding %}, encoding: {{member.encoding}}{%endif %}){%if not forloop.last %}, {%endif %}
        {%endfor %}]{%endif %}
        {%for member in shape.struct.members %}{%for comment in member.comment %}/// {{comment}}
        {%endfor %}public let {{member.variable}}: {{member.type}}
        {%endfor %}
        public init({%for member in shape.struct.members %}{{member.parameter}}: {{member.type}}{%if not member.required%} = nil{%endif %}{%if not forloop.last %}, {%endif %}{%endfor %}) {
        {%for member in shape.struct.members %}    self.{{member.variable}} = {{member.variable}}
        {%endfor %}}

        {%if shape.struct.members.count > 0%}private enum CodingKeys: String, CodingKey {
        {%for member in shape.struct.members %}{%if member.duplicate %}    case {{member.variable}} = "_{{member.locationPath}}" // TODO this is temporary measure for avoiding CodingKey duplication.
        {%else %}    case {{member.variable}} = "{{member.locationPath}}"
        {%endif %}{%endfor %}}
    {%endif %}}
