// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Directconnect {

    public struct CreateLagRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The AWS Direct Connect location in which the LAG should be allocated. Example: EqSV5 Default: None
        public var location: String = ""
        /// The bandwidth of the individual physical connections bundled by the LAG. Default: None Available values: 1Gbps, 10Gbps
        public var connectionsBandwidth: String = ""
        /// The ID of an existing connection to migrate to the LAG. Default: None
        public var connectionId: String? = nil
        /// The number of physical connections initially provisioned and bundled by the LAG. Default: None
        public var numberOfConnections: Int32 = 0
        /// The name of the LAG. Example: "3x10G LAG to AWS" Default: None
        public var lagName: String = ""

        public init() {}

        public init(location: String, connectionsBandwidth: String, connectionId: String? = nil, numberOfConnections: Int32, lagName: String) {
            self.location = location
            self.connectionsBandwidth = connectionsBandwidth
            self.connectionId = connectionId
            self.numberOfConnections = numberOfConnections
            self.lagName = lagName
        }

        public init(dictionary: [String: Any]) throws {
            guard let location = dictionary["location"] as? String else { throw InitializableError.missingRequiredParam("location") }
            self.location = location
            guard let connectionsBandwidth = dictionary["connectionsBandwidth"] as? String else { throw InitializableError.missingRequiredParam("connectionsBandwidth") }
            self.connectionsBandwidth = connectionsBandwidth
            self.connectionId = dictionary["connectionId"] as? String
            guard let numberOfConnections = dictionary["numberOfConnections"] as? Int32 else { throw InitializableError.missingRequiredParam("numberOfConnections") }
            self.numberOfConnections = numberOfConnections
            guard let lagName = dictionary["lagName"] as? String else { throw InitializableError.missingRequiredParam("lagName") }
            self.lagName = lagName
        }
    }

    public struct DescribeTagsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the tags.
        public var resourceTags: [ResourceTag]? = nil

        public init() {}

        public init(resourceTags: [ResourceTag]? = nil) {
            self.resourceTags = resourceTags
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceTags = dictionary["resourceTags"] as? [[String: Any]] {
                self.resourceTags = try resourceTags.map({ try ResourceTag(dictionary: $0) })
            }
        }
    }

    public struct VirtualGateways: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of virtual private gateways.
        public var virtualGateways: [VirtualGateway]? = nil

        public init() {}

        public init(virtualGateways: [VirtualGateway]? = nil) {
            self.virtualGateways = virtualGateways
        }

        public init(dictionary: [String: Any]) throws {
            if let virtualGateways = dictionary["virtualGateways"] as? [[String: Any]] {
                self.virtualGateways = try virtualGateways.map({ try VirtualGateway(dictionary: $0) })
            }
        }
    }

    public struct TagResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Direct Connect resource. Example: arn:aws:directconnect:us-east-1:123456789012:dxcon/dxcon-fg5678gh
        public var resourceArn: String = ""
        /// The list of tags to add.
        public var tags: [Tag] = []

        public init() {}

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
            guard let tags = dictionary["tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

    public struct AllocateHostedConnectionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The numeric account ID of the customer for whom the connection will be provisioned. Example: 123443215678 Default: None
        public var ownerAccount: String = ""
        /// The name of the provisioned connection. Example: "500M Connection to AWS" Default: None
        public var connectionName: String = ""
        /// The ID of the interconnect or LAG on which the connection will be provisioned. Example: dxcon-456abc78 or dxlag-abc123 Default: None
        public var connectionId: String = ""
        /// The dedicated VLAN provisioned to the hosted connection. Example: 101 Default: None
        public var vlan: Int32 = 0
        /// The bandwidth of the connection. Example: 500Mbps  Default: None Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps
        public var bandwidth: String = ""

        public init() {}

        public init(ownerAccount: String, connectionName: String, connectionId: String, vlan: Int32, bandwidth: String) {
            self.ownerAccount = ownerAccount
            self.connectionName = connectionName
            self.connectionId = connectionId
            self.vlan = vlan
            self.bandwidth = bandwidth
        }

        public init(dictionary: [String: Any]) throws {
            guard let ownerAccount = dictionary["ownerAccount"] as? String else { throw InitializableError.missingRequiredParam("ownerAccount") }
            self.ownerAccount = ownerAccount
            guard let connectionName = dictionary["connectionName"] as? String else { throw InitializableError.missingRequiredParam("connectionName") }
            self.connectionName = connectionName
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let vlan = dictionary["vlan"] as? Int32 else { throw InitializableError.missingRequiredParam("vlan") }
            self.vlan = vlan
            guard let bandwidth = dictionary["bandwidth"] as? String else { throw InitializableError.missingRequiredParam("bandwidth") }
            self.bandwidth = bandwidth
        }
    }

    public struct Lag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of connections bundled by this LAG.
        public var connections: [Connection]? = nil
        public var location: String? = nil
        public var lagId: String? = nil
        public var lagState: String? = nil
        /// The AWS Direct Connection endpoint that hosts the LAG.
        public var awsDevice: String? = nil
        /// The number of physical connections bundled by the LAG, up to a maximum of 10.
        public var numberOfConnections: Int32? = nil
        /// The owner of the LAG.
        public var ownerAccount: String? = nil
        public var region: String? = nil
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational. If the number of operational connections drops below this setting, the LAG state changes to down. This value can help to ensure that a LAG is not overutilized if a significant number of its bundled connections go down.
        public var minimumLinks: Int32? = nil
        /// Indicates whether the LAG can host other connections.  This is intended for use by AWS Direct Connect partners only. 
        public var allowsHostedConnections: Bool? = nil
        /// The individual bandwidth of the physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps
        public var connectionsBandwidth: String? = nil
        /// The name of the LAG.
        public var lagName: String? = nil

        public init() {}

        public init(connections: [Connection]? = nil, location: String? = nil, lagId: String? = nil, lagState: String? = nil, awsDevice: String? = nil, numberOfConnections: Int32? = nil, ownerAccount: String? = nil, region: String? = nil, minimumLinks: Int32? = nil, allowsHostedConnections: Bool? = nil, connectionsBandwidth: String? = nil, lagName: String? = nil) {
            self.connections = connections
            self.location = location
            self.lagId = lagId
            self.lagState = lagState
            self.awsDevice = awsDevice
            self.numberOfConnections = numberOfConnections
            self.ownerAccount = ownerAccount
            self.region = region
            self.minimumLinks = minimumLinks
            self.allowsHostedConnections = allowsHostedConnections
            self.connectionsBandwidth = connectionsBandwidth
            self.lagName = lagName
        }

        public init(dictionary: [String: Any]) throws {
            if let connections = dictionary["connections"] as? [[String: Any]] {
                self.connections = try connections.map({ try Connection(dictionary: $0) })
            }
            self.location = dictionary["location"] as? String
            self.lagId = dictionary["lagId"] as? String
            self.lagState = dictionary["lagState"] as? String
            self.awsDevice = dictionary["awsDevice"] as? String
            self.numberOfConnections = dictionary["numberOfConnections"] as? Int32
            self.ownerAccount = dictionary["ownerAccount"] as? String
            self.region = dictionary["region"] as? String
            self.minimumLinks = dictionary["minimumLinks"] as? Int32
            self.allowsHostedConnections = dictionary["allowsHostedConnections"] as? Bool
            self.connectionsBandwidth = dictionary["connectionsBandwidth"] as? String
            self.lagName = dictionary["lagName"] as? String
        }
    }

    public struct DeleteVirtualInterfaceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceState: String? = nil

        public init() {}

        public init(virtualInterfaceState: String? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualInterfaceState = dictionary["virtualInterfaceState"] as? String
        }
    }

    public struct AssociateVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the virtual interface. Example: dxvif-123dfg56 Default: None
        public var virtualInterfaceId: String = ""
        /// The ID of the LAG or connection with which to associate the virtual interface. Example: dxlag-abc123 or dxcon-abc123 Default: None
        public var connectionId: String = ""

        public init() {}

        public init(virtualInterfaceId: String, connectionId: String) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let virtualInterfaceId = dictionary["virtualInterfaceId"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceId") }
            self.virtualInterfaceId = virtualInterfaceId
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
        }
    }

    public struct CreateBGPPeerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterface: VirtualInterface? = nil

        public init() {}

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        public init(dictionary: [String: Any]) throws {
            if let virtualInterface = dictionary["virtualInterface"] as? [String: Any] { self.virtualInterface = try Directconnect.VirtualInterface(dictionary: virtualInterface) }
        }
    }

    public struct DescribeLagsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the LAG. Example: dxlag-abc123 Default: None
        public var lagId: String? = nil

        public init() {}

        public init(lagId: String? = nil) {
            self.lagId = lagId
        }

        public init(dictionary: [String: Any]) throws {
            self.lagId = dictionary["lagId"] as? String
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Names (ARNs) of the Direct Connect resources.
        public var resourceArns: [String] = []

        public init() {}

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArns = dictionary["resourceArns"] as? [String] else { throw InitializableError.missingRequiredParam("resourceArns") }
            self.resourceArns = resourceArns
        }
    }

    public struct DescribeConnectionLoaResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var loa: Loa? = nil

        public init() {}

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        public init(dictionary: [String: Any]) throws {
            if let loa = dictionary["loa"] as? [String: Any] { self.loa = try Directconnect.Loa(dictionary: loa) }
        }
    }

    public struct NewPublicVirtualInterfaceAllocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var customerAddress: String? = nil
        public var virtualInterfaceName: String = ""
        public var authKey: String? = nil
        public var amazonAddress: String? = nil
        public var asn: Int32 = 0
        public var addressFamily: String? = nil
        public var routeFilterPrefixes: [RouteFilterPrefix]? = nil
        public var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.vlan = vlan
        }

        public init(dictionary: [String: Any]) throws {
            self.customerAddress = dictionary["customerAddress"] as? String
            guard let virtualInterfaceName = dictionary["virtualInterfaceName"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceName") }
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = dictionary["authKey"] as? String
            self.amazonAddress = dictionary["amazonAddress"] as? String
            guard let asn = dictionary["asn"] as? Int32 else { throw InitializableError.missingRequiredParam("asn") }
            self.asn = asn
            self.addressFamily = dictionary["addressFamily"] as? String
            if let routeFilterPrefixes = dictionary["routeFilterPrefixes"] as? [[String: Any]] {
                self.routeFilterPrefixes = try routeFilterPrefixes.map({ try RouteFilterPrefix(dictionary: $0) })
            }
            guard let vlan = dictionary["vlan"] as? Int32 else { throw InitializableError.missingRequiredParam("vlan") }
            self.vlan = vlan
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The key of the tag.
        public var key: String = ""
        /// The value of the tag.
        public var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            self.value = dictionary["value"] as? String
        }
    }

    public struct CreatePrivateVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionId: String = ""
        /// Detailed information for the private virtual interface to be created. Default: None
        public var newPrivateVirtualInterface: NewPrivateVirtualInterface = NewPrivateVirtualInterface()

        public init() {}

        public init(connectionId: String, newPrivateVirtualInterface: NewPrivateVirtualInterface) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterface = newPrivateVirtualInterface
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let newPrivateVirtualInterface = dictionary["newPrivateVirtualInterface"] as? [String: Any] else { throw InitializableError.missingRequiredParam("newPrivateVirtualInterface") }
            self.newPrivateVirtualInterface = try Directconnect.NewPrivateVirtualInterface(dictionary: newPrivateVirtualInterface)
        }
    }

    public struct AssociateHostedConnectionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the hosted connection. Example: dxcon-abc123 Default: None
        public var connectionId: String = ""
        /// The ID of the interconnect or the LAG. Example: dxcon-abc123 or dxlag-abc123 Default: None
        public var parentConnectionId: String = ""

        public init() {}

        public init(connectionId: String, parentConnectionId: String) {
            self.connectionId = connectionId
            self.parentConnectionId = parentConnectionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let parentConnectionId = dictionary["parentConnectionId"] as? String else { throw InitializableError.missingRequiredParam("parentConnectionId") }
            self.parentConnectionId = parentConnectionId
        }
    }

    public struct DeleteInterconnectRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var interconnectId: String = ""

        public init() {}

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        public init(dictionary: [String: Any]) throws {
            guard let interconnectId = dictionary["interconnectId"] as? String else { throw InitializableError.missingRequiredParam("interconnectId") }
            self.interconnectId = interconnectId
        }
    }

    public struct DescribeInterconnectLoaRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        public var providerName: String? = nil
        public var loaContentType: String? = nil
        public var interconnectId: String = ""

        public init() {}

        public init(providerName: String? = nil, loaContentType: String? = nil, interconnectId: String) {
            self.providerName = providerName
            self.loaContentType = loaContentType
            self.interconnectId = interconnectId
        }

        public init(dictionary: [String: Any]) throws {
            self.providerName = dictionary["providerName"] as? String
            self.loaContentType = dictionary["loaContentType"] as? String
            guard let interconnectId = dictionary["interconnectId"] as? String else { throw InitializableError.missingRequiredParam("interconnectId") }
            self.interconnectId = interconnectId
        }
    }

    public struct NewPublicVirtualInterface: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var customerAddress: String? = nil
        public var virtualInterfaceName: String = ""
        public var authKey: String? = nil
        public var amazonAddress: String? = nil
        public var asn: Int32 = 0
        public var addressFamily: String? = nil
        public var routeFilterPrefixes: [RouteFilterPrefix]? = nil
        public var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.vlan = vlan
        }

        public init(dictionary: [String: Any]) throws {
            self.customerAddress = dictionary["customerAddress"] as? String
            guard let virtualInterfaceName = dictionary["virtualInterfaceName"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceName") }
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = dictionary["authKey"] as? String
            self.amazonAddress = dictionary["amazonAddress"] as? String
            guard let asn = dictionary["asn"] as? Int32 else { throw InitializableError.missingRequiredParam("asn") }
            self.asn = asn
            self.addressFamily = dictionary["addressFamily"] as? String
            if let routeFilterPrefixes = dictionary["routeFilterPrefixes"] as? [[String: Any]] {
                self.routeFilterPrefixes = try routeFilterPrefixes.map({ try RouteFilterPrefix(dictionary: $0) })
            }
            guard let vlan = dictionary["vlan"] as? Int32 else { throw InitializableError.missingRequiredParam("vlan") }
            self.vlan = vlan
        }
    }

    public struct Interconnects: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of interconnects.
        public var interconnects: [Interconnect]? = nil

        public init() {}

        public init(interconnects: [Interconnect]? = nil) {
            self.interconnects = interconnects
        }

        public init(dictionary: [String: Any]) throws {
            if let interconnects = dictionary["interconnects"] as? [[String: Any]] {
                self.interconnects = try interconnects.map({ try Interconnect(dictionary: $0) })
            }
        }
    }

    public struct AllocatePrivateVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The connection ID on which the private virtual interface is provisioned. Default: None
        public var connectionId: String = ""
        /// Detailed information for the private virtual interface to be provisioned. Default: None
        public var newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation = NewPrivateVirtualInterfaceAllocation()
        /// The AWS account that will own the new private virtual interface. Default: None
        public var ownerAccount: String = ""

        public init() {}

        public init(connectionId: String, newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation, ownerAccount: String) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation
            self.ownerAccount = ownerAccount
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let newPrivateVirtualInterfaceAllocation = dictionary["newPrivateVirtualInterfaceAllocation"] as? [String: Any] else { throw InitializableError.missingRequiredParam("newPrivateVirtualInterfaceAllocation") }
            self.newPrivateVirtualInterfaceAllocation = try Directconnect.NewPrivateVirtualInterfaceAllocation(dictionary: newPrivateVirtualInterfaceAllocation)
            guard let ownerAccount = dictionary["ownerAccount"] as? String else { throw InitializableError.missingRequiredParam("ownerAccount") }
            self.ownerAccount = ownerAccount
        }
    }

    public struct DeleteLagRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the LAG to delete. Example: dxlag-abc123 Default: None
        public var lagId: String = ""

        public init() {}

        public init(lagId: String) {
            self.lagId = lagId
        }

        public init(dictionary: [String: Any]) throws {
            guard let lagId = dictionary["lagId"] as? String else { throw InitializableError.missingRequiredParam("lagId") }
            self.lagId = lagId
        }
    }

    public struct UpdateLagRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational. Default: None
        public var minimumLinks: Int32? = nil
        /// The ID of the LAG to update. Example: dxlag-abc123 Default: None
        public var lagId: String = ""
        /// The name for the LAG. Example: "3x10G LAG to AWS" Default: None
        public var lagName: String? = nil

        public init() {}

        public init(minimumLinks: Int32? = nil, lagId: String, lagName: String? = nil) {
            self.minimumLinks = minimumLinks
            self.lagId = lagId
            self.lagName = lagName
        }

        public init(dictionary: [String: Any]) throws {
            self.minimumLinks = dictionary["minimumLinks"] as? Int32
            guard let lagId = dictionary["lagId"] as? String else { throw InitializableError.missingRequiredParam("lagId") }
            self.lagId = lagId
            self.lagName = dictionary["lagName"] as? String
        }
    }

    public struct NewPrivateVirtualInterface: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var customerAddress: String? = nil
        public var virtualInterfaceName: String = ""
        public var authKey: String? = nil
        public var amazonAddress: String? = nil
        public var asn: Int32 = 0
        public var addressFamily: String? = nil
        public var virtualGatewayId: String = ""
        public var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, virtualGatewayId: String, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.virtualGatewayId = virtualGatewayId
            self.vlan = vlan
        }

        public init(dictionary: [String: Any]) throws {
            self.customerAddress = dictionary["customerAddress"] as? String
            guard let virtualInterfaceName = dictionary["virtualInterfaceName"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceName") }
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = dictionary["authKey"] as? String
            self.amazonAddress = dictionary["amazonAddress"] as? String
            guard let asn = dictionary["asn"] as? Int32 else { throw InitializableError.missingRequiredParam("asn") }
            self.asn = asn
            self.addressFamily = dictionary["addressFamily"] as? String
            guard let virtualGatewayId = dictionary["virtualGatewayId"] as? String else { throw InitializableError.missingRequiredParam("virtualGatewayId") }
            self.virtualGatewayId = virtualGatewayId
            guard let vlan = dictionary["vlan"] as? Int32 else { throw InitializableError.missingRequiredParam("vlan") }
            self.vlan = vlan
        }
    }

    public struct DescribeHostedConnectionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the interconnect or LAG on which the hosted connections are provisioned. Example: dxcon-abc123 or dxlag-abc123 Default: None
        public var connectionId: String = ""

        public init() {}

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
        }
    }

    public struct DeleteConnectionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionId: String = ""

        public init() {}

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
        }
    }

    public struct NewPrivateVirtualInterfaceAllocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var customerAddress: String? = nil
        public var virtualInterfaceName: String = ""
        public var authKey: String? = nil
        public var amazonAddress: String? = nil
        public var asn: Int32 = 0
        public var addressFamily: String? = nil
        public var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.vlan = vlan
        }

        public init(dictionary: [String: Any]) throws {
            self.customerAddress = dictionary["customerAddress"] as? String
            guard let virtualInterfaceName = dictionary["virtualInterfaceName"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceName") }
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = dictionary["authKey"] as? String
            self.amazonAddress = dictionary["amazonAddress"] as? String
            guard let asn = dictionary["asn"] as? Int32 else { throw InitializableError.missingRequiredParam("asn") }
            self.asn = asn
            self.addressFamily = dictionary["addressFamily"] as? String
            guard let vlan = dictionary["vlan"] as? Int32 else { throw InitializableError.missingRequiredParam("vlan") }
            self.vlan = vlan
        }
    }

    public struct CreatePublicVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionId: String = ""
        /// Detailed information for the public virtual interface to be created. Default: None
        public var newPublicVirtualInterface: NewPublicVirtualInterface = NewPublicVirtualInterface()

        public init() {}

        public init(connectionId: String, newPublicVirtualInterface: NewPublicVirtualInterface) {
            self.connectionId = connectionId
            self.newPublicVirtualInterface = newPublicVirtualInterface
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let newPublicVirtualInterface = dictionary["newPublicVirtualInterface"] as? [String: Any] else { throw InitializableError.missingRequiredParam("newPublicVirtualInterface") }
            self.newPublicVirtualInterface = try Directconnect.NewPublicVirtualInterface(dictionary: newPublicVirtualInterface)
        }
    }

    public struct DescribeInterconnectsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var interconnectId: String? = nil

        public init() {}

        public init(interconnectId: String? = nil) {
            self.interconnectId = interconnectId
        }

        public init(dictionary: [String: Any]) throws {
            self.interconnectId = dictionary["interconnectId"] as? String
        }
    }

    public struct ResourceTag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Direct Connect resource.
        public var resourceArn: String? = nil
        /// The tags.
        public var tags: [Tag]? = nil

        public init() {}

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceArn = dictionary["resourceArn"] as? String
            if let tags = dictionary["tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
        }
    }

    public struct ConfirmConnectionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionId: String = ""

        public init() {}

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
        }
    }

    public struct AssociateConnectionWithLagRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the connection. Example: dxcon-abc123 Default: None
        public var connectionId: String = ""
        /// The ID of the LAG with which to associate the connection. Example: dxlag-abc123 Default: None
        public var lagId: String = ""

        public init() {}

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let lagId = dictionary["lagId"] as? String else { throw InitializableError.missingRequiredParam("lagId") }
            self.lagId = lagId
        }
    }

    public struct AllocatePublicVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Detailed information for the public virtual interface to be provisioned. Default: None
        public var newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation = NewPublicVirtualInterfaceAllocation()
        /// The connection ID on which the public virtual interface is provisioned. Default: None
        public var connectionId: String = ""
        /// The AWS account that will own the new public virtual interface. Default: None
        public var ownerAccount: String = ""

        public init() {}

        public init(newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation, connectionId: String, ownerAccount: String) {
            self.newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
        }

        public init(dictionary: [String: Any]) throws {
            guard let newPublicVirtualInterfaceAllocation = dictionary["newPublicVirtualInterfaceAllocation"] as? [String: Any] else { throw InitializableError.missingRequiredParam("newPublicVirtualInterfaceAllocation") }
            self.newPublicVirtualInterfaceAllocation = try Directconnect.NewPublicVirtualInterfaceAllocation(dictionary: newPublicVirtualInterfaceAllocation)
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let ownerAccount = dictionary["ownerAccount"] as? String else { throw InitializableError.missingRequiredParam("ownerAccount") }
            self.ownerAccount = ownerAccount
        }
    }

    public struct ConfirmPublicVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceId: String = ""

        public init() {}

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let virtualInterfaceId = dictionary["virtualInterfaceId"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceId") }
            self.virtualInterfaceId = virtualInterfaceId
        }
    }

    public struct CreateInterconnectRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Where the interconnect is located Example: EqSV5 Default: None
        public var location: String = ""
        public var lagId: String? = nil
        /// The name of the interconnect. Example: "1G Interconnect to AWS" Default: None
        public var interconnectName: String = ""
        /// The port bandwidth Example: 1Gbps Default: None Available values: 1Gbps,10Gbps
        public var bandwidth: String = ""

        public init() {}

        public init(location: String, lagId: String? = nil, interconnectName: String, bandwidth: String) {
            self.location = location
            self.lagId = lagId
            self.interconnectName = interconnectName
            self.bandwidth = bandwidth
        }

        public init(dictionary: [String: Any]) throws {
            guard let location = dictionary["location"] as? String else { throw InitializableError.missingRequiredParam("location") }
            self.location = location
            self.lagId = dictionary["lagId"] as? String
            guard let interconnectName = dictionary["interconnectName"] as? String else { throw InitializableError.missingRequiredParam("interconnectName") }
            self.interconnectName = interconnectName
            guard let bandwidth = dictionary["bandwidth"] as? String else { throw InitializableError.missingRequiredParam("bandwidth") }
            self.bandwidth = bandwidth
        }
    }

    public struct Connections: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of connections.
        public var connections: [Connection]? = nil

        public init() {}

        public init(connections: [Connection]? = nil) {
            self.connections = connections
        }

        public init(dictionary: [String: Any]) throws {
            if let connections = dictionary["connections"] as? [[String: Any]] {
                self.connections = try connections.map({ try Connection(dictionary: $0) })
            }
        }
    }

    public struct DescribeInterconnectLoaResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var loa: Loa? = nil

        public init() {}

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        public init(dictionary: [String: Any]) throws {
            if let loa = dictionary["loa"] as? [String: Any] { self.loa = try Directconnect.Loa(dictionary: loa) }
        }
    }

    public struct Connection: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time of the most recent call to DescribeLoa for this connection.
        public var loaIssueTime: Date? = nil
        /// Bandwidth of the connection. Example: 1Gbps (for regular connections), or 500Mbps (for hosted connections) Default: None
        public var bandwidth: String? = nil
        public var location: String? = nil
        public var lagId: String? = nil
        /// The Direct Connection endpoint which the physical connection terminates on.
        public var awsDevice: String? = nil
        public var connectionId: String? = nil
        public var region: String? = nil
        /// The AWS account that will own the new connection.
        public var ownerAccount: String? = nil
        public var connectionState: String? = nil
        public var connectionName: String? = nil
        public var vlan: Int32? = nil
        /// The name of the AWS Direct Connect service provider associated with the connection.
        public var partnerName: String? = nil

        public init() {}

        public init(loaIssueTime: Date? = nil, bandwidth: String? = nil, location: String? = nil, lagId: String? = nil, awsDevice: String? = nil, connectionId: String? = nil, region: String? = nil, ownerAccount: String? = nil, connectionState: String? = nil, connectionName: String? = nil, vlan: Int32? = nil, partnerName: String? = nil) {
            self.loaIssueTime = loaIssueTime
            self.bandwidth = bandwidth
            self.location = location
            self.lagId = lagId
            self.awsDevice = awsDevice
            self.connectionId = connectionId
            self.region = region
            self.ownerAccount = ownerAccount
            self.connectionState = connectionState
            self.connectionName = connectionName
            self.vlan = vlan
            self.partnerName = partnerName
        }

        public init(dictionary: [String: Any]) throws {
            self.loaIssueTime = dictionary["loaIssueTime"] as? Date
            self.bandwidth = dictionary["bandwidth"] as? String
            self.location = dictionary["location"] as? String
            self.lagId = dictionary["lagId"] as? String
            self.awsDevice = dictionary["awsDevice"] as? String
            self.connectionId = dictionary["connectionId"] as? String
            self.region = dictionary["region"] as? String
            self.ownerAccount = dictionary["ownerAccount"] as? String
            self.connectionState = dictionary["connectionState"] as? String
            self.connectionName = dictionary["connectionName"] as? String
            self.vlan = dictionary["vlan"] as? Int32
            self.partnerName = dictionary["partnerName"] as? String
        }
    }

    public struct DescribeConnectionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionId: String? = nil

        public init() {}

        public init(connectionId: String? = nil) {
            self.connectionId = connectionId
        }

        public init(dictionary: [String: Any]) throws {
            self.connectionId = dictionary["connectionId"] as? String
        }
    }

    public struct Lags: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of LAGs.
        public var lags: [Lag]? = nil

        public init() {}

        public init(lags: [Lag]? = nil) {
            self.lags = lags
        }

        public init(dictionary: [String: Any]) throws {
            if let lags = dictionary["lags"] as? [[String: Any]] {
                self.lags = try lags.map({ try Lag(dictionary: $0) })
            }
        }
    }

    public struct DeleteInterconnectResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var interconnectState: String? = nil

        public init() {}

        public init(interconnectState: String? = nil) {
            self.interconnectState = interconnectState
        }

        public init(dictionary: [String: Any]) throws {
            self.interconnectState = dictionary["interconnectState"] as? String
        }
    }

    public struct TagResourceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct BGPPeer: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var bgpPeerState: String? = nil
        public var customerAddress: String? = nil
        public var bgpStatus: String? = nil
        public var authKey: String? = nil
        public var amazonAddress: String? = nil
        public var asn: Int32? = nil
        public var addressFamily: String? = nil

        public init() {}

        public init(bgpPeerState: String? = nil, customerAddress: String? = nil, bgpStatus: String? = nil, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32? = nil, addressFamily: String? = nil) {
            self.bgpPeerState = bgpPeerState
            self.customerAddress = customerAddress
            self.bgpStatus = bgpStatus
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
        }

        public init(dictionary: [String: Any]) throws {
            self.bgpPeerState = dictionary["bgpPeerState"] as? String
            self.customerAddress = dictionary["customerAddress"] as? String
            self.bgpStatus = dictionary["bgpStatus"] as? String
            self.authKey = dictionary["authKey"] as? String
            self.amazonAddress = dictionary["amazonAddress"] as? String
            self.asn = dictionary["asn"] as? Int32
            self.addressFamily = dictionary["addressFamily"] as? String
        }
    }

    public struct DisassociateConnectionFromLagRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the connection to disassociate from the LAG. Example: dxcon-abc123 Default: None
        public var connectionId: String = ""
        /// The ID of the LAG. Example: dxlag-abc123 Default: None
        public var lagId: String = ""

        public init() {}

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            guard let lagId = dictionary["lagId"] as? String else { throw InitializableError.missingRequiredParam("lagId") }
            self.lagId = lagId
        }
    }

    public struct CreateBGPPeerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the virtual interface on which the BGP peer will be provisioned. Example: dxvif-456abc78 Default: None
        public var virtualInterfaceId: String? = nil
        /// Detailed information for the BGP peer to be created. Default: None
        public var newBGPPeer: NewBGPPeer? = nil

        public init() {}

        public init(virtualInterfaceId: String? = nil, newBGPPeer: NewBGPPeer? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.newBGPPeer = newBGPPeer
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualInterfaceId = dictionary["virtualInterfaceId"] as? String
            if let newBGPPeer = dictionary["newBGPPeer"] as? [String: Any] { self.newBGPPeer = try Directconnect.NewBGPPeer(dictionary: newBGPPeer) }
        }
    }

    public struct ConfirmPrivateVirtualInterfaceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceState: String? = nil

        public init() {}

        public init(virtualInterfaceState: String? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualInterfaceState = dictionary["virtualInterfaceState"] as? String
        }
    }

    public struct DeleteBGPPeerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterface: VirtualInterface? = nil

        public init() {}

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        public init(dictionary: [String: Any]) throws {
            if let virtualInterface = dictionary["virtualInterface"] as? [String: Any] { self.virtualInterface = try Directconnect.VirtualInterface(dictionary: virtualInterface) }
        }
    }

    public struct DescribeVirtualInterfacesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceId: String? = nil
        public var connectionId: String? = nil

        public init() {}

        public init(virtualInterfaceId: String? = nil, connectionId: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualInterfaceId = dictionary["virtualInterfaceId"] as? String
            self.connectionId = dictionary["connectionId"] as? String
        }
    }

    public struct DescribeLoaRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        public var providerName: String? = nil
        /// The ID of a connection, LAG, or interconnect for which to get the LOA-CFA information. Example: dxcon-abc123 or dxlag-abc123 Default: None
        public var connectionId: String = ""
        /// A standard media type indicating the content type of the LOA-CFA document. Currently, the only supported value is "application/pdf". Default: application/pdf
        public var loaContentType: String? = nil

        public init() {}

        public init(providerName: String? = nil, connectionId: String, loaContentType: String? = nil) {
            self.providerName = providerName
            self.connectionId = connectionId
            self.loaContentType = loaContentType
        }

        public init(dictionary: [String: Any]) throws {
            self.providerName = dictionary["providerName"] as? String
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            self.loaContentType = dictionary["loaContentType"] as? String
        }
    }

    public struct DeleteBGPPeerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the virtual interface from which the BGP peer will be deleted. Example: dxvif-456abc78 Default: None
        public var virtualInterfaceId: String? = nil
        public var asn: Int32? = nil
        public var customerAddress: String? = nil

        public init() {}

        public init(virtualInterfaceId: String? = nil, asn: Int32? = nil, customerAddress: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.asn = asn
            self.customerAddress = customerAddress
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualInterfaceId = dictionary["virtualInterfaceId"] as? String
            self.asn = dictionary["asn"] as? Int32
            self.customerAddress = dictionary["customerAddress"] as? String
        }
    }

    public struct Interconnect: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time of the most recent call to DescribeInterconnectLoa for this Interconnect.
        public var loaIssueTime: Date? = nil
        public var interconnectState: String? = nil
        public var location: String? = nil
        /// The Direct Connection endpoint which the physical connection terminates on.
        public var awsDevice: String? = nil
        public var lagId: String? = nil
        public var region: String? = nil
        public var interconnectName: String? = nil
        public var interconnectId: String? = nil
        public var bandwidth: String? = nil

        public init() {}

        public init(loaIssueTime: Date? = nil, interconnectState: String? = nil, location: String? = nil, awsDevice: String? = nil, lagId: String? = nil, region: String? = nil, interconnectName: String? = nil, interconnectId: String? = nil, bandwidth: String? = nil) {
            self.loaIssueTime = loaIssueTime
            self.interconnectState = interconnectState
            self.location = location
            self.awsDevice = awsDevice
            self.lagId = lagId
            self.region = region
            self.interconnectName = interconnectName
            self.interconnectId = interconnectId
            self.bandwidth = bandwidth
        }

        public init(dictionary: [String: Any]) throws {
            self.loaIssueTime = dictionary["loaIssueTime"] as? Date
            self.interconnectState = dictionary["interconnectState"] as? String
            self.location = dictionary["location"] as? String
            self.awsDevice = dictionary["awsDevice"] as? String
            self.lagId = dictionary["lagId"] as? String
            self.region = dictionary["region"] as? String
            self.interconnectName = dictionary["interconnectName"] as? String
            self.interconnectId = dictionary["interconnectId"] as? String
            self.bandwidth = dictionary["bandwidth"] as? String
        }
    }

    public struct AllocateConnectionOnInterconnectRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Bandwidth of the connection. Example: "500Mbps" Default: None Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps
        public var bandwidth: String = ""
        /// Name of the provisioned connection. Example: "500M Connection to AWS" Default: None
        public var connectionName: String = ""
        /// ID of the interconnect on which the connection will be provisioned. Example: dxcon-456abc78 Default: None
        public var interconnectId: String = ""
        /// The dedicated VLAN provisioned to the connection. Example: 101 Default: None
        public var vlan: Int32 = 0
        /// Numeric account Id of the customer for whom the connection will be provisioned. Example: 123443215678 Default: None
        public var ownerAccount: String = ""

        public init() {}

        public init(bandwidth: String, connectionName: String, interconnectId: String, vlan: Int32, ownerAccount: String) {
            self.bandwidth = bandwidth
            self.connectionName = connectionName
            self.interconnectId = interconnectId
            self.vlan = vlan
            self.ownerAccount = ownerAccount
        }

        public init(dictionary: [String: Any]) throws {
            guard let bandwidth = dictionary["bandwidth"] as? String else { throw InitializableError.missingRequiredParam("bandwidth") }
            self.bandwidth = bandwidth
            guard let connectionName = dictionary["connectionName"] as? String else { throw InitializableError.missingRequiredParam("connectionName") }
            self.connectionName = connectionName
            guard let interconnectId = dictionary["interconnectId"] as? String else { throw InitializableError.missingRequiredParam("interconnectId") }
            self.interconnectId = interconnectId
            guard let vlan = dictionary["vlan"] as? Int32 else { throw InitializableError.missingRequiredParam("vlan") }
            self.vlan = vlan
            guard let ownerAccount = dictionary["ownerAccount"] as? String else { throw InitializableError.missingRequiredParam("ownerAccount") }
            self.ownerAccount = ownerAccount
        }
    }

    public struct DescribeConnectionsOnInterconnectRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// ID of the interconnect on which a list of connection is provisioned. Example: dxcon-abc123 Default: None
        public var interconnectId: String = ""

        public init() {}

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        public init(dictionary: [String: Any]) throws {
            guard let interconnectId = dictionary["interconnectId"] as? String else { throw InitializableError.missingRequiredParam("interconnectId") }
            self.interconnectId = interconnectId
        }
    }

    public struct VirtualInterfaces: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of virtual interfaces.
        public var virtualInterfaces: [VirtualInterface]? = nil

        public init() {}

        public init(virtualInterfaces: [VirtualInterface]? = nil) {
            self.virtualInterfaces = virtualInterfaces
        }

        public init(dictionary: [String: Any]) throws {
            if let virtualInterfaces = dictionary["virtualInterfaces"] as? [[String: Any]] {
                self.virtualInterfaces = try virtualInterfaces.map({ try VirtualInterface(dictionary: $0) })
            }
        }
    }

    public struct UntagResourceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Location: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code used to indicate the AWS Direct Connect location.
        public var locationCode: String? = nil
        /// The name of the AWS Direct Connect location. The name includes the colocation partner name and the physical site of the lit building.
        public var locationName: String? = nil

        public init() {}

        public init(locationCode: String? = nil, locationName: String? = nil) {
            self.locationCode = locationCode
            self.locationName = locationName
        }

        public init(dictionary: [String: Any]) throws {
            self.locationCode = dictionary["locationCode"] as? String
            self.locationName = dictionary["locationName"] as? String
        }
    }

    public struct Loa: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var loaContentType: String? = nil
        public var loaContent: Data? = nil

        public init() {}

        public init(loaContentType: String? = nil, loaContent: Data? = nil) {
            self.loaContentType = loaContentType
            self.loaContent = loaContent
        }

        public init(dictionary: [String: Any]) throws {
            self.loaContentType = dictionary["loaContentType"] as? String
            self.loaContent = dictionary["loaContent"] as? Data
        }
    }

    public struct VirtualInterface: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var customerAddress: String? = nil
        public var virtualInterfaceType: String? = nil
        public var connectionId: String? = nil
        /// The AWS account that will own the new virtual interface.
        public var ownerAccount: String? = nil
        public var asn: Int32? = nil
        public var addressFamily: String? = nil
        public var routeFilterPrefixes: [RouteFilterPrefix]? = nil
        public var location: String? = nil
        public var virtualInterfaceName: String? = nil
        public var authKey: String? = nil
        public var amazonAddress: String? = nil
        /// Information for generating the customer router configuration.
        public var customerRouterConfig: String? = nil
        public var bgpPeers: [BGPPeer]? = nil
        public var virtualGatewayId: String? = nil
        public var virtualInterfaceId: String? = nil
        public var virtualInterfaceState: String? = nil
        public var vlan: Int32? = nil

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceType: String? = nil, connectionId: String? = nil, ownerAccount: String? = nil, asn: Int32? = nil, addressFamily: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, location: String? = nil, virtualInterfaceName: String? = nil, authKey: String? = nil, amazonAddress: String? = nil, customerRouterConfig: String? = nil, bgpPeers: [BGPPeer]? = nil, virtualGatewayId: String? = nil, virtualInterfaceId: String? = nil, virtualInterfaceState: String? = nil, vlan: Int32? = nil) {
            self.customerAddress = customerAddress
            self.virtualInterfaceType = virtualInterfaceType
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
            self.asn = asn
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.location = location
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.customerRouterConfig = customerRouterConfig
            self.bgpPeers = bgpPeers
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceState = virtualInterfaceState
            self.vlan = vlan
        }

        public init(dictionary: [String: Any]) throws {
            self.customerAddress = dictionary["customerAddress"] as? String
            self.virtualInterfaceType = dictionary["virtualInterfaceType"] as? String
            self.connectionId = dictionary["connectionId"] as? String
            self.ownerAccount = dictionary["ownerAccount"] as? String
            self.asn = dictionary["asn"] as? Int32
            self.addressFamily = dictionary["addressFamily"] as? String
            if let routeFilterPrefixes = dictionary["routeFilterPrefixes"] as? [[String: Any]] {
                self.routeFilterPrefixes = try routeFilterPrefixes.map({ try RouteFilterPrefix(dictionary: $0) })
            }
            self.location = dictionary["location"] as? String
            self.virtualInterfaceName = dictionary["virtualInterfaceName"] as? String
            self.authKey = dictionary["authKey"] as? String
            self.amazonAddress = dictionary["amazonAddress"] as? String
            self.customerRouterConfig = dictionary["customerRouterConfig"] as? String
            if let bgpPeers = dictionary["bgpPeers"] as? [[String: Any]] {
                self.bgpPeers = try bgpPeers.map({ try BGPPeer(dictionary: $0) })
            }
            self.virtualGatewayId = dictionary["virtualGatewayId"] as? String
            self.virtualInterfaceId = dictionary["virtualInterfaceId"] as? String
            self.virtualInterfaceState = dictionary["virtualInterfaceState"] as? String
            self.vlan = dictionary["vlan"] as? Int32
        }
    }

    public struct ConfirmPublicVirtualInterfaceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceState: String? = nil

        public init() {}

        public init(virtualInterfaceState: String? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualInterfaceState = dictionary["virtualInterfaceState"] as? String
        }
    }

    public struct Locations: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of colocation hubs where network providers have equipment. Most regions have multiple locations available.
        public var locations: [Location]? = nil

        public init() {}

        public init(locations: [Location]? = nil) {
            self.locations = locations
        }

        public init(dictionary: [String: Any]) throws {
            if let locations = dictionary["locations"] as? [[String: Any]] {
                self.locations = try locations.map({ try Location(dictionary: $0) })
            }
        }
    }

    public struct CreateConnectionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionName: String = ""
        public var location: String = ""
        public var lagId: String? = nil
        public var bandwidth: String = ""

        public init() {}

        public init(connectionName: String, location: String, lagId: String? = nil, bandwidth: String) {
            self.connectionName = connectionName
            self.location = location
            self.lagId = lagId
            self.bandwidth = bandwidth
        }

        public init(dictionary: [String: Any]) throws {
            guard let connectionName = dictionary["connectionName"] as? String else { throw InitializableError.missingRequiredParam("connectionName") }
            self.connectionName = connectionName
            guard let location = dictionary["location"] as? String else { throw InitializableError.missingRequiredParam("location") }
            self.location = location
            self.lagId = dictionary["lagId"] as? String
            guard let bandwidth = dictionary["bandwidth"] as? String else { throw InitializableError.missingRequiredParam("bandwidth") }
            self.bandwidth = bandwidth
        }
    }

    public struct DescribeConnectionLoaRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the APN partner or service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        public var providerName: String? = nil
        public var connectionId: String = ""
        public var loaContentType: String? = nil

        public init() {}

        public init(providerName: String? = nil, connectionId: String, loaContentType: String? = nil) {
            self.providerName = providerName
            self.connectionId = connectionId
            self.loaContentType = loaContentType
        }

        public init(dictionary: [String: Any]) throws {
            self.providerName = dictionary["providerName"] as? String
            guard let connectionId = dictionary["connectionId"] as? String else { throw InitializableError.missingRequiredParam("connectionId") }
            self.connectionId = connectionId
            self.loaContentType = dictionary["loaContentType"] as? String
        }
    }

    public struct ConfirmPrivateVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceId: String = ""
        /// ID of the virtual private gateway that will be attached to the virtual interface.  A virtual private gateway can be managed via the Amazon Virtual Private Cloud (VPC) console or the EC2 CreateVpnGateway action. Default: None
        public var virtualGatewayId: String = ""

        public init() {}

        public init(virtualInterfaceId: String, virtualGatewayId: String) {
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualGatewayId = virtualGatewayId
        }

        public init(dictionary: [String: Any]) throws {
            guard let virtualInterfaceId = dictionary["virtualInterfaceId"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceId") }
            self.virtualInterfaceId = virtualInterfaceId
            guard let virtualGatewayId = dictionary["virtualGatewayId"] as? String else { throw InitializableError.missingRequiredParam("virtualGatewayId") }
            self.virtualGatewayId = virtualGatewayId
        }
    }

    public struct NewBGPPeer: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var amazonAddress: String? = nil
        public var customerAddress: String? = nil
        public var addressFamily: String? = nil
        public var asn: Int32? = nil
        public var authKey: String? = nil

        public init() {}

        public init(amazonAddress: String? = nil, customerAddress: String? = nil, addressFamily: String? = nil, asn: Int32? = nil, authKey: String? = nil) {
            self.amazonAddress = amazonAddress
            self.customerAddress = customerAddress
            self.addressFamily = addressFamily
            self.asn = asn
            self.authKey = authKey
        }

        public init(dictionary: [String: Any]) throws {
            self.amazonAddress = dictionary["amazonAddress"] as? String
            self.customerAddress = dictionary["customerAddress"] as? String
            self.addressFamily = dictionary["addressFamily"] as? String
            self.asn = dictionary["asn"] as? Int32
            self.authKey = dictionary["authKey"] as? String
        }
    }

    public struct ConfirmConnectionResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var connectionState: String? = nil

        public init() {}

        public init(connectionState: String? = nil) {
            self.connectionState = connectionState
        }

        public init(dictionary: [String: Any]) throws {
            self.connectionState = dictionary["connectionState"] as? String
        }
    }

    public struct RouteFilterPrefix: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// CIDR notation for the advertised route. Multiple routes are separated by commas. IPv6 CIDRs must be at least a /64 or shorter Example: 10.10.10.0/24,10.10.11.0/24,2001:db8::/64
        public var cidr: String? = nil

        public init() {}

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        public init(dictionary: [String: Any]) throws {
            self.cidr = dictionary["cidr"] as? String
        }
    }

    public struct DeleteVirtualInterfaceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualInterfaceId: String = ""

        public init() {}

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let virtualInterfaceId = dictionary["virtualInterfaceId"] as? String else { throw InitializableError.missingRequiredParam("virtualInterfaceId") }
            self.virtualInterfaceId = virtualInterfaceId
        }
    }

    public struct UntagResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Direct Connect resource.
        public var resourceArn: String = ""
        /// The list of tag keys to remove.
        public var tagKeys: [String] = []

        public init() {}

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
            guard let tagKeys = dictionary["tagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("tagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct VirtualGateway: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var virtualGatewayState: String? = nil
        public var virtualGatewayId: String? = nil

        public init() {}

        public init(virtualGatewayState: String? = nil, virtualGatewayId: String? = nil) {
            self.virtualGatewayState = virtualGatewayState
            self.virtualGatewayId = virtualGatewayId
        }

        public init(dictionary: [String: Any]) throws {
            self.virtualGatewayState = dictionary["virtualGatewayState"] as? String
            self.virtualGatewayId = dictionary["virtualGatewayId"] as? String
        }
    }

}