// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Directconnect {

    public struct CreateLagRequest: Serializable, Initializable {
        /// The AWS Direct Connect location in which the LAG should be allocated. Example: EqSV5 Default: None
        var location: String = ""
        /// The bandwidth of the individual physical connections bundled by the LAG. Default: None Available values: 1Gbps, 10Gbps
        var connectionsBandwidth: String = ""
        /// The ID of an existing connection to migrate to the LAG. Default: None
        var connectionId: String? = nil
        /// The number of physical connections initially provisioned and bundled by the LAG. Default: None
        var numberOfConnections: Int32 = 0
        /// The name of the LAG. Example: "3x10G LAG to AWS" Default: None
        var lagName: String = ""

        public init() {}

        public init(location: String, connectionsBandwidth: String, connectionId: String? = nil, numberOfConnections: Int32, lagName: String) {
            self.location = location
            self.connectionsBandwidth = connectionsBandwidth
            self.connectionId = connectionId
            self.numberOfConnections = numberOfConnections
            self.lagName = lagName
        }

    }

    public struct DescribeTagsResponse: Serializable, Initializable {
        /// Information about the tags.
        var resourceTags: [ResourceTag]? = nil

        public init() {}

        public init(resourceTags: [ResourceTag]? = nil) {
            self.resourceTags = resourceTags
        }

    }

    public struct VirtualGateways: Serializable, Initializable {
        /// A list of virtual private gateways.
        var virtualGateways: [VirtualGateway]? = nil

        public init() {}

        public init(virtualGateways: [VirtualGateway]? = nil) {
            self.virtualGateways = virtualGateways
        }

    }

    public struct TagResourceRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the Direct Connect resource. Example: arn:aws:directconnect:us-east-1:123456789012:dxcon/dxcon-fg5678gh
        var resourceArn: String = ""
        /// The list of tags to add.
        var tags: [Tag] = []

        public init() {}

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

    }

    public struct AllocateHostedConnectionRequest: Serializable, Initializable {
        /// The numeric account ID of the customer for whom the connection will be provisioned. Example: 123443215678 Default: None
        var ownerAccount: String = ""
        /// The name of the provisioned connection. Example: "500M Connection to AWS" Default: None
        var connectionName: String = ""
        /// The ID of the interconnect or LAG on which the connection will be provisioned. Example: dxcon-456abc78 or dxlag-abc123 Default: None
        var connectionId: String = ""
        /// The dedicated VLAN provisioned to the hosted connection. Example: 101 Default: None
        var vlan: Int32 = 0
        /// The bandwidth of the connection. Example: 500Mbps  Default: None Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps
        var bandwidth: String = ""

        public init() {}

        public init(ownerAccount: String, connectionName: String, connectionId: String, vlan: Int32, bandwidth: String) {
            self.ownerAccount = ownerAccount
            self.connectionName = connectionName
            self.connectionId = connectionId
            self.vlan = vlan
            self.bandwidth = bandwidth
        }

    }

    public struct Lag: Serializable, Initializable {
        /// A list of connections bundled by this LAG.
        var connections: [Connection]? = nil
        var location: String? = nil
        var lagId: String? = nil
        var lagState: String? = nil
        /// The AWS Direct Connection endpoint that hosts the LAG.
        var awsDevice: String? = nil
        /// The number of physical connections bundled by the LAG, up to a maximum of 10.
        var numberOfConnections: Int32? = nil
        /// The owner of the LAG.
        var ownerAccount: String? = nil
        var region: String? = nil
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational. If the number of operational connections drops below this setting, the LAG state changes to down. This value can help to ensure that a LAG is not overutilized if a significant number of its bundled connections go down.
        var minimumLinks: Int32? = nil
        /// Indicates whether the LAG can host other connections.  This is intended for use by AWS Direct Connect partners only. 
        var allowsHostedConnections: Bool? = nil
        /// The individual bandwidth of the physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps
        var connectionsBandwidth: String? = nil
        /// The name of the LAG.
        var lagName: String? = nil

        public init() {}

        public init(connections: [Connection]? = nil, location: String? = nil, lagId: String? = nil, lagState: String? = nil, awsDevice: String? = nil, numberOfConnections: Int32? = nil, ownerAccount: String? = nil, region: String? = nil, minimumLinks: Int32? = nil, allowsHostedConnections: Bool? = nil, connectionsBandwidth: String? = nil, lagName: String? = nil) {
            self.connections = connections
            self.location = location
            self.lagId = lagId
            self.lagState = lagState
            self.awsDevice = awsDevice
            self.numberOfConnections = numberOfConnections
            self.ownerAccount = ownerAccount
            self.region = region
            self.minimumLinks = minimumLinks
            self.allowsHostedConnections = allowsHostedConnections
            self.connectionsBandwidth = connectionsBandwidth
            self.lagName = lagName
        }

    }

    public struct DeleteVirtualInterfaceResponse: Serializable, Initializable {
        var virtualInterfaceState: String? = nil

        public init() {}

        public init(virtualInterfaceState: String? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

    }

    public struct AssociateVirtualInterfaceRequest: Serializable, Initializable {
        /// The ID of the virtual interface. Example: dxvif-123dfg56 Default: None
        var virtualInterfaceId: String = ""
        /// The ID of the LAG or connection with which to associate the virtual interface. Example: dxlag-abc123 or dxcon-abc123 Default: None
        var connectionId: String = ""

        public init() {}

        public init(virtualInterfaceId: String, connectionId: String) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

    }

    public struct CreateBGPPeerResponse: Serializable, Initializable {
        var virtualInterface: VirtualInterface? = nil

        public init() {}

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

    }

    public struct DescribeLagsRequest: Serializable, Initializable {
        /// The ID of the LAG. Example: dxlag-abc123 Default: None
        var lagId: String? = nil

        public init() {}

        public init(lagId: String? = nil) {
            self.lagId = lagId
        }

    }

    public struct DescribeTagsRequest: Serializable, Initializable {
        /// The Amazon Resource Names (ARNs) of the Direct Connect resources.
        var resourceArns: [String] = []

        public init() {}

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

    }

    public struct DescribeConnectionLoaResponse: Serializable, Initializable {
        var loa: Loa? = nil

        public init() {}

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

    }

    public struct NewPublicVirtualInterfaceAllocation: Serializable, Initializable {
        var customerAddress: String? = nil
        var virtualInterfaceName: String = ""
        var authKey: String? = nil
        var amazonAddress: String? = nil
        var asn: Int32 = 0
        var addressFamily: String? = nil
        var routeFilterPrefixes: [RouteFilterPrefix]? = nil
        var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.vlan = vlan
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The key of the tag.
        var key: String = ""
        /// The value of the tag.
        var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

    }

    public struct CreatePrivateVirtualInterfaceRequest: Serializable, Initializable {
        var connectionId: String = ""
        /// Detailed information for the private virtual interface to be created. Default: None
        var newPrivateVirtualInterface: NewPrivateVirtualInterface = NewPrivateVirtualInterface()

        public init() {}

        public init(connectionId: String, newPrivateVirtualInterface: NewPrivateVirtualInterface) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterface = newPrivateVirtualInterface
        }

    }

    public struct AssociateHostedConnectionRequest: Serializable, Initializable {
        /// The ID of the hosted connection. Example: dxcon-abc123 Default: None
        var connectionId: String = ""
        /// The ID of the interconnect or the LAG. Example: dxcon-abc123 or dxlag-abc123 Default: None
        var parentConnectionId: String = ""

        public init() {}

        public init(connectionId: String, parentConnectionId: String) {
            self.connectionId = connectionId
            self.parentConnectionId = parentConnectionId
        }

    }

    public struct DeleteInterconnectRequest: Serializable, Initializable {
        var interconnectId: String = ""

        public init() {}

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

    }

    public struct DescribeInterconnectLoaRequest: Serializable, Initializable {
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        var providerName: String? = nil
        var loaContentType: String? = nil
        var interconnectId: String = ""

        public init() {}

        public init(providerName: String? = nil, loaContentType: String? = nil, interconnectId: String) {
            self.providerName = providerName
            self.loaContentType = loaContentType
            self.interconnectId = interconnectId
        }

    }

    public struct NewPublicVirtualInterface: Serializable, Initializable {
        var customerAddress: String? = nil
        var virtualInterfaceName: String = ""
        var authKey: String? = nil
        var amazonAddress: String? = nil
        var asn: Int32 = 0
        var addressFamily: String? = nil
        var routeFilterPrefixes: [RouteFilterPrefix]? = nil
        var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.vlan = vlan
        }

    }

    public struct Interconnects: Serializable, Initializable {
        /// A list of interconnects.
        var interconnects: [Interconnect]? = nil

        public init() {}

        public init(interconnects: [Interconnect]? = nil) {
            self.interconnects = interconnects
        }

    }

    public struct AllocatePrivateVirtualInterfaceRequest: Serializable, Initializable {
        /// The connection ID on which the private virtual interface is provisioned. Default: None
        var connectionId: String = ""
        /// Detailed information for the private virtual interface to be provisioned. Default: None
        var newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation = NewPrivateVirtualInterfaceAllocation()
        /// The AWS account that will own the new private virtual interface. Default: None
        var ownerAccount: String = ""

        public init() {}

        public init(connectionId: String, newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation, ownerAccount: String) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation
            self.ownerAccount = ownerAccount
        }

    }

    public struct DeleteLagRequest: Serializable, Initializable {
        /// The ID of the LAG to delete. Example: dxlag-abc123 Default: None
        var lagId: String = ""

        public init() {}

        public init(lagId: String) {
            self.lagId = lagId
        }

    }

    public struct UpdateLagRequest: Serializable, Initializable {
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational. Default: None
        var minimumLinks: Int32? = nil
        /// The ID of the LAG to update. Example: dxlag-abc123 Default: None
        var lagId: String = ""
        /// The name for the LAG. Example: "3x10G LAG to AWS" Default: None
        var lagName: String? = nil

        public init() {}

        public init(minimumLinks: Int32? = nil, lagId: String, lagName: String? = nil) {
            self.minimumLinks = minimumLinks
            self.lagId = lagId
            self.lagName = lagName
        }

    }

    public struct NewPrivateVirtualInterface: Serializable, Initializable {
        var customerAddress: String? = nil
        var virtualInterfaceName: String = ""
        var authKey: String? = nil
        var amazonAddress: String? = nil
        var asn: Int32 = 0
        var addressFamily: String? = nil
        var virtualGatewayId: String = ""
        var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, virtualGatewayId: String, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.virtualGatewayId = virtualGatewayId
            self.vlan = vlan
        }

    }

    public struct DescribeHostedConnectionsRequest: Serializable, Initializable {
        /// The ID of the interconnect or LAG on which the hosted connections are provisioned. Example: dxcon-abc123 or dxlag-abc123 Default: None
        var connectionId: String = ""

        public init() {}

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

    }

    public struct DeleteConnectionRequest: Serializable, Initializable {
        var connectionId: String = ""

        public init() {}

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

    }

    public struct NewPrivateVirtualInterfaceAllocation: Serializable, Initializable {
        var customerAddress: String? = nil
        var virtualInterfaceName: String = ""
        var authKey: String? = nil
        var amazonAddress: String? = nil
        var asn: Int32 = 0
        var addressFamily: String? = nil
        var vlan: Int32 = 0

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceName: String, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32, addressFamily: String? = nil, vlan: Int32) {
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
            self.vlan = vlan
        }

    }

    public struct CreatePublicVirtualInterfaceRequest: Serializable, Initializable {
        var connectionId: String = ""
        /// Detailed information for the public virtual interface to be created. Default: None
        var newPublicVirtualInterface: NewPublicVirtualInterface = NewPublicVirtualInterface()

        public init() {}

        public init(connectionId: String, newPublicVirtualInterface: NewPublicVirtualInterface) {
            self.connectionId = connectionId
            self.newPublicVirtualInterface = newPublicVirtualInterface
        }

    }

    public struct DescribeInterconnectsRequest: Serializable, Initializable {
        var interconnectId: String? = nil

        public init() {}

        public init(interconnectId: String? = nil) {
            self.interconnectId = interconnectId
        }

    }

    public struct ResourceTag: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the Direct Connect resource.
        var resourceArn: String? = nil
        /// The tags.
        var tags: [Tag]? = nil

        public init() {}

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

    }

    public struct ConfirmConnectionRequest: Serializable, Initializable {
        var connectionId: String = ""

        public init() {}

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

    }

    public struct AssociateConnectionWithLagRequest: Serializable, Initializable {
        /// The ID of the connection. Example: dxcon-abc123 Default: None
        var connectionId: String = ""
        /// The ID of the LAG with which to associate the connection. Example: dxlag-abc123 Default: None
        var lagId: String = ""

        public init() {}

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

    }

    public struct AllocatePublicVirtualInterfaceRequest: Serializable, Initializable {
        /// Detailed information for the public virtual interface to be provisioned. Default: None
        var newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation = NewPublicVirtualInterfaceAllocation()
        /// The connection ID on which the public virtual interface is provisioned. Default: None
        var connectionId: String = ""
        /// The AWS account that will own the new public virtual interface. Default: None
        var ownerAccount: String = ""

        public init() {}

        public init(newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation, connectionId: String, ownerAccount: String) {
            self.newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
        }

    }

    public struct ConfirmPublicVirtualInterfaceRequest: Serializable, Initializable {
        var virtualInterfaceId: String = ""

        public init() {}

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

    }

    public struct CreateInterconnectRequest: Serializable, Initializable {
        /// Where the interconnect is located Example: EqSV5 Default: None
        var location: String = ""
        var lagId: String? = nil
        /// The name of the interconnect. Example: "1G Interconnect to AWS" Default: None
        var interconnectName: String = ""
        /// The port bandwidth Example: 1Gbps Default: None Available values: 1Gbps,10Gbps
        var bandwidth: String = ""

        public init() {}

        public init(location: String, lagId: String? = nil, interconnectName: String, bandwidth: String) {
            self.location = location
            self.lagId = lagId
            self.interconnectName = interconnectName
            self.bandwidth = bandwidth
        }

    }

    public struct Connections: Serializable, Initializable {
        /// A list of connections.
        var connections: [Connection]? = nil

        public init() {}

        public init(connections: [Connection]? = nil) {
            self.connections = connections
        }

    }

    public struct DescribeInterconnectLoaResponse: Serializable, Initializable {
        var loa: Loa? = nil

        public init() {}

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

    }

    public struct Connection: Serializable, Initializable {
        /// The time of the most recent call to DescribeLoa for this connection.
        var loaIssueTime: Date? = nil
        /// Bandwidth of the connection. Example: 1Gbps (for regular connections), or 500Mbps (for hosted connections) Default: None
        var bandwidth: String? = nil
        var location: String? = nil
        var lagId: String? = nil
        /// The Direct Connection endpoint which the physical connection terminates on.
        var awsDevice: String? = nil
        var connectionId: String? = nil
        var region: String? = nil
        /// The AWS account that will own the new connection.
        var ownerAccount: String? = nil
        var connectionState: String? = nil
        var connectionName: String? = nil
        var vlan: Int32? = nil
        /// The name of the AWS Direct Connect service provider associated with the connection.
        var partnerName: String? = nil

        public init() {}

        public init(loaIssueTime: Date? = nil, bandwidth: String? = nil, location: String? = nil, lagId: String? = nil, awsDevice: String? = nil, connectionId: String? = nil, region: String? = nil, ownerAccount: String? = nil, connectionState: String? = nil, connectionName: String? = nil, vlan: Int32? = nil, partnerName: String? = nil) {
            self.loaIssueTime = loaIssueTime
            self.bandwidth = bandwidth
            self.location = location
            self.lagId = lagId
            self.awsDevice = awsDevice
            self.connectionId = connectionId
            self.region = region
            self.ownerAccount = ownerAccount
            self.connectionState = connectionState
            self.connectionName = connectionName
            self.vlan = vlan
            self.partnerName = partnerName
        }

    }

    public struct DescribeConnectionsRequest: Serializable, Initializable {
        var connectionId: String? = nil

        public init() {}

        public init(connectionId: String? = nil) {
            self.connectionId = connectionId
        }

    }

    public struct Lags: Serializable, Initializable {
        /// A list of LAGs.
        var lags: [Lag]? = nil

        public init() {}

        public init(lags: [Lag]? = nil) {
            self.lags = lags
        }

    }

    public struct DeleteInterconnectResponse: Serializable, Initializable {
        var interconnectState: String? = nil

        public init() {}

        public init(interconnectState: String? = nil) {
            self.interconnectState = interconnectState
        }

    }

    public struct TagResourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct BGPPeer: Serializable, Initializable {
        var customerAddress: String? = nil
        var bgpStatus: String? = nil
        var bgpPeerState: String? = nil
        var authKey: String? = nil
        var amazonAddress: String? = nil
        var asn: Int32? = nil
        var addressFamily: String? = nil

        public init() {}

        public init(customerAddress: String? = nil, bgpStatus: String? = nil, bgpPeerState: String? = nil, authKey: String? = nil, amazonAddress: String? = nil, asn: Int32? = nil, addressFamily: String? = nil) {
            self.customerAddress = customerAddress
            self.bgpStatus = bgpStatus
            self.bgpPeerState = bgpPeerState
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.addressFamily = addressFamily
        }

    }

    public struct DisassociateConnectionFromLagRequest: Serializable, Initializable {
        /// The ID of the connection to disassociate from the LAG. Example: dxcon-abc123 Default: None
        var connectionId: String = ""
        /// The ID of the LAG. Example: dxlag-abc123 Default: None
        var lagId: String = ""

        public init() {}

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

    }

    public struct CreateBGPPeerRequest: Serializable, Initializable {
        /// The ID of the virtual interface on which the BGP peer will be provisioned. Example: dxvif-456abc78 Default: None
        var virtualInterfaceId: String? = nil
        /// Detailed information for the BGP peer to be created. Default: None
        var newBGPPeer: NewBGPPeer? = nil

        public init() {}

        public init(virtualInterfaceId: String? = nil, newBGPPeer: NewBGPPeer? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.newBGPPeer = newBGPPeer
        }

    }

    public struct ConfirmPrivateVirtualInterfaceResponse: Serializable, Initializable {
        var virtualInterfaceState: String? = nil

        public init() {}

        public init(virtualInterfaceState: String? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

    }

    public struct DeleteBGPPeerResponse: Serializable, Initializable {
        var virtualInterface: VirtualInterface? = nil

        public init() {}

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

    }

    public struct DescribeVirtualInterfacesRequest: Serializable, Initializable {
        var virtualInterfaceId: String? = nil
        var connectionId: String? = nil

        public init() {}

        public init(virtualInterfaceId: String? = nil, connectionId: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

    }

    public struct DescribeLoaRequest: Serializable, Initializable {
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        var providerName: String? = nil
        /// The ID of a connection, LAG, or interconnect for which to get the LOA-CFA information. Example: dxcon-abc123 or dxlag-abc123 Default: None
        var connectionId: String = ""
        /// A standard media type indicating the content type of the LOA-CFA document. Currently, the only supported value is "application/pdf". Default: application/pdf
        var loaContentType: String? = nil

        public init() {}

        public init(providerName: String? = nil, connectionId: String, loaContentType: String? = nil) {
            self.providerName = providerName
            self.connectionId = connectionId
            self.loaContentType = loaContentType
        }

    }

    public struct DeleteBGPPeerRequest: Serializable, Initializable {
        /// The ID of the virtual interface from which the BGP peer will be deleted. Example: dxvif-456abc78 Default: None
        var virtualInterfaceId: String? = nil
        var asn: Int32? = nil
        var customerAddress: String? = nil

        public init() {}

        public init(virtualInterfaceId: String? = nil, asn: Int32? = nil, customerAddress: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.asn = asn
            self.customerAddress = customerAddress
        }

    }

    public struct Interconnect: Serializable, Initializable {
        /// The time of the most recent call to DescribeInterconnectLoa for this Interconnect.
        var loaIssueTime: Date? = nil
        var interconnectState: String? = nil
        var location: String? = nil
        /// The Direct Connection endpoint which the physical connection terminates on.
        var awsDevice: String? = nil
        var lagId: String? = nil
        var region: String? = nil
        var interconnectName: String? = nil
        var interconnectId: String? = nil
        var bandwidth: String? = nil

        public init() {}

        public init(loaIssueTime: Date? = nil, interconnectState: String? = nil, location: String? = nil, awsDevice: String? = nil, lagId: String? = nil, region: String? = nil, interconnectName: String? = nil, interconnectId: String? = nil, bandwidth: String? = nil) {
            self.loaIssueTime = loaIssueTime
            self.interconnectState = interconnectState
            self.location = location
            self.awsDevice = awsDevice
            self.lagId = lagId
            self.region = region
            self.interconnectName = interconnectName
            self.interconnectId = interconnectId
            self.bandwidth = bandwidth
        }

    }

    public struct AllocateConnectionOnInterconnectRequest: Serializable, Initializable {
        /// Bandwidth of the connection. Example: "500Mbps" Default: None Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps
        var bandwidth: String = ""
        /// Name of the provisioned connection. Example: "500M Connection to AWS" Default: None
        var connectionName: String = ""
        /// ID of the interconnect on which the connection will be provisioned. Example: dxcon-456abc78 Default: None
        var interconnectId: String = ""
        /// The dedicated VLAN provisioned to the connection. Example: 101 Default: None
        var vlan: Int32 = 0
        /// Numeric account Id of the customer for whom the connection will be provisioned. Example: 123443215678 Default: None
        var ownerAccount: String = ""

        public init() {}

        public init(bandwidth: String, connectionName: String, interconnectId: String, vlan: Int32, ownerAccount: String) {
            self.bandwidth = bandwidth
            self.connectionName = connectionName
            self.interconnectId = interconnectId
            self.vlan = vlan
            self.ownerAccount = ownerAccount
        }

    }

    public struct DescribeConnectionsOnInterconnectRequest: Serializable, Initializable {
        /// ID of the interconnect on which a list of connection is provisioned. Example: dxcon-abc123 Default: None
        var interconnectId: String = ""

        public init() {}

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

    }

    public struct VirtualInterfaces: Serializable, Initializable {
        /// A list of virtual interfaces.
        var virtualInterfaces: [VirtualInterface]? = nil

        public init() {}

        public init(virtualInterfaces: [VirtualInterface]? = nil) {
            self.virtualInterfaces = virtualInterfaces
        }

    }

    public struct UntagResourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct Location: Serializable, Initializable {
        /// The code used to indicate the AWS Direct Connect location.
        var locationCode: String? = nil
        /// The name of the AWS Direct Connect location. The name includes the colocation partner name and the physical site of the lit building.
        var locationName: String? = nil

        public init() {}

        public init(locationCode: String? = nil, locationName: String? = nil) {
            self.locationCode = locationCode
            self.locationName = locationName
        }

    }

    public struct Loa: Serializable, Initializable {
        var loaContentType: String? = nil
        var loaContent: Data? = nil

        public init() {}

        public init(loaContentType: String? = nil, loaContent: Data? = nil) {
            self.loaContentType = loaContentType
            self.loaContent = loaContent
        }

    }

    public struct VirtualInterface: Serializable, Initializable {
        var customerAddress: String? = nil
        var virtualInterfaceType: String? = nil
        var connectionId: String? = nil
        /// The AWS account that will own the new virtual interface.
        var ownerAccount: String? = nil
        var asn: Int32? = nil
        var addressFamily: String? = nil
        var routeFilterPrefixes: [RouteFilterPrefix]? = nil
        var location: String? = nil
        var virtualInterfaceName: String? = nil
        var authKey: String? = nil
        var amazonAddress: String? = nil
        /// Information for generating the customer router configuration.
        var customerRouterConfig: String? = nil
        var bgpPeers: [BGPPeer]? = nil
        var virtualGatewayId: String? = nil
        var virtualInterfaceId: String? = nil
        var virtualInterfaceState: String? = nil
        var vlan: Int32? = nil

        public init() {}

        public init(customerAddress: String? = nil, virtualInterfaceType: String? = nil, connectionId: String? = nil, ownerAccount: String? = nil, asn: Int32? = nil, addressFamily: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, location: String? = nil, virtualInterfaceName: String? = nil, authKey: String? = nil, amazonAddress: String? = nil, customerRouterConfig: String? = nil, bgpPeers: [BGPPeer]? = nil, virtualGatewayId: String? = nil, virtualInterfaceId: String? = nil, virtualInterfaceState: String? = nil, vlan: Int32? = nil) {
            self.customerAddress = customerAddress
            self.virtualInterfaceType = virtualInterfaceType
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
            self.asn = asn
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.location = location
            self.virtualInterfaceName = virtualInterfaceName
            self.authKey = authKey
            self.amazonAddress = amazonAddress
            self.customerRouterConfig = customerRouterConfig
            self.bgpPeers = bgpPeers
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceState = virtualInterfaceState
            self.vlan = vlan
        }

    }

    public struct ConfirmPublicVirtualInterfaceResponse: Serializable, Initializable {
        var virtualInterfaceState: String? = nil

        public init() {}

        public init(virtualInterfaceState: String? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

    }

    public struct Locations: Serializable, Initializable {
        /// A list of colocation hubs where network providers have equipment. Most regions have multiple locations available.
        var locations: [Location]? = nil

        public init() {}

        public init(locations: [Location]? = nil) {
            self.locations = locations
        }

    }

    public struct CreateConnectionRequest: Serializable, Initializable {
        var connectionName: String = ""
        var location: String = ""
        var lagId: String? = nil
        var bandwidth: String = ""

        public init() {}

        public init(connectionName: String, location: String, lagId: String? = nil, bandwidth: String) {
            self.connectionName = connectionName
            self.location = location
            self.lagId = lagId
            self.bandwidth = bandwidth
        }

    }

    public struct DescribeConnectionLoaRequest: Serializable, Initializable {
        /// The name of the APN partner or service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        var providerName: String? = nil
        var connectionId: String = ""
        var loaContentType: String? = nil

        public init() {}

        public init(providerName: String? = nil, connectionId: String, loaContentType: String? = nil) {
            self.providerName = providerName
            self.connectionId = connectionId
            self.loaContentType = loaContentType
        }

    }

    public struct ConfirmPrivateVirtualInterfaceRequest: Serializable, Initializable {
        var virtualInterfaceId: String = ""
        /// ID of the virtual private gateway that will be attached to the virtual interface.  A virtual private gateway can be managed via the Amazon Virtual Private Cloud (VPC) console or the EC2 CreateVpnGateway action. Default: None
        var virtualGatewayId: String = ""

        public init() {}

        public init(virtualInterfaceId: String, virtualGatewayId: String) {
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualGatewayId = virtualGatewayId
        }

    }

    public struct NewBGPPeer: Serializable, Initializable {
        var amazonAddress: String? = nil
        var customerAddress: String? = nil
        var addressFamily: String? = nil
        var asn: Int32? = nil
        var authKey: String? = nil

        public init() {}

        public init(amazonAddress: String? = nil, customerAddress: String? = nil, addressFamily: String? = nil, asn: Int32? = nil, authKey: String? = nil) {
            self.amazonAddress = amazonAddress
            self.customerAddress = customerAddress
            self.addressFamily = addressFamily
            self.asn = asn
            self.authKey = authKey
        }

    }

    public struct ConfirmConnectionResponse: Serializable, Initializable {
        var connectionState: String? = nil

        public init() {}

        public init(connectionState: String? = nil) {
            self.connectionState = connectionState
        }

    }

    public struct RouteFilterPrefix: Serializable, Initializable {
        /// CIDR notation for the advertised route. Multiple routes are separated by commas. IPv6 CIDRs must be at least a /64 or shorter Example: 10.10.10.0/24,10.10.11.0/24,2001:db8::/64
        var cidr: String? = nil

        public init() {}

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

    }

    public struct DeleteVirtualInterfaceRequest: Serializable, Initializable {
        var virtualInterfaceId: String = ""

        public init() {}

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

    }

    public struct UntagResourceRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the Direct Connect resource.
        var resourceArn: String = ""
        /// The list of tag keys to remove.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

    }

    public struct VirtualGateway: Serializable, Initializable {
        var virtualGatewayState: String? = nil
        var virtualGatewayId: String? = nil

        public init() {}

        public init(virtualGatewayState: String? = nil, virtualGatewayId: String? = nil) {
            self.virtualGatewayState = virtualGatewayState
            self.virtualGatewayId = virtualGatewayId
        }

    }

}