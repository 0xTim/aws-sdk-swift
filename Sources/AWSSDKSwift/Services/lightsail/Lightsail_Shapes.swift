// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Lightsail {

    public struct GetOperationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get operations request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct GetInstanceStateResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The state of the instance.
        public var state: InstanceState? = nil

        public init() {}

        public init(state: InstanceState? = nil) {
            self.state = state
        }

    }

    public struct GetDomainsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about each of the domain entries in the user's account.
        public var domains: [Domain]? = nil
        /// A token used for advancing to the next page of results from your get active names request.
        public var nextPageToken: String? = nil

        public init() {}

        public init(domains: [Domain]? = nil, nextPageToken: String? = nil) {
            self.domains = domains
            self.nextPageToken = nextPageToken
        }

    }

    public struct GetInstanceMetricDataResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your get instance metric data request.
        public var metricData: [MetricDatapoint]? = nil
        /// The metric name to return data for. 
        public var metricName: String? = nil

        public init() {}

        public init(metricData: [MetricDatapoint]? = nil, metricName: String? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

    }

    public struct CreateDomainResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the domain resource you created.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct UnpeerVpcRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DeleteDomainResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your delete domain request.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct CreateKeyPairResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the new key pair you just created.
        public var keyPair: KeyPair? = nil
        /// A base64-encoded public key of the ssh-rsa type.
        public var publicKeyBase64: String? = nil
        /// A base64-encoded RSA private key.
        public var privateKeyBase64: String? = nil
        /// An array of key-value pairs containing information about the results of your create key pair request.
        public var operation: Operation? = nil

        public init() {}

        public init(keyPair: KeyPair? = nil, publicKeyBase64: String? = nil, privateKeyBase64: String? = nil, operation: Operation? = nil) {
            self.keyPair = keyPair
            self.publicKeyBase64 = publicKeyBase64
            self.privateKeyBase64 = privateKeyBase64
            self.operation = operation
        }

    }

    public struct GetOperationsForResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get operations for resource request.
        public var pageToken: String? = nil
        /// The name of the resource for which you are requesting information.
        public var resourceName: String = ""

        public init() {}

        public init(pageToken: String? = nil, resourceName: String) {
            self.pageToken = pageToken
            self.resourceName = resourceName
        }

    }

    public struct AttachStaticIpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the static IP.
        public var staticIpName: String = ""
        /// The instance name to which you want to attach the static IP address.
        public var instanceName: String = ""

        public init() {}

        public init(staticIpName: String, instanceName: String) {
            self.staticIpName = staticIpName
            self.instanceName = instanceName
        }

    }

    public struct InstanceSnapshot: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The state the snapshot is in.
        public var state: String? = nil
        /// The name of the snapshot.
        public var name: String? = nil
        /// The type of resource (usually InstanceSnapshot).
        public var resourceType: String? = nil
        /// The timestamp when the snapshot was created (e.g., 1479907467.024).
        public var createdAt: Date? = nil
        /// The bundle ID from which you created the snapshot (e.g., micro_1_0).
        public var fromBundleId: String? = nil
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: String? = nil
        /// The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., arn:aws:lightsail:us-east-1:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE).
        public var fromInstanceArn: String? = nil
        /// The Amazon Resource Name (ARN) of the snapshot (e.g., arn:aws:lightsail:us-east-1:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE).
        public var arn: String? = nil
        /// The blueprint ID from which you created the snapshot (e.g., os_debian_8_3). A blueprint is a virtual private server (or instance) image used to create instances quickly.
        public var fromBlueprintId: String? = nil
        /// The size in GB of the SSD.
        public var sizeInGb: Int32? = nil
        /// The region name and availability zone where you created the snapshot.
        public var location: ResourceLocation? = nil
        /// The instance from which the snapshot was created.
        public var fromInstanceName: String? = nil
        /// The progress of the snapshot.
        public var progress: String? = nil

        public init() {}

        public init(state: String? = nil, name: String? = nil, resourceType: String? = nil, createdAt: Date? = nil, fromBundleId: String? = nil, supportCode: String? = nil, fromInstanceArn: String? = nil, arn: String? = nil, fromBlueprintId: String? = nil, sizeInGb: Int32? = nil, location: ResourceLocation? = nil, fromInstanceName: String? = nil, progress: String? = nil) {
            self.state = state
            self.name = name
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.fromBundleId = fromBundleId
            self.supportCode = supportCode
            self.fromInstanceArn = fromInstanceArn
            self.arn = arn
            self.fromBlueprintId = fromBlueprintId
            self.sizeInGb = sizeInGb
            self.location = location
            self.fromInstanceName = fromInstanceName
            self.progress = progress
        }

    }

    public struct InstanceAccessDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey).
        public var privateKey: String? = nil
        /// The public IP address of the Amazon Lightsail instance.
        public var ipAddress: String? = nil
        /// The name of this Amazon Lightsail instance.
        public var instanceName: String? = nil
        /// The protocol for these Amazon Lightsail instance access details.
        public var `protocol`: String? = nil
        /// For RDP access, the temporary password of the Amazon EC2 instance.
        public var password: String? = nil
        /// For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey-cert.pub.
        public var certKey: String? = nil
        /// For SSH access, the date on which the temporary keys expire.
        public var expiresAt: Date? = nil
        /// The user name to use when logging in to the Amazon Lightsail instance.
        public var username: String? = nil

        public init() {}

        public init(privateKey: String? = nil, ipAddress: String? = nil, instanceName: String? = nil, protocol: String? = nil, password: String? = nil, certKey: String? = nil, expiresAt: Date? = nil, username: String? = nil) {
            self.privateKey = privateKey
            self.ipAddress = ipAddress
            self.instanceName = instanceName
            self.`protocol` = `protocol`
            self.password = password
            self.certKey = certKey
            self.expiresAt = expiresAt
            self.username = username
        }

    }

    public struct GetBundlesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get bundles request.
        public var pageToken: String? = nil
        /// A Boolean value that indicates whether to include inactive bundle results in your request.
        public var includeInactive: Bool? = nil

        public init() {}

        public init(pageToken: String? = nil, includeInactive: Bool? = nil) {
            self.pageToken = pageToken
            self.includeInactive = includeInactive
        }

    }

    public struct DeleteDomainEntryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your delete domain entry request.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct GetRegionsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about your get regions request.
        public var regions: [Region]? = nil

        public init() {}

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

    }

    public struct GetInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the specified instance.
        public var instance: Instance? = nil

        public init() {}

        public init(instance: Instance? = nil) {
            self.instance = instance
        }

    }

    public struct DeleteInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your delete instance request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct GetInstanceAccessDetailsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The protocol to use to connect to your instance. Defaults to ssh.
        public var `protocol`: String? = nil
        /// The name of the instance to access.
        public var instanceName: String = ""

        public init() {}

        public init(protocol: String? = nil, instanceName: String) {
            self.`protocol` = `protocol`
            self.instanceName = instanceName
        }

    }

    public struct GetInstanceSnapshotsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get instance snapshots request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs containing information about the results of your get instance snapshots request.
        public var instanceSnapshots: [InstanceSnapshot]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, instanceSnapshots: [InstanceSnapshot]? = nil) {
            self.nextPageToken = nextPageToken
            self.instanceSnapshots = instanceSnapshots
        }

    }

    public struct StaticIp: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The instance where the static IP is attached (e.g., Amazon_Linux-1GB-Virginia-1).
        public var attachedTo: String? = nil
        /// A Boolean value indicating whether the static IP is attached.
        public var isAttached: Bool? = nil
        /// The region and Availability Zone where the static IP was created.
        public var location: ResourceLocation? = nil
        /// The resource type (usually StaticIp).
        public var resourceType: String? = nil
        /// The static IP address.
        public var ipAddress: String? = nil
        /// The name of the static IP (e.g., StaticIP-Virginia-EXAMPLE).
        public var name: String? = nil
        /// The timestamp when the static IP was created (e.g., 1479735304.222).
        public var createdAt: Date? = nil
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: String? = nil
        /// The Amazon Resource Name (ARN) of the static IP (e.g., arn:aws:lightsail:us-east-1:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE).
        public var arn: String? = nil

        public init() {}

        public init(attachedTo: String? = nil, isAttached: Bool? = nil, location: ResourceLocation? = nil, resourceType: String? = nil, ipAddress: String? = nil, name: String? = nil, createdAt: Date? = nil, supportCode: String? = nil, arn: String? = nil) {
            self.attachedTo = attachedTo
            self.isAttached = isAttached
            self.location = location
            self.resourceType = resourceType
            self.ipAddress = ipAddress
            self.name = name
            self.createdAt = createdAt
            self.supportCode = supportCode
            self.arn = arn
        }

    }

    public struct GetInstancePortStatesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the port states resulting from your request.
        public var portStates: [String]? = nil

        public init() {}

        public init(portStates: [String]? = nil) {
            self.portStates = portStates
        }

    }

    public struct KeyPair: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The friendly name of the SSH key pair.
        public var name: String? = nil
        /// The region name and Availability Zone where the key pair was created.
        public var location: ResourceLocation? = nil
        /// The resource type (usually KeyPair).
        public var resourceType: String? = nil
        /// The timestamp when the key pair was created (e.g., 1479816991.349).
        public var createdAt: Date? = nil
        /// The RSA fingerprint of the key pair.
        public var fingerprint: String? = nil
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: String? = nil
        /// The Amazon Resource Name (ARN) of the key pair (e.g., arn:aws:lightsail:us-east-1:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE).
        public var arn: String? = nil

        public init() {}

        public init(name: String? = nil, location: ResourceLocation? = nil, resourceType: String? = nil, createdAt: Date? = nil, fingerprint: String? = nil, supportCode: String? = nil, arn: String? = nil) {
            self.name = name
            self.location = location
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.fingerprint = fingerprint
            self.supportCode = supportCode
            self.arn = arn
        }

    }

    public struct GetStaticIpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the static IP in Lightsail.
        public var staticIpName: String = ""

        public init() {}

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

    }

    public struct GetKeyPairsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get key pairs request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs containing information about the key pairs.
        public var keyPairs: [KeyPair]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, keyPairs: [KeyPair]? = nil) {
            self.nextPageToken = nextPageToken
            self.keyPairs = keyPairs
        }

    }

    public struct Bundle: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A friendly name for the bundle (e.g., Micro).
        public var name: String? = nil
        /// The Amazon EC2 instance type (e.g., t2.micro).
        public var instanceType: String? = nil
        /// A Boolean value indicating whether the bundle is active.
        public var isActive: Bool? = nil
        /// The amount of RAM in GB (e.g., 2.0).
        public var ramSizeInGb: Float? = nil
        /// The number of vCPUs included in the bundle (e.g., 2).
        public var cpuCount: Int32? = nil
        /// The power of the bundle (e.g., 500).
        public var power: Int32? = nil
        /// The bundle ID (e.g., micro_1_0).
        public var bundleId: String? = nil
        /// The data transfer rate per month in GB (e.g., 2000).
        public var transferPerMonthInGb: Int32? = nil
        /// The size of the SSD (e.g., 30).
        public var diskSizeInGb: Int32? = nil
        /// The price in US dollars (e.g., 5.0).
        public var price: Float? = nil

        public init() {}

        public init(name: String? = nil, instanceType: String? = nil, isActive: Bool? = nil, ramSizeInGb: Float? = nil, cpuCount: Int32? = nil, power: Int32? = nil, bundleId: String? = nil, transferPerMonthInGb: Int32? = nil, diskSizeInGb: Int32? = nil, price: Float? = nil) {
            self.name = name
            self.instanceType = instanceType
            self.isActive = isActive
            self.ramSizeInGb = ramSizeInGb
            self.cpuCount = cpuCount
            self.power = power
            self.bundleId = bundleId
            self.transferPerMonthInGb = transferPerMonthInGb
            self.diskSizeInGb = diskSizeInGb
            self.price = price
        }

    }

    public struct PeerVpcRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct RebootInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct CreateInstancesFromSnapshotRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Availability Zone where you want to create your instances. Use the following formatting: us-east-1a (case sensitive).
        public var availabilityZone: String = ""
        /// The names for your new instances.
        public var instanceNames: [String] = []
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public var bundleId: String = ""
        /// The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots.
        public var instanceSnapshotName: String = ""
        /// You can create a launch script that configures a server with additional user data. For example, apt-get –y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public var userData: String? = nil
        /// The name for your key pair.
        public var keyPairName: String? = nil

        public init() {}

        public init(availabilityZone: String, instanceNames: [String], bundleId: String, instanceSnapshotName: String, userData: String? = nil, keyPairName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceNames = instanceNames
            self.bundleId = bundleId
            self.instanceSnapshotName = instanceSnapshotName
            self.userData = userData
            self.keyPairName = keyPairName
        }

    }

    public struct GetOperationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A GUID used to identify the operation.
        public var operationId: String = ""

        public init() {}

        public init(operationId: String) {
            self.operationId = operationId
        }

    }

    public struct ImportKeyPairResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct DeleteDomainRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The specific domain name to delete.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct GetKeyPairRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the key pair for which you are requesting information.
        public var keyPairName: String = ""

        public init() {}

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

    }

    public struct ReleaseStaticIpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the static IP to delete.
        public var staticIpName: String = ""

        public init() {}

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

    }

    public struct IsVpcPeeredResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Returns true if the Lightsail VPC is peered; otherwise, false.
        public var isPeered: Bool? = nil

        public init() {}

        public init(isPeered: Bool? = nil) {
            self.isPeered = isPeered
        }

    }

    public struct OpenInstancePublicPortsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance for which you want to open the public ports.
        public var instanceName: String = ""
        /// An array of key-value pairs containing information about the port mappings.
        public var portInfo: PortInfo = PortInfo()

        public init() {}

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

    }

    public struct CreateInstancesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your create instances request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct GetInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct CloseInstancePublicPortsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance on which you're attempting to close the public ports.
        public var instanceName: String = ""
        /// Information about the public port you are trying to close.
        public var portInfo: PortInfo = PortInfo()

        public init() {}

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status code and the state (e.g., running) for the instance.
        public var state: InstanceState? = nil
        /// The name the user gave the instance (e.g., Amazon_Linux-1GB-Virginia-1).
        public var name: String? = nil
        /// The type of resource (usually Instance).
        public var resourceType: String? = nil
        /// The public IP address of the instance.
        public var publicIpAddress: String? = nil
        /// The private IP address of the instance.
        public var privateIpAddress: String? = nil
        /// The timestamp when the instance was created (e.g., 1479734909.17).
        public var createdAt: Date? = nil
        /// The name of the SSH key being used to connect to the instance (e.g., LightsailDefaultKeyPair).
        public var sshKeyName: String? = nil
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: String? = nil
        /// The bundle for the instance (e.g., micro_1_0).
        public var bundleId: String? = nil
        /// A Boolean value indicating whether this instance has a static IP assigned to it.
        public var isStaticIp: Bool? = nil
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public var blueprintName: String? = nil
        /// The user name for connecting to the instance (e.g., ec2-user).
        public var username: String? = nil
        /// The IPv6 address of the instance.
        public var ipv6Address: String? = nil
        /// The size of the vCPU and the amount of RAM for the instance.
        public var hardware: InstanceHardware? = nil
        /// The blueprint ID (e.g., os_amlinux_2016_03).
        public var blueprintId: String? = nil
        /// The region name and availability zone where the instance is located.
        public var location: ResourceLocation? = nil
        /// The Amazon Resource Name (ARN) of the instance (e.g., arn:aws:lightsail:us-east-1:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE).
        public var arn: String? = nil
        /// Information about the public ports and monthly data transfer rates for the instance.
        public var networking: InstanceNetworking? = nil

        public init() {}

        public init(state: InstanceState? = nil, name: String? = nil, resourceType: String? = nil, publicIpAddress: String? = nil, privateIpAddress: String? = nil, createdAt: Date? = nil, sshKeyName: String? = nil, supportCode: String? = nil, bundleId: String? = nil, isStaticIp: Bool? = nil, blueprintName: String? = nil, username: String? = nil, ipv6Address: String? = nil, hardware: InstanceHardware? = nil, blueprintId: String? = nil, location: ResourceLocation? = nil, arn: String? = nil, networking: InstanceNetworking? = nil) {
            self.state = state
            self.name = name
            self.resourceType = resourceType
            self.publicIpAddress = publicIpAddress
            self.privateIpAddress = privateIpAddress
            self.createdAt = createdAt
            self.sshKeyName = sshKeyName
            self.supportCode = supportCode
            self.bundleId = bundleId
            self.isStaticIp = isStaticIp
            self.blueprintName = blueprintName
            self.username = username
            self.ipv6Address = ipv6Address
            self.hardware = hardware
            self.blueprintId = blueprintId
            self.location = location
            self.arn = arn
            self.networking = networking
        }

    }

    public struct Domain: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the domain.
        public var name: String? = nil
        /// The AWS Region and Availability Zones where the domain recordset was created.
        public var location: ResourceLocation? = nil
        /// The resource type. 
        public var resourceType: String? = nil
        /// An array of key-value pairs containing information about the domain entries.
        public var domainEntries: [DomainEntry]? = nil
        /// The date when the domain recordset was created.
        public var createdAt: Date? = nil
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: String? = nil
        /// The Amazon Resource Name (ARN) of the domain recordset (e.g., arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE).
        public var arn: String? = nil

        public init() {}

        public init(name: String? = nil, location: ResourceLocation? = nil, resourceType: String? = nil, domainEntries: [DomainEntry]? = nil, createdAt: Date? = nil, supportCode: String? = nil, arn: String? = nil) {
            self.name = name
            self.location = location
            self.resourceType = resourceType
            self.domainEntries = domainEntries
            self.createdAt = createdAt
            self.supportCode = supportCode
            self.arn = arn
        }

    }

    public struct GetStaticIpResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the requested static IP.
        public var staticIp: StaticIp? = nil

        public init() {}

        public init(staticIp: StaticIp? = nil) {
            self.staticIp = staticIp
        }

    }

    public struct DetachStaticIpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the static IP to detach from the instance.
        public var staticIpName: String = ""

        public init() {}

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

    }

    public struct GetActiveNamesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get active names request.
        public var nextPageToken: String? = nil
        /// The list of active names returned by the get active names request.
        public var activeNames: [String]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, activeNames: [String]? = nil) {
            self.nextPageToken = nextPageToken
            self.activeNames = activeNames
        }

    }

    public struct DeleteInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance to delete.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct GetOperationsForResourceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Returns the number of pages of results that remain.
        public var nextPageCount: String? = nil
        /// An array of key-value pairs containing information about the results of your get operations for resource request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(nextPageCount: String? = nil, operations: [Operation]? = nil) {
            self.nextPageCount = nextPageCount
            self.operations = operations
        }

    }

    public struct Disk: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A Boolean value indicating whether the disk is attached.
        public var isAttached: Bool? = nil
        /// The name of the disk.
        public var name: String? = nil
        /// The resource type of the disk. 
        public var resourceType: String? = nil
        /// The date when the disk was created.
        public var createdAt: Date? = nil
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: String? = nil
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public var isSystemDisk: Bool? = nil
        /// The attachment state of the disk.
        public var attachmentState: String? = nil
        /// The Amazon Resource Name (ARN) of the disk.
        public var arn: String? = nil
        /// The resources to which the disk is attached.
        public var attachedTo: String? = nil
        /// The size of the disk in GB.
        public var sizeInGb: Int32? = nil
        /// The region and Availability Zone where the disk is located.
        public var location: ResourceLocation? = nil
        /// The disk path.
        public var path: String? = nil
        /// The number of GB in use by the disk.
        public var gbInUse: Int32? = nil
        /// The input/output operations per second (IOPS) of the disk.
        public var iops: Int32? = nil

        public init() {}

        public init(isAttached: Bool? = nil, name: String? = nil, resourceType: String? = nil, createdAt: Date? = nil, supportCode: String? = nil, isSystemDisk: Bool? = nil, attachmentState: String? = nil, arn: String? = nil, attachedTo: String? = nil, sizeInGb: Int32? = nil, location: ResourceLocation? = nil, path: String? = nil, gbInUse: Int32? = nil, iops: Int32? = nil) {
            self.isAttached = isAttached
            self.name = name
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.supportCode = supportCode
            self.isSystemDisk = isSystemDisk
            self.attachmentState = attachmentState
            self.arn = arn
            self.attachedTo = attachedTo
            self.sizeInGb = sizeInGb
            self.location = location
            self.path = path
            self.gbInUse = gbInUse
            self.iops = iops
        }

    }

    public struct GetDomainsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get domains request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct UpdateDomainEntryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct GetKeyPairsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get key pairs request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct DomainEntry: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The options for the domain entry.
        public var options: [String: String]? = nil
        /// The name of the domain.
        public var name: String? = nil
        /// The target AWS name server (e.g., ns-111.awsdns-22.com.).
        public var target: String? = nil
        /// The ID of the domain recordset entry.
        public var id: String? = nil
        /// The type of domain entry (e.g., SOA or NS).
        public var type: String? = nil

        public init() {}

        public init(options: [String: String]? = nil, name: String? = nil, target: String? = nil, id: String? = nil, type: String? = nil) {
            self.options = options
            self.name = name
            self.target = target
            self.id = id
            self.type = type
        }

    }

    public struct DownloadDefaultKeyPairResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A base64-encoded RSA private key.
        public var privateKeyBase64: String? = nil
        /// A base64-encoded public key of the ssh-rsa type.
        public var publicKeyBase64: String? = nil

        public init() {}

        public init(privateKeyBase64: String? = nil, publicKeyBase64: String? = nil) {
            self.privateKeyBase64 = privateKeyBase64
            self.publicKeyBase64 = publicKeyBase64
        }

    }

    public struct CreateInstancesFromSnapshotResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your create instances from snapshot request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct AvailabilityZone: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The state of the Availability Zone.
        public var state: String? = nil
        /// The name of the Availability Zone.
        public var zoneName: String? = nil

        public init() {}

        public init(state: String? = nil, zoneName: String? = nil) {
            self.state = state
            self.zoneName = zoneName
        }

    }

    public struct IsVpcPeeredRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CreateDomainEntryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the domain entry request.
        public var domainEntry: DomainEntry = DomainEntry()
        /// The domain name (e.g., example.com) for which you want to create the domain entry.
        public var domainName: String = ""

        public init() {}

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

    }

    public struct CreateInstanceSnapshotRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name for your new snapshot.
        public var instanceSnapshotName: String = ""
        /// The Lightsail instance on which to base your snapshot.
        public var instanceName: String = ""

        public init() {}

        public init(instanceSnapshotName: String, instanceName: String) {
            self.instanceSnapshotName = instanceSnapshotName
            self.instanceName = instanceName
        }

    }

    public struct StopInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct GetInstancesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get instances request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs containing information about your instances.
        public var instances: [Instance]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, instances: [Instance]? = nil) {
            self.nextPageToken = nextPageToken
            self.instances = instances
        }

    }

    public struct InstanceState: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The state of the instance (e.g., running or pending).
        public var name: String? = nil
        /// The status code for the instance.
        public var code: Int32? = nil

        public init() {}

        public init(name: String? = nil, code: Int32? = nil) {
            self.name = name
            self.code = code
        }

    }

    public struct PeerVpcResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct GetInstanceSnapshotRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the snapshot for which you are requesting information.
        public var instanceSnapshotName: String = ""

        public init() {}

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

    }

    public struct AllocateStaticIpResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the static IP address you allocated.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct DeleteKeyPairResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your delete key pair request.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct GetKeyPairResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the key pair.
        public var keyPair: KeyPair? = nil

        public init() {}

        public init(keyPair: KeyPair? = nil) {
            self.keyPair = keyPair
        }

    }

    public struct GetRegionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., us-east-1a.
        public var includeAvailabilityZones: Bool? = nil

        public init() {}

        public init(includeAvailabilityZones: Bool? = nil) {
            self.includeAvailabilityZones = includeAvailabilityZones
        }

    }

    public struct AttachStaticIpResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about your API operations.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct GetInstanceAccessDetailsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about a get instance access request.
        public var accessDetails: InstanceAccessDetails? = nil

        public init() {}

        public init(accessDetails: InstanceAccessDetails? = nil) {
            self.accessDetails = accessDetails
        }

    }

    public struct ResourceLocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The AWS Region name.
        public var regionName: String? = nil
        /// The Availability Zone.
        public var availabilityZone: String? = nil

        public init() {}

        public init(regionName: String? = nil, availabilityZone: String? = nil) {
            self.regionName = regionName
            self.availabilityZone = availabilityZone
        }

    }

    public struct PortInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The protocol. 
        public var `protocol`: String? = nil
        /// The first port in the range.
        public var fromPort: Int32? = nil
        /// The last port in the range.
        public var toPort: Int32? = nil

        public init() {}

        public init(protocol: String? = nil, fromPort: Int32? = nil, toPort: Int32? = nil) {
            self.`protocol` = `protocol`
            self.fromPort = fromPort
            self.toPort = toPort
        }

    }

    public struct GetActiveNamesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for paginating results from your get active names request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct RebootInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance to reboot.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct MetricDatapoint: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The sample count.
        public var sampleCount: Double? = nil
        /// The unit. 
        public var unit: String? = nil
        /// The average.
        public var average: Double? = nil
        /// The maximum.
        public var maximum: Double? = nil
        /// The minimum.
        public var minimum: Double? = nil
        /// The sum.
        public var sum: Double? = nil
        /// The timestamp (e.g., 1479816991.349).
        public var timestamp: Date? = nil

        public init() {}

        public init(sampleCount: Double? = nil, unit: String? = nil, average: Double? = nil, maximum: Double? = nil, minimum: Double? = nil, sum: Double? = nil, timestamp: Date? = nil) {
            self.sampleCount = sampleCount
            self.unit = unit
            self.average = average
            self.maximum = maximum
            self.minimum = minimum
            self.sum = sum
            self.timestamp = timestamp
        }

    }

    public struct GetInstancesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get instances request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct InstanceNetworking: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the ports on the instance.
        public var ports: [InstancePortInfo]? = nil
        /// The amount of data in GB allocated for monthly data transfers.
        public var monthlyTransfer: MonthlyTransfer? = nil

        public init() {}

        public init(ports: [InstancePortInfo]? = nil, monthlyTransfer: MonthlyTransfer? = nil) {
            self.ports = ports
            self.monthlyTransfer = monthlyTransfer
        }

    }

    public struct DownloadDefaultKeyPairRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct GetInstanceSnapshotsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get instance snapshots request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct GetInstanceSnapshotResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your get instance snapshot request.
        public var instanceSnapshot: InstanceSnapshot? = nil

        public init() {}

        public init(instanceSnapshot: InstanceSnapshot? = nil) {
            self.instanceSnapshot = instanceSnapshot
        }

    }

    public struct DeleteDomainEntryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about your domain entries.
        public var domainEntry: DomainEntry = DomainEntry()
        /// The name of the domain entry to delete.
        public var domainName: String = ""

        public init() {}

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

    }

    public struct Operation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of operation. 
        public var operationType: String? = nil
        /// A Boolean value indicating whether the operation is terminal.
        public var isTerminal: Bool? = nil
        /// The region and Availability Zone.
        public var location: ResourceLocation? = nil
        /// The resource type. 
        public var resourceType: String? = nil
        /// The ID of the operation.
        public var id: String? = nil
        /// The error code.
        public var errorCode: String? = nil
        /// The resource name.
        public var resourceName: String? = nil
        /// The error details.
        public var errorDetails: String? = nil
        /// The timestamp when the operation was initialized (e.g., 1479816991.349).
        public var createdAt: Date? = nil
        /// The status of the operation. 
        public var status: String? = nil
        /// The timestamp when the status was changed (e.g., 1479816991.349).
        public var statusChangedAt: Date? = nil
        /// Details about the operation (e.g., Debian-1GB-Virginia-1).
        public var operationDetails: String? = nil

        public init() {}

        public init(operationType: String? = nil, isTerminal: Bool? = nil, location: ResourceLocation? = nil, resourceType: String? = nil, id: String? = nil, errorCode: String? = nil, resourceName: String? = nil, errorDetails: String? = nil, createdAt: Date? = nil, status: String? = nil, statusChangedAt: Date? = nil, operationDetails: String? = nil) {
            self.operationType = operationType
            self.isTerminal = isTerminal
            self.location = location
            self.resourceType = resourceType
            self.id = id
            self.errorCode = errorCode
            self.resourceName = resourceName
            self.errorDetails = errorDetails
            self.createdAt = createdAt
            self.status = status
            self.statusChangedAt = statusChangedAt
            self.operationDetails = operationDetails
        }

    }

    public struct GetOperationsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get operations request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs containing information about the results of your get operations request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, operations: [Operation]? = nil) {
            self.nextPageToken = nextPageToken
            self.operations = operations
        }

    }

    public struct GetBlueprintsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get blueprints request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs that contains information about the available blueprints.
        public var blueprints: [Blueprint]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, blueprints: [Blueprint]? = nil) {
            self.nextPageToken = nextPageToken
            self.blueprints = blueprints
        }

    }

    public struct CreateKeyPairRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name for your new key pair.
        public var keyPairName: String = ""

        public init() {}

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

    }

    public struct ReleaseStaticIpResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct DetachStaticIpResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your detach static IP request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct ImportKeyPairRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the key pair for which you want to import the public key.
        public var keyPairName: String = ""
        /// A base64-encoded public key of the ssh-rsa type.
        public var publicKeyBase64: String = ""

        public init() {}

        public init(keyPairName: String, publicKeyBase64: String) {
            self.keyPairName = keyPairName
            self.publicKeyBase64 = publicKeyBase64
        }

    }

    public struct GetBlueprintsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get blueprints request.
        public var pageToken: String? = nil
        /// A Boolean value indicating whether to include inactive results in your request.
        public var includeInactive: Bool? = nil

        public init() {}

        public init(pageToken: String? = nil, includeInactive: Bool? = nil) {
            self.pageToken = pageToken
            self.includeInactive = includeInactive
        }

    }

    public struct DeleteKeyPairRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the key pair to delete.
        public var keyPairName: String = ""

        public init() {}

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

    }

    public struct InstancePortInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The location from which access is allowed (e.g., Anywhere (0.0.0.0/0)).
        public var accessFrom: String? = nil
        /// The first port in the range.
        public var fromPort: Int32? = nil
        /// The common name.
        public var commonName: String? = nil
        /// The protocol. 
        public var `protocol`: String? = nil
        /// The access direction (inbound or outbound).
        public var accessDirection: String? = nil
        /// The type of access (Public or Private).
        public var accessType: String? = nil
        /// The last port in the range.
        public var toPort: Int32? = nil

        public init() {}

        public init(accessFrom: String? = nil, fromPort: Int32? = nil, commonName: String? = nil, protocol: String? = nil, accessDirection: String? = nil, accessType: String? = nil, toPort: Int32? = nil) {
            self.accessFrom = accessFrom
            self.fromPort = fromPort
            self.commonName = commonName
            self.`protocol` = `protocol`
            self.accessDirection = accessDirection
            self.accessType = accessType
            self.toPort = toPort
        }

    }

    public struct GetDomainRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The domain name for which your want to return information about.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct GetInstancePortStatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct GetInstanceStateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance to get state information about.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct DeleteInstanceSnapshotResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your delete instance snapshot request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct CreateInstancesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Availability Zone in which to create your instance. Use the following format: us-east-1a (case sensitive).
        public var availabilityZone: String = ""
        /// The name of your key pair.
        public var keyPairName: String? = nil
        /// The name for your custom image.
        public var customImageName: String? = nil
        /// The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: ["MyFirstInstance","MySecondInstance"] 
        public var instanceNames: [String] = []
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public var bundleId: String = ""
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get –y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public var userData: String? = nil
        /// The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0). Use the get blueprints operation to return a list of available images (or blueprints).
        public var blueprintId: String = ""

        public init() {}

        public init(availabilityZone: String, keyPairName: String? = nil, customImageName: String? = nil, instanceNames: [String], bundleId: String, userData: String? = nil, blueprintId: String) {
            self.availabilityZone = availabilityZone
            self.keyPairName = keyPairName
            self.customImageName = customImageName
            self.instanceNames = instanceNames
            self.bundleId = bundleId
            self.userData = userData
            self.blueprintId = blueprintId
        }

    }

    public struct Blueprint: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of the blueprint (e.g., os or app).
        public var type: String? = nil
        /// A Boolean value indicating whether the blueprint is active. When you update your blueprints, you will inactivate old blueprints and keep the most recent versions active.
        public var isActive: Bool? = nil
        /// The product URL to learn more about the image or blueprint.
        public var productUrl: String? = nil
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public var name: String? = nil
        /// The description of the blueprint.
        public var description: String? = nil
        /// The version number of the operating system, application, or stack (e.g., 2016.03.0).
        public var version: String? = nil
        /// The end-user license agreement URL for the image or blueprint.
        public var licenseUrl: String? = nil
        /// The version code.
        public var versionCode: String? = nil
        /// The group name of the blueprint (e.g., amazon-linux).
        public var group: String? = nil
        /// The minimum machine size required to run this blueprint. 0 indicates that the blueprint runs on all instances.
        public var minPower: Int32? = nil
        /// The ID for the virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0).
        public var blueprintId: String? = nil

        public init() {}

        public init(type: String? = nil, isActive: Bool? = nil, productUrl: String? = nil, name: String? = nil, description: String? = nil, version: String? = nil, licenseUrl: String? = nil, versionCode: String? = nil, group: String? = nil, minPower: Int32? = nil, blueprintId: String? = nil) {
            self.type = type
            self.isActive = isActive
            self.productUrl = productUrl
            self.name = name
            self.description = description
            self.version = version
            self.licenseUrl = licenseUrl
            self.versionCode = versionCode
            self.group = group
            self.minPower = minPower
            self.blueprintId = blueprintId
        }

    }

    public struct DeleteInstanceSnapshotRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the snapshot to delete.
        public var instanceSnapshotName: String = ""

        public init() {}

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

    }

    public struct GetBundlesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get active names request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs that contains information about the available bundles.
        public var bundles: [Bundle]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, bundles: [Bundle]? = nil) {
            self.nextPageToken = nextPageToken
            self.bundles = bundles
        }

    }

    public struct Region: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the AWS Region (e.g., This region is recommended to serve users in the eastern United States and eastern Canada).
        public var description: String? = nil
        /// The display name (e.g., Virginia).
        public var displayName: String? = nil
        /// The region name (e.g., us-east-1).
        public var name: String? = nil
        /// The continent code (e.g., NA, meaning North America).
        public var continentCode: String? = nil
        /// The Availability Zones.
        public var availabilityZones: [AvailabilityZone]? = nil

        public init() {}

        public init(description: String? = nil, displayName: String? = nil, name: String? = nil, continentCode: String? = nil, availabilityZones: [AvailabilityZone]? = nil) {
            self.description = description
            self.displayName = displayName
            self.name = name
            self.continentCode = continentCode
            self.availabilityZones = availabilityZones
        }

    }

    public struct CreateDomainEntryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the operation.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct UpdateDomainEntryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the domain entry.
        public var domainEntry: DomainEntry = DomainEntry()
        /// The name of the domain recordset to update.
        public var domainName: String = ""

        public init() {}

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

    }

    public struct GetDomainResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about your get domain request.
        public var domain: Domain? = nil

        public init() {}

        public init(domain: Domain? = nil) {
            self.domain = domain
        }

    }

    public struct CloseInstancePublicPortsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs that contains information about the operation.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct GetOperationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your get operation request.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct AllocateStaticIpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the static IP address.
        public var staticIpName: String = ""

        public init() {}

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

    }

    public struct MonthlyTransfer: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The amount allocated per month (in GB).
        public var gbPerMonthAllocated: Int32? = nil

        public init() {}

        public init(gbPerMonthAllocated: Int32? = nil) {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }

    }

    public struct UnpeerVpcResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct StartInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance (a virtual private server) to start.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct OpenInstancePublicPortsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operation: Operation? = nil

        public init() {}

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

    }

    public struct CreateInstanceSnapshotResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the results of your create instances snapshot request.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct StartInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of key-value pairs containing information about the request operation.
        public var operations: [Operation]? = nil

        public init() {}

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

    }

    public struct GetStaticIpsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get static IPs request.
        public var nextPageToken: String? = nil
        /// An array of key-value pairs containing information about your get static IPs request.
        public var staticIps: [StaticIp]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, staticIps: [StaticIp]? = nil) {
            self.nextPageToken = nextPageToken
            self.staticIps = staticIps
        }

    }

    public struct GetInstanceMetricDataRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance for which you want to get metrics data.
        public var instanceName: String = ""
        /// The unit. The list of valid values is below.
        public var unit: String = ""
        /// The instance statistics. 
        public var statistics: [String] = []
        /// The end time of the time period.
        public var endTime: Date = Date()
        /// The time period for which you are requesting data.
        public var period: Int32 = 0
        /// The start time of the time period.
        public var startTime: Date = Date()
        /// The metric name to get data about. 
        public var metricName: String = ""

        public init() {}

        public init(instanceName: String, unit: String, statistics: [String], endTime: Date, period: Int32, startTime: Date, metricName: String) {
            self.instanceName = instanceName
            self.unit = unit
            self.statistics = statistics
            self.endTime = endTime
            self.period = period
            self.startTime = startTime
            self.metricName = metricName
        }

    }

    public struct StopInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance (a virtual private server) to stop.
        public var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct InstanceHardware: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of vCPUs the instance has.
        public var cpuCount: Int32? = nil
        /// The disks attached to the instance.
        public var disks: [Disk]? = nil
        /// The amount of RAM in GB on the instance (e.g., 1.0).
        public var ramSizeInGb: Float? = nil

        public init() {}

        public init(cpuCount: Int32? = nil, disks: [Disk]? = nil, ramSizeInGb: Float? = nil) {
            self.cpuCount = cpuCount
            self.disks = disks
            self.ramSizeInGb = ramSizeInGb
        }

    }

    public struct GetStaticIpsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token used for advancing to the next page of results from your get static IPs request.
        public var pageToken: String? = nil

        public init() {}

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

    }

    public struct CreateDomainRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The domain name to manage (e.g., example.com).  You cannot register a new domain name using Lightsail. You must register a domain name using Amazon Route 53 or another domain name registrar. If you have already registered your domain, you can enter its name in this parameter to manage the DNS records for that domain. 
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

}