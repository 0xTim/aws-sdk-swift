// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Lightsail {

    public struct GetOperationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get operations request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetInstanceStateResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .structure)
        ]
        /// The state of the instance.
        public let state: InstanceState?

        public init(state: InstanceState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct GetDomainsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domains", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of key-value pairs containing information about each of the domain entries in the user's account.
        public let domains: [Domain]?
        /// A token used for advancing to the next page of results from your get active names request.
        public let nextPageToken: String?

        public init(domains: [Domain]? = nil, nextPageToken: String? = nil) {
            self.domains = domains
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case domains = "domains"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetInstanceMetricDataResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricData", required: false, type: .list), 
            AWSShapeMember(label: "metricName", required: false, type: .enum)
        ]
        /// An array of key-value pairs containing information about the results of your get instance metric data request.
        public let metricData: [MetricDatapoint]?
        /// The metric name to return data for. 
        public let metricName: InstanceMetricName?

        public init(metricData: [MetricDatapoint]? = nil, metricName: InstanceMetricName? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "metricData"
            case metricName = "metricName"
        }
    }

    public struct CreateDomainResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the domain resource you created.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public enum OperationStatus: String, CustomStringConvertible, Codable {
        case notstarted = "NotStarted"
        case started = "Started"
        case failed = "Failed"
        case completed = "Completed"
        public var description: String { return self.rawValue }
    }

    public struct UnpeerVpcRequest: AWSShape {
        /// The key for the payload

    }

    public struct DeleteDomainResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your delete domain request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CreateKeyPairResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPair", required: false, type: .structure), 
            AWSShapeMember(label: "publicKeyBase64", required: false, type: .string), 
            AWSShapeMember(label: "privateKeyBase64", required: false, type: .string), 
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the new key pair you just created.
        public let keyPair: KeyPair?
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String?
        /// A base64-encoded RSA private key.
        public let privateKeyBase64: String?
        /// An array of key-value pairs containing information about the results of your create key pair request.
        public let operation: Operation?

        public init(keyPair: KeyPair? = nil, publicKeyBase64: String? = nil, privateKeyBase64: String? = nil, operation: Operation? = nil) {
            self.keyPair = keyPair
            self.publicKeyBase64 = publicKeyBase64
            self.privateKeyBase64 = privateKeyBase64
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case keyPair = "keyPair"
            case publicKeyBase64 = "publicKeyBase64"
            case privateKeyBase64 = "privateKeyBase64"
            case operation = "operation"
        }
    }

    public struct GetOperationsForResourceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceName", required: true, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get operations for resource request.
        public let pageToken: String?
        /// The name of the resource for which you are requesting information.
        public let resourceName: String

        public init(pageToken: String? = nil, resourceName: String) {
            self.pageToken = pageToken
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case resourceName = "resourceName"
        }
    }

    public struct AttachStaticIpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string), 
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the static IP.
        public let staticIpName: String
        /// The instance name to which you want to attach the static IP address.
        public let instanceName: String

        public init(staticIpName: String, instanceName: String) {
            self.staticIpName = staticIpName
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
            case instanceName = "instanceName"
        }
    }

    public struct InstanceSnapshot: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "fromBundleId", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "fromInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "fromBlueprintId", required: false, type: .string), 
            AWSShapeMember(label: "sizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "fromInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "progress", required: false, type: .string)
        ]
        /// The state the snapshot is in.
        public let state: InstanceSnapshotState?
        /// The name of the snapshot.
        public let name: String?
        /// The type of resource (usually InstanceSnapshot).
        public let resourceType: ResourceType?
        /// The timestamp when the snapshot was created (e.g., 1479907467.024).
        public let createdAt: TimeStamp?
        /// The bundle ID from which you created the snapshot (e.g., micro_1_0).
        public let fromBundleId: String?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., arn:aws:lightsail:us-east-1:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE).
        public let fromInstanceArn: String?
        /// The Amazon Resource Name (ARN) of the snapshot (e.g., arn:aws:lightsail:us-east-1:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE).
        public let arn: String?
        /// The blueprint ID from which you created the snapshot (e.g., os_debian_8_3). A blueprint is a virtual private server (or instance) image used to create instances quickly.
        public let fromBlueprintId: String?
        /// The size in GB of the SSD.
        public let sizeInGb: Int32?
        /// The region name and availability zone where you created the snapshot.
        public let location: ResourceLocation?
        /// The instance from which the snapshot was created.
        public let fromInstanceName: String?
        /// The progress of the snapshot.
        public let progress: String?

        public init(state: InstanceSnapshotState? = nil, name: String? = nil, resourceType: ResourceType? = nil, createdAt: TimeStamp? = nil, fromBundleId: String? = nil, supportCode: String? = nil, fromInstanceArn: String? = nil, arn: String? = nil, fromBlueprintId: String? = nil, sizeInGb: Int32? = nil, location: ResourceLocation? = nil, fromInstanceName: String? = nil, progress: String? = nil) {
            self.state = state
            self.name = name
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.fromBundleId = fromBundleId
            self.supportCode = supportCode
            self.fromInstanceArn = fromInstanceArn
            self.arn = arn
            self.fromBlueprintId = fromBlueprintId
            self.sizeInGb = sizeInGb
            self.location = location
            self.fromInstanceName = fromInstanceName
            self.progress = progress
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case name = "name"
            case resourceType = "resourceType"
            case createdAt = "createdAt"
            case fromBundleId = "fromBundleId"
            case supportCode = "supportCode"
            case fromInstanceArn = "fromInstanceArn"
            case arn = "arn"
            case fromBlueprintId = "fromBlueprintId"
            case sizeInGb = "sizeInGb"
            case location = "location"
            case fromInstanceName = "fromInstanceName"
            case progress = "progress"
        }
    }

    public struct InstanceAccessDetails: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "privateKey", required: false, type: .string), 
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "instanceName", required: false, type: .string), 
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "password", required: false, type: .string), 
            AWSShapeMember(label: "certKey", required: false, type: .string), 
            AWSShapeMember(label: "expiresAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "username", required: false, type: .string)
        ]
        /// For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey).
        public let privateKey: String?
        /// The public IP address of the Amazon Lightsail instance.
        public let ipAddress: String?
        /// The name of this Amazon Lightsail instance.
        public let instanceName: String?
        /// The protocol for these Amazon Lightsail instance access details.
        public let `protocol`: InstanceAccessProtocol?
        /// For RDP access, the temporary password of the Amazon EC2 instance.
        public let password: String?
        /// For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey-cert.pub.
        public let certKey: String?
        /// For SSH access, the date on which the temporary keys expire.
        public let expiresAt: TimeStamp?
        /// The user name to use when logging in to the Amazon Lightsail instance.
        public let username: String?

        public init(privateKey: String? = nil, ipAddress: String? = nil, instanceName: String? = nil, protocol: InstanceAccessProtocol? = nil, password: String? = nil, certKey: String? = nil, expiresAt: TimeStamp? = nil, username: String? = nil) {
            self.privateKey = privateKey
            self.ipAddress = ipAddress
            self.instanceName = instanceName
            self.`protocol` = `protocol`
            self.password = password
            self.certKey = certKey
            self.expiresAt = expiresAt
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case privateKey = "privateKey"
            case ipAddress = "ipAddress"
            case instanceName = "instanceName"
            case `protocol` = "protocol"
            case password = "password"
            case certKey = "certKey"
            case expiresAt = "expiresAt"
            case username = "username"
        }
    }

    public struct GetBundlesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string), 
            AWSShapeMember(label: "includeInactive", required: false, type: .boolean)
        ]
        /// A token used for advancing to the next page of results from your get bundles request.
        public let pageToken: String?
        /// A Boolean value that indicates whether to include inactive bundle results in your request.
        public let includeInactive: Bool?

        public init(pageToken: String? = nil, includeInactive: Bool? = nil) {
            self.pageToken = pageToken
            self.includeInactive = includeInactive
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case includeInactive = "includeInactive"
        }
    }

    public struct DeleteDomainEntryResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your delete domain entry request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetRegionsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "regions", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about your get regions request.
        public let regions: [Region]?

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regions"
        }
    }

    public enum BlueprintType: String, CustomStringConvertible, Codable {
        case os = "os"
        case app = "app"
        public var description: String { return self.rawValue }
    }

    public struct GetInstanceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instance", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the specified instance.
        public let instance: Instance?

        public init(instance: Instance? = nil) {
            self.instance = instance
        }

        private enum CodingKeys: String, CodingKey {
            case instance = "instance"
        }
    }

    public struct DeleteInstanceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your delete instance request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum RegionName: String, CustomStringConvertible, Codable {
        case us_east_1 = "us-east-1"
        case us_east_2 = "us-east-2"
        case us_west_1 = "us-west-1"
        case us_west_2 = "us-west-2"
        case eu_west_1 = "eu-west-1"
        case eu_central_1 = "eu-central-1"
        case ap_south_1 = "ap-south-1"
        case ap_southeast_1 = "ap-southeast-1"
        case ap_southeast_2 = "ap-southeast-2"
        case ap_northeast_1 = "ap-northeast-1"
        case ap_northeast_2 = "ap-northeast-2"
        public var description: String { return self.rawValue }
    }

    public struct GetInstanceAccessDetailsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The protocol to use to connect to your instance. Defaults to ssh.
        public let `protocol`: InstanceAccessProtocol?
        /// The name of the instance to access.
        public let instanceName: String

        public init(protocol: InstanceAccessProtocol? = nil, instanceName: String) {
            self.`protocol` = `protocol`
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case instanceName = "instanceName"
        }
    }

    public struct GetInstanceSnapshotsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "instanceSnapshots", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get instance snapshots request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about the results of your get instance snapshots request.
        public let instanceSnapshots: [InstanceSnapshot]?

        public init(nextPageToken: String? = nil, instanceSnapshots: [InstanceSnapshot]? = nil) {
            self.nextPageToken = nextPageToken
            self.instanceSnapshots = instanceSnapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case instanceSnapshots = "instanceSnapshots"
        }
    }

    public struct StaticIp: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachedTo", required: false, type: .string), 
            AWSShapeMember(label: "isAttached", required: false, type: .boolean), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The instance where the static IP is attached (e.g., Amazon_Linux-1GB-Virginia-1).
        public let attachedTo: String?
        /// A Boolean value indicating whether the static IP is attached.
        public let isAttached: Bool?
        /// The region and Availability Zone where the static IP was created.
        public let location: ResourceLocation?
        /// The resource type (usually StaticIp).
        public let resourceType: ResourceType?
        /// The static IP address.
        public let ipAddress: String?
        /// The name of the static IP (e.g., StaticIP-Virginia-EXAMPLE).
        public let name: String?
        /// The timestamp when the static IP was created (e.g., 1479735304.222).
        public let createdAt: TimeStamp?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The Amazon Resource Name (ARN) of the static IP (e.g., arn:aws:lightsail:us-east-1:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE).
        public let arn: String?

        public init(attachedTo: String? = nil, isAttached: Bool? = nil, location: ResourceLocation? = nil, resourceType: ResourceType? = nil, ipAddress: String? = nil, name: String? = nil, createdAt: TimeStamp? = nil, supportCode: String? = nil, arn: String? = nil) {
            self.attachedTo = attachedTo
            self.isAttached = isAttached
            self.location = location
            self.resourceType = resourceType
            self.ipAddress = ipAddress
            self.name = name
            self.createdAt = createdAt
            self.supportCode = supportCode
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case attachedTo = "attachedTo"
            case isAttached = "isAttached"
            case location = "location"
            case resourceType = "resourceType"
            case ipAddress = "ipAddress"
            case name = "name"
            case createdAt = "createdAt"
            case supportCode = "supportCode"
            case arn = "arn"
        }
    }

    public struct GetInstancePortStatesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "portStates", required: false, type: .list)
        ]
        /// Information about the port states resulting from your request.
        public let portStates: [InstancePortState]?

        public init(portStates: [InstancePortState]? = nil) {
            self.portStates = portStates
        }

        private enum CodingKeys: String, CodingKey {
            case portStates = "portStates"
        }
    }

    public struct InstancePortState: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "fromPort", required: false, type: .integer), 
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "toPort", required: false, type: .integer)
        ]
        /// Specifies whether the instance port is open or closed.
        public let state: PortState?
        /// The first port in the range.
        public let fromPort: Int32?
        /// The protocol being used. Can be one of the following.    tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.    all - All transport layer protocol types. For more general information, see Transport layer on Wikipedia.    udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.  
        public let `protocol`: NetworkProtocol?
        /// The last port in the range.
        public let toPort: Int32?

        public init(state: PortState? = nil, fromPort: Int32? = nil, protocol: NetworkProtocol? = nil, toPort: Int32? = nil) {
            self.state = state
            self.fromPort = fromPort
            self.`protocol` = `protocol`
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case fromPort = "fromPort"
            case `protocol` = "protocol"
            case toPort = "toPort"
        }
    }

    public struct KeyPair: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "fingerprint", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The friendly name of the SSH key pair.
        public let name: String?
        /// The region name and Availability Zone where the key pair was created.
        public let location: ResourceLocation?
        /// The resource type (usually KeyPair).
        public let resourceType: ResourceType?
        /// The timestamp when the key pair was created (e.g., 1479816991.349).
        public let createdAt: TimeStamp?
        /// The RSA fingerprint of the key pair.
        public let fingerprint: String?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The Amazon Resource Name (ARN) of the key pair (e.g., arn:aws:lightsail:us-east-1:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE).
        public let arn: String?

        public init(name: String? = nil, location: ResourceLocation? = nil, resourceType: ResourceType? = nil, createdAt: TimeStamp? = nil, fingerprint: String? = nil, supportCode: String? = nil, arn: String? = nil) {
            self.name = name
            self.location = location
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.fingerprint = fingerprint
            self.supportCode = supportCode
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case location = "location"
            case resourceType = "resourceType"
            case createdAt = "createdAt"
            case fingerprint = "fingerprint"
            case supportCode = "supportCode"
            case arn = "arn"
        }
    }

    public struct GetStaticIpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP in Lightsail.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct GetKeyPairsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "keyPairs", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get key pairs request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about the key pairs.
        public let keyPairs: [KeyPair]?

        public init(nextPageToken: String? = nil, keyPairs: [KeyPair]? = nil) {
            self.nextPageToken = nextPageToken
            self.keyPairs = keyPairs
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case keyPairs = "keyPairs"
        }
    }

    public struct Bundle: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "instanceType", required: false, type: .string), 
            AWSShapeMember(label: "isActive", required: false, type: .boolean), 
            AWSShapeMember(label: "power", required: false, type: .integer), 
            AWSShapeMember(label: "cpuCount", required: false, type: .integer), 
            AWSShapeMember(label: "ramSizeInGb", required: false, type: .float), 
            AWSShapeMember(label: "bundleId", required: false, type: .string), 
            AWSShapeMember(label: "transferPerMonthInGb", required: false, type: .integer), 
            AWSShapeMember(label: "diskSizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "price", required: false, type: .float)
        ]
        /// A friendly name for the bundle (e.g., Micro).
        public let name: String?
        /// The Amazon EC2 instance type (e.g., t2.micro).
        public let instanceType: String?
        /// A Boolean value indicating whether the bundle is active.
        public let isActive: Bool?
        /// The power of the bundle (e.g., 500).
        public let power: Int32?
        /// The number of vCPUs included in the bundle (e.g., 2).
        public let cpuCount: Int32?
        /// The amount of RAM in GB (e.g., 2.0).
        public let ramSizeInGb: Float?
        /// The bundle ID (e.g., micro_1_0).
        public let bundleId: String?
        /// The data transfer rate per month in GB (e.g., 2000).
        public let transferPerMonthInGb: Int32?
        /// The size of the SSD (e.g., 30).
        public let diskSizeInGb: Int32?
        /// The price in US dollars (e.g., 5.0).
        public let price: Float?

        public init(name: String? = nil, instanceType: String? = nil, isActive: Bool? = nil, power: Int32? = nil, cpuCount: Int32? = nil, ramSizeInGb: Float? = nil, bundleId: String? = nil, transferPerMonthInGb: Int32? = nil, diskSizeInGb: Int32? = nil, price: Float? = nil) {
            self.name = name
            self.instanceType = instanceType
            self.isActive = isActive
            self.power = power
            self.cpuCount = cpuCount
            self.ramSizeInGb = ramSizeInGb
            self.bundleId = bundleId
            self.transferPerMonthInGb = transferPerMonthInGb
            self.diskSizeInGb = diskSizeInGb
            self.price = price
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case instanceType = "instanceType"
            case isActive = "isActive"
            case power = "power"
            case cpuCount = "cpuCount"
            case ramSizeInGb = "ramSizeInGb"
            case bundleId = "bundleId"
            case transferPerMonthInGb = "transferPerMonthInGb"
            case diskSizeInGb = "diskSizeInGb"
            case price = "price"
        }
    }

    public struct PeerVpcRequest: AWSShape {
        /// The key for the payload

    }

    public struct RebootInstanceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateInstancesFromSnapshotRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "availabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list), 
            AWSShapeMember(label: "bundleId", required: true, type: .string), 
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "userData", required: false, type: .string), 
            AWSShapeMember(label: "keyPairName", required: false, type: .string)
        ]
        /// The Availability Zone where you want to create your instances. Use the following formatting: us-east-1a (case sensitive). You can get a list of availability zones by using the get regions operation. Be sure to add the include availability zones parameter to your request.
        public let availabilityZone: String
        /// The names for your new instances.
        public let instanceNames: [String]
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public let bundleId: String
        /// The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots.
        public let instanceSnapshotName: String
        /// You can create a launch script that configures a server with additional user data. For example, apt-get –y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public let userData: String?
        /// The name for your key pair.
        public let keyPairName: String?

        public init(availabilityZone: String, instanceNames: [String], bundleId: String, instanceSnapshotName: String, userData: String? = nil, keyPairName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceNames = instanceNames
            self.bundleId = bundleId
            self.instanceSnapshotName = instanceSnapshotName
            self.userData = userData
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceNames = "instanceNames"
            case bundleId = "bundleId"
            case instanceSnapshotName = "instanceSnapshotName"
            case userData = "userData"
            case keyPairName = "keyPairName"
        }
    }

    public struct GetOperationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operationId", required: true, type: .string)
        ]
        /// A GUID used to identify the operation.
        public let operationId: String

        public init(operationId: String) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "operationId"
        }
    }

    public struct ImportKeyPairResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case instance = "Instance"
        case staticip = "StaticIp"
        case keypair = "KeyPair"
        case instancesnapshot = "InstanceSnapshot"
        case domain = "Domain"
        case peeredvpc = "PeeredVpc"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDomainRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// The specific domain name to delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetKeyPairRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string)
        ]
        /// The name of the key pair for which you are requesting information.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct ReleaseStaticIpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP to delete.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct IsVpcPeeredResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "isPeered", required: false, type: .boolean)
        ]
        /// Returns true if the Lightsail VPC is peered; otherwise, false.
        public let isPeered: Bool?

        public init(isPeered: Bool? = nil) {
            self.isPeered = isPeered
        }

        private enum CodingKeys: String, CodingKey {
            case isPeered = "isPeered"
        }
    }

    public struct OpenInstancePublicPortsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "portInfo", required: true, type: .structure)
        ]
        /// The name of the instance for which you want to open the public ports.
        public let instanceName: String
        /// An array of key-value pairs containing information about the port mappings.
        public let portInfo: PortInfo

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfo = "portInfo"
        }
    }

    public struct CreateInstancesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your create instances request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct CloseInstancePublicPortsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "portInfo", required: true, type: .structure)
        ]
        /// The name of the instance on which you're attempting to close the public ports.
        public let instanceName: String
        /// Information about the public port you are trying to close.
        public let portInfo: PortInfo

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfo = "portInfo"
        }
    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "publicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "privateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "sshKeyName", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "bundleId", required: false, type: .string), 
            AWSShapeMember(label: "isStaticIp", required: false, type: .boolean), 
            AWSShapeMember(label: "blueprintName", required: false, type: .string), 
            AWSShapeMember(label: "username", required: false, type: .string), 
            AWSShapeMember(label: "ipv6Address", required: false, type: .string), 
            AWSShapeMember(label: "hardware", required: false, type: .structure), 
            AWSShapeMember(label: "blueprintId", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "networking", required: false, type: .structure)
        ]
        /// The status code and the state (e.g., running) for the instance.
        public let state: InstanceState?
        /// The name the user gave the instance (e.g., Amazon_Linux-1GB-Virginia-1).
        public let name: String?
        /// The type of resource (usually Instance).
        public let resourceType: ResourceType?
        /// The public IP address of the instance.
        public let publicIpAddress: String?
        /// The private IP address of the instance.
        public let privateIpAddress: String?
        /// The timestamp when the instance was created (e.g., 1479734909.17).
        public let createdAt: TimeStamp?
        /// The name of the SSH key being used to connect to the instance (e.g., LightsailDefaultKeyPair).
        public let sshKeyName: String?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The bundle for the instance (e.g., micro_1_0).
        public let bundleId: String?
        /// A Boolean value indicating whether this instance has a static IP assigned to it.
        public let isStaticIp: Bool?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public let blueprintName: String?
        /// The user name for connecting to the instance (e.g., ec2-user).
        public let username: String?
        /// The IPv6 address of the instance.
        public let ipv6Address: String?
        /// The size of the vCPU and the amount of RAM for the instance.
        public let hardware: InstanceHardware?
        /// The blueprint ID (e.g., os_amlinux_2016_03).
        public let blueprintId: String?
        /// The region name and availability zone where the instance is located.
        public let location: ResourceLocation?
        /// The Amazon Resource Name (ARN) of the instance (e.g., arn:aws:lightsail:us-east-1:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE).
        public let arn: String?
        /// Information about the public ports and monthly data transfer rates for the instance.
        public let networking: InstanceNetworking?

        public init(state: InstanceState? = nil, name: String? = nil, resourceType: ResourceType? = nil, publicIpAddress: String? = nil, privateIpAddress: String? = nil, createdAt: TimeStamp? = nil, sshKeyName: String? = nil, supportCode: String? = nil, bundleId: String? = nil, isStaticIp: Bool? = nil, blueprintName: String? = nil, username: String? = nil, ipv6Address: String? = nil, hardware: InstanceHardware? = nil, blueprintId: String? = nil, location: ResourceLocation? = nil, arn: String? = nil, networking: InstanceNetworking? = nil) {
            self.state = state
            self.name = name
            self.resourceType = resourceType
            self.publicIpAddress = publicIpAddress
            self.privateIpAddress = privateIpAddress
            self.createdAt = createdAt
            self.sshKeyName = sshKeyName
            self.supportCode = supportCode
            self.bundleId = bundleId
            self.isStaticIp = isStaticIp
            self.blueprintName = blueprintName
            self.username = username
            self.ipv6Address = ipv6Address
            self.hardware = hardware
            self.blueprintId = blueprintId
            self.location = location
            self.arn = arn
            self.networking = networking
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case name = "name"
            case resourceType = "resourceType"
            case publicIpAddress = "publicIpAddress"
            case privateIpAddress = "privateIpAddress"
            case createdAt = "createdAt"
            case sshKeyName = "sshKeyName"
            case supportCode = "supportCode"
            case bundleId = "bundleId"
            case isStaticIp = "isStaticIp"
            case blueprintName = "blueprintName"
            case username = "username"
            case ipv6Address = "ipv6Address"
            case hardware = "hardware"
            case blueprintId = "blueprintId"
            case location = "location"
            case arn = "arn"
            case networking = "networking"
        }
    }

    public struct Domain: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "domainEntries", required: false, type: .list), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The name of the domain.
        public let name: String?
        /// The AWS Region and Availability Zones where the domain recordset was created.
        public let location: ResourceLocation?
        /// The resource type. 
        public let resourceType: ResourceType?
        /// An array of key-value pairs containing information about the domain entries.
        public let domainEntries: [DomainEntry]?
        /// The date when the domain recordset was created.
        public let createdAt: TimeStamp?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The Amazon Resource Name (ARN) of the domain recordset (e.g., arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE).
        public let arn: String?

        public init(name: String? = nil, location: ResourceLocation? = nil, resourceType: ResourceType? = nil, domainEntries: [DomainEntry]? = nil, createdAt: TimeStamp? = nil, supportCode: String? = nil, arn: String? = nil) {
            self.name = name
            self.location = location
            self.resourceType = resourceType
            self.domainEntries = domainEntries
            self.createdAt = createdAt
            self.supportCode = supportCode
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case location = "location"
            case resourceType = "resourceType"
            case domainEntries = "domainEntries"
            case createdAt = "createdAt"
            case supportCode = "supportCode"
            case arn = "arn"
        }
    }

    public struct GetStaticIpResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIp", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the requested static IP.
        public let staticIp: StaticIp?

        public init(staticIp: StaticIp? = nil) {
            self.staticIp = staticIp
        }

        private enum CodingKeys: String, CodingKey {
            case staticIp = "staticIp"
        }
    }

    public struct DetachStaticIpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP to detach from the instance.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct GetActiveNamesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "activeNames", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get active names request.
        public let nextPageToken: String?
        /// The list of active names returned by the get active names request.
        public let activeNames: [String]?

        public init(nextPageToken: String? = nil, activeNames: [String]? = nil) {
            self.nextPageToken = nextPageToken
            self.activeNames = activeNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case activeNames = "activeNames"
        }
    }

    public struct DeleteInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance to delete.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetOperationsForResourceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageCount", required: false, type: .string), 
            AWSShapeMember(label: "operations", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// (Deprecated) Returns the number of pages of results that remain.  In releases prior to June 12, 2017, this parameter returned null by the API. It is now deprecated, and the API returns the nextPageToken parameter instead. 
        public let nextPageCount: String?
        /// An array of key-value pairs containing information about the results of your get operations for resource request.
        public let operations: [Operation]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextPageToken: String?

        public init(nextPageCount: String? = nil, operations: [Operation]? = nil, nextPageToken: String? = nil) {
            self.nextPageCount = nextPageCount
            self.operations = operations
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageCount = "nextPageCount"
            case operations = "operations"
            case nextPageToken = "nextPageToken"
        }
    }

    public enum InstanceMetricName: String, CustomStringConvertible, Codable {
        case cpuutilization = "CPUUtilization"
        case networkin = "NetworkIn"
        case networkout = "NetworkOut"
        case statuscheckfailed = "StatusCheckFailed"
        case statuscheckfailed_instance = "StatusCheckFailed_Instance"
        case statuscheckfailed_system = "StatusCheckFailed_System"
        public var description: String { return self.rawValue }
    }

    public enum PortAccessType: String, CustomStringConvertible, Codable {
        case `public` = "Public"
        case `private` = "Private"
        public var description: String { return self.rawValue }
    }

    public struct Disk: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "isAttached", required: false, type: .boolean), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "isSystemDisk", required: false, type: .boolean), 
            AWSShapeMember(label: "attachmentState", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "attachedTo", required: false, type: .string), 
            AWSShapeMember(label: "sizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "gbInUse", required: false, type: .integer), 
            AWSShapeMember(label: "iops", required: false, type: .integer)
        ]
        /// A Boolean value indicating whether the disk is attached.
        public let isAttached: Bool?
        /// The name of the disk.
        public let name: String?
        /// The resource type of the disk. 
        public let resourceType: ResourceType?
        /// The date when the disk was created.
        public let createdAt: TimeStamp?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public let isSystemDisk: Bool?
        /// The attachment state of the disk.
        public let attachmentState: String?
        /// The Amazon Resource Name (ARN) of the disk.
        public let arn: String?
        /// The resources to which the disk is attached.
        public let attachedTo: String?
        /// The size of the disk in GB.
        public let sizeInGb: Int32?
        /// The region and Availability Zone where the disk is located.
        public let location: ResourceLocation?
        /// The disk path.
        public let path: String?
        /// The number of GB in use by the disk.
        public let gbInUse: Int32?
        /// The input/output operations per second (IOPS) of the disk.
        public let iops: Int32?

        public init(isAttached: Bool? = nil, name: String? = nil, resourceType: ResourceType? = nil, createdAt: TimeStamp? = nil, supportCode: String? = nil, isSystemDisk: Bool? = nil, attachmentState: String? = nil, arn: String? = nil, attachedTo: String? = nil, sizeInGb: Int32? = nil, location: ResourceLocation? = nil, path: String? = nil, gbInUse: Int32? = nil, iops: Int32? = nil) {
            self.isAttached = isAttached
            self.name = name
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.supportCode = supportCode
            self.isSystemDisk = isSystemDisk
            self.attachmentState = attachmentState
            self.arn = arn
            self.attachedTo = attachedTo
            self.sizeInGb = sizeInGb
            self.location = location
            self.path = path
            self.gbInUse = gbInUse
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case isAttached = "isAttached"
            case name = "name"
            case resourceType = "resourceType"
            case createdAt = "createdAt"
            case supportCode = "supportCode"
            case isSystemDisk = "isSystemDisk"
            case attachmentState = "attachmentState"
            case arn = "arn"
            case attachedTo = "attachedTo"
            case sizeInGb = "sizeInGb"
            case location = "location"
            case path = "path"
            case gbInUse = "gbInUse"
            case iops = "iops"
        }
    }

    public struct GetDomainsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get domains request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct UpdateDomainEntryResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetKeyPairsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get key pairs request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct DomainEntry: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "options", required: false, type: .map), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "target", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string)
        ]
        /// The options for the domain entry.
        public let options: [String: String]?
        /// The name of the domain.
        public let name: String?
        /// The target AWS name server (e.g., ns-111.awsdns-22.com.).
        public let target: String?
        /// The ID of the domain recordset entry.
        public let id: String?
        /// The type of domain entry (e.g., SOA or NS).
        public let `type`: String?

        public init(options: [String: String]? = nil, name: String? = nil, target: String? = nil, id: String? = nil, type: String? = nil) {
            self.options = options
            self.name = name
            self.target = target
            self.id = id
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case options = "options"
            case name = "name"
            case target = "target"
            case id = "id"
            case `type` = "type"
        }
    }

    public struct DownloadDefaultKeyPairResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "privateKeyBase64", required: false, type: .string), 
            AWSShapeMember(label: "publicKeyBase64", required: false, type: .string)
        ]
        /// A base64-encoded RSA private key.
        public let privateKeyBase64: String?
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String?

        public init(privateKeyBase64: String? = nil, publicKeyBase64: String? = nil) {
            self.privateKeyBase64 = privateKeyBase64
            self.publicKeyBase64 = publicKeyBase64
        }

        private enum CodingKeys: String, CodingKey {
            case privateKeyBase64 = "privateKeyBase64"
            case publicKeyBase64 = "publicKeyBase64"
        }
    }

    public struct CreateInstancesFromSnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your create instances from snapshot request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AvailabilityZone: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .string), 
            AWSShapeMember(label: "zoneName", required: false, type: .string)
        ]
        /// The state of the Availability Zone.
        public let state: String?
        /// The name of the Availability Zone. The format is us-east-1a (case-sensitive).
        public let zoneName: String?

        public init(state: String? = nil, zoneName: String? = nil) {
            self.state = state
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case zoneName = "zoneName"
        }
    }

    public struct IsVpcPeeredRequest: AWSShape {
        /// The key for the payload

    }

    public enum MetricUnit: String, CustomStringConvertible, Codable {
        case seconds = "Seconds"
        case microseconds = "Microseconds"
        case milliseconds = "Milliseconds"
        case bytes = "Bytes"
        case kilobytes = "Kilobytes"
        case megabytes = "Megabytes"
        case gigabytes = "Gigabytes"
        case terabytes = "Terabytes"
        case bits = "Bits"
        case kilobits = "Kilobits"
        case megabits = "Megabits"
        case gigabits = "Gigabits"
        case terabits = "Terabits"
        case percent = "Percent"
        case count = "Count"
        case bytes_second = "Bytes/Second"
        case kilobytes_second = "Kilobytes/Second"
        case megabytes_second = "Megabytes/Second"
        case gigabytes_second = "Gigabytes/Second"
        case terabytes_second = "Terabytes/Second"
        case bits_second = "Bits/Second"
        case kilobits_second = "Kilobits/Second"
        case megabits_second = "Megabits/Second"
        case gigabits_second = "Gigabits/Second"
        case terabits_second = "Terabits/Second"
        case count_second = "Count/Second"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public struct CreateDomainEntryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainEntry", required: true, type: .structure), 
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// An array of key-value pairs containing information about the domain entry request.
        public let domainEntry: DomainEntry
        /// The domain name (e.g., example.com) for which you want to create the domain entry.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct CreateInstanceSnapshotRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name for your new snapshot.
        public let instanceSnapshotName: String
        /// The Lightsail instance on which to base your snapshot.
        public let instanceName: String

        public init(instanceSnapshotName: String, instanceName: String) {
            self.instanceSnapshotName = instanceSnapshotName
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
            case instanceName = "instanceName"
        }
    }

    public struct StopInstanceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetInstancesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "instances", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get instances request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about your instances.
        public let instances: [Instance]?

        public init(nextPageToken: String? = nil, instances: [Instance]? = nil) {
            self.nextPageToken = nextPageToken
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case instances = "instances"
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case minimum = "Minimum"
        case maximum = "Maximum"
        case sum = "Sum"
        case average = "Average"
        case samplecount = "SampleCount"
        public var description: String { return self.rawValue }
    }

    public struct InstanceState: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "code", required: false, type: .integer)
        ]
        /// The state of the instance (e.g., running or pending).
        public let name: String?
        /// The status code for the instance.
        public let code: Int32?

        public init(name: String? = nil, code: Int32? = nil) {
            self.name = name
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case code = "code"
        }
    }

    public struct PeerVpcResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetInstanceSnapshotRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string)
        ]
        /// The name of the snapshot for which you are requesting information.
        public let instanceSnapshotName: String

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct AllocateStaticIpResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the static IP address you allocated.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteKeyPairResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your delete key pair request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetKeyPairResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPair", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the key pair.
        public let keyPair: KeyPair?

        public init(keyPair: KeyPair? = nil) {
            self.keyPair = keyPair
        }

        private enum CodingKeys: String, CodingKey {
            case keyPair = "keyPair"
        }
    }

    public struct GetRegionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeAvailabilityZones", required: false, type: .boolean)
        ]
        /// A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., us-east-1a.
        public let includeAvailabilityZones: Bool?

        public init(includeAvailabilityZones: Bool? = nil) {
            self.includeAvailabilityZones = includeAvailabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case includeAvailabilityZones = "includeAvailabilityZones"
        }
    }

    public struct PutInstancePublicPortsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "portInfos", required: true, type: .list), 
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// Specifies information about the public port(s).
        public let portInfos: [PortInfo]
        /// The Lightsail instance name of the public port(s) you are setting.
        public let instanceName: String

        public init(portInfos: [PortInfo], instanceName: String) {
            self.portInfos = portInfos
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case portInfos = "portInfos"
            case instanceName = "instanceName"
        }
    }

    public struct GetInstanceAccessDetailsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessDetails", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about a get instance access request.
        public let accessDetails: InstanceAccessDetails?

        public init(accessDetails: InstanceAccessDetails? = nil) {
            self.accessDetails = accessDetails
        }

        private enum CodingKeys: String, CodingKey {
            case accessDetails = "accessDetails"
        }
    }

    public struct AttachStaticIpResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about your API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct PortInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "fromPort", required: false, type: .integer), 
            AWSShapeMember(label: "toPort", required: false, type: .integer)
        ]
        /// The protocol. 
        public let `protocol`: NetworkProtocol?
        /// The first port in the range.
        public let fromPort: Int32?
        /// The last port in the range.
        public let toPort: Int32?

        public init(protocol: NetworkProtocol? = nil, fromPort: Int32? = nil, toPort: Int32? = nil) {
            self.`protocol` = `protocol`
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case fromPort = "fromPort"
            case toPort = "toPort"
        }
    }

    public struct GetActiveNamesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for paginating results from your get active names request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct RebootInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance to reboot.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct MetricDatapoint: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "sampleCount", required: false, type: .double), 
            AWSShapeMember(label: "unit", required: false, type: .enum), 
            AWSShapeMember(label: "average", required: false, type: .double), 
            AWSShapeMember(label: "maximum", required: false, type: .double), 
            AWSShapeMember(label: "minimum", required: false, type: .double), 
            AWSShapeMember(label: "sum", required: false, type: .double), 
            AWSShapeMember(label: "timestamp", required: false, type: .timestamp)
        ]
        /// The sample count.
        public let sampleCount: Double?
        /// The unit. 
        public let unit: MetricUnit?
        /// The average.
        public let average: Double?
        /// The maximum.
        public let maximum: Double?
        /// The minimum.
        public let minimum: Double?
        /// The sum.
        public let sum: Double?
        /// The timestamp (e.g., 1479816991.349).
        public let timestamp: TimeStamp?

        public init(sampleCount: Double? = nil, unit: MetricUnit? = nil, average: Double? = nil, maximum: Double? = nil, minimum: Double? = nil, sum: Double? = nil, timestamp: TimeStamp? = nil) {
            self.sampleCount = sampleCount
            self.unit = unit
            self.average = average
            self.maximum = maximum
            self.minimum = minimum
            self.sum = sum
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case sampleCount = "sampleCount"
            case unit = "unit"
            case average = "average"
            case maximum = "maximum"
            case minimum = "minimum"
            case sum = "sum"
            case timestamp = "timestamp"
        }
    }

    public struct GetInstancesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get instances request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct InstanceNetworking: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ports", required: false, type: .list), 
            AWSShapeMember(label: "monthlyTransfer", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the ports on the instance.
        public let ports: [InstancePortInfo]?
        /// The amount of data in GB allocated for monthly data transfers.
        public let monthlyTransfer: MonthlyTransfer?

        public init(ports: [InstancePortInfo]? = nil, monthlyTransfer: MonthlyTransfer? = nil) {
            self.ports = ports
            self.monthlyTransfer = monthlyTransfer
        }

        private enum CodingKeys: String, CodingKey {
            case ports = "ports"
            case monthlyTransfer = "monthlyTransfer"
        }
    }

    public enum InstanceSnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case error = "error"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public struct DownloadDefaultKeyPairRequest: AWSShape {
        /// The key for the payload

    }

    public struct PutInstancePublicPortsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// Describes metadata about the operation you just executed.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetInstanceSnapshotsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get instance snapshots request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetInstanceSnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshot", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your get instance snapshot request.
        public let instanceSnapshot: InstanceSnapshot?

        public init(instanceSnapshot: InstanceSnapshot? = nil) {
            self.instanceSnapshot = instanceSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshot = "instanceSnapshot"
        }
    }

    public enum InstanceAccessProtocol: String, CustomStringConvertible, Codable {
        case ssh = "ssh"
        case rdp = "rdp"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDomainEntryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainEntry", required: true, type: .structure), 
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// An array of key-value pairs containing information about your domain entries.
        public let domainEntry: DomainEntry
        /// The name of the domain entry to delete.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct Operation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operationType", required: false, type: .enum), 
            AWSShapeMember(label: "isTerminal", required: false, type: .boolean), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "errorCode", required: false, type: .string), 
            AWSShapeMember(label: "resourceName", required: false, type: .string), 
            AWSShapeMember(label: "errorDetails", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusChangedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "operationDetails", required: false, type: .string)
        ]
        /// The type of operation. 
        public let operationType: OperationType?
        /// A Boolean value indicating whether the operation is terminal.
        public let isTerminal: Bool?
        /// The region and Availability Zone.
        public let location: ResourceLocation?
        /// The resource type. 
        public let resourceType: ResourceType?
        /// The ID of the operation.
        public let id: String?
        /// The error code.
        public let errorCode: String?
        /// The resource name.
        public let resourceName: String?
        /// The error details.
        public let errorDetails: String?
        /// The timestamp when the operation was initialized (e.g., 1479816991.349).
        public let createdAt: TimeStamp?
        /// The status of the operation. 
        public let status: OperationStatus?
        /// The timestamp when the status was changed (e.g., 1479816991.349).
        public let statusChangedAt: TimeStamp?
        /// Details about the operation (e.g., Debian-1GB-Virginia-1).
        public let operationDetails: String?

        public init(operationType: OperationType? = nil, isTerminal: Bool? = nil, location: ResourceLocation? = nil, resourceType: ResourceType? = nil, id: String? = nil, errorCode: String? = nil, resourceName: String? = nil, errorDetails: String? = nil, createdAt: TimeStamp? = nil, status: OperationStatus? = nil, statusChangedAt: TimeStamp? = nil, operationDetails: String? = nil) {
            self.operationType = operationType
            self.isTerminal = isTerminal
            self.location = location
            self.resourceType = resourceType
            self.id = id
            self.errorCode = errorCode
            self.resourceName = resourceName
            self.errorDetails = errorDetails
            self.createdAt = createdAt
            self.status = status
            self.statusChangedAt = statusChangedAt
            self.operationDetails = operationDetails
        }

        private enum CodingKeys: String, CodingKey {
            case operationType = "operationType"
            case isTerminal = "isTerminal"
            case location = "location"
            case resourceType = "resourceType"
            case id = "id"
            case errorCode = "errorCode"
            case resourceName = "resourceName"
            case errorDetails = "errorDetails"
            case createdAt = "createdAt"
            case status = "status"
            case statusChangedAt = "statusChangedAt"
            case operationDetails = "operationDetails"
        }
    }

    public struct ResourceLocation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "regionName", required: false, type: .enum), 
            AWSShapeMember(label: "availabilityZone", required: false, type: .string)
        ]
        /// The AWS Region name.
        public let regionName: RegionName?
        /// The Availability Zone. Follows the format us-east-1a (case-sensitive).
        public let availabilityZone: String?

        public init(regionName: RegionName? = nil, availabilityZone: String? = nil) {
            self.regionName = regionName
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "regionName"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct GetOperationsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get operations request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about the results of your get operations request.
        public let operations: [Operation]?

        public init(nextPageToken: String? = nil, operations: [Operation]? = nil) {
            self.nextPageToken = nextPageToken
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case operations = "operations"
        }
    }

    public struct GetBlueprintsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "blueprints", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get blueprints request.
        public let nextPageToken: String?
        /// An array of key-value pairs that contains information about the available blueprints.
        public let blueprints: [Blueprint]?

        public init(nextPageToken: String? = nil, blueprints: [Blueprint]? = nil) {
            self.nextPageToken = nextPageToken
            self.blueprints = blueprints
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case blueprints = "blueprints"
        }
    }

    public struct CreateKeyPairRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string)
        ]
        /// The name for your new key pair.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct ReleaseStaticIpResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DetachStaticIpResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your detach static IP request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case deleteinstance = "DeleteInstance"
        case createinstance = "CreateInstance"
        case stopinstance = "StopInstance"
        case startinstance = "StartInstance"
        case rebootinstance = "RebootInstance"
        case openinstancepublicports = "OpenInstancePublicPorts"
        case putinstancepublicports = "PutInstancePublicPorts"
        case closeinstancepublicports = "CloseInstancePublicPorts"
        case allocatestaticip = "AllocateStaticIp"
        case releasestaticip = "ReleaseStaticIp"
        case attachstaticip = "AttachStaticIp"
        case detachstaticip = "DetachStaticIp"
        case updatedomainentry = "UpdateDomainEntry"
        case deletedomainentry = "DeleteDomainEntry"
        case createdomain = "CreateDomain"
        case deletedomain = "DeleteDomain"
        case createinstancesnapshot = "CreateInstanceSnapshot"
        case deleteinstancesnapshot = "DeleteInstanceSnapshot"
        case createinstancesfromsnapshot = "CreateInstancesFromSnapshot"
        public var description: String { return self.rawValue }
    }

    public struct ImportKeyPairRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string), 
            AWSShapeMember(label: "publicKeyBase64", required: true, type: .string)
        ]
        /// The name of the key pair for which you want to import the public key.
        public let keyPairName: String
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String

        public init(keyPairName: String, publicKeyBase64: String) {
            self.keyPairName = keyPairName
            self.publicKeyBase64 = publicKeyBase64
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
            case publicKeyBase64 = "publicKeyBase64"
        }
    }

    public struct GetBlueprintsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string), 
            AWSShapeMember(label: "includeInactive", required: false, type: .boolean)
        ]
        /// A token used for advancing to the next page of results from your get blueprints request.
        public let pageToken: String?
        /// A Boolean value indicating whether to include inactive results in your request.
        public let includeInactive: Bool?

        public init(pageToken: String? = nil, includeInactive: Bool? = nil) {
            self.pageToken = pageToken
            self.includeInactive = includeInactive
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case includeInactive = "includeInactive"
        }
    }

    public struct DeleteKeyPairRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string)
        ]
        /// The name of the key pair to delete.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct InstancePortInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessFrom", required: false, type: .string), 
            AWSShapeMember(label: "fromPort", required: false, type: .integer), 
            AWSShapeMember(label: "commonName", required: false, type: .string), 
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "accessDirection", required: false, type: .enum), 
            AWSShapeMember(label: "accessType", required: false, type: .enum), 
            AWSShapeMember(label: "toPort", required: false, type: .integer)
        ]
        /// The location from which access is allowed (e.g., Anywhere (0.0.0.0/0)).
        public let accessFrom: String?
        /// The first port in the range.
        public let fromPort: Int32?
        /// The common name.
        public let commonName: String?
        /// The protocol being used. Can be one of the following.    tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.    all - All transport layer protocol types. For more general information, see Transport layer on Wikipedia.    udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.  
        public let `protocol`: NetworkProtocol?
        /// The access direction (inbound or outbound).
        public let accessDirection: AccessDirection?
        /// The type of access (Public or Private).
        public let accessType: PortAccessType?
        /// The last port in the range.
        public let toPort: Int32?

        public init(accessFrom: String? = nil, fromPort: Int32? = nil, commonName: String? = nil, protocol: NetworkProtocol? = nil, accessDirection: AccessDirection? = nil, accessType: PortAccessType? = nil, toPort: Int32? = nil) {
            self.accessFrom = accessFrom
            self.fromPort = fromPort
            self.commonName = commonName
            self.`protocol` = `protocol`
            self.accessDirection = accessDirection
            self.accessType = accessType
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case accessFrom = "accessFrom"
            case fromPort = "fromPort"
            case commonName = "commonName"
            case `protocol` = "protocol"
            case accessDirection = "accessDirection"
            case accessType = "accessType"
            case toPort = "toPort"
        }
    }

    public struct GetDomainRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// The domain name for which your want to return information about.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetInstancePortStatesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetInstanceStateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance to get state information about.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct DeleteInstanceSnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your delete instance snapshot request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateInstancesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "availabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "keyPairName", required: false, type: .string), 
            AWSShapeMember(label: "customImageName", required: false, type: .string), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list), 
            AWSShapeMember(label: "bundleId", required: true, type: .string), 
            AWSShapeMember(label: "userData", required: false, type: .string), 
            AWSShapeMember(label: "blueprintId", required: true, type: .string)
        ]
        /// The Availability Zone in which to create your instance. Use the following format: us-east-1a (case sensitive). You can get a list of availability zones by using the get regions operation. Be sure to add the include availability zones parameter to your request.
        public let availabilityZone: String
        /// The name of your key pair.
        public let keyPairName: String?
        /// (Deprecated) The name for your custom image.  In releases prior to June 12, 2017, this parameter was ignored by the API. It is now deprecated. 
        public let customImageName: String?
        /// The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: ["MyFirstInstance","MySecondInstance"] 
        public let instanceNames: [String]
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public let bundleId: String
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get –y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public let userData: String?
        /// The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0). Use the get blueprints operation to return a list of available images (or blueprints).
        public let blueprintId: String

        public init(availabilityZone: String, keyPairName: String? = nil, customImageName: String? = nil, instanceNames: [String], bundleId: String, userData: String? = nil, blueprintId: String) {
            self.availabilityZone = availabilityZone
            self.keyPairName = keyPairName
            self.customImageName = customImageName
            self.instanceNames = instanceNames
            self.bundleId = bundleId
            self.userData = userData
            self.blueprintId = blueprintId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case keyPairName = "keyPairName"
            case customImageName = "customImageName"
            case instanceNames = "instanceNames"
            case bundleId = "bundleId"
            case userData = "userData"
            case blueprintId = "blueprintId"
        }
    }

    public struct Blueprint: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "isActive", required: false, type: .boolean), 
            AWSShapeMember(label: "productUrl", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "licenseUrl", required: false, type: .string), 
            AWSShapeMember(label: "versionCode", required: false, type: .string), 
            AWSShapeMember(label: "group", required: false, type: .string), 
            AWSShapeMember(label: "minPower", required: false, type: .integer), 
            AWSShapeMember(label: "blueprintId", required: false, type: .string)
        ]
        /// The type of the blueprint (e.g., os or app).
        public let `type`: BlueprintType?
        /// A Boolean value indicating whether the blueprint is active. When you update your blueprints, you will inactivate old blueprints and keep the most recent versions active.
        public let isActive: Bool?
        /// The product URL to learn more about the image or blueprint.
        public let productUrl: String?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public let name: String?
        /// The description of the blueprint.
        public let description: String?
        /// The version number of the operating system, application, or stack (e.g., 2016.03.0).
        public let version: String?
        /// The end-user license agreement URL for the image or blueprint.
        public let licenseUrl: String?
        /// The version code.
        public let versionCode: String?
        /// The group name of the blueprint (e.g., amazon-linux).
        public let group: String?
        /// The minimum machine size required to run this blueprint. 0 indicates that the blueprint runs on all instances.
        public let minPower: Int32?
        /// The ID for the virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0).
        public let blueprintId: String?

        public init(type: BlueprintType? = nil, isActive: Bool? = nil, productUrl: String? = nil, name: String? = nil, description: String? = nil, version: String? = nil, licenseUrl: String? = nil, versionCode: String? = nil, group: String? = nil, minPower: Int32? = nil, blueprintId: String? = nil) {
            self.`type` = `type`
            self.isActive = isActive
            self.productUrl = productUrl
            self.name = name
            self.description = description
            self.version = version
            self.licenseUrl = licenseUrl
            self.versionCode = versionCode
            self.group = group
            self.minPower = minPower
            self.blueprintId = blueprintId
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case isActive = "isActive"
            case productUrl = "productUrl"
            case name = "name"
            case description = "description"
            case version = "version"
            case licenseUrl = "licenseUrl"
            case versionCode = "versionCode"
            case group = "group"
            case minPower = "minPower"
            case blueprintId = "blueprintId"
        }
    }

    public struct DeleteInstanceSnapshotRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string)
        ]
        /// The name of the snapshot to delete.
        public let instanceSnapshotName: String

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct GetBundlesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "bundles", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get active names request.
        public let nextPageToken: String?
        /// An array of key-value pairs that contains information about the available bundles.
        public let bundles: [Bundle]?

        public init(nextPageToken: String? = nil, bundles: [Bundle]? = nil) {
            self.nextPageToken = nextPageToken
            self.bundles = bundles
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case bundles = "bundles"
        }
    }

    public struct Region: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "continentCode", required: false, type: .string), 
            AWSShapeMember(label: "availabilityZones", required: false, type: .list)
        ]
        /// The description of the AWS Region (e.g., This region is recommended to serve users in the eastern United States and eastern Canada).
        public let description: String?
        /// The display name (e.g., Virginia).
        public let displayName: String?
        /// The region name (e.g., us-east-1).
        public let name: RegionName?
        /// The continent code (e.g., NA, meaning North America).
        public let continentCode: String?
        /// The Availability Zones. Follows the format us-east-1a (case-sensitive).
        public let availabilityZones: [AvailabilityZone]?

        public init(description: String? = nil, displayName: String? = nil, name: RegionName? = nil, continentCode: String? = nil, availabilityZones: [AvailabilityZone]? = nil) {
            self.description = description
            self.displayName = displayName
            self.name = name
            self.continentCode = continentCode
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case displayName = "displayName"
            case name = "name"
            case continentCode = "continentCode"
            case availabilityZones = "availabilityZones"
        }
    }

    public struct CreateDomainEntryResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public enum NetworkProtocol: String, CustomStringConvertible, Codable {
        case tcp = "tcp"
        case all = "all"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDomainEntryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainEntry", required: true, type: .structure), 
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// An array of key-value pairs containing information about the domain entry.
        public let domainEntry: DomainEntry
        /// The name of the domain recordset to update.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct GetDomainResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domain", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about your get domain request.
        public let domain: Domain?

        public init(domain: Domain? = nil) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
        }
    }

    public struct CloseInstancePublicPortsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs that contains information about the operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetOperationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your get operation request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct AllocateStaticIpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP address.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct MonthlyTransfer: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "gbPerMonthAllocated", required: false, type: .integer)
        ]
        /// The amount allocated per month (in GB).
        public let gbPerMonthAllocated: Int32?

        public init(gbPerMonthAllocated: Int32? = nil) {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }

        private enum CodingKeys: String, CodingKey {
            case gbPerMonthAllocated = "gbPerMonthAllocated"
        }
    }

    public struct UnpeerVpcResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public enum PortState: String, CustomStringConvertible, Codable {
        case open = "open"
        case closed = "closed"
        public var description: String { return self.rawValue }
    }

    public struct StartInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance (a virtual private server) to start.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct OpenInstancePublicPortsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CreateInstanceSnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your create instances snapshot request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct StartInstanceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetStaticIpsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "staticIps", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get static IPs request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about your get static IPs request.
        public let staticIps: [StaticIp]?

        public init(nextPageToken: String? = nil, staticIps: [StaticIp]? = nil) {
            self.nextPageToken = nextPageToken
            self.staticIps = staticIps
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case staticIps = "staticIps"
        }
    }

    public enum AccessDirection: String, CustomStringConvertible, Codable {
        case inbound = "inbound"
        case outbound = "outbound"
        public var description: String { return self.rawValue }
    }

    public struct GetInstanceMetricDataRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "unit", required: true, type: .enum), 
            AWSShapeMember(label: "statistics", required: true, type: .list), 
            AWSShapeMember(label: "endTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "period", required: true, type: .integer), 
            AWSShapeMember(label: "startTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "metricName", required: true, type: .enum)
        ]
        /// The name of the instance for which you want to get metrics data.
        public let instanceName: String
        /// The unit. The list of valid values is below.
        public let unit: MetricUnit
        /// The instance statistics. 
        public let statistics: [MetricStatistic]
        /// The end time of the time period.
        public let endTime: TimeStamp
        /// The time period for which you are requesting data.
        public let period: Int32
        /// The start time of the time period.
        public let startTime: TimeStamp
        /// The metric name to get data about. 
        public let metricName: InstanceMetricName

        public init(instanceName: String, unit: MetricUnit, statistics: [MetricStatistic], endTime: TimeStamp, period: Int32, startTime: TimeStamp, metricName: InstanceMetricName) {
            self.instanceName = instanceName
            self.unit = unit
            self.statistics = statistics
            self.endTime = endTime
            self.period = period
            self.startTime = startTime
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case unit = "unit"
            case statistics = "statistics"
            case endTime = "endTime"
            case period = "period"
            case startTime = "startTime"
            case metricName = "metricName"
        }
    }

    public struct StopInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance (a virtual private server) to stop.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct InstanceHardware: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cpuCount", required: false, type: .integer), 
            AWSShapeMember(label: "disks", required: false, type: .list), 
            AWSShapeMember(label: "ramSizeInGb", required: false, type: .float)
        ]
        /// The number of vCPUs the instance has.
        public let cpuCount: Int32?
        /// The disks attached to the instance.
        public let disks: [Disk]?
        /// The amount of RAM in GB on the instance (e.g., 1.0).
        public let ramSizeInGb: Float?

        public init(cpuCount: Int32? = nil, disks: [Disk]? = nil, ramSizeInGb: Float? = nil) {
            self.cpuCount = cpuCount
            self.disks = disks
            self.ramSizeInGb = ramSizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCount = "cpuCount"
            case disks = "disks"
            case ramSizeInGb = "ramSizeInGb"
        }
    }

    public struct GetStaticIpsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get static IPs request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct CreateDomainRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// The domain name to manage (e.g., example.com).  You cannot register a new domain name using Lightsail. You must register a domain name using Amazon Route 53 or another domain name registrar. If you have already registered your domain, you can enter its name in this parameter to manage the DNS records for that domain. 
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

}