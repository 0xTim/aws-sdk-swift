// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Sdb {

    public struct ReplaceableAttribute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the replaceable attribute.
        public var value: String = ""
        /// The name of the replaceable attribute.
        public var name: String = ""
        /// A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is false.
        public var replace: Bool? = nil

        public init() {}

        public init(value: String, name: String, replace: Bool? = nil) {
            self.value = value
            self.name = name
            self.replace = replace
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.replace = dictionary["Replace"] as? Bool
        }
    }

    public struct GetAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
        public var consistentRead: Bool? = nil
        /// The name of the item.
        public var itemName: String = ""
        /// The name of the domain in which to perform the operation.
        public var domainName: String = ""
        /// The names of the attributes.
        public var attributeNames: [String]? = nil

        public init() {}

        public init(consistentRead: Bool? = nil, itemName: String, domainName: String, attributeNames: [String]? = nil) {
            self.consistentRead = consistentRead
            self.itemName = itemName
            self.domainName = domainName
            self.attributeNames = attributeNames
        }

        public init(dictionary: [String: Any]) throws {
            self.consistentRead = dictionary["ConsistentRead"] as? Bool
            guard let itemName = dictionary["ItemName"] as? String else { throw InitializableError.missingRequiredParam("ItemName") }
            self.itemName = itemName
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            if let attributeNames = dictionary["AttributeNames"] as? [String] {
                self.attributeNames = attributeNames
            }
        }
    }

    public struct ListDomainsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
        public var maxNumberOfDomains: Int32? = nil
        /// A string informing Amazon SimpleDB where to start the next list of domain names.
        public var nextToken: String? = nil

        public init() {}

        public init(maxNumberOfDomains: Int32? = nil, nextToken: String? = nil) {
            self.maxNumberOfDomains = maxNumberOfDomains
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.maxNumberOfDomains = dictionary["MaxNumberOfDomains"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetAttributesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of attributes returned by the operation.
        public var attributes: [Attribute]? = nil

        public init() {}

        public init(attributes: [Attribute]? = nil) {
            self.attributes = attributes
        }

        public init(dictionary: [String: Any]) throws {
            if let attributes = dictionary["Attributes"] as? [[String: Any]] {
                self.attributes = try attributes.map({ try Attribute(dictionary: $0) })
            }
        }
    }

    public struct SelectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
        public var consistentRead: Bool? = nil
        /// A string informing Amazon SimpleDB where to start the next list of ItemNames.
        public var nextToken: String? = nil
        /// The expression used to query the domain.
        public var selectExpression: String = ""

        public init() {}

        public init(consistentRead: Bool? = nil, nextToken: String? = nil, selectExpression: String) {
            self.consistentRead = consistentRead
            self.nextToken = nextToken
            self.selectExpression = selectExpression
        }

        public init(dictionary: [String: Any]) throws {
            self.consistentRead = dictionary["ConsistentRead"] as? Bool
            self.nextToken = dictionary["NextToken"] as? String
            guard let selectExpression = dictionary["SelectExpression"] as? String else { throw InitializableError.missingRequiredParam("SelectExpression") }
            self.selectExpression = selectExpression
        }
    }

    public struct BatchDeleteAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of items on which to perform the operation.
        public var items: [DeletableItem] = []
        /// The name of the domain in which the attributes are being deleted.
        public var domainName: String = ""

        public init() {}

        public init(items: [DeletableItem], domainName: String) {
            self.items = items
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let items = dictionary["Items"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Items") }
            self.items = try items.map({ try DeletableItem(dictionary: $0) })
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct DomainMetadataResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The data and time when metadata was calculated, in Epoch (UNIX) seconds.
        public var timestamp: Int32? = nil
        /// The total size of all unique attribute names in the domain, in bytes.
        public var attributeNamesSizeBytes: Int64? = nil
        /// The total size of all attribute values in the domain, in bytes.
        public var attributeValuesSizeBytes: Int64? = nil
        /// The number of all items in the domain.
        public var itemCount: Int32? = nil
        /// The number of all attribute name/value pairs in the domain.
        public var attributeValueCount: Int32? = nil
        /// The number of unique attribute names in the domain.
        public var attributeNameCount: Int32? = nil
        /// The total size of all item names in the domain, in bytes.
        public var itemNamesSizeBytes: Int64? = nil

        public init() {}

        public init(timestamp: Int32? = nil, attributeNamesSizeBytes: Int64? = nil, attributeValuesSizeBytes: Int64? = nil, itemCount: Int32? = nil, attributeValueCount: Int32? = nil, attributeNameCount: Int32? = nil, itemNamesSizeBytes: Int64? = nil) {
            self.timestamp = timestamp
            self.attributeNamesSizeBytes = attributeNamesSizeBytes
            self.attributeValuesSizeBytes = attributeValuesSizeBytes
            self.itemCount = itemCount
            self.attributeValueCount = attributeValueCount
            self.attributeNameCount = attributeNameCount
            self.itemNamesSizeBytes = itemNamesSizeBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.timestamp = dictionary["Timestamp"] as? Int32
            self.attributeNamesSizeBytes = dictionary["AttributeNamesSizeBytes"] as? Int64
            self.attributeValuesSizeBytes = dictionary["AttributeValuesSizeBytes"] as? Int64
            self.itemCount = dictionary["ItemCount"] as? Int32
            self.attributeValueCount = dictionary["AttributeValueCount"] as? Int32
            self.attributeNameCount = dictionary["AttributeNameCount"] as? Int32
            self.itemNamesSizeBytes = dictionary["ItemNamesSizeBytes"] as? Int64
        }
    }

    public struct Item: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var alternateNameEncoding: String? = nil
        /// The name of the item.
        public var name: String = ""
        /// A list of attributes.
        public var attributes: [Attribute] = []

        public init() {}

        public init(alternateNameEncoding: String? = nil, name: String, attributes: [Attribute]) {
            self.alternateNameEncoding = alternateNameEncoding
            self.name = name
            self.attributes = attributes
        }

        public init(dictionary: [String: Any]) throws {
            self.alternateNameEncoding = dictionary["AlternateNameEncoding"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let attributes = dictionary["Attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Attributes") }
            self.attributes = try attributes.map({ try Attribute(dictionary: $0) })
        }
    }

    public struct Attribute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var alternateNameEncoding: String? = nil
        public var alternateValueEncoding: String? = nil
        /// The name of the attribute.
        public var name: String = ""
        /// The value of the attribute.
        public var value: String = ""

        public init() {}

        public init(alternateNameEncoding: String? = nil, alternateValueEncoding: String? = nil, name: String, value: String) {
            self.alternateNameEncoding = alternateNameEncoding
            self.alternateValueEncoding = alternateValueEncoding
            self.name = name
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            self.alternateNameEncoding = dictionary["AlternateNameEncoding"] as? String
            self.alternateValueEncoding = dictionary["AlternateValueEncoding"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
        }
    }

    public struct DomainMetadataRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain for which to display the metadata of.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct DeleteDomainRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain to delete.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct BatchPutAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of items on which to perform the operation.
        public var items: [ReplaceableItem] = []
        /// The name of the domain in which the attributes are being stored.
        public var domainName: String = ""

        public init() {}

        public init(items: [ReplaceableItem], domainName: String) {
            self.items = items
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let items = dictionary["Items"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Items") }
            self.items = try items.map({ try ReplaceableItem(dictionary: $0) })
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct ReplaceableItem: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the replaceable item.
        public var name: String = ""
        /// The list of attributes for a replaceable item.
        public var attributes: [ReplaceableAttribute] = []

        public init() {}

        public init(name: String, attributes: [ReplaceableAttribute]) {
            self.name = name
            self.attributes = attributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let attributes = dictionary["Attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Attributes") }
            self.attributes = try attributes.map({ try ReplaceableAttribute(dictionary: $0) })
        }
    }

    public struct DeletableItem: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var name: String = ""
        public var attributes: [DeletableAttribute]? = nil

        public init() {}

        public init(name: String, attributes: [DeletableAttribute]? = nil) {
            self.name = name
            self.attributes = attributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            if let attributes = dictionary["Attributes"] as? [[String: Any]] {
                self.attributes = try attributes.map({ try DeletableAttribute(dictionary: $0) })
            }
        }
    }

    public struct UpdateCondition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of an attribute. This value can only be specified when the Exists parameter is equal to true.
        public var value: String? = nil
        /// The name of the attribute involved in the condition.
        public var name: String? = nil
        /// A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify true if the attribute must exist for the update condition to be satisfied. Specify false if the attribute should not exist in order for the update condition to be satisfied.
        public var exists: Bool? = nil

        public init() {}

        public init(value: String? = nil, name: String? = nil, exists: Bool? = nil) {
            self.value = value
            self.name = name
            self.exists = exists
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.name = dictionary["Name"] as? String
            self.exists = dictionary["Exists"] as? Bool
        }
    }

    public struct PutAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the item.
        public var itemName: String = ""
        /// The list of attributes.
        public var attributes: [ReplaceableAttribute] = []
        /// The name of the domain in which to perform the operation.
        public var domainName: String = ""
        /// The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
        public var expected: UpdateCondition? = nil

        public init() {}

        public init(itemName: String, attributes: [ReplaceableAttribute], domainName: String, expected: UpdateCondition? = nil) {
            self.itemName = itemName
            self.attributes = attributes
            self.domainName = domainName
            self.expected = expected
        }

        public init(dictionary: [String: Any]) throws {
            guard let itemName = dictionary["ItemName"] as? String else { throw InitializableError.missingRequiredParam("ItemName") }
            self.itemName = itemName
            guard let attributes = dictionary["Attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Attributes") }
            self.attributes = try attributes.map({ try ReplaceableAttribute(dictionary: $0) })
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            if let expected = dictionary["Expected"] as? [String: Any] { self.expected = try Sdb.UpdateCondition(dictionary: expected) }
        }
    }

    public struct DeletableAttribute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the attribute.
        public var value: String? = nil
        /// The name of the attribute.
        public var name: String = ""

        public init() {}

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct DeleteAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
        public var itemName: String = ""
        /// A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.
        public var attributes: [DeletableAttribute]? = nil
        /// The name of the domain in which to perform the operation.
        public var domainName: String = ""
        /// The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
        public var expected: UpdateCondition? = nil

        public init() {}

        public init(itemName: String, attributes: [DeletableAttribute]? = nil, domainName: String, expected: UpdateCondition? = nil) {
            self.itemName = itemName
            self.attributes = attributes
            self.domainName = domainName
            self.expected = expected
        }

        public init(dictionary: [String: Any]) throws {
            guard let itemName = dictionary["ItemName"] as? String else { throw InitializableError.missingRequiredParam("ItemName") }
            self.itemName = itemName
            if let attributes = dictionary["Attributes"] as? [[String: Any]] {
                self.attributes = try attributes.map({ try DeletableAttribute(dictionary: $0) })
            }
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            if let expected = dictionary["Expected"] as? [String: Any] { self.expected = try Sdb.UpdateCondition(dictionary: expected) }
        }
    }

    public struct ListDomainsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque token indicating that there are more domains than the specified MaxNumberOfDomains still available.
        public var nextToken: String? = nil
        /// A list of domain names that match the expression.
        public var domainNames: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, domainNames: [String]? = nil) {
            self.nextToken = nextToken
            self.domainNames = domainNames
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let domainNames = dictionary["DomainNames"] as? [String] {
                self.domainNames = domainNames
            }
        }
    }

    public struct SelectResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of items that match the select expression.
        public var items: [Item]? = nil
        /// An opaque token indicating that more items than MaxNumberOfItems were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
        public var nextToken: String? = nil

        public init() {}

        public init(items: [Item]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [[String: Any]] {
                self.items = try items.map({ try Item(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct CreateDomainRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

}