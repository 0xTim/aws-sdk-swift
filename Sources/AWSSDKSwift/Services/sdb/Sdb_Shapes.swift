// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Sdb {

    public struct ReplaceableAttribute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Replace", required: false, type: .boolean)
        ]
        /// The value of the replaceable attribute.
        public let value: String
        /// The name of the replaceable attribute.
        public let name: String
        /// A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is false.
        public let replace: Bool?

        public init(value: String, name: String, replace: Bool? = nil) {
            self.value = value
            self.name = name
            self.replace = replace
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
            case replace = "Replace"
        }
    }

    public struct GetAttributesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistentRead", required: false, type: .boolean), 
            AWSShapeMember(label: "ItemName", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "AttributeNames", required: false, type: .structure)
        ]
        /// Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
        public let consistentRead: Bool?
        /// The name of the item.
        public let itemName: String
        /// The name of the domain in which to perform the operation.
        public let domainName: String
        /// The names of the attributes.
        public let attributeNames: AttributeNameList?

        public init(consistentRead: Bool? = nil, itemName: String, domainName: String, attributeNames: AttributeNameList? = nil) {
            self.consistentRead = consistentRead
            self.itemName = itemName
            self.domainName = domainName
            self.attributeNames = attributeNames
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case itemName = "ItemName"
            case domainName = "DomainName"
            case attributeNames = "AttributeNames"
        }
    }

    public struct ListDomainsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxNumberOfDomains", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
        public let maxNumberOfDomains: Int32?
        /// A string informing Amazon SimpleDB where to start the next list of domain names.
        public let nextToken: String?

        public init(maxNumberOfDomains: Int32? = nil, nextToken: String? = nil) {
            self.maxNumberOfDomains = maxNumberOfDomains
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxNumberOfDomains = "MaxNumberOfDomains"
            case nextToken = "NextToken"
        }
    }

    public struct AttributeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list)
        ]
        public let attribute: [Attribute]?

        public init(attribute: [Attribute]? = nil) {
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
        }
    }

    public struct GetAttributesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .structure)
        ]
        /// The list of attributes returned by the operation.
        public let attributes: AttributeList?

        public init(attributes: AttributeList? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct SelectRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistentRead", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SelectExpression", required: true, type: .string)
        ]
        /// Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
        public let consistentRead: Bool?
        /// A string informing Amazon SimpleDB where to start the next list of ItemNames.
        public let nextToken: String?
        /// The expression used to query the domain.
        public let selectExpression: String

        public init(consistentRead: Bool? = nil, nextToken: String? = nil, selectExpression: String) {
            self.consistentRead = consistentRead
            self.nextToken = nextToken
            self.selectExpression = selectExpression
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case nextToken = "NextToken"
            case selectExpression = "SelectExpression"
        }
    }

    public struct BatchDeleteAttributesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// A list of items on which to perform the operation.
        public let items: DeletableItemList
        /// The name of the domain in which the attributes are being deleted.
        public let domainName: String

        public init(items: DeletableItemList, domainName: String) {
            self.items = items
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case domainName = "DomainName"
        }
    }

    public struct DomainMetadataResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", required: false, type: .integer), 
            AWSShapeMember(label: "AttributeNamesSizeBytes", required: false, type: .long), 
            AWSShapeMember(label: "AttributeValuesSizeBytes", required: false, type: .long), 
            AWSShapeMember(label: "ItemCount", required: false, type: .integer), 
            AWSShapeMember(label: "AttributeValueCount", required: false, type: .integer), 
            AWSShapeMember(label: "AttributeNameCount", required: false, type: .integer), 
            AWSShapeMember(label: "ItemNamesSizeBytes", required: false, type: .long)
        ]
        /// The data and time when metadata was calculated, in Epoch (UNIX) seconds.
        public let timestamp: Int32?
        /// The total size of all unique attribute names in the domain, in bytes.
        public let attributeNamesSizeBytes: Int64?
        /// The total size of all attribute values in the domain, in bytes.
        public let attributeValuesSizeBytes: Int64?
        /// The number of all items in the domain.
        public let itemCount: Int32?
        /// The number of all attribute name/value pairs in the domain.
        public let attributeValueCount: Int32?
        /// The number of unique attribute names in the domain.
        public let attributeNameCount: Int32?
        /// The total size of all item names in the domain, in bytes.
        public let itemNamesSizeBytes: Int64?

        public init(timestamp: Int32? = nil, attributeNamesSizeBytes: Int64? = nil, attributeValuesSizeBytes: Int64? = nil, itemCount: Int32? = nil, attributeValueCount: Int32? = nil, attributeNameCount: Int32? = nil, itemNamesSizeBytes: Int64? = nil) {
            self.timestamp = timestamp
            self.attributeNamesSizeBytes = attributeNamesSizeBytes
            self.attributeValuesSizeBytes = attributeValuesSizeBytes
            self.itemCount = itemCount
            self.attributeValueCount = attributeValueCount
            self.attributeNameCount = attributeNameCount
            self.itemNamesSizeBytes = itemNamesSizeBytes
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case attributeNamesSizeBytes = "AttributeNamesSizeBytes"
            case attributeValuesSizeBytes = "AttributeValuesSizeBytes"
            case itemCount = "ItemCount"
            case attributeValueCount = "AttributeValueCount"
            case attributeNameCount = "AttributeNameCount"
            case itemNamesSizeBytes = "ItemNamesSizeBytes"
        }
    }

    public struct Item: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlternateNameEncoding", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .structure)
        ]
        public let alternateNameEncoding: String?
        /// The name of the item.
        public let name: String
        /// A list of attributes.
        public let attributes: AttributeList

        public init(alternateNameEncoding: String? = nil, name: String, attributes: AttributeList) {
            self.alternateNameEncoding = alternateNameEncoding
            self.name = name
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case alternateNameEncoding = "AlternateNameEncoding"
            case name = "Name"
            case attributes = "Attributes"
        }
    }

    public struct Attribute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlternateNameEncoding", required: false, type: .string), 
            AWSShapeMember(label: "AlternateValueEncoding", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        public let alternateNameEncoding: String?
        public let alternateValueEncoding: String?
        /// The name of the attribute.
        public let name: String
        /// The value of the attribute.
        public let value: String

        public init(alternateNameEncoding: String? = nil, alternateValueEncoding: String? = nil, name: String, value: String) {
            self.alternateNameEncoding = alternateNameEncoding
            self.alternateValueEncoding = alternateValueEncoding
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case alternateNameEncoding = "AlternateNameEncoding"
            case alternateValueEncoding = "AlternateValueEncoding"
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DomainMetadataRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The name of the domain for which to display the metadata of.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DeleteDomainRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The name of the domain to delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct BatchPutAttributesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// A list of items on which to perform the operation.
        public let items: ReplaceableItemList
        /// The name of the domain in which the attributes are being stored.
        public let domainName: String

        public init(items: ReplaceableItemList, domainName: String) {
            self.items = items
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case domainName = "DomainName"
        }
    }

    public struct ReplaceableItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "ItemName"), required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .structure)
        ]
        /// The name of the replaceable item.
        public let name: String
        /// The list of attributes for a replaceable item.
        public let attributes: ReplaceableAttributeList

        public init(name: String, attributes: ReplaceableAttributeList) {
            self.name = name
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case name = "ItemName"
            case attributes = "Attributes"
        }
    }

    public struct DeletableItemList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        public let item: [DeletableItem]?

        public init(item: [DeletableItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct AttributeNameList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .list)
        ]
        public let attributeName: [String]?

        public init(attributeName: [String]? = nil) {
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
        }
    }

    public struct DeletableItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "ItemName"), required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .structure)
        ]
        public let name: String
        public let attributes: DeletableAttributeList?

        public init(name: String, attributes: DeletableAttributeList? = nil) {
            self.name = name
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case name = "ItemName"
            case attributes = "Attributes"
        }
    }

    public struct UpdateCondition: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Exists", required: false, type: .boolean)
        ]
        /// The value of an attribute. This value can only be specified when the Exists parameter is equal to true.
        public let value: String?
        /// The name of the attribute involved in the condition.
        public let name: String?
        /// A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify true if the attribute must exist for the update condition to be satisfied. Specify false if the attribute should not exist in order for the update condition to be satisfied.
        public let exists: Bool?

        public init(value: String? = nil, name: String? = nil, exists: Bool? = nil) {
            self.value = value
            self.name = name
            self.exists = exists
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
            case exists = "Exists"
        }
    }

    public struct ItemList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        public let item: [Item]?

        public init(item: [Item]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct PutAttributesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ItemName", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Expected", required: false, type: .structure)
        ]
        /// The name of the item.
        public let itemName: String
        /// The list of attributes.
        public let attributes: ReplaceableAttributeList
        /// The name of the domain in which to perform the operation.
        public let domainName: String
        /// The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
        public let expected: UpdateCondition?

        public init(itemName: String, attributes: ReplaceableAttributeList, domainName: String, expected: UpdateCondition? = nil) {
            self.itemName = itemName
            self.attributes = attributes
            self.domainName = domainName
            self.expected = expected
        }

        private enum CodingKeys: String, CodingKey {
            case itemName = "ItemName"
            case attributes = "Attributes"
            case domainName = "DomainName"
            case expected = "Expected"
        }
    }

    public struct DeletableAttribute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.
        public let name: String

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct DeleteAttributesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ItemName", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Expected", required: false, type: .structure)
        ]
        /// The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
        public let itemName: String
        /// A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.
        public let attributes: DeletableAttributeList?
        /// The name of the domain in which to perform the operation.
        public let domainName: String
        /// The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
        public let expected: UpdateCondition?

        public init(itemName: String, attributes: DeletableAttributeList? = nil, domainName: String, expected: UpdateCondition? = nil) {
            self.itemName = itemName
            self.attributes = attributes
            self.domainName = domainName
            self.expected = expected
        }

        private enum CodingKeys: String, CodingKey {
            case itemName = "ItemName"
            case attributes = "Attributes"
            case domainName = "DomainName"
            case expected = "Expected"
        }
    }

    public struct ListDomainsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DomainNames", required: false, type: .structure)
        ]
        /// An opaque token indicating that there are more domains than the specified MaxNumberOfDomains still available.
        public let nextToken: String?
        /// A list of domain names that match the expression.
        public let domainNames: DomainNameList?

        public init(nextToken: String? = nil, domainNames: DomainNameList? = nil) {
            self.nextToken = nextToken
            self.domainNames = domainNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case domainNames = "DomainNames"
        }
    }

    public struct ReplaceableAttributeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list)
        ]
        public let attribute: [ReplaceableAttribute]?

        public init(attribute: [ReplaceableAttribute]? = nil) {
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
        }
    }

    public struct DeletableAttributeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list)
        ]
        public let attribute: [DeletableAttribute]?

        public init(attribute: [DeletableAttribute]? = nil) {
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
        }
    }

    public struct ReplaceableItemList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        public let item: [ReplaceableItem]?

        public init(item: [ReplaceableItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct SelectResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of items that match the select expression.
        public let items: ItemList?
        /// An opaque token indicating that more items than MaxNumberOfItems were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
        public let nextToken: String?

        public init(items: ItemList? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDomainRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DomainNameList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: false, type: .list)
        ]
        public let domainName: [String]?

        public init(domainName: [String]? = nil) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

}