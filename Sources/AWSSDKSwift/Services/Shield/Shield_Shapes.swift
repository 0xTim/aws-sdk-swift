// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Shield {

    public struct SummarizedCounter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Max", required: false, type: .double), 
            AWSShapeMember(label: "Average", required: false, type: .double), 
            AWSShapeMember(label: "Sum", required: false, type: .double), 
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "N", required: false, type: .integer)
        ]
        /// The counter name.
        public let name: String?
        /// The maximum value of the counter for a specified time period.
        public let max: Double?
        /// The average value of the counter for a specified time period.
        public let average: Double?
        /// The total of counter values for a specified time period.
        public let sum: Double?
        /// The unit of the counters.
        public let unit: String?
        /// The number of counters for a specified time period.
        public let n: Int32?

        public init(name: String? = nil, max: Double? = nil, average: Double? = nil, sum: Double? = nil, unit: String? = nil, n: Int32? = nil) {
            self.name = name
            self.max = max
            self.average = average
            self.sum = sum
            self.unit = unit
            self.n = n
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case max = "Max"
            case average = "Average"
            case sum = "Sum"
            case unit = "Unit"
            case n = "N"
        }
    }

    public struct AttackDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubResources", required: false, type: .list), 
            AWSShapeMember(label: "Mitigations", required: false, type: .list), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AttackCounters", required: false, type: .list), 
            AWSShapeMember(label: "AttackId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "AttackProperties", required: false, type: .list)
        ]
        /// If applicable, additional detail about the resource being attacked, for example, IP address or URL.
        public let subResources: [SubResourceSummary]?
        /// List of mitigation actions taken for the attack.
        public let mitigations: [Mitigation]?
        /// The time the attack started, in Unix time in seconds. For more information see timestamp.
        public let startTime: TimeStamp?
        /// The time the attack ended, in Unix time in seconds. For more information see timestamp.
        public let endTime: TimeStamp?
        /// List of counters that describe the attack for the specified time period.
        public let attackCounters: [SummarizedCounter]?
        /// The unique identifier (ID) of the attack.
        public let attackId: String?
        /// The ARN (Amazon Resource Name) of the resource that was attacked.
        public let resourceArn: String?
        /// The array of AttackProperty objects.
        public let attackProperties: [AttackProperty]?

        public init(subResources: [SubResourceSummary]? = nil, mitigations: [Mitigation]? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, attackCounters: [SummarizedCounter]? = nil, attackId: String? = nil, resourceArn: String? = nil, attackProperties: [AttackProperty]? = nil) {
            self.subResources = subResources
            self.mitigations = mitigations
            self.startTime = startTime
            self.endTime = endTime
            self.attackCounters = attackCounters
            self.attackId = attackId
            self.resourceArn = resourceArn
            self.attackProperties = attackProperties
        }

        private enum CodingKeys: String, CodingKey {
            case subResources = "SubResources"
            case mitigations = "Mitigations"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case attackCounters = "AttackCounters"
            case attackId = "AttackId"
            case resourceArn = "ResourceArn"
            case attackProperties = "AttackProperties"
        }
    }

    public enum AttackLayer: String, CustomStringConvertible, Codable {
        case network = "NETWORK"
        case application = "APPLICATION"
        public var description: String { return self.rawValue }
    }

    public struct SubResourceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "AttackVectors", required: false, type: .list), 
            AWSShapeMember(label: "Counters", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The SubResource type.
        public let `type`: SubResourceType?
        /// The list of attack types and associated counters.
        public let attackVectors: [SummarizedAttackVector]?
        /// The counters that describe the details of the attack.
        public let counters: [SummarizedCounter]?
        /// The unique identifier (ID) of the SubResource.
        public let id: String?

        public init(type: SubResourceType? = nil, attackVectors: [SummarizedAttackVector]? = nil, counters: [SummarizedCounter]? = nil, id: String? = nil) {
            self.`type` = `type`
            self.attackVectors = attackVectors
            self.counters = counters
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case attackVectors = "AttackVectors"
            case counters = "Counters"
            case id = "Id"
        }
    }

    public struct Mitigation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MitigationName", required: false, type: .string)
        ]
        /// The name of the mitigation taken for this attack.
        public let mitigationName: String?

        public init(mitigationName: String? = nil) {
            self.mitigationName = mitigationName
        }

        private enum CodingKeys: String, CodingKey {
            case mitigationName = "MitigationName"
        }
    }

    public struct AssociateDRTLogBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogBucket", required: true, type: .string)
        ]
        /// The Amazon S3 bucket that contains your flow logs.
        public let logBucket: String

        public init(logBucket: String) {
            self.logBucket = logBucket
        }

        private enum CodingKeys: String, CodingKey {
            case logBucket = "LogBucket"
        }
    }

    public struct CreateProtectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionId", required: false, type: .string)
        ]
        /// The unique identifier (ID) for the Protection object that is created.
        public let protectionId: String?

        public init(protectionId: String? = nil) {
            self.protectionId = protectionId
        }

        private enum CodingKeys: String, CodingKey {
            case protectionId = "ProtectionId"
        }
    }

    public struct DescribeAttackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttackId", required: true, type: .string)
        ]
        /// The unique identifier (ID) for the attack that to be described.
        public let attackId: String

        public init(attackId: String) {
            self.attackId = attackId
        }

        private enum CodingKeys: String, CodingKey {
            case attackId = "AttackId"
        }
    }

    public struct DisassociateDRTLogBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogBucket", required: true, type: .string)
        ]
        /// The Amazon S3 bucket that contains your flow logs.
        public let logBucket: String

        public init(logBucket: String) {
            self.logBucket = logBucket
        }

        private enum CodingKeys: String, CodingKey {
            case logBucket = "LogBucket"
        }
    }

    public struct AssociateDRTRoleResponse: AWSShape {

    }

    public struct DescribeProtectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionId", required: true, type: .string)
        ]
        /// The unique identifier (ID) for the Protection object that is described.
        public let protectionId: String

        public init(protectionId: String) {
            self.protectionId = protectionId
        }

        private enum CodingKeys: String, CodingKey {
            case protectionId = "ProtectionId"
        }
    }

    public struct DeleteSubscriptionResponse: AWSShape {

    }

    public struct UpdateEmergencyContactSettingsResponse: AWSShape {

    }

    public struct SummarizedAttackVector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VectorType", required: true, type: .string), 
            AWSShapeMember(label: "VectorCounters", required: false, type: .list)
        ]
        /// The attack type, for example, SNMP reflection or SYN flood.
        public let vectorType: String
        /// The list of counters that describe the details of the attack.
        public let vectorCounters: [SummarizedCounter]?

        public init(vectorType: String, vectorCounters: [SummarizedCounter]? = nil) {
            self.vectorType = vectorType
            self.vectorCounters = vectorCounters
        }

        private enum CodingKeys: String, CodingKey {
            case vectorType = "VectorType"
            case vectorCounters = "VectorCounters"
        }
    }

    public struct DescribeEmergencyContactSettingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmergencyContactList", required: false, type: .list)
        ]
        /// A list of email addresses that the DRT can use to contact you during a suspected attack.
        public let emergencyContactList: [EmergencyContact]?

        public init(emergencyContactList: [EmergencyContact]? = nil) {
            self.emergencyContactList = emergencyContactList
        }

        private enum CodingKeys: String, CodingKey {
            case emergencyContactList = "EmergencyContactList"
        }
    }

    public struct ListProtectionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Protections", required: false, type: .list)
        ]
        /// If you specify a value for MaxResults and you have more Protections than the value of MaxResults, AWS Shield Advanced returns a NextToken value in the response that allows you to list another group of Protections. For the second and subsequent ListProtections requests, specify the value of NextToken from the previous response to get information about another batch of Protections.
        public let nextToken: String?
        /// The array of enabled Protection objects.
        public let protections: [Protection]?

        public init(nextToken: String? = nil, protections: [Protection]? = nil) {
            self.nextToken = nextToken
            self.protections = protections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case protections = "Protections"
        }
    }

    public struct DeleteProtectionResponse: AWSShape {

    }

    public struct DeleteProtectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionId", required: true, type: .string)
        ]
        /// The unique identifier (ID) for the Protection object to be deleted.
        public let protectionId: String

        public init(protectionId: String) {
            self.protectionId = protectionId
        }

        private enum CodingKeys: String, CodingKey {
            case protectionId = "ProtectionId"
        }
    }

    public struct ListAttacksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttackSummaries", required: false, type: .list)
        ]
        /// The token returned by a previous call to indicate that there is more data available. If not null, more results are available. Pass this value for the NextMarker parameter in a subsequent call to ListAttacks to retrieve the next set of items.
        public let nextToken: String?
        /// The attack information for the specified time range.
        public let attackSummaries: [AttackSummary]?

        public init(nextToken: String? = nil, attackSummaries: [AttackSummary]? = nil) {
            self.nextToken = nextToken
            self.attackSummaries = attackSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attackSummaries = "AttackSummaries"
        }
    }

    public struct CreateSubscriptionRequest: AWSShape {

    }

    public enum Unit: String, CustomStringConvertible, Codable {
        case bits = "BITS"
        case bytes = "BYTES"
        case packets = "PACKETS"
        case requests = "REQUESTS"
        public var description: String { return self.rawValue }
    }

    public struct CreateSubscriptionResponse: AWSShape {

    }

    public struct AssociateDRTRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the role the DRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the AWSShieldDRTAccessPolicy managed policy to this role. For more information see Attaching and Detaching IAM Policies.
        public let roleArn: String

        public init(roleArn: String) {
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
        }
    }

    public struct DescribeSubscriptionRequest: AWSShape {

    }

    public struct DescribeEmergencyContactSettingsRequest: AWSShape {

    }

    public struct AttackSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AttackVectors", required: false, type: .list), 
            AWSShapeMember(label: "AttackId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string)
        ]
        /// The start time of the attack, in Unix time in seconds. For more information see timestamp.
        public let startTime: TimeStamp?
        /// The end time of the attack, in Unix time in seconds. For more information see timestamp.
        public let endTime: TimeStamp?
        /// The list of attacks for a specified time period.
        public let attackVectors: [AttackVectorDescription]?
        /// The unique identifier (ID) of the attack.
        public let attackId: String?
        /// The ARN (Amazon Resource Name) of the resource that was attacked.
        public let resourceArn: String?

        public init(startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, attackVectors: [AttackVectorDescription]? = nil, attackId: String? = nil, resourceArn: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.attackVectors = attackVectors
            self.attackId = attackId
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case attackVectors = "AttackVectors"
            case attackId = "AttackId"
            case resourceArn = "ResourceArn"
        }
    }

    public struct Protection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The unique identifier (ID) of the protection.
        public let id: String?
        /// The ARN (Amazon Resource Name) of the AWS resource that is protected.
        public let resourceArn: String?
        /// The friendly name of the protection. For example, My CloudFront distributions.
        public let name: String?

        public init(id: String? = nil, resourceArn: String? = nil, name: String? = nil) {
            self.id = id
            self.resourceArn = resourceArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case resourceArn = "ResourceArn"
            case name = "Name"
        }
    }

    public struct AttackProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Total", required: false, type: .long), 
            AWSShapeMember(label: "TopContributors", required: false, type: .list), 
            AWSShapeMember(label: "AttackLayer", required: false, type: .enum), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "AttackPropertyIdentifier", required: false, type: .enum)
        ]
        /// The total contributions made to this attack by all contributors, not just the five listed in the TopContributors list.
        public let total: Int64?
        /// The array of Contributor objects that includes the top five contributors to an attack. 
        public let topContributors: [Contributor]?
        /// The type of DDoS event that was observed. NETWORK indicates layer 3 and layer 4 events and APPLICATION indicates layer 7 events.
        public let attackLayer: AttackLayer?
        /// The unit of the Value of the contributions.
        public let unit: Unit?
        /// Defines the DDoS attack property information that is provided.
        public let attackPropertyIdentifier: AttackPropertyIdentifier?

        public init(total: Int64? = nil, topContributors: [Contributor]? = nil, attackLayer: AttackLayer? = nil, unit: Unit? = nil, attackPropertyIdentifier: AttackPropertyIdentifier? = nil) {
            self.total = total
            self.topContributors = topContributors
            self.attackLayer = attackLayer
            self.unit = unit
            self.attackPropertyIdentifier = attackPropertyIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case total = "Total"
            case topContributors = "TopContributors"
            case attackLayer = "AttackLayer"
            case unit = "Unit"
            case attackPropertyIdentifier = "AttackPropertyIdentifier"
        }
    }

    public enum AutoRenew: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct Contributor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .long)
        ]
        /// The name of the contributor. This is dependent on the AttackPropertyIdentifier. For example, if the AttackPropertyIdentifier is SOURCE_COUNTRY, the Name could be United States.
        public let name: String?
        /// The contribution of this contributor expressed in Protection units. For example 10,000.
        public let value: Int64?

        public init(name: String? = nil, value: Int64? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public enum SubscriptionState: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeCommitmentInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Limits", required: false, type: .list), 
            AWSShapeMember(label: "AutoRenew", required: false, type: .enum), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]
        /// The length, in seconds, of the AWS Shield Advanced subscription for the account.
        public let timeCommitmentInSeconds: Int64?
        /// The date and time your subscription will end.
        public let endTime: TimeStamp?
        /// Specifies how many protections of a given type you can create.
        public let limits: [Limit]?
        /// If ENABLED, the subscription will be automatically renewed at the end of the existing subscription period. When you initally create a subscription, AutoRenew is set to ENABLED. You can change this by submitting an UpdateSubscription request. If the UpdateSubscription request does not included a value for AutoRenew, the existing value for AutoRenew remains unchanged.
        public let autoRenew: AutoRenew?
        /// The start time of the subscription, in Unix time in seconds. For more information see timestamp.
        public let startTime: TimeStamp?

        public init(timeCommitmentInSeconds: Int64? = nil, endTime: TimeStamp? = nil, limits: [Limit]? = nil, autoRenew: AutoRenew? = nil, startTime: TimeStamp? = nil) {
            self.timeCommitmentInSeconds = timeCommitmentInSeconds
            self.endTime = endTime
            self.limits = limits
            self.autoRenew = autoRenew
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case timeCommitmentInSeconds = "TimeCommitmentInSeconds"
            case endTime = "EndTime"
            case limits = "Limits"
            case autoRenew = "AutoRenew"
            case startTime = "StartTime"
        }
    }

    public struct AttackVectorDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VectorType", required: true, type: .string)
        ]
        /// The attack type. Valid values:   UDP_TRAFFIC   UDP_FRAGMENT   GENERIC_UDP_REFLECTION   DNS_REFLECTION   NTP_REFLECTION   CHARGEN_REFLECTION   SSDP_REFLECTION   PORT_MAPPER   RIP_REFLECTION   SNMP_REFLECTION   MSSQL_REFLECTION   NET_BIOS_REFLECTION   SYN_FLOOD   ACK_FLOOD   REQUEST_FLOOD  
        public let vectorType: String

        public init(vectorType: String) {
            self.vectorType = vectorType
        }

        private enum CodingKeys: String, CodingKey {
            case vectorType = "VectorType"
        }
    }

    public enum SubResourceType: String, CustomStringConvertible, Codable {
        case ip = "IP"
        case url = "URL"
        public var description: String { return self.rawValue }
    }

    public struct GetSubscriptionStateRequest: AWSShape {

    }

    public struct DisassociateDRTRoleResponse: AWSShape {

    }

    public struct DisassociateDRTLogBucketResponse: AWSShape {

    }

    public struct UpdateSubscriptionResponse: AWSShape {

    }

    public struct AssociateDRTLogBucketResponse: AWSShape {

    }

    public struct UpdateEmergencyContactSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmergencyContactList", required: false, type: .list)
        ]
        /// A list of email addresses that the DRT can use to contact you during a suspected attack.
        public let emergencyContactList: [EmergencyContact]?

        public init(emergencyContactList: [EmergencyContact]? = nil) {
            self.emergencyContactList = emergencyContactList
        }

        private enum CodingKeys: String, CodingKey {
            case emergencyContactList = "EmergencyContactList"
        }
    }

    public struct DescribeDRTAccessResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LogBucketList", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the role the DRT used to access your AWS account.
        public let roleArn: String?
        /// The list of Amazon S3 buckets accessed by the DRT.
        public let logBucketList: [String]?

        public init(roleArn: String? = nil, logBucketList: [String]? = nil) {
            self.roleArn = roleArn
            self.logBucketList = logBucketList
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case logBucketList = "LogBucketList"
        }
    }

    public struct CreateProtectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// Friendly name for the Protection you are creating.
        public let name: String
        /// The ARN (Amazon Resource Name) of the resource to be protected. The ARN should be in one of the following formats:   For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id     For an Elastic Load Balancer (Classic Load Balancer): arn:aws:elasticloadbalancing:region:account-id:loadbalancer/load-balancer-name     For AWS CloudFront distribution: arn:aws:cloudfront::account-id:distribution/distribution-id     For Amazon Route 53: arn:aws:route53::account-id:hostedzone/hosted-zone-id     For an Elastic IP address: arn:aws:ec2:region:account-id:eip-allocation/allocation-id    
        public let resourceArn: String

        public init(name: String, resourceArn: String) {
            self.name = name
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListAttacksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArns", required: false, type: .list), 
            AWSShapeMember(label: "EndTime", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", required: false, type: .structure)
        ]
        /// The ListAttacksRequest.NextMarker value from a previous call to ListAttacksRequest. Pass null if this is the first call.
        public let nextToken: String?
        /// The ARN (Amazon Resource Name) of the resource that was attacked. If this is left blank, all applicable resources for this account will be included.
        public let resourceArns: [String]?
        /// The end of the time period for the attacks. This is a timestamp type. The sample request above indicates a number type because the default used by WAF is Unix time in seconds. However any valid timestamp format is allowed. 
        public let endTime: TimeRange?
        /// The maximum number of AttackSummary objects to be returned. If this is left blank, the first 20 results will be returned.
        public let maxResults: Int32?
        /// The start of the time period for the attacks. This is a timestamp type. The sample request above indicates a number type because the default used by WAF is Unix time in seconds. However any valid timestamp format is allowed. 
        public let startTime: TimeRange?

        public init(nextToken: String? = nil, resourceArns: [String]? = nil, endTime: TimeRange? = nil, maxResults: Int32? = nil, startTime: TimeRange? = nil) {
            self.nextToken = nextToken
            self.resourceArns = resourceArns
            self.endTime = endTime
            self.maxResults = maxResults
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceArns = "ResourceArns"
            case endTime = "EndTime"
            case maxResults = "MaxResults"
            case startTime = "StartTime"
        }
    }

    public struct ListProtectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ListProtectionsRequest.NextToken value from a previous call to ListProtections. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of Protection objects to be returned. If this is left blank the first 20 results will be returned.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeDRTAccessRequest: AWSShape {

    }

    public struct UpdateSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoRenew", required: false, type: .enum)
        ]
        /// When you initally create a subscription, AutoRenew is set to ENABLED. If ENABLED, the subscription will be automatically renewed at the end of the existing subscription period. You can change this by submitting an UpdateSubscription request. If the UpdateSubscription request does not included a value for AutoRenew, the existing value for AutoRenew remains unchanged.
        public let autoRenew: AutoRenew?

        public init(autoRenew: AutoRenew? = nil) {
            self.autoRenew = autoRenew
        }

        private enum CodingKeys: String, CodingKey {
            case autoRenew = "AutoRenew"
        }
    }

    public struct DescribeProtectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protection", required: false, type: .structure)
        ]
        /// The Protection object that is described.
        public let protection: Protection?

        public init(protection: Protection? = nil) {
            self.protection = protection
        }

        private enum CodingKeys: String, CodingKey {
            case protection = "Protection"
        }
    }

    public struct DescribeAttackResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attack", required: false, type: .structure)
        ]
        /// The attack that is described.
        public let attack: AttackDetail?

        public init(attack: AttackDetail? = nil) {
            self.attack = attack
        }

        private enum CodingKeys: String, CodingKey {
            case attack = "Attack"
        }
    }

    public struct EmergencyContact: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailAddress", required: true, type: .string)
        ]
        /// An email address that the DRT can use to contact you during a suspected attack.
        public let emailAddress: String

        public init(emailAddress: String) {
            self.emailAddress = emailAddress
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "EmailAddress"
        }
    }

    public struct TimeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ToExclusive", required: false, type: .timestamp), 
            AWSShapeMember(label: "FromInclusive", required: false, type: .timestamp)
        ]
        /// The end time, in Unix time in seconds. For more information see timestamp.
        public let toExclusive: TimeStamp?
        /// The start time, in Unix time in seconds. For more information see timestamp.
        public let fromInclusive: TimeStamp?

        public init(toExclusive: TimeStamp? = nil, fromInclusive: TimeStamp? = nil) {
            self.toExclusive = toExclusive
            self.fromInclusive = fromInclusive
        }

        private enum CodingKeys: String, CodingKey {
            case toExclusive = "ToExclusive"
            case fromInclusive = "FromInclusive"
        }
    }

    public enum AttackPropertyIdentifier: String, CustomStringConvertible, Codable {
        case destinationUrl = "DESTINATION_URL"
        case referrer = "REFERRER"
        case sourceAsn = "SOURCE_ASN"
        case sourceCountry = "SOURCE_COUNTRY"
        case sourceIpAddress = "SOURCE_IP_ADDRESS"
        case sourceUserAgent = "SOURCE_USER_AGENT"
        public var description: String { return self.rawValue }
    }

    public struct GetSubscriptionStateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionState", required: true, type: .enum)
        ]
        /// The status of the subscription.
        public let subscriptionState: SubscriptionState

        public init(subscriptionState: SubscriptionState) {
            self.subscriptionState = subscriptionState
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionState = "SubscriptionState"
        }
    }

    public struct Limit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Max", required: false, type: .long)
        ]
        /// The type of protection.
        public let `type`: String?
        /// The maximum number of protections that can be created for the specified Type.
        public let max: Int64?

        public init(type: String? = nil, max: Int64? = nil) {
            self.`type` = `type`
            self.max = max
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case max = "Max"
        }
    }

    public struct DescribeSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscription", required: false, type: .structure)
        ]
        /// The AWS Shield Advanced subscription details for an account.
        public let subscription: Subscription?

        public init(subscription: Subscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "Subscription"
        }
    }

    public struct DisassociateDRTRoleRequest: AWSShape {

    }

    public struct DeleteSubscriptionRequest: AWSShape {

    }

}