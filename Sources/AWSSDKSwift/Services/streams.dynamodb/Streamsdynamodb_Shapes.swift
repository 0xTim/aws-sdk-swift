// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Streamsdynamodb {

    public struct DescribeStreamInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) for the stream.
        var streamArn: String = ""
        /// The shard ID of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedShardId in the previous operation. 
        var exclusiveStartShardId: String? = nil
        /// The maximum number of shard objects to return. The upper limit is 100.
        var limit: Int32? = nil

        public init() {}

        public init(streamArn: String, exclusiveStartShardId: String? = nil, limit: Int32? = nil) {
            self.streamArn = streamArn
            self.exclusiveStartShardId = exclusiveStartShardId
            self.limit = limit
        }

    }

    public struct KeySchemaElement: Serializable, Initializable {
        /// The name of a key attribute.
        var attributeName: String = ""
        /// The attribute data, consisting of the data type and the attribute value itself.
        var keyType: String = ""

        public init() {}

        public init(attributeName: String, keyType: String) {
            self.attributeName = attributeName
            self.keyType = keyType
        }

    }

    public struct Shard: Serializable, Initializable {
        /// The system-generated identifier for this shard.
        var shardId: String? = nil
        /// The range of possible sequence numbers for the shard.
        var sequenceNumberRange: SequenceNumberRange? = nil
        /// The shard ID of the current shard's parent.
        var parentShardId: String? = nil

        public init() {}

        public init(shardId: String? = nil, sequenceNumberRange: SequenceNumberRange? = nil, parentShardId: String? = nil) {
            self.shardId = shardId
            self.sequenceNumberRange = sequenceNumberRange
            self.parentShardId = parentShardId
        }

    }

    public struct DescribeStreamOutput: Serializable, Initializable {
        /// A complete description of the stream, including its creation date and time, the DynamoDB table associated with the stream, the shard IDs within the stream, and the beginning and ending sequence numbers of stream records within the shards.
        var streamDescription: StreamDescription? = nil

        public init() {}

        public init(streamDescription: StreamDescription? = nil) {
            self.streamDescription = streamDescription
        }

    }

    public struct Record: Serializable, Initializable {
        /// The type of data modification that was performed on the DynamoDB table:    INSERT - a new item was added to the table.    MODIFY - one or more of an existing item's attributes were modified.    REMOVE - the item was deleted from the table  
        var eventName: String? = nil
        /// The AWS service from which the stream record originated. For DynamoDB Streams, this is aws:dynamodb.
        var eventSource: String? = nil
        /// Items that are deleted by the Time to Live process after expiration have the following fields:    Records[].userIdentity.type "Service"   Records[].userIdentity.principalId "dynamodb.amazonaws.com"  
        var userIdentity: Identity? = nil
        /// A globally unique identifier for the event that was recorded in this stream record.
        var eventID: String? = nil
        /// The main body of the stream record, containing all of the DynamoDB-specific fields.
        var dynamodb: StreamRecord? = nil
        /// The region in which the GetRecords request was received.
        var awsRegion: String? = nil
        /// The version number of the stream record format. This number is updated whenever the structure of Record is modified. Client applications must not assume that eventVersion will remain at a particular value, as this number is subject to change at any time. In general, eventVersion will only increase as the low-level DynamoDB Streams API evolves.
        var eventVersion: String? = nil

        public init() {}

        public init(eventName: String? = nil, eventSource: String? = nil, userIdentity: Identity? = nil, eventID: String? = nil, dynamodb: StreamRecord? = nil, awsRegion: String? = nil, eventVersion: String? = nil) {
            self.eventName = eventName
            self.eventSource = eventSource
            self.userIdentity = userIdentity
            self.eventID = eventID
            self.dynamodb = dynamodb
            self.awsRegion = awsRegion
            self.eventVersion = eventVersion
        }

    }

    public struct GetShardIteratorInput: Serializable, Initializable {
        /// Determines how the shard iterator is used to start reading stream records from the shard:    AT_SEQUENCE_NUMBER - Start reading exactly from the position denoted by a specific sequence number.    AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number.    TRIM_HORIZON - Start reading at the last (untrimmed) stream record, which is the oldest record in the shard. In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose age exceeds this limit are subject to removal (trimming) from the stream.    LATEST - Start reading just after the most recent stream record in the shard, so that you always read the most recent data in the shard.  
        var shardIteratorType: String = ""
        /// The sequence number of a stream record in the shard from which to start reading.
        var sequenceNumber: String? = nil
        /// The Amazon Resource Name (ARN) for the stream.
        var streamArn: String = ""
        /// The identifier of the shard. The iterator will be returned for this shard ID.
        var shardId: String = ""

        public init() {}

        public init(shardIteratorType: String, sequenceNumber: String? = nil, streamArn: String, shardId: String) {
            self.shardIteratorType = shardIteratorType
            self.sequenceNumber = sequenceNumber
            self.streamArn = streamArn
            self.shardId = shardId
        }

    }

    public struct SequenceNumberRange: Serializable, Initializable {
        /// The last sequence number.
        var endingSequenceNumber: String? = nil
        /// The first sequence number.
        var startingSequenceNumber: String? = nil

        public init() {}

        public init(endingSequenceNumber: String? = nil, startingSequenceNumber: String? = nil) {
            self.endingSequenceNumber = endingSequenceNumber
            self.startingSequenceNumber = startingSequenceNumber
        }

    }

    public struct Stream: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) for the stream.
        var streamArn: String? = nil
        /// A timestamp, in ISO 8601 format, for this stream. Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:   the AWS customer ID.   the table name   the StreamLabel   
        var streamLabel: String? = nil
        /// The DynamoDB table with which the stream is associated.
        var tableName: String? = nil

        public init() {}

        public init(streamArn: String? = nil, streamLabel: String? = nil, tableName: String? = nil) {
            self.streamArn = streamArn
            self.streamLabel = streamLabel
            self.tableName = tableName
        }

    }

    public struct GetRecordsInput: Serializable, Initializable {
        /// The maximum number of records to return from the shard. The upper limit is 1000.
        var limit: Int32? = nil
        /// A shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.
        var shardIterator: String = ""

        public init() {}

        public init(limit: Int32? = nil, shardIterator: String) {
            self.limit = limit
            self.shardIterator = shardIterator
        }

    }

    public struct GetShardIteratorOutput: Serializable, Initializable {
        /// The position in the shard from which to start reading stream records sequentially. A shard iterator specifies this position using the sequence number of a stream record in a shard.
        var shardIterator: String? = nil

        public init() {}

        public init(shardIterator: String? = nil) {
            self.shardIterator = shardIterator
        }

    }

    public struct Identity: Serializable, Initializable {
        /// The type of the identity. For Time To Live, the type is "Service".
        var type: String? = nil
        /// A unique identifier for the entity that made the call. For Time To Live, the principalId is "dynamodb.amazonaws.com".
        var principalId: String? = nil

        public init() {}

        public init(type: String? = nil, principalId: String? = nil) {
            self.type = type
            self.principalId = principalId
        }

    }

    public struct AttributeValue: Serializable, Initializable {
        /// A Number Set data type.
        var nS: [String]? = nil
        /// A Number data type.
        var n: String? = nil
        /// A Boolean data type.
        var bOOL: Bool? = nil
        /// A Binary Set data type.
        var bS: [Data]? = nil
        /// A List data type.
        var l: [AttributeValue]? = nil
        /// A Null data type.
        var nULL: Bool? = nil
        /// A Binary data type.
        var b: Data? = nil
        /// A Map data type.
        var m: [String: AttributeValue]? = nil
        /// A String Set data type.
        var sS: [String]? = nil
        /// A String data type.
        var s: String? = nil

        public init() {}

        public init(nS: [String]? = nil, n: String? = nil, bOOL: Bool? = nil, bS: [Data]? = nil, l: [AttributeValue]? = nil, nULL: Bool? = nil, b: Data? = nil, m: [String: AttributeValue]? = nil, sS: [String]? = nil, s: String? = nil) {
            self.nS = nS
            self.n = n
            self.bOOL = bOOL
            self.bS = bS
            self.l = l
            self.nULL = nULL
            self.b = b
            self.m = m
            self.sS = sS
            self.s = s
        }

    }

    public struct ListStreamsOutput: Serializable, Initializable {
        /// A list of stream descriptors associated with the current account and endpoint.
        var streams: [Stream]? = nil
        /// The stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedStreamArn is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedStreamArn is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedStreamArn is empty.
        var lastEvaluatedStreamArn: String? = nil

        public init() {}

        public init(streams: [Stream]? = nil, lastEvaluatedStreamArn: String? = nil) {
            self.streams = streams
            self.lastEvaluatedStreamArn = lastEvaluatedStreamArn
        }

    }

    public struct ListStreamsInput: Serializable, Initializable {
        /// The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedStreamArn in the previous operation. 
        var exclusiveStartStreamArn: String? = nil
        /// If this parameter is provided, then only the streams associated with this table name are returned.
        var tableName: String? = nil
        /// The maximum number of streams to return. The upper limit is 100.
        var limit: Int32? = nil

        public init() {}

        public init(exclusiveStartStreamArn: String? = nil, tableName: String? = nil, limit: Int32? = nil) {
            self.exclusiveStartStreamArn = exclusiveStartStreamArn
            self.tableName = tableName
            self.limit = limit
        }

    }

    public struct GetRecordsOutput: Serializable, Initializable {
        /// The next position in the shard from which to start sequentially reading stream records. If set to null, the shard has been closed and the requested iterator will not return any more data.
        var nextShardIterator: String? = nil
        /// The stream records from the shard, which were retrieved using the shard iterator.
        var records: [Record]? = nil

        public init() {}

        public init(nextShardIterator: String? = nil, records: [Record]? = nil) {
            self.nextShardIterator = nextShardIterator
            self.records = records
        }

    }

    public struct StreamRecord: Serializable, Initializable {
        /// The sequence number of the stream record.
        var sequenceNumber: String? = nil
        /// The primary key attribute(s) for the DynamoDB item that was modified.
        var keys: [String: AttributeValue]? = nil
        /// The item in the DynamoDB table as it appeared after it was modified.
        var newImage: [String: AttributeValue]? = nil
        /// The size of the stream record, in bytes.
        var sizeBytes: Int64? = nil
        /// The type of data from the modified DynamoDB item that was captured in this stream record:    KEYS_ONLY - only the key attributes of the modified item.    NEW_IMAGE - the entire item, as it appeared after it was modified.    OLD_IMAGE - the entire item, as it appeared before it was modified.    NEW_AND_OLD_IMAGES - both the new and the old item images of the item.  
        var streamViewType: String? = nil
        /// The approximate date and time when the stream record was created, in UNIX epoch time format.
        var approximateCreationDateTime: Date? = nil
        /// The item in the DynamoDB table as it appeared before it was modified.
        var oldImage: [String: AttributeValue]? = nil

        public init() {}

        public init(sequenceNumber: String? = nil, keys: [String: AttributeValue]? = nil, newImage: [String: AttributeValue]? = nil, sizeBytes: Int64? = nil, streamViewType: String? = nil, approximateCreationDateTime: Date? = nil, oldImage: [String: AttributeValue]? = nil) {
            self.sequenceNumber = sequenceNumber
            self.keys = keys
            self.newImage = newImage
            self.sizeBytes = sizeBytes
            self.streamViewType = streamViewType
            self.approximateCreationDateTime = approximateCreationDateTime
            self.oldImage = oldImage
        }

    }

    public struct StreamDescription: Serializable, Initializable {
        /// The key attribute(s) of the stream's DynamoDB table.
        var keySchema: [KeySchemaElement]? = nil
        /// The Amazon Resource Name (ARN) for the stream.
        var streamArn: String? = nil
        /// The date and time when the request to create this stream was issued.
        var creationRequestDateTime: Date? = nil
        /// The shards that comprise the stream.
        var shards: [Shard]? = nil
        /// A timestamp, in ISO 8601 format, for this stream. Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:   the AWS customer ID.   the table name   the StreamLabel   
        var streamLabel: String? = nil
        /// The DynamoDB table with which the stream is associated.
        var tableName: String? = nil
        /// Indicates the format of the records within this stream:    KEYS_ONLY - only the key attributes of items that were modified in the DynamoDB table.    NEW_IMAGE - entire items from the table, as they appeared after they were modified.    OLD_IMAGE - entire items from the table, as they appeared before they were modified.    NEW_AND_OLD_IMAGES - both the new and the old images of the items from the table.  
        var streamViewType: String? = nil
        /// Indicates the current status of the stream:    ENABLING - Streams is currently being enabled on the DynamoDB table.    ENABLED - the stream is enabled.    DISABLING - Streams is currently being disabled on the DynamoDB table.    DISABLED - the stream is disabled.  
        var streamStatus: String? = nil
        /// The shard ID of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedShardId is empty, then the "last page" of results has been processed and there is currently no more data to be retrieved. If LastEvaluatedShardId is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedShardId is empty.
        var lastEvaluatedShardId: String? = nil

        public init() {}

        public init(keySchema: [KeySchemaElement]? = nil, streamArn: String? = nil, creationRequestDateTime: Date? = nil, shards: [Shard]? = nil, streamLabel: String? = nil, tableName: String? = nil, streamViewType: String? = nil, streamStatus: String? = nil, lastEvaluatedShardId: String? = nil) {
            self.keySchema = keySchema
            self.streamArn = streamArn
            self.creationRequestDateTime = creationRequestDateTime
            self.shards = shards
            self.streamLabel = streamLabel
            self.tableName = tableName
            self.streamViewType = streamViewType
            self.streamStatus = streamStatus
            self.lastEvaluatedShardId = lastEvaluatedShardId
        }

    }

}