// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Cloudhsmv2 {

    public struct DeleteHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmId", required: false, type: .string)
        ]
        /// The identifier (ID) of the HSM that was deleted.
        public let hsmId: String?

        public init(hsmId: String? = nil) {
            self.hsmId = hsmId
        }

        private enum CodingKeys: String, CodingKey {
            case hsmId = "HsmId"
        }
    }

    public struct Cluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateMessage", required: false, type: .string), 
            AWSShapeMember(label: "HsmType", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "SourceBackupId", required: false, type: .string), 
            AWSShapeMember(label: "Certificates", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "SubnetMapping", required: false, type: .map), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "PreCoPassword", required: false, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "BackupPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "Hsms", required: false, type: .list)
        ]
        /// A description of the cluster's state.
        public let stateMessage: String?
        /// The type of HSM that the cluster contains.
        public let hsmType: String?
        /// The identifier (ID) of the cluster's security group.
        public let securityGroup: String?
        /// The identifier (ID) of the backup used to create the cluster. This value exists only when the cluster was created from a backup.
        public let sourceBackupId: String?
        /// Contains one or more certificates or a certificate signing request (CSR).
        public let certificates: Certificates?
        /// The cluster's state.
        public let state: ClusterState?
        /// A map of the cluster's subnets and their corresponding Availability Zones.
        public let subnetMapping: [String: String]?
        /// The identifier (ID) of the virtual private cloud (VPC) that contains the cluster.
        public let vpcId: String?
        /// The default password for the cluster's Pre-Crypto Officer (PRECO) user.
        public let preCoPassword: String?
        /// The date and time when the cluster was created.
        public let createTimestamp: TimeStamp?
        /// The cluster's identifier (ID).
        public let clusterId: String?
        /// The cluster's backup policy.
        public let backupPolicy: BackupPolicy?
        /// Contains information about the HSMs in the cluster.
        public let hsms: [Hsm]?

        public init(stateMessage: String? = nil, hsmType: String? = nil, securityGroup: String? = nil, sourceBackupId: String? = nil, certificates: Certificates? = nil, state: ClusterState? = nil, subnetMapping: [String: String]? = nil, vpcId: String? = nil, preCoPassword: String? = nil, createTimestamp: TimeStamp? = nil, clusterId: String? = nil, backupPolicy: BackupPolicy? = nil, hsms: [Hsm]? = nil) {
            self.stateMessage = stateMessage
            self.hsmType = hsmType
            self.securityGroup = securityGroup
            self.sourceBackupId = sourceBackupId
            self.certificates = certificates
            self.state = state
            self.subnetMapping = subnetMapping
            self.vpcId = vpcId
            self.preCoPassword = preCoPassword
            self.createTimestamp = createTimestamp
            self.clusterId = clusterId
            self.backupPolicy = backupPolicy
            self.hsms = hsms
        }

        private enum CodingKeys: String, CodingKey {
            case stateMessage = "StateMessage"
            case hsmType = "HsmType"
            case securityGroup = "SecurityGroup"
            case sourceBackupId = "SourceBackupId"
            case certificates = "Certificates"
            case state = "State"
            case subnetMapping = "SubnetMapping"
            case vpcId = "VpcId"
            case preCoPassword = "PreCoPassword"
            case createTimestamp = "CreateTimestamp"
            case clusterId = "ClusterId"
            case backupPolicy = "BackupPolicy"
            case hsms = "Hsms"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// The cluster identifier (ID) for the cluster that you are tagging. To find the cluster ID, use DescribeClusters.
        public let resourceId: String
        /// A list of one or more tags.
        public let tagList: [Tag]

        public init(resourceId: String, tagList: [Tag]) {
            self.resourceId = resourceId
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagList = "TagList"
        }
    }

    public enum BackupState: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case ready = "READY"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct CopyBackupToRegionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationRegion", required: true, type: .string), 
            AWSShapeMember(label: "BackupId", required: true, type: .string)
        ]
        public let destinationRegion: String
        public let backupId: String

        public init(destinationRegion: String, backupId: String) {
            self.destinationRegion = destinationRegion
            self.backupId = backupId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationRegion = "DestinationRegion"
            case backupId = "BackupId"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// An opaque string that indicates that the response contains only a subset of tags. Use this value in a subsequent ListTags request to get more tags.
        public let nextToken: String?
        /// A list of tags.
        public let tagList: [Tag]

        public init(nextToken: String? = nil, tagList: [Tag]) {
            self.nextToken = nextToken
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tagList = "TagList"
        }
    }

    public struct Hsm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateMessage", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "EniIp", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "EniId", required: false, type: .string), 
            AWSShapeMember(label: "HsmId", required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string)
        ]
        /// A description of the HSM's state.
        public let stateMessage: String?
        /// The subnet that contains the HSM's elastic network interface (ENI).
        public let subnetId: String?
        /// The IP address of the HSM's elastic network interface (ENI).
        public let eniIp: String?
        /// The HSM's state.
        public let state: HsmState?
        /// The identifier (ID) of the HSM's elastic network interface (ENI).
        public let eniId: String?
        /// The HSM's identifier (ID).
        public let hsmId: String
        /// The Availability Zone that contains the HSM.
        public let availabilityZone: String?
        /// The identifier (ID) of the cluster that contains the HSM.
        public let clusterId: String?

        public init(stateMessage: String? = nil, subnetId: String? = nil, eniIp: String? = nil, state: HsmState? = nil, eniId: String? = nil, hsmId: String, availabilityZone: String? = nil, clusterId: String? = nil) {
            self.stateMessage = stateMessage
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.state = state
            self.eniId = eniId
            self.hsmId = hsmId
            self.availabilityZone = availabilityZone
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case stateMessage = "StateMessage"
            case subnetId = "SubnetId"
            case eniIp = "EniIp"
            case state = "State"
            case eniId = "EniId"
            case hsmId = "HsmId"
            case availabilityZone = "AvailabilityZone"
            case clusterId = "ClusterId"
        }
    }

    public struct InitializeClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateMessage", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// A description of the cluster's state.
        public let stateMessage: String?
        /// The cluster's state.
        public let state: ClusterState?

        public init(stateMessage: String? = nil, state: ClusterState? = nil) {
            self.stateMessage = stateMessage
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case stateMessage = "StateMessage"
            case state = "State"
        }
    }

    public enum ClusterState: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case uninitialized = "UNINITIALIZED"
        case initializeInProgress = "INITIALIZE_IN_PROGRESS"
        case initialized = "INITIALIZED"
        case active = "ACTIVE"
        case updateInProgress = "UPDATE_IN_PROGRESS"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case deleted = "DELETED"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct CreateClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// Information about the cluster that was created.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public enum HsmState: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case active = "ACTIVE"
        case degraded = "DEGRADED"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct CopyBackupToRegionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationBackup", required: false, type: .structure)
        ]
        public let destinationBackup: DestinationBackup?

        public init(destinationBackup: DestinationBackup? = nil) {
            self.destinationBackup = destinationBackup
        }

        private enum CodingKeys: String, CodingKey {
            case destinationBackup = "DestinationBackup"
        }
    }

    public struct DeleteHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmId", required: false, type: .string), 
            AWSShapeMember(label: "EniIp", required: false, type: .string), 
            AWSShapeMember(label: "EniId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The identifier (ID) of the HSM that you are deleting.
        public let hsmId: String?
        /// The IP address of the elastic network interface (ENI) of the HSM that you are deleting.
        public let eniIp: String?
        /// The identifier (ID) of the elastic network interface (ENI) of the HSM that you are deleting.
        public let eniId: String?
        /// The identifier (ID) of the cluster that contains the HSM that you are deleting.
        public let clusterId: String

        public init(hsmId: String? = nil, eniIp: String? = nil, eniId: String? = nil, clusterId: String) {
            self.hsmId = hsmId
            self.eniIp = eniIp
            self.eniId = eniId
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case hsmId = "HsmId"
            case eniIp = "EniIp"
            case eniId = "EniId"
            case clusterId = "ClusterId"
        }
    }

    public struct CreateClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "HsmType", required: true, type: .string), 
            AWSShapeMember(label: "SourceBackupId", required: false, type: .string)
        ]
        /// The identifiers (IDs) of the subnets where you are creating the cluster. You must specify at least one subnet. If you specify multiple subnets, they must meet the following criteria:   All subnets must be in the same virtual private cloud (VPC).   You can specify only one subnet per Availability Zone.  
        public let subnetIds: [String]
        /// The type of HSM to use in the cluster. Currently the only allowed value is hsm1.medium.
        public let hsmType: String
        /// The identifier (ID) of the cluster backup to restore. Use this value to restore the cluster from a backup instead of creating a new cluster. To find the backup ID, use DescribeBackups.
        public let sourceBackupId: String?

        public init(subnetIds: [String], hsmType: String, sourceBackupId: String? = nil) {
            self.subnetIds = subnetIds
            self.hsmType = hsmType
            self.sourceBackupId = sourceBackupId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case hsmType = "HsmType"
            case sourceBackupId = "SourceBackupId"
        }
    }

    public struct DestinationBackup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceCluster", required: false, type: .string), 
            AWSShapeMember(label: "SourceBackup", required: false, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: false, type: .string)
        ]
        public let createTimestamp: TimeStamp?
        public let sourceCluster: String?
        public let sourceBackup: String?
        public let sourceRegion: String?

        public init(createTimestamp: TimeStamp? = nil, sourceCluster: String? = nil, sourceBackup: String? = nil, sourceRegion: String? = nil) {
            self.createTimestamp = createTimestamp
            self.sourceCluster = sourceCluster
            self.sourceBackup = sourceBackup
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case createTimestamp = "CreateTimestamp"
            case sourceCluster = "SourceCluster"
            case sourceBackup = "SourceBackup"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct DeleteClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// Information about the cluster that was deleted.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public enum BackupPolicy: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        public var description: String { return self.rawValue }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String
        /// The key of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeleteClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The identifier (ID) of the cluster that you are deleting. To find the cluster ID, use DescribeClusters.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct DescribeBackupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SortAscending", required: false, type: .boolean)
        ]
        /// The maximum number of backups to return in the response. When there are more backups than the number you specify, the response contains a NextToken value.
        public let maxResults: Int32?
        /// One or more filters to limit the items returned in the response. Use the backupIds filter to return only the specified backups. Specify backups by their backup identifier (ID). Use the clusterIds filter to return only the backups for the specified clusters. Specify clusters by their cluster identifier (ID). Use the states filter to return only backups that match the specified state.
        public let filters: [String: [String]]?
        /// The NextToken value that you received in the previous response. Use this value to get more backups.
        public let nextToken: String?
        public let sortAscending: Bool?

        public init(maxResults: Int32? = nil, filters: [String: [String]]? = nil, nextToken: String? = nil, sortAscending: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.sortAscending = sortAscending
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
            case sortAscending = "SortAscending"
        }
    }

    public struct InitializeClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "TrustAnchor", required: true, type: .string), 
            AWSShapeMember(label: "SignedCert", required: true, type: .string)
        ]
        /// The identifier (ID) of the cluster that you are claiming. To find the cluster ID, use DescribeClusters.
        public let clusterId: String
        /// The issuing certificate of the issuing certificate authority (CA) that issued (signed) the cluster certificate. This can be a root (self-signed) certificate or a certificate chain that begins with the certificate that issued the cluster certificate and ends with a root certificate. The certificate or certificate chain must be in PEM format and can contain a maximum of 5000 characters.
        public let trustAnchor: String
        /// The cluster certificate issued (signed) by your issuing certificate authority (CA). The certificate must be in PEM format and can contain a maximum of 5000 characters.
        public let signedCert: String

        public init(clusterId: String, trustAnchor: String, signedCert: String) {
            self.clusterId = clusterId
            self.trustAnchor = trustAnchor
            self.signedCert = signedCert
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case trustAnchor = "TrustAnchor"
            case signedCert = "SignedCert"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct DescribeClustersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Clusters", required: false, type: .list)
        ]
        /// An opaque string that indicates that the response contains only a subset of clusters. Use this value in a subsequent DescribeClusters request to get more clusters.
        public let nextToken: String?
        /// A list of clusters.
        public let clusters: [Cluster]?

        public init(nextToken: String? = nil, clusters: [Cluster]? = nil) {
            self.nextToken = nextToken
            self.clusters = clusters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case clusters = "Clusters"
        }
    }

    public struct Backup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceBackup", required: false, type: .string), 
            AWSShapeMember(label: "SourceCluster", required: false, type: .string), 
            AWSShapeMember(label: "CopyTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "BackupId", required: true, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: false, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "BackupState", required: false, type: .enum), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string)
        ]
        public let sourceBackup: String?
        public let sourceCluster: String?
        public let copyTimestamp: TimeStamp?
        /// The identifier (ID) of the backup.
        public let backupId: String
        public let sourceRegion: String?
        /// The date and time when the backup was created.
        public let createTimestamp: TimeStamp?
        /// The state of the backup.
        public let backupState: BackupState?
        /// The identifier (ID) of the cluster that was backed up.
        public let clusterId: String?

        public init(sourceBackup: String? = nil, sourceCluster: String? = nil, copyTimestamp: TimeStamp? = nil, backupId: String, sourceRegion: String? = nil, createTimestamp: TimeStamp? = nil, backupState: BackupState? = nil, clusterId: String? = nil) {
            self.sourceBackup = sourceBackup
            self.sourceCluster = sourceCluster
            self.copyTimestamp = copyTimestamp
            self.backupId = backupId
            self.sourceRegion = sourceRegion
            self.createTimestamp = createTimestamp
            self.backupState = backupState
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceBackup = "SourceBackup"
            case sourceCluster = "SourceCluster"
            case copyTimestamp = "CopyTimestamp"
            case backupId = "BackupId"
            case sourceRegion = "SourceRegion"
            case createTimestamp = "CreateTimestamp"
            case backupState = "BackupState"
            case clusterId = "ClusterId"
        }
    }

    public struct CreateHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hsm", required: false, type: .structure)
        ]
        /// Information about the HSM that was created.
        public let hsm: Hsm?

        public init(hsm: Hsm? = nil) {
            self.hsm = hsm
        }

        private enum CodingKeys: String, CodingKey {
            case hsm = "Hsm"
        }
    }

    public struct CreateHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string)
        ]
        /// The Availability Zone where you are creating the HSM. To find the cluster's Availability Zones, use DescribeClusters.
        public let availabilityZone: String
        /// The identifier (ID) of the HSM's cluster. To find the cluster ID, use DescribeClusters.
        public let clusterId: String
        /// The HSM's IP address. If you specify an IP address, use an available address from the subnet that maps to the Availability Zone where you are creating the HSM. If you don't specify an IP address, one is chosen for you from that subnet.
        public let ipAddress: String?

        public init(availabilityZone: String, clusterId: String, ipAddress: String? = nil) {
            self.availabilityZone = availabilityZone
            self.clusterId = clusterId
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case clusterId = "ClusterId"
            case ipAddress = "IpAddress"
        }
    }

    public struct DescribeBackupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Backups", required: false, type: .list)
        ]
        /// An opaque string that indicates that the response contains only a subset of backups. Use this value in a subsequent DescribeBackups request to get more backups.
        public let nextToken: String?
        /// A list of backups.
        public let backups: [Backup]?

        public init(nextToken: String? = nil, backups: [Backup]? = nil) {
            self.nextToken = nextToken
            self.backups = backups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case backups = "Backups"
        }
    }

    public struct DescribeClustersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The NextToken value that you received in the previous response. Use this value to get more clusters.
        public let nextToken: String?
        /// One or more filters to limit the items returned in the response. Use the clusterIds filter to return only the specified clusters. Specify clusters by their cluster identifier (ID). Use the vpcIds filter to return only the clusters in the specified virtual private clouds (VPCs). Specify VPCs by their VPC identifier (ID). Use the states filter to return only clusters that match the specified state.
        public let filters: [String: [String]]?
        /// The maximum number of clusters to return in the response. When there are more clusters than the number you specify, the response contains a NextToken value.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [String: [String]]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The cluster identifier (ID) for the cluster whose tags you are getting. To find the cluster ID, use DescribeClusters.
        public let resourceId: String
        /// The NextToken value that you received in the previous response. Use this value to get more tags.
        public let nextToken: String?
        /// The maximum number of tags to return in the response. When there are more tags than the number you specify, the response contains a NextToken value.
        public let maxResults: Int32?

        public init(resourceId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeyList", required: true, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// A list of one or more tag keys for the tags that you are removing. Specify only the tag keys, not the tag values.
        public let tagKeyList: [String]
        /// The cluster identifier (ID) for the cluster whose tags you are removing. To find the cluster ID, use DescribeClusters.
        public let resourceId: String

        public init(tagKeyList: [String], resourceId: String) {
            self.tagKeyList = tagKeyList
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeyList = "TagKeyList"
            case resourceId = "ResourceId"
        }
    }

    public struct Certificates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsHardwareCertificate", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCsr", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCertificate", required: false, type: .string), 
            AWSShapeMember(label: "ManufacturerHardwareCertificate", required: false, type: .string), 
            AWSShapeMember(label: "HsmCertificate", required: false, type: .string)
        ]
        /// The HSM hardware certificate issued (signed) by AWS CloudHSM.
        public let awsHardwareCertificate: String?
        /// The cluster's certificate signing request (CSR). The CSR exists only when the cluster's state is UNINITIALIZED.
        public let clusterCsr: String?
        /// The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.
        public let clusterCertificate: String?
        /// The HSM hardware certificate issued (signed) by the hardware manufacturer.
        public let manufacturerHardwareCertificate: String?
        /// The HSM certificate issued (signed) by the HSM hardware.
        public let hsmCertificate: String?

        public init(awsHardwareCertificate: String? = nil, clusterCsr: String? = nil, clusterCertificate: String? = nil, manufacturerHardwareCertificate: String? = nil, hsmCertificate: String? = nil) {
            self.awsHardwareCertificate = awsHardwareCertificate
            self.clusterCsr = clusterCsr
            self.clusterCertificate = clusterCertificate
            self.manufacturerHardwareCertificate = manufacturerHardwareCertificate
            self.hsmCertificate = hsmCertificate
        }

        private enum CodingKeys: String, CodingKey {
            case awsHardwareCertificate = "AwsHardwareCertificate"
            case clusterCsr = "ClusterCsr"
            case clusterCertificate = "ClusterCertificate"
            case manufacturerHardwareCertificate = "ManufacturerHardwareCertificate"
            case hsmCertificate = "HsmCertificate"
        }
    }

}