// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SSM {

    public struct DescribeSessionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sessions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of sessions meeting the request parameters.
        public let sessions: [Session]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(sessions: [Session]? = nil, nextToken: String? = nil) {
            self.sessions = sessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case sessions = "Sessions"
            case nextToken = "NextToken"
        }
    }

    public struct CreateMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string)
        ]
        /// The ID of the created Maintenance Window.
        public let windowId: String?

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct DescribeEffectivePatchesForPatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ID of the patch baseline to retrieve the effective patches for.
        public let baselineId: String
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(baselineId: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.baselineId = baselineId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetInventoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of inventory entities such as a collection of instance inventory. 
        public let entities: [InventoryResultEntity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(entities: [InventoryResultEntity]? = nil, nextToken: String? = nil) {
            self.entities = entities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "Entities"
            case nextToken = "NextToken"
        }
    }

    public struct AttachmentContent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HashType", required: false, type: .enum), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "Hash", required: false, type: .string)
        ]
        /// The hash algorithm used to calculate the hash value.
        public let hashType: AttachmentHashType?
        /// The size of an attachment in bytes.
        public let size: Int64?
        /// The name of an attachment.
        public let name: String?
        /// The URL location of the attachment content.
        public let url: String?
        /// The cryptographic hash value of the document content.
        public let hash: String?

        public init(hashType: AttachmentHashType? = nil, size: Int64? = nil, name: String? = nil, url: String? = nil, hash: String? = nil) {
            self.hashType = hashType
            self.size = size
            self.name = name
            self.url = url
            self.hash = hash
        }

        private enum CodingKeys: String, CodingKey {
            case hashType = "HashType"
            case size = "Size"
            case name = "Name"
            case url = "Url"
            case hash = "Hash"
        }
    }

    public enum SignalType: String, CustomStringConvertible, Codable {
        case approve = "Approve"
        case reject = "Reject"
        case startstep = "StartStep"
        case stopstep = "StopStep"
        case resume = "Resume"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// Returns a list of tags for a specific resource type.
        public let resourceType: ResourceTypeForTagging
        /// The resource ID for which you want to see a list of tags.
        public let resourceId: String

        public init(resourceType: ResourceTypeForTagging, resourceId: String) {
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
        }
    }

    public enum AssociationComplianceSeverity: String, CustomStringConvertible, Codable {
        case critical = "CRITICAL"
        case high = "HIGH"
        case medium = "MEDIUM"
        case low = "LOW"
        case unspecified = "UNSPECIFIED"
        public var description: String { return self.rawValue }
    }

    public struct S3OutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string)
        ]
        /// The name of the Amazon S3 bucket.
        public let outputS3BucketName: String?
        /// The Amazon S3 bucket subfolder.
        public let outputS3KeyPrefix: String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?

        public init(outputS3BucketName: String? = nil, outputS3KeyPrefix: String? = nil, outputS3Region: String? = nil) {
            self.outputS3BucketName = outputS3BucketName
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3Region = outputS3Region
        }

        private enum CodingKeys: String, CodingKey {
            case outputS3BucketName = "OutputS3BucketName"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case outputS3Region = "OutputS3Region"
        }
    }

    public struct RegisterDefaultPatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The ID of the patch baseline that should be the default patch baseline.
        public let baselineId: String

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct DescribeActivationsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterKey", required: false, type: .enum), 
            AWSShapeMember(label: "FilterValues", required: false, type: .list)
        ]
        /// The name of the filter.
        public let filterKey: DescribeActivationsFilterKeys?
        /// The filter values.
        public let filterValues: [String]?

        public init(filterKey: DescribeActivationsFilterKeys? = nil, filterValues: [String]? = nil) {
            self.filterKey = filterKey
            self.filterValues = filterValues
        }

        private enum CodingKeys: String, CodingKey {
            case filterKey = "FilterKey"
            case filterValues = "FilterValues"
        }
    }

    public struct GetDefaultPatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum)
        ]
        /// The ID of the default patch baseline.
        public let baselineId: String?
        /// The operating system for the returned patch baseline. 
        public let operatingSystem: OperatingSystem?

        public init(baselineId: String? = nil, operatingSystem: OperatingSystem? = nil) {
            self.baselineId = baselineId
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct ListDocumentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DocumentFilterList", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let documentFilterList: [DocumentFilter]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [DocumentKeyValuesFilter]?

        public init(nextToken: String? = nil, documentFilterList: [DocumentFilter]? = nil, maxResults: Int32? = nil, filters: [DocumentKeyValuesFilter]? = nil) {
            self.nextToken = nextToken
            self.documentFilterList = documentFilterList
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case documentFilterList = "DocumentFilterList"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct DescribeMaintenanceWindowExecutionTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionTaskIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the task executions.
        public let windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskIdentities = windowExecutionTaskIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionTaskIdentities = "WindowExecutionTaskIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct ListResourceComplianceSummariesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [ComplianceStringFilter]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filters: [ComplianceStringFilter]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct Session: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "OutputUrl", required: false, type: .structure), 
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Details", required: false, type: .string), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "SessionId", required: false, type: .string)
        ]
        /// The instance that the Session Manager session connected to.
        public let target: String?
        /// The ID of the AWS user account that started the session.
        public let owner: String?
        /// The date and time, in ISO-8601 Extended format, when the session began.
        public let startDate: TimeStamp?
        /// The status of the session. For example, "Connected" or "Terminated".
        public let status: SessionStatus?
        /// Reserved for future use.
        public let outputUrl: SessionManagerOutputUrl?
        /// The date and time, in ISO-8601 Extended format, when the session was terminated.
        public let endDate: TimeStamp?
        /// Reserved for future use.
        public let details: String?
        /// The name of the Session Manager SSM document used to define the parameters and plugin settings for the session. For example, SSM-SessionManagerRunShell.
        public let documentName: String?
        /// The ID of the session.
        public let sessionId: String?

        public init(target: String? = nil, owner: String? = nil, startDate: TimeStamp? = nil, status: SessionStatus? = nil, outputUrl: SessionManagerOutputUrl? = nil, endDate: TimeStamp? = nil, details: String? = nil, documentName: String? = nil, sessionId: String? = nil) {
            self.target = target
            self.owner = owner
            self.startDate = startDate
            self.status = status
            self.outputUrl = outputUrl
            self.endDate = endDate
            self.details = details
            self.documentName = documentName
            self.sessionId = sessionId
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
            case owner = "Owner"
            case startDate = "StartDate"
            case status = "Status"
            case outputUrl = "OutputUrl"
            case endDate = "EndDate"
            case details = "Details"
            case documentName = "DocumentName"
            case sessionId = "SessionId"
        }
    }

    public enum StopType: String, CustomStringConvertible, Codable {
        case complete = "Complete"
        case cancel = "Cancel"
        public var description: String { return self.rawValue }
    }

    public struct DescribeMaintenanceWindowExecutionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the Maintenance Windows execution.
        public let windowExecutions: [MaintenanceWindowExecution]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowExecutions: [MaintenanceWindowExecution]? = nil, nextToken: String? = nil) {
            self.windowExecutions = windowExecutions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutions = "WindowExecutions"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateMaintenanceWindowTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "TaskInvocationParameters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window that was updated.
        public let windowId: String?
        /// The updated logging information in Amazon S3.   LoggingInfo has been deprecated. To specify an S3 bucket to contain logs, instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let loggingInfo: LoggingInfo?
        /// The updated parameter values.   TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The task ID of the Maintenance Window that was updated.
        public let windowTaskId: String?
        /// The updated target values.
        public let targets: [Target]?
        /// The updated task description.
        public let description: String?
        /// The updated task ARN value.
        public let taskArn: String?
        /// The updated priority value.
        public let priority: Int32?
        /// The updated task name.
        public let name: String?
        /// The updated MaxConcurrency value.
        public let maxConcurrency: String?
        /// The updated service role ARN value.
        public let serviceRoleArn: String?
        /// The updated parameter values.
        public let taskInvocationParameters: MaintenanceWindowTaskInvocationParameters?
        /// The updated MaxErrors value.
        public let maxErrors: String?

        public init(windowId: String? = nil, loggingInfo: LoggingInfo? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String? = nil, targets: [Target]? = nil, description: String? = nil, taskArn: String? = nil, priority: Int32? = nil, name: String? = nil, maxConcurrency: String? = nil, serviceRoleArn: String? = nil, taskInvocationParameters: MaintenanceWindowTaskInvocationParameters? = nil, maxErrors: String? = nil) {
            self.windowId = windowId
            self.loggingInfo = loggingInfo
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.description = description
            self.taskArn = taskArn
            self.priority = priority
            self.name = name
            self.maxConcurrency = maxConcurrency
            self.serviceRoleArn = serviceRoleArn
            self.taskInvocationParameters = taskInvocationParameters
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case loggingInfo = "LoggingInfo"
            case taskParameters = "TaskParameters"
            case windowTaskId = "WindowTaskId"
            case targets = "Targets"
            case description = "Description"
            case taskArn = "TaskArn"
            case priority = "Priority"
            case name = "Name"
            case maxConcurrency = "MaxConcurrency"
            case serviceRoleArn = "ServiceRoleArn"
            case taskInvocationParameters = "TaskInvocationParameters"
            case maxErrors = "MaxErrors"
        }
    }

    public struct DocumentFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: DocumentFilterKey
        /// The value of the filter.
        public let value: String

        public init(key: DocumentFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DescribeSessionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The session status to retrieve a list of sessions for. For example, "Active".
        public let state: SessionState
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters to limit the type of sessions returned by the request.
        public let filters: [SessionFilter]?

        public init(nextToken: String? = nil, state: SessionState, maxResults: Int32? = nil, filters: [SessionFilter]? = nil) {
            self.nextToken = nextToken
            self.state = state
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case state = "State"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct ResourceDataSyncItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncName", required: false, type: .string), 
            AWSShapeMember(label: "SyncCreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "S3Destination", required: false, type: .structure), 
            AWSShapeMember(label: "LastSuccessfulSyncTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStatus", required: false, type: .enum), 
            AWSShapeMember(label: "LastSyncTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastSyncStatusMessage", required: false, type: .string)
        ]
        /// The name of the Resource Data Sync.
        public let syncName: String?
        /// The date and time the configuration was created (UTC).
        public let syncCreatedTime: TimeStamp?
        /// Configuration information for the target Amazon S3 bucket.
        public let s3Destination: ResourceDataSyncS3Destination?
        /// The last time the sync operations returned a status of SUCCESSFUL (UTC).
        public let lastSuccessfulSyncTime: TimeStamp?
        /// The status reported by the last sync.
        public let lastStatus: LastResourceDataSyncStatus?
        /// The last time the configuration attempted to sync (UTC).
        public let lastSyncTime: TimeStamp?
        /// The status message details reported by the last sync.
        public let lastSyncStatusMessage: String?

        public init(syncName: String? = nil, syncCreatedTime: TimeStamp? = nil, s3Destination: ResourceDataSyncS3Destination? = nil, lastSuccessfulSyncTime: TimeStamp? = nil, lastStatus: LastResourceDataSyncStatus? = nil, lastSyncTime: TimeStamp? = nil, lastSyncStatusMessage: String? = nil) {
            self.syncName = syncName
            self.syncCreatedTime = syncCreatedTime
            self.s3Destination = s3Destination
            self.lastSuccessfulSyncTime = lastSuccessfulSyncTime
            self.lastStatus = lastStatus
            self.lastSyncTime = lastSyncTime
            self.lastSyncStatusMessage = lastSyncStatusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case syncName = "SyncName"
            case syncCreatedTime = "SyncCreatedTime"
            case s3Destination = "S3Destination"
            case lastSuccessfulSyncTime = "LastSuccessfulSyncTime"
            case lastStatus = "LastStatus"
            case lastSyncTime = "LastSyncTime"
            case lastSyncStatusMessage = "LastSyncStatusMessage"
        }
    }

    public struct TerminateSessionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionId", required: false, type: .string)
        ]
        /// The ID of the session that has been terminated.
        public let sessionId: String?

        public init(sessionId: String? = nil) {
            self.sessionId = sessionId
        }

        private enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
        }
    }

    public struct CancelMaintenanceWindowExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window execution to stop.
        public let windowExecutionId: String

        public init(windowExecutionId: String) {
            self.windowExecutionId = windowExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
        }
    }

    public struct NonCompliantSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SeveritySummary", required: false, type: .structure), 
            AWSShapeMember(label: "NonCompliantCount", required: false, type: .integer)
        ]
        /// A summary of the non-compliance severity by compliance type
        public let severitySummary: SeveritySummary?
        /// The total number of compliance items that are not compliant.
        public let nonCompliantCount: Int32?

        public init(severitySummary: SeveritySummary? = nil, nonCompliantCount: Int32? = nil) {
            self.severitySummary = severitySummary
            self.nonCompliantCount = nonCompliantCount
        }

        private enum CodingKeys: String, CodingKey {
            case severitySummary = "SeveritySummary"
            case nonCompliantCount = "NonCompliantCount"
        }
    }

    public enum DocumentPermissionType: String, CustomStringConvertible, Codable {
        case share = "Share"
        public var description: String { return self.rawValue }
    }

    public struct UpdatePatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "ApprovedPatchesEnableNonSecurity", required: false, type: .boolean), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "Replace", required: false, type: .boolean), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "ApprovedPatchesComplianceLevel", required: false, type: .enum), 
            AWSShapeMember(label: "RejectedPatchesAction", required: false, type: .enum), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Sources", required: false, type: .list)
        ]
        /// The ID of the patch baseline to update.
        public let baselineId: String
        /// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
        public let approvedPatchesEnableNonSecurity: Bool?
        /// A list of explicitly approved patches for the baseline. For information about accepted formats for lists of approved patches and rejected patches, see Package Name Formats for Approved and Rejected Patch Lists in the AWS Systems Manager User Guide.
        public let approvedPatches: [String]?
        /// If True, then all fields that are required by the CreatePatchBaseline action are also required for this API request. Optional fields that are not specified are set to null.
        public let replace: Bool?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// A description of the patch baseline.
        public let description: String?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// Assigns a new compliance severity level to an existing patch baseline.
        public let approvedPatchesComplianceLevel: PatchComplianceLevel?
        /// The action for Patch Manager to take on patches included in the RejectedPackages list.    ALLOW_AS_DEPENDENCY: A package in the Rejected patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as InstalledOther. This is the default action if no option is specified.    BLOCK: Packages in the RejectedPatches list, and packages that include them as dependencies, are not installed under any circumstances. If a package was installed before it was added to the Rejected patches list, it is considered non-compliant with the patch baseline, and its status is reported as InstalledRejected.  
        public let rejectedPatchesAction: PatchAction?
        /// A list of explicitly rejected patches for the baseline. For information about accepted formats for lists of approved patches and rejected patches, see Package Name Formats for Approved and Rejected Patch Lists in the AWS Systems Manager User Guide.
        public let rejectedPatches: [String]?
        /// The name of the patch baseline.
        public let name: String?
        /// Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only.
        public let sources: [PatchSource]?

        public init(baselineId: String, approvedPatchesEnableNonSecurity: Bool? = nil, approvedPatches: [String]? = nil, replace: Bool? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil, approvalRules: PatchRuleGroup? = nil, approvedPatchesComplianceLevel: PatchComplianceLevel? = nil, rejectedPatchesAction: PatchAction? = nil, rejectedPatches: [String]? = nil, name: String? = nil, sources: [PatchSource]? = nil) {
            self.baselineId = baselineId
            self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
            self.approvedPatches = approvedPatches
            self.replace = replace
            self.globalFilters = globalFilters
            self.description = description
            self.approvalRules = approvalRules
            self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
            self.rejectedPatchesAction = rejectedPatchesAction
            self.rejectedPatches = rejectedPatches
            self.name = name
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case approvedPatchesEnableNonSecurity = "ApprovedPatchesEnableNonSecurity"
            case approvedPatches = "ApprovedPatches"
            case replace = "Replace"
            case globalFilters = "GlobalFilters"
            case description = "Description"
            case approvalRules = "ApprovalRules"
            case approvedPatchesComplianceLevel = "ApprovedPatchesComplianceLevel"
            case rejectedPatchesAction = "RejectedPatchesAction"
            case rejectedPatches = "RejectedPatches"
            case name = "Name"
            case sources = "Sources"
        }
    }

    public struct UpdateDocumentDefaultVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .structure)
        ]
        /// The description of a custom document that you want to set as the default version.
        public let description: DocumentDefaultVersionDescription?

        public init(description: DocumentDefaultVersionDescription? = nil) {
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
        }
    }

    public struct AssociationExecutionTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "LastExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputSource", required: false, type: .structure), 
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// The resource type, for example, instance.
        public let resourceType: String?
        /// The association version.
        public let associationVersion: String?
        /// The execution ID. If the association does not run at intervals or according to a schedule, then the ExecutionID is the same as the AssociationID.
        public let executionId: String?
        /// The association execution status.
        public let status: String?
        /// The date of the last execution.
        public let lastExecutionDate: TimeStamp?
        /// The location where the association details are saved.
        public let outputSource: OutputSource?
        /// Detailed information about the execution status.
        public let detailedStatus: String?
        /// The resource ID, for example, the instance ID where the association ran.
        public let resourceId: String?
        /// The association ID.
        public let associationId: String?

        public init(resourceType: String? = nil, associationVersion: String? = nil, executionId: String? = nil, status: String? = nil, lastExecutionDate: TimeStamp? = nil, outputSource: OutputSource? = nil, detailedStatus: String? = nil, resourceId: String? = nil, associationId: String? = nil) {
            self.resourceType = resourceType
            self.associationVersion = associationVersion
            self.executionId = executionId
            self.status = status
            self.lastExecutionDate = lastExecutionDate
            self.outputSource = outputSource
            self.detailedStatus = detailedStatus
            self.resourceId = resourceId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case associationVersion = "AssociationVersion"
            case executionId = "ExecutionId"
            case status = "Status"
            case lastExecutionDate = "LastExecutionDate"
            case outputSource = "OutputSource"
            case detailedStatus = "DetailedStatus"
            case resourceId = "ResourceId"
            case associationId = "AssociationId"
        }
    }

    public struct CreateAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "ComplianceSeverity", required: false, type: .enum), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// Specify a descriptive name for the association.
        public let associationName: String?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public let maxErrors: String?
        /// A cron expression when the association will be applied to the target(s).
        public let scheduleExpression: String?
        /// The instance ID.
        public let instanceId: String?
        /// The severity level to assign to the association.
        public let complianceSeverity: AssociationComplianceSeverity?
        /// The targets (either instances or tags) for the association.
        public let targets: [Target]?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new instance starts and attempts to execute an association while Systems Manager is executing MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.
        public let maxConcurrency: String?
        /// An Amazon S3 bucket where you want to store the output details of the request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// The parameters for the documents runtime configuration. 
        public let parameters: [String: [String]]?
        /// The name of the Systems Manager document.
        public let name: String
        /// The document version you want to associate with the target(s). Can be a specific version or the default version.
        public let documentVersion: String?

        public init(associationName: String? = nil, maxErrors: String? = nil, scheduleExpression: String? = nil, instanceId: String? = nil, complianceSeverity: AssociationComplianceSeverity? = nil, targets: [Target]? = nil, maxConcurrency: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, parameters: [String: [String]]? = nil, name: String, documentVersion: String? = nil) {
            self.associationName = associationName
            self.maxErrors = maxErrors
            self.scheduleExpression = scheduleExpression
            self.instanceId = instanceId
            self.complianceSeverity = complianceSeverity
            self.targets = targets
            self.maxConcurrency = maxConcurrency
            self.outputLocation = outputLocation
            self.parameters = parameters
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case associationName = "AssociationName"
            case maxErrors = "MaxErrors"
            case scheduleExpression = "ScheduleExpression"
            case instanceId = "InstanceId"
            case complianceSeverity = "ComplianceSeverity"
            case targets = "Targets"
            case maxConcurrency = "MaxConcurrency"
            case outputLocation = "OutputLocation"
            case parameters = "Parameters"
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct DeregisterTargetFromMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTargetId", required: true, type: .string), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Safe", required: false, type: .boolean)
        ]
        /// The ID of the target definition to remove.
        public let windowTargetId: String
        /// The ID of the Maintenance Window the target should be removed from.
        public let windowId: String
        /// The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and does not deregister the target from the Maintenance Window.
        public let safe: Bool?

        public init(windowTargetId: String, windowId: String, safe: Bool? = nil) {
            self.windowTargetId = windowTargetId
            self.windowId = windowId
            self.safe = safe
        }

        private enum CodingKeys: String, CodingKey {
            case windowTargetId = "WindowTargetId"
            case windowId = "WindowId"
            case safe = "Safe"
        }
    }

    public struct Command: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchOutputConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "ExpiresAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "CompletedCount", required: false, type: .integer), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "ErrorCount", required: false, type: .integer), 
            AWSShapeMember(label: "DeliveryTimedOutCount", required: false, type: .integer), 
            AWSShapeMember(label: "TargetCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "RequestedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// A unique identifier for this command.
        public let commandId: String?
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes. 
        public let serviceRole: String?
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public let outputS3KeyPrefix: String?
        /// A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Understanding Command Statuses in the AWS Systems Manager User Guide. StatusDetails can be one of the following values:   Pending: The command has not been sent to any instances.   In Progress: The command has been sent to at least one instance but has not reached a final state on all instances.   Success: The command successfully executed on all invocations. This is a terminal state.   Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.   Execution Timed Out: The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.   Failed: The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.   Incomplete: The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Rate Exceeded: The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before executing it on any instance. This is a terminal state.  
        public let statusDetails: String?
        /// Configurations for sending notifications about command status changes. 
        public let notificationConfig: NotificationConfig?
        /// The name of the document requested for execution.
        public let documentName: String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?
        /// CloudWatch Logs information where you want Systems Manager to send the command output.
        public let cloudWatchOutputConfig: CloudWatchOutputConfig?
        /// The parameter values to be inserted in the document when executing the command.
        public let parameters: [String: [String]]?
        /// If this time is reached and the command has not already started executing, it will not run. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.
        public let expiresAfter: TimeStamp?
        /// The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable.
        public let completedCount: Int32?
        /// An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call.
        public let targets: [Target]?
        /// The number of targets for which the status is Failed or Execution Timed Out.
        public let errorCount: Int32?
        /// The number of targets for which the status is Delivery Timed Out.
        public let deliveryTimedOutCount: Int32?
        /// The number of targets for the command.
        public let targetCount: Int32?
        /// The instance IDs against which this command was requested.
        public let instanceIds: [String]?
        /// The status of the command.
        public let status: CommandStatus?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public let comment: String?
        /// The SSM document version.
        public let documentVersion: String?
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public let outputS3BucketName: String?
        /// The maximum number of instances that are allowed to execute the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see Executing Commands Using Systems Manager Run Command in the AWS Systems Manager User Guide.
        public let maxConcurrency: String?
        /// The date and time the command was requested.
        public let requestedDateTime: TimeStamp?
        /// The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 0. For more information about how to use MaxErrors, see Executing Commands Using Systems Manager Run Command in the AWS Systems Manager User Guide.
        public let maxErrors: String?

        public init(commandId: String? = nil, serviceRole: String? = nil, outputS3KeyPrefix: String? = nil, statusDetails: String? = nil, notificationConfig: NotificationConfig? = nil, documentName: String? = nil, outputS3Region: String? = nil, cloudWatchOutputConfig: CloudWatchOutputConfig? = nil, parameters: [String: [String]]? = nil, expiresAfter: TimeStamp? = nil, completedCount: Int32? = nil, targets: [Target]? = nil, errorCount: Int32? = nil, deliveryTimedOutCount: Int32? = nil, targetCount: Int32? = nil, instanceIds: [String]? = nil, status: CommandStatus? = nil, comment: String? = nil, documentVersion: String? = nil, outputS3BucketName: String? = nil, maxConcurrency: String? = nil, requestedDateTime: TimeStamp? = nil, maxErrors: String? = nil) {
            self.commandId = commandId
            self.serviceRole = serviceRole
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.statusDetails = statusDetails
            self.notificationConfig = notificationConfig
            self.documentName = documentName
            self.outputS3Region = outputS3Region
            self.cloudWatchOutputConfig = cloudWatchOutputConfig
            self.parameters = parameters
            self.expiresAfter = expiresAfter
            self.completedCount = completedCount
            self.targets = targets
            self.errorCount = errorCount
            self.deliveryTimedOutCount = deliveryTimedOutCount
            self.targetCount = targetCount
            self.instanceIds = instanceIds
            self.status = status
            self.comment = comment
            self.documentVersion = documentVersion
            self.outputS3BucketName = outputS3BucketName
            self.maxConcurrency = maxConcurrency
            self.requestedDateTime = requestedDateTime
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case serviceRole = "ServiceRole"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case statusDetails = "StatusDetails"
            case notificationConfig = "NotificationConfig"
            case documentName = "DocumentName"
            case outputS3Region = "OutputS3Region"
            case cloudWatchOutputConfig = "CloudWatchOutputConfig"
            case parameters = "Parameters"
            case expiresAfter = "ExpiresAfter"
            case completedCount = "CompletedCount"
            case targets = "Targets"
            case errorCount = "ErrorCount"
            case deliveryTimedOutCount = "DeliveryTimedOutCount"
            case targetCount = "TargetCount"
            case instanceIds = "InstanceIds"
            case status = "Status"
            case comment = "Comment"
            case documentVersion = "DocumentVersion"
            case outputS3BucketName = "OutputS3BucketName"
            case maxConcurrency = "MaxConcurrency"
            case requestedDateTime = "RequestedDateTime"
            case maxErrors = "MaxErrors"
        }
    }

    public struct GetDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "VersionName", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Returns the document in the specified format. The document format can be either JSON or YAML. JSON is the default format.
        public let documentFormat: DocumentFormat?
        /// An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?
        /// The document version for which you want information.
        public let documentVersion: String?
        /// The name of the Systems Manager document.
        public let name: String

        public init(documentFormat: DocumentFormat? = nil, versionName: String? = nil, documentVersion: String? = nil, name: String) {
            self.documentFormat = documentFormat
            self.versionName = versionName
            self.documentVersion = documentVersion
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case documentFormat = "DocumentFormat"
            case versionName = "VersionName"
            case documentVersion = "DocumentVersion"
            case name = "Name"
        }
    }

    public struct CreateMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleTimezone", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: true, type: .string), 
            AWSShapeMember(label: "Duration", required: true, type: .integer), 
            AWSShapeMember(label: "StartDate", required: false, type: .string), 
            AWSShapeMember(label: "EndDate", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: true, type: .boolean), 
            AWSShapeMember(label: "Cutoff", required: true, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or "Asia/Seoul". For more information, see the Time Zone Database on the IANA website.
        public let scheduleTimezone: String?
        /// User-provided idempotency token.
        public let clientToken: String?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32
        /// The date and time, in ISO-8601 Extended format, for when you want the Maintenance Window to become active. StartDate allows you to delay activation of the Maintenance Window until the specified future date.
        public let startDate: String?
        /// The date and time, in ISO-8601 Extended format, for when you want the Maintenance Window to become inactive. EndDate allows you to set a date and time in the future when the Maintenance Window will no longer run.
        public let endDate: String?
        /// An optional description for the Maintenance Window. We recommend specifying a description to help you organize your Maintenance Windows. 
        public let description: String?
        /// Enables a Maintenance Window task to execute on managed instances, even if you have not registered those instances as targets. If enabled, then you must specify the unregistered instances (by instance ID) when you register a task with the Maintenance Window  If you don't enable this option, then you must specify previously-registered targets when you register a task with the Maintenance Window. 
        public let allowUnassociatedTargets: Bool
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32
        /// The name of the Maintenance Window.
        public let name: String

        public init(scheduleTimezone: String? = nil, clientToken: String? = nil, schedule: String, duration: Int32, startDate: String? = nil, endDate: String? = nil, description: String? = nil, allowUnassociatedTargets: Bool, cutoff: Int32, name: String) {
            self.scheduleTimezone = scheduleTimezone
            self.clientToken = clientToken
            self.schedule = schedule
            self.duration = duration
            self.startDate = startDate
            self.endDate = endDate
            self.description = description
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.cutoff = cutoff
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleTimezone = "ScheduleTimezone"
            case clientToken = "ClientToken"
            case schedule = "Schedule"
            case duration = "Duration"
            case startDate = "StartDate"
            case endDate = "EndDate"
            case description = "Description"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case cutoff = "Cutoff"
            case name = "Name"
        }
    }

    public struct ListCommandInvocationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Details", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// (Optional) One or more filters. Use a filter to return a more specific list of results.
        public let filters: [CommandFilter]?
        /// (Optional) The invocations for a specific command ID.
        public let commandId: String?
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// (Optional) If set this returns the response of the command executions and any command output. By default this is set to False. 
        public let details: Bool?
        /// (Optional) The command execution details for a specific instance ID.
        public let instanceId: String?

        public init(nextToken: String? = nil, filters: [CommandFilter]? = nil, commandId: String? = nil, maxResults: Int32? = nil, details: Bool? = nil, instanceId: String? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.commandId = commandId
            self.maxResults = maxResults
            self.details = details
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case commandId = "CommandId"
            case maxResults = "MaxResults"
            case details = "Details"
            case instanceId = "InstanceId"
        }
    }

    public struct ParameterStringFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Option", required: false, type: .string)
        ]
        /// The value you want to search for.
        public let values: [String]?
        /// The name of the filter.
        public let key: String
        /// Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel.
        public let option: String?

        public init(values: [String]? = nil, key: String, option: String? = nil) {
            self.values = values
            self.key = key
            self.option = option
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
            case option = "Option"
        }
    }

    public struct DescribeInstancePatchStatesForPatchGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the patch group for which the patch state information should be retrieved.
        public let patchGroup: String
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?
        /// Each entry in the array is a structure containing: Key (string between 1 and 200 characters)  Values (array containing a single string)  Type (string "Equal", "NotEqual", "LessThan", "GreaterThan")
        public let filters: [InstancePatchStateFilter]?

        public init(nextToken: String? = nil, patchGroup: String, maxResults: Int32? = nil, filters: [InstancePatchStateFilter]? = nil) {
            self.nextToken = nextToken
            self.patchGroup = patchGroup
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case patchGroup = "PatchGroup"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct UpdateAssociationStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// Information about the association.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct LoggingInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string), 
            AWSShapeMember(label: "S3Region", required: true, type: .string)
        ]
        /// (Optional) The Amazon S3 bucket subfolder. 
        public let s3KeyPrefix: String?
        /// The name of an Amazon S3 bucket where execution logs are stored .
        public let s3BucketName: String
        /// The region where the Amazon S3 bucket is located.
        public let s3Region: String

        public init(s3KeyPrefix: String? = nil, s3BucketName: String, s3Region: String) {
            self.s3KeyPrefix = s3KeyPrefix
            self.s3BucketName = s3BucketName
            self.s3Region = s3Region
        }

        private enum CodingKeys: String, CodingKey {
            case s3KeyPrefix = "S3KeyPrefix"
            case s3BucketName = "S3BucketName"
            case s3Region = "S3Region"
        }
    }

    public struct GetDeployablePatchSnapshotForInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Product", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDownloadUrl", required: false, type: .string)
        ]
        /// Returns the specific operating system (for example Windows Server 2012 or Amazon Linux 2015.09) on the instance for the specified patch snapshot.
        public let product: String?
        /// The user-defined snapshot ID.
        public let snapshotId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// A pre-signed Amazon S3 URL that can be used to download the patch snapshot.
        public let snapshotDownloadUrl: String?

        public init(product: String? = nil, snapshotId: String? = nil, instanceId: String? = nil, snapshotDownloadUrl: String? = nil) {
            self.product = product
            self.snapshotId = snapshotId
            self.instanceId = instanceId
            self.snapshotDownloadUrl = snapshotDownloadUrl
        }

        private enum CodingKeys: String, CodingKey {
            case product = "Product"
            case snapshotId = "SnapshotId"
            case instanceId = "InstanceId"
            case snapshotDownloadUrl = "SnapshotDownloadUrl"
        }
    }

    public struct MaintenanceWindowExecutionTaskIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "TaskType", required: false, type: .enum), 
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp)
        ]
        /// The time the task execution started.
        public let startTime: TimeStamp?
        /// The ARN of the executed task.
        public let taskArn: String?
        /// The status of the task execution.
        public let status: MaintenanceWindowExecutionStatus?
        /// The details explaining the status of the task execution. Only available for certain status values.
        public let statusDetails: String?
        /// The ID of the Maintenance Window execution that ran the task.
        public let windowExecutionId: String?
        /// The type of executed task.
        public let taskType: MaintenanceWindowTaskType?
        /// The ID of the specific task execution in the Maintenance Window execution.
        public let taskExecutionId: String?
        /// The time the task execution finished.
        public let endTime: TimeStamp?

        public init(startTime: TimeStamp? = nil, taskArn: String? = nil, status: MaintenanceWindowExecutionStatus? = nil, statusDetails: String? = nil, windowExecutionId: String? = nil, taskType: MaintenanceWindowTaskType? = nil, taskExecutionId: String? = nil, endTime: TimeStamp? = nil) {
            self.startTime = startTime
            self.taskArn = taskArn
            self.status = status
            self.statusDetails = statusDetails
            self.windowExecutionId = windowExecutionId
            self.taskType = taskType
            self.taskExecutionId = taskExecutionId
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case taskArn = "TaskArn"
            case status = "Status"
            case statusDetails = "StatusDetails"
            case windowExecutionId = "WindowExecutionId"
            case taskType = "TaskType"
            case taskExecutionId = "TaskExecutionId"
            case endTime = "EndTime"
        }
    }

    public struct ComplianceItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Severity", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Details", required: false, type: .map), 
            AWSShapeMember(label: "ExecutionSummary", required: false, type: .structure), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ComplianceType", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.
        public let severity: ComplianceSeverity?
        /// An ID for the compliance item. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article; for example: KB4010320.
        public let id: String?
        /// The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.
        public let status: ComplianceStatus?
        /// A "Key": "Value" tag combination for the compliance item.
        public let details: [String: String]?
        /// A summary for the compliance item. The summary includes an execution ID, the execution type (for example, command), and the execution time.
        public let executionSummary: ComplianceExecutionSummary?
        /// A title for the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services.
        public let title: String?
        /// The compliance type. For example, Association (for a State Manager association), Patch, or Custom:string are all valid compliance types.
        public let complianceType: String?
        /// The type of resource. ManagedInstance is currently the only supported resource type.
        public let resourceType: String?
        /// An ID for the resource. For a managed instance, this is the instance ID.
        public let resourceId: String?

        public init(severity: ComplianceSeverity? = nil, id: String? = nil, status: ComplianceStatus? = nil, details: [String: String]? = nil, executionSummary: ComplianceExecutionSummary? = nil, title: String? = nil, complianceType: String? = nil, resourceType: String? = nil, resourceId: String? = nil) {
            self.severity = severity
            self.id = id
            self.status = status
            self.details = details
            self.executionSummary = executionSummary
            self.title = title
            self.complianceType = complianceType
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case severity = "Severity"
            case id = "Id"
            case status = "Status"
            case details = "Details"
            case executionSummary = "ExecutionSummary"
            case title = "Title"
            case complianceType = "ComplianceType"
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
        }
    }

    public struct SendAutomationSignalRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payload", required: false, type: .map), 
            AWSShapeMember(label: "AutomationExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "SignalType", required: true, type: .enum)
        ]
        /// The data sent with the signal. The data schema depends on the type of signal used in the request. 
        public let payload: [String: [String]]?
        /// The unique identifier for an existing Automation execution that you want to send the signal to.
        public let automationExecutionId: String
        /// The type of signal. Valid signal types include the following: Approve and Reject 
        public let signalType: SignalType

        public init(payload: [String: [String]]? = nil, automationExecutionId: String, signalType: SignalType) {
            self.payload = payload
            self.automationExecutionId = automationExecutionId
            self.signalType = signalType
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "Payload"
            case automationExecutionId = "AutomationExecutionId"
            case signalType = "SignalType"
        }
    }

    public struct GetInventoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResultAttributes", required: false, type: .list), 
            AWSShapeMember(label: "Aggregators", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The list of inventory item types to return.
        public let resultAttributes: [ResultAttribute]?
        /// Returns counts of inventory types based on one or more expressions. For example, if you aggregate by using an expression that uses the AWS:InstanceInformation.PlatformType type, you can see a count of how many Windows and Linux instances exist in your inventoried fleet.
        public let aggregators: [InventoryAggregator]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [InventoryFilter]?

        public init(nextToken: String? = nil, resultAttributes: [ResultAttribute]? = nil, aggregators: [InventoryAggregator]? = nil, maxResults: Int32? = nil, filters: [InventoryFilter]? = nil) {
            self.nextToken = nextToken
            self.resultAttributes = resultAttributes
            self.aggregators = aggregators
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resultAttributes = "ResultAttributes"
            case aggregators = "Aggregators"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct Target: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// User-defined criteria for sending commands that target instances that meet the criteria. Key can be tag:&lt;Amazon EC2 tag&gt; or InstanceIds. For more information about how to send commands that target instances using Key,Value parameters, see Targeting Multiple Instances in the AWS Systems Manager User Guide.
        public let key: String?
        /// User-defined criteria that maps to Key. For example, if you specified tag:ServerRole, you could specify value:WebServer to execute a command on instances that include Amazon EC2 tags of ServerRole,WebServer. For more information about how to send commands that target instances using Key,Value parameters, see Sending Commands to a Fleet in the AWS Systems Manager User Guide.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct DescribeMaintenanceWindowsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the Maintenance Windows.
        public let windowIdentities: [MaintenanceWindowIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowIdentities: [MaintenanceWindowIdentity]? = nil, nextToken: String? = nil) {
            self.windowIdentities = windowIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowIdentities = "WindowIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct DeregisterTaskFromMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "WindowTaskId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window the task should be removed from.
        public let windowId: String
        /// The ID of the task to remove from the Maintenance Window.
        public let windowTaskId: String

        public init(windowId: String, windowTaskId: String) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTaskId = "WindowTaskId"
        }
    }

    public enum ComplianceStatus: String, CustomStringConvertible, Codable {
        case compliant = "COMPLIANT"
        case nonCompliant = "NON_COMPLIANT"
        public var description: String { return self.rawValue }
    }

    public struct OutputSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputSourceId", required: false, type: .string), 
            AWSShapeMember(label: "OutputSourceType", required: false, type: .string)
        ]
        /// The ID of the output source, for example the URL of an Amazon S3 bucket.
        public let outputSourceId: String?
        /// The type of source where the association execution details are stored, for example, Amazon S3.
        public let outputSourceType: String?

        public init(outputSourceId: String? = nil, outputSourceType: String? = nil) {
            self.outputSourceId = outputSourceId
            self.outputSourceType = outputSourceType
        }

        private enum CodingKeys: String, CodingKey {
            case outputSourceId = "OutputSourceId"
            case outputSourceType = "OutputSourceType"
        }
    }

    public struct LabelParameterVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidLabels", required: false, type: .list)
        ]
        /// The label does not meet the requirements. For information about parameter label requirements, see Labeling Parameters in the AWS Systems Manager User Guide.
        public let invalidLabels: [String]?

        public init(invalidLabels: [String]? = nil) {
            self.invalidLabels = invalidLabels
        }

        private enum CodingKeys: String, CodingKey {
            case invalidLabels = "InvalidLabels"
        }
    }

    public struct AutomationExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutedBy", required: false, type: .string), 
            AWSShapeMember(label: "FailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "StepExecutions", required: false, type: .list), 
            AWSShapeMember(label: "AutomationExecutionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "TargetLocations", required: false, type: .list), 
            AWSShapeMember(label: "CurrentAction", required: false, type: .string), 
            AWSShapeMember(label: "ResolvedTargets", required: false, type: .structure), 
            AWSShapeMember(label: "AutomationExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StepExecutionsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Outputs", required: false, type: .map), 
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "ProgressCounters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "TargetMaps", required: false, type: .list), 
            AWSShapeMember(label: "ParentAutomationExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TargetParameterName", required: false, type: .string), 
            AWSShapeMember(label: "CurrentStepName", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map)
        ]
        /// The Amazon Resource Name (ARN) of the user who executed the automation.
        public let executedBy: String?
        /// A message describing why an execution has failed, if the status is set to Failed.
        public let failureMessage: String?
        /// A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are executed in order.
        public let stepExecutions: [StepExecution]?
        /// The execution status of the Automation.
        public let automationExecutionStatus: AutomationExecutionStatus?
        /// The combination of AWS Regions and/or AWS accounts where you want to execute the Automation.
        public let targetLocations: [TargetLocation]?
        /// The action of the currently executing step.
        public let currentAction: String?
        /// A list of resolved targets in the rate control execution.
        public let resolvedTargets: ResolvedTargets?
        /// The execution ID.
        public let automationExecutionId: String?
        /// The time the execution started.
        public let executionStartTime: TimeStamp?
        /// A boolean value that indicates if the response contains the full list of the Automation step executions. If true, use the DescribeAutomationStepExecutions API action to get the full list of step executions.
        public let stepExecutionsTruncated: Bool?
        /// The list of execution outputs as defined in the automation document.
        public let outputs: [String: [String]]?
        /// The target of the execution.
        public let target: String?
        /// The name of the Automation document used during the execution.
        public let documentName: String?
        /// An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and multi-account Automation execution.
        public let progressCounters: ProgressCounters?
        /// The MaxErrors value specified by the user when the execution started.
        public let maxErrors: String?
        /// The specified targets.
        public let targets: [Target]?
        /// The MaxConcurrency value specified by the user when the execution started.
        public let maxConcurrency: String?
        /// The specified key-value mapping of document parameters to target resources.
        public let targetMaps: [[String: [String]]]?
        /// The AutomationExecutionId of the parent automation.
        public let parentAutomationExecutionId: String?
        /// The automation execution mode.
        public let mode: ExecutionMode?
        /// The version of the document to use during execution.
        public let documentVersion: String?
        /// The time the execution finished.
        public let executionEndTime: TimeStamp?
        /// The parameter name.
        public let targetParameterName: String?
        /// The name of the currently executing step.
        public let currentStepName: String?
        /// The key-value map of execution parameters, which were supplied when calling StartAutomationExecution.
        public let parameters: [String: [String]]?

        public init(executedBy: String? = nil, failureMessage: String? = nil, stepExecutions: [StepExecution]? = nil, automationExecutionStatus: AutomationExecutionStatus? = nil, targetLocations: [TargetLocation]? = nil, currentAction: String? = nil, resolvedTargets: ResolvedTargets? = nil, automationExecutionId: String? = nil, executionStartTime: TimeStamp? = nil, stepExecutionsTruncated: Bool? = nil, outputs: [String: [String]]? = nil, target: String? = nil, documentName: String? = nil, progressCounters: ProgressCounters? = nil, maxErrors: String? = nil, targets: [Target]? = nil, maxConcurrency: String? = nil, targetMaps: [[String: [String]]]? = nil, parentAutomationExecutionId: String? = nil, mode: ExecutionMode? = nil, documentVersion: String? = nil, executionEndTime: TimeStamp? = nil, targetParameterName: String? = nil, currentStepName: String? = nil, parameters: [String: [String]]? = nil) {
            self.executedBy = executedBy
            self.failureMessage = failureMessage
            self.stepExecutions = stepExecutions
            self.automationExecutionStatus = automationExecutionStatus
            self.targetLocations = targetLocations
            self.currentAction = currentAction
            self.resolvedTargets = resolvedTargets
            self.automationExecutionId = automationExecutionId
            self.executionStartTime = executionStartTime
            self.stepExecutionsTruncated = stepExecutionsTruncated
            self.outputs = outputs
            self.target = target
            self.documentName = documentName
            self.progressCounters = progressCounters
            self.maxErrors = maxErrors
            self.targets = targets
            self.maxConcurrency = maxConcurrency
            self.targetMaps = targetMaps
            self.parentAutomationExecutionId = parentAutomationExecutionId
            self.mode = mode
            self.documentVersion = documentVersion
            self.executionEndTime = executionEndTime
            self.targetParameterName = targetParameterName
            self.currentStepName = currentStepName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case executedBy = "ExecutedBy"
            case failureMessage = "FailureMessage"
            case stepExecutions = "StepExecutions"
            case automationExecutionStatus = "AutomationExecutionStatus"
            case targetLocations = "TargetLocations"
            case currentAction = "CurrentAction"
            case resolvedTargets = "ResolvedTargets"
            case automationExecutionId = "AutomationExecutionId"
            case executionStartTime = "ExecutionStartTime"
            case stepExecutionsTruncated = "StepExecutionsTruncated"
            case outputs = "Outputs"
            case target = "Target"
            case documentName = "DocumentName"
            case progressCounters = "ProgressCounters"
            case maxErrors = "MaxErrors"
            case targets = "Targets"
            case maxConcurrency = "MaxConcurrency"
            case targetMaps = "TargetMaps"
            case parentAutomationExecutionId = "ParentAutomationExecutionId"
            case mode = "Mode"
            case documentVersion = "DocumentVersion"
            case executionEndTime = "ExecutionEndTime"
            case targetParameterName = "TargetParameterName"
            case currentStepName = "CurrentStepName"
            case parameters = "Parameters"
        }
    }

    public struct GetMaintenanceWindowExecutionTaskInvocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TaskId", required: true, type: .string), 
            AWSShapeMember(label: "InvocationId", required: true, type: .string), 
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string)
        ]
        /// The ID of the specific task in the Maintenance Window task that should be retrieved. 
        public let taskId: String
        /// The invocation ID to retrieve.
        public let invocationId: String
        /// The ID of the Maintenance Window execution for which the task is a part.
        public let windowExecutionId: String

        public init(taskId: String, invocationId: String, windowExecutionId: String) {
            self.taskId = taskId
            self.invocationId = invocationId
            self.windowExecutionId = windowExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case invocationId = "InvocationId"
            case windowExecutionId = "WindowExecutionId"
        }
    }

    public struct DescribeMaintenanceWindowScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instance ID or key/value pair to retrieve information about.
        public let targets: [Target]?
        /// The type of resource you want to retrieve information about. For example, "INSTANCE".
        public let resourceType: MaintenanceWindowResourceType?
        /// The ID of the Maintenance Window to retrieve information about.
        public let windowId: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Filters used to limit the range of results. For example, you can limit Maintenance Window executions to only those scheduled before or after a certain date and time.
        public let filters: [PatchOrchestratorFilter]?

        public init(nextToken: String? = nil, targets: [Target]? = nil, resourceType: MaintenanceWindowResourceType? = nil, windowId: String? = nil, maxResults: Int32? = nil, filters: [PatchOrchestratorFilter]? = nil) {
            self.nextToken = nextToken
            self.targets = targets
            self.resourceType = resourceType
            self.windowId = windowId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case targets = "Targets"
            case resourceType = "ResourceType"
            case windowId = "WindowId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct MaintenanceWindowTaskInvocationParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lambda", required: false, type: .structure), 
            AWSShapeMember(label: "Automation", required: false, type: .structure), 
            AWSShapeMember(label: "RunCommand", required: false, type: .structure), 
            AWSShapeMember(label: "StepFunctions", required: false, type: .structure)
        ]
        /// The parameters for a LAMBDA task type.
        public let lambda: MaintenanceWindowLambdaParameters?
        /// The parameters for an AUTOMATION task type.
        public let automation: MaintenanceWindowAutomationParameters?
        /// The parameters for a RUN_COMMAND task type.
        public let runCommand: MaintenanceWindowRunCommandParameters?
        /// The parameters for a STEP_FUNCTION task type.
        public let stepFunctions: MaintenanceWindowStepFunctionsParameters?

        public init(lambda: MaintenanceWindowLambdaParameters? = nil, automation: MaintenanceWindowAutomationParameters? = nil, runCommand: MaintenanceWindowRunCommandParameters? = nil, stepFunctions: MaintenanceWindowStepFunctionsParameters? = nil) {
            self.lambda = lambda
            self.automation = automation
            self.runCommand = runCommand
            self.stepFunctions = stepFunctions
        }

        private enum CodingKeys: String, CodingKey {
            case lambda = "Lambda"
            case automation = "Automation"
            case runCommand = "RunCommand"
            case stepFunctions = "StepFunctions"
        }
    }

    public struct AddTagsToResourceResult: AWSShape {

    }

    public enum CommandInvocationStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case delayed = "Delayed"
        case success = "Success"
        case cancelled = "Cancelled"
        case timedout = "TimedOut"
        case failed = "Failed"
        case cancelling = "Cancelling"
        public var description: String { return self.rawValue }
    }

    public struct PatchComplianceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KBId", required: true, type: .string), 
            AWSShapeMember(label: "Title", required: true, type: .string), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "Classification", required: true, type: .string), 
            AWSShapeMember(label: "Severity", required: true, type: .string), 
            AWSShapeMember(label: "InstalledTime", required: true, type: .timestamp)
        ]
        /// The operating system-specific ID of the patch.
        public let kBId: String
        /// The title of the patch.
        public let title: String
        /// The state of the patch on the instance, such as INSTALLED or FAILED. For descriptions of each patch state, see About Patch Compliance in the AWS Systems Manager User Guide.
        public let state: PatchComplianceDataState
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        public let classification: String
        /// The severity of the patch (for example, Critical, Important, Moderate).
        public let severity: String
        /// The date/time the patch was installed on the instance. Note that not all operating systems provide this level of information.
        public let installedTime: TimeStamp

        public init(kBId: String, title: String, state: PatchComplianceDataState, classification: String, severity: String, installedTime: TimeStamp) {
            self.kBId = kBId
            self.title = title
            self.state = state
            self.classification = classification
            self.severity = severity
            self.installedTime = installedTime
        }

        private enum CodingKeys: String, CodingKey {
            case kBId = "KBId"
            case title = "Title"
            case state = "State"
            case classification = "Classification"
            case severity = "Severity"
            case installedTime = "InstalledTime"
        }
    }

    public struct PatchBaselineIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultBaseline", required: false, type: .boolean), 
            AWSShapeMember(label: "BaselineName", required: false, type: .string), 
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "BaselineDescription", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum)
        ]
        /// Whether this is the default baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.
        public let defaultBaseline: Bool?
        /// The name of the patch baseline.
        public let baselineName: String?
        /// The ID of the patch baseline.
        public let baselineId: String?
        /// The description of the patch baseline.
        public let baselineDescription: String?
        /// Defines the operating system the patch baseline applies to. The Default value is WINDOWS. 
        public let operatingSystem: OperatingSystem?

        public init(defaultBaseline: Bool? = nil, baselineName: String? = nil, baselineId: String? = nil, baselineDescription: String? = nil, operatingSystem: OperatingSystem? = nil) {
            self.defaultBaseline = defaultBaseline
            self.baselineName = baselineName
            self.baselineId = baselineId
            self.baselineDescription = baselineDescription
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case defaultBaseline = "DefaultBaseline"
            case baselineName = "BaselineName"
            case baselineId = "BaselineId"
            case baselineDescription = "BaselineDescription"
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct DeleteParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the parameter to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct AutomationExecutionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// One or more keys to limit the results. Valid filter keys include the following: DocumentNamePrefix, ExecutionStatus, ExecutionId, ParentExecutionId, CurrentAction, StartTimeBefore, StartTimeAfter.
        public let key: AutomationExecutionFilterKey
        /// The values used to limit the execution information associated with the filter's key.
        public let values: [String]

        public init(key: AutomationExecutionFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct ListDocumentVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The name of the document about which you want version information.
        public let name: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, name: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case name = "Name"
        }
    }

    public struct MaintenanceWindowLambdaParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Qualifier", required: false, type: .string), 
            AWSShapeMember(label: "Payload", required: false, type: .blob), 
            AWSShapeMember(label: "ClientContext", required: false, type: .string)
        ]
        /// (Optional) Specify a Lambda function version or alias name. If you specify a function version, the action uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the action uses the alias ARN to invoke the Lambda function version to which the alias points.
        public let qualifier: String?
        /// JSON to provide to your Lambda function as input.
        public let payload: Data?
        /// Pass client-specific information to the Lambda function that you are invoking. You can then process the client information in your Lambda function as you choose through the context variable.
        public let clientContext: String?

        public init(qualifier: String? = nil, payload: Data? = nil, clientContext: String? = nil) {
            self.qualifier = qualifier
            self.payload = payload
            self.clientContext = clientContext
        }

        private enum CodingKeys: String, CodingKey {
            case qualifier = "Qualifier"
            case payload = "Payload"
            case clientContext = "ClientContext"
        }
    }

    public struct GetPatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The ID of the patch baseline to retrieve.
        public let baselineId: String

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct DescribeAvailablePatchesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?
        /// Filters used to scope down the returned patches.
        public let filters: [PatchOrchestratorFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [PatchOrchestratorFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public enum CommandStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case success = "Success"
        case cancelled = "Cancelled"
        case failed = "Failed"
        case timedout = "TimedOut"
        case cancelling = "Cancelling"
        public var description: String { return self.rawValue }
    }

    public struct DeleteInventoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SchemaDeleteOption", required: false, type: .enum), 
            AWSShapeMember(label: "TypeName", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string)
        ]
        /// Use this option to view a summary of the deletion request without deleting any data or the data type. This option is useful when you only want to understand what will be deleted. Once you validate that the data to be deleted is what you intend to delete, you can run the same command without specifying the DryRun option.
        public let dryRun: Bool?
        /// Use the SchemaDeleteOption to delete a custom inventory type (schema). If you don't choose this option, the system only deletes existing inventory data associated with the custom inventory type. Choose one of the following options: DisableSchema: If you choose this option, the system ignores all inventory data for the specified version, and any earlier versions. To enable this schema again, you must call the PutInventory action for a version greater than the disbled version. DeleteSchema: This option deletes the specified custom type from the Inventory service. You can recreate the schema later, if you want.
        public let schemaDeleteOption: InventorySchemaDeleteOption?
        /// The name of the custom inventory type for which you want to delete either all previously collected data, or the inventory type itself. 
        public let typeName: String
        /// User-provided idempotency token.
        public let clientToken: String?

        public init(dryRun: Bool? = nil, schemaDeleteOption: InventorySchemaDeleteOption? = nil, typeName: String, clientToken: String? = nil) {
            self.dryRun = dryRun
            self.schemaDeleteOption = schemaDeleteOption
            self.typeName = typeName
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case schemaDeleteOption = "SchemaDeleteOption"
            case typeName = "TypeName"
            case clientToken = "ClientToken"
        }
    }

    public struct DeleteInventoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletionSummary", required: false, type: .structure), 
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "DeletionId", required: false, type: .string)
        ]
        /// A summary of the delete operation. For more information about this summary, see Understanding the Delete Inventory Summary in the AWS Systems Manager User Guide.
        public let deletionSummary: InventoryDeletionSummary?
        /// The name of the inventory data type specified in the request.
        public let typeName: String?
        /// Every DeleteInventory action is assigned a unique ID. This option returns a unique ID. You can use this ID to query the status of a delete operation. This option is useful for ensuring that a delete operation has completed before you begin other actions. 
        public let deletionId: String?

        public init(deletionSummary: InventoryDeletionSummary? = nil, typeName: String? = nil, deletionId: String? = nil) {
            self.deletionSummary = deletionSummary
            self.typeName = typeName
            self.deletionId = deletionId
        }

        private enum CodingKeys: String, CodingKey {
            case deletionSummary = "DeletionSummary"
            case typeName = "TypeName"
            case deletionId = "DeletionId"
        }
    }

    public struct GetCommandInvocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: true, type: .string), 
            AWSShapeMember(label: "PluginName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// (Required) The parent command ID of the invocation plugin.
        public let commandId: String
        /// (Optional) The name of the plugin for which you want detailed results. If the document contains only one plugin, the name can be omitted and the details will be returned.
        public let pluginName: String?
        /// (Required) The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        public let instanceId: String

        public init(commandId: String, pluginName: String? = nil, instanceId: String) {
            self.commandId = commandId
            self.pluginName = pluginName
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case pluginName = "PluginName"
            case instanceId = "InstanceId"
        }
    }

    public struct DescribeInstancePatchStatesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancePatchStates", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The high-level patch state for the requested instances.
        public let instancePatchStates: [InstancePatchState]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(instancePatchStates: [InstancePatchState]? = nil, nextToken: String? = nil) {
            self.instancePatchStates = instancePatchStates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instancePatchStates = "InstancePatchStates"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeDocumentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Document", required: false, type: .structure)
        ]
        /// Information about the Systems Manager document.
        public let document: DocumentDescription?

        public init(document: DocumentDescription? = nil) {
            self.document = document
        }

        private enum CodingKeys: String, CodingKey {
            case document = "Document"
        }
    }

    public struct GetConnectionStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The ID of the instance to check connection status. 
        public let target: String?
        /// The status of the connection to the instance. For example, 'Connected' or 'Not Connected'.
        public let status: ConnectionStatus?

        public init(target: String? = nil, status: ConnectionStatus? = nil) {
            self.target = target
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
            case status = "Status"
        }
    }

    public struct DeleteDocumentResult: AWSShape {

    }

    public enum DocumentFilterKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case owner = "Owner"
        case platformtypes = "PlatformTypes"
        case documenttype = "DocumentType"
        public var description: String { return self.rawValue }
    }

    public struct ResourceComplianceSummaryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompliantSummary", required: false, type: .structure), 
            AWSShapeMember(label: "OverallSeverity", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ExecutionSummary", required: false, type: .structure), 
            AWSShapeMember(label: "NonCompliantSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ComplianceType", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// A list of items that are compliant for the resource.
        public let compliantSummary: CompliantSummary?
        /// The highest severity item found for the resource. The resource is compliant for this item.
        public let overallSeverity: ComplianceSeverity?
        /// The compliance status for the resource.
        public let status: ComplianceStatus?
        /// Information about the execution.
        public let executionSummary: ComplianceExecutionSummary?
        /// A list of items that aren't compliant for the resource.
        public let nonCompliantSummary: NonCompliantSummary?
        /// The compliance type.
        public let complianceType: String?
        /// The resource type.
        public let resourceType: String?
        /// The resource ID.
        public let resourceId: String?

        public init(compliantSummary: CompliantSummary? = nil, overallSeverity: ComplianceSeverity? = nil, status: ComplianceStatus? = nil, executionSummary: ComplianceExecutionSummary? = nil, nonCompliantSummary: NonCompliantSummary? = nil, complianceType: String? = nil, resourceType: String? = nil, resourceId: String? = nil) {
            self.compliantSummary = compliantSummary
            self.overallSeverity = overallSeverity
            self.status = status
            self.executionSummary = executionSummary
            self.nonCompliantSummary = nonCompliantSummary
            self.complianceType = complianceType
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case compliantSummary = "CompliantSummary"
            case overallSeverity = "OverallSeverity"
            case status = "Status"
            case executionSummary = "ExecutionSummary"
            case nonCompliantSummary = "NonCompliantSummary"
            case complianceType = "ComplianceType"
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
        }
    }

    public enum NotificationEvent: String, CustomStringConvertible, Codable {
        case all = "All"
        case inprogress = "InProgress"
        case success = "Success"
        case timedout = "TimedOut"
        case cancelled = "Cancelled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct GetPatchBaselineForPatchGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum)
        ]
        /// The ID of the patch baseline that should be used for the patch group.
        public let baselineId: String?
        /// The name of the patch group.
        public let patchGroup: String?
        /// The operating system rule specified for patch groups using the patch baseline.
        public let operatingSystem: OperatingSystem?

        public init(baselineId: String? = nil, patchGroup: String? = nil, operatingSystem: OperatingSystem? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case patchGroup = "PatchGroup"
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct ComplianceSummaryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompliantSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ComplianceType", required: false, type: .string), 
            AWSShapeMember(label: "NonCompliantSummary", required: false, type: .structure)
        ]
        /// A list of COMPLIANT items for the specified compliance type.
        public let compliantSummary: CompliantSummary?
        /// The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string.
        public let complianceType: String?
        /// A list of NON_COMPLIANT items for the specified compliance type.
        public let nonCompliantSummary: NonCompliantSummary?

        public init(compliantSummary: CompliantSummary? = nil, complianceType: String? = nil, nonCompliantSummary: NonCompliantSummary? = nil) {
            self.compliantSummary = compliantSummary
            self.complianceType = complianceType
            self.nonCompliantSummary = nonCompliantSummary
        }

        private enum CodingKeys: String, CodingKey {
            case compliantSummary = "CompliantSummary"
            case complianceType = "ComplianceType"
            case nonCompliantSummary = "NonCompliantSummary"
        }
    }

    public struct AssociationOverview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "AssociationStatusAggregatedCount", required: false, type: .map)
        ]
        /// A detailed status of the association.
        public let detailedStatus: String?
        /// The status of the association. Status can be: Pending, Success, or Failed.
        public let status: String?
        /// Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status.
        public let associationStatusAggregatedCount: [String: Int32]?

        public init(detailedStatus: String? = nil, status: String? = nil, associationStatusAggregatedCount: [String: Int32]? = nil) {
            self.detailedStatus = detailedStatus
            self.status = status
            self.associationStatusAggregatedCount = associationStatusAggregatedCount
        }

        private enum CodingKeys: String, CodingKey {
            case detailedStatus = "DetailedStatus"
            case status = "Status"
            case associationStatusAggregatedCount = "AssociationStatusAggregatedCount"
        }
    }

    public struct DescribeMaintenanceWindowScheduleResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledWindowExecutions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about Maintenance Window executions scheduled for the specified time range.
        public let scheduledWindowExecutions: [ScheduledWindowExecution]?
        /// The token for the next set of items to return. (You use this token in the next call.)
        public let nextToken: String?

        public init(scheduledWindowExecutions: [ScheduledWindowExecution]? = nil, nextToken: String? = nil) {
            self.scheduledWindowExecutions = scheduledWindowExecutions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledWindowExecutions = "ScheduledWindowExecutions"
            case nextToken = "NextToken"
        }
    }

    public struct FailedCreateAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Entry", required: false, type: .structure), 
            AWSShapeMember(label: "Fault", required: false, type: .enum)
        ]
        /// A description of the failure.
        public let message: String?
        /// The association.
        public let entry: CreateAssociationBatchRequestEntry?
        /// The source of the failure.
        public let fault: Fault?

        public init(message: String? = nil, entry: CreateAssociationBatchRequestEntry? = nil, fault: Fault? = nil) {
            self.message = message
            self.entry = entry
            self.fault = fault
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case entry = "Entry"
            case fault = "Fault"
        }
    }

    public struct UpdatePatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RejectedPatchesAction", required: false, type: .enum), 
            AWSShapeMember(label: "Sources", required: false, type: .list), 
            AWSShapeMember(label: "ModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApprovedPatchesComplianceLevel", required: false, type: .enum), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "ApprovedPatchesEnableNonSecurity", required: false, type: .boolean), 
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The action specified to take on patches included in the RejectedPatches list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency.
        public let rejectedPatchesAction: PatchAction?
        /// Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only.
        public let sources: [PatchSource]?
        /// The date when the patch baseline was last modified.
        public let modifiedDate: TimeStamp?
        /// The date when the patch baseline was created.
        public let createdDate: TimeStamp?
        /// A list of explicitly rejected patches for the baseline.
        public let rejectedPatches: [String]?
        /// A list of explicitly approved patches for the baseline.
        public let approvedPatches: [String]?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// A description of the Patch Baseline.
        public let description: String?
        /// The compliance severity level assigned to the patch baseline after the update completed.
        public let approvedPatchesComplianceLevel: PatchComplianceLevel?
        /// The operating system rule used by the updated patch baseline.
        public let operatingSystem: OperatingSystem?
        /// The name of the patch baseline.
        public let name: String?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
        public let approvedPatchesEnableNonSecurity: Bool?
        /// The ID of the deleted patch baseline.
        public let baselineId: String?

        public init(rejectedPatchesAction: PatchAction? = nil, sources: [PatchSource]? = nil, modifiedDate: TimeStamp? = nil, createdDate: TimeStamp? = nil, rejectedPatches: [String]? = nil, approvedPatches: [String]? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil, approvedPatchesComplianceLevel: PatchComplianceLevel? = nil, operatingSystem: OperatingSystem? = nil, name: String? = nil, approvalRules: PatchRuleGroup? = nil, approvedPatchesEnableNonSecurity: Bool? = nil, baselineId: String? = nil) {
            self.rejectedPatchesAction = rejectedPatchesAction
            self.sources = sources
            self.modifiedDate = modifiedDate
            self.createdDate = createdDate
            self.rejectedPatches = rejectedPatches
            self.approvedPatches = approvedPatches
            self.globalFilters = globalFilters
            self.description = description
            self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
            self.operatingSystem = operatingSystem
            self.name = name
            self.approvalRules = approvalRules
            self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case rejectedPatchesAction = "RejectedPatchesAction"
            case sources = "Sources"
            case modifiedDate = "ModifiedDate"
            case createdDate = "CreatedDate"
            case rejectedPatches = "RejectedPatches"
            case approvedPatches = "ApprovedPatches"
            case globalFilters = "GlobalFilters"
            case description = "Description"
            case approvedPatchesComplianceLevel = "ApprovedPatchesComplianceLevel"
            case operatingSystem = "OperatingSystem"
            case name = "Name"
            case approvalRules = "ApprovalRules"
            case approvedPatchesEnableNonSecurity = "ApprovedPatchesEnableNonSecurity"
            case baselineId = "BaselineId"
        }
    }

    public struct InventoryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHash", required: false, type: .string), 
            AWSShapeMember(label: "CaptureTime", required: true, type: .string), 
            AWSShapeMember(label: "Content", required: false, type: .list), 
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "SchemaVersion", required: true, type: .string), 
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        public let contentHash: String?
        /// The time the inventory information was collected.
        public let captureTime: String
        /// The inventory data of the inventory type.
        public let content: [[String: String]]?
        /// A map of associated properties for a specified inventory type. For example, with this attribute, you can specify the ExecutionId, ExecutionType, ComplianceType properties of the AWS:ComplianceItem type.
        public let context: [String: String]?
        /// The schema version for the inventory item.
        public let schemaVersion: String
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        public let typeName: String

        public init(contentHash: String? = nil, captureTime: String, content: [[String: String]]? = nil, context: [String: String]? = nil, schemaVersion: String, typeName: String) {
            self.contentHash = contentHash
            self.captureTime = captureTime
            self.content = content
            self.context = context
            self.schemaVersion = schemaVersion
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case contentHash = "ContentHash"
            case captureTime = "CaptureTime"
            case content = "Content"
            case context = "Context"
            case schemaVersion = "SchemaVersion"
            case typeName = "TypeName"
        }
    }

    public struct AssociationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "Overview", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "ComplianceSeverity", required: false, type: .enum), 
            AWSShapeMember(label: "LastExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "LastSuccessfulExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdateAssociationDate", required: false, type: .timestamp)
        ]
        /// The association version.
        public let associationVersion: String?
        /// Information about the association.
        public let overview: AssociationOverview?
        /// The ID of the instance.
        public let instanceId: String?
        /// The date when the association was made.
        public let date: TimeStamp?
        /// The severity level that is assigned to the association.
        public let complianceSeverity: AssociationComplianceSeverity?
        /// The date on which the association was last run.
        public let lastExecutionDate: TimeStamp?
        /// The association name.
        public let associationName: String?
        /// A description of the parameters for a document. 
        public let parameters: [String: [String]]?
        /// The association ID.
        public let associationId: String?
        /// The instances targeted by the request. 
        public let targets: [Target]?
        /// The association status.
        public let status: AssociationStatus?
        /// The name of the Systems Manager document.
        public let name: String?
        /// The document version.
        public let documentVersion: String?
        /// The last date on which the association was successfully run.
        public let lastSuccessfulExecutionDate: TimeStamp?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new instance starts and attempts to execute an association while Systems Manager is executing MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.
        public let maxConcurrency: String?
        /// A cron expression that specifies a schedule when the association runs.
        public let scheduleExpression: String?
        /// An Amazon S3 bucket where you want to store the output details of the request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public let maxErrors: String?
        /// The date when the association was last updated.
        public let lastUpdateAssociationDate: TimeStamp?

        public init(associationVersion: String? = nil, overview: AssociationOverview? = nil, instanceId: String? = nil, date: TimeStamp? = nil, complianceSeverity: AssociationComplianceSeverity? = nil, lastExecutionDate: TimeStamp? = nil, associationName: String? = nil, parameters: [String: [String]]? = nil, associationId: String? = nil, targets: [Target]? = nil, status: AssociationStatus? = nil, name: String? = nil, documentVersion: String? = nil, lastSuccessfulExecutionDate: TimeStamp? = nil, maxConcurrency: String? = nil, scheduleExpression: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, maxErrors: String? = nil, lastUpdateAssociationDate: TimeStamp? = nil) {
            self.associationVersion = associationVersion
            self.overview = overview
            self.instanceId = instanceId
            self.date = date
            self.complianceSeverity = complianceSeverity
            self.lastExecutionDate = lastExecutionDate
            self.associationName = associationName
            self.parameters = parameters
            self.associationId = associationId
            self.targets = targets
            self.status = status
            self.name = name
            self.documentVersion = documentVersion
            self.lastSuccessfulExecutionDate = lastSuccessfulExecutionDate
            self.maxConcurrency = maxConcurrency
            self.scheduleExpression = scheduleExpression
            self.outputLocation = outputLocation
            self.maxErrors = maxErrors
            self.lastUpdateAssociationDate = lastUpdateAssociationDate
        }

        private enum CodingKeys: String, CodingKey {
            case associationVersion = "AssociationVersion"
            case overview = "Overview"
            case instanceId = "InstanceId"
            case date = "Date"
            case complianceSeverity = "ComplianceSeverity"
            case lastExecutionDate = "LastExecutionDate"
            case associationName = "AssociationName"
            case parameters = "Parameters"
            case associationId = "AssociationId"
            case targets = "Targets"
            case status = "Status"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case lastSuccessfulExecutionDate = "LastSuccessfulExecutionDate"
            case maxConcurrency = "MaxConcurrency"
            case scheduleExpression = "ScheduleExpression"
            case outputLocation = "OutputLocation"
            case maxErrors = "MaxErrors"
            case lastUpdateAssociationDate = "LastUpdateAssociationDate"
        }
    }

    public struct ListCommandsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// (Optional) If provided, lists only the specified command.
        public let commandId: String?
        /// (Optional) Lists commands issued against this instance ID.
        public let instanceId: String?
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// (Optional) One or more filters. Use a filter to return a more specific list of results. 
        public let filters: [CommandFilter]?

        public init(nextToken: String? = nil, commandId: String? = nil, instanceId: String? = nil, maxResults: Int32? = nil, filters: [CommandFilter]? = nil) {
            self.nextToken = nextToken
            self.commandId = commandId
            self.instanceId = instanceId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case commandId = "CommandId"
            case instanceId = "InstanceId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct UpdateManagedInstanceRoleResult: AWSShape {

    }

    public struct MaintenanceWindowStepFunctionsParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Input", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The inputs for the STEP_FUNCTION task.
        public let input: String?
        /// The name of the STEP_FUNCTION task.
        public let name: String?

        public init(input: String? = nil, name: String? = nil) {
            self.input = input
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case input = "Input"
            case name = "Name"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String
        /// The name of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct PatchRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComplianceLevel", required: false, type: .enum), 
            AWSShapeMember(label: "EnableNonSecurity", required: false, type: .boolean), 
            AWSShapeMember(label: "PatchFilterGroup", required: true, type: .structure), 
            AWSShapeMember(label: "ApproveAfterDays", required: true, type: .integer)
        ]
        /// A compliance severity level for all approved patches in a patch baseline. Valid compliance severity levels include the following: Unspecified, Critical, High, Medium, Low, and Informational.
        public let complianceLevel: PatchComplianceLevel?
        /// For instances identified by the approval rule filters, enables a patch baseline to apply non-security updates available in the specified repository. The default value is 'false'. Applies to Linux instances only.
        public let enableNonSecurity: Bool?
        /// The patch filter group that defines the criteria for the rule.
        public let patchFilterGroup: PatchFilterGroup
        /// The number of days after the release date of each patch matched by the rule that the patch is marked as approved in the patch baseline. For example, a value of 7 means that patches are approved seven days after they are released. 
        public let approveAfterDays: Int32

        public init(complianceLevel: PatchComplianceLevel? = nil, enableNonSecurity: Bool? = nil, patchFilterGroup: PatchFilterGroup, approveAfterDays: Int32) {
            self.complianceLevel = complianceLevel
            self.enableNonSecurity = enableNonSecurity
            self.patchFilterGroup = patchFilterGroup
            self.approveAfterDays = approveAfterDays
        }

        private enum CodingKeys: String, CodingKey {
            case complianceLevel = "ComplianceLevel"
            case enableNonSecurity = "EnableNonSecurity"
            case patchFilterGroup = "PatchFilterGroup"
            case approveAfterDays = "ApproveAfterDays"
        }
    }

    public struct AttachmentInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StartAutomationExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentName", required: true, type: .string), 
            AWSShapeMember(label: "TargetParameterName", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "TargetMaps", required: false, type: .list), 
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "TargetLocations", required: false, type: .list)
        ]
        /// The name of the Automation document to use for this execution.
        public let documentName: String
        /// The name of the parameter used as the target resource for the rate-controlled execution. Required if you specify targets.
        public let targetParameterName: String?
        /// The number of errors that are allowed before the system stops running the automation on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops running the automation when the fourth error is received. If you specify 0, then the system stops running the automation on additional targets after the first error result is returned. If you run an automation on 50 resources and set max-errors to 10%, then the system stops running the automation on additional targets when the sixth error is received. Executions that are already running an automation when max-errors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set max-concurrency to 1 so the executions proceed one at a time.
        public let maxErrors: String?
        /// User-provided idempotency token. The token must be unique, is case insensitive, enforces the UUID format, and can't be reused.
        public let clientToken: String?
        /// A key-value mapping of document parameters to target resources. Both Targets and TargetMaps cannot be specified together.
        public let targetMaps: [[String: [String]]]?
        /// The execution mode of the automation. Valid modes include the following: Auto and Interactive. The default mode is Auto.
        public let mode: ExecutionMode?
        /// A key-value mapping to target resources. Required if you specify TargetParameterName.
        public let targets: [Target]?
        /// The maximum number of targets allowed to run this task in parallel. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 10.
        public let maxConcurrency: String?
        /// A key-value map of execution parameters, which match the declared parameters in the Automation document.
        public let parameters: [String: [String]]?
        /// The version of the Automation document to use for this execution.
        public let documentVersion: String?
        /// A location is a combination of AWS Regions and/or AWS accounts where you want to execute the Automation. Use this action to start an Automation in multiple Regions and multiple accounts. For more information, see Concurrently Executing Automations in Multiple AWS Regions and Accounts in the AWS Systems Manager User Guide. 
        public let targetLocations: [TargetLocation]?

        public init(documentName: String, targetParameterName: String? = nil, maxErrors: String? = nil, clientToken: String? = nil, targetMaps: [[String: [String]]]? = nil, mode: ExecutionMode? = nil, targets: [Target]? = nil, maxConcurrency: String? = nil, parameters: [String: [String]]? = nil, documentVersion: String? = nil, targetLocations: [TargetLocation]? = nil) {
            self.documentName = documentName
            self.targetParameterName = targetParameterName
            self.maxErrors = maxErrors
            self.clientToken = clientToken
            self.targetMaps = targetMaps
            self.mode = mode
            self.targets = targets
            self.maxConcurrency = maxConcurrency
            self.parameters = parameters
            self.documentVersion = documentVersion
            self.targetLocations = targetLocations
        }

        private enum CodingKeys: String, CodingKey {
            case documentName = "DocumentName"
            case targetParameterName = "TargetParameterName"
            case maxErrors = "MaxErrors"
            case clientToken = "ClientToken"
            case targetMaps = "TargetMaps"
            case mode = "Mode"
            case targets = "Targets"
            case maxConcurrency = "MaxConcurrency"
            case parameters = "Parameters"
            case documentVersion = "DocumentVersion"
            case targetLocations = "TargetLocations"
        }
    }

    public struct DeleteMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window to delete.
        public let windowId: String

        public init(windowId: String) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct PatchStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApprovalDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "ComplianceLevel", required: false, type: .enum)
        ]
        /// The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
        public let approvalDate: TimeStamp?
        /// The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED).
        public let deploymentStatus: PatchDeploymentStatus?
        /// The compliance severity level for a patch.
        public let complianceLevel: PatchComplianceLevel?

        public init(approvalDate: TimeStamp? = nil, deploymentStatus: PatchDeploymentStatus? = nil, complianceLevel: PatchComplianceLevel? = nil) {
            self.approvalDate = approvalDate
            self.deploymentStatus = deploymentStatus
            self.complianceLevel = complianceLevel
        }

        private enum CodingKeys: String, CodingKey {
            case approvalDate = "ApprovalDate"
            case deploymentStatus = "DeploymentStatus"
            case complianceLevel = "ComplianceLevel"
        }
    }

    public struct ListAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "AssociationFilterList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let associationFilterList: [AssociationFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxResults: Int32? = nil, associationFilterList: [AssociationFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.associationFilterList = associationFilterList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case associationFilterList = "AssociationFilterList"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeEffectiveInstanceAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The associations for the requested instance.
        public let associations: [InstanceAssociation]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(associations: [InstanceAssociation]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "Associations"
            case nextToken = "NextToken"
        }
    }

    public struct AssociationStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: true, type: .string), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .enum), 
            AWSShapeMember(label: "Date", required: true, type: .timestamp)
        ]
        /// The reason for the status.
        public let message: String
        /// A user-defined string.
        public let additionalInfo: String?
        /// The status.
        public let name: AssociationStatusName
        /// The date when the status changed.
        public let date: TimeStamp

        public init(message: String, additionalInfo: String? = nil, name: AssociationStatusName, date: TimeStamp) {
            self.message = message
            self.additionalInfo = additionalInfo
            self.name = name
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case additionalInfo = "AdditionalInfo"
            case name = "Name"
            case date = "Date"
        }
    }

    public struct DescribeEffectivePatchesForPatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EffectivePatches", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of patches and patch status.
        public let effectivePatches: [EffectivePatch]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(effectivePatches: [EffectivePatch]? = nil, nextToken: String? = nil) {
            self.effectivePatches = effectivePatches
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case effectivePatches = "EffectivePatches"
            case nextToken = "NextToken"
        }
    }

    public struct CancelCommandResult: AWSShape {

    }

    public struct DescribeAutomationStepExecutionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepExecutions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of details about the current state of all steps that make up an execution.
        public let stepExecutions: [StepExecution]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(stepExecutions: [StepExecution]? = nil, nextToken: String? = nil) {
            self.stepExecutions = stepExecutions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case stepExecutions = "StepExecutions"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetType", required: false, type: .string), 
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Attachments", required: false, type: .list), 
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "VersionName", required: false, type: .string)
        ]
        /// Specify a new target type for the document.
        public let targetType: String?
        /// A valid JSON or YAML string.
        public let content: String
        /// A list of key and value pairs that describe attachments to a version of a document.
        public let attachments: [AttachmentsSource]?
        /// Specify the document format for the new document version. Systems Manager supports JSON and YAML documents. JSON is the default format.
        public let documentFormat: DocumentFormat?
        /// The name of the document that you want to update.
        public let name: String
        /// The version of the document that you want to update.
        public let documentVersion: String?
        /// An optional field specifying the version of the artifact you are updating with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?

        public init(targetType: String? = nil, content: String, attachments: [AttachmentsSource]? = nil, documentFormat: DocumentFormat? = nil, name: String, documentVersion: String? = nil, versionName: String? = nil) {
            self.targetType = targetType
            self.content = content
            self.attachments = attachments
            self.documentFormat = documentFormat
            self.name = name
            self.documentVersion = documentVersion
            self.versionName = versionName
        }

        private enum CodingKeys: String, CodingKey {
            case targetType = "TargetType"
            case content = "Content"
            case attachments = "Attachments"
            case documentFormat = "DocumentFormat"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case versionName = "VersionName"
        }
    }

    public struct InventoryDeletionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemainingCount", required: false, type: .integer), 
            AWSShapeMember(label: "SummaryItems", required: false, type: .list), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// Remaining number of items to delete.
        public let remainingCount: Int32?
        /// A list of counts and versions for deleted items.
        public let summaryItems: [InventoryDeletionSummaryItem]?
        /// The total number of items to delete. This count does not change during the delete operation.
        public let totalCount: Int32?

        public init(remainingCount: Int32? = nil, summaryItems: [InventoryDeletionSummaryItem]? = nil, totalCount: Int32? = nil) {
            self.remainingCount = remainingCount
            self.summaryItems = summaryItems
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case remainingCount = "RemainingCount"
            case summaryItems = "SummaryItems"
            case totalCount = "TotalCount"
        }
    }

    public struct DescribeParametersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ParameterFilters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// Filters to limit the request results.
        public let parameterFilters: [ParameterStringFilter]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [ParametersFilter]?

        public init(nextToken: String? = nil, parameterFilters: [ParameterStringFilter]? = nil, maxResults: Int32? = nil, filters: [ParametersFilter]? = nil) {
            self.nextToken = nextToken
            self.parameterFilters = parameterFilters
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parameterFilters = "ParameterFilters"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct AssociationExecutionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// The key value used in the request.
        public let key: AssociationExecutionFilterKey
        /// The value specified for the key.
        public let value: String
        /// The filter type specified in the request.
        public let `type`: AssociationFilterOperatorType

        public init(key: AssociationExecutionFilterKey, value: String, type: AssociationFilterOperatorType) {
            self.key = key
            self.value = value
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case `type` = "Type"
        }
    }

    public enum LastResourceDataSyncStatus: String, CustomStringConvertible, Codable {
        case successful = "Successful"
        case failed = "Failed"
        case inprogress = "InProgress"
        public var description: String { return self.rawValue }
    }

    public struct ParametersFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The name of the filter.
        public let key: ParametersFilterKey
        /// The filter values.
        public let values: [String]

        public init(key: ParametersFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct DescribePatchBaselinesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of patch baselines to return (per page).
        public let maxResults: Int32?
        /// Each element in the array is a structure containing:  Key: (string, "NAME_PREFIX" or "OWNER") Value: (array of strings, exactly 1 entry, between 1 and 255 characters)
        public let filters: [PatchOrchestratorFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [PatchOrchestratorFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct DocumentVersionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "StatusInformation", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "IsDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "VersionName", required: false, type: .string)
        ]
        /// The document name.
        public let name: String?
        /// A message returned by AWS Systems Manager that explains the Status value. For example, a Failed status might be explained by the StatusInformation message, "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."
        public let statusInformation: String?
        /// The status of the Systems Manager document, such as Creating, Active, Failed, and Deleting.
        public let status: DocumentStatus?
        /// The date the document was created.
        public let createdDate: TimeStamp?
        /// The document format, either JSON or YAML.
        public let documentFormat: DocumentFormat?
        /// An identifier for the default version of the document.
        public let isDefaultVersion: Bool?
        /// The document version.
        public let documentVersion: String?
        /// The version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?

        public init(name: String? = nil, statusInformation: String? = nil, status: DocumentStatus? = nil, createdDate: TimeStamp? = nil, documentFormat: DocumentFormat? = nil, isDefaultVersion: Bool? = nil, documentVersion: String? = nil, versionName: String? = nil) {
            self.name = name
            self.statusInformation = statusInformation
            self.status = status
            self.createdDate = createdDate
            self.documentFormat = documentFormat
            self.isDefaultVersion = isDefaultVersion
            self.documentVersion = documentVersion
            self.versionName = versionName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case statusInformation = "StatusInformation"
            case status = "Status"
            case createdDate = "CreatedDate"
            case documentFormat = "DocumentFormat"
            case isDefaultVersion = "IsDefaultVersion"
            case documentVersion = "DocumentVersion"
            case versionName = "VersionName"
        }
    }

    public enum AttachmentsSourceKey: String, CustomStringConvertible, Codable {
        case sourceurl = "SourceUrl"
        public var description: String { return self.rawValue }
    }

    public struct StepExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Inputs", required: false, type: .map), 
            AWSShapeMember(label: "Action", required: false, type: .string), 
            AWSShapeMember(label: "Outputs", required: false, type: .map), 
            AWSShapeMember(label: "FailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "IsEnd", required: false, type: .boolean), 
            AWSShapeMember(label: "ValidNextSteps", required: false, type: .list), 
            AWSShapeMember(label: "MaxAttempts", required: false, type: .integer), 
            AWSShapeMember(label: "StepName", required: false, type: .string), 
            AWSShapeMember(label: "OnFailure", required: false, type: .string), 
            AWSShapeMember(label: "TargetLocation", required: false, type: .structure), 
            AWSShapeMember(label: "TimeoutSeconds", required: false, type: .long), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Response", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExecutionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OverriddenParameters", required: false, type: .map), 
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "IsCritical", required: false, type: .boolean), 
            AWSShapeMember(label: "StepExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StepStatus", required: false, type: .enum), 
            AWSShapeMember(label: "NextStep", required: false, type: .string), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .string)
        ]
        /// Fully-resolved values passed into the step before execution.
        public let inputs: [String: String]?
        /// The action this step performs. The action determines the behavior of the step.
        public let action: String?
        /// Returned values from the execution of the step.
        public let outputs: [String: [String]]?
        /// If a step failed, this message explains why the execution failed.
        public let failureMessage: String?
        /// The flag which can be used to end automation no matter whether the step succeeds or fails.
        public let isEnd: Bool?
        /// Strategies used when step fails, we support Continue and Abort. Abort will fail the automation when the step fails. Continue will ignore the failure of current step and allow automation to execute the next step. With conditional branching, we add step:stepName to support the automation to go to another specific step.
        public let validNextSteps: [String]?
        /// The maximum number of tries to run the action of the step. The default value is 1.
        public let maxAttempts: Int32?
        /// The name of this execution step.
        public let stepName: String?
        /// The action to take if the step fails. The default value is Abort.
        public let onFailure: String?
        /// The combination of AWS Regions and accounts targeted by the current Automation execution.
        public let targetLocation: TargetLocation?
        /// The timeout seconds of the step.
        public let timeoutSeconds: Int64?
        /// The targets for the step execution.
        public let targets: [Target]?
        /// A message associated with the response code for an execution.
        public let response: String?
        /// If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated.
        public let executionEndTime: TimeStamp?
        /// If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated.
        public let executionStartTime: TimeStamp?
        /// A user-specified list of parameters to override when executing a step.
        public let overriddenParameters: [String: [String]]?
        /// Information about the Automation failure.
        public let failureDetails: FailureDetails?
        /// The flag which can be used to help decide whether the failure of current step leads to the Automation failure.
        public let isCritical: Bool?
        /// The unique ID of a step execution.
        public let stepExecutionId: String?
        /// The execution status for this step. Valid values include: Pending, InProgress, Success, Cancelled, Failed, and TimedOut.
        public let stepStatus: AutomationExecutionStatus?
        /// The next step after the step succeeds.
        public let nextStep: String?
        /// The response code returned by the execution of the step.
        public let responseCode: String?

        public init(inputs: [String: String]? = nil, action: String? = nil, outputs: [String: [String]]? = nil, failureMessage: String? = nil, isEnd: Bool? = nil, validNextSteps: [String]? = nil, maxAttempts: Int32? = nil, stepName: String? = nil, onFailure: String? = nil, targetLocation: TargetLocation? = nil, timeoutSeconds: Int64? = nil, targets: [Target]? = nil, response: String? = nil, executionEndTime: TimeStamp? = nil, executionStartTime: TimeStamp? = nil, overriddenParameters: [String: [String]]? = nil, failureDetails: FailureDetails? = nil, isCritical: Bool? = nil, stepExecutionId: String? = nil, stepStatus: AutomationExecutionStatus? = nil, nextStep: String? = nil, responseCode: String? = nil) {
            self.inputs = inputs
            self.action = action
            self.outputs = outputs
            self.failureMessage = failureMessage
            self.isEnd = isEnd
            self.validNextSteps = validNextSteps
            self.maxAttempts = maxAttempts
            self.stepName = stepName
            self.onFailure = onFailure
            self.targetLocation = targetLocation
            self.timeoutSeconds = timeoutSeconds
            self.targets = targets
            self.response = response
            self.executionEndTime = executionEndTime
            self.executionStartTime = executionStartTime
            self.overriddenParameters = overriddenParameters
            self.failureDetails = failureDetails
            self.isCritical = isCritical
            self.stepExecutionId = stepExecutionId
            self.stepStatus = stepStatus
            self.nextStep = nextStep
            self.responseCode = responseCode
        }

        private enum CodingKeys: String, CodingKey {
            case inputs = "Inputs"
            case action = "Action"
            case outputs = "Outputs"
            case failureMessage = "FailureMessage"
            case isEnd = "IsEnd"
            case validNextSteps = "ValidNextSteps"
            case maxAttempts = "MaxAttempts"
            case stepName = "StepName"
            case onFailure = "OnFailure"
            case targetLocation = "TargetLocation"
            case timeoutSeconds = "TimeoutSeconds"
            case targets = "Targets"
            case response = "Response"
            case executionEndTime = "ExecutionEndTime"
            case executionStartTime = "ExecutionStartTime"
            case overriddenParameters = "OverriddenParameters"
            case failureDetails = "FailureDetails"
            case isCritical = "IsCritical"
            case stepExecutionId = "StepExecutionId"
            case stepStatus = "StepStatus"
            case nextStep = "NextStep"
            case responseCode = "ResponseCode"
        }
    }

    public struct MaintenanceWindowIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleTimezone", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "NextExecutionTime", required: false, type: .string), 
            AWSShapeMember(label: "EndDate", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format.
        public let scheduleTimezone: String?
        /// The date and time, in ISO-8601 Extended format, for when the Maintenance Window is scheduled to become active.
        public let startDate: String?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?
        /// The next time the Maintenance Window will actually run, taking into account any specified times for the Maintenance Window to become active or inactive.
        public let nextExecutionTime: String?
        /// The date and time, in ISO-8601 Extended format, for when the Maintenance Window is scheduled to become inactive.
        public let endDate: String?
        /// A description of the Maintenance Window.
        public let description: String?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// Whether the Maintenance Window is enabled.
        public let enabled: Bool?
        /// The ID of the Maintenance Window.
        public let windowId: String?
        /// The name of the Maintenance Window.
        public let name: String?

        public init(scheduleTimezone: String? = nil, startDate: String? = nil, schedule: String? = nil, duration: Int32? = nil, nextExecutionTime: String? = nil, endDate: String? = nil, description: String? = nil, cutoff: Int32? = nil, enabled: Bool? = nil, windowId: String? = nil, name: String? = nil) {
            self.scheduleTimezone = scheduleTimezone
            self.startDate = startDate
            self.schedule = schedule
            self.duration = duration
            self.nextExecutionTime = nextExecutionTime
            self.endDate = endDate
            self.description = description
            self.cutoff = cutoff
            self.enabled = enabled
            self.windowId = windowId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleTimezone = "ScheduleTimezone"
            case startDate = "StartDate"
            case schedule = "Schedule"
            case duration = "Duration"
            case nextExecutionTime = "NextExecutionTime"
            case endDate = "EndDate"
            case description = "Description"
            case cutoff = "Cutoff"
            case enabled = "Enabled"
            case windowId = "WindowId"
            case name = "Name"
        }
    }

    public struct ProgressCounters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessSteps", required: false, type: .integer), 
            AWSShapeMember(label: "TimedOutSteps", required: false, type: .integer), 
            AWSShapeMember(label: "CancelledSteps", required: false, type: .integer), 
            AWSShapeMember(label: "TotalSteps", required: false, type: .integer), 
            AWSShapeMember(label: "FailedSteps", required: false, type: .integer)
        ]
        /// The total number of steps that successfully completed in all specified AWS Regions and accounts for the current Automation execution.
        public let successSteps: Int32?
        /// The total number of steps that timed out in all specified AWS Regions and accounts for the current Automation execution.
        public let timedOutSteps: Int32?
        /// The total number of steps that the system cancelled in all specified AWS Regions and accounts for the current Automation execution.
        public let cancelledSteps: Int32?
        /// The total number of steps executed in all specified AWS Regions and accounts for the current Automation execution.
        public let totalSteps: Int32?
        /// The total number of steps that failed to execute in all specified AWS Regions and accounts for the current Automation execution.
        public let failedSteps: Int32?

        public init(successSteps: Int32? = nil, timedOutSteps: Int32? = nil, cancelledSteps: Int32? = nil, totalSteps: Int32? = nil, failedSteps: Int32? = nil) {
            self.successSteps = successSteps
            self.timedOutSteps = timedOutSteps
            self.cancelledSteps = cancelledSteps
            self.totalSteps = totalSteps
            self.failedSteps = failedSteps
        }

        private enum CodingKeys: String, CodingKey {
            case successSteps = "SuccessSteps"
            case timedOutSteps = "TimedOutSteps"
            case cancelledSteps = "CancelledSteps"
            case totalSteps = "TotalSteps"
            case failedSteps = "FailedSteps"
        }
    }

    public struct PutComplianceItemsResult: AWSShape {

    }

    public struct StartSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string)
        ]
        /// The instance to connect to for the session.
        public let target: String
        /// Reserved for future use.
        public let parameters: [String: [String]]?
        /// The name of the SSM document to define the parameters and plugin settings for the session. For example, SSM-SessionManagerRunShell. If no document name is provided, a shell to the instance is launched by default.
        public let documentName: String?

        public init(target: String, parameters: [String: [String]]? = nil, documentName: String? = nil) {
            self.target = target
            self.parameters = parameters
            self.documentName = documentName
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
            case parameters = "Parameters"
            case documentName = "DocumentName"
        }
    }

    public struct MaintenanceWindowAutomationParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map)
        ]
        /// The version of an Automation document to use during task execution.
        public let documentVersion: String?
        /// The parameters for the AUTOMATION task. For information about specifying and updating task parameters, see RegisterTaskWithMaintenanceWindow and UpdateMaintenanceWindowTask.   LoggingInfo has been deprecated. To specify an S3 bucket to contain logs, instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters.  TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. For AUTOMATION task types, Systems Manager ignores any values specified for these parameters. 
        public let parameters: [String: [String]]?

        public init(documentVersion: String? = nil, parameters: [String: [String]]? = nil) {
            self.documentVersion = documentVersion
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersion = "DocumentVersion"
            case parameters = "Parameters"
        }
    }

    public struct ResumeSessionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionId", required: false, type: .string), 
            AWSShapeMember(label: "TokenValue", required: false, type: .string), 
            AWSShapeMember(label: "StreamUrl", required: false, type: .string)
        ]
        /// The ID of the session.
        public let sessionId: String?
        /// An encrypted token value containing session and caller information. Used to authenticate the connection to the instance.
        public let tokenValue: String?
        /// A URL back to SSM Agent on the instance that the Session Manager client uses to send commands and receive output from the instance. Format: wss://ssm-messages.region.amazonaws.com/v1/data-channel/session-id?stream=(input|output).  region represents the Region identifier for an AWS Region supported by AWS Systems Manager, such as us-east-2 for the US East (Ohio) Region. For a list of supported region values, see the Region column in the AWS Systems Manager table of regions and endpoints in the AWS General Reference.  session-id represents the ID of a Session Manager session, such as 1a2b3c4dEXAMPLE.
        public let streamUrl: String?

        public init(sessionId: String? = nil, tokenValue: String? = nil, streamUrl: String? = nil) {
            self.sessionId = sessionId
            self.tokenValue = tokenValue
            self.streamUrl = streamUrl
        }

        private enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case tokenValue = "TokenValue"
            case streamUrl = "StreamUrl"
        }
    }

    public struct DescribeAssociationExecutionTargetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationExecutionTargets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the execution.
        public let associationExecutionTargets: [AssociationExecutionTarget]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(associationExecutionTargets: [AssociationExecutionTarget]? = nil, nextToken: String? = nil) {
            self.associationExecutionTargets = associationExecutionTargets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associationExecutionTargets = "AssociationExecutionTargets"
            case nextToken = "NextToken"
        }
    }

    public struct DeregisterTaskFromMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window the task was removed from.
        public let windowId: String?
        /// The ID of the task removed from the Maintenance Window.
        public let windowTaskId: String?

        public init(windowId: String? = nil, windowTaskId: String? = nil) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTaskId = "WindowTaskId"
        }
    }

    public enum CommandPluginStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case success = "Success"
        case timedout = "TimedOut"
        case cancelled = "Cancelled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case managedinstance = "ManagedInstance"
        case document = "Document"
        case ec2instance = "EC2Instance"
        public var description: String { return self.rawValue }
    }

    public struct GetMaintenanceWindowTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TaskType", required: false, type: .enum), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "TaskInvocationParameters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The retrieved Maintenance Window ID.
        public let windowId: String?
        /// The location in Amazon S3 where the task results are logged.   LoggingInfo has been deprecated. To specify an S3 bucket to contain logs, instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let loggingInfo: LoggingInfo?
        /// The parameters to pass to the task when it executes.   TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The retrieved Maintenance Window task ID.
        public let windowTaskId: String?
        /// The targets where the task should execute.
        public let targets: [Target]?
        /// The retrieved task description.
        public let description: String?
        /// The type of task to execute.
        public let taskType: MaintenanceWindowTaskType?
        /// The resource that the task used during execution. For RUN_COMMAND and AUTOMATION task types, the TaskArn is the Systems Manager Document name/ARN. For LAMBDA tasks, the value is the function name/ARN. For STEP_FUNCTION tasks, the value is the state machine ARN.
        public let taskArn: String?
        /// The priority of the task when it executes. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel.
        public let priority: Int32?
        /// The retrieved task name.
        public let name: String?
        /// The maximum number of targets allowed to run this task in parallel.
        public let maxConcurrency: String?
        /// The IAM service role to assume during task execution.
        public let serviceRoleArn: String?
        /// The parameters to pass to the task when it executes.
        public let taskInvocationParameters: MaintenanceWindowTaskInvocationParameters?
        /// The maximum number of errors allowed before the task stops being scheduled.
        public let maxErrors: String?

        public init(windowId: String? = nil, loggingInfo: LoggingInfo? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String? = nil, targets: [Target]? = nil, description: String? = nil, taskType: MaintenanceWindowTaskType? = nil, taskArn: String? = nil, priority: Int32? = nil, name: String? = nil, maxConcurrency: String? = nil, serviceRoleArn: String? = nil, taskInvocationParameters: MaintenanceWindowTaskInvocationParameters? = nil, maxErrors: String? = nil) {
            self.windowId = windowId
            self.loggingInfo = loggingInfo
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.description = description
            self.taskType = taskType
            self.taskArn = taskArn
            self.priority = priority
            self.name = name
            self.maxConcurrency = maxConcurrency
            self.serviceRoleArn = serviceRoleArn
            self.taskInvocationParameters = taskInvocationParameters
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case loggingInfo = "LoggingInfo"
            case taskParameters = "TaskParameters"
            case windowTaskId = "WindowTaskId"
            case targets = "Targets"
            case description = "Description"
            case taskType = "TaskType"
            case taskArn = "TaskArn"
            case priority = "Priority"
            case name = "Name"
            case maxConcurrency = "MaxConcurrency"
            case serviceRoleArn = "ServiceRoleArn"
            case taskInvocationParameters = "TaskInvocationParameters"
            case maxErrors = "MaxErrors"
        }
    }

    public struct SendCommandRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DocumentName", required: true, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchOutputConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DocumentHashType", required: false, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "TimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "DocumentHash", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The directory structure within the S3 bucket where the responses should be stored.
        public let outputS3KeyPrefix: String?
        /// Configurations for sending notifications.
        public let notificationConfig: NotificationConfig?
        /// Required. The name of the Systems Manager document to execute. This can be a public document or a custom document.
        public let documentName: String
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?
        /// Enables Systems Manager to send Run Command output to Amazon CloudWatch Logs. 
        public let cloudWatchOutputConfig: CloudWatchOutputConfig?
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        public let documentHashType: DocumentHashType?
        /// The required and optional parameters specified in the document being executed.
        public let parameters: [String: [String]]?
        /// If this time is reached and the command has not already started executing, it will not run.
        public let timeoutSeconds: Int32?
        /// (Optional) An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call. For more information about how to use targets, see Sending Commands to a Fleet in the AWS Systems Manager User Guide.
        public let targets: [Target]?
        /// The instance IDs where the command should execute. You can specify a maximum of 50 IDs. If you prefer not to list individual instance IDs, you can instead send commands to a fleet of instances using the Targets parameter, which accepts EC2 tags. For more information about how to use targets, see Sending Commands to a Fleet in the AWS Systems Manager User Guide.
        public let instanceIds: [String]?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public let comment: String?
        /// The SSM document version to use in the request. You can specify $DEFAULT, $LATEST, or a specific version number. If you execute commands by using the AWS CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example: --document-version "\$DEFAULT" --document-version "\$LATEST" --document-version "3"
        public let documentVersion: String?
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        public let documentHash: String?
        /// The name of the S3 bucket where command execution responses should be stored.
        public let outputS3BucketName: String?
        /// The IAM role that Systems Manager uses to send notifications. 
        public let serviceRoleArn: String?
        /// (Optional) The maximum number of instances that are allowed to execute the command at the same time. You can specify a number such as 10 or a percentage such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see Using Concurrency Controls in the AWS Systems Manager User Guide.
        public let maxConcurrency: String?
        /// The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like 10 or a percentage like 10%. The default value is 0. For more information about how to use MaxErrors, see Using Error Controls in the AWS Systems Manager User Guide.
        public let maxErrors: String?

        public init(outputS3KeyPrefix: String? = nil, notificationConfig: NotificationConfig? = nil, documentName: String, outputS3Region: String? = nil, cloudWatchOutputConfig: CloudWatchOutputConfig? = nil, documentHashType: DocumentHashType? = nil, parameters: [String: [String]]? = nil, timeoutSeconds: Int32? = nil, targets: [Target]? = nil, instanceIds: [String]? = nil, comment: String? = nil, documentVersion: String? = nil, documentHash: String? = nil, outputS3BucketName: String? = nil, serviceRoleArn: String? = nil, maxConcurrency: String? = nil, maxErrors: String? = nil) {
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.notificationConfig = notificationConfig
            self.documentName = documentName
            self.outputS3Region = outputS3Region
            self.cloudWatchOutputConfig = cloudWatchOutputConfig
            self.documentHashType = documentHashType
            self.parameters = parameters
            self.timeoutSeconds = timeoutSeconds
            self.targets = targets
            self.instanceIds = instanceIds
            self.comment = comment
            self.documentVersion = documentVersion
            self.documentHash = documentHash
            self.outputS3BucketName = outputS3BucketName
            self.serviceRoleArn = serviceRoleArn
            self.maxConcurrency = maxConcurrency
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case notificationConfig = "NotificationConfig"
            case documentName = "DocumentName"
            case outputS3Region = "OutputS3Region"
            case cloudWatchOutputConfig = "CloudWatchOutputConfig"
            case documentHashType = "DocumentHashType"
            case parameters = "Parameters"
            case timeoutSeconds = "TimeoutSeconds"
            case targets = "Targets"
            case instanceIds = "InstanceIds"
            case comment = "Comment"
            case documentVersion = "DocumentVersion"
            case documentHash = "DocumentHash"
            case outputS3BucketName = "OutputS3BucketName"
            case serviceRoleArn = "ServiceRoleArn"
            case maxConcurrency = "MaxConcurrency"
            case maxErrors = "MaxErrors"
        }
    }

    public struct PatchFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The key for the filter. See PatchFilter for lists of valid keys for each operating system type.
        public let key: PatchFilterKey
        /// The value for the filter key. See PatchFilter for lists of valid values for each key based on operating system type.
        public let values: [String]

        public init(key: PatchFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public enum DocumentType: String, CustomStringConvertible, Codable {
        case command = "Command"
        case policy = "Policy"
        case automation = "Automation"
        case session = "Session"
        case package = "Package"
        public var description: String { return self.rawValue }
    }

    public struct MaintenanceWindowTaskParameterValueExpression: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// This field contains an array of 0 or more strings, each 1 to 255 characters in length.
        public let values: [String]?

        public init(values: [String]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public struct AssociationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: AssociationFilterKey
        /// The filter value.
        public let value: String

        public init(key: AssociationFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct GetParametersByPathResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of parameters found in the specified hierarchy.
        public let parameters: [Parameter]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(parameters: [Parameter]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct CommandInvocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "CommandPlugins", required: false, type: .list), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchOutputConfig", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StandardOutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "TraceOutput", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "RequestedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StandardErrorUrl", required: false, type: .string)
        ]
        /// The command against which this invocation was requested.
        public let commandId: String?
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis.
        public let serviceRole: String?
        public let commandPlugins: [CommandPlugin]?
        /// Configurations for sending notifications about command status changes on a per instance basis.
        public let notificationConfig: NotificationConfig?
        /// A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Understanding Command Statuses in the AWS Systems Manager User Guide. StatusDetails can be one of the following values:   Pending: The command has not been sent to the instance.   In Progress: The command has been sent to the instance but has not reached a terminal state.   Success: The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public let statusDetails: String?
        /// The document name that was requested for execution.
        public let documentName: String?
        /// The instance ID in which this invocation was requested.
        public let instanceId: String?
        /// CloudWatch Logs information where you want Systems Manager to send the command output.
        public let cloudWatchOutputConfig: CloudWatchOutputConfig?
        /// The name of the invocation target. For Amazon EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance.
        public let instanceName: String?
        /// Whether or not the invocation succeeded, failed, or is pending.
        public let status: CommandInvocationStatus?
        /// The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        public let standardOutputUrl: String?
        ///  Gets the trace output sent by the agent. 
        public let traceOutput: String?
        /// The SSM document version.
        public let documentVersion: String?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public let comment: String?
        /// The time and date the request was sent to this instance.
        public let requestedDateTime: TimeStamp?
        /// The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        public let standardErrorUrl: String?

        public init(commandId: String? = nil, serviceRole: String? = nil, commandPlugins: [CommandPlugin]? = nil, notificationConfig: NotificationConfig? = nil, statusDetails: String? = nil, documentName: String? = nil, instanceId: String? = nil, cloudWatchOutputConfig: CloudWatchOutputConfig? = nil, instanceName: String? = nil, status: CommandInvocationStatus? = nil, standardOutputUrl: String? = nil, traceOutput: String? = nil, documentVersion: String? = nil, comment: String? = nil, requestedDateTime: TimeStamp? = nil, standardErrorUrl: String? = nil) {
            self.commandId = commandId
            self.serviceRole = serviceRole
            self.commandPlugins = commandPlugins
            self.notificationConfig = notificationConfig
            self.statusDetails = statusDetails
            self.documentName = documentName
            self.instanceId = instanceId
            self.cloudWatchOutputConfig = cloudWatchOutputConfig
            self.instanceName = instanceName
            self.status = status
            self.standardOutputUrl = standardOutputUrl
            self.traceOutput = traceOutput
            self.documentVersion = documentVersion
            self.comment = comment
            self.requestedDateTime = requestedDateTime
            self.standardErrorUrl = standardErrorUrl
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case serviceRole = "ServiceRole"
            case commandPlugins = "CommandPlugins"
            case notificationConfig = "NotificationConfig"
            case statusDetails = "StatusDetails"
            case documentName = "DocumentName"
            case instanceId = "InstanceId"
            case cloudWatchOutputConfig = "CloudWatchOutputConfig"
            case instanceName = "InstanceName"
            case status = "Status"
            case standardOutputUrl = "StandardOutputUrl"
            case traceOutput = "TraceOutput"
            case documentVersion = "DocumentVersion"
            case comment = "Comment"
            case requestedDateTime = "RequestedDateTime"
            case standardErrorUrl = "StandardErrorUrl"
        }
    }

    public struct DeregisterPatchBaselineForPatchGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: true, type: .string), 
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The name of the patch group that should be deregistered from the patch baseline.
        public let patchGroup: String
        /// The ID of the patch baseline to deregister the patch group from.
        public let baselineId: String

        public init(patchGroup: String, baselineId: String) {
            self.patchGroup = patchGroup
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case baselineId = "BaselineId"
        }
    }

    public struct StartAutomationExecutionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionId", required: false, type: .string)
        ]
        /// The unique ID of a newly scheduled automation execution.
        public let automationExecutionId: String?

        public init(automationExecutionId: String? = nil) {
            self.automationExecutionId = automationExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionId = "AutomationExecutionId"
        }
    }

    public struct InventoryResultEntity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map)
        ]
        /// ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID. 
        public let id: String?
        /// The data section in the inventory result entity JSON.
        public let data: [String: InventoryResultItem]?

        public init(id: String? = nil, data: [String: InventoryResultItem]? = nil) {
            self.id = id
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case data = "Data"
        }
    }

    public struct GetInventorySchemaResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schemas", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Inventory schemas returned by the request.
        public let schemas: [InventoryItemSchema]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(schemas: [InventoryItemSchema]? = nil, nextToken: String? = nil) {
            self.schemas = schemas
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemas = "Schemas"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetType", required: false, type: .string), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Attachments", required: false, type: .list), 
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "VersionName", required: false, type: .string)
        ]
        /// Specify a target type to define the kinds of resources the document can run on. For example, to run a document on EC2 instances, specify the following value: /AWS::EC2::Instance. If you specify a value of '/' the document can run on all types of resources. If you don't specify a value, the document can't run on any resources. For a list of valid resource types, see AWS Resource Types Reference in the AWS CloudFormation User Guide. 
        public let targetType: String?
        /// The type of document to create. Valid document types include: Command, Policy, Automation, Session, and Package.
        public let documentType: DocumentType?
        /// A valid JSON or YAML string.
        public let content: String
        /// A list of key and value pairs that describe attachments to a version of a document.
        public let attachments: [AttachmentsSource]?
        /// Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
        public let documentFormat: DocumentFormat?
        /// A name for the Systems Manager document.  Do not use the following to begin the names of documents you create. They are reserved by AWS for use as document prefixes:    aws     amazon     amzn    
        public let name: String
        /// An optional field specifying the version of the artifact you are creating with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?

        public init(targetType: String? = nil, documentType: DocumentType? = nil, content: String, attachments: [AttachmentsSource]? = nil, documentFormat: DocumentFormat? = nil, name: String, versionName: String? = nil) {
            self.targetType = targetType
            self.documentType = documentType
            self.content = content
            self.attachments = attachments
            self.documentFormat = documentFormat
            self.name = name
            self.versionName = versionName
        }

        private enum CodingKeys: String, CodingKey {
            case targetType = "TargetType"
            case documentType = "DocumentType"
            case content = "Content"
            case attachments = "Attachments"
            case documentFormat = "DocumentFormat"
            case name = "Name"
            case versionName = "VersionName"
        }
    }

    public struct ParameterHistory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .long), 
            AWSShapeMember(label: "Labels", required: false, type: .list), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "AllowedPattern", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedUser", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The name of the parameter.
        public let name: String?
        /// The parameter version.
        public let version: Int64?
        /// Labels assigned to the parameter version.
        public let labels: [String]?
        /// The parameter value.
        public let value: String?
        /// Information about the parameter.
        public let description: String?
        /// The ID of the query key used for this parameter.
        public let keyId: String?
        /// Parameter names can include the following letters and symbols. a-zA-Z0-9_.-
        public let allowedPattern: String?
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        public let lastModifiedUser: String?
        /// Date the parameter was last changed or updated.
        public let lastModifiedDate: TimeStamp?
        /// The type of parameter used.
        public let `type`: ParameterType?

        public init(name: String? = nil, version: Int64? = nil, labels: [String]? = nil, value: String? = nil, description: String? = nil, keyId: String? = nil, allowedPattern: String? = nil, lastModifiedUser: String? = nil, lastModifiedDate: TimeStamp? = nil, type: ParameterType? = nil) {
            self.name = name
            self.version = version
            self.labels = labels
            self.value = value
            self.description = description
            self.keyId = keyId
            self.allowedPattern = allowedPattern
            self.lastModifiedUser = lastModifiedUser
            self.lastModifiedDate = lastModifiedDate
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
            case labels = "Labels"
            case value = "Value"
            case description = "Description"
            case keyId = "KeyId"
            case allowedPattern = "AllowedPattern"
            case lastModifiedUser = "LastModifiedUser"
            case lastModifiedDate = "LastModifiedDate"
            case `type` = "Type"
        }
    }

    public struct ListComplianceItemsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceTypes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceIds", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The type of resource from which to get compliance information. Currently, the only supported resource type is ManagedInstance.
        public let resourceTypes: [String]?
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID.
        public let resourceIds: [String]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more compliance filters. Use a filter to return a more specific list of results.
        public let filters: [ComplianceStringFilter]?

        public init(resourceTypes: [String]? = nil, nextToken: String? = nil, resourceIds: [String]? = nil, maxResults: Int32? = nil, filters: [ComplianceStringFilter]? = nil) {
            self.resourceTypes = resourceTypes
            self.nextToken = nextToken
            self.resourceIds = resourceIds
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case resourceTypes = "ResourceTypes"
            case nextToken = "NextToken"
            case resourceIds = "ResourceIds"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct DescribeDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionName", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?
        /// The document version for which you want information. Can be a specific version or the default version.
        public let documentVersion: String?
        /// The name of the Systems Manager document.
        public let name: String

        public init(versionName: String? = nil, documentVersion: String? = nil, name: String) {
            self.versionName = versionName
            self.documentVersion = documentVersion
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case documentVersion = "DocumentVersion"
            case name = "Name"
        }
    }

    public struct InventoryItemSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "TypeName", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        /// The schema version for the inventory item.
        public let version: String?
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        public let typeName: String
        /// The schema attributes for inventory. This contains data type and attribute name.
        public let attributes: [InventoryItemAttribute]
        /// The alias name of the inventory type. The alias name is used for display purposes.
        public let displayName: String?

        public init(version: String? = nil, typeName: String, attributes: [InventoryItemAttribute], displayName: String? = nil) {
            self.version = version
            self.typeName = typeName
            self.attributes = attributes
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case typeName = "TypeName"
            case attributes = "Attributes"
            case displayName = "DisplayName"
        }
    }

    public enum MaintenanceWindowTaskType: String, CustomStringConvertible, Codable {
        case runCommand = "RUN_COMMAND"
        case automation = "AUTOMATION"
        case stepFunctions = "STEP_FUNCTIONS"
        case lambda = "LAMBDA"
        public var description: String { return self.rawValue }
    }

    public struct SendCommandResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Command", required: false, type: .structure)
        ]
        /// The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.
        public let command: Command?

        public init(command: Command? = nil) {
            self.command = command
        }

        private enum CodingKeys: String, CodingKey {
            case command = "Command"
        }
    }

    public struct StartSessionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionId", required: false, type: .string), 
            AWSShapeMember(label: "TokenValue", required: false, type: .string), 
            AWSShapeMember(label: "StreamUrl", required: false, type: .string)
        ]
        /// The ID of the session.
        public let sessionId: String?
        /// An encrypted token value containing session and caller information. Used to authenticate the connection to the instance.
        public let tokenValue: String?
        /// A URL back to SSM Agent on the instance that the Session Manager client uses to send commands and receive output from the instance. Format: wss://ssm-messages.region.amazonaws.com/v1/data-channel/session-id?stream=(input|output)   region represents the Region identifier for an AWS Region supported by AWS Systems Manager, such as us-east-2 for the US East (Ohio) Region. For a list of supported region values, see the Region column in the AWS Systems Manager table of regions and endpoints in the AWS General Reference.  session-id represents the ID of a Session Manager session, such as 1a2b3c4dEXAMPLE.
        public let streamUrl: String?

        public init(sessionId: String? = nil, tokenValue: String? = nil, streamUrl: String? = nil) {
            self.sessionId = sessionId
            self.tokenValue = tokenValue
            self.streamUrl = streamUrl
        }

        private enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case tokenValue = "TokenValue"
            case streamUrl = "StreamUrl"
        }
    }

    public struct DescribeActivationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// A filter to view information about your activations.
        public let filters: [DescribeActivationsFilter]?
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [DescribeActivationsFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public enum DescribeActivationsFilterKeys: String, CustomStringConvertible, Codable {
        case activationids = "ActivationIds"
        case defaultinstancename = "DefaultInstanceName"
        case iamrole = "IamRole"
        public var description: String { return self.rawValue }
    }

    public struct RegisterTargetWithMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// User-provided idempotency token.
        public let clientToken: String?
        /// An optional description for the target.
        public let description: String?
        /// The targets (either instances or tags).  Specify instances using the following format:  Key=InstanceIds,Values=&lt;instance-id-1&gt;,&lt;instance-id-2&gt;  Specify tags using either of the following formats:  Key=tag:&lt;tag-key&gt;,Values=&lt;tag-value-1&gt;,&lt;tag-value-2&gt;   Key=tag-key,Values=&lt;tag-key-1&gt;,&lt;tag-key-2&gt; 
        public let targets: [Target]
        /// The ID of the Maintenance Window the target should be registered with.
        public let windowId: String
        /// An optional name for the target.
        public let name: String?
        /// The type of target being registered with the Maintenance Window.
        public let resourceType: MaintenanceWindowResourceType
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public let ownerInformation: String?

        public init(clientToken: String? = nil, description: String? = nil, targets: [Target], windowId: String, name: String? = nil, resourceType: MaintenanceWindowResourceType, ownerInformation: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.targets = targets
            self.windowId = windowId
            self.name = name
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case targets = "Targets"
            case windowId = "WindowId"
            case name = "Name"
            case resourceType = "ResourceType"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct EffectivePatch: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Patch", required: false, type: .structure), 
            AWSShapeMember(label: "PatchStatus", required: false, type: .structure)
        ]
        /// Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch.
        public let patch: Patch?
        /// The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.
        public let patchStatus: PatchStatus?

        public init(patch: Patch? = nil, patchStatus: PatchStatus? = nil) {
            self.patch = patch
            self.patchStatus = patchStatus
        }

        private enum CodingKeys: String, CodingKey {
            case patch = "Patch"
            case patchStatus = "PatchStatus"
        }
    }

    public struct PutInventoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .list), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The inventory items that you want to add or update on instances.
        public let items: [InventoryItem]
        /// One or more instance IDs where you want to add or update inventory items.
        public let instanceId: String

        public init(items: [InventoryItem], instanceId: String) {
            self.items = items
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case instanceId = "InstanceId"
        }
    }

    public struct DescribeInstancePatchesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the instance whose patch state information should be retrieved.
        public let instanceId: String
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?
        /// Each entry in the array is a structure containing: Key (string, between 1 and 128 characters) Values (array of strings, each string between 1 and 256 characters)
        public let filters: [PatchOrchestratorFilter]?

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil, filters: [PatchOrchestratorFilter]? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct S3OutputUrl: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputUrl", required: false, type: .string)
        ]
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        public let outputUrl: String?

        public init(outputUrl: String? = nil) {
            self.outputUrl = outputUrl
        }

        private enum CodingKeys: String, CodingKey {
            case outputUrl = "OutputUrl"
        }
    }

    public struct DescribeAssociationExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The association ID for which you want to view execution history details.
        public let associationId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Filters for the request. You can specify the following filters and values. ExecutionId (EQUAL) Status (EQUAL) CreatedTime (EQUAL, GREATER_THAN, LESS_THAN)
        public let filters: [AssociationExecutionFilter]?

        public init(nextToken: String? = nil, associationId: String, maxResults: Int32? = nil, filters: [AssociationExecutionFilter]? = nil) {
            self.nextToken = nextToken
            self.associationId = associationId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case associationId = "AssociationId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct CreatePatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the created patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct ListComplianceItemsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComplianceItems", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of compliance information for the specified resource ID. 
        public let complianceItems: [ComplianceItem]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(complianceItems: [ComplianceItem]? = nil, nextToken: String? = nil) {
            self.complianceItems = complianceItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case complianceItems = "ComplianceItems"
            case nextToken = "NextToken"
        }
    }

    public struct ListCommandInvocationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandInvocations", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// (Optional) A list of all invocations. 
        public let commandInvocations: [CommandInvocation]?
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(commandInvocations: [CommandInvocation]? = nil, nextToken: String? = nil) {
            self.commandInvocations = commandInvocations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case commandInvocations = "CommandInvocations"
            case nextToken = "NextToken"
        }
    }

    public enum SessionFilterKey: String, CustomStringConvertible, Codable {
        case invokedafter = "InvokedAfter"
        case invokedbefore = "InvokedBefore"
        case target = "Target"
        case owner = "Owner"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public struct DocumentKeyValuesFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The name of the filter key.
        public let key: String?
        /// The value for the filter key.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct DescribeAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string)
        ]
        /// The instance ID.
        public let instanceId: String?
        /// The name of the Systems Manager document.
        public let name: String?
        /// The association ID for which you want information.
        public let associationId: String?
        /// Specify the association version to retrieve. To view the latest version, either specify $LATEST for this parameter, or omit this parameter. To view a list of all associations for an instance, use ListInstanceAssociations. To get a list of versions for a specific association, use ListAssociationVersions. 
        public let associationVersion: String?

        public init(instanceId: String? = nil, name: String? = nil, associationId: String? = nil, associationVersion: String? = nil) {
            self.instanceId = instanceId
            self.name = name
            self.associationId = associationId
            self.associationVersion = associationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case name = "Name"
            case associationId = "AssociationId"
            case associationVersion = "AssociationVersion"
        }
    }

    public struct TargetLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Accounts", required: false, type: .list), 
            AWSShapeMember(label: "TargetLocationMaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "Regions", required: false, type: .list), 
            AWSShapeMember(label: "ExecutionRoleName", required: false, type: .string), 
            AWSShapeMember(label: "TargetLocationMaxConcurrency", required: false, type: .string)
        ]
        /// The AWS accounts targeted by the current Automation execution.
        public let accounts: [String]?
        /// The maxium number of errors allowed before the system stops queueing additional Automation executions for the currently executing Automation. 
        public let targetLocationMaxErrors: String?
        /// The AWS Regions targeted by the current Automation execution.
        public let regions: [String]?
        /// The Automation execution role used by the currently executing Automation.
        public let executionRoleName: String?
        /// The maxium number of AWS accounts and AWS regions allowed to run the Automation concurrently 
        public let targetLocationMaxConcurrency: String?

        public init(accounts: [String]? = nil, targetLocationMaxErrors: String? = nil, regions: [String]? = nil, executionRoleName: String? = nil, targetLocationMaxConcurrency: String? = nil) {
            self.accounts = accounts
            self.targetLocationMaxErrors = targetLocationMaxErrors
            self.regions = regions
            self.executionRoleName = executionRoleName
            self.targetLocationMaxConcurrency = targetLocationMaxConcurrency
        }

        private enum CodingKeys: String, CodingKey {
            case accounts = "Accounts"
            case targetLocationMaxErrors = "TargetLocationMaxErrors"
            case regions = "Regions"
            case executionRoleName = "ExecutionRoleName"
            case targetLocationMaxConcurrency = "TargetLocationMaxConcurrency"
        }
    }

    public struct DescribeMaintenanceWindowsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Optional filters used to narrow down the scope of the returned Maintenance Windows. Supported filter keys are Name and Enabled.
        public let filters: [MaintenanceWindowFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct AssociationVersionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "ComplianceSeverity", required: false, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The association version.
        public let associationVersion: String?
        /// The date the association version was created.
        public let createdDate: TimeStamp?
        /// The name specified for the association version when the association version was created.
        public let associationName: String?
        /// The severity level that is assigned to the association.
        public let complianceSeverity: AssociationComplianceSeverity?
        /// Parameters specified when the association version was created.
        public let parameters: [String: [String]]?
        /// The ID created by the system when the association was created.
        public let associationId: String?
        /// The targets specified for the association when the association version was created. 
        public let targets: [Target]?
        /// The version of a Systems Manager document used when the association version was created.
        public let documentVersion: String?
        /// The name specified when the association was created.
        public let name: String?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new instance starts and attempts to execute an association while Systems Manager is executing MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.
        public let maxConcurrency: String?
        /// The location in Amazon S3 specified for the association when the association version was created.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// The cron or rate schedule specified for the association when the association version was created.
        public let scheduleExpression: String?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public let maxErrors: String?

        public init(associationVersion: String? = nil, createdDate: TimeStamp? = nil, associationName: String? = nil, complianceSeverity: AssociationComplianceSeverity? = nil, parameters: [String: [String]]? = nil, associationId: String? = nil, targets: [Target]? = nil, documentVersion: String? = nil, name: String? = nil, maxConcurrency: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil, maxErrors: String? = nil) {
            self.associationVersion = associationVersion
            self.createdDate = createdDate
            self.associationName = associationName
            self.complianceSeverity = complianceSeverity
            self.parameters = parameters
            self.associationId = associationId
            self.targets = targets
            self.documentVersion = documentVersion
            self.name = name
            self.maxConcurrency = maxConcurrency
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case associationVersion = "AssociationVersion"
            case createdDate = "CreatedDate"
            case associationName = "AssociationName"
            case complianceSeverity = "ComplianceSeverity"
            case parameters = "Parameters"
            case associationId = "AssociationId"
            case targets = "Targets"
            case documentVersion = "DocumentVersion"
            case name = "Name"
            case maxConcurrency = "MaxConcurrency"
            case outputLocation = "OutputLocation"
            case scheduleExpression = "ScheduleExpression"
            case maxErrors = "MaxErrors"
        }
    }

    public struct DeregisterTargetFromMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window the target was removed from.
        public let windowId: String?
        /// The ID of the removed target definition.
        public let windowTargetId: String?

        public init(windowId: String? = nil, windowTargetId: String? = nil) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTargetId = "WindowTargetId"
        }
    }

    public struct MaintenanceWindowTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The Maintenance Window ID where the task is registered.
        public let windowId: String?
        /// Information about an Amazon S3 bucket to write task-level logs to.   LoggingInfo has been deprecated. To specify an S3 bucket to contain logs, instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let loggingInfo: LoggingInfo?
        /// The parameters that should be passed to the task when it is executed.   TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The task ID.
        public let windowTaskId: String?
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public let targets: [Target]?
        /// A description of the task.
        public let description: String?
        /// The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA, or STEP_FUNCTION.
        public let `type`: MaintenanceWindowTaskType?
        /// The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task types, TaskArn is the Systems Manager document name or ARN. For LAMBDA tasks, it's the function name or ARN. For STEP_FUNCTION tasks, it's the state machine ARN.
        public let taskArn: String?
        /// The priority of the task in the Maintenance Window. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel.
        public let priority: Int32?
        /// The task name.
        public let name: String?
        /// The maximum number of targets this task can be run for in parallel.
        public let maxConcurrency: String?
        /// The role that should be assumed when executing the task
        public let serviceRoleArn: String?
        /// The maximum number of errors allowed before this task stops being scheduled.
        public let maxErrors: String?

        public init(windowId: String? = nil, loggingInfo: LoggingInfo? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String? = nil, targets: [Target]? = nil, description: String? = nil, type: MaintenanceWindowTaskType? = nil, taskArn: String? = nil, priority: Int32? = nil, name: String? = nil, maxConcurrency: String? = nil, serviceRoleArn: String? = nil, maxErrors: String? = nil) {
            self.windowId = windowId
            self.loggingInfo = loggingInfo
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.description = description
            self.`type` = `type`
            self.taskArn = taskArn
            self.priority = priority
            self.name = name
            self.maxConcurrency = maxConcurrency
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case loggingInfo = "LoggingInfo"
            case taskParameters = "TaskParameters"
            case windowTaskId = "WindowTaskId"
            case targets = "Targets"
            case description = "Description"
            case `type` = "Type"
            case taskArn = "TaskArn"
            case priority = "Priority"
            case name = "Name"
            case maxConcurrency = "MaxConcurrency"
            case serviceRoleArn = "ServiceRoleArn"
            case maxErrors = "MaxErrors"
        }
    }

    public struct DocumentDefaultVersionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultVersionName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", required: false, type: .string)
        ]
        /// The default version of the artifact associated with the document.
        public let defaultVersionName: String?
        /// The name of the document.
        public let name: String?
        /// The default version of the document.
        public let defaultVersion: String?

        public init(defaultVersionName: String? = nil, name: String? = nil, defaultVersion: String? = nil) {
            self.defaultVersionName = defaultVersionName
            self.name = name
            self.defaultVersion = defaultVersion
        }

        private enum CodingKeys: String, CodingKey {
            case defaultVersionName = "DefaultVersionName"
            case name = "Name"
            case defaultVersion = "DefaultVersion"
        }
    }

    public enum AssociationFilterOperatorType: String, CustomStringConvertible, Codable {
        case equal = "EQUAL"
        case lessThan = "LESS_THAN"
        case greaterThan = "GREATER_THAN"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInstancePatchStatesForPatchGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancePatchStates", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The high-level patch state for the requested instances. 
        public let instancePatchStates: [InstancePatchState]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(instancePatchStates: [InstancePatchState]? = nil, nextToken: String? = nil) {
            self.instancePatchStates = instancePatchStates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instancePatchStates = "InstancePatchStates"
            case nextToken = "NextToken"
        }
    }

    public enum ComplianceQueryOperatorType: String, CustomStringConvertible, Codable {
        case equal = "EQUAL"
        case notEqual = "NOT_EQUAL"
        case beginWith = "BEGIN_WITH"
        case lessThan = "LESS_THAN"
        case greaterThan = "GREATER_THAN"
        public var description: String { return self.rawValue }
    }

    public struct CancelMaintenanceWindowExecutionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window execution that has been stopped.
        public let windowExecutionId: String?

        public init(windowExecutionId: String? = nil) {
            self.windowExecutionId = windowExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
        }
    }

    public struct PutComplianceItemsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComplianceType", required: true, type: .string), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ExecutionSummary", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceType", required: true, type: .string), 
            AWSShapeMember(label: "ItemContentHash", required: false, type: .string), 
            AWSShapeMember(label: "Items", required: true, type: .list)
        ]
        /// Specify the compliance type. For example, specify Association (for a State Manager association), Patch, or Custom:string.
        public let complianceType: String
        /// Specify an ID for this resource. For a managed instance, this is the instance ID.
        public let resourceId: String
        /// A summary of the call execution that includes an execution ID, the type of execution (for example, Command), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
        public let executionSummary: ComplianceExecutionSummary
        /// Specify the type of resource. ManagedInstance is currently the only supported resource type.
        public let resourceType: String
        /// MD5 or SHA-256 content hash. The content hash is used to determine if existing information should be overwritten or ignored. If the content hashes match, the request to put compliance information is ignored.
        public let itemContentHash: String?
        /// Information about the compliance as defined by the resource type. For example, for a patch compliance type, Items includes information about the PatchSeverity, Classification, etc.
        public let items: [ComplianceItemEntry]

        public init(complianceType: String, resourceId: String, executionSummary: ComplianceExecutionSummary, resourceType: String, itemContentHash: String? = nil, items: [ComplianceItemEntry]) {
            self.complianceType = complianceType
            self.resourceId = resourceId
            self.executionSummary = executionSummary
            self.resourceType = resourceType
            self.itemContentHash = itemContentHash
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case complianceType = "ComplianceType"
            case resourceId = "ResourceId"
            case executionSummary = "ExecutionSummary"
            case resourceType = "ResourceType"
            case itemContentHash = "ItemContentHash"
            case items = "Items"
        }
    }

    public struct MaintenanceWindowIdentityForTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window.
        public let windowId: String?
        /// The name of the Maintenance Window.
        public let name: String?

        public init(windowId: String? = nil, name: String? = nil) {
            self.windowId = windowId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case name = "Name"
        }
    }

    public enum DocumentFormat: String, CustomStringConvertible, Codable {
        case yaml = "YAML"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct ListResourceComplianceSummariesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceComplianceSummaryItems", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A summary count for specified or targeted managed instances. Summary count includes information about compliant and non-compliant State Manager associations, patch status, or custom items according to the filter criteria that you specify. 
        public let resourceComplianceSummaryItems: [ResourceComplianceSummaryItem]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(resourceComplianceSummaryItems: [ResourceComplianceSummaryItem]? = nil, nextToken: String? = nil) {
            self.resourceComplianceSummaryItems = resourceComplianceSummaryItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceComplianceSummaryItems = "ResourceComplianceSummaryItems"
            case nextToken = "NextToken"
        }
    }

    public enum OperatingSystem: String, CustomStringConvertible, Codable {
        case windows = "WINDOWS"
        case amazonLinux = "AMAZON_LINUX"
        case amazonLinux2 = "AMAZON_LINUX_2"
        case ubuntu = "UBUNTU"
        case redhatEnterpriseLinux = "REDHAT_ENTERPRISE_LINUX"
        case suse = "SUSE"
        case centos = "CENTOS"
        public var description: String { return self.rawValue }
    }

    public class InventoryAggregator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expression", required: false, type: .string), 
            AWSShapeMember(label: "Aggregators", required: false, type: .list), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// The inventory type and attribute name for aggregation.
        public let expression: String?
        /// Nested aggregators to further refine aggregation for an inventory type.
        public let aggregators: [InventoryAggregator]?
        /// A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.
        public let groups: [InventoryGroup]?

        public init(expression: String? = nil, aggregators: [InventoryAggregator]? = nil, groups: [InventoryGroup]? = nil) {
            self.expression = expression
            self.aggregators = aggregators
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "Expression"
            case aggregators = "Aggregators"
            case groups = "Groups"
        }
    }

    public enum ParameterType: String, CustomStringConvertible, Codable {
        case string = "String"
        case stringlist = "StringList"
        case securestring = "SecureString"
        public var description: String { return self.rawValue }
    }

    public struct FailureDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureType", required: false, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .map), 
            AWSShapeMember(label: "FailureStage", required: false, type: .string)
        ]
        /// The type of Automation failure. Failure types include the following: Action, Permission, Throttling, Verification, Internal.
        public let failureType: String?
        /// Detailed information about the Automation step failure.
        public let details: [String: [String]]?
        /// The stage of the Automation execution when the failure occurred. The stages include the following: InputValidation, PreVerification, Invocation, PostVerification.
        public let failureStage: String?

        public init(failureType: String? = nil, details: [String: [String]]? = nil, failureStage: String? = nil) {
            self.failureType = failureType
            self.details = details
            self.failureStage = failureStage
        }

        private enum CodingKeys: String, CodingKey {
            case failureType = "FailureType"
            case details = "Details"
            case failureStage = "FailureStage"
        }
    }

    public enum SessionState: String, CustomStringConvertible, Codable {
        case active = "Active"
        case history = "History"
        public var description: String { return self.rawValue }
    }

    public struct InstanceAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string)
        ]
        /// The content of the association document for the instance(s).
        public let content: String?
        /// The instance ID.
        public let instanceId: String?
        /// The association ID.
        public let associationId: String?
        /// Version information for the association on the instance.
        public let associationVersion: String?

        public init(content: String? = nil, instanceId: String? = nil, associationId: String? = nil, associationVersion: String? = nil) {
            self.content = content
            self.instanceId = instanceId
            self.associationId = associationId
            self.associationVersion = associationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case instanceId = "InstanceId"
            case associationId = "AssociationId"
            case associationVersion = "AssociationVersion"
        }
    }

    public struct PatchRuleGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchRules", required: true, type: .list)
        ]
        /// The rules that make up the rule group.
        public let patchRules: [PatchRule]

        public init(patchRules: [PatchRule]) {
            self.patchRules = patchRules
        }

        private enum CodingKeys: String, CodingKey {
            case patchRules = "PatchRules"
        }
    }

    public struct DescribePatchGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of patch groups to return (per page).
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [PatchOrchestratorFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [PatchOrchestratorFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct ListDocumentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The names of the Systems Manager documents.
        public let documentIdentifiers: [DocumentIdentifier]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(documentIdentifiers: [DocumentIdentifier]? = nil, nextToken: String? = nil) {
            self.documentIdentifiers = documentIdentifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentIdentifiers = "DocumentIdentifiers"
            case nextToken = "NextToken"
        }
    }

    public struct StepExecutionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// One or more keys to limit the results. Valid filter keys include the following: StepName, Action, StepExecutionId, StepExecutionStatus, StartTimeBefore, StartTimeAfter.
        public let key: StepExecutionFilterKey
        /// The values of the filter key.
        public let values: [String]

        public init(key: StepExecutionFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct DescribeInstancePatchStatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", required: true, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ID of the instance whose patch state information should be retrieved.
        public let instanceIds: [String]
        /// The maximum number of instances to return (per page).
        public let maxResults: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(instanceIds: [String], maxResults: Int32? = nil, nextToken: String? = nil) {
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]
        /// A list of tags.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct SessionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: SessionFilterKey
        /// The filter value. Valid values for each filter key are as follows:   InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.   InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.   Target: Specify an instance to which session connections have been made.   Owner: Specify an AWS user account to see a list of sessions started by that user.   Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:   Connected   Connecting   Disconnected   Terminated   Terminating   Failed    
        public let value: String

        public init(key: SessionFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct ListResourceDataSyncResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDataSyncItems", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of your current Resource Data Sync configurations and their statuses.
        public let resourceDataSyncItems: [ResourceDataSyncItem]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(resourceDataSyncItems: [ResourceDataSyncItem]? = nil, nextToken: String? = nil) {
            self.resourceDataSyncItems = resourceDataSyncItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDataSyncItems = "ResourceDataSyncItems"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleTimezone", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "EndDate", required: false, type: .string), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: false, type: .boolean), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or "Asia/Seoul". For more information, see the Time Zone Database on the IANA website.
        public let scheduleTimezone: String?
        /// The date and time, in ISO-8601 Extended format, for when the Maintenance Window is scheduled to become active. The Maintenance Window will not run before this specified time.
        public let startDate: String?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?
        /// An optional description of the update.
        public let description: String?
        /// The date and time, in ISO-8601 Extended format, for when the Maintenance Window is scheduled to become inactive. The Maintenance Window will not run after this specified time.
        public let endDate: String?
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// Whether the Maintenance Window is enabled.
        public let enabled: Bool?
        /// The ID of the created Maintenance Window.
        public let windowId: String?
        /// The name of the Maintenance Window.
        public let name: String?

        public init(scheduleTimezone: String? = nil, startDate: String? = nil, schedule: String? = nil, duration: Int32? = nil, description: String? = nil, endDate: String? = nil, allowUnassociatedTargets: Bool? = nil, cutoff: Int32? = nil, enabled: Bool? = nil, windowId: String? = nil, name: String? = nil) {
            self.scheduleTimezone = scheduleTimezone
            self.startDate = startDate
            self.schedule = schedule
            self.duration = duration
            self.description = description
            self.endDate = endDate
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.cutoff = cutoff
            self.enabled = enabled
            self.windowId = windowId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleTimezone = "ScheduleTimezone"
            case startDate = "StartDate"
            case schedule = "Schedule"
            case duration = "Duration"
            case description = "Description"
            case endDate = "EndDate"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case cutoff = "Cutoff"
            case enabled = "Enabled"
            case windowId = "WindowId"
            case name = "Name"
        }
    }

    public struct PatchOrchestratorFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The key for the filter.
        public let key: String?
        /// The value for the filter.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct SendAutomationSignalResult: AWSShape {

    }

    public struct RemoveTagsFromResourceResult: AWSShape {

    }

    public struct UpdateAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// The description of the association that was updated.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct ResolvedTargets: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Truncated", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterValues", required: false, type: .list)
        ]
        /// A boolean value indicating whether the resolved target list is truncated.
        public let truncated: Bool?
        /// A list of parameter values sent to targets that resolved during the Automation execution.
        public let parameterValues: [String]?

        public init(truncated: Bool? = nil, parameterValues: [String]? = nil) {
            self.truncated = truncated
            self.parameterValues = parameterValues
        }

        private enum CodingKeys: String, CodingKey {
            case truncated = "Truncated"
            case parameterValues = "ParameterValues"
        }
    }

    public struct GetParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean)
        ]
        /// The name of the parameter you want to query.
        public let name: String
        /// Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public let withDecryption: Bool?

        public init(name: String, withDecryption: Bool? = nil) {
            self.name = name
            self.withDecryption = withDecryption
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case withDecryption = "WithDecryption"
        }
    }

    public enum PatchAction: String, CustomStringConvertible, Codable {
        case allowAsDependency = "ALLOW_AS_DEPENDENCY"
        case block = "BLOCK"
        public var description: String { return self.rawValue }
    }

    public struct StartAssociationsOnceResult: AWSShape {

    }

    public struct NotificationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationArn", required: false, type: .string), 
            AWSShapeMember(label: "NotificationType", required: false, type: .enum), 
            AWSShapeMember(label: "NotificationEvents", required: false, type: .list)
        ]
        /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        public let notificationArn: String?
        /// Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. 
        public let notificationType: NotificationType?
        /// The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see Configuring Amazon SNS Notifications for Run Command in the AWS Systems Manager User Guide.
        public let notificationEvents: [NotificationEvent]?

        public init(notificationArn: String? = nil, notificationType: NotificationType? = nil, notificationEvents: [NotificationEvent]? = nil) {
            self.notificationArn = notificationArn
            self.notificationType = notificationType
            self.notificationEvents = notificationEvents
        }

        private enum CodingKeys: String, CodingKey {
            case notificationArn = "NotificationArn"
            case notificationType = "NotificationType"
            case notificationEvents = "NotificationEvents"
        }
    }

    public enum AssociationFilterKey: String, CustomStringConvertible, Codable {
        case instanceid = "InstanceId"
        case name = "Name"
        case associationid = "AssociationId"
        case associationstatusname = "AssociationStatusName"
        case lastexecutedbefore = "LastExecutedBefore"
        case lastexecutedafter = "LastExecutedAfter"
        case associationname = "AssociationName"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssociationBatchResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", required: false, type: .list), 
            AWSShapeMember(label: "Failed", required: false, type: .list)
        ]
        /// Information about the associations that succeeded.
        public let successful: [AssociationDescription]?
        /// Information about the associations that failed.
        public let failed: [FailedCreateAssociation]?

        public init(successful: [AssociationDescription]? = nil, failed: [FailedCreateAssociation]? = nil) {
            self.successful = successful
            self.failed = failed
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "Successful"
            case failed = "Failed"
        }
    }

    public enum ParametersFilterKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case `type` = "Type"
        case keyid = "KeyId"
        public var description: String { return self.rawValue }
    }

    public struct InstanceAggregatedAssociationOverview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string), 
            AWSShapeMember(label: "InstanceAssociationStatusAggregatedCount", required: false, type: .map)
        ]
        /// Detailed status information about the aggregated associations.
        public let detailedStatus: String?
        /// The number of associations for the instance(s).
        public let instanceAssociationStatusAggregatedCount: [String: Int32]?

        public init(detailedStatus: String? = nil, instanceAssociationStatusAggregatedCount: [String: Int32]? = nil) {
            self.detailedStatus = detailedStatus
            self.instanceAssociationStatusAggregatedCount = instanceAssociationStatusAggregatedCount
        }

        private enum CodingKeys: String, CodingKey {
            case detailedStatus = "DetailedStatus"
            case instanceAssociationStatusAggregatedCount = "InstanceAssociationStatusAggregatedCount"
        }
    }

    public struct CancelCommandRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// The ID of the command you want to cancel.
        public let commandId: String
        /// (Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested.
        public let instanceIds: [String]?

        public init(commandId: String, instanceIds: [String]? = nil) {
            self.commandId = commandId
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case instanceIds = "InstanceIds"
        }
    }

    public struct DescribeInstanceAssociationsStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The instance IDs for which you want association status information.
        public let instanceId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, instanceId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case instanceId = "InstanceId"
        }
    }

    public struct GetMaintenanceWindowExecutionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskIds", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window execution.
        public let windowExecutionId: String?
        /// The time the Maintenance Window started executing.
        public let startTime: TimeStamp?
        /// The time the Maintenance Window finished executing.
        public let endTime: TimeStamp?
        /// The ID of the task executions from the Maintenance Window execution.
        public let taskIds: [String]?
        /// The status of the Maintenance Window execution.
        public let status: MaintenanceWindowExecutionStatus?
        /// The details explaining the Status. Only available for certain status values.
        public let statusDetails: String?

        public init(windowExecutionId: String? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, taskIds: [String]? = nil, status: MaintenanceWindowExecutionStatus? = nil, statusDetails: String? = nil) {
            self.windowExecutionId = windowExecutionId
            self.startTime = startTime
            self.endTime = endTime
            self.taskIds = taskIds
            self.status = status
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case taskIds = "TaskIds"
            case status = "Status"
            case statusDetails = "StatusDetails"
        }
    }

    public enum MaintenanceWindowResourceType: String, CustomStringConvertible, Codable {
        case instance = "INSTANCE"
        public var description: String { return self.rawValue }
    }

    public struct DescribePatchGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mappings", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Each entry in the array contains: PatchGroup: string (between 1 and 256 characters, Regex: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$) PatchBaselineIdentity: A PatchBaselineIdentity element. 
        public let mappings: [PatchGroupPatchBaselineMapping]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(mappings: [PatchGroupPatchBaselineMapping]? = nil, nextToken: String? = nil) {
            self.mappings = mappings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case mappings = "Mappings"
            case nextToken = "NextToken"
        }
    }

    public struct ListResourceDataSyncRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAssociationExecutionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationExecutions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of the executions for the specified association ID.
        public let associationExecutions: [AssociationExecution]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(associationExecutions: [AssociationExecution]? = nil, nextToken: String? = nil) {
            self.associationExecutions = associationExecutions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associationExecutions = "AssociationExecutions"
            case nextToken = "NextToken"
        }
    }

    public enum PlatformType: String, CustomStringConvertible, Codable {
        case windows = "Windows"
        case linux = "Linux"
        public var description: String { return self.rawValue }
    }

    public enum PingStatus: String, CustomStringConvertible, Codable {
        case online = "Online"
        case connectionlost = "ConnectionLost"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public struct MaintenanceWindowRunCommandParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "TimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "DocumentHashType", required: false, type: .enum), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DocumentHash", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map)
        ]
        /// Information about the command(s) to execute.
        public let comment: String?
        /// The IAM service role to assume during task execution.
        public let serviceRoleArn: String?
        /// If this time is reached and the command has not already started executing, it doesn't run.
        public let timeoutSeconds: Int32?
        /// The Amazon S3 bucket subfolder.
        public let outputS3KeyPrefix: String?
        /// The name of the Amazon S3 bucket.
        public let outputS3BucketName: String?
        /// SHA-256 or SHA-1. SHA-1 hashes have been deprecated.
        public let documentHashType: DocumentHashType?
        /// Configurations for sending notifications about command status changes on a per-instance basis.
        public let notificationConfig: NotificationConfig?
        /// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
        public let documentHash: String?
        /// The parameters for the RUN_COMMAND task execution.
        public let parameters: [String: [String]]?

        public init(comment: String? = nil, serviceRoleArn: String? = nil, timeoutSeconds: Int32? = nil, outputS3KeyPrefix: String? = nil, outputS3BucketName: String? = nil, documentHashType: DocumentHashType? = nil, notificationConfig: NotificationConfig? = nil, documentHash: String? = nil, parameters: [String: [String]]? = nil) {
            self.comment = comment
            self.serviceRoleArn = serviceRoleArn
            self.timeoutSeconds = timeoutSeconds
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3BucketName = outputS3BucketName
            self.documentHashType = documentHashType
            self.notificationConfig = notificationConfig
            self.documentHash = documentHash
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case serviceRoleArn = "ServiceRoleArn"
            case timeoutSeconds = "TimeoutSeconds"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case outputS3BucketName = "OutputS3BucketName"
            case documentHashType = "DocumentHashType"
            case notificationConfig = "NotificationConfig"
            case documentHash = "DocumentHash"
            case parameters = "Parameters"
        }
    }

    public struct GetMaintenanceWindowExecutionTaskInvocationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskType", required: false, type: .enum), 
            AWSShapeMember(label: "InvocationId", required: false, type: .string), 
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .string), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The execution ID.
        public let executionId: String?
        /// The time that the task started executing on the target.
        public let startTime: TimeStamp?
        /// The Maintenance Window target ID.
        public let windowTargetId: String?
        /// The task status for an invocation.
        public let status: MaintenanceWindowExecutionStatus?
        /// The details explaining the status. Details are only available for certain status values.
        public let statusDetails: String?
        /// The Maintenance Window execution ID.
        public let windowExecutionId: String?
        /// The time that the task finished executing on the target.
        public let endTime: TimeStamp?
        /// Retrieves the task type for a Maintenance Window. Task types include the following: LAMBDA, STEP_FUNCTION, AUTOMATION, RUN_COMMAND.
        public let taskType: MaintenanceWindowTaskType?
        /// The invocation ID.
        public let invocationId: String?
        /// The task execution ID.
        public let taskExecutionId: String?
        /// The parameters used at the time that the task executed.
        public let parameters: String?
        /// User-provided value to be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window. 
        public let ownerInformation: String?

        public init(executionId: String? = nil, startTime: TimeStamp? = nil, windowTargetId: String? = nil, status: MaintenanceWindowExecutionStatus? = nil, statusDetails: String? = nil, windowExecutionId: String? = nil, endTime: TimeStamp? = nil, taskType: MaintenanceWindowTaskType? = nil, invocationId: String? = nil, taskExecutionId: String? = nil, parameters: String? = nil, ownerInformation: String? = nil) {
            self.executionId = executionId
            self.startTime = startTime
            self.windowTargetId = windowTargetId
            self.status = status
            self.statusDetails = statusDetails
            self.windowExecutionId = windowExecutionId
            self.endTime = endTime
            self.taskType = taskType
            self.invocationId = invocationId
            self.taskExecutionId = taskExecutionId
            self.parameters = parameters
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case executionId = "ExecutionId"
            case startTime = "StartTime"
            case windowTargetId = "WindowTargetId"
            case status = "Status"
            case statusDetails = "StatusDetails"
            case windowExecutionId = "WindowExecutionId"
            case endTime = "EndTime"
            case taskType = "TaskType"
            case invocationId = "InvocationId"
            case taskExecutionId = "TaskExecutionId"
            case parameters = "Parameters"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct DescribeDocumentPermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PermissionType", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The permission type for the document. The permission type can be Share.
        public let permissionType: DocumentPermissionType
        /// The name of the document for which you are the owner.
        public let name: String

        public init(permissionType: DocumentPermissionType, name: String) {
            self.permissionType = permissionType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case permissionType = "PermissionType"
            case name = "Name"
        }
    }

    public struct GetParametersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Names", required: true, type: .list), 
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean)
        ]
        /// Names of the parameters for which you want to query information.
        public let names: [String]
        /// Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public let withDecryption: Bool?

        public init(names: [String], withDecryption: Bool? = nil) {
            self.names = names
            self.withDecryption = withDecryption
        }

        private enum CodingKeys: String, CodingKey {
            case names = "Names"
            case withDecryption = "WithDecryption"
        }
    }

    public struct LabelParameterVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Labels", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ParameterVersion", required: false, type: .long)
        ]
        /// One or more labels to attach to the specified parameter version.
        public let labels: [String]
        /// The parameter name on which you want to attach one or more labels.
        public let name: String
        /// The specific version of the parameter on which you want to attach one or more labels. If no version is specified, the system attaches the label to the latest version.)
        public let parameterVersion: Int64?

        public init(labels: [String], name: String, parameterVersion: Int64? = nil) {
            self.labels = labels
            self.name = name
            self.parameterVersion = parameterVersion
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "Labels"
            case name = "Name"
            case parameterVersion = "ParameterVersion"
        }
    }

    public struct DeleteActivationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationId", required: true, type: .string)
        ]
        /// The ID of the activation that you want to delete.
        public let activationId: String

        public init(activationId: String) {
            self.activationId = activationId
        }

        private enum CodingKeys: String, CodingKey {
            case activationId = "ActivationId"
        }
    }

    public struct UpdateMaintenanceWindowTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Replace", required: false, type: .boolean), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "WindowTaskId", required: true, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "TaskInvocationParameters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The Maintenance Window ID that contains the task to modify.
        public let windowId: String
        /// If True, then all fields that are required by the RegisterTaskWithMaintenanceWndow action are also required for this API request. Optional fields that are not specified are set to null.
        public let replace: Bool?
        /// The new logging location in Amazon S3 to specify.   LoggingInfo has been deprecated. To specify an S3 bucket to contain logs, instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let loggingInfo: LoggingInfo?
        /// The parameters to modify.   TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters.  The map has the following format: Key: string, between 1 and 255 characters Value: an array of strings, each string is between 1 and 255 characters
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The task ID to modify.
        public let windowTaskId: String
        /// The targets (either instances or tags) to modify. Instances are specified using Key=instanceids,Values=instanceID_1,instanceID_2. Tags are specified using Key=tag_name,Values=tag_value. 
        public let targets: [Target]?
        /// The new task description to specify.
        public let description: String?
        /// The task ARN to modify.
        public let taskArn: String?
        /// The new task priority to specify. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel.
        public let priority: Int32?
        /// The new task name to specify.
        public let name: String?
        /// The new MaxConcurrency value you want to specify. MaxConcurrency is the number of targets that are allowed to run this task in parallel.
        public let maxConcurrency: String?
        /// The IAM service role ARN to modify. The system assumes this role during task execution. If you do not specify a service role ARN, Systems Manager will use your account's service-linked role for Systems Manager by default. If no service-linked role for Systems Manager exists in your account, it will be created when you run RegisterTaskWithMaintenanceWindow without specifying a service role ARN. For more information, see Service-Linked Role Permissions for Systems Manager and Should I Use a Service-Linked Role or a Custom Service Role to Run Maintenance Window Tasks?  in the AWS Systems Manager User Guide.
        public let serviceRoleArn: String?
        /// The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty.
        public let taskInvocationParameters: MaintenanceWindowTaskInvocationParameters?
        /// The new MaxErrors value to specify. MaxErrors is the maximum number of errors that are allowed before the task stops being scheduled.
        public let maxErrors: String?

        public init(windowId: String, replace: Bool? = nil, loggingInfo: LoggingInfo? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String, targets: [Target]? = nil, description: String? = nil, taskArn: String? = nil, priority: Int32? = nil, name: String? = nil, maxConcurrency: String? = nil, serviceRoleArn: String? = nil, taskInvocationParameters: MaintenanceWindowTaskInvocationParameters? = nil, maxErrors: String? = nil) {
            self.windowId = windowId
            self.replace = replace
            self.loggingInfo = loggingInfo
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.description = description
            self.taskArn = taskArn
            self.priority = priority
            self.name = name
            self.maxConcurrency = maxConcurrency
            self.serviceRoleArn = serviceRoleArn
            self.taskInvocationParameters = taskInvocationParameters
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case replace = "Replace"
            case loggingInfo = "LoggingInfo"
            case taskParameters = "TaskParameters"
            case windowTaskId = "WindowTaskId"
            case targets = "Targets"
            case description = "Description"
            case taskArn = "TaskArn"
            case priority = "Priority"
            case name = "Name"
            case maxConcurrency = "MaxConcurrency"
            case serviceRoleArn = "ServiceRoleArn"
            case taskInvocationParameters = "TaskInvocationParameters"
            case maxErrors = "MaxErrors"
        }
    }

    public struct UpdateDocumentDefaultVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersion", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The version of a custom document that you want to set as the default version.
        public let documentVersion: String
        /// The name of a custom document that you want to set as the default version.
        public let name: String

        public init(documentVersion: String, name: String) {
            self.documentVersion = documentVersion
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersion = "DocumentVersion"
            case name = "Name"
        }
    }

    public struct DeregisterManagedInstanceResult: AWSShape {

    }

    public enum AutomationType: String, CustomStringConvertible, Codable {
        case crossaccount = "CrossAccount"
        case local = "Local"
        public var description: String { return self.rawValue }
    }

    public enum ComplianceSeverity: String, CustomStringConvertible, Codable {
        case critical = "CRITICAL"
        case high = "HIGH"
        case medium = "MEDIUM"
        case low = "LOW"
        case informational = "INFORMATIONAL"
        case unspecified = "UNSPECIFIED"
        public var description: String { return self.rawValue }
    }

    public enum InstancePatchStateOperatorType: String, CustomStringConvertible, Codable {
        case equal = "Equal"
        case notequal = "NotEqual"
        case lessthan = "LessThan"
        case greaterthan = "GreaterThan"
        public var description: String { return self.rawValue }
    }

    public struct AttachmentsSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .enum), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The key of a key and value pair that identifies the location of an attachment to a document.
        public let key: AttachmentsSourceKey?
        /// The URL of the location of a document attachment, such as the URL of an Amazon S3 bucket.
        public let values: [String]?

        public init(key: AttachmentsSourceKey? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct GetDeployablePatchSnapshotForInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The user-defined snapshot ID.
        public let snapshotId: String
        /// The ID of the instance for which the appropriate patch snapshot should be retrieved.
        public let instanceId: String

        public init(snapshotId: String, instanceId: String) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case instanceId = "InstanceId"
        }
    }

    public struct CreateAssociationBatchRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entries", required: true, type: .list)
        ]
        /// One or more associations.
        public let entries: [CreateAssociationBatchRequestEntry]

        public init(entries: [CreateAssociationBatchRequestEntry]) {
            self.entries = entries
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "Entries"
        }
    }

    public struct MaintenanceWindowExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window execution.
        public let windowExecutionId: String?
        /// The time the execution started.
        public let startTime: TimeStamp?
        /// The time the execution finished.
        public let endTime: TimeStamp?
        /// The ID of the Maintenance Window.
        public let windowId: String?
        /// The status of the execution.
        public let status: MaintenanceWindowExecutionStatus?
        /// The details explaining the Status. Only available for certain status values.
        public let statusDetails: String?

        public init(windowExecutionId: String? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, windowId: String? = nil, status: MaintenanceWindowExecutionStatus? = nil, statusDetails: String? = nil) {
            self.windowExecutionId = windowExecutionId
            self.startTime = startTime
            self.endTime = endTime
            self.windowId = windowId
            self.status = status
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case windowId = "WindowId"
            case status = "Status"
            case statusDetails = "StatusDetails"
        }
    }

    public struct DescribePatchBaselinesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of PatchBaselineIdentity elements.
        public let baselineIdentities: [PatchBaselineIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(baselineIdentities: [PatchBaselineIdentity]? = nil, nextToken: String? = nil) {
            self.baselineIdentities = baselineIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case baselineIdentities = "BaselineIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAutomationExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Filters used to limit the scope of executions that are requested.
        public let filters: [AutomationExecutionFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [AutomationExecutionFilter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct GetParameterHistoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of parameters returned by the request.
        public let parameters: [ParameterHistory]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(parameters: [ParameterHistory]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteActivationResult: AWSShape {

    }

    public struct DescribeInstanceInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceInformationFilterList", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// One or more filters. Use a filter to return a more specific list of instances. You can filter on Amazon EC2 tag. Specify tags by using a key-value mapping.
        public let filters: [InstanceInformationStringFilter]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. 
        public let maxResults: Int32?
        /// This is a legacy method. We recommend that you don't use this method. Instead, use the InstanceInformationFilter action. The InstanceInformationFilter action enables you to return instance information by using tags that are specified as a key-value mapping.  If you do use this method, then you can't use the InstanceInformationFilter action. Using this method and the InstanceInformationFilter action causes an exception error. 
        public let instanceInformationFilterList: [InstanceInformationFilter]?

        public init(nextToken: String? = nil, filters: [InstanceInformationStringFilter]? = nil, maxResults: Int32? = nil, instanceInformationFilterList: [InstanceInformationFilter]? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.instanceInformationFilterList = instanceInformationFilterList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
            case instanceInformationFilterList = "InstanceInformationFilterList"
        }
    }

    public struct StartAssociationsOnceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationIds", required: true, type: .list)
        ]
        /// The association IDs that you want to execute immediately and only one time.
        public let associationIds: [String]

        public init(associationIds: [String]) {
            self.associationIds = associationIds
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationIds"
        }
    }

    public struct DescribeActivationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of activations for your AWS account.
        public let activationList: [Activation]?
        /// The token for the next set of items to return. Use this token to get the next set of results. 
        public let nextToken: String?

        public init(activationList: [Activation]? = nil, nextToken: String? = nil) {
            self.activationList = activationList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activationList = "ActivationList"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAvailablePatchesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Patches", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of patches. Each entry in the array is a patch structure.
        public let patches: [Patch]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(patches: [Patch]? = nil, nextToken: String? = nil) {
            self.patches = patches
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case patches = "Patches"
            case nextToken = "NextToken"
        }
    }

    public struct RegisterTaskWithMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string)
        ]
        /// The ID of the task in the Maintenance Window.
        public let windowTaskId: String?

        public init(windowTaskId: String? = nil) {
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowTaskId = "WindowTaskId"
        }
    }

    public struct SessionManagerOutputUrl: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3OutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchOutputUrl", required: false, type: .string)
        ]
        /// Reserved for future use.
        public let s3OutputUrl: String?
        /// Reserved for future use.
        public let cloudWatchOutputUrl: String?

        public init(s3OutputUrl: String? = nil, cloudWatchOutputUrl: String? = nil) {
            self.s3OutputUrl = s3OutputUrl
            self.cloudWatchOutputUrl = cloudWatchOutputUrl
        }

        private enum CodingKeys: String, CodingKey {
            case s3OutputUrl = "S3OutputUrl"
            case cloudWatchOutputUrl = "CloudWatchOutputUrl"
        }
    }

    public struct InventoryDeletionStatusItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletionSummary", required: false, type: .structure), 
            AWSShapeMember(label: "DeletionId", required: false, type: .string), 
            AWSShapeMember(label: "DeletionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStatus", required: false, type: .enum), 
            AWSShapeMember(label: "LastStatusUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "LastStatusMessage", required: false, type: .string)
        ]
        /// Information about the delete operation. For more information about this summary, see Understanding the Delete Inventory Summary in the AWS Systems Manager User Guide.
        public let deletionSummary: InventoryDeletionSummary?
        /// The deletion ID returned by the DeleteInventory action.
        public let deletionId: String?
        /// The UTC timestamp when the delete operation started.
        public let deletionStartTime: TimeStamp?
        /// The status of the operation. Possible values are InProgress and Complete.
        public let lastStatus: InventoryDeletionStatus?
        /// The UTC timestamp of when the last status report.
        public let lastStatusUpdateTime: TimeStamp?
        /// The name of the inventory data type.
        public let typeName: String?
        /// Information about the status.
        public let lastStatusMessage: String?

        public init(deletionSummary: InventoryDeletionSummary? = nil, deletionId: String? = nil, deletionStartTime: TimeStamp? = nil, lastStatus: InventoryDeletionStatus? = nil, lastStatusUpdateTime: TimeStamp? = nil, typeName: String? = nil, lastStatusMessage: String? = nil) {
            self.deletionSummary = deletionSummary
            self.deletionId = deletionId
            self.deletionStartTime = deletionStartTime
            self.lastStatus = lastStatus
            self.lastStatusUpdateTime = lastStatusUpdateTime
            self.typeName = typeName
            self.lastStatusMessage = lastStatusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case deletionSummary = "DeletionSummary"
            case deletionId = "DeletionId"
            case deletionStartTime = "DeletionStartTime"
            case lastStatus = "LastStatus"
            case lastStatusUpdateTime = "LastStatusUpdateTime"
            case typeName = "TypeName"
            case lastStatusMessage = "LastStatusMessage"
        }
    }

    public struct GetParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidParameters", required: false, type: .list), 
            AWSShapeMember(label: "Parameters", required: false, type: .list)
        ]
        /// A list of parameters that are not formatted correctly or do not run when executed.
        public let invalidParameters: [String]?
        /// A list of details for a parameter.
        public let parameters: [Parameter]?

        public init(invalidParameters: [String]? = nil, parameters: [Parameter]? = nil) {
            self.invalidParameters = invalidParameters
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case invalidParameters = "InvalidParameters"
            case parameters = "Parameters"
        }
    }

    public struct MaintenanceWindowExecutionTaskInvocationIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskType", required: false, type: .enum), 
            AWSShapeMember(label: "InvocationId", required: false, type: .string), 
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .string), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID.
        public let executionId: String?
        /// The time the invocation started.
        public let startTime: TimeStamp?
        /// The ID of the target definition in this Maintenance Window the invocation was performed for.
        public let windowTargetId: String?
        /// The status of the task invocation.
        public let status: MaintenanceWindowExecutionStatus?
        /// The details explaining the status of the task invocation. Only available for certain Status values. 
        public let statusDetails: String?
        /// The ID of the Maintenance Window execution that ran the task.
        public let windowExecutionId: String?
        /// The time the invocation finished.
        public let endTime: TimeStamp?
        /// The task type.
        public let taskType: MaintenanceWindowTaskType?
        /// The ID of the task invocation.
        public let invocationId: String?
        /// The ID of the specific task execution in the Maintenance Window execution.
        public let taskExecutionId: String?
        /// The parameters that were provided for the invocation when it was executed.
        public let parameters: String?
        /// User-provided value that was specified when the target was registered with the Maintenance Window. This was also included in any CloudWatch events raised during the task invocation.
        public let ownerInformation: String?

        public init(executionId: String? = nil, startTime: TimeStamp? = nil, windowTargetId: String? = nil, status: MaintenanceWindowExecutionStatus? = nil, statusDetails: String? = nil, windowExecutionId: String? = nil, endTime: TimeStamp? = nil, taskType: MaintenanceWindowTaskType? = nil, invocationId: String? = nil, taskExecutionId: String? = nil, parameters: String? = nil, ownerInformation: String? = nil) {
            self.executionId = executionId
            self.startTime = startTime
            self.windowTargetId = windowTargetId
            self.status = status
            self.statusDetails = statusDetails
            self.windowExecutionId = windowExecutionId
            self.endTime = endTime
            self.taskType = taskType
            self.invocationId = invocationId
            self.taskExecutionId = taskExecutionId
            self.parameters = parameters
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case executionId = "ExecutionId"
            case startTime = "StartTime"
            case windowTargetId = "WindowTargetId"
            case status = "Status"
            case statusDetails = "StatusDetails"
            case windowExecutionId = "WindowExecutionId"
            case endTime = "EndTime"
            case taskType = "TaskType"
            case invocationId = "InvocationId"
            case taskExecutionId = "TaskExecutionId"
            case parameters = "Parameters"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct CreateActivationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "RegistrationLimit", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "IamRole", required: true, type: .string), 
            AWSShapeMember(label: "ExpirationDate", required: false, type: .timestamp)
        ]
        /// The name of the registered, managed instance as it will appear in the Amazon EC2 console or when you use the AWS command line tools to list EC2 resources.  Do not enter personally identifiable information in this field. 
        public let defaultInstanceName: String?
        /// Specify the maximum number of managed instances you want to register. The default value is 1 instance.
        public let registrationLimit: Int32?
        /// A user-defined description of the resource that you want to register with Amazon EC2.   Do not enter personally identifiable information in this field. 
        public let description: String?
        /// The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance. 
        public let iamRole: String
        /// The date by which this activation request should expire. The default value is 24 hours.
        public let expirationDate: TimeStamp?

        public init(defaultInstanceName: String? = nil, registrationLimit: Int32? = nil, description: String? = nil, iamRole: String, expirationDate: TimeStamp? = nil) {
            self.defaultInstanceName = defaultInstanceName
            self.registrationLimit = registrationLimit
            self.description = description
            self.iamRole = iamRole
            self.expirationDate = expirationDate
        }

        private enum CodingKeys: String, CodingKey {
            case defaultInstanceName = "DefaultInstanceName"
            case registrationLimit = "RegistrationLimit"
            case description = "Description"
            case iamRole = "IamRole"
            case expirationDate = "ExpirationDate"
        }
    }

    public enum NotificationType: String, CustomStringConvertible, Codable {
        case command = "Command"
        case invocation = "Invocation"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionStatus: String, CustomStringConvertible, Codable {
        case connected = "Connected"
        case notconnected = "NotConnected"
        public var description: String { return self.rawValue }
    }

    public struct CreateDocumentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentDescription", required: false, type: .structure)
        ]
        /// Information about the Systems Manager document.
        public let documentDescription: DocumentDescription?

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

        private enum CodingKeys: String, CodingKey {
            case documentDescription = "DocumentDescription"
        }
    }

    public struct ComplianceStringFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The value for which to search.
        public let values: [String]?
        /// The name of the filter.
        public let key: String?
        /// The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith, LessThan, or GreaterThan.
        public let `type`: ComplianceQueryOperatorType?

        public init(values: [String]? = nil, key: String? = nil, type: ComplianceQueryOperatorType? = nil) {
            self.values = values
            self.key = key
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
            case `type` = "Type"
        }
    }

    public struct UpdateAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "ComplianceSeverity", required: false, type: .enum), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}
        public let parameters: [String: [String]]?
        /// This parameter is provided for concurrency control purposes. You must specify the latest association version in the service. If you want to ensure that this request succeeds, either specify $LATEST, or omit this parameter.
        public let associationVersion: String?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public let maxErrors: String?
        /// The document version you want update for the association. 
        public let documentVersion: String?
        /// The cron expression used to schedule the association that you want to update.
        public let scheduleExpression: String?
        /// The severity level to assign to the association.
        public let complianceSeverity: AssociationComplianceSeverity?
        /// The targets of the association.
        public let targets: [Target]?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new instance starts and attempts to execute an association while Systems Manager is executing MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.
        public let maxConcurrency: String?
        /// The name of the association that you want to update.
        public let associationName: String?
        /// An Amazon S3 bucket where you want to store the results of this request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// The ID of the association you want to update. 
        public let associationId: String
        /// The name of the association document.
        public let name: String?

        public init(parameters: [String: [String]]? = nil, associationVersion: String? = nil, maxErrors: String? = nil, documentVersion: String? = nil, scheduleExpression: String? = nil, complianceSeverity: AssociationComplianceSeverity? = nil, targets: [Target]? = nil, maxConcurrency: String? = nil, associationName: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, associationId: String, name: String? = nil) {
            self.parameters = parameters
            self.associationVersion = associationVersion
            self.maxErrors = maxErrors
            self.documentVersion = documentVersion
            self.scheduleExpression = scheduleExpression
            self.complianceSeverity = complianceSeverity
            self.targets = targets
            self.maxConcurrency = maxConcurrency
            self.associationName = associationName
            self.outputLocation = outputLocation
            self.associationId = associationId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case associationVersion = "AssociationVersion"
            case maxErrors = "MaxErrors"
            case documentVersion = "DocumentVersion"
            case scheduleExpression = "ScheduleExpression"
            case complianceSeverity = "ComplianceSeverity"
            case targets = "Targets"
            case maxConcurrency = "MaxConcurrency"
            case associationName = "AssociationName"
            case outputLocation = "OutputLocation"
            case associationId = "AssociationId"
            case name = "Name"
        }
    }

    public enum PatchFilterKey: String, CustomStringConvertible, Codable {
        case product = "PRODUCT"
        case classification = "CLASSIFICATION"
        case msrcSeverity = "MSRC_SEVERITY"
        case patchId = "PATCH_ID"
        case section = "SECTION"
        case priority = "PRIORITY"
        case severity = "SEVERITY"
        public var description: String { return self.rawValue }
    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionTaskInvocationIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the task invocation results per invocation.
        public let windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskInvocationIdentities = windowExecutionTaskInvocationIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionTaskInvocationIdentities = "WindowExecutionTaskInvocationIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string)
        ]
        /// The ID of the deleted Maintenance Window.
        public let windowId: String?

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct CreateActivationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationId", required: false, type: .string), 
            AWSShapeMember(label: "ActivationCode", required: false, type: .string)
        ]
        /// The ID number generated by the system when it processed the activation. The activation ID functions like a user name.
        public let activationId: String?
        /// The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID. 
        public let activationCode: String?

        public init(activationId: String? = nil, activationCode: String? = nil) {
            self.activationId = activationId
            self.activationCode = activationCode
        }

        private enum CodingKeys: String, CodingKey {
            case activationId = "ActivationId"
            case activationCode = "ActivationCode"
        }
    }

    public struct DescribeDocumentPermissionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// The account IDs that have permission to use this document. The ID can be either an AWS account or All.
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct DeregisterManagedInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The ID assigned to the managed instance when you registered it using the activation process. 
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// The type of resource of which you want to remove a tag.  The ManagedInstance type for this API action is only for on-premises managed instances. You must specify the the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f. 
        public let resourceType: ResourceTypeForTagging
        /// Tag keys that you want to remove from the specified resource.
        public let tagKeys: [String]
        /// The resource ID for which you want to remove tags. Use the ID of the resource. Here are some examples: ManagedInstance: mi-012345abcde MaintenanceWindow: mw-012345abcde PatchBaseline: pb-012345abcde For the Document and Parameter values, use the name of the resource.  The ManagedInstance type for this API action is only for on-premises managed instances. You must specify the the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f. 
        public let resourceId: String

        public init(resourceType: ResourceTypeForTagging, tagKeys: [String], resourceId: String) {
            self.resourceType = resourceType
            self.tagKeys = tagKeys
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tagKeys = "TagKeys"
            case resourceId = "ResourceId"
        }
    }

    public struct CreateAssociationBatchRequestEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "ComplianceSeverity", required: false, type: .enum), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// Specify a descriptive name for the association.
        public let associationName: String?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public let maxErrors: String?
        /// A cron expression that specifies a schedule when the association runs.
        public let scheduleExpression: String?
        /// The ID of the instance. 
        public let instanceId: String?
        /// The severity level to assign to the association.
        public let complianceSeverity: AssociationComplianceSeverity?
        /// The instances targeted by the request.
        public let targets: [Target]?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new instance starts and attempts to execute an association while Systems Manager is executing MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.
        public let maxConcurrency: String?
        /// An Amazon S3 bucket where you want to store the results of this request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// A description of the parameters for a document. 
        public let parameters: [String: [String]]?
        /// The name of the configuration document. 
        public let name: String
        /// The document version.
        public let documentVersion: String?

        public init(associationName: String? = nil, maxErrors: String? = nil, scheduleExpression: String? = nil, instanceId: String? = nil, complianceSeverity: AssociationComplianceSeverity? = nil, targets: [Target]? = nil, maxConcurrency: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, parameters: [String: [String]]? = nil, name: String, documentVersion: String? = nil) {
            self.associationName = associationName
            self.maxErrors = maxErrors
            self.scheduleExpression = scheduleExpression
            self.instanceId = instanceId
            self.complianceSeverity = complianceSeverity
            self.targets = targets
            self.maxConcurrency = maxConcurrency
            self.outputLocation = outputLocation
            self.parameters = parameters
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case associationName = "AssociationName"
            case maxErrors = "MaxErrors"
            case scheduleExpression = "ScheduleExpression"
            case instanceId = "InstanceId"
            case complianceSeverity = "ComplianceSeverity"
            case targets = "Targets"
            case maxConcurrency = "MaxConcurrency"
            case outputLocation = "OutputLocation"
            case parameters = "Parameters"
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public enum AutomationExecutionStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case waiting = "Waiting"
        case success = "Success"
        case timedout = "TimedOut"
        case cancelling = "Cancelling"
        case cancelled = "Cancelled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct Activation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expired", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "IamRole", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RegistrationsCount", required: false, type: .integer), 
            AWSShapeMember(label: "RegistrationLimit", required: false, type: .integer), 
            AWSShapeMember(label: "ActivationId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ExpirationDate", required: false, type: .timestamp)
        ]
        /// Whether or not the activation is expired.
        public let expired: Bool?
        /// A name for the managed instance when it is created.
        public let defaultInstanceName: String?
        /// The Amazon Identity and Access Management (IAM) role to assign to the managed instance.
        public let iamRole: String?
        /// The date the activation was created.
        public let createdDate: TimeStamp?
        /// The number of managed instances already registered with this activation.
        public let registrationsCount: Int32?
        /// The maximum number of managed instances that can be registered using this activation.
        public let registrationLimit: Int32?
        /// The ID created by Systems Manager when you submitted the activation.
        public let activationId: String?
        /// A user defined description of the activation.
        public let description: String?
        /// The date when this activation can no longer be used to register managed instances.
        public let expirationDate: TimeStamp?

        public init(expired: Bool? = nil, defaultInstanceName: String? = nil, iamRole: String? = nil, createdDate: TimeStamp? = nil, registrationsCount: Int32? = nil, registrationLimit: Int32? = nil, activationId: String? = nil, description: String? = nil, expirationDate: TimeStamp? = nil) {
            self.expired = expired
            self.defaultInstanceName = defaultInstanceName
            self.iamRole = iamRole
            self.createdDate = createdDate
            self.registrationsCount = registrationsCount
            self.registrationLimit = registrationLimit
            self.activationId = activationId
            self.description = description
            self.expirationDate = expirationDate
        }

        private enum CodingKeys: String, CodingKey {
            case expired = "Expired"
            case defaultInstanceName = "DefaultInstanceName"
            case iamRole = "IamRole"
            case createdDate = "CreatedDate"
            case registrationsCount = "RegistrationsCount"
            case registrationLimit = "RegistrationLimit"
            case activationId = "ActivationId"
            case description = "Description"
            case expirationDate = "ExpirationDate"
        }
    }

    public struct PatchSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Products", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Configuration", required: true, type: .string)
        ]
        /// The specific operating system versions a patch repository applies to, such as "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported product values, see PatchFilter.
        public let products: [String]
        /// The name specified to identify the patch source.
        public let name: String
        /// The value of the yum repo configuration. For example:  cachedir=/var/cache/yum/$basesearch   $releasever   keepcache=0   debuglevel=2 
        public let configuration: String

        public init(products: [String], name: String, configuration: String) {
            self.products = products
            self.name = name
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case products = "Products"
            case name = "Name"
            case configuration = "Configuration"
        }
    }

    public enum PatchOperationType: String, CustomStringConvertible, Codable {
        case scan = "Scan"
        case install = "Install"
        public var description: String { return self.rawValue }
    }

    public struct GetConnectionStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: true, type: .string)
        ]
        /// The ID of the instance.
        public let target: String

        public init(target: String) {
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
        }
    }

    public struct ListComplianceSummariesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The maximum number of items to return for this call. Currently, you can specify null or 50. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more compliance or inventory filters. Use a filter to return a more specific list of results.
        public let filters: [ComplianceStringFilter]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filters: [ComplianceStringFilter]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public enum InventoryQueryOperatorType: String, CustomStringConvertible, Codable {
        case equal = "Equal"
        case notequal = "NotEqual"
        case beginwith = "BeginWith"
        case lessthan = "LessThan"
        case greaterthan = "GreaterThan"
        case exists = "Exists"
        public var description: String { return self.rawValue }
    }

    public struct GetMaintenanceWindowExecutionTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The ID of the specific task execution in the Maintenance Window task that was retrieved.
        public let taskExecutionId: String?
        /// The role that was assumed when executing the task.
        public let serviceRole: String?
        /// The details explaining the Status. Only available for certain status values.
        public let statusDetails: String?
        /// The time the task execution started.
        public let startTime: TimeStamp?
        /// The parameters passed to the task when it was executed.   TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters.  The map has the following format: Key: string, between 1 and 255 characters Value: an array of strings, each string is between 1 and 255 characters
        public let taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]?
        /// The type of task executed.
        public let `type`: MaintenanceWindowTaskType?
        /// The ARN of the executed task.
        public let taskArn: String?
        /// The priority of the task.
        public let priority: Int32?
        /// The status of the task.
        public let status: MaintenanceWindowExecutionStatus?
        /// The ID of the Maintenance Window execution that includes the task.
        public let windowExecutionId: String?
        /// The time the task execution completed.
        public let endTime: TimeStamp?
        /// The defined maximum number of task executions that could be run in parallel.
        public let maxConcurrency: String?
        /// The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.
        public let maxErrors: String?

        public init(taskExecutionId: String? = nil, serviceRole: String? = nil, statusDetails: String? = nil, startTime: TimeStamp? = nil, taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]? = nil, type: MaintenanceWindowTaskType? = nil, taskArn: String? = nil, priority: Int32? = nil, status: MaintenanceWindowExecutionStatus? = nil, windowExecutionId: String? = nil, endTime: TimeStamp? = nil, maxConcurrency: String? = nil, maxErrors: String? = nil) {
            self.taskExecutionId = taskExecutionId
            self.serviceRole = serviceRole
            self.statusDetails = statusDetails
            self.startTime = startTime
            self.taskParameters = taskParameters
            self.`type` = `type`
            self.taskArn = taskArn
            self.priority = priority
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.endTime = endTime
            self.maxConcurrency = maxConcurrency
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case taskExecutionId = "TaskExecutionId"
            case serviceRole = "ServiceRole"
            case statusDetails = "StatusDetails"
            case startTime = "StartTime"
            case taskParameters = "TaskParameters"
            case `type` = "Type"
            case taskArn = "TaskArn"
            case priority = "Priority"
            case status = "Status"
            case windowExecutionId = "WindowExecutionId"
            case endTime = "EndTime"
            case maxConcurrency = "MaxConcurrency"
            case maxErrors = "MaxErrors"
        }
    }

    public struct GetCommandInvocationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionEndDateTime", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorContent", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchOutputConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ExecutionStartDateTime", required: false, type: .string), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "PluginName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StandardOutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionElapsedTime", required: false, type: .string), 
            AWSShapeMember(label: "StandardOutputContent", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorUrl", required: false, type: .string), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .integer)
        ]
        /// The parent command ID of the invocation plugin.
        public let commandId: String?
        /// The date and time the plugin was finished executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the InvokedAfter filter.  aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z  If the plugin has not started to execute, the string is empty.
        public let executionEndDateTime: String?
        /// A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Understanding Command Statuses in the AWS Systems Manager User Guide. StatusDetails can be one of the following values:   Pending: The command has not been sent to the instance.   In Progress: The command has been sent to the instance but has not reached a terminal state.   Delayed: The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, the instance was stopped, etc. The system will try to deliver the command again.   Success: The command or plugin was executed successfully. This is a terminal state.   Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out: The command started to execute on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed: The command wasn't executed successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public let statusDetails: String?
        /// The first 8,000 characters written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        public let standardErrorContent: String?
        /// The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        public let instanceId: String?
        /// CloudWatch Logs information where Systems Manager sent the command output.
        public let cloudWatchOutputConfig: CloudWatchOutputConfig?
        /// The date and time the plugin started executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the InvokedBefore filter.  aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z  If the plugin has not started to execute, the string is empty.
        public let executionStartDateTime: String?
        /// The name of the document that was executed. For example, AWS-RunShellScript.
        public let documentName: String?
        /// The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin.
        public let pluginName: String?
        /// The status of this invocation plugin. This status can be different than StatusDetails.
        public let status: CommandInvocationStatus?
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3 bucket was not specified, then this string is empty.
        public let standardOutputUrl: String?
        /// The SSM document version used in the request.
        public let documentVersion: String?
        /// The comment text for the command.
        public let comment: String?
        /// Duration since ExecutionStartDateTime.
        public let executionElapsedTime: String?
        /// The first 24,000 characters written by the plugin to stdout. If the command has not finished executing, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.
        public let standardOutputContent: String?
        /// The URL for the complete text written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        public let standardErrorUrl: String?
        /// The error level response code for the plugin script. If the response code is -1, then the command has not started executing on the instance, or it was not received by the instance.
        public let responseCode: Int32?

        public init(commandId: String? = nil, executionEndDateTime: String? = nil, statusDetails: String? = nil, standardErrorContent: String? = nil, instanceId: String? = nil, cloudWatchOutputConfig: CloudWatchOutputConfig? = nil, executionStartDateTime: String? = nil, documentName: String? = nil, pluginName: String? = nil, status: CommandInvocationStatus? = nil, standardOutputUrl: String? = nil, documentVersion: String? = nil, comment: String? = nil, executionElapsedTime: String? = nil, standardOutputContent: String? = nil, standardErrorUrl: String? = nil, responseCode: Int32? = nil) {
            self.commandId = commandId
            self.executionEndDateTime = executionEndDateTime
            self.statusDetails = statusDetails
            self.standardErrorContent = standardErrorContent
            self.instanceId = instanceId
            self.cloudWatchOutputConfig = cloudWatchOutputConfig
            self.executionStartDateTime = executionStartDateTime
            self.documentName = documentName
            self.pluginName = pluginName
            self.status = status
            self.standardOutputUrl = standardOutputUrl
            self.documentVersion = documentVersion
            self.comment = comment
            self.executionElapsedTime = executionElapsedTime
            self.standardOutputContent = standardOutputContent
            self.standardErrorUrl = standardErrorUrl
            self.responseCode = responseCode
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case executionEndDateTime = "ExecutionEndDateTime"
            case statusDetails = "StatusDetails"
            case standardErrorContent = "StandardErrorContent"
            case instanceId = "InstanceId"
            case cloudWatchOutputConfig = "CloudWatchOutputConfig"
            case executionStartDateTime = "ExecutionStartDateTime"
            case documentName = "DocumentName"
            case pluginName = "PluginName"
            case status = "Status"
            case standardOutputUrl = "StandardOutputUrl"
            case documentVersion = "DocumentVersion"
            case comment = "Comment"
            case executionElapsedTime = "ExecutionElapsedTime"
            case standardOutputContent = "StandardOutputContent"
            case standardErrorUrl = "StandardErrorUrl"
            case responseCode = "ResponseCode"
        }
    }

    public struct InventoryGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Filters define the criteria for the group. The matchingCount field displays the number of resources that match the criteria. The notMatchingCount field displays the number of resources that don't match the criteria. 
        public let filters: [InventoryFilter]
        /// The name of the group.
        public let name: String

        public init(filters: [InventoryFilter], name: String) {
            self.filters = filters
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case name = "Name"
        }
    }

    public enum AssociationExecutionTargetsFilterKey: String, CustomStringConvertible, Codable {
        case status = "Status"
        case resourceid = "ResourceId"
        case resourcetype = "ResourceType"
        public var description: String { return self.rawValue }
    }

    public struct RegisterTargetWithMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string)
        ]
        /// The ID of the target definition in this Maintenance Window.
        public let windowTargetId: String?

        public init(windowTargetId: String? = nil) {
            self.windowTargetId = windowTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case windowTargetId = "WindowTargetId"
        }
    }

    public enum ExecutionMode: String, CustomStringConvertible, Codable {
        case auto = "Auto"
        case interactive = "Interactive"
        public var description: String { return self.rawValue }
    }

    public struct DescribeMaintenanceWindowTargetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the targets in the Maintenance Window.
        public let targets: [MaintenanceWindowTarget]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(targets: [MaintenanceWindowTarget]? = nil, nextToken: String? = nil) {
            self.targets = targets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case nextToken = "NextToken"
        }
    }

    public struct InstanceInformationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "valueSet", required: true, type: .list)
        ]
        /// The name of the filter. 
        public let key: InstanceInformationFilterKey
        /// The filter values.
        public let valueSet: [String]

        public init(key: InstanceInformationFilterKey, valueSet: [String]) {
            self.key = key
            self.valueSet = valueSet
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case valueSet = "valueSet"
        }
    }

    public struct DescribePatchGroupStateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancesWithMissingPatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithInstalledOtherPatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithNotApplicablePatches", required: false, type: .integer), 
            AWSShapeMember(label: "Instances", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithInstalledPatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithFailedPatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithInstalledRejectedPatches", required: false, type: .integer)
        ]
        /// The number of instances with missing patches from the patch baseline.
        public let instancesWithMissingPatches: Int32?
        /// The number of instances with patches installed that aren't defined in the patch baseline.
        public let instancesWithInstalledOtherPatches: Int32?
        /// The number of instances with patches that aren't applicable.
        public let instancesWithNotApplicablePatches: Int32?
        /// The number of instances in the patch group.
        public let instances: Int32?
        /// The number of instances with installed patches.
        public let instancesWithInstalledPatches: Int32?
        /// The number of instances with patches from the patch baseline that failed to install.
        public let instancesWithFailedPatches: Int32?
        /// The number of instances with patches installed that are specified in a RejectedPatches list. Patches with a status of INSTALLED_REJECTED were typically installed before they were added to a RejectedPatches list.  If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of InstancesWithInstalledRejectedPatches will always be 0 (zero). 
        public let instancesWithInstalledRejectedPatches: Int32?

        public init(instancesWithMissingPatches: Int32? = nil, instancesWithInstalledOtherPatches: Int32? = nil, instancesWithNotApplicablePatches: Int32? = nil, instances: Int32? = nil, instancesWithInstalledPatches: Int32? = nil, instancesWithFailedPatches: Int32? = nil, instancesWithInstalledRejectedPatches: Int32? = nil) {
            self.instancesWithMissingPatches = instancesWithMissingPatches
            self.instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatches
            self.instancesWithNotApplicablePatches = instancesWithNotApplicablePatches
            self.instances = instances
            self.instancesWithInstalledPatches = instancesWithInstalledPatches
            self.instancesWithFailedPatches = instancesWithFailedPatches
            self.instancesWithInstalledRejectedPatches = instancesWithInstalledRejectedPatches
        }

        private enum CodingKeys: String, CodingKey {
            case instancesWithMissingPatches = "InstancesWithMissingPatches"
            case instancesWithInstalledOtherPatches = "InstancesWithInstalledOtherPatches"
            case instancesWithNotApplicablePatches = "InstancesWithNotApplicablePatches"
            case instances = "Instances"
            case instancesWithInstalledPatches = "InstancesWithInstalledPatches"
            case instancesWithFailedPatches = "InstancesWithFailedPatches"
            case instancesWithInstalledRejectedPatches = "InstancesWithInstalledRejectedPatches"
        }
    }

    public struct DeletePatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the deleted patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct GetParametersByPathRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean), 
            AWSShapeMember(label: "Recursive", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterFilters", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// Retrieve all parameters in a hierarchy with their value decrypted.
        public let withDecryption: Bool?
        /// Retrieve all parameters within a hierarchy.  If a user has access to a path, then the user can access all levels of that path. For example, if a user has permission to access path /a, then the user can also access /a/b. Even if a user has explicitly been denied access in IAM for parameter /a, they can still call the GetParametersByPath API action recursively and view /a/b. 
        public let recursive: Bool?
        /// Filters to limit the request results.  You can't filter using the parameter name. 
        public let parameterFilters: [ParameterStringFilter]?
        /// The hierarchy for the parameter. Hierarchies start with a forward slash (/) and end with the parameter name. A parameter name hierarchy can have a maximum of 15 levels. Here is an example of a hierarchy: /Finance/Prod/IAD/WinServ2016/license33 
        public let path: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, withDecryption: Bool? = nil, recursive: Bool? = nil, parameterFilters: [ParameterStringFilter]? = nil, path: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.withDecryption = withDecryption
            self.recursive = recursive
            self.parameterFilters = parameterFilters
            self.path = path
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case withDecryption = "WithDecryption"
            case recursive = "Recursive"
            case parameterFilters = "ParameterFilters"
            case path = "Path"
            case maxResults = "MaxResults"
        }
    }

    public struct PutInventoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// Information about the request.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
        }
    }

    public struct DescribeMaintenanceWindowTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the Maintenance Window whose tasks should be retrieved.
        public let windowId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType.
        public let filters: [MaintenanceWindowFilter]?

        public init(nextToken: String? = nil, windowId: String, maxResults: Int32? = nil, filters: [MaintenanceWindowFilter]? = nil) {
            self.nextToken = nextToken
            self.windowId = windowId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case windowId = "WindowId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct InstancePatchState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotApplicableCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "MissingCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstalledRejectedCount", required: false, type: .integer), 
            AWSShapeMember(label: "Operation", required: true, type: .enum), 
            AWSShapeMember(label: "OperationStartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "FailedCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstalledCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstallOverrideList", required: false, type: .string), 
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string), 
            AWSShapeMember(label: "OperationEndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "InstalledOtherCount", required: false, type: .integer), 
            AWSShapeMember(label: "PatchGroup", required: true, type: .string)
        ]
        /// The number of patches from the patch baseline that aren't applicable for the instance and hence aren't installed on the instance.
        public let notApplicableCount: Int32?
        /// The ID of the managed instance the high-level patch compliance information was collected for.
        public let instanceId: String
        /// The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected.
        public let snapshotId: String?
        /// The number of patches from the patch baseline that are applicable for the instance but aren't currently installed.
        public let missingCount: Int32?
        /// The number of instances with patches installed that are specified in a RejectedPatches list. Patches with a status of InstalledRejected were typically installed before they were added to a RejectedPatches list.  If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of InstalledRejectedCount will always be 0 (zero). 
        public let installedRejectedCount: Int32?
        /// The type of patching operation that was performed: SCAN (assess patch compliance state) or INSTALL (install missing patches).
        public let operation: PatchOperationType
        /// The time the most recent patching operation was started on the instance.
        public let operationStartTime: TimeStamp
        /// The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install.
        public let failedCount: Int32?
        /// The number of patches from the patch baseline that are installed on the instance.
        public let installedCount: Int32?
        /// An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This patch installation list, which you maintain in an Amazon S3 bucket in YAML format and specify in the SSM document AWS-RunPatchBaseline, overrides the patches specified by the default patch baseline. For more information about the InstallOverrideList parameter, see About the SSM Document AWS-RunPatchBaseline in the AWS Systems Manager User Guide.
        public let installOverrideList: String?
        /// The ID of the patch baseline used to patch the instance.
        public let baselineId: String
        /// Placeholder information. This field will always be empty in the current release of the service.
        public let ownerInformation: String?
        /// The time the most recent patching operation completed on the instance.
        public let operationEndTime: TimeStamp
        /// The number of patches not specified in the patch baseline that are installed on the instance.
        public let installedOtherCount: Int32?
        /// The name of the patch group the managed instance belongs to.
        public let patchGroup: String

        public init(notApplicableCount: Int32? = nil, instanceId: String, snapshotId: String? = nil, missingCount: Int32? = nil, installedRejectedCount: Int32? = nil, operation: PatchOperationType, operationStartTime: TimeStamp, failedCount: Int32? = nil, installedCount: Int32? = nil, installOverrideList: String? = nil, baselineId: String, ownerInformation: String? = nil, operationEndTime: TimeStamp, installedOtherCount: Int32? = nil, patchGroup: String) {
            self.notApplicableCount = notApplicableCount
            self.instanceId = instanceId
            self.snapshotId = snapshotId
            self.missingCount = missingCount
            self.installedRejectedCount = installedRejectedCount
            self.operation = operation
            self.operationStartTime = operationStartTime
            self.failedCount = failedCount
            self.installedCount = installedCount
            self.installOverrideList = installOverrideList
            self.baselineId = baselineId
            self.ownerInformation = ownerInformation
            self.operationEndTime = operationEndTime
            self.installedOtherCount = installedOtherCount
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case notApplicableCount = "NotApplicableCount"
            case instanceId = "InstanceId"
            case snapshotId = "SnapshotId"
            case missingCount = "MissingCount"
            case installedRejectedCount = "InstalledRejectedCount"
            case operation = "Operation"
            case operationStartTime = "OperationStartTime"
            case failedCount = "FailedCount"
            case installedCount = "InstalledCount"
            case installOverrideList = "InstallOverrideList"
            case baselineId = "BaselineId"
            case ownerInformation = "OwnerInformation"
            case operationEndTime = "OperationEndTime"
            case installedOtherCount = "InstalledOtherCount"
            case patchGroup = "PatchGroup"
        }
    }

    public struct GetAutomationExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionId", required: true, type: .string)
        ]
        /// The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated.
        public let automationExecutionId: String

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionId = "AutomationExecutionId"
        }
    }

    public struct DescribeInventoryDeletionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryDeletions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of status items for deleted inventory.
        public let inventoryDeletions: [InventoryDeletionStatusItem]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(inventoryDeletions: [InventoryDeletionStatusItem]? = nil, nextToken: String? = nil) {
            self.inventoryDeletions = inventoryDeletions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryDeletions = "InventoryDeletions"
            case nextToken = "NextToken"
        }
    }

    public struct ScheduledWindowExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionTime", required: false, type: .string), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The time, in ISO-8601 Extended format, that the Maintenance Window is scheduled to be run.
        public let executionTime: String?
        /// The ID of the Maintenance Window to be run.
        public let windowId: String?
        /// The name of the Maintenance Window to be run.
        public let name: String?

        public init(executionTime: String? = nil, windowId: String? = nil, name: String? = nil) {
            self.executionTime = executionTime
            self.windowId = windowId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case executionTime = "ExecutionTime"
            case windowId = "WindowId"
            case name = "Name"
        }
    }

    public struct InstanceAssociationOutputUrl: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3OutputUrl", required: false, type: .structure)
        ]
        /// The URL of Amazon S3 bucket where you want to store the results of this request.
        public let s3OutputUrl: S3OutputUrl?

        public init(s3OutputUrl: S3OutputUrl? = nil) {
            self.s3OutputUrl = s3OutputUrl
        }

        private enum CodingKeys: String, CodingKey {
            case s3OutputUrl = "S3OutputUrl"
        }
    }

    public struct DeregisterPatchBaselineForPatchGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: false, type: .string), 
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The name of the patch group deregistered from the patch baseline.
        public let patchGroup: String?
        /// The ID of the patch baseline the patch group was deregistered from.
        public let baselineId: String?

        public init(patchGroup: String? = nil, baselineId: String? = nil) {
            self.patchGroup = patchGroup
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case baselineId = "BaselineId"
        }
    }

    public enum DocumentStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case active = "Active"
        case updating = "Updating"
        case deleting = "Deleting"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct ParameterMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedPattern", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .long), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModifiedUser", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// A parameter name can include only the following letters and symbols. a-zA-Z0-9_.-
        public let allowedPattern: String?
        /// The parameter version.
        public let version: Int64?
        /// Description of the parameter actions.
        public let description: String?
        /// The ID of the query key used for this parameter.
        public let keyId: String?
        /// Date the parameter was last changed or updated.
        public let lastModifiedDate: TimeStamp?
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        public let lastModifiedUser: String?
        /// The type of parameter. Valid parameter types include the following: String, String list, Secure string.
        public let `type`: ParameterType?
        /// The parameter name.
        public let name: String?

        public init(allowedPattern: String? = nil, version: Int64? = nil, description: String? = nil, keyId: String? = nil, lastModifiedDate: TimeStamp? = nil, lastModifiedUser: String? = nil, type: ParameterType? = nil, name: String? = nil) {
            self.allowedPattern = allowedPattern
            self.version = version
            self.description = description
            self.keyId = keyId
            self.lastModifiedDate = lastModifiedDate
            self.lastModifiedUser = lastModifiedUser
            self.`type` = `type`
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPattern = "AllowedPattern"
            case version = "Version"
            case description = "Description"
            case keyId = "KeyId"
            case lastModifiedDate = "LastModifiedDate"
            case lastModifiedUser = "LastModifiedUser"
            case `type` = "Type"
            case name = "Name"
        }
    }

    public struct AutomationExecutionMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetParameterName", required: false, type: .string), 
            AWSShapeMember(label: "ExecutedBy", required: false, type: .string), 
            AWSShapeMember(label: "CurrentStepName", required: false, type: .string), 
            AWSShapeMember(label: "FailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "Outputs", required: false, type: .map), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "AutomationType", required: false, type: .enum), 
            AWSShapeMember(label: "CurrentAction", required: false, type: .string), 
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "ResolvedTargets", required: false, type: .structure), 
            AWSShapeMember(label: "ExecutionEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "AutomationExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "TargetMaps", required: false, type: .list), 
            AWSShapeMember(label: "ExecutionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LogFile", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "AutomationExecutionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "ParentAutomationExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string)
        ]
        /// The list of execution outputs as defined in the Automation document.
        public let targetParameterName: String?
        /// The IAM role ARN of the user who executed the Automation.
        public let executedBy: String?
        /// The name of the currently executing step.
        public let currentStepName: String?
        /// The list of execution outputs as defined in the Automation document.
        public let failureMessage: String?
        /// The list of execution outputs as defined in the Automation document.
        public let outputs: [String: [String]]?
        /// The name of the Automation document used during execution.
        public let documentName: String?
        /// Use this filter with DescribeAutomationExecution. Specify either Local of CrossAccount. CrossAccount is an Automation that executes in multiple AWS Regions and accounts. For more information, see Concurrently Executing Automations in Multiple AWS Regions and Accounts in the AWS Systems Manager User Guide. 
        public let automationType: AutomationType?
        /// The action of the currently executing step.
        public let currentAction: String?
        /// The Automation execution mode.
        public let mode: ExecutionMode?
        /// A list of targets that resolved during the execution.
        public let resolvedTargets: ResolvedTargets?
        /// The time the execution finished. This is not populated if the execution is still in progress.
        public let executionEndTime: TimeStamp?
        /// The targets defined by the user when starting the Automation.
        public let targets: [Target]?
        /// The execution ID.
        public let automationExecutionId: String?
        /// The specified key-value mapping of document parameters to target resources.
        public let targetMaps: [[String: [String]]]?
        /// The time the execution started.&gt;
        public let executionStartTime: TimeStamp?
        /// An Amazon S3 bucket where execution information is stored.
        public let logFile: String?
        /// The document version used during the execution.
        public let documentVersion: String?
        /// The list of execution outputs as defined in the Automation document.
        public let target: String?
        /// The MaxConcurrency value specified by the user when starting the Automation.
        public let maxConcurrency: String?
        /// The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out, or Cancelled.
        public let automationExecutionStatus: AutomationExecutionStatus?
        /// The ExecutionId of the parent Automation.
        public let parentAutomationExecutionId: String?
        /// The MaxErrors value specified by the user when starting the Automation.
        public let maxErrors: String?

        public init(targetParameterName: String? = nil, executedBy: String? = nil, currentStepName: String? = nil, failureMessage: String? = nil, outputs: [String: [String]]? = nil, documentName: String? = nil, automationType: AutomationType? = nil, currentAction: String? = nil, mode: ExecutionMode? = nil, resolvedTargets: ResolvedTargets? = nil, executionEndTime: TimeStamp? = nil, targets: [Target]? = nil, automationExecutionId: String? = nil, targetMaps: [[String: [String]]]? = nil, executionStartTime: TimeStamp? = nil, logFile: String? = nil, documentVersion: String? = nil, target: String? = nil, maxConcurrency: String? = nil, automationExecutionStatus: AutomationExecutionStatus? = nil, parentAutomationExecutionId: String? = nil, maxErrors: String? = nil) {
            self.targetParameterName = targetParameterName
            self.executedBy = executedBy
            self.currentStepName = currentStepName
            self.failureMessage = failureMessage
            self.outputs = outputs
            self.documentName = documentName
            self.automationType = automationType
            self.currentAction = currentAction
            self.mode = mode
            self.resolvedTargets = resolvedTargets
            self.executionEndTime = executionEndTime
            self.targets = targets
            self.automationExecutionId = automationExecutionId
            self.targetMaps = targetMaps
            self.executionStartTime = executionStartTime
            self.logFile = logFile
            self.documentVersion = documentVersion
            self.target = target
            self.maxConcurrency = maxConcurrency
            self.automationExecutionStatus = automationExecutionStatus
            self.parentAutomationExecutionId = parentAutomationExecutionId
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case targetParameterName = "TargetParameterName"
            case executedBy = "ExecutedBy"
            case currentStepName = "CurrentStepName"
            case failureMessage = "FailureMessage"
            case outputs = "Outputs"
            case documentName = "DocumentName"
            case automationType = "AutomationType"
            case currentAction = "CurrentAction"
            case mode = "Mode"
            case resolvedTargets = "ResolvedTargets"
            case executionEndTime = "ExecutionEndTime"
            case targets = "Targets"
            case automationExecutionId = "AutomationExecutionId"
            case targetMaps = "TargetMaps"
            case executionStartTime = "ExecutionStartTime"
            case logFile = "LogFile"
            case documentVersion = "DocumentVersion"
            case target = "Target"
            case maxConcurrency = "MaxConcurrency"
            case automationExecutionStatus = "AutomationExecutionStatus"
            case parentAutomationExecutionId = "ParentAutomationExecutionId"
            case maxErrors = "MaxErrors"
        }
    }

    public struct DescribeMaintenanceWindowsForTargetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the Maintenance Window targets and tasks an instance is associated with.
        public let windowIdentities: [MaintenanceWindowIdentityForTarget]?
        /// The token for the next set of items to return. (You use this token in the next call.)
        public let nextToken: String?

        public init(windowIdentities: [MaintenanceWindowIdentityForTarget]? = nil, nextToken: String? = nil) {
            self.windowIdentities = windowIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowIdentities = "WindowIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct DocumentDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hash", required: false, type: .string), 
            AWSShapeMember(label: "Sha1", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "HashType", required: false, type: .enum), 
            AWSShapeMember(label: "AttachmentsInformation", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "StatusInformation", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "VersionName", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .string), 
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "PlatformTypes", required: false, type: .list)
        ]
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        public let hash: String?
        /// The SHA1 hash of the document, which you can use for verification.
        public let sha1: String?
        /// The latest version of the document.
        public let latestVersion: String?
        /// The date when the document was created.
        public let createdDate: TimeStamp?
        /// The hash type of the document. Valid values include Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        public let hashType: DocumentHashType?
        /// Details about the document attachments, including names, locations, sizes, etc.
        public let attachmentsInformation: [AttachmentInformation]?
        /// The tags, or metadata, that have been applied to the document.
        public let tags: [Tag]?
        /// A description of the parameters for a document.
        public let parameters: [DocumentParameter]?
        /// The type of document.
        public let documentType: DocumentType?
        /// A message returned by AWS Systems Manager that explains the Status value. For example, a Failed status might be explained by the StatusInformation message, "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."
        public let statusInformation: String?
        /// The AWS user account that created the document.
        public let owner: String?
        /// A description of the document. 
        public let description: String?
        /// The default version.
        public let defaultVersion: String?
        /// The status of the Systems Manager document.
        public let status: DocumentStatus?
        /// The name of the Systems Manager document.
        public let name: String?
        /// The version of the artifact associated with the document.
        public let versionName: String?
        /// The document version.
        public let documentVersion: String?
        /// The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference in the AWS CloudFormation User Guide. 
        public let targetType: String?
        /// The document format, either JSON or YAML.
        public let documentFormat: DocumentFormat?
        /// The schema version.
        public let schemaVersion: String?
        /// The list of OS platforms compatible with this Systems Manager document. 
        public let platformTypes: [PlatformType]?

        public init(hash: String? = nil, sha1: String? = nil, latestVersion: String? = nil, createdDate: TimeStamp? = nil, hashType: DocumentHashType? = nil, attachmentsInformation: [AttachmentInformation]? = nil, tags: [Tag]? = nil, parameters: [DocumentParameter]? = nil, documentType: DocumentType? = nil, statusInformation: String? = nil, owner: String? = nil, description: String? = nil, defaultVersion: String? = nil, status: DocumentStatus? = nil, name: String? = nil, versionName: String? = nil, documentVersion: String? = nil, targetType: String? = nil, documentFormat: DocumentFormat? = nil, schemaVersion: String? = nil, platformTypes: [PlatformType]? = nil) {
            self.hash = hash
            self.sha1 = sha1
            self.latestVersion = latestVersion
            self.createdDate = createdDate
            self.hashType = hashType
            self.attachmentsInformation = attachmentsInformation
            self.tags = tags
            self.parameters = parameters
            self.documentType = documentType
            self.statusInformation = statusInformation
            self.owner = owner
            self.description = description
            self.defaultVersion = defaultVersion
            self.status = status
            self.name = name
            self.versionName = versionName
            self.documentVersion = documentVersion
            self.targetType = targetType
            self.documentFormat = documentFormat
            self.schemaVersion = schemaVersion
            self.platformTypes = platformTypes
        }

        private enum CodingKeys: String, CodingKey {
            case hash = "Hash"
            case sha1 = "Sha1"
            case latestVersion = "LatestVersion"
            case createdDate = "CreatedDate"
            case hashType = "HashType"
            case attachmentsInformation = "AttachmentsInformation"
            case tags = "Tags"
            case parameters = "Parameters"
            case documentType = "DocumentType"
            case statusInformation = "StatusInformation"
            case owner = "Owner"
            case description = "Description"
            case defaultVersion = "DefaultVersion"
            case status = "Status"
            case name = "Name"
            case versionName = "VersionName"
            case documentVersion = "DocumentVersion"
            case targetType = "TargetType"
            case documentFormat = "DocumentFormat"
            case schemaVersion = "SchemaVersion"
            case platformTypes = "PlatformTypes"
        }
    }

    public struct DescribeMaintenanceWindowTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the Maintenance Window whose targets should be retrieved.
        public let windowId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation.
        public let filters: [MaintenanceWindowFilter]?

        public init(nextToken: String? = nil, windowId: String, maxResults: Int32? = nil, filters: [MaintenanceWindowFilter]? = nil) {
            self.nextToken = nextToken
            self.windowId = windowId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case windowId = "WindowId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct DescribeAutomationExecutionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionMetadataList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of details about each automation execution which has occurred which matches the filter specification, if any.
        public let automationExecutionMetadataList: [AutomationExecutionMetadata]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(automationExecutionMetadataList: [AutomationExecutionMetadata]? = nil, nextToken: String? = nil) {
            self.automationExecutionMetadataList = automationExecutionMetadataList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionMetadataList = "AutomationExecutionMetadataList"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteResourceDataSyncRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncName", required: true, type: .string)
        ]
        /// The name of the configuration to delete.
        public let syncName: String

        public init(syncName: String) {
            self.syncName = syncName
        }

        private enum CodingKeys: String, CodingKey {
            case syncName = "SyncName"
        }
    }

    public struct InstanceAssociationOutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Location", required: false, type: .structure)
        ]
        /// An Amazon S3 bucket where you want to store the results of this request.
        public let s3Location: S3OutputLocation?

        public init(s3Location: S3OutputLocation? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "S3Location"
        }
    }

    public enum DocumentHashType: String, CustomStringConvertible, Codable {
        case sha256 = "Sha256"
        case sha1 = "Sha1"
        public var description: String { return self.rawValue }
    }

    public struct GetAutomationExecutionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecution", required: false, type: .structure)
        ]
        /// Detailed information about the current state of an automation execution.
        public let automationExecution: AutomationExecution?

        public init(automationExecution: AutomationExecution? = nil) {
            self.automationExecution = automationExecution
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecution = "AutomationExecution"
        }
    }

    public struct ListDocumentVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The document versions.
        public let documentVersions: [DocumentVersionInfo]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(documentVersions: [DocumentVersionInfo]? = nil, nextToken: String? = nil) {
            self.documentVersions = documentVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersions = "DocumentVersions"
            case nextToken = "NextToken"
        }
    }

    public struct InstanceAssociationStatusInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "OutputUrl", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionSummary", required: false, type: .string), 
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// The version of the association applied to the instance.
        public let associationVersion: String?
        /// Status information about the instance association.
        public let status: String?
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        public let outputUrl: InstanceAssociationOutputUrl?
        /// The instance ID where the association was created.
        public let instanceId: String?
        /// Detailed status information about the instance association.
        public let detailedStatus: String?
        /// Summary information about association execution.
        public let executionSummary: String?
        /// The name of the association applied to the instance.
        public let associationName: String?
        /// The date the instance association executed. 
        public let executionDate: TimeStamp?
        /// An error code returned by the request to create the association.
        public let errorCode: String?
        /// The name of the association.
        public let name: String?
        /// The association document verions.
        public let documentVersion: String?
        /// The association ID.
        public let associationId: String?

        public init(associationVersion: String? = nil, status: String? = nil, outputUrl: InstanceAssociationOutputUrl? = nil, instanceId: String? = nil, detailedStatus: String? = nil, executionSummary: String? = nil, associationName: String? = nil, executionDate: TimeStamp? = nil, errorCode: String? = nil, name: String? = nil, documentVersion: String? = nil, associationId: String? = nil) {
            self.associationVersion = associationVersion
            self.status = status
            self.outputUrl = outputUrl
            self.instanceId = instanceId
            self.detailedStatus = detailedStatus
            self.executionSummary = executionSummary
            self.associationName = associationName
            self.executionDate = executionDate
            self.errorCode = errorCode
            self.name = name
            self.documentVersion = documentVersion
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationVersion = "AssociationVersion"
            case status = "Status"
            case outputUrl = "OutputUrl"
            case instanceId = "InstanceId"
            case detailedStatus = "DetailedStatus"
            case executionSummary = "ExecutionSummary"
            case associationName = "AssociationName"
            case executionDate = "ExecutionDate"
            case errorCode = "ErrorCode"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case associationId = "AssociationId"
        }
    }

    public struct RegisterTaskWithMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TaskType", required: true, type: .enum), 
            AWSShapeMember(label: "TaskArn", required: true, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: true, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "TaskInvocationParameters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxErrors", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window the task should be added to.
        public let windowId: String
        /// A structure containing information about an Amazon S3 bucket to write instance-level logs to.    LoggingInfo has been deprecated. To specify an S3 bucket to contain logs, instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let loggingInfo: LoggingInfo?
        /// The parameters that should be passed to the task when it is executed.   TaskParameters has been deprecated. To specify parameters to pass to a task when it runs, instead use the Parameters option in the TaskInvocationParameters structure. For information about how Systems Manager handles these options for the supported Maintenance Window task types, see MaintenanceWindowTaskInvocationParameters. 
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The targets (either instances or Maintenance Window targets). Specify instances using the following format:   Key=InstanceIds,Values=&lt;instance-id-1&gt;,&lt;instance-id-2&gt;  Specify Maintenance Window targets using the following format:  Key=&lt;WindowTargetIds&gt;,Values=&lt;window-target-id-1&gt;,&lt;window-target-id-2&gt; 
        public let targets: [Target]
        /// An optional description for the task.
        public let description: String?
        /// The type of task being registered.
        public let taskType: MaintenanceWindowTaskType
        /// The ARN of the task to execute 
        public let taskArn: String
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        public let priority: Int32?
        /// An optional name for the task.
        public let name: String?
        /// User-provided idempotency token.
        public let clientToken: String?
        /// The maximum number of targets this task can be run for in parallel.
        public let maxConcurrency: String
        /// The role to assume when running the Maintenance Window task. If you do not specify a service role ARN, Systems Manager will use your account's service-linked role for Systems Manager by default. If no service-linked role for Systems Manager exists in your account, it will be created when you run RegisterTaskWithMaintenanceWindow without specifying a service role ARN. For more information, see Service-Linked Role Permissions for Systems Manager and Should I Use a Service-Linked Role or a Custom Service Role to Run Maintenance Window Tasks?  in the AWS Systems Manager User Guide.
        public let serviceRoleArn: String?
        /// The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty. 
        public let taskInvocationParameters: MaintenanceWindowTaskInvocationParameters?
        /// The maximum number of errors allowed before this task stops being scheduled.
        public let maxErrors: String

        public init(windowId: String, loggingInfo: LoggingInfo? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, targets: [Target], description: String? = nil, taskType: MaintenanceWindowTaskType, taskArn: String, priority: Int32? = nil, name: String? = nil, clientToken: String? = nil, maxConcurrency: String, serviceRoleArn: String? = nil, taskInvocationParameters: MaintenanceWindowTaskInvocationParameters? = nil, maxErrors: String) {
            self.windowId = windowId
            self.loggingInfo = loggingInfo
            self.taskParameters = taskParameters
            self.targets = targets
            self.description = description
            self.taskType = taskType
            self.taskArn = taskArn
            self.priority = priority
            self.name = name
            self.clientToken = clientToken
            self.maxConcurrency = maxConcurrency
            self.serviceRoleArn = serviceRoleArn
            self.taskInvocationParameters = taskInvocationParameters
            self.maxErrors = maxErrors
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case loggingInfo = "LoggingInfo"
            case taskParameters = "TaskParameters"
            case targets = "Targets"
            case description = "Description"
            case taskType = "TaskType"
            case taskArn = "TaskArn"
            case priority = "Priority"
            case name = "Name"
            case clientToken = "ClientToken"
            case maxConcurrency = "MaxConcurrency"
            case serviceRoleArn = "ServiceRoleArn"
            case taskInvocationParameters = "TaskInvocationParameters"
            case maxErrors = "MaxErrors"
        }
    }

    public struct InventoryItemAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataType", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The data type of the inventory item attribute. 
        public let dataType: InventoryAttributeDataType
        /// Name of the inventory item attribute.
        public let name: String

        public init(dataType: InventoryAttributeDataType, name: String) {
            self.dataType = dataType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case dataType = "DataType"
            case name = "Name"
        }
    }

    public struct GetParameterHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public let withDecryption: Bool?
        /// The name of a parameter you want to query.
        public let name: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, withDecryption: Bool? = nil, name: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.withDecryption = withDecryption
            self.name = name
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case withDecryption = "WithDecryption"
            case name = "Name"
            case maxResults = "MaxResults"
        }
    }

    public struct ModifyDocumentPermissionResponse: AWSShape {

    }

    public struct DeleteAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]
        /// The name of the Systems Manager document.
        public let name: String?
        /// The association ID that you want to delete.
        public let associationId: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(name: String? = nil, associationId: String? = nil, instanceId: String? = nil) {
            self.name = name
            self.associationId = associationId
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case associationId = "AssociationId"
            case instanceId = "InstanceId"
        }
    }

    public struct DeleteDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the document.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ListAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The associations.
        public let associations: [Association]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(associations: [Association]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "Associations"
            case nextToken = "NextToken"
        }
    }

    public enum StepExecutionFilterKey: String, CustomStringConvertible, Codable {
        case starttimebefore = "StartTimeBefore"
        case starttimeafter = "StartTimeAfter"
        case stepexecutionstatus = "StepExecutionStatus"
        case stepexecutionid = "StepExecutionId"
        case stepname = "StepName"
        case action = "Action"
        public var description: String { return self.rawValue }
    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "TaskId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the Maintenance Window execution the task is part of.
        public let windowExecutionId: String
        /// The ID of the specific task in the Maintenance Window task that should be retrieved.
        public let taskId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED.
        public let filters: [MaintenanceWindowFilter]?

        public init(nextToken: String? = nil, windowExecutionId: String, taskId: String, maxResults: Int32? = nil, filters: [MaintenanceWindowFilter]? = nil) {
            self.nextToken = nextToken
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case windowExecutionId = "WindowExecutionId"
            case taskId = "TaskId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct StopAutomationExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The execution ID of the Automation to stop.
        public let automationExecutionId: String
        /// The stop request type. Valid types include the following: Cancel and Complete. The default type is Cancel.
        public let `type`: StopType?

        public init(automationExecutionId: String, type: StopType? = nil) {
            self.automationExecutionId = automationExecutionId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionId = "AutomationExecutionId"
            case `type` = "Type"
        }
    }

    public struct ListComplianceSummariesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComplianceSummaryItems", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of compliant and non-compliant summary counts based on compliance types. For example, this call returns State Manager associations, patches, or custom compliance types according to the filter criteria that you specified.
        public let complianceSummaryItems: [ComplianceSummaryItem]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(complianceSummaryItems: [ComplianceSummaryItem]? = nil, nextToken: String? = nil) {
            self.complianceSummaryItems = complianceSummaryItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case complianceSummaryItems = "ComplianceSummaryItems"
            case nextToken = "NextToken"
        }
    }

    public struct CommandFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: CommandFilterKey
        /// The filter value. Valid values for each filter key are as follows:    InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-07-07T00:00:00Z to see a list of command executions occurring July 7, 2018, and later.    InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-07-07T00:00:00Z to see a list of command executions from before July 7, 2018.    Status: Specify a valid command status to see a list of all command executions with that status. Status values you can specify include:    Pending     InProgress     Success     Cancelled     Failed     TimedOut     Cancelling       DocumentName: Specify name of the SSM document for which you want to see command execution results. For example, specify AWS-RunPatchBaseline to see command executions that used this SSM document to perform security patching operations on instances.     ExecutionStage: Specify one of the following values:    Executing: Returns a list of command executions that are currently still running.    Complete: Returns a list of command executions that have already completed.     
        public let value: String

        public init(key: CommandFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public enum Fault: String, CustomStringConvertible, Codable {
        case client = "Client"
        case server = "Server"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public enum AttachmentHashType: String, CustomStringConvertible, Codable {
        case sha256 = "Sha256"
        public var description: String { return self.rawValue }
    }

    public enum PatchComplianceDataState: String, CustomStringConvertible, Codable {
        case installed = "INSTALLED"
        case installedOther = "INSTALLED_OTHER"
        case installedRejected = "INSTALLED_REJECTED"
        case missing = "MISSING"
        case notApplicable = "NOT_APPLICABLE"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Parameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .long), 
            AWSShapeMember(label: "Selector", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "SourceResult", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The parameter version.
        public let version: Int64?
        /// Either the version number or the label used to retrieve the parameter value. Specify selectors by using one of the following formats: parameter_name:version parameter_name:label
        public let selector: String?
        /// The parameter value.
        public let value: String?
        /// Applies to parameters that reference information in other AWS services. SourceResult is the raw result or response from the source.
        public let sourceResult: String?
        /// The Amazon Resource Name (ARN) of the parameter.
        public let arn: String?
        /// Date the parameter was last changed or updated and the parameter version was created.
        public let lastModifiedDate: TimeStamp?
        /// The type of parameter. Valid values include the following: String, String list, Secure string.
        public let `type`: ParameterType?
        /// The name of the parameter.
        public let name: String?

        public init(version: Int64? = nil, selector: String? = nil, value: String? = nil, sourceResult: String? = nil, arn: String? = nil, lastModifiedDate: TimeStamp? = nil, type: ParameterType? = nil, name: String? = nil) {
            self.version = version
            self.selector = selector
            self.value = value
            self.sourceResult = sourceResult
            self.arn = arn
            self.lastModifiedDate = lastModifiedDate
            self.`type` = `type`
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case selector = "Selector"
            case value = "Value"
            case sourceResult = "SourceResult"
            case arn = "ARN"
            case lastModifiedDate = "LastModifiedDate"
            case `type` = "Type"
            case name = "Name"
        }
    }

    public struct DescribeMaintenanceWindowTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tasks", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the tasks in the Maintenance Window.
        public let tasks: [MaintenanceWindowTask]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(tasks: [MaintenanceWindowTask]? = nil, nextToken: String? = nil) {
            self.tasks = tasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tasks = "Tasks"
            case nextToken = "NextToken"
        }
    }

    public enum PatchComplianceLevel: String, CustomStringConvertible, Codable {
        case critical = "CRITICAL"
        case high = "HIGH"
        case medium = "MEDIUM"
        case low = "LOW"
        case informational = "INFORMATIONAL"
        case unspecified = "UNSPECIFIED"
        public var description: String { return self.rawValue }
    }

    public struct DeletePatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The ID of the patch baseline to delete.
        public let baselineId: String

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public enum DocumentParameterType: String, CustomStringConvertible, Codable {
        case string = "String"
        case stringlist = "StringList"
        public var description: String { return self.rawValue }
    }

    public struct RegisterPatchBaselineForPatchGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: true, type: .string), 
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The name of the patch group that should be registered with the patch baseline.
        public let patchGroup: String
        /// The ID of the patch baseline to register the patch group with.
        public let baselineId: String

        public init(patchGroup: String, baselineId: String) {
            self.patchGroup = patchGroup
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case baselineId = "BaselineId"
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum)
        ]
        ///  One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.   Do not enter personally identifiable information in this field. 
        public let tags: [Tag]
        /// The resource ID you want to tag. Use the ID of the resource. Here are some examples: ManagedInstance: mi-012345abcde MaintenanceWindow: mw-012345abcde PatchBaseline: pb-012345abcde For the Document and Parameter values, use the name of the resource.  The ManagedInstance type for this API action is only for on-premises managed instances. You must specify the the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f. 
        public let resourceId: String
        /// Specifies the type of resource you are tagging.  The ManagedInstance type for this API action is for on-premises managed instances. You must specify the the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f. 
        public let resourceType: ResourceTypeForTagging

        public init(tags: [Tag], resourceId: String, resourceType: ResourceTypeForTagging) {
            self.tags = tags
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
        }
    }

    public struct DescribeMaintenanceWindowExecutionTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the Maintenance Window execution whose task executions should be retrieved.
        public let windowExecutionId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED. 
        public let filters: [MaintenanceWindowFilter]?

        public init(nextToken: String? = nil, windowExecutionId: String, maxResults: Int32? = nil, filters: [MaintenanceWindowFilter]? = nil) {
            self.nextToken = nextToken
            self.windowExecutionId = windowExecutionId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case windowExecutionId = "WindowExecutionId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct GetMaintenanceWindowExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window execution that includes the task.
        public let windowExecutionId: String

        public init(windowExecutionId: String) {
            self.windowExecutionId = windowExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
        }
    }

    public struct RegisterPatchBaselineForPatchGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: false, type: .string), 
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The name of the patch group registered with the patch baseline.
        public let patchGroup: String?
        /// The ID of the patch baseline the patch group was registered with.
        public let baselineId: String?

        public init(patchGroup: String? = nil, baselineId: String? = nil) {
            self.patchGroup = patchGroup
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case baselineId = "BaselineId"
        }
    }

    public struct GetDefaultPatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum)
        ]
        /// Returns the default patch baseline for the specified operating system.
        public let operatingSystem: OperatingSystem?

        public init(operatingSystem: OperatingSystem? = nil) {
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct DescribeEffectiveInstanceAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The instance ID for which you want to view all associations.
        public let instanceId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, instanceId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case instanceId = "InstanceId"
        }
    }

    public struct InventoryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .list), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal 
        public let values: [String]
        /// The name of the filter key.
        public let key: String
        /// The type of filter. Valid values include the following: "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
        public let `type`: InventoryQueryOperatorType?

        public init(values: [String], key: String, type: InventoryQueryOperatorType? = nil) {
            self.values = values
            self.key = key
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
            case `type` = "Type"
        }
    }

    public struct InventoryDeletionSummaryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Count", required: false, type: .integer), 
            AWSShapeMember(label: "RemainingCount", required: false, type: .integer)
        ]
        /// The inventory type version.
        public let version: String?
        /// A count of the number of deleted items.
        public let count: Int32?
        /// The remaining number of items to delete.
        public let remainingCount: Int32?

        public init(version: String? = nil, count: Int32? = nil, remainingCount: Int32? = nil) {
            self.version = version
            self.count = count
            self.remainingCount = remainingCount
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case count = "Count"
            case remainingCount = "RemainingCount"
        }
    }

    public struct DescribeMaintenanceWindowsForTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Targets", required: true, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The type of resource you want to retrieve information about. For example, "INSTANCE".
        public let resourceType: MaintenanceWindowResourceType
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The instance ID or key/value pair to retrieve information about.
        public let targets: [Target]

        public init(nextToken: String? = nil, resourceType: MaintenanceWindowResourceType, maxResults: Int32? = nil, targets: [Target]) {
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.maxResults = maxResults
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceType = "ResourceType"
            case maxResults = "MaxResults"
            case targets = "Targets"
        }
    }

    public struct InventoryResultItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHash", required: false, type: .string), 
            AWSShapeMember(label: "CaptureTime", required: false, type: .string), 
            AWSShapeMember(label: "Content", required: true, type: .list), 
            AWSShapeMember(label: "SchemaVersion", required: true, type: .string), 
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        public let contentHash: String?
        /// The time inventory item data was captured.
        public let captureTime: String?
        /// Contains all the inventory data of the item type. Results include attribute names and values. 
        public let content: [[String: String]]
        /// The schema version for the inventory result item/
        public let schemaVersion: String
        /// The name of the inventory result item type.
        public let typeName: String

        public init(contentHash: String? = nil, captureTime: String? = nil, content: [[String: String]], schemaVersion: String, typeName: String) {
            self.contentHash = contentHash
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case contentHash = "ContentHash"
            case captureTime = "CaptureTime"
            case content = "Content"
            case schemaVersion = "SchemaVersion"
            case typeName = "TypeName"
        }
    }

    public enum AssociationExecutionFilterKey: String, CustomStringConvertible, Codable {
        case executionid = "ExecutionId"
        case status = "Status"
        case createdtime = "CreatedTime"
        public var description: String { return self.rawValue }
    }

    public struct ResultAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value: AWS:InstanceInformation.
        public let typeName: String

        public init(typeName: String) {
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
        }
    }

    public enum InventoryDeletionStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case complete = "Complete"
        public var description: String { return self.rawValue }
    }

    public struct DeleteParametersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Names", required: true, type: .list)
        ]
        /// The names of the parameters to delete.
        public let names: [String]

        public init(names: [String]) {
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case names = "Names"
        }
    }

    public enum ResourceTypeForTagging: String, CustomStringConvertible, Codable {
        case document = "Document"
        case managedinstance = "ManagedInstance"
        case maintenancewindow = "MaintenanceWindow"
        case parameter = "Parameter"
        case patchbaseline = "PatchBaseline"
        public var description: String { return self.rawValue }
    }

    public struct GetParameterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameter", required: false, type: .structure)
        ]
        /// Information about a parameter.
        public let parameter: Parameter?

        public init(parameter: Parameter? = nil) {
            self.parameter = parameter
        }

        private enum CodingKeys: String, CodingKey {
            case parameter = "Parameter"
        }
    }

    public struct UpdateMaintenanceWindowTargetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The updated targets.
        public let targets: [Target]?
        /// The target ID specified in the update request.
        public let windowTargetId: String?
        /// The Maintenance Window ID specified in the update request.
        public let windowId: String?
        /// The updated name.
        public let name: String?
        /// The updated description.
        public let description: String?
        /// The updated owner.
        public let ownerInformation: String?

        public init(targets: [Target]? = nil, windowTargetId: String? = nil, windowId: String? = nil, name: String? = nil, description: String? = nil, ownerInformation: String? = nil) {
            self.targets = targets
            self.windowTargetId = windowTargetId
            self.windowId = windowId
            self.name = name
            self.description = description
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case windowTargetId = "WindowTargetId"
            case windowId = "WindowId"
            case name = "Name"
            case description = "Description"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct CompliantSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SeveritySummary", required: false, type: .structure), 
            AWSShapeMember(label: "CompliantCount", required: false, type: .integer)
        ]
        /// A summary of the compliance severity by compliance type.
        public let severitySummary: SeveritySummary?
        /// The total number of resources that are compliant.
        public let compliantCount: Int32?

        public init(severitySummary: SeveritySummary? = nil, compliantCount: Int32? = nil) {
            self.severitySummary = severitySummary
            self.compliantCount = compliantCount
        }

        private enum CodingKeys: String, CodingKey {
            case severitySummary = "SeveritySummary"
            case compliantCount = "CompliantCount"
        }
    }

    public struct GetPatchBaselineForPatchGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: true, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum)
        ]
        /// The name of the patch group whose patch baseline should be retrieved.
        public let patchGroup: String
        /// Returns he operating system rule specified for patch groups using the patch baseline.
        public let operatingSystem: OperatingSystem?

        public init(patchGroup: String, operatingSystem: OperatingSystem? = nil) {
            self.patchGroup = patchGroup
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct GetPatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RejectedPatchesAction", required: false, type: .enum), 
            AWSShapeMember(label: "Sources", required: false, type: .list), 
            AWSShapeMember(label: "ModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "PatchGroups", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApprovedPatchesComplianceLevel", required: false, type: .enum), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "ApprovedPatchesEnableNonSecurity", required: false, type: .boolean), 
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The action specified to take on patches included in the RejectedPatches list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency.
        public let rejectedPatchesAction: PatchAction?
        /// Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only.
        public let sources: [PatchSource]?
        /// The date the patch baseline was last modified.
        public let modifiedDate: TimeStamp?
        /// The date the patch baseline was created.
        public let createdDate: TimeStamp?
        /// A list of explicitly rejected patches for the baseline.
        public let rejectedPatches: [String]?
        /// A list of explicitly approved patches for the baseline.
        public let approvedPatches: [String]?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// Patch groups included in the patch baseline.
        public let patchGroups: [String]?
        /// A description of the patch baseline.
        public let description: String?
        /// Returns the specified compliance severity level for approved patches in the patch baseline.
        public let approvedPatchesComplianceLevel: PatchComplianceLevel?
        /// Returns the operating system specified for the patch baseline.
        public let operatingSystem: OperatingSystem?
        /// The name of the patch baseline.
        public let name: String?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
        public let approvedPatchesEnableNonSecurity: Bool?
        /// The ID of the retrieved patch baseline.
        public let baselineId: String?

        public init(rejectedPatchesAction: PatchAction? = nil, sources: [PatchSource]? = nil, modifiedDate: TimeStamp? = nil, createdDate: TimeStamp? = nil, rejectedPatches: [String]? = nil, approvedPatches: [String]? = nil, globalFilters: PatchFilterGroup? = nil, patchGroups: [String]? = nil, description: String? = nil, approvedPatchesComplianceLevel: PatchComplianceLevel? = nil, operatingSystem: OperatingSystem? = nil, name: String? = nil, approvalRules: PatchRuleGroup? = nil, approvedPatchesEnableNonSecurity: Bool? = nil, baselineId: String? = nil) {
            self.rejectedPatchesAction = rejectedPatchesAction
            self.sources = sources
            self.modifiedDate = modifiedDate
            self.createdDate = createdDate
            self.rejectedPatches = rejectedPatches
            self.approvedPatches = approvedPatches
            self.globalFilters = globalFilters
            self.patchGroups = patchGroups
            self.description = description
            self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
            self.operatingSystem = operatingSystem
            self.name = name
            self.approvalRules = approvalRules
            self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case rejectedPatchesAction = "RejectedPatchesAction"
            case sources = "Sources"
            case modifiedDate = "ModifiedDate"
            case createdDate = "CreatedDate"
            case rejectedPatches = "RejectedPatches"
            case approvedPatches = "ApprovedPatches"
            case globalFilters = "GlobalFilters"
            case patchGroups = "PatchGroups"
            case description = "Description"
            case approvedPatchesComplianceLevel = "ApprovedPatchesComplianceLevel"
            case operatingSystem = "OperatingSystem"
            case name = "Name"
            case approvalRules = "ApprovalRules"
            case approvedPatchesEnableNonSecurity = "ApprovedPatchesEnableNonSecurity"
            case baselineId = "BaselineId"
        }
    }

    public struct DescribeInventoryDeletionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DeletionId", required: false, type: .string)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Specify the delete inventory ID for which you want information. This ID was returned by the DeleteInventory action.
        public let deletionId: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, deletionId: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.deletionId = deletionId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case deletionId = "DeletionId"
        }
    }

    public struct ComplianceItemEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .map), 
            AWSShapeMember(label: "Severity", required: true, type: .enum)
        ]
        /// The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. 
        public let title: String?
        /// The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.
        public let status: ComplianceStatus
        /// The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.
        public let id: String?
        /// A "Key": "Value" tag combination for the compliance item.
        public let details: [String: String]?
        /// The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.
        public let severity: ComplianceSeverity

        public init(title: String? = nil, status: ComplianceStatus, id: String? = nil, details: [String: String]? = nil, severity: ComplianceSeverity) {
            self.title = title
            self.status = status
            self.id = id
            self.details = details
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case title = "Title"
            case status = "Status"
            case id = "Id"
            case details = "Details"
            case severity = "Severity"
        }
    }

    public struct InstanceInformationStringFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The filter key name to describe your instances. For example: "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|"AssociationStatus"|"Tag Key"
        public let key: String
        /// The filter values.
        public let values: [String]

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct GetMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string)
        ]
        /// The ID of the desired Maintenance Window.
        public let windowId: String

        public init(windowId: String) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct DeleteParameterResult: AWSShape {

    }

    public struct DeleteAssociationResult: AWSShape {

    }

    public enum AutomationExecutionFilterKey: String, CustomStringConvertible, Codable {
        case documentnameprefix = "DocumentNamePrefix"
        case executionstatus = "ExecutionStatus"
        case executionid = "ExecutionId"
        case parentexecutionid = "ParentExecutionId"
        case currentaction = "CurrentAction"
        case starttimebefore = "StartTimeBefore"
        case starttimeafter = "StartTimeAfter"
        case automationtype = "AutomationType"
        public var description: String { return self.rawValue }
    }

    public struct ComplianceExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ExecutionType", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionId", required: false, type: .string)
        ]
        /// The time the execution ran as a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
        public let executionTime: TimeStamp
        /// The type of execution. For example, Command is a valid execution type.
        public let executionType: String?
        /// An ID created by the system when PutComplianceItems was called. For example, CommandID is a valid execution ID. You can use this ID in subsequent calls.
        public let executionId: String?

        public init(executionTime: TimeStamp, executionType: String? = nil, executionId: String? = nil) {
            self.executionTime = executionTime
            self.executionType = executionType
            self.executionId = executionId
        }

        private enum CodingKeys: String, CodingKey {
            case executionTime = "ExecutionTime"
            case executionType = "ExecutionType"
            case executionId = "ExecutionId"
        }
    }

    public struct CreateResourceDataSyncRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncName", required: true, type: .string), 
            AWSShapeMember(label: "S3Destination", required: true, type: .structure)
        ]
        /// A name for the configuration.
        public let syncName: String
        /// Amazon S3 configuration details for the sync.
        public let s3Destination: ResourceDataSyncS3Destination

        public init(syncName: String, s3Destination: ResourceDataSyncS3Destination) {
            self.syncName = syncName
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case syncName = "SyncName"
            case s3Destination = "S3Destination"
        }
    }

    public struct CommandPlugin: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ResponseStartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "Output", required: false, type: .string), 
            AWSShapeMember(label: "StandardOutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "ResponseFinishDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorUrl", required: false, type: .string)
        ]
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?
        /// A numeric response code generated after executing the plugin. 
        public let responseCode: Int32?
        /// The status of this plugin. You can execute a document with multiple plugins.
        public let status: CommandPluginStatus?
        /// The time the plugin started executing. 
        public let responseStartDateTime: TimeStamp?
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript  test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix; i-1234567876543 is the instance ID; awsrunShellScript is the name of the plugin.
        public let outputS3BucketName: String?
        /// A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Understanding Command Statuses in the AWS Systems Manager User Guide. StatusDetails can be one of the following values:   Pending: The command has not been sent to the instance.   In Progress: The command has been sent to the instance but has not reached a terminal state.   Success: The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Undeliverable: The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public let statusDetails: String?
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript  test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix; i-1234567876543 is the instance ID; awsrunShellScript is the name of the plugin.
        public let outputS3KeyPrefix: String?
        /// Output of the plugin execution.
        public let output: String?
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If the Amazon S3 bucket for the command was not specified, then this string is empty.
        public let standardOutputUrl: String?
        /// The time the plugin stopped executing. Could stop prematurely if, for example, a cancel command was sent. 
        public let responseFinishDateTime: TimeStamp?
        /// The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent. 
        public let name: String?
        /// The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty.
        public let standardErrorUrl: String?

        public init(outputS3Region: String? = nil, responseCode: Int32? = nil, status: CommandPluginStatus? = nil, responseStartDateTime: TimeStamp? = nil, outputS3BucketName: String? = nil, statusDetails: String? = nil, outputS3KeyPrefix: String? = nil, output: String? = nil, standardOutputUrl: String? = nil, responseFinishDateTime: TimeStamp? = nil, name: String? = nil, standardErrorUrl: String? = nil) {
            self.outputS3Region = outputS3Region
            self.responseCode = responseCode
            self.status = status
            self.responseStartDateTime = responseStartDateTime
            self.outputS3BucketName = outputS3BucketName
            self.statusDetails = statusDetails
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.output = output
            self.standardOutputUrl = standardOutputUrl
            self.responseFinishDateTime = responseFinishDateTime
            self.name = name
            self.standardErrorUrl = standardErrorUrl
        }

        private enum CodingKeys: String, CodingKey {
            case outputS3Region = "OutputS3Region"
            case responseCode = "ResponseCode"
            case status = "Status"
            case responseStartDateTime = "ResponseStartDateTime"
            case outputS3BucketName = "OutputS3BucketName"
            case statusDetails = "StatusDetails"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case output = "Output"
            case standardOutputUrl = "StandardOutputUrl"
            case responseFinishDateTime = "ResponseFinishDateTime"
            case name = "Name"
            case standardErrorUrl = "StandardErrorUrl"
        }
    }

    public struct UpdateAssociationStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationStatus", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The association status.
        public let associationStatus: AssociationStatus
        /// The name of the Systems Manager document.
        public let name: String
        /// The ID of the instance.
        public let instanceId: String

        public init(associationStatus: AssociationStatus, name: String, instanceId: String) {
            self.associationStatus = associationStatus
            self.name = name
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case associationStatus = "AssociationStatus"
            case name = "Name"
            case instanceId = "InstanceId"
        }
    }

    public struct DocumentIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformTypes", required: false, type: .list), 
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "VersionName", required: false, type: .string)
        ]
        /// The tags, or metadata, that have been applied to the document.
        public let tags: [Tag]?
        /// The AWS user account that created the document.
        public let owner: String?
        /// The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference in the AWS CloudFormation User Guide. 
        public let targetType: String?
        /// The schema version.
        public let schemaVersion: String?
        /// The document type.
        public let documentType: DocumentType?
        /// The operating system platform. 
        public let platformTypes: [PlatformType]?
        /// The document format, either JSON or YAML.
        public let documentFormat: DocumentFormat?
        /// The name of the Systems Manager document.
        public let name: String?
        /// The document version.
        public let documentVersion: String?
        /// An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?

        public init(tags: [Tag]? = nil, owner: String? = nil, targetType: String? = nil, schemaVersion: String? = nil, documentType: DocumentType? = nil, platformTypes: [PlatformType]? = nil, documentFormat: DocumentFormat? = nil, name: String? = nil, documentVersion: String? = nil, versionName: String? = nil) {
            self.tags = tags
            self.owner = owner
            self.targetType = targetType
            self.schemaVersion = schemaVersion
            self.documentType = documentType
            self.platformTypes = platformTypes
            self.documentFormat = documentFormat
            self.name = name
            self.documentVersion = documentVersion
            self.versionName = versionName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case owner = "Owner"
            case targetType = "TargetType"
            case schemaVersion = "SchemaVersion"
            case documentType = "DocumentType"
            case platformTypes = "PlatformTypes"
            case documentFormat = "DocumentFormat"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case versionName = "VersionName"
        }
    }

    public enum InventorySchemaDeleteOption: String, CustomStringConvertible, Codable {
        case disableschema = "DisableSchema"
        case deleteschema = "DeleteSchema"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInstanceAssociationsStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceAssociationStatusInfos", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Status information about the association.
        public let instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]? = nil, nextToken: String? = nil) {
            self.instanceAssociationStatusInfos = instanceAssociationStatusInfos
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceAssociationStatusInfos = "InstanceAssociationStatusInfos"
            case nextToken = "NextToken"
        }
    }

    public enum InstanceInformationFilterKey: String, CustomStringConvertible, Codable {
        case instanceids = "InstanceIds"
        case agentversion = "AgentVersion"
        case pingstatus = "PingStatus"
        case platformtypes = "PlatformTypes"
        case activationids = "ActivationIds"
        case iamrole = "IamRole"
        case resourcetype = "ResourceType"
        case associationstatus = "AssociationStatus"
        public var description: String { return self.rawValue }
    }

    public enum AssociationStatusName: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case success = "Success"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct PutParameterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .long)
        ]
        /// The new version number of a parameter. If you edit a parameter value, Parameter Store automatically creates a new version and assigns this new version a unique ID. You can reference a parameter version ID in API actions or in Systems Manager documents (SSM documents). By default, if you don't specify a specific version, the system returns the latest parameter value when a parameter is called.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
        }
    }

    public struct UpdateMaintenanceWindowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleTimezone", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Replace", required: false, type: .boolean), 
            AWSShapeMember(label: "EndDate", required: false, type: .string), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: false, type: .boolean), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or "Asia/Seoul". For more information, see the Time Zone Database on the IANA website.
        public let scheduleTimezone: String?
        /// The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or "Asia/Seoul". For more information, see the Time Zone Database on the IANA website.
        public let startDate: String?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?
        /// An optional description for the update request.
        public let description: String?
        /// If True, then all fields that are required by the CreateMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null. 
        public let replace: Bool?
        /// The date and time, in ISO-8601 Extended format, for when you want the Maintenance Window to become inactive. EndDate allows you to set a date and time in the future when the Maintenance Window will no longer run.
        public let endDate: String?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool?
        /// Whether the Maintenance Window is enabled.
        public let enabled: Bool?
        /// The ID of the Maintenance Window to update.
        public let windowId: String
        /// The name of the Maintenance Window.
        public let name: String?

        public init(scheduleTimezone: String? = nil, startDate: String? = nil, schedule: String? = nil, duration: Int32? = nil, description: String? = nil, replace: Bool? = nil, endDate: String? = nil, cutoff: Int32? = nil, allowUnassociatedTargets: Bool? = nil, enabled: Bool? = nil, windowId: String, name: String? = nil) {
            self.scheduleTimezone = scheduleTimezone
            self.startDate = startDate
            self.schedule = schedule
            self.duration = duration
            self.description = description
            self.replace = replace
            self.endDate = endDate
            self.cutoff = cutoff
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.enabled = enabled
            self.windowId = windowId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleTimezone = "ScheduleTimezone"
            case startDate = "StartDate"
            case schedule = "Schedule"
            case duration = "Duration"
            case description = "Description"
            case replace = "Replace"
            case endDate = "EndDate"
            case cutoff = "Cutoff"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case enabled = "Enabled"
            case windowId = "WindowId"
            case name = "Name"
        }
    }

    public struct Association: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "LastExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Overview", required: false, type: .structure), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "AssociationName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The association version.
        public let associationVersion: String?
        /// A cron expression that specifies a schedule when the association runs.
        public let scheduleExpression: String?
        /// The date on which the association was last run.
        public let lastExecutionDate: TimeStamp?
        /// The ID of the instance.
        public let instanceId: String?
        /// Information about the association.
        public let overview: AssociationOverview?
        /// The instances targeted by the request to create an association. 
        public let targets: [Target]?
        /// The association name.
        public let associationName: String?
        /// The name of the Systems Manager document.
        public let name: String?
        /// The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule.
        public let associationId: String?
        /// The version of the document used in the association.
        public let documentVersion: String?

        public init(associationVersion: String? = nil, scheduleExpression: String? = nil, lastExecutionDate: TimeStamp? = nil, instanceId: String? = nil, overview: AssociationOverview? = nil, targets: [Target]? = nil, associationName: String? = nil, name: String? = nil, associationId: String? = nil, documentVersion: String? = nil) {
            self.associationVersion = associationVersion
            self.scheduleExpression = scheduleExpression
            self.lastExecutionDate = lastExecutionDate
            self.instanceId = instanceId
            self.overview = overview
            self.targets = targets
            self.associationName = associationName
            self.name = name
            self.associationId = associationId
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case associationVersion = "AssociationVersion"
            case scheduleExpression = "ScheduleExpression"
            case lastExecutionDate = "LastExecutionDate"
            case instanceId = "InstanceId"
            case overview = "Overview"
            case targets = "Targets"
            case associationName = "AssociationName"
            case name = "Name"
            case associationId = "AssociationId"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct GetInventorySchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Aggregator", required: false, type: .boolean), 
            AWSShapeMember(label: "SubType", required: false, type: .boolean)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The type of inventory item to return.
        public let typeName: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Returns inventory schemas that support aggregation. For example, this call returns the AWS:InstanceInformation type, because it supports aggregation based on the PlatformName, PlatformType, and PlatformVersion attributes.
        public let aggregator: Bool?
        /// Returns the sub-type schema for a specified inventory type.
        public let subType: Bool?

        public init(nextToken: String? = nil, typeName: String? = nil, maxResults: Int32? = nil, aggregator: Bool? = nil, subType: Bool? = nil) {
            self.nextToken = nextToken
            self.typeName = typeName
            self.maxResults = maxResults
            self.aggregator = aggregator
            self.subType = subType
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case typeName = "TypeName"
            case maxResults = "MaxResults"
            case aggregator = "Aggregator"
            case subType = "SubType"
        }
    }

    public struct ListCommandsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Commands", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// (Optional) The list of commands requested by the user. 
        public let commands: [Command]?
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(commands: [Command]? = nil, nextToken: String? = nil) {
            self.commands = commands
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case commands = "Commands"
            case nextToken = "NextToken"
        }
    }

    public struct DescribePatchGroupStateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: true, type: .string)
        ]
        /// The name of the patch group whose patch snapshot should be retrieved.
        public let patchGroup: String

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
        }
    }

    public struct MaintenanceWindowFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The name of the filter.
        public let key: String?
        /// The filter values.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct UpdateMaintenanceWindowTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTargetId", required: true, type: .string), 
            AWSShapeMember(label: "Replace", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The target ID to modify.
        public let windowTargetId: String
        /// If True, then all fields that are required by the RegisterTargetWithMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null.
        public let replace: Bool?
        /// An optional description for the update.
        public let description: String?
        /// The targets to add or replace.
        public let targets: [Target]?
        /// The Maintenance Window ID with which to modify the target.
        public let windowId: String
        /// A name for the update.
        public let name: String?
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public let ownerInformation: String?

        public init(windowTargetId: String, replace: Bool? = nil, description: String? = nil, targets: [Target]? = nil, windowId: String, name: String? = nil, ownerInformation: String? = nil) {
            self.windowTargetId = windowTargetId
            self.replace = replace
            self.description = description
            self.targets = targets
            self.windowId = windowId
            self.name = name
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case windowTargetId = "WindowTargetId"
            case replace = "Replace"
            case description = "Description"
            case targets = "Targets"
            case windowId = "WindowId"
            case name = "Name"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct SeveritySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MediumCount", required: false, type: .integer), 
            AWSShapeMember(label: "InformationalCount", required: false, type: .integer), 
            AWSShapeMember(label: "UnspecifiedCount", required: false, type: .integer), 
            AWSShapeMember(label: "CriticalCount", required: false, type: .integer), 
            AWSShapeMember(label: "HighCount", required: false, type: .integer), 
            AWSShapeMember(label: "LowCount", required: false, type: .integer)
        ]
        /// The total number of resources or compliance items that have a severity level of medium. Medium severity is determined by the organization that published the compliance items.
        public let mediumCount: Int32?
        /// The total number of resources or compliance items that have a severity level of informational. Informational severity is determined by the organization that published the compliance items.
        public let informationalCount: Int32?
        /// The total number of resources or compliance items that have a severity level of unspecified. Unspecified severity is determined by the organization that published the compliance items.
        public let unspecifiedCount: Int32?
        /// The total number of resources or compliance items that have a severity level of critical. Critical severity is determined by the organization that published the compliance items.
        public let criticalCount: Int32?
        /// The total number of resources or compliance items that have a severity level of high. High severity is determined by the organization that published the compliance items.
        public let highCount: Int32?
        /// The total number of resources or compliance items that have a severity level of low. Low severity is determined by the organization that published the compliance items.
        public let lowCount: Int32?

        public init(mediumCount: Int32? = nil, informationalCount: Int32? = nil, unspecifiedCount: Int32? = nil, criticalCount: Int32? = nil, highCount: Int32? = nil, lowCount: Int32? = nil) {
            self.mediumCount = mediumCount
            self.informationalCount = informationalCount
            self.unspecifiedCount = unspecifiedCount
            self.criticalCount = criticalCount
            self.highCount = highCount
            self.lowCount = lowCount
        }

        private enum CodingKeys: String, CodingKey {
            case mediumCount = "MediumCount"
            case informationalCount = "InformationalCount"
            case unspecifiedCount = "UnspecifiedCount"
            case criticalCount = "CriticalCount"
            case highCount = "HighCount"
            case lowCount = "LowCount"
        }
    }

    public struct DescribeInstanceInformationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInformationList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The instance information list.
        public let instanceInformationList: [InstanceInformation]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty. 
        public let nextToken: String?

        public init(instanceInformationList: [InstanceInformation]? = nil, nextToken: String? = nil) {
            self.instanceInformationList = instanceInformationList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInformationList = "InstanceInformationList"
            case nextToken = "NextToken"
        }
    }

    public struct ListAssociationVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationVersions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about all versions of the association for the specified association ID.
        public let associationVersions: [AssociationVersionInfo]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(associationVersions: [AssociationVersionInfo]? = nil, nextToken: String? = nil) {
            self.associationVersions = associationVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associationVersions = "AssociationVersions"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAutomationStepExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ReverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "AutomationExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// A boolean that indicates whether to list step executions in reverse order by start time. The default value is false.
        public let reverseOrder: Bool?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The Automation execution ID for which you want step execution descriptions.
        public let automationExecutionId: String
        /// One or more filters to limit the number of step executions returned by the request.
        public let filters: [StepExecutionFilter]?

        public init(nextToken: String? = nil, reverseOrder: Bool? = nil, maxResults: Int32? = nil, automationExecutionId: String, filters: [StepExecutionFilter]? = nil) {
            self.nextToken = nextToken
            self.reverseOrder = reverseOrder
            self.maxResults = maxResults
            self.automationExecutionId = automationExecutionId
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case reverseOrder = "ReverseOrder"
            case maxResults = "MaxResults"
            case automationExecutionId = "AutomationExecutionId"
            case filters = "Filters"
        }
    }

    public struct ResourceDataSyncS3Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncFormat", required: true, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Region", required: true, type: .string), 
            AWSShapeMember(label: "AWSKMSKeyARN", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: true, type: .string)
        ]
        /// A supported sync format. The following format is currently supported: JsonSerDe
        public let syncFormat: ResourceDataSyncS3Format
        /// An Amazon S3 prefix for the bucket.
        public let prefix: String?
        /// The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.
        public let region: String
        /// The ARN of an encryption key for a destination in Amazon S3. Must belong to the same region as the destination Amazon S3 bucket.
        public let aWSKMSKeyARN: String?
        /// The name of the Amazon S3 bucket where the aggregated data is stored.
        public let bucketName: String

        public init(syncFormat: ResourceDataSyncS3Format, prefix: String? = nil, region: String, aWSKMSKeyARN: String? = nil, bucketName: String) {
            self.syncFormat = syncFormat
            self.prefix = prefix
            self.region = region
            self.aWSKMSKeyARN = aWSKMSKeyARN
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case syncFormat = "SyncFormat"
            case prefix = "Prefix"
            case region = "Region"
            case aWSKMSKeyARN = "AWSKMSKeyARN"
            case bucketName = "BucketName"
        }
    }

    public struct MaintenanceWindowTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The ID of the target.
        public let windowTargetId: String?
        /// A description of the target.
        public let description: String?
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public let targets: [Target]?
        /// The Maintenance Window ID where the target is registered.
        public let windowId: String?
        /// The target name.
        public let name: String?
        /// The type of target.
        public let resourceType: MaintenanceWindowResourceType?
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public let ownerInformation: String?

        public init(windowTargetId: String? = nil, description: String? = nil, targets: [Target]? = nil, windowId: String? = nil, name: String? = nil, resourceType: MaintenanceWindowResourceType? = nil, ownerInformation: String? = nil) {
            self.windowTargetId = windowTargetId
            self.description = description
            self.targets = targets
            self.windowId = windowId
            self.name = name
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case windowTargetId = "WindowTargetId"
            case description = "Description"
            case targets = "Targets"
            case windowId = "WindowId"
            case name = "Name"
            case resourceType = "ResourceType"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct StopAutomationExecutionResult: AWSShape {

    }

    public struct InstanceInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IPAddress", required: false, type: .string), 
            AWSShapeMember(label: "ActivationId", required: false, type: .string), 
            AWSShapeMember(label: "PlatformName", required: false, type: .string), 
            AWSShapeMember(label: "RegistrationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "PingStatus", required: false, type: .enum), 
            AWSShapeMember(label: "LastPingDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssociationOverview", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "IsLatestVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "PlatformType", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "LastSuccessfulAssociationExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ComputerName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "AssociationStatus", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastAssociationExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "IamRole", required: false, type: .string), 
            AWSShapeMember(label: "AgentVersion", required: false, type: .string)
        ]
        /// The IP address of the managed instance.
        public let iPAddress: String?
        /// The activation ID created by Systems Manager when the server or VM was registered.
        public let activationId: String?
        /// The name of the operating system platform running on your instance. 
        public let platformName: String?
        /// The date the server or VM was registered with AWS as a managed instance.
        public let registrationDate: TimeStamp?
        /// Connection status of SSM Agent. 
        public let pingStatus: PingStatus?
        /// The date and time when agent last pinged Systems Manager service. 
        public let lastPingDateTime: TimeStamp?
        /// Information about the association.
        public let associationOverview: InstanceAggregatedAssociationOverview?
        /// The instance ID. 
        public let instanceId: String?
        /// Indicates whether latest version of SSM Agent is running on your instance. Some older versions of Windows Server use the EC2Config service to process SSM requests. For this reason, this field does not indicate whether or not the latest version is installed on Windows managed instances.
        public let isLatestVersion: Bool?
        /// The operating system platform type. 
        public let platformType: PlatformType?
        /// The version of the OS platform running on your instance. 
        public let platformVersion: String?
        /// The last date the association was successfully run.
        public let lastSuccessfulAssociationExecutionDate: TimeStamp?
        /// The fully qualified host name of the managed instance.
        public let computerName: String?
        /// The type of instance. Instances are either EC2 instances or managed instances. 
        public let resourceType: ResourceType?
        /// The status of the association.
        public let associationStatus: String?
        /// The name of the managed instance.
        public let name: String?
        /// The date the association was last executed.
        public let lastAssociationExecutionDate: TimeStamp?
        /// The Amazon Identity and Access Management (IAM) role assigned to the on-premises Systems Manager managed instances. This call does not return the IAM role for Amazon EC2 instances. 
        public let iamRole: String?
        /// The version of SSM Agent running on your Linux instance. 
        public let agentVersion: String?

        public init(iPAddress: String? = nil, activationId: String? = nil, platformName: String? = nil, registrationDate: TimeStamp? = nil, pingStatus: PingStatus? = nil, lastPingDateTime: TimeStamp? = nil, associationOverview: InstanceAggregatedAssociationOverview? = nil, instanceId: String? = nil, isLatestVersion: Bool? = nil, platformType: PlatformType? = nil, platformVersion: String? = nil, lastSuccessfulAssociationExecutionDate: TimeStamp? = nil, computerName: String? = nil, resourceType: ResourceType? = nil, associationStatus: String? = nil, name: String? = nil, lastAssociationExecutionDate: TimeStamp? = nil, iamRole: String? = nil, agentVersion: String? = nil) {
            self.iPAddress = iPAddress
            self.activationId = activationId
            self.platformName = platformName
            self.registrationDate = registrationDate
            self.pingStatus = pingStatus
            self.lastPingDateTime = lastPingDateTime
            self.associationOverview = associationOverview
            self.instanceId = instanceId
            self.isLatestVersion = isLatestVersion
            self.platformType = platformType
            self.platformVersion = platformVersion
            self.lastSuccessfulAssociationExecutionDate = lastSuccessfulAssociationExecutionDate
            self.computerName = computerName
            self.resourceType = resourceType
            self.associationStatus = associationStatus
            self.name = name
            self.lastAssociationExecutionDate = lastAssociationExecutionDate
            self.iamRole = iamRole
            self.agentVersion = agentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case iPAddress = "IPAddress"
            case activationId = "ActivationId"
            case platformName = "PlatformName"
            case registrationDate = "RegistrationDate"
            case pingStatus = "PingStatus"
            case lastPingDateTime = "LastPingDateTime"
            case associationOverview = "AssociationOverview"
            case instanceId = "InstanceId"
            case isLatestVersion = "IsLatestVersion"
            case platformType = "PlatformType"
            case platformVersion = "PlatformVersion"
            case lastSuccessfulAssociationExecutionDate = "LastSuccessfulAssociationExecutionDate"
            case computerName = "ComputerName"
            case resourceType = "ResourceType"
            case associationStatus = "AssociationStatus"
            case name = "Name"
            case lastAssociationExecutionDate = "LastAssociationExecutionDate"
            case iamRole = "IamRole"
            case agentVersion = "AgentVersion"
        }
    }

    public struct PatchFilterGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchFilters", required: true, type: .list)
        ]
        /// The set of patch filters that make up the group.
        public let patchFilters: [PatchFilter]

        public init(patchFilters: [PatchFilter]) {
            self.patchFilters = patchFilters
        }

        private enum CodingKeys: String, CodingKey {
            case patchFilters = "PatchFilters"
        }
    }

    public struct AssociationExecutionTargetsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .enum)
        ]
        /// The value specified for the key.
        public let value: String
        /// The key value used in the request.
        public let key: AssociationExecutionTargetsFilterKey

        public init(value: String, key: AssociationExecutionTargetsFilterKey) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ModifyDocumentPermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PermissionType", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "AccountIdsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "AccountIdsToAdd", required: false, type: .list)
        ]
        /// The permission type for the document. The permission type can be Share.
        public let permissionType: DocumentPermissionType
        /// The name of the document that you want to share.
        public let name: String
        /// The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or All. This action has a higher priority than AccountIdsToAdd. If you specify an account ID to add and the same ID to remove, the system removes access to the document.
        public let accountIdsToRemove: [String]?
        /// The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or All.
        public let accountIdsToAdd: [String]?

        public init(permissionType: DocumentPermissionType, name: String, accountIdsToRemove: [String]? = nil, accountIdsToAdd: [String]? = nil) {
            self.permissionType = permissionType
            self.name = name
            self.accountIdsToRemove = accountIdsToRemove
            self.accountIdsToAdd = accountIdsToAdd
        }

        private enum CodingKeys: String, CodingKey {
            case permissionType = "PermissionType"
            case name = "Name"
            case accountIdsToRemove = "AccountIdsToRemove"
            case accountIdsToAdd = "AccountIdsToAdd"
        }
    }

    public struct RegisterDefaultPatchBaselineResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the default patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct ResumeSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionId", required: true, type: .string)
        ]
        /// The ID of the disconnected session to resume.
        public let sessionId: String

        public init(sessionId: String) {
            self.sessionId = sessionId
        }

        private enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
        }
    }

    public struct GetDocumentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "StatusInformation", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "DocumentFormat", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AttachmentsContent", required: false, type: .list), 
            AWSShapeMember(label: "VersionName", required: false, type: .string)
        ]
        /// The document version.
        public let documentVersion: String?
        /// A message returned by AWS Systems Manager that explains the Status value. For example, a Failed status might be explained by the StatusInformation message, "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."
        public let statusInformation: String?
        /// The status of the Systems Manager document, such as Creating, Active, Updating, Failed, and Deleting.
        public let status: DocumentStatus?
        /// The document type.
        public let documentType: DocumentType?
        /// The contents of the Systems Manager document.
        public let content: String?
        /// The document format, either JSON or YAML.
        public let documentFormat: DocumentFormat?
        /// The name of the Systems Manager document.
        public let name: String?
        /// A description of the document attachments, including names, locations, sizes, etc.
        public let attachmentsContent: [AttachmentContent]?
        /// The version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and cannot be changed.
        public let versionName: String?

        public init(documentVersion: String? = nil, statusInformation: String? = nil, status: DocumentStatus? = nil, documentType: DocumentType? = nil, content: String? = nil, documentFormat: DocumentFormat? = nil, name: String? = nil, attachmentsContent: [AttachmentContent]? = nil, versionName: String? = nil) {
            self.documentVersion = documentVersion
            self.statusInformation = statusInformation
            self.status = status
            self.documentType = documentType
            self.content = content
            self.documentFormat = documentFormat
            self.name = name
            self.attachmentsContent = attachmentsContent
            self.versionName = versionName
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersion = "DocumentVersion"
            case statusInformation = "StatusInformation"
            case status = "Status"
            case documentType = "DocumentType"
            case content = "Content"
            case documentFormat = "DocumentFormat"
            case name = "Name"
            case attachmentsContent = "AttachmentsContent"
            case versionName = "VersionName"
        }
    }

    public enum CommandFilterKey: String, CustomStringConvertible, Codable {
        case invokedafter = "InvokedAfter"
        case invokedbefore = "InvokedBefore"
        case status = "Status"
        case executionstage = "ExecutionStage"
        case documentname = "DocumentName"
        public var description: String { return self.rawValue }
    }

    public struct DescribeParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Parameters returned by the request.
        public let parameters: [ParameterMetadata]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(parameters: [ParameterMetadata]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public enum MaintenanceWindowExecutionStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case inProgress = "IN_PROGRESS"
        case success = "SUCCESS"
        case failed = "FAILED"
        case timedOut = "TIMED_OUT"
        case cancelling = "CANCELLING"
        case cancelled = "CANCELLED"
        case skippedOverlapping = "SKIPPED_OVERLAPPING"
        public var description: String { return self.rawValue }
    }

    public struct AssociationExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationVersion", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "LastExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string), 
            AWSShapeMember(label: "ResourceCountByStatus", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// The association version.
        public let associationVersion: String?
        /// The status of the association execution.
        public let status: String?
        /// The date of the last execution.
        public let lastExecutionDate: TimeStamp?
        /// The time the execution started.
        public let createdTime: TimeStamp?
        /// Detailed status information about the execution.
        public let detailedStatus: String?
        /// An aggregate status of the resources in the execution based on the status type.
        public let resourceCountByStatus: String?
        /// The execution ID for the association. If the association does not run at intervals or according to a schedule, then the ExecutionID is the same as the AssociationID.
        public let executionId: String?
        /// The association ID.
        public let associationId: String?

        public init(associationVersion: String? = nil, status: String? = nil, lastExecutionDate: TimeStamp? = nil, createdTime: TimeStamp? = nil, detailedStatus: String? = nil, resourceCountByStatus: String? = nil, executionId: String? = nil, associationId: String? = nil) {
            self.associationVersion = associationVersion
            self.status = status
            self.lastExecutionDate = lastExecutionDate
            self.createdTime = createdTime
            self.detailedStatus = detailedStatus
            self.resourceCountByStatus = resourceCountByStatus
            self.executionId = executionId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationVersion = "AssociationVersion"
            case status = "Status"
            case lastExecutionDate = "LastExecutionDate"
            case createdTime = "CreatedTime"
            case detailedStatus = "DetailedStatus"
            case resourceCountByStatus = "ResourceCountByStatus"
            case executionId = "ExecutionId"
            case associationId = "AssociationId"
        }
    }

    public struct GetMaintenanceWindowTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "WindowTaskId", required: true, type: .string)
        ]
        /// The Maintenance Window ID that includes the task to retrieve.
        public let windowId: String
        /// The Maintenance Window task ID to retrieve.
        public let windowTaskId: String

        public init(windowId: String, windowTaskId: String) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTaskId = "WindowTaskId"
        }
    }

    public struct GetMaintenanceWindowExecutionTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "TaskId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window execution that includes the task.
        public let windowExecutionId: String
        /// The ID of the specific task execution in the Maintenance Window task that should be retrieved.
        public let taskId: String

        public init(windowExecutionId: String, taskId: String) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
            case taskId = "TaskId"
        }
    }

    public struct DocumentParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of parameter. The type can be either String or StringList.
        public let `type`: DocumentParameterType?
        /// If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
        public let defaultValue: String?
        /// The name of the parameter.
        public let name: String?
        /// A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
        public let description: String?

        public init(type: DocumentParameterType? = nil, defaultValue: String? = nil, name: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.defaultValue = defaultValue
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case defaultValue = "DefaultValue"
            case name = "Name"
            case description = "Description"
        }
    }

    public enum ResourceDataSyncS3Format: String, CustomStringConvertible, Codable {
        case jsonserde = "JsonSerDe"
        public var description: String { return self.rawValue }
    }

    public struct PutParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "AllowedPattern", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Overwrite", required: false, type: .boolean)
        ]
        /// The parameter value that you want to add to the system.
        public let value: String
        /// Information about the parameter that you want to add to the system. Optional but recommended.  Do not enter personally identifiable information in this field. 
        public let description: String?
        /// The KMS Key ID that you want to use to encrypt a parameter. Either the default AWS Key Management Service (AWS KMS) key automatically assigned to your AWS account or a custom key. Required for parameters that use the SecureString data type. If you don't specify a key ID, the system uses the default key associated with your AWS account.   To use your default AWS KMS key, choose the SecureString data type, and do not specify the Key ID when you create the parameter. The system automatically populates Key ID with your default KMS key.   To use a custom KMS key, choose the SecureString data type with the Key ID parameter.  
        public let keyId: String?
        /// A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: AllowedPattern=^\d+$ 
        public let allowedPattern: String?
        /// The type of parameter that you want to add to the system. Items in a StringList must be separated by a comma (,). You can't use other punctuation or special character to escape items in the list. If you have a parameter value that requires a comma, then use the String data type.   SecureString is not currently supported for AWS CloudFormation templates or in the China Regions. 
        public let `type`: ParameterType
        /// The fully qualified name of the parameter that you want to add to the system. The fully qualified name includes the complete hierarchy of the parameter path and name. For example: /Dev/DBServer/MySQL/db-string13  Naming Constraints:   Parameter names are case sensitive.   A parameter name must be unique within an AWS Region   A parameter name can't be prefixed with "aws" or "ssm" (case-insensitive).   Parameter names can include only the following symbols and letters: a-zA-Z0-9_.-/    A parameter name can't include spaces.   Parameter hierarchies are limited to a maximum depth of fifteen levels.   For additional information about valid values for parameter names, see Requirements and Constraints for Parameter Names in the AWS Systems Manager User Guide.  The maximum length constraint listed below includes capacity for additional system attributes that are not part of the name. The maximum length for the fully qualified parameter name is 1011 characters.  
        public let name: String
        /// Overwrite an existing parameter. If not specified, will default to "false".
        public let overwrite: Bool?

        public init(value: String, description: String? = nil, keyId: String? = nil, allowedPattern: String? = nil, type: ParameterType, name: String, overwrite: Bool? = nil) {
            self.value = value
            self.description = description
            self.keyId = keyId
            self.allowedPattern = allowedPattern
            self.`type` = `type`
            self.name = name
            self.overwrite = overwrite
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case description = "Description"
            case keyId = "KeyId"
            case allowedPattern = "AllowedPattern"
            case `type` = "Type"
            case name = "Name"
            case overwrite = "Overwrite"
        }
    }

    public struct ListAssociationVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The association ID for which you want to view all versions.
        public let associationId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, associationId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.associationId = associationId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case associationId = "AssociationId"
            case maxResults = "MaxResults"
        }
    }

    public enum PatchDeploymentStatus: String, CustomStringConvertible, Codable {
        case approved = "APPROVED"
        case pendingApproval = "PENDING_APPROVAL"
        case explicitApproved = "EXPLICIT_APPROVED"
        case explicitRejected = "EXPLICIT_REJECTED"
        public var description: String { return self.rawValue }
    }

    public struct CreateResourceDataSyncResult: AWSShape {

    }

    public struct DescribeAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// Information about the association.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct DeleteResourceDataSyncResult: AWSShape {

    }

    public struct UpdateDocumentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentDescription", required: false, type: .structure)
        ]
        /// A description of the document that was updated.
        public let documentDescription: DocumentDescription?

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

        private enum CodingKeys: String, CodingKey {
            case documentDescription = "DocumentDescription"
        }
    }

    public struct DescribeAssociationExecutionTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "ExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The association ID that includes the execution for which you want to view details.
        public let associationId: String
        /// The execution ID for which you want to view details.
        public let executionId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Filters for the request. You can specify the following filters and values. Status (EQUAL) ResourceId (EQUAL) ResourceType (EQUAL)
        public let filters: [AssociationExecutionTargetsFilter]?

        public init(nextToken: String? = nil, associationId: String, executionId: String, maxResults: Int32? = nil, filters: [AssociationExecutionTargetsFilter]? = nil) {
            self.nextToken = nextToken
            self.associationId = associationId
            self.executionId = executionId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case associationId = "AssociationId"
            case executionId = "ExecutionId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct ListInventoryEntriesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CaptureTime", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "Entries", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The time that inventory information was collected for the instance(s).
        public let captureTime: String?
        /// The inventory schema version used by the instance(s).
        public let schemaVersion: String?
        /// The instance ID targeted by the request to query inventory information.
        public let instanceId: String?
        /// The type of inventory item returned by the request.
        public let typeName: String?
        /// A list of inventory items on the instance(s).
        public let entries: [[String: String]]?

        public init(nextToken: String? = nil, captureTime: String? = nil, schemaVersion: String? = nil, instanceId: String? = nil, typeName: String? = nil, entries: [[String: String]]? = nil) {
            self.nextToken = nextToken
            self.captureTime = captureTime
            self.schemaVersion = schemaVersion
            self.instanceId = instanceId
            self.typeName = typeName
            self.entries = entries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case captureTime = "CaptureTime"
            case schemaVersion = "SchemaVersion"
            case instanceId = "InstanceId"
            case typeName = "TypeName"
            case entries = "Entries"
        }
    }

    public struct Patch: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReleaseDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProductFamily", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ContentUrl", required: false, type: .string), 
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "MsrcSeverity", required: false, type: .string), 
            AWSShapeMember(label: "Vendor", required: false, type: .string), 
            AWSShapeMember(label: "Language", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Product", required: false, type: .string), 
            AWSShapeMember(label: "MsrcNumber", required: false, type: .string), 
            AWSShapeMember(label: "KbNumber", required: false, type: .string)
        ]
        /// The date the patch was released.
        public let releaseDate: TimeStamp?
        /// The product family the patch is applicable for (for example, Windows).
        public let productFamily: String?
        /// The title of the patch.
        public let title: String?
        /// The URL where more information can be obtained about the patch.
        public let contentUrl: String?
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        public let classification: String?
        /// The ID of the patch (this is different than the Microsoft Knowledge Base ID).
        public let id: String?
        /// The severity of the patch (for example Critical, Important, Moderate).
        public let msrcSeverity: String?
        /// The name of the vendor providing the patch.
        public let vendor: String?
        /// The language of the patch if it's language-specific.
        public let language: String?
        /// The description of the patch.
        public let description: String?
        /// The specific product the patch is applicable for (for example, WindowsServer2016).
        public let product: String?
        /// The ID of the MSRC bulletin the patch is related to.
        public let msrcNumber: String?
        /// The Microsoft Knowledge Base ID of the patch.
        public let kbNumber: String?

        public init(releaseDate: TimeStamp? = nil, productFamily: String? = nil, title: String? = nil, contentUrl: String? = nil, classification: String? = nil, id: String? = nil, msrcSeverity: String? = nil, vendor: String? = nil, language: String? = nil, description: String? = nil, product: String? = nil, msrcNumber: String? = nil, kbNumber: String? = nil) {
            self.releaseDate = releaseDate
            self.productFamily = productFamily
            self.title = title
            self.contentUrl = contentUrl
            self.classification = classification
            self.id = id
            self.msrcSeverity = msrcSeverity
            self.vendor = vendor
            self.language = language
            self.description = description
            self.product = product
            self.msrcNumber = msrcNumber
            self.kbNumber = kbNumber
        }

        private enum CodingKeys: String, CodingKey {
            case releaseDate = "ReleaseDate"
            case productFamily = "ProductFamily"
            case title = "Title"
            case contentUrl = "ContentUrl"
            case classification = "Classification"
            case id = "Id"
            case msrcSeverity = "MsrcSeverity"
            case vendor = "Vendor"
            case language = "Language"
            case description = "Description"
            case product = "Product"
            case msrcNumber = "MsrcNumber"
            case kbNumber = "KbNumber"
        }
    }

    public struct TerminateSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionId", required: true, type: .string)
        ]
        /// The ID of the session to terminate.
        public let sessionId: String

        public init(sessionId: String) {
            self.sessionId = sessionId
        }

        private enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
        }
    }

    public struct PatchGroupPatchBaselineMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: false, type: .string), 
            AWSShapeMember(label: "BaselineIdentity", required: false, type: .structure)
        ]
        /// The name of the patch group registered with the patch baseline.
        public let patchGroup: String?
        /// The patch baseline the patch group is registered with.
        public let baselineIdentity: PatchBaselineIdentity?

        public init(patchGroup: String? = nil, baselineIdentity: PatchBaselineIdentity? = nil) {
            self.patchGroup = patchGroup
            self.baselineIdentity = baselineIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case baselineIdentity = "BaselineIdentity"
        }
    }

    public enum SessionStatus: String, CustomStringConvertible, Codable {
        case connected = "Connected"
        case connecting = "Connecting"
        case disconnected = "Disconnected"
        case terminated = "Terminated"
        case terminating = "Terminating"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// Information about the association.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct InstancePatchStateFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .list), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// The value for the filter, must be an integer greater than or equal to 0.
        public let values: [String]
        /// The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount.
        public let key: String
        /// The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan.
        public let `type`: InstancePatchStateOperatorType

        public init(values: [String], key: String, type: InstancePatchStateOperatorType) {
            self.values = values
            self.key = key
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
            case `type` = "Type"
        }
    }

    public struct DescribeMaintenanceWindowExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the Maintenance Window whose executions should be retrieved.
        public let windowId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Each entry in the array is a structure containing: Key (string, between 1 and 128 characters) Values (array of strings, each string is between 1 and 256 characters) The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.
        public let filters: [MaintenanceWindowFilter]?

        public init(nextToken: String? = nil, windowId: String, maxResults: Int32? = nil, filters: [MaintenanceWindowFilter]? = nil) {
            self.nextToken = nextToken
            self.windowId = windowId
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case windowId = "WindowId"
            case maxResults = "MaxResults"
            case filters = "Filters"
        }
    }

    public struct CreatePatchBaselineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "ApprovedPatchesComplianceLevel", required: false, type: .enum), 
            AWSShapeMember(label: "RejectedPatchesAction", required: false, type: .enum), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Sources", required: false, type: .list), 
            AWSShapeMember(label: "ApprovedPatchesEnableNonSecurity", required: false, type: .boolean)
        ]
        /// User-provided idempotency token.
        public let clientToken: String?
        /// Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
        public let operatingSystem: OperatingSystem?
        /// A list of explicitly approved patches for the baseline. For information about accepted formats for lists of approved patches and rejected patches, see Package Name Formats for Approved and Rejected Patch Lists in the AWS Systems Manager User Guide.
        public let approvedPatches: [String]?
        /// A description of the patch baseline.
        public let description: String?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
        public let approvedPatchesComplianceLevel: PatchComplianceLevel?
        /// The action for Patch Manager to take on patches included in the RejectedPackages list.    ALLOW_AS_DEPENDENCY: A package in the Rejected patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as InstalledOther. This is the default action if no option is specified.    BLOCK: Packages in the RejectedPatches list, and packages that include them as dependencies, are not installed under any circumstances. If a package was installed before it was added to the Rejected patches list, it is considered non-compliant with the patch baseline, and its status is reported as InstalledRejected.  
        public let rejectedPatchesAction: PatchAction?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// A list of explicitly rejected patches for the baseline. For information about accepted formats for lists of approved patches and rejected patches, see Package Name Formats for Approved and Rejected Patch Lists in the AWS Systems Manager User Guide.
        public let rejectedPatches: [String]?
        /// The name of the patch baseline.
        public let name: String
        /// Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only.
        public let sources: [PatchSource]?
        /// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
        public let approvedPatchesEnableNonSecurity: Bool?

        public init(clientToken: String? = nil, operatingSystem: OperatingSystem? = nil, approvedPatches: [String]? = nil, description: String? = nil, approvalRules: PatchRuleGroup? = nil, approvedPatchesComplianceLevel: PatchComplianceLevel? = nil, rejectedPatchesAction: PatchAction? = nil, globalFilters: PatchFilterGroup? = nil, rejectedPatches: [String]? = nil, name: String, sources: [PatchSource]? = nil, approvedPatchesEnableNonSecurity: Bool? = nil) {
            self.clientToken = clientToken
            self.operatingSystem = operatingSystem
            self.approvedPatches = approvedPatches
            self.description = description
            self.approvalRules = approvalRules
            self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
            self.rejectedPatchesAction = rejectedPatchesAction
            self.globalFilters = globalFilters
            self.rejectedPatches = rejectedPatches
            self.name = name
            self.sources = sources
            self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case operatingSystem = "OperatingSystem"
            case approvedPatches = "ApprovedPatches"
            case description = "Description"
            case approvalRules = "ApprovalRules"
            case approvedPatchesComplianceLevel = "ApprovedPatchesComplianceLevel"
            case rejectedPatchesAction = "RejectedPatchesAction"
            case globalFilters = "GlobalFilters"
            case rejectedPatches = "RejectedPatches"
            case name = "Name"
            case sources = "Sources"
            case approvedPatchesEnableNonSecurity = "ApprovedPatchesEnableNonSecurity"
        }
    }

    public struct ListInventoryEntriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "TypeName", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instance ID for which you want inventory information.
        public let instanceId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The type of inventory item for which you want information.
        public let typeName: String
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [InventoryFilter]?

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil, typeName: String, filters: [InventoryFilter]? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
            self.typeName = typeName
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case maxResults = "MaxResults"
            case typeName = "TypeName"
            case filters = "Filters"
        }
    }

    public enum InventoryAttributeDataType: String, CustomStringConvertible, Codable {
        case string = "string"
        case number = "number"
        public var description: String { return self.rawValue }
    }

    public struct GetMaintenanceWindowResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .string), 
            AWSShapeMember(label: "EndDate", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: false, type: .boolean), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NextExecutionTime", required: false, type: .string), 
            AWSShapeMember(label: "ScheduleTimezone", required: false, type: .string)
        ]
        /// Whether the Maintenance Windows is enabled.
        public let enabled: Bool?
        /// The date the Maintenance Window was last modified.
        public let modifiedDate: TimeStamp?
        /// The ID of the created Maintenance Window.
        public let windowId: String?
        /// The date the Maintenance Window was created.
        public let createdDate: TimeStamp?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The date and time, in ISO-8601 Extended format, for when the Maintenance Window is scheduled to become active. The Maintenance Window will not run before this specified time.
        public let startDate: String?
        /// The date and time, in ISO-8601 Extended format, for when the Maintenance Window is scheduled to become inactive. The Maintenance Window will not run after this specified time.
        public let endDate: String?
        /// The description of the Maintenance Window.
        public let description: String?
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?
        /// The name of the Maintenance Window.
        public let name: String?
        /// The next time the Maintenance Window will actually run, taking into account any specified times for the Maintenance Window to become active or inactive.
        public let nextExecutionTime: String?
        /// The time zone that the scheduled Maintenance Window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or "Asia/Seoul". For more information, see the Time Zone Database on the IANA website.
        public let scheduleTimezone: String?

        public init(enabled: Bool? = nil, modifiedDate: TimeStamp? = nil, windowId: String? = nil, createdDate: TimeStamp? = nil, schedule: String? = nil, startDate: String? = nil, endDate: String? = nil, description: String? = nil, allowUnassociatedTargets: Bool? = nil, cutoff: Int32? = nil, duration: Int32? = nil, name: String? = nil, nextExecutionTime: String? = nil, scheduleTimezone: String? = nil) {
            self.enabled = enabled
            self.modifiedDate = modifiedDate
            self.windowId = windowId
            self.createdDate = createdDate
            self.schedule = schedule
            self.startDate = startDate
            self.endDate = endDate
            self.description = description
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.nextExecutionTime = nextExecutionTime
            self.scheduleTimezone = scheduleTimezone
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case modifiedDate = "ModifiedDate"
            case windowId = "WindowId"
            case createdDate = "CreatedDate"
            case schedule = "Schedule"
            case startDate = "StartDate"
            case endDate = "EndDate"
            case description = "Description"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case cutoff = "Cutoff"
            case duration = "Duration"
            case name = "Name"
            case nextExecutionTime = "NextExecutionTime"
            case scheduleTimezone = "ScheduleTimezone"
        }
    }

    public struct UpdateManagedInstanceRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamRole", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The IAM role you want to assign or change.
        public let iamRole: String
        /// The ID of the managed instance where you want to update the role.
        public let instanceId: String

        public init(iamRole: String, instanceId: String) {
            self.iamRole = iamRole
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case iamRole = "IamRole"
            case instanceId = "InstanceId"
        }
    }

    public struct CloudWatchOutputConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLogGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchOutputEnabled", required: false, type: .boolean)
        ]
        /// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
        public let cloudWatchLogGroupName: String?
        /// Enables Systems Manager to send command output to CloudWatch Logs.
        public let cloudWatchOutputEnabled: Bool?

        public init(cloudWatchLogGroupName: String? = nil, cloudWatchOutputEnabled: Bool? = nil) {
            self.cloudWatchLogGroupName = cloudWatchLogGroupName
            self.cloudWatchOutputEnabled = cloudWatchOutputEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogGroupName = "CloudWatchLogGroupName"
            case cloudWatchOutputEnabled = "CloudWatchOutputEnabled"
        }
    }

    public struct DeleteParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidParameters", required: false, type: .list), 
            AWSShapeMember(label: "DeletedParameters", required: false, type: .list)
        ]
        /// The names of parameters that weren't deleted because the parameters are not valid.
        public let invalidParameters: [String]?
        /// The names of the deleted parameters.
        public let deletedParameters: [String]?

        public init(invalidParameters: [String]? = nil, deletedParameters: [String]? = nil) {
            self.invalidParameters = invalidParameters
            self.deletedParameters = deletedParameters
        }

        private enum CodingKeys: String, CodingKey {
            case invalidParameters = "InvalidParameters"
            case deletedParameters = "DeletedParameters"
        }
    }

    public struct DescribeInstancePatchesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Patches", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Each entry in the array is a structure containing: Title (string) KBId (string) Classification (string) Severity (string) State (string, such as "INSTALLED" or "FAILED") InstalledTime (DateTime) InstalledBy (string)
        public let patches: [PatchComplianceData]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(patches: [PatchComplianceData]? = nil, nextToken: String? = nil) {
            self.patches = patches
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case patches = "Patches"
            case nextToken = "NextToken"
        }
    }

}