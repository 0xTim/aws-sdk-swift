// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Devicefarm {

    public struct DeleteUploadResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListDevicesRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Amazon Resource Name (ARN) of the project.
        var arn: String? = nil

        public init() {}

        public init(nextToken: String? = nil, arn: String? = nil) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct NetworkProfile: Serializable, Initializable {
        /// Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
        var uplinkJitterMs: Int64? = nil
        /// The name of the network profile.
        var name: String? = nil
        /// Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
        var downlinkJitterMs: Int64? = nil
        /// Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
        var downlinkDelayMs: Int64? = nil
        /// Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
        var uplinkLossPercent: Int32? = nil
        /// Proportion of received packets that fail to arrive from 0 to 100 percent.
        var downlinkLossPercent: Int32? = nil
        /// The description of the network profile.
        var description: String? = nil
        /// Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
        var uplinkDelayMs: Int64? = nil
        /// The data throughput rate in bits per second, as an integer from 0 to 104857600.
        var uplinkBandwidthBits: Int64? = nil
        /// The type of network profile. Valid values are listed below.
        var type: String? = nil
        /// The data throughput rate in bits per second, as an integer from 0 to 104857600.
        var downlinkBandwidthBits: Int64? = nil
        /// The Amazon Resource Name (ARN) of the network profile.
        var arn: String? = nil

        public init() {}

        public init(uplinkJitterMs: Int64? = nil, name: String? = nil, downlinkJitterMs: Int64? = nil, downlinkDelayMs: Int64? = nil, uplinkLossPercent: Int32? = nil, downlinkLossPercent: Int32? = nil, description: String? = nil, uplinkDelayMs: Int64? = nil, uplinkBandwidthBits: Int64? = nil, type: String? = nil, downlinkBandwidthBits: Int64? = nil, arn: String? = nil) {
            self.uplinkJitterMs = uplinkJitterMs
            self.name = name
            self.downlinkJitterMs = downlinkJitterMs
            self.downlinkDelayMs = downlinkDelayMs
            self.uplinkLossPercent = uplinkLossPercent
            self.downlinkLossPercent = downlinkLossPercent
            self.description = description
            self.uplinkDelayMs = uplinkDelayMs
            self.uplinkBandwidthBits = uplinkBandwidthBits
            self.type = type
            self.downlinkBandwidthBits = downlinkBandwidthBits
            self.arn = arn
        }

    }

    public struct GetTestResult: Serializable, Initializable {
        /// A test condition that is evaluated.
        var test: Test? = nil

        public init() {}

        public init(test: Test? = nil) {
            self.test = test
        }

    }

    public struct Rule: Serializable, Initializable {
        /// The rule's stringified attribute. For example, specify the value as "\"abc\"". Allowed values include:   ARN: The ARN.   FORM_FACTOR: The form factor (for example, phone or tablet).   MANUFACTURER: The manufacturer.   PLATFORM: The platform (for example, Android or iOS).  
        var attribute: String? = nil
        /// The rule's operator.   EQUALS: The equals operator.   GREATER_THAN: The greater-than operator.   IN: The in operator.   LESS_THAN: The less-than operator.   NOT_IN: The not-in operator.  
        var `operator`: String? = nil
        /// The rule's value.
        var value: String? = nil

        public init() {}

        public init(attribute: String? = nil, operator: String? = nil, value: String? = nil) {
            self.attribute = attribute
            self.`operator` = `operator`
            self.value = value
        }

    }

    public struct ListTestsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The tests' ARNs.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct CreateRemoteAccessSessionConfiguration: Serializable, Initializable {
        /// Returns the billing method for purposes of configuring a remote access session.
        var billingMethod: String? = nil

        public init() {}

        public init(billingMethod: String? = nil) {
            self.billingMethod = billingMethod
        }

    }

    public struct GetUploadResult: Serializable, Initializable {
        /// An app or a set of one or more tests to upload or that have been uploaded.
        var upload: Upload? = nil

        public init() {}

        public init(upload: Upload? = nil) {
            self.upload = upload
        }

    }

    public struct ListSuitesResult: Serializable, Initializable {
        /// Information about the suites.
        var suites: [Suite]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(suites: [Suite]? = nil, nextToken: String? = nil) {
            self.suites = suites
            self.nextToken = nextToken
        }

    }

    public struct ListRemoteAccessSessionsResult: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// A container representing the metadata from the service about each remote access session you are requesting.
        var remoteAccessSessions: [RemoteAccessSession]? = nil

        public init() {}

        public init(nextToken: String? = nil, remoteAccessSessions: [RemoteAccessSession]? = nil) {
            self.nextToken = nextToken
            self.remoteAccessSessions = remoteAccessSessions
        }

    }

    public struct UpdateNetworkProfileRequest: Serializable, Initializable {
        /// Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
        var uplinkJitterMs: Int64? = nil
        /// The name of the network profile about which you are returning information.
        var name: String? = nil
        /// Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
        var downlinkJitterMs: Int64? = nil
        /// Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
        var downlinkDelayMs: Int64? = nil
        /// Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
        var uplinkLossPercent: Int32? = nil
        /// Proportion of received packets that fail to arrive from 0 to 100 percent.
        var downlinkLossPercent: Int32? = nil
        /// The descriptoin of the network profile about which you are returning information.
        var description: String? = nil
        /// Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
        var uplinkDelayMs: Int64? = nil
        /// The data throughput rate in bits per second, as an integer from 0 to 104857600.
        var uplinkBandwidthBits: Int64? = nil
        /// The type of network profile you wish to return information about. Valid values are listed below.
        var type: String? = nil
        /// The data throughput rate in bits per second, as an integer from 0 to 104857600.
        var downlinkBandwidthBits: Int64? = nil
        /// The Amazon Resource Name (ARN) of the project that you wish to update network profile settings.
        var arn: String = ""

        public init() {}

        public init(uplinkJitterMs: Int64? = nil, name: String? = nil, downlinkJitterMs: Int64? = nil, downlinkDelayMs: Int64? = nil, uplinkLossPercent: Int32? = nil, downlinkLossPercent: Int32? = nil, description: String? = nil, uplinkDelayMs: Int64? = nil, uplinkBandwidthBits: Int64? = nil, type: String? = nil, downlinkBandwidthBits: Int64? = nil, arn: String) {
            self.uplinkJitterMs = uplinkJitterMs
            self.name = name
            self.downlinkJitterMs = downlinkJitterMs
            self.downlinkDelayMs = downlinkDelayMs
            self.uplinkLossPercent = uplinkLossPercent
            self.downlinkLossPercent = downlinkLossPercent
            self.description = description
            self.uplinkDelayMs = uplinkDelayMs
            self.uplinkBandwidthBits = uplinkBandwidthBits
            self.type = type
            self.downlinkBandwidthBits = downlinkBandwidthBits
            self.arn = arn
        }

    }

    public struct GetDevicePoolResult: Serializable, Initializable {
        /// An object containing information about the requested device pool.
        var devicePool: DevicePool? = nil

        public init() {}

        public init(devicePool: DevicePool? = nil) {
            self.devicePool = devicePool
        }

    }

    public struct DevicePool: Serializable, Initializable {
        /// The device pool's description.
        var description: String? = nil
        /// The device pool's name.
        var name: String? = nil
        /// The device pool's type. Allowed values include:   CURATED: A device pool that is created and managed by AWS Device Farm.   PRIVATE: A device pool that is created and managed by the device pool developer.  
        var type: String? = nil
        /// Information about the device pool's rules.
        var rules: [Rule]? = nil
        /// The device pool's ARN.
        var arn: String? = nil

        public init() {}

        public init(description: String? = nil, name: String? = nil, type: String? = nil, rules: [Rule]? = nil, arn: String? = nil) {
            self.description = description
            self.name = name
            self.type = type
            self.rules = rules
            self.arn = arn
        }

    }

    public struct CreateProjectResult: Serializable, Initializable {
        /// The newly created project.
        var project: Project? = nil

        public init() {}

        public init(project: Project? = nil) {
            self.project = project
        }

    }

    public struct PurchaseOfferingResult: Serializable, Initializable {
        /// Represents the offering transaction for the purchase result.
        var offeringTransaction: OfferingTransaction? = nil

        public init() {}

        public init(offeringTransaction: OfferingTransaction? = nil) {
            self.offeringTransaction = offeringTransaction
        }

    }

    public struct ExecutionConfiguration: Serializable, Initializable {
        /// The number of minutes a test run will execute before it times out.
        var jobTimeoutMinutes: Int32? = nil

        public init() {}

        public init(jobTimeoutMinutes: Int32? = nil) {
            self.jobTimeoutMinutes = jobTimeoutMinutes
        }

    }

    public struct MonetaryAmount: Serializable, Initializable {
        /// The currency code of a monetary amount. For example, USD means "U.S. dollars."
        var currencyCode: String? = nil
        /// The numerical amount of an offering or transaction.
        var amount: Double? = nil

        public init() {}

        public init(currencyCode: String? = nil, amount: Double? = nil) {
            self.currencyCode = currencyCode
            self.amount = amount
        }

    }

    public struct CreateNetworkProfileRequest: Serializable, Initializable {
        /// Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
        var uplinkJitterMs: Int64? = nil
        /// The name you wish to specify for the new network profile.
        var name: String = ""
        /// Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
        var downlinkJitterMs: Int64? = nil
        /// Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
        var downlinkDelayMs: Int64? = nil
        /// Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
        var uplinkLossPercent: Int32? = nil
        /// Proportion of received packets that fail to arrive from 0 to 100 percent.
        var downlinkLossPercent: Int32? = nil
        /// The description of the network profile.
        var description: String? = nil
        /// Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
        var uplinkDelayMs: Int64? = nil
        /// The data throughput rate in bits per second, as an integer from 0 to 104857600.
        var uplinkBandwidthBits: Int64? = nil
        /// The type of network profile you wish to create. Valid values are listed below.
        var type: String? = nil
        /// The data throughput rate in bits per second, as an integer from 0 to 104857600.
        var downlinkBandwidthBits: Int64? = nil
        /// The Amazon Resource Name (ARN) of the project for which you want to create a network profile.
        var projectArn: String = ""

        public init() {}

        public init(uplinkJitterMs: Int64? = nil, name: String, downlinkJitterMs: Int64? = nil, downlinkDelayMs: Int64? = nil, uplinkLossPercent: Int32? = nil, downlinkLossPercent: Int32? = nil, description: String? = nil, uplinkDelayMs: Int64? = nil, uplinkBandwidthBits: Int64? = nil, type: String? = nil, downlinkBandwidthBits: Int64? = nil, projectArn: String) {
            self.uplinkJitterMs = uplinkJitterMs
            self.name = name
            self.downlinkJitterMs = downlinkJitterMs
            self.downlinkDelayMs = downlinkDelayMs
            self.uplinkLossPercent = uplinkLossPercent
            self.downlinkLossPercent = downlinkLossPercent
            self.description = description
            self.uplinkDelayMs = uplinkDelayMs
            self.uplinkBandwidthBits = uplinkBandwidthBits
            self.type = type
            self.downlinkBandwidthBits = downlinkBandwidthBits
            self.projectArn = projectArn
        }

    }

    public struct GetDevicePoolRequest: Serializable, Initializable {
        /// The device pool's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct RemoteAccessSession: Serializable, Initializable {
        /// The billing method of the remote access session. Possible values include METERED or UNMETERED. For more information about metered devices, see AWS Device Farm terminology."
        var billingMethod: String? = nil
        /// The status of the remote access session. Can be any of the following:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
        var status: String? = nil
        /// The name of the remote access session.
        var name: String? = nil
        /// The endpoint for the remote access sesssion.
        var endpoint: String? = nil
        /// The date and time the remote access session was created.
        var created: Date? = nil
        /// The date and time the remote access session was started.
        var started: Date? = nil
        /// The date and time the remote access session was stopped.
        var stopped: Date? = nil
        /// The number of minutes a device is used in a remote access sesssion (including setup and teardown minutes).
        var deviceMinutes: DeviceMinutes? = nil
        /// A message about the remote access session.
        var message: String? = nil
        /// The device (phone or tablet) used in the remote access session.
        var device: Device? = nil
        /// The result of the remote access session. Can be any of the following:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var result: String? = nil
        /// The Amazon Resource Name (ARN) of the remote access session.
        var arn: String? = nil

        public init() {}

        public init(billingMethod: String? = nil, status: String? = nil, name: String? = nil, endpoint: String? = nil, created: Date? = nil, started: Date? = nil, stopped: Date? = nil, deviceMinutes: DeviceMinutes? = nil, message: String? = nil, device: Device? = nil, result: String? = nil, arn: String? = nil) {
            self.billingMethod = billingMethod
            self.status = status
            self.name = name
            self.endpoint = endpoint
            self.created = created
            self.started = started
            self.stopped = stopped
            self.deviceMinutes = deviceMinutes
            self.message = message
            self.device = device
            self.result = result
            self.arn = arn
        }

    }

    public struct RecurringCharge: Serializable, Initializable {
        /// The frequency in which charges will recur.
        var frequency: String? = nil
        /// The cost of the recurring charge.
        var cost: MonetaryAmount? = nil

        public init() {}

        public init(frequency: String? = nil, cost: MonetaryAmount? = nil) {
            self.frequency = frequency
            self.cost = cost
        }

    }

    public struct Suite: Serializable, Initializable {
        /// The suite's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
        var status: String? = nil
        /// The suite's name.
        var name: String? = nil
        /// When the suite was created.
        var created: Date? = nil
        /// The suite's start time.
        var started: Date? = nil
        /// Represents the total (metered or unmetered) minutes used by the test suite.
        var deviceMinutes: DeviceMinutes? = nil
        /// The suite's stop time.
        var stopped: Date? = nil
        /// A message about the suite's result.
        var message: String? = nil
        /// The suite's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.   APPIUM_WEB_PYTHON: The Appium Python type for Web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
        var type: String? = nil
        /// The suite's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var result: String? = nil
        /// The suite's result counters.
        var counters: Counters? = nil
        /// The suite's ARN.
        var arn: String? = nil

        public init() {}

        public init(status: String? = nil, name: String? = nil, created: Date? = nil, started: Date? = nil, deviceMinutes: DeviceMinutes? = nil, stopped: Date? = nil, message: String? = nil, type: String? = nil, result: String? = nil, counters: Counters? = nil, arn: String? = nil) {
            self.status = status
            self.name = name
            self.created = created
            self.started = started
            self.deviceMinutes = deviceMinutes
            self.stopped = stopped
            self.message = message
            self.type = type
            self.result = result
            self.counters = counters
            self.arn = arn
        }

    }

    public struct DeleteUploadRequest: Serializable, Initializable {
        /// Represents the Amazon Resource Name (ARN) of the Device Farm upload you wish to delete.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct ListUniqueProblemsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The unique problems' ARNs.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct GetAccountSettingsRequest: Serializable, Initializable {

        public init() {}

    }

    public struct ProblemDetail: Serializable, Initializable {
        /// The problem detail's name.
        var name: String? = nil
        /// The problem detail's ARN.
        var arn: String? = nil

        public init() {}

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

    }

    public struct ScheduleRunConfiguration: Serializable, Initializable {
        /// The ARN of the extra data for the run. The extra data is a .zip file that AWS Device Farm will extract to external data for Android or the app's sandbox for iOS.
        var extraDataPackageArn: String? = nil
        /// Information about the location that is used for the run.
        var location: Location? = nil
        /// Reserved for internal use.
        var networkProfileArn: String? = nil
        /// A list of auxiliary apps for the run.
        var auxiliaryApps: [String]? = nil
        /// Information about the radio states for the run.
        var radios: Radios? = nil
        /// Information about the locale that is used for the run.
        var locale: String? = nil
        /// Specifies the billing method for a test run: metered or unmetered. If the parameter is not specified, the default value is metered.
        var billingMethod: String? = nil

        public init() {}

        public init(extraDataPackageArn: String? = nil, location: Location? = nil, networkProfileArn: String? = nil, auxiliaryApps: [String]? = nil, radios: Radios? = nil, locale: String? = nil, billingMethod: String? = nil) {
            self.extraDataPackageArn = extraDataPackageArn
            self.location = location
            self.networkProfileArn = networkProfileArn
            self.auxiliaryApps = auxiliaryApps
            self.radios = radios
            self.locale = locale
            self.billingMethod = billingMethod
        }

    }

    public struct GetJobResult: Serializable, Initializable {
        /// An object containing information about the requested job.
        var job: Job? = nil

        public init() {}

        public init(job: Job? = nil) {
            self.job = job
        }

    }

    public struct ListOfferingsResult: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// A value representing the list offering results.
        var offerings: [Offering]? = nil

        public init() {}

        public init(nextToken: String? = nil, offerings: [Offering]? = nil) {
            self.nextToken = nextToken
            self.offerings = offerings
        }

    }

    public struct StopRunResult: Serializable, Initializable {
        /// The run that was stopped.
        var run: Run? = nil

        public init() {}

        public init(run: Run? = nil) {
            self.run = run
        }

    }

    public struct ScheduleRunRequest: Serializable, Initializable {
        /// The ARN of the project for the run to be scheduled.
        var projectArn: String = ""
        /// The name for the run to be scheduled.
        var name: String? = nil
        /// Specifies configuration information about a test run, such as the execution timeout (in minutes).
        var executionConfiguration: ExecutionConfiguration? = nil
        /// Information about the test for the run to be scheduled.
        var test: ScheduleRunTest = ScheduleRunTest()
        /// The ARN of the app to schedule a run.
        var appArn: String? = nil
        /// The ARN of the device pool for the run to be scheduled.
        var devicePoolArn: String = ""
        /// Information about the settings for the run to be scheduled.
        var configuration: ScheduleRunConfiguration? = nil

        public init() {}

        public init(projectArn: String, name: String? = nil, executionConfiguration: ExecutionConfiguration? = nil, test: ScheduleRunTest, appArn: String? = nil, devicePoolArn: String, configuration: ScheduleRunConfiguration? = nil) {
            self.projectArn = projectArn
            self.name = name
            self.executionConfiguration = executionConfiguration
            self.test = test
            self.appArn = appArn
            self.devicePoolArn = devicePoolArn
            self.configuration = configuration
        }

    }

    public struct Artifact: Serializable, Initializable {
        /// The artifact's name.
        var name: String? = nil
        /// The artifact's type. Allowed values include the following:   UNKNOWN: An unknown type.   SCREENSHOT: The screenshot type.   DEVICE_LOG: The device log type.   MESSAGE_LOG: The message log type.   RESULT_LOG: The result log type.   SERVICE_LOG: The service log type.   WEBKIT_LOG: The web kit log type.   INSTRUMENTATION_OUTPUT: The instrumentation type.   EXERCISER_MONKEY_OUTPUT: For Android, the artifact (log) generated by an Android fuzz test.   CALABASH_JSON_OUTPUT: The Calabash JSON output type.   CALABASH_PRETTY_OUTPUT: The Calabash pretty output type.   CALABASH_STANDARD_OUTPUT: The Calabash standard output type.   CALABASH_JAVA_XML_OUTPUT: The Calabash Java XML output type.   AUTOMATION_OUTPUT: The automation output type.   APPIUM_SERVER_OUTPUT: The Appium server output type.   APPIUM_JAVA_OUTPUT: The Appium Java output type.   APPIUM_JAVA_XML_OUTPUT: The Appium Java XML output type.   APPIUM_PYTHON_OUTPUT: The Appium Python output type.   APPIUM_PYTHON_XML_OUTPUT: The Appium Python XML output type.   EXPLORER_EVENT_LOG: The Explorer event log output type.   EXPLORER_SUMMARY_LOG: The Explorer summary log output type.   APPLICATION_CRASH_REPORT: The application crash report output type.   XCTEST_LOG: The XCode test output type.  
        var type: String? = nil
        /// The artifact's file extension.
        var `extension`: String? = nil
        /// The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the artifact's file.
        var url: String? = nil
        /// The artifact's ARN.
        var arn: String? = nil

        public init() {}

        public init(name: String? = nil, type: String? = nil, extension: String? = nil, url: String? = nil, arn: String? = nil) {
            self.name = name
            self.type = type
            self.`extension` = `extension`
            self.url = url
            self.arn = arn
        }

    }

    public struct CreateNetworkProfileResult: Serializable, Initializable {
        /// The network profile that is returned by the create network profile request.
        var networkProfile: NetworkProfile? = nil

        public init() {}

        public init(networkProfile: NetworkProfile? = nil) {
            self.networkProfile = networkProfile
        }

    }

    public struct DeleteNetworkProfileRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the network profile you want to delete.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct Project: Serializable, Initializable {
        /// The project's name.
        var name: String? = nil
        /// When the project was created.
        var created: Date? = nil
        /// The default number of minutes (at the project level) a test run will execute before it times out. Default value is 60 minutes.
        var defaultJobTimeoutMinutes: Int32? = nil
        /// The project's ARN.
        var arn: String? = nil

        public init() {}

        public init(name: String? = nil, created: Date? = nil, defaultJobTimeoutMinutes: Int32? = nil, arn: String? = nil) {
            self.name = name
            self.created = created
            self.defaultJobTimeoutMinutes = defaultJobTimeoutMinutes
            self.arn = arn
        }

    }

    public struct ScheduleRunResult: Serializable, Initializable {
        /// Information about the scheduled run.
        var run: Run? = nil

        public init() {}

        public init(run: Run? = nil) {
            self.run = run
        }

    }

    public struct GetRunRequest: Serializable, Initializable {
        /// The run's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct ListNetworkProfilesResult: Serializable, Initializable {
        /// A list of the available network profiles.
        var networkProfiles: [NetworkProfile]? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(networkProfiles: [NetworkProfile]? = nil, nextToken: String? = nil) {
            self.networkProfiles = networkProfiles
            self.nextToken = nextToken
        }

    }

    public struct ListSamplesRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Amazon Resource Name (ARN) of the project for which you want to list samples.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct CreateProjectRequest: Serializable, Initializable {
        /// The project's name.
        var name: String = ""
        /// Sets the execution timeout value (in minutes) for a project. All test runs in this project will use the specified execution timeout value unless overridden when scheduling a run.
        var defaultJobTimeoutMinutes: Int32? = nil

        public init() {}

        public init(name: String, defaultJobTimeoutMinutes: Int32? = nil) {
            self.name = name
            self.defaultJobTimeoutMinutes = defaultJobTimeoutMinutes
        }

    }

    public struct GetRemoteAccessSessionResult: Serializable, Initializable {
        /// A container that lists detailed information about the remote access session.
        var remoteAccessSession: RemoteAccessSession? = nil

        public init() {}

        public init(remoteAccessSession: RemoteAccessSession? = nil) {
            self.remoteAccessSession = remoteAccessSession
        }

    }

    public struct UpdateDevicePoolResult: Serializable, Initializable {
        /// The device pool you just updated.
        var devicePool: DevicePool? = nil

        public init() {}

        public init(devicePool: DevicePool? = nil) {
            self.devicePool = devicePool
        }

    }

    public struct PurchaseOfferingRequest: Serializable, Initializable {
        /// The ID of the offering.
        var offeringId: String? = nil
        /// The number of device slots you wish to purchase in an offering request.
        var quantity: Int32? = nil

        public init() {}

        public init(offeringId: String? = nil, quantity: Int32? = nil) {
            self.offeringId = offeringId
            self.quantity = quantity
        }

    }

    public struct StopRemoteAccessSessionRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the remote access session you wish to stop.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct CreateUploadResult: Serializable, Initializable {
        /// The newly created upload.
        var upload: Upload? = nil

        public init() {}

        public init(upload: Upload? = nil) {
            self.upload = upload
        }

    }

    public struct UniqueProblem: Serializable, Initializable {
        /// Information about the problems.
        var problems: [Problem]? = nil
        /// A message about the unique problems' result.
        var message: String? = nil

        public init() {}

        public init(problems: [Problem]? = nil, message: String? = nil) {
            self.problems = problems
            self.message = message
        }

    }

    public struct UpdateNetworkProfileResult: Serializable, Initializable {
        /// A list of the available network profiles.
        var networkProfile: NetworkProfile? = nil

        public init() {}

        public init(networkProfile: NetworkProfile? = nil) {
            self.networkProfile = networkProfile
        }

    }

    public struct ListNetworkProfilesRequest: Serializable, Initializable {
        /// The type of network profile you wish to return information about. Valid values are listed below.
        var type: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Amazon Resource Name (ARN) of the project for which you want to list network profiles.
        var arn: String = ""

        public init() {}

        public init(type: String? = nil, nextToken: String? = nil, arn: String) {
            self.type = type
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct GetJobRequest: Serializable, Initializable {
        /// The job's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct ListRunsResult: Serializable, Initializable {
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil
        /// Information about the runs.
        var runs: [Run]? = nil

        public init() {}

        public init(nextToken: String? = nil, runs: [Run]? = nil) {
            self.nextToken = nextToken
            self.runs = runs
        }

    }

    public struct ListTestsResult: Serializable, Initializable {
        /// Information about the tests.
        var tests: [Test]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(tests: [Test]? = nil, nextToken: String? = nil) {
            self.tests = tests
            self.nextToken = nextToken
        }

    }

    public struct DeleteNetworkProfileResult: Serializable, Initializable {

        public init() {}

    }

    public struct OfferingTransaction: Serializable, Initializable {
        /// The transaction ID of the offering transaction.
        var transactionId: String? = nil
        /// The cost of an offering transaction.
        var cost: MonetaryAmount? = nil
        /// The date on which an offering transaction was created.
        var createdOn: Date? = nil
        /// The status of an offering transaction.
        var offeringStatus: OfferingStatus? = nil

        public init() {}

        public init(transactionId: String? = nil, cost: MonetaryAmount? = nil, createdOn: Date? = nil, offeringStatus: OfferingStatus? = nil) {
            self.transactionId = transactionId
            self.cost = cost
            self.createdOn = createdOn
            self.offeringStatus = offeringStatus
        }

    }

    public struct ListDevicesResult: Serializable, Initializable {
        /// Information about the devices.
        var devices: [Device]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(devices: [Device]? = nil, nextToken: String? = nil) {
            self.devices = devices
            self.nextToken = nextToken
        }

    }

    public struct ListUploadsResult: Serializable, Initializable {
        /// Information about the uploads.
        var uploads: [Upload]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(uploads: [Upload]? = nil, nextToken: String? = nil) {
            self.uploads = uploads
            self.nextToken = nextToken
        }

    }

    public struct Offering: Serializable, Initializable {
        /// A string describing the offering.
        var description: String? = nil
        /// Specifies whether there are recurring charges for the offering.
        var recurringCharges: [RecurringCharge]? = nil
        /// The ID that corresponds to a device offering.
        var id: String? = nil
        /// The type of offering (e.g., "RECURRING") for a device.
        var type: String? = nil
        /// The platform of the device (e.g., ANDROID or IOS).
        var platform: String? = nil

        public init() {}

        public init(description: String? = nil, recurringCharges: [RecurringCharge]? = nil, id: String? = nil, type: String? = nil, platform: String? = nil) {
            self.description = description
            self.recurringCharges = recurringCharges
            self.id = id
            self.type = type
            self.platform = platform
        }

    }

    public struct GetSuiteResult: Serializable, Initializable {
        /// A collection of one or more tests.
        var suite: Suite? = nil

        public init() {}

        public init(suite: Suite? = nil) {
            self.suite = suite
        }

    }

    public struct GetSuiteRequest: Serializable, Initializable {
        /// The suite's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct GetUploadRequest: Serializable, Initializable {
        /// The upload's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct Test: Serializable, Initializable {
        /// The test's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
        var status: String? = nil
        /// The test's name.
        var name: String? = nil
        /// When the test was created.
        var created: Date? = nil
        /// The test's start time.
        var started: Date? = nil
        /// Represents the total (metered or unmetered) minutes used by the test.
        var deviceMinutes: DeviceMinutes? = nil
        /// The test's stop time.
        var stopped: Date? = nil
        /// A message about the test's result.
        var message: String? = nil
        /// The test's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.   APPIUM_WEB_PYTHON: The Appium Python type for Web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
        var type: String? = nil
        /// The test's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var result: String? = nil
        /// The test's result counters.
        var counters: Counters? = nil
        /// The test's ARN.
        var arn: String? = nil

        public init() {}

        public init(status: String? = nil, name: String? = nil, created: Date? = nil, started: Date? = nil, deviceMinutes: DeviceMinutes? = nil, stopped: Date? = nil, message: String? = nil, type: String? = nil, result: String? = nil, counters: Counters? = nil, arn: String? = nil) {
            self.status = status
            self.name = name
            self.created = created
            self.started = started
            self.deviceMinutes = deviceMinutes
            self.stopped = stopped
            self.message = message
            self.type = type
            self.result = result
            self.counters = counters
            self.arn = arn
        }

    }

    public struct DeleteRemoteAccessSessionRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the sesssion for which you want to delete remote access.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct GetOfferingStatusResult: Serializable, Initializable {
        /// When specified, gets the offering status for the next period.
        var nextPeriod: [String: OfferingStatus]? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// When specified, gets the offering status for the current period.
        var current: [String: OfferingStatus]? = nil

        public init() {}

        public init(nextPeriod: [String: OfferingStatus]? = nil, nextToken: String? = nil, current: [String: OfferingStatus]? = nil) {
            self.nextPeriod = nextPeriod
            self.nextToken = nextToken
            self.current = current
        }

    }

    public struct GetOfferingStatusRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct IncompatibilityMessage: Serializable, Initializable {
        /// The type of incompatibility. Allowed values include:   ARN: The ARN.   FORM_FACTOR: The form factor (for example, phone or tablet).   MANUFACTURER: The manufacturer.   PLATFORM: The platform (for example, Android or iOS).  
        var type: String? = nil
        /// A message about the incompatibility.
        var message: String? = nil

        public init() {}

        public init(type: String? = nil, message: String? = nil) {
            self.type = type
            self.message = message
        }

    }

    public struct CreateUploadRequest: Serializable, Initializable {
        /// The upload's file name. The name should not contain the '/' character. If uploading an iOS app, the file name needs to end with the .ipa extension. If uploading an Android app, the file name needs to end with the .apk extension. For all others, the file name must end with the .zip file extension.
        var name: String = ""
        /// The upload's content type (for example, "application/octet-stream").
        var contentType: String? = nil
        /// The upload's upload type. Must be one of the following values:   ANDROID_APP: An Android upload.   IOS_APP: An iOS upload.   WEB_APP: A web appliction upload.   EXTERNAL_DATA: An external data upload.   APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   CALABASH_TEST_PACKAGE: A Calabash test package upload.   INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.   UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.   UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.   XCTEST_TEST_PACKAGE: An XCode test package upload.   XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.    Note If you call CreateUpload with WEB_APP specified, AWS Device Farm throws an ArgumentException error.
        var type: String = ""
        /// The ARN of the project for the upload.
        var projectArn: String = ""

        public init() {}

        public init(name: String, contentType: String? = nil, type: String, projectArn: String) {
            self.name = name
            self.contentType = contentType
            self.type = type
            self.projectArn = projectArn
        }

    }

    public struct UpdateProjectResult: Serializable, Initializable {
        /// The project you wish to update.
        var project: Project? = nil

        public init() {}

        public init(project: Project? = nil) {
            self.project = project
        }

    }

    public struct ScheduleRunTest: Serializable, Initializable {
        /// The test's filter.
        var filter: String? = nil
        /// The test's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.   APPIUM_WEB_PYTHON: The Appium Python type for Web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
        var type: String = ""
        /// The ARN of the uploaded test that will be run.
        var testPackageArn: String? = nil
        /// The test's parameters, such as test framework parameters and fixture settings.
        var parameters: [String: String]? = nil

        public init() {}

        public init(filter: String? = nil, type: String, testPackageArn: String? = nil, parameters: [String: String]? = nil) {
            self.filter = filter
            self.type = type
            self.testPackageArn = testPackageArn
            self.parameters = parameters
        }

    }

    public struct DeleteDevicePoolResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListUploadsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Amazon Resource Name (ARN) of the project for which you want to list uploads.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct CreateRemoteAccessSessionResult: Serializable, Initializable {
        /// A container that describes the remote access session when the request to create a remote access session is sent.
        var remoteAccessSession: RemoteAccessSession? = nil

        public init() {}

        public init(remoteAccessSession: RemoteAccessSession? = nil) {
            self.remoteAccessSession = remoteAccessSession
        }

    }

    public struct GetDeviceRequest: Serializable, Initializable {
        /// The device type's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct Radios: Serializable, Initializable {
        /// True if Wi-Fi is enabled at the beginning of the test; otherwise, false.
        var wifi: Bool? = nil
        /// True if Bluetooth is enabled at the beginning of the test; otherwise, false.
        var bluetooth: Bool? = nil
        /// True if NFC is enabled at the beginning of the test; otherwise, false.
        var nfc: Bool? = nil
        /// True if GPS is enabled at the beginning of the test; otherwise, false.
        var gps: Bool? = nil

        public init() {}

        public init(wifi: Bool? = nil, bluetooth: Bool? = nil, nfc: Bool? = nil, gps: Bool? = nil) {
            self.wifi = wifi
            self.bluetooth = bluetooth
            self.nfc = nfc
            self.gps = gps
        }

    }

    public struct GetRunResult: Serializable, Initializable {
        /// The run you wish to get results from.
        var run: Run? = nil

        public init() {}

        public init(run: Run? = nil) {
            self.run = run
        }

    }

    public struct RenewOfferingResult: Serializable, Initializable {
        /// Represents the status of the offering transaction for the renewal.
        var offeringTransaction: OfferingTransaction? = nil

        public init() {}

        public init(offeringTransaction: OfferingTransaction? = nil) {
            self.offeringTransaction = offeringTransaction
        }

    }

    public struct DeleteDevicePoolRequest: Serializable, Initializable {
        /// Represents the Amazon Resource Name (ARN) of the Device Farm device pool you wish to delete.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct CreateRemoteAccessSessionRequest: Serializable, Initializable {
        /// The name of the remote access session that you wish to create.
        var name: String? = nil
        /// The Amazon Resource Name (ARN) of the device for which you want to create a remote access session.
        var deviceArn: String = ""
        /// The Amazon Resource Name (ARN) of the project for which you want to create a remote access session.
        var projectArn: String = ""
        /// The configuration information for the remote access session request.
        var configuration: CreateRemoteAccessSessionConfiguration? = nil

        public init() {}

        public init(name: String? = nil, deviceArn: String, projectArn: String, configuration: CreateRemoteAccessSessionConfiguration? = nil) {
            self.name = name
            self.deviceArn = deviceArn
            self.projectArn = projectArn
            self.configuration = configuration
        }

    }

    public struct ListJobsResult: Serializable, Initializable {
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil
        /// Information about the jobs.
        var jobs: [Job]? = nil

        public init() {}

        public init(nextToken: String? = nil, jobs: [Job]? = nil) {
            self.nextToken = nextToken
            self.jobs = jobs
        }

    }

    public struct ListSamplesResult: Serializable, Initializable {
        /// Information about the samples.
        var samples: [Sample]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(samples: [Sample]? = nil, nextToken: String? = nil) {
            self.samples = samples
            self.nextToken = nextToken
        }

    }

    public struct CreateDevicePoolRequest: Serializable, Initializable {
        /// The device pool's description.
        var description: String? = nil
        /// The device pool's name.
        var name: String = ""
        /// The device pool's rules.
        var rules: [Rule] = []
        /// The ARN of the project for the device pool.
        var projectArn: String = ""

        public init() {}

        public init(description: String? = nil, name: String, rules: [Rule], projectArn: String) {
            self.description = description
            self.name = name
            self.rules = rules
            self.projectArn = projectArn
        }

    }

    public struct ListProjectsResult: Serializable, Initializable {
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil
        /// Information about the projects.
        var projects: [Project]? = nil

        public init() {}

        public init(nextToken: String? = nil, projects: [Project]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

    }

    public struct OfferingStatus: Serializable, Initializable {
        /// The number of available devices in the offering.
        var quantity: Int32? = nil
        /// The type specified for the offering status.
        var type: String? = nil
        /// The date on which the offering is effective.
        var effectiveOn: Date? = nil
        /// Represents the metadata of an offering status.
        var offering: Offering? = nil

        public init() {}

        public init(quantity: Int32? = nil, type: String? = nil, effectiveOn: Date? = nil, offering: Offering? = nil) {
            self.quantity = quantity
            self.type = type
            self.effectiveOn = effectiveOn
            self.offering = offering
        }

    }

    public struct ListDevicePoolsRequest: Serializable, Initializable {
        /// The device pools' type. Allowed values include:   CURATED: A device pool that is created and managed by AWS Device Farm.   PRIVATE: A device pool that is created and managed by the device pool developer.  
        var type: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The project ARN.
        var arn: String = ""

        public init() {}

        public init(type: String? = nil, nextToken: String? = nil, arn: String) {
            self.type = type
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct ListJobsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The jobs' ARNs.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct Run: Serializable, Initializable {
        /// The run's name.
        var name: String? = nil
        /// The run's platform. Allowed values include:   ANDROID: The Android platform.   IOS: The iOS platform.  
        var platform: String? = nil
        /// The run's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.   APPIUM_WEB_PYTHON: The Appium Python type for Web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
        var type: String? = nil
        /// The run's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var result: String? = nil
        /// The run's ARN.
        var arn: String? = nil
        /// The run's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
        var status: String? = nil
        /// The total number of completed jobs.
        var completedJobs: Int32? = nil
        /// When the run was created.
        var created: Date? = nil
        /// The run's start time.
        var started: Date? = nil
        /// The total number of jobs for the run.
        var totalJobs: Int32? = nil
        /// The run's stop time.
        var stopped: Date? = nil
        /// Represents the total (metered or unmetered) minutes used by the test run.
        var deviceMinutes: DeviceMinutes? = nil
        /// A message about the run's result.
        var message: String? = nil
        /// The network profile being used for a test run.
        var networkProfile: NetworkProfile? = nil
        /// The run's result counters.
        var counters: Counters? = nil
        /// Specifies the billing method for a test run: metered or unmetered. If the parameter is not specified, the default value is metered.
        var billingMethod: String? = nil

        public init() {}

        public init(name: String? = nil, platform: String? = nil, type: String? = nil, result: String? = nil, arn: String? = nil, status: String? = nil, completedJobs: Int32? = nil, created: Date? = nil, started: Date? = nil, totalJobs: Int32? = nil, stopped: Date? = nil, deviceMinutes: DeviceMinutes? = nil, message: String? = nil, networkProfile: NetworkProfile? = nil, counters: Counters? = nil, billingMethod: String? = nil) {
            self.name = name
            self.platform = platform
            self.type = type
            self.result = result
            self.arn = arn
            self.status = status
            self.completedJobs = completedJobs
            self.created = created
            self.started = started
            self.totalJobs = totalJobs
            self.stopped = stopped
            self.deviceMinutes = deviceMinutes
            self.message = message
            self.networkProfile = networkProfile
            self.counters = counters
            self.billingMethod = billingMethod
        }

    }

    public struct DevicePoolCompatibilityResult: Serializable, Initializable {
        /// The device (phone or tablet) that you wish to return information about.
        var device: Device? = nil
        /// Whether the result was compatible with the device pool.
        var compatible: Bool? = nil
        /// Information about the compatibility.
        var incompatibilityMessages: [IncompatibilityMessage]? = nil

        public init() {}

        public init(device: Device? = nil, compatible: Bool? = nil, incompatibilityMessages: [IncompatibilityMessage]? = nil) {
            self.device = device
            self.compatible = compatible
            self.incompatibilityMessages = incompatibilityMessages
        }

    }

    public struct Upload: Serializable, Initializable {
        /// The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
        var metadata: String? = nil
        /// The upload's status. Must be one of the following values:   FAILED: A failed status.   INITIALIZED: An initialized status.   PROCESSING: A processing status.   SUCCEEDED: A succeeded status.  
        var status: String? = nil
        /// The upload's content type (for example, "application/octet-stream").
        var contentType: String? = nil
        /// The upload's file name.
        var name: String? = nil
        /// When the upload was created.
        var created: Date? = nil
        /// A message about the upload's result.
        var message: String? = nil
        /// The upload's type. Must be one of the following values:   ANDROID_APP: An Android upload.   IOS_APP: An iOS upload.   WEB_APP: A web appliction upload.   EXTERNAL_DATA: An external data upload.   APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   CALABASH_TEST_PACKAGE: A Calabash test package upload.   INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.   UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.   UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.   XCTEST_TEST_PACKAGE: An XCode test package upload.   XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.  
        var type: String? = nil
        /// The pre-signed Amazon S3 URL that was used to store a file through a corresponding PUT request.
        var url: String? = nil
        /// The upload's ARN.
        var arn: String? = nil

        public init() {}

        public init(metadata: String? = nil, status: String? = nil, contentType: String? = nil, name: String? = nil, created: Date? = nil, message: String? = nil, type: String? = nil, url: String? = nil, arn: String? = nil) {
            self.metadata = metadata
            self.status = status
            self.contentType = contentType
            self.name = name
            self.created = created
            self.message = message
            self.type = type
            self.url = url
            self.arn = arn
        }

    }

    public struct ListOfferingsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct DeleteRunResult: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteProjectResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListDevicePoolsResult: Serializable, Initializable {
        /// Information about the device pools.
        var devicePools: [DevicePool]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(devicePools: [DevicePool]? = nil, nextToken: String? = nil) {
            self.devicePools = devicePools
            self.nextToken = nextToken
        }

    }

    public struct ListOfferingTransactionsResult: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The audit log of subscriptions you have purchased and modified through AWS Device Farm.
        var offeringTransactions: [OfferingTransaction]? = nil

        public init() {}

        public init(nextToken: String? = nil, offeringTransactions: [OfferingTransaction]? = nil) {
            self.nextToken = nextToken
            self.offeringTransactions = offeringTransactions
        }

    }

    public struct ListSuitesRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The suites' ARNs.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct CPU: Serializable, Initializable {
        /// The CPU's frequency.
        var frequency: String? = nil
        /// The CPU's architecture, for example x86 or ARM.
        var architecture: String? = nil
        /// The clock speed of the device's CPU, expressed in hertz (Hz). For example, a 1.2 GHz CPU is expressed as 1200000000.
        var clock: Double? = nil

        public init() {}

        public init(frequency: String? = nil, architecture: String? = nil, clock: Double? = nil) {
            self.frequency = frequency
            self.architecture = architecture
            self.clock = clock
        }

    }

    public struct InstallToRemoteAccessSessionResult: Serializable, Initializable {
        /// An app to upload or that has been uploaded.
        var appUpload: Upload? = nil

        public init() {}

        public init(appUpload: Upload? = nil) {
            self.appUpload = appUpload
        }

    }

    public struct GetNetworkProfileRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the network profile you want to return information about.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct Counters: Serializable, Initializable {
        /// The number of warned entities.
        var warned: Int32? = nil
        /// The number of failed entities.
        var failed: Int32? = nil
        /// The number of errored entities.
        var errored: Int32? = nil
        /// The number of skipped entities.
        var skipped: Int32? = nil
        /// The number of passed entities.
        var passed: Int32? = nil
        /// The number of stopped entities.
        var stopped: Int32? = nil
        /// The total number of entities.
        var total: Int32? = nil

        public init() {}

        public init(warned: Int32? = nil, failed: Int32? = nil, errored: Int32? = nil, skipped: Int32? = nil, passed: Int32? = nil, stopped: Int32? = nil, total: Int32? = nil) {
            self.warned = warned
            self.failed = failed
            self.errored = errored
            self.skipped = skipped
            self.passed = passed
            self.stopped = stopped
            self.total = total
        }

    }

    public struct DeleteRemoteAccessSessionResult: Serializable, Initializable {

        public init() {}

    }

    public struct DeviceMinutes: Serializable, Initializable {
        /// When specified, represents the total minutes used by the resource to run tests.
        var total: Double? = nil
        /// When specified, represents only the sum of metered minutes used by the resource to run tests.
        var metered: Double? = nil
        /// When specified, represents only the sum of unmetered minutes used by the resource to run tests.
        var unmetered: Double? = nil

        public init() {}

        public init(total: Double? = nil, metered: Double? = nil, unmetered: Double? = nil) {
            self.total = total
            self.metered = metered
            self.unmetered = unmetered
        }

    }

    public struct ListRemoteAccessSessionsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct ListArtifactsRequest: Serializable, Initializable {
        /// The artifacts' type. Allowed values include:   FILE: The artifacts are files.   LOG: The artifacts are logs.   SCREENSHOT: The artifacts are screenshots.  
        var type: String = ""
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Run, Job, Suite, or Test ARN.
        var arn: String = ""

        public init() {}

        public init(type: String, nextToken: String? = nil, arn: String) {
            self.type = type
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct GetTestRequest: Serializable, Initializable {
        /// The test's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct GetDeviceResult: Serializable, Initializable {
        /// An object containing information about the requested device.
        var device: Device? = nil

        public init() {}

        public init(device: Device? = nil) {
            self.device = device
        }

    }

    public struct DeleteProjectRequest: Serializable, Initializable {
        /// Represents the Amazon Resource Name (ARN) of the Device Farm project you wish to delete.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct StopRunRequest: Serializable, Initializable {
        /// Represents the Amazon Resource Name (ARN) of the Device Farm run you wish to stop.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct ListUniqueProblemsResult: Serializable, Initializable {
        /// Information about the unique problems. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var uniqueProblems: [String: [UniqueProblem]]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(uniqueProblems: [String: [UniqueProblem]]? = nil, nextToken: String? = nil) {
            self.uniqueProblems = uniqueProblems
            self.nextToken = nextToken
        }

    }

    public struct Problem: Serializable, Initializable {
        /// Information about the associated test.
        var test: ProblemDetail? = nil
        /// Information about the associated suite.
        var suite: ProblemDetail? = nil
        /// Information about the associated job.
        var job: ProblemDetail? = nil
        /// A message about the problem's result.
        var message: String? = nil
        /// Information about the associated device.
        var device: Device? = nil
        /// Information about the associated run.
        var run: ProblemDetail? = nil
        /// The problem's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var result: String? = nil

        public init() {}

        public init(test: ProblemDetail? = nil, suite: ProblemDetail? = nil, job: ProblemDetail? = nil, message: String? = nil, device: Device? = nil, run: ProblemDetail? = nil, result: String? = nil) {
            self.test = test
            self.suite = suite
            self.job = job
            self.message = message
            self.device = device
            self.run = run
            self.result = result
        }

    }

    public struct Sample: Serializable, Initializable {
        /// The sample's type. Must be one of the following values:   CPU: A CPU sample type. This is expressed as the app processing CPU time (including child processes) as reported by process, as a percentage.   MEMORY: A memory usage sample type. This is expressed as the total proportional set size of an app process, in kilobytes.   NATIVE_AVG_DRAWTIME   NATIVE_FPS   NATIVE_FRAMES   NATIVE_MAX_DRAWTIME   NATIVE_MIN_DRAWTIME   OPENGL_AVG_DRAWTIME   OPENGL_FPS   OPENGL_FRAMES   OPENGL_MAX_DRAWTIME   OPENGL_MIN_DRAWTIME   RX   RX_RATE: The total number of bytes per second (TCP and UDP) that are sent, by app process.   THREADS: A threads sample type. This is expressed as the total number of threads per app process.   TX   TX_RATE: The total number of bytes per second (TCP and UDP) that are received, by app process.  
        var type: String? = nil
        /// The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the sample's file.
        var url: String? = nil
        /// The sample's ARN.
        var arn: String? = nil

        public init() {}

        public init(type: String? = nil, url: String? = nil, arn: String? = nil) {
            self.type = type
            self.url = url
            self.arn = arn
        }

    }

    public struct DeleteRunRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) for the run you wish to delete.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct CreateDevicePoolResult: Serializable, Initializable {
        /// The newly created device pool.
        var devicePool: DevicePool? = nil

        public init() {}

        public init(devicePool: DevicePool? = nil) {
            self.devicePool = devicePool
        }

    }

    public struct UpdateDevicePoolRequest: Serializable, Initializable {
        /// A description of the device pool you wish to update.
        var description: String? = nil
        /// A string representing the name of the device pool you wish to update.
        var name: String? = nil
        /// Represents the rules you wish to modify for the device pool. Updating rules is optional; however, if you choose to update rules for your request, the update will replace the existing rules.
        var rules: [Rule]? = nil
        /// The Amazon Resourc Name (ARN) of the Device Farm device pool you wish to update.
        var arn: String = ""

        public init() {}

        public init(description: String? = nil, name: String? = nil, rules: [Rule]? = nil, arn: String) {
            self.description = description
            self.name = name
            self.rules = rules
            self.arn = arn
        }

    }

    public struct ListOfferingTransactionsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct AccountSettings: Serializable, Initializable {
        /// The AWS account number specified in the AccountSettings container.
        var awsAccountNumber: String? = nil
        /// Returns the unmetered devices you have purchased or want to purchase.
        var unmeteredDevices: [String: Int32]? = nil
        /// The default number of minutes (at the account level) a test run will execute before it times out. Default value is 60 minutes.
        var defaultJobTimeoutMinutes: Int32? = nil
        /// The maximum number of minutes a test run will execute before it times out.
        var maxJobTimeoutMinutes: Int32? = nil
        /// Returns the unmetered remote access devices you have purchased or want to purchase.
        var unmeteredRemoteAccessDevices: [String: Int32]? = nil

        public init() {}

        public init(awsAccountNumber: String? = nil, unmeteredDevices: [String: Int32]? = nil, defaultJobTimeoutMinutes: Int32? = nil, maxJobTimeoutMinutes: Int32? = nil, unmeteredRemoteAccessDevices: [String: Int32]? = nil) {
            self.awsAccountNumber = awsAccountNumber
            self.unmeteredDevices = unmeteredDevices
            self.defaultJobTimeoutMinutes = defaultJobTimeoutMinutes
            self.maxJobTimeoutMinutes = maxJobTimeoutMinutes
            self.unmeteredRemoteAccessDevices = unmeteredRemoteAccessDevices
        }

    }

    public struct StopRemoteAccessSessionResult: Serializable, Initializable {
        /// A container representing the metadata from the service about the remote access session you are stopping.
        var remoteAccessSession: RemoteAccessSession? = nil

        public init() {}

        public init(remoteAccessSession: RemoteAccessSession? = nil) {
            self.remoteAccessSession = remoteAccessSession
        }

    }

    public struct ListArtifactsResult: Serializable, Initializable {
        /// Information about the artifacts.
        var artifacts: [Artifact]? = nil
        /// If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
        var nextToken: String? = nil

        public init() {}

        public init(artifacts: [Artifact]? = nil, nextToken: String? = nil) {
            self.artifacts = artifacts
            self.nextToken = nextToken
        }

    }

    public struct GetNetworkProfileResult: Serializable, Initializable {
        /// The network profile.
        var networkProfile: NetworkProfile? = nil

        public init() {}

        public init(networkProfile: NetworkProfile? = nil) {
            self.networkProfile = networkProfile
        }

    }

    public struct Location: Serializable, Initializable {
        /// The longitude.
        var longitude: Double = 0
        /// The latitude.
        var latitude: Double = 0

        public init() {}

        public init(longitude: Double, latitude: Double) {
            self.longitude = longitude
            self.latitude = latitude
        }

    }

    public struct GetAccountSettingsResult: Serializable, Initializable {
        /// The account settings.
        var accountSettings: AccountSettings? = nil

        public init() {}

        public init(accountSettings: AccountSettings? = nil) {
            self.accountSettings = accountSettings
        }

    }

    public struct GetDevicePoolCompatibilityRequest: Serializable, Initializable {
        /// The ARN of the app that is associated with the specified device pool.
        var appArn: String? = nil
        /// The device pool's ARN.
        var devicePoolArn: String = ""
        /// The test type for the specified device pool. Allowed values include the following:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.   APPIUM_WEB_PYTHON: The Appium Python type for Web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
        var testType: String? = nil

        public init() {}

        public init(appArn: String? = nil, devicePoolArn: String, testType: String? = nil) {
            self.appArn = appArn
            self.devicePoolArn = devicePoolArn
            self.testType = testType
        }

    }

    public struct Resolution: Serializable, Initializable {
        /// The screen resolution's height, expressed in pixels.
        var height: Int32? = nil
        /// The screen resolution's width, expressed in pixels.
        var width: Int32? = nil

        public init() {}

        public init(height: Int32? = nil, width: Int32? = nil) {
            self.height = height
            self.width = width
        }

    }

    public struct RenewOfferingRequest: Serializable, Initializable {
        /// The ID of a request to renew an offering.
        var offeringId: String? = nil
        /// The quantity requested in an offering renewal.
        var quantity: Int32? = nil

        public init() {}

        public init(offeringId: String? = nil, quantity: Int32? = nil) {
            self.offeringId = offeringId
            self.quantity = quantity
        }

    }

    public struct Device: Serializable, Initializable {
        /// The device's display name.
        var name: String? = nil
        /// Information about the device's CPU.
        var cpu: CPU? = nil
        /// The device's platform. Allowed values include:   ANDROID: The Android platform.   IOS: The iOS platform.  
        var platform: String? = nil
        /// The device's heap size, expressed in bytes.
        var heapSize: Int64? = nil
        /// The device's model name.
        var model: String? = nil
        /// The device's radio.
        var radio: String? = nil
        /// The device's total memory size, expressed in bytes.
        var memory: Int64? = nil
        /// The device's ARN.
        var arn: String? = nil
        /// The resolution of the device.
        var resolution: Resolution? = nil
        /// The device's operating system type.
        var os: String? = nil
        /// The device's image name.
        var image: String? = nil
        /// Specifies whether remote access has been enabled for the specified device.
        var remoteAccessEnabled: Bool? = nil
        /// The device's form factor. Allowed values include:   PHONE: The phone form factor.   TABLET: The tablet form factor.  
        var formFactor: String? = nil
        /// The type of fleet to which this device belongs. Possible values for fleet type are PRIVATE and PUBLIC.
        var fleetType: String? = nil
        /// The name of the fleet to which this device belongs.
        var fleetName: String? = nil
        /// The device's manufacturer name.
        var manufacturer: String? = nil
        /// The device's carrier.
        var carrier: String? = nil

        public init() {}

        public init(name: String? = nil, cpu: CPU? = nil, platform: String? = nil, heapSize: Int64? = nil, model: String? = nil, radio: String? = nil, memory: Int64? = nil, arn: String? = nil, resolution: Resolution? = nil, os: String? = nil, image: String? = nil, remoteAccessEnabled: Bool? = nil, formFactor: String? = nil, fleetType: String? = nil, fleetName: String? = nil, manufacturer: String? = nil, carrier: String? = nil) {
            self.name = name
            self.cpu = cpu
            self.platform = platform
            self.heapSize = heapSize
            self.model = model
            self.radio = radio
            self.memory = memory
            self.arn = arn
            self.resolution = resolution
            self.os = os
            self.image = image
            self.remoteAccessEnabled = remoteAccessEnabled
            self.formFactor = formFactor
            self.fleetType = fleetType
            self.fleetName = fleetName
            self.manufacturer = manufacturer
            self.carrier = carrier
        }

    }

    public struct ListRunsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// The Amazon Resource Name (ARN) of the project for which you want to list runs.
        var arn: String = ""

        public init() {}

        public init(nextToken: String? = nil, arn: String) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct Job: Serializable, Initializable {
        /// The device (phone or tablet).
        var device: Device? = nil
        /// The job's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
        var status: String? = nil
        /// The job's name.
        var name: String? = nil
        /// When the job was created.
        var created: Date? = nil
        /// The job's start time.
        var started: Date? = nil
        /// The job's stop time.
        var stopped: Date? = nil
        /// Represents the total (metered or unmetered) minutes used by the job.
        var deviceMinutes: DeviceMinutes? = nil
        /// A message about the job's result.
        var message: String? = nil
        /// The job's type. Allowed values include the following:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for Web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for Web apps.   APPIUM_WEB_PYTHON: The Appium Python type for Web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
        var type: String? = nil
        /// The job's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
        var result: String? = nil
        /// The job's result counters.
        var counters: Counters? = nil
        /// The job's ARN.
        var arn: String? = nil

        public init() {}

        public init(device: Device? = nil, status: String? = nil, name: String? = nil, created: Date? = nil, started: Date? = nil, stopped: Date? = nil, deviceMinutes: DeviceMinutes? = nil, message: String? = nil, type: String? = nil, result: String? = nil, counters: Counters? = nil, arn: String? = nil) {
            self.device = device
            self.status = status
            self.name = name
            self.created = created
            self.started = started
            self.stopped = stopped
            self.deviceMinutes = deviceMinutes
            self.message = message
            self.type = type
            self.result = result
            self.counters = counters
            self.arn = arn
        }

    }

    public struct GetProjectRequest: Serializable, Initializable {
        /// The project's ARN.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct ListProjectsRequest: Serializable, Initializable {
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        var nextToken: String? = nil
        /// Optional. If no Amazon Resource Name (ARN) is specified, then AWS Device Farm returns a list of all projects for the AWS account. You can also specify a project ARN.
        var arn: String? = nil

        public init() {}

        public init(nextToken: String? = nil, arn: String? = nil) {
            self.nextToken = nextToken
            self.arn = arn
        }

    }

    public struct UpdateProjectRequest: Serializable, Initializable {
        /// A string representing the new name of the project that you are updating.
        var name: String? = nil
        /// The number of minutes a test run in the project will execute before it times out.
        var defaultJobTimeoutMinutes: Int32? = nil
        /// The Amazon Resource Name (ARN) of the project whose name you wish to update.
        var arn: String = ""

        public init() {}

        public init(name: String? = nil, defaultJobTimeoutMinutes: Int32? = nil, arn: String) {
            self.name = name
            self.defaultJobTimeoutMinutes = defaultJobTimeoutMinutes
            self.arn = arn
        }

    }

    public struct InstallToRemoteAccessSessionRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the app about which you are requesting information.
        var appArn: String = ""
        /// The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.
        var remoteAccessSessionArn: String = ""

        public init() {}

        public init(appArn: String, remoteAccessSessionArn: String) {
            self.appArn = appArn
            self.remoteAccessSessionArn = remoteAccessSessionArn
        }

    }

    public struct GetDevicePoolCompatibilityResult: Serializable, Initializable {
        /// Information about incompatible devices.
        var incompatibleDevices: [DevicePoolCompatibilityResult]? = nil
        /// Information about compatible devices.
        var compatibleDevices: [DevicePoolCompatibilityResult]? = nil

        public init() {}

        public init(incompatibleDevices: [DevicePoolCompatibilityResult]? = nil, compatibleDevices: [DevicePoolCompatibilityResult]? = nil) {
            self.incompatibleDevices = incompatibleDevices
            self.compatibleDevices = compatibleDevices
        }

    }

    public struct GetRemoteAccessSessionRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the remote access session about which you want to get session information.
        var arn: String = ""

        public init() {}

        public init(arn: String) {
            self.arn = arn
        }

    }

    public struct GetProjectResult: Serializable, Initializable {
        /// The project you wish to get information about.
        var project: Project? = nil

        public init() {}

        public init(project: Project? = nil) {
            self.project = project
        }

    }

}