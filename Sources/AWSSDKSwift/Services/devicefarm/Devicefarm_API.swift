// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
AWS Device Farm is a service that enables mobile app developers to test Android, iOS, and Fire OS apps on physical phones, tablets, and other devices in the cloud.
*/
public struct Devicefarm {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "DeviceFarm_20150623",
            service: "devicefarm",
            endpoint: endpoint
        )
    }

    ///  Gets information about a project.
    public func getProject(_ input: GetProjectRequest) throws -> GetProjectResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetProject", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
    public func installToRemoteAccessSession(_ input: InstallToRemoteAccessSessionRequest) throws -> InstallToRemoteAccessSessionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "InstallToRemoteAccessSession", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about a test.
    public func getTest(_ input: GetTestRequest) throws -> GetTestResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetTest", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Specifies and starts a remote access session.
    public func createRemoteAccessSession(_ input: CreateRemoteAccessSessionRequest) throws -> CreateRemoteAccessSessionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateRemoteAccessSession", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about projects.
    public func listProjects(_ input: ListProjectsRequest) throws -> ListProjectsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListProjects", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a new project.
    public func createProject(_ input: CreateProjectRequest) throws -> CreateProjectResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateProject", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Modifies the specified project name, given the project ARN and a new name.
    public func updateProject(_ input: UpdateProjectRequest) throws -> UpdateProjectResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateProject", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes an AWS Device Farm project, given the project ARN.  Note Deleting this resource does not stop an in-progress run.
    public func deleteProject(_ input: DeleteProjectRequest) throws -> DeleteProjectResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteProject", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a completed remote access session and its results.
    public func deleteRemoteAccessSession(_ input: DeleteRemoteAccessSessionRequest) throws -> DeleteRemoteAccessSessionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteRemoteAccessSession", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
    public func updateDevicePool(_ input: UpdateDevicePoolRequest) throws -> UpdateDevicePoolResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateDevicePool", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a link to a currently running remote access session.
    public func getRemoteAccessSession(_ input: GetRemoteAccessSessionRequest) throws -> GetRemoteAccessSessionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetRemoteAccessSession", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Uploads an app or test scripts.
    public func createUpload(_ input: CreateUploadRequest) throws -> CreateUploadResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateUpload", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
    public func deleteDevicePool(_ input: DeleteDevicePoolRequest) throws -> DeleteDevicePoolResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteDevicePool", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns the list of available network profiles.
    public func listNetworkProfiles(_ input: ListNetworkProfilesRequest) throws -> ListNetworkProfilesResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListNetworkProfiles", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a device pool.
    public func createDevicePool(_ input: CreateDevicePoolRequest) throws -> CreateDevicePoolResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateDevicePool", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about compatibility with a device pool.
    public func getDevicePoolCompatibility(_ input: GetDevicePoolCompatibilityRequest) throws -> GetDevicePoolCompatibilityResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetDevicePoolCompatibility", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about a job.
    public func getJob(_ input: GetJobRequest) throws -> GetJobResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetJob", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about samples, given an AWS Device Farm project ARN
    public func listSamples(_ input: ListSamplesRequest) throws -> ListSamplesResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListSamples", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about device pools.
    public func listDevicePools(_ input: ListDevicePoolsRequest) throws -> ListDevicePoolsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListDevicePools", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about a unique device type.
    public func getDevice(_ input: GetDeviceRequest) throws -> GetDeviceResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetDevice", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about uploads, given an AWS Device Farm project ARN.
    public func listUploads(_ input: ListUploadsRequest) throws -> ListUploadsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListUploads", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about a network profile.
    public func getNetworkProfile(_ input: GetNetworkProfileRequest) throws -> GetNetworkProfileResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetNetworkProfile", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about suites.
    public func listSuites(_ input: ListSuitesRequest) throws -> ListSuitesResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListSuites", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a network profile.
    public func createNetworkProfile(_ input: CreateNetworkProfileRequest) throws -> CreateNetworkProfileResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateNetworkProfile", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Ends a specified remote access session.
    public func stopRemoteAccessSession(_ input: StopRemoteAccessSessionRequest) throws -> StopRemoteAccessSessionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "StopRemoteAccessSession", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about jobs.
    public func listJobs(_ input: ListJobsRequest) throws -> ListJobsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListJobs", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about tests.
    public func listTests(_ input: ListTestsRequest) throws -> ListTestsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListTests", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about a suite.
    public func getSuite(_ input: GetSuiteRequest) throws -> GetSuiteResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSuite", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
    public func getOfferingStatus(_ input: GetOfferingStatusRequest) throws -> GetOfferingStatusResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetOfferingStatus", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about a run.
    public func getRun(_ input: GetRunRequest) throws -> GetRunResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetRun", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a list of all currently running remote access sessions.
    public func listRemoteAccessSessions(_ input: ListRemoteAccessSessionsRequest) throws -> ListRemoteAccessSessionsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListRemoteAccessSessions", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about unique problems.
    public func listUniqueProblems(_ input: ListUniqueProblemsRequest) throws -> ListUniqueProblemsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListUniqueProblems", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
    public func listOfferingTransactions(_ input: ListOfferingTransactionsRequest) throws -> ListOfferingTransactionsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListOfferingTransactions", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the run, given the run ARN.  Note Deleting this resource does not stop an in-progress run.
    public func deleteRun(_ input: DeleteRunRequest) throws -> DeleteRunResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteRun", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Initiates a stop request for the current test run. AWS Device Farm will immediately stop the run on devices where tests have not started executing, and you will not be billed for these devices. On devices where tests have started executing, Setup Suite and Teardown Suite tests will run to completion before stopping execution on those devices. You will be billed for Setup, Teardown, and any tests that were in progress or already completed.
    public func stopRun(_ input: StopRunRequest) throws -> StopRunResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "StopRun", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
    public func purchaseOffering(_ input: PurchaseOfferingRequest) throws -> PurchaseOfferingResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "PurchaseOffering", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Schedules a run.
    public func scheduleRun(_ input: ScheduleRunRequest) throws -> ScheduleRunResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ScheduleRun", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about runs, given an AWS Device Farm project ARN.
    public func listRuns(_ input: ListRunsRequest) throws -> ListRunsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListRuns", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes an upload given the upload ARN.
    public func deleteUpload(_ input: DeleteUploadRequest) throws -> DeleteUploadResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteUpload", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns the number of unmetered iOS and/or unmetered Android devices that have been purchased by the account.
    public func getAccountSettings(_ input: GetAccountSettingsRequest) throws -> GetAccountSettingsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetAccountSettings", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about artifacts.
    public func listArtifacts(_ input: ListArtifactsRequest) throws -> ListArtifactsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListArtifacts", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a network profile.
    public func deleteNetworkProfile(_ input: DeleteNetworkProfileRequest) throws -> DeleteNetworkProfileResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteNetworkProfile", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
    public func listOfferings(_ input: ListOfferingsRequest) throws -> ListOfferingsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListOfferings", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Updates the network profile with specific settings.
    public func updateNetworkProfile(_ input: UpdateNetworkProfileRequest) throws -> UpdateNetworkProfileResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateNetworkProfile", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about a device pool.
    public func getDevicePool(_ input: GetDevicePoolRequest) throws -> GetDevicePoolResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetDevicePool", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Explicitly sets the quantity of devices to renew for an offering, starting from the effectiveDate of the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
    public func renewOffering(_ input: RenewOfferingRequest) throws -> RenewOfferingResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "RenewOffering", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about an upload.
    public func getUpload(_ input: GetUploadRequest) throws -> GetUploadResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetUpload", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets information about unique device types.
    public func listDevices(_ input: ListDevicesRequest) throws -> ListDevicesResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListDevices", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DevicefarmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}