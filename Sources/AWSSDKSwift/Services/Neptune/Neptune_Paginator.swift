// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension Neptune {

    ///  Returns a list of the available DB engines.
    public func describeDBEngineVersionsPaginator(_ input: DescribeDBEngineVersionsMessage, onPage: @escaping (DBEngineVersionMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBEngineVersions, tokenKey: \DBEngineVersionMessage.marker, onPage: onPage)
    }

    ///  Returns information about provisioned instances. This API supports pagination.
    public func describeDBInstancesPaginator(_ input: DescribeDBInstancesMessage, onPage: @escaping (DBInstanceMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBInstances, tokenKey: \DBInstanceMessage.marker, onPage: onPage)
    }

    ///  Returns a list of DBParameterGroup descriptions. If a DBParameterGroupName is specified, the list will contain only the description of the specified DB parameter group.
    public func describeDBParameterGroupsPaginator(_ input: DescribeDBParameterGroupsMessage, onPage: @escaping (DBParameterGroupsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBParameterGroups, tokenKey: \DBParameterGroupsMessage.marker, onPage: onPage)
    }

    ///  Returns the detailed parameter list for a particular DB parameter group.
    public func describeDBParametersPaginator(_ input: DescribeDBParametersMessage, onPage: @escaping (DBParameterGroupDetails, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBParameters, tokenKey: \DBParameterGroupDetails.marker, onPage: onPage)
    }

    ///  Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup. For an overview of CIDR ranges, go to the Wikipedia Tutorial.
    public func describeDBSubnetGroupsPaginator(_ input: DescribeDBSubnetGroupsMessage, onPage: @escaping (DBSubnetGroupMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBSubnetGroups, tokenKey: \DBSubnetGroupMessage.marker, onPage: onPage)
    }

    ///  Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status. If you specify a SubscriptionName, lists the description for that subscription.
    public func describeEventSubscriptionsPaginator(_ input: DescribeEventSubscriptionsMessage, onPage: @escaping (EventSubscriptionsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEventSubscriptions, tokenKey: \EventSubscriptionsMessage.marker, onPage: onPage)
    }

    ///  Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
    public func describeEventsPaginator(_ input: DescribeEventsMessage, onPage: @escaping (EventsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEvents, tokenKey: \EventsMessage.marker, onPage: onPage)
    }

    ///  Returns a list of orderable DB instance options for the specified engine.
    public func describeOrderableDBInstanceOptionsPaginator(_ input: DescribeOrderableDBInstanceOptionsMessage, onPage: @escaping (OrderableDBInstanceOptionsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeOrderableDBInstanceOptions, tokenKey: \OrderableDBInstanceOptionsMessage.marker, onPage: onPage)
    }

}

extension Neptune.DescribeDBEngineVersionsMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeDBEngineVersionsMessage, token: String) {
        self.init(
            dBParameterGroupFamily: original.dBParameterGroupFamily, 
            defaultOnly: original.defaultOnly, 
            engine: original.engine, 
            engineVersion: original.engineVersion, 
            filters: original.filters, 
            listSupportedCharacterSets: original.listSupportedCharacterSets, 
            listSupportedTimezones: original.listSupportedTimezones, 
            marker: token, 
            maxRecords: original.maxRecords
        )
    }
}

extension Neptune.DescribeDBInstancesMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeDBInstancesMessage, token: String) {
        self.init(
            dBInstanceIdentifier: original.dBInstanceIdentifier, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords
        )
    }
}

extension Neptune.DescribeDBParameterGroupsMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeDBParameterGroupsMessage, token: String) {
        self.init(
            dBParameterGroupName: original.dBParameterGroupName, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords
        )
    }
}

extension Neptune.DescribeDBParametersMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeDBParametersMessage, token: String) {
        self.init(
            dBParameterGroupName: original.dBParameterGroupName, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords, 
            source: original.source
        )
    }
}

extension Neptune.DescribeDBSubnetGroupsMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeDBSubnetGroupsMessage, token: String) {
        self.init(
            dBSubnetGroupName: original.dBSubnetGroupName, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords
        )
    }
}

extension Neptune.DescribeEventSubscriptionsMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeEventSubscriptionsMessage, token: String) {
        self.init(
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords, 
            subscriptionName: original.subscriptionName
        )
    }
}

extension Neptune.DescribeEventsMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeEventsMessage, token: String) {
        self.init(
            duration: original.duration, 
            endTime: original.endTime, 
            eventCategories: original.eventCategories, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords, 
            sourceIdentifier: original.sourceIdentifier, 
            sourceType: original.sourceType, 
            startTime: original.startTime
        )
    }
}

extension Neptune.DescribeOrderableDBInstanceOptionsMessage: AWSPaginateStringToken {
    public init(_ original: Neptune.DescribeOrderableDBInstanceOptionsMessage, token: String) {
        self.init(
            dBInstanceClass: original.dBInstanceClass, 
            engine: original.engine, 
            engineVersion: original.engineVersion, 
            filters: original.filters, 
            licenseModel: original.licenseModel, 
            marker: token, 
            maxRecords: original.maxRecords, 
            vpc: original.vpc
        )
    }
}


