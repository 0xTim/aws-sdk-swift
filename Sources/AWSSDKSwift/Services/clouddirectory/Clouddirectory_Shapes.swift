// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Clouddirectory {

    public struct FacetAttribute: Serializable, Initializable {
        /// A facet attribute consists of either a definition or a reference. This structure contains the attribute definition. See Attribute References for more information.
        var attributeDefinition: FacetAttributeDefinition? = nil
        /// Attribute reference associated with the attribute. See Attribute References for more information.
        var attributeReference: FacetAttributeReference? = nil
        /// The name of the facet attribute.
        var name: String = ""
        /// The required behavior of the FacetAttribute.
        var requiredBehavior: String? = nil

        public init() {}

        public init(attributeDefinition: FacetAttributeDefinition? = nil, attributeReference: FacetAttributeReference? = nil, name: String, requiredBehavior: String? = nil) {
            self.attributeDefinition = attributeDefinition
            self.attributeReference = attributeReference
            self.name = name
            self.requiredBehavior = requiredBehavior
        }

    }

    public struct TagResourceRequest: Serializable, Initializable {
        /// ARN of the resource. Tagging is only supported for directories.
        var resourceArn: String = ""
        /// List of tag key value pairs.
        var tags: [Tag] = []

        public init() {}

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

    }

    public struct UpdateSchemaResponse: Serializable, Initializable {
        /// ARN associated with the updated schema. For more information, see arns.
        var schemaArn: String? = nil

        public init() {}

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

    }

    public struct ListObjectChildrenResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// Children structure, which is a map with key as the LinkName and ObjectIdentifier as the value.
        var children: [String: String]? = nil

        public init() {}

        public init(nextToken: String? = nil, children: [String: String]? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

    }

    public struct Rule: Serializable, Initializable {
        /// The type of attribute validation rule.
        var type: String? = nil
        /// Min and max parameters associated with the rule.
        var parameters: [String: String]? = nil

        public init() {}

        public init(type: String? = nil, parameters: [String: String]? = nil) {
            self.type = type
            self.parameters = parameters
        }

    }

    public struct GetDirectoryRequest: Serializable, Initializable {
        /// The ARN of the directory.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct AddFacetToObjectResponse: Serializable, Initializable {

        public init() {}

    }

    public struct TypedAttributeValueRange: Serializable, Initializable {
        /// The attribute value to terminate the range at.
        var endValue: TypedAttributeValue? = nil
        /// Inclusive or exclusive range end.
        var endMode: String = ""
        /// The value to start the range at.
        var startValue: TypedAttributeValue? = nil
        /// Inclusive or exclusive range start.
        var startMode: String = ""

        public init() {}

        public init(endValue: TypedAttributeValue? = nil, endMode: String, startValue: TypedAttributeValue? = nil, startMode: String) {
            self.endValue = endValue
            self.endMode = endMode
            self.startValue = startValue
            self.startMode = startMode
        }

    }

    public struct GetSchemaAsJsonResponse: Serializable, Initializable {
        /// The JSON representation of the schema document.
        var document: String? = nil
        /// The name of the retrieved schema.
        var name: String? = nil

        public init() {}

        public init(document: String? = nil, name: String? = nil) {
            self.document = document
            self.name = name
        }

    }

    public struct AddFacetToObjectRequest: Serializable, Initializable {
        /// ARN associated with the Directory where the object resides. For more information, see arns.
        var directoryArn: String = ""
        /// Identifiers for the facet that you are adding to the object.
        var schemaFacet: SchemaFacet = SchemaFacet()
        /// Attributes on the facet you are adding to the object.
        var objectAttributeList: [AttributeKeyAndValue]? = nil
        /// A reference to the object you are adding the specified facet to.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(directoryArn: String, schemaFacet: SchemaFacet, objectAttributeList: [AttributeKeyAndValue]? = nil, objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.schemaFacet = schemaFacet
            self.objectAttributeList = objectAttributeList
            self.objectReference = objectReference
        }

    }

    public struct ListDevelopmentSchemaArnsRequest: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// The maximum number of results to retrieve.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct Directory: Serializable, Initializable {
        /// The date and time when the directory was created.
        var creationDateTime: Date? = nil
        /// ARN associated with the directory. For more information, see arns.
        var directoryArn: String? = nil
        /// The name of the directory.
        var name: String? = nil
        /// The state of the directory. Can be either Enabled, Disabled, or Deleted.
        var state: String? = nil

        public init() {}

        public init(creationDateTime: Date? = nil, directoryArn: String? = nil, name: String? = nil, state: String? = nil) {
            self.creationDateTime = creationDateTime
            self.directoryArn = directoryArn
            self.name = name
            self.state = state
        }

    }

    public struct LookupPolicyResponse: Serializable, Initializable {
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType.
        var policyToPathList: [PolicyToPath]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(policyToPathList: [PolicyToPath]? = nil, nextToken: String? = nil) {
            self.policyToPathList = policyToPathList
            self.nextToken = nextToken
        }

    }

    public struct BatchRemoveFacetFromObjectResponse: Serializable, Initializable {

        public init() {}

    }

    public struct CreateSchemaResponse: Serializable, Initializable {
        /// ARN associated with the schema. For more information, see arns.
        var schemaArn: String? = nil

        public init() {}

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

    }

    public struct RemoveFacetFromObjectRequest: Serializable, Initializable {
        /// The facet to remove.
        var schemaFacet: SchemaFacet = SchemaFacet()
        /// A reference to the object to remove the facet from.
        var objectReference: ObjectReference = ObjectReference()
        /// The ARN of the directory in which the object resides.
        var directoryArn: String = ""

        public init() {}

        public init(schemaFacet: SchemaFacet, objectReference: ObjectReference, directoryArn: String) {
            self.schemaFacet = schemaFacet
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

    }

    public struct ObjectAttributeRange: Serializable, Initializable {
        /// The range of attribute values being selected.
        var range: TypedAttributeValueRange? = nil
        /// The key of the attribute the attribute range covers.
        var attributeKey: AttributeKey? = nil

        public init() {}

        public init(range: TypedAttributeValueRange? = nil, attributeKey: AttributeKey? = nil) {
            self.range = range
            self.attributeKey = attributeKey
        }

    }

    public struct BatchWriteOperationResponse: Serializable, Initializable {
        /// Result of an add facet to object batch operation.
        var addFacetToObject: BatchAddFacetToObjectResponse? = nil
        /// Updates a given object’s attributes.
        var updateObjectAttributes: BatchUpdateObjectAttributesResponse? = nil
        /// Detaches an object from a Directory.
        var detachObject: BatchDetachObjectResponse? = nil
        /// Attaches an object to a Directory.
        var attachObject: BatchAttachObjectResponse? = nil
        /// Creates an object in a Directory.
        var createObject: BatchCreateObjectResponse? = nil
        /// Deletes an object in a Directory.
        var deleteObject: BatchDeleteObjectResponse? = nil
        /// Result of a batch remove facet from object operation.
        var removeFacetFromObject: BatchRemoveFacetFromObjectResponse? = nil

        public init() {}

        public init(addFacetToObject: BatchAddFacetToObjectResponse? = nil, updateObjectAttributes: BatchUpdateObjectAttributesResponse? = nil, detachObject: BatchDetachObjectResponse? = nil, attachObject: BatchAttachObjectResponse? = nil, createObject: BatchCreateObjectResponse? = nil, deleteObject: BatchDeleteObjectResponse? = nil, removeFacetFromObject: BatchRemoveFacetFromObjectResponse? = nil) {
            self.addFacetToObject = addFacetToObject
            self.updateObjectAttributes = updateObjectAttributes
            self.detachObject = detachObject
            self.attachObject = attachObject
            self.createObject = createObject
            self.deleteObject = deleteObject
            self.removeFacetFromObject = removeFacetFromObject
        }

    }

    public struct Tag: Serializable, Initializable {
        /// Value associated with the tag.
        var value: String? = nil
        /// Key associated with the tag.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct ApplySchemaRequest: Serializable, Initializable {
        /// Published schema ARN that needs to be copied. For more information, see arns.
        var publishedSchemaArn: String = ""
        /// ARN associated with the Directory into which the schema is copied. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(publishedSchemaArn: String, directoryArn: String) {
            self.publishedSchemaArn = publishedSchemaArn
            self.directoryArn = directoryArn
        }

    }

    public struct ListIndexRequest: Serializable, Initializable {
        /// The reference to the index to list.
        var indexReference: ObjectReference = ObjectReference()
        /// The ARN of the directory that the index exists in.
        var directoryArn: String = ""
        /// The consistency level to execute the request at.
        var consistencyLevel: String? = nil
        /// Specifies the ranges of indexed values that you want to query.
        var rangesOnIndexedValues: [ObjectAttributeRange]? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// The maximum number of results to retrieve from the index.
        var maxResults: Int32? = nil

        public init() {}

        public init(indexReference: ObjectReference, directoryArn: String, consistencyLevel: String? = nil, rangesOnIndexedValues: [ObjectAttributeRange]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.indexReference = indexReference
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.rangesOnIndexedValues = rangesOnIndexedValues
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct AttachToIndexRequest: Serializable, Initializable {
        /// A reference to the object that you are attaching to the index.
        var targetReference: ObjectReference = ObjectReference()
        /// A reference to the index that you are attaching the object to.
        var indexReference: ObjectReference = ObjectReference()
        /// The ARN of the directory where the object and index exist.
        var directoryArn: String = ""

        public init() {}

        public init(targetReference: ObjectReference, indexReference: ObjectReference, directoryArn: String) {
            self.targetReference = targetReference
            self.indexReference = indexReference
            self.directoryArn = directoryArn
        }

    }

    public struct BatchListObjectAttributesResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// Attributes map associated with the object. AttributeArn is the key; attribute value is the value.
        var attributes: [AttributeKeyAndValue]? = nil

        public init() {}

        public init(nextToken: String? = nil, attributes: [AttributeKeyAndValue]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

    }

    public struct DeleteDirectoryRequest: Serializable, Initializable {
        /// The ARN of the directory to delete.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct DeleteFacetResponse: Serializable, Initializable {

        public init() {}

    }

    public struct BatchWriteResponse: Serializable, Initializable {
        /// List of all the responses for each batch write.
        var responses: [BatchWriteOperationResponse]? = nil

        public init() {}

        public init(responses: [BatchWriteOperationResponse]? = nil) {
            self.responses = responses
        }

    }

    public struct DeleteDirectoryResponse: Serializable, Initializable {
        /// The ARN of the deleted directory.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct AttachObjectRequest: Serializable, Initializable {
        /// Parent object reference.
        var parentReference: ObjectReference = ObjectReference()
        /// Child object reference to be attached to the object.
        var childReference: ObjectReference = ObjectReference()
        /// ARN associated with the Directory where both objects reside. For more information, see arns.
        var directoryArn: String = ""
        /// Link name with which the child object is attached to the parent.
        var linkName: String = ""

        public init() {}

        public init(parentReference: ObjectReference, childReference: ObjectReference, directoryArn: String, linkName: String) {
            self.parentReference = parentReference
            self.childReference = childReference
            self.directoryArn = directoryArn
            self.linkName = linkName
        }

    }

    public struct GetObjectInformationRequest: Serializable, Initializable {
        /// The consistency level at which to retrieve the object information.
        var consistencyLevel: String? = nil
        /// A reference to the object.
        var objectReference: ObjectReference = ObjectReference()
        /// The ARN of the directory being retrieved.
        var directoryArn: String = ""

        public init() {}

        public init(consistencyLevel: String? = nil, objectReference: ObjectReference, directoryArn: String) {
            self.consistencyLevel = consistencyLevel
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

    }

    public struct DeleteObjectResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ListAttachedIndicesRequest: Serializable, Initializable {
        /// The ARN of the directory.
        var directoryArn: String = ""
        /// A reference to the object to that has indices attached.
        var targetReference: ObjectReference = ObjectReference()
        /// The pagination token.
        var nextToken: String? = nil
        /// The consistency level to use for this operation.
        var consistencyLevel: String? = nil
        /// The maximum number of results to retrieve.
        var maxResults: Int32? = nil

        public init() {}

        public init(directoryArn: String, targetReference: ObjectReference, nextToken: String? = nil, consistencyLevel: String? = nil, maxResults: Int32? = nil) {
            self.directoryArn = directoryArn
            self.targetReference = targetReference
            self.nextToken = nextToken
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
        }

    }

    public struct CreateIndexResponse: Serializable, Initializable {
        /// The ObjectIdentifier of the index created by this operation.
        var objectIdentifier: String? = nil

        public init() {}

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct PolicyAttachment: Serializable, Initializable {
        /// The type of policy that can be associated with PolicyAttachment.
        var policyType: String? = nil
        /// The ObjectIdentifier associated with PolicyAttachment.
        var objectIdentifier: String? = nil
        /// The ID of PolicyAttachment.
        var policyId: String? = nil

        public init() {}

        public init(policyType: String? = nil, objectIdentifier: String? = nil, policyId: String? = nil) {
            self.policyType = policyType
            self.objectIdentifier = objectIdentifier
            self.policyId = policyId
        }

    }

    public struct ListAppliedSchemaArnsResponse: Serializable, Initializable {
        /// The ARNs of schemas that are applied to the directory.
        var schemaArns: [String]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

    }

    public struct EnableDirectoryResponse: Serializable, Initializable {
        /// The ARN of the enabled directory.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct ListTagsForResourceRequest: Serializable, Initializable {
        /// ARN of the resource. Tagging is only supported for directories.
        var resourceArn: String = ""
        /// The pagination token. This is for future use. Currently pagination is not supported for tagging.
        var nextToken: String? = nil
        /// The MaxResults parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.
        var maxResults: Int32? = nil

        public init() {}

        public init(resourceArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ListTagsForResourceResponse: Serializable, Initializable {
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        var nextToken: String? = nil
        /// List of tag key value pairs associated with the response.
        var tags: [Tag]? = nil

        public init() {}

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

    }

    public struct ListPolicyAttachmentsResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// List of ObjectIdentifiers to which the policy is attached.
        var objectIdentifiers: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, objectIdentifiers: [String]? = nil) {
            self.nextToken = nextToken
            self.objectIdentifiers = objectIdentifiers
        }

    }

    public struct ListObjectParentsRequest: Serializable, Initializable {
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil
        /// ARN associated with the Directory where the object resides. For more information, see arns.
        var directoryArn: String = ""
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        var consistencyLevel: String? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// Reference that identifies the object for which parent objects are being listed.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(maxResults: Int32? = nil, directoryArn: String, consistencyLevel: String? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

    }

    public struct PutSchemaFromJsonRequest: Serializable, Initializable {
        /// The replacement JSON schema.
        var document: String = ""
        /// The ARN of the schema to update.
        var schemaArn: String = ""

        public init() {}

        public init(document: String, schemaArn: String) {
            self.document = document
            self.schemaArn = schemaArn
        }

    }

    public struct ListAppliedSchemaArnsRequest: Serializable, Initializable {
        /// The maximum number of results to retrieve.
        var maxResults: Int32? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// The ARN of the directory you are listing.
        var directoryArn: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, directoryArn: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.directoryArn = directoryArn
        }

    }

    public struct ObjectAttributeAction: Serializable, Initializable {
        /// Type can be either Update or Delete.
        var objectAttributeActionType: String? = nil
        /// The value that you want to update to.
        var objectAttributeUpdateValue: TypedAttributeValue? = nil

        public init() {}

        public init(objectAttributeActionType: String? = nil, objectAttributeUpdateValue: TypedAttributeValue? = nil) {
            self.objectAttributeActionType = objectAttributeActionType
            self.objectAttributeUpdateValue = objectAttributeUpdateValue
        }

    }

    public struct DetachObjectRequest: Serializable, Initializable {
        /// Link name associated with the object that needs to be detached.
        var linkName: String = ""
        /// Parent reference from which the object with the specified link name is detached.
        var parentReference: ObjectReference = ObjectReference()
        /// ARN associated with the Directory where objects reside. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(linkName: String, parentReference: ObjectReference, directoryArn: String) {
            self.linkName = linkName
            self.parentReference = parentReference
            self.directoryArn = directoryArn
        }

    }

    public struct DetachPolicyRequest: Serializable, Initializable {
        /// Reference that identifies the policy object.
        var policyReference: ObjectReference = ObjectReference()
        /// Reference that identifies the object whose policy object will be detached.
        var objectReference: ObjectReference = ObjectReference()
        /// ARN associated with the Directory where both objects reside. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(policyReference: ObjectReference, objectReference: ObjectReference, directoryArn: String) {
            self.policyReference = policyReference
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

    }

    public struct SchemaFacet: Serializable, Initializable {
        /// The ARN of the schema that contains the facet.
        var schemaArn: String? = nil
        /// The name of the facet.
        var facetName: String? = nil

        public init() {}

        public init(schemaArn: String? = nil, facetName: String? = nil) {
            self.schemaArn = schemaArn
            self.facetName = facetName
        }

    }

    public struct PublishSchemaRequest: Serializable, Initializable {
        /// ARN associated with the development schema. For more information, see arns.
        var developmentSchemaArn: String = ""
        /// New name under which the schema will be published. If this is not provided, the development schema is considered.
        var name: String? = nil
        /// Version under which the schema will be published.
        var version: String = ""

        public init() {}

        public init(developmentSchemaArn: String, name: String? = nil, version: String) {
            self.developmentSchemaArn = developmentSchemaArn
            self.name = name
            self.version = version
        }

    }

    public struct GetDirectoryResponse: Serializable, Initializable {
        /// Metadata about the directory.
        var directory: Directory = Directory()

        public init() {}

        public init(directory: Directory) {
            self.directory = directory
        }

    }

    public struct BatchReadResponse: Serializable, Initializable {
        /// List of all the responses for each batch read.
        var responses: [BatchReadOperationResponse]? = nil

        public init() {}

        public init(responses: [BatchReadOperationResponse]? = nil) {
            self.responses = responses
        }

    }

    public struct BatchDetachObjectResponse: Serializable, Initializable {
        /// The ObjectIdentifier of the detached object.
        var detachedObjectIdentifier: String? = nil

        public init() {}

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

    }

    public struct FacetAttributeReference: Serializable, Initializable {
        /// Target attribute name associated with the facet reference. See Attribute References for more information.
        var targetAttributeName: String = ""
        /// Target facet name associated with the facet reference. See Attribute References for more information.
        var targetFacetName: String = ""

        public init() {}

        public init(targetAttributeName: String, targetFacetName: String) {
            self.targetAttributeName = targetAttributeName
            self.targetFacetName = targetFacetName
        }

    }

    public struct BatchDeleteObject: Serializable, Initializable {
        /// Reference that identifies the object.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

    }

    public struct CreateObjectRequest: Serializable, Initializable {
        /// List of facet ARNs to be associated with the object. For more information, see arns.
        var schemaFacets: [SchemaFacet] = []
        /// If specified, the parent reference to which this object will be attached.
        var parentReference: ObjectReference? = nil
        /// ARN associated with the Directory in which the object will be created. For more information, see arns.
        var directoryArn: String = ""
        /// Attribute map whose attribute ARN contains the key and attribute value as the map value.
        var objectAttributeList: [AttributeKeyAndValue]? = nil
        /// The name of link that is used to attach this object to a parent.
        var linkName: String? = nil

        public init() {}

        public init(schemaFacets: [SchemaFacet], parentReference: ObjectReference? = nil, directoryArn: String, objectAttributeList: [AttributeKeyAndValue]? = nil, linkName: String? = nil) {
            self.schemaFacets = schemaFacets
            self.parentReference = parentReference
            self.directoryArn = directoryArn
            self.objectAttributeList = objectAttributeList
            self.linkName = linkName
        }

    }

    public struct ApplySchemaResponse: Serializable, Initializable {
        /// Applied schema ARN associated with the copied schema in the Directory. You can use this ARN to describe the schema information applied on this directory. For more information, see arns.
        var appliedSchemaArn: String? = nil
        /// ARN associated with the Directory. For more information, see arns.
        var directoryArn: String? = nil

        public init() {}

        public init(appliedSchemaArn: String? = nil, directoryArn: String? = nil) {
            self.appliedSchemaArn = appliedSchemaArn
            self.directoryArn = directoryArn
        }

    }

    public struct CreateFacetResponse: Serializable, Initializable {

        public init() {}

    }

    public struct LookupPolicyRequest: Serializable, Initializable {
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil
        /// ARN associated with the Directory. For more information, see arns.
        var directoryArn: String = ""
        /// The token to request the next page of results.
        var nextToken: String? = nil
        /// Reference that identifies the object whose policies will be looked up.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(maxResults: Int32? = nil, directoryArn: String, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

    }

    public struct BatchReadOperationResponse: Serializable, Initializable {
        /// Identifies which operation in a batch has failed.
        var exceptionResponse: BatchReadException? = nil
        /// Identifies which operation in a batch has succeeded.
        var successfulResponse: BatchReadSuccessfulResponse? = nil

        public init() {}

        public init(exceptionResponse: BatchReadException? = nil, successfulResponse: BatchReadSuccessfulResponse? = nil) {
            self.exceptionResponse = exceptionResponse
            self.successfulResponse = successfulResponse
        }

    }

    public struct ListAttachedIndicesResponse: Serializable, Initializable {
        /// The indices attached to the specified object.
        var indexAttachments: [IndexAttachment]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

    }

    public struct BatchAddFacetToObject: Serializable, Initializable {
        /// Represents the facet being added to the object.
        var schemaFacet: SchemaFacet = SchemaFacet()
        /// The attributes to set on the object.
        var objectAttributeList: [AttributeKeyAndValue] = []
        /// A reference to the object being mutated.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(schemaFacet: SchemaFacet, objectAttributeList: [AttributeKeyAndValue], objectReference: ObjectReference) {
            self.schemaFacet = schemaFacet
            self.objectAttributeList = objectAttributeList
            self.objectReference = objectReference
        }

    }

    public struct ListObjectAttributesResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// Attributes map associated with the object. AttributeArn is the key, and attribute value is the value.
        var attributes: [AttributeKeyAndValue]? = nil

        public init() {}

        public init(nextToken: String? = nil, attributes: [AttributeKeyAndValue]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

    }

    public struct BatchUpdateObjectAttributes: Serializable, Initializable {
        /// Attributes update structure.
        var attributeUpdates: [ObjectAttributeUpdate] = []
        /// Reference that identifies the object.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(attributeUpdates: [ObjectAttributeUpdate], objectReference: ObjectReference) {
            self.attributeUpdates = attributeUpdates
            self.objectReference = objectReference
        }

    }

    public struct CreateFacetRequest: Serializable, Initializable {
        /// Specifies whether a given object created from this facet is of type Node, Leaf Node, Policy or Index.   Node: Can have multiple children but one parent.     Leaf Node: Cannot have children but can have multiple parents.     Policy: Allows you to store a policy document and policy type. For more information, see Policies.     Index: Can be created with the Index API.  
        var objectType: String = ""
        /// Attributes associated with the Facet.e
        var attributes: [FacetAttribute]? = nil
        /// Name of the Facet, which is unique for a given schema.
        var name: String = ""
        /// Schema ARN in which the new Facet will be created. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(objectType: String, attributes: [FacetAttribute]? = nil, name: String, schemaArn: String) {
            self.objectType = objectType
            self.attributes = attributes
            self.name = name
            self.schemaArn = schemaArn
        }

    }

    public struct RemoveFacetFromObjectResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ListFacetNamesResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// The names of facets that exist within the schema.
        var facetNames: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, facetNames: [String]? = nil) {
            self.nextToken = nextToken
            self.facetNames = facetNames
        }

    }

    public struct CreateDirectoryResponse: Serializable, Initializable {
        /// ARN associated with the Directory. For more information, see arns.
        var directoryArn: String = ""
        /// Name of the Directory.
        var name: String = ""
        /// The root object node of the created directory.
        var objectIdentifier: String = ""
        /// ARN of the published schema in the Directory. Once a published schema is copied into the directory, it has its own ARN which is referred to applied schema ARN. For more information, see arns.
        var appliedSchemaArn: String = ""

        public init() {}

        public init(directoryArn: String, name: String, objectIdentifier: String, appliedSchemaArn: String) {
            self.directoryArn = directoryArn
            self.name = name
            self.objectIdentifier = objectIdentifier
            self.appliedSchemaArn = appliedSchemaArn
        }

    }

    public struct AttachPolicyResponse: Serializable, Initializable {

        public init() {}

    }

    public struct BatchCreateObject: Serializable, Initializable {
        /// If specified, the parent reference to which this object will be attached.
        var parentReference: ObjectReference = ObjectReference()
        /// List of FacetArns that will be associated with the object. For more information, see arns.
        var schemaFacet: [SchemaFacet] = []
        /// The batch reference name. See Batches for more information.
        var batchReferenceName: String = ""
        /// Attribute map, which contains an attribute ARN as the key and attribute value as the map value.
        var objectAttributeList: [AttributeKeyAndValue] = []
        /// The name of the link.
        var linkName: String = ""

        public init() {}

        public init(parentReference: ObjectReference, schemaFacet: [SchemaFacet], batchReferenceName: String, objectAttributeList: [AttributeKeyAndValue], linkName: String) {
            self.parentReference = parentReference
            self.schemaFacet = schemaFacet
            self.batchReferenceName = batchReferenceName
            self.objectAttributeList = objectAttributeList
            self.linkName = linkName
        }

    }

    public struct UntagResourceRequest: Serializable, Initializable {
        /// ARN of the resource. Tagging is only supported for directories.
        var resourceArn: String = ""
        /// Keys of the tag that needs to be removed from the resource.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

    }

    public struct ListDirectoriesResponse: Serializable, Initializable {
        /// Lists all directories associated with your account in pagination fashion.
        var directories: [Directory] = []
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(directories: [Directory], nextToken: String? = nil) {
            self.directories = directories
            self.nextToken = nextToken
        }

    }

    public struct BatchListObjectChildrenResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// Children structure, which is a map with key as the LinkName and ObjectIdentifier as the value.
        var children: [String: String]? = nil

        public init() {}

        public init(nextToken: String? = nil, children: [String: String]? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

    }

    public struct ListObjectPoliciesRequest: Serializable, Initializable {
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil
        /// ARN associated with the Directory where objects reside. For more information, see arns.
        var directoryArn: String = ""
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        var consistencyLevel: String? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// Reference that identifies the object for which policies will be listed.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(maxResults: Int32? = nil, directoryArn: String, consistencyLevel: String? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

    }

    public struct DisableDirectoryRequest: Serializable, Initializable {
        /// The ARN of the directory to disable.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct DetachFromIndexResponse: Serializable, Initializable {
        /// The ObjectIdentifier of the object that was detached from the index.
        var detachedObjectIdentifier: String? = nil

        public init() {}

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

    }

    public struct BatchAddFacetToObjectResponse: Serializable, Initializable {

        public init() {}

    }

    public struct BatchListObjectAttributes: Serializable, Initializable {
        /// Reference of the object whose attributes need to be listed.
        var objectReference: ObjectReference = ObjectReference()
        /// The pagination token.
        var nextToken: String? = nil
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil

        public init() {}

        public init(objectReference: ObjectReference, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct AttachObjectResponse: Serializable, Initializable {
        /// Attached ObjectIdentifier, which is the child ObjectIdentifier.
        var attachedObjectIdentifier: String? = nil

        public init() {}

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

    }

    public struct ListObjectParentPathsRequest: Serializable, Initializable {
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil
        /// The ARN of the directory to which the parent path applies.
        var directoryArn: String = ""
        /// The pagination token.
        var nextToken: String? = nil
        /// Reference that identifies the object whose parent paths are listed.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(maxResults: Int32? = nil, directoryArn: String, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

    }

    public struct CreateDirectoryRequest: Serializable, Initializable {
        /// Name of the Directory. Should be unique per account, per region.
        var name: String = ""
        /// ARN of the published schema that will be copied into the data Directory. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

    }

    public struct GetSchemaAsJsonRequest: Serializable, Initializable {
        /// The ARN of the schema to retrieve.
        var schemaArn: String = ""

        public init() {}

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

    }

    public struct UpdateFacetRequest: Serializable, Initializable {
        /// Object type associated with the facet. See CreateFacetRequest$ObjectType for more details.
        var objectType: String? = nil
        /// List of attributes that need to be updated in a given schema Facet. Each attribute is followed by AttributeAction, which specifies the type of update operation to perform. 
        var attributeUpdates: [FacetAttributeUpdate]? = nil
        ///  
        var name: String = ""
        /// ARN associated with the Facet. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(objectType: String? = nil, attributeUpdates: [FacetAttributeUpdate]? = nil, name: String, schemaArn: String) {
            self.objectType = objectType
            self.attributeUpdates = attributeUpdates
            self.name = name
            self.schemaArn = schemaArn
        }

    }

    public struct DisableDirectoryResponse: Serializable, Initializable {
        /// The ARN of the directory that has been disabled.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct AttachPolicyRequest: Serializable, Initializable {
        /// Reference associated with the policy object.
        var policyReference: ObjectReference = ObjectReference()
        /// Reference that identifies the object to which the policy will be attached.
        var objectReference: ObjectReference = ObjectReference()
        /// ARN associated with the Directory where both objects reside. For more information, see arns.
        var directoryArn: String? = nil

        public init() {}

        public init(policyReference: ObjectReference, objectReference: ObjectReference, directoryArn: String? = nil) {
            self.policyReference = policyReference
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

    }

    public struct ListDevelopmentSchemaArnsResponse: Serializable, Initializable {
        /// The ARNs of retrieved development schemas.
        var schemaArns: [String]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

    }

    public struct BatchWriteRequest: Serializable, Initializable {
        /// List of operations that are part of the batch.
        var operations: [BatchWriteOperation] = []
        /// ARN associated with the Directory. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(operations: [BatchWriteOperation], directoryArn: String) {
            self.operations = operations
            self.directoryArn = directoryArn
        }

    }

    public struct BatchCreateObjectResponse: Serializable, Initializable {
        /// ID associated with the object.
        var objectIdentifier: String? = nil

        public init() {}

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct BatchUpdateObjectAttributesResponse: Serializable, Initializable {
        /// ID associated with the object.
        var objectIdentifier: String? = nil

        public init() {}

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct BatchReadRequest: Serializable, Initializable {
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        var consistencyLevel: String? = nil
        /// List of operations that are part of the batch.
        var operations: [BatchReadOperation] = []
        /// ARN associated with the Directory. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(consistencyLevel: String? = nil, operations: [BatchReadOperation], directoryArn: String) {
            self.consistencyLevel = consistencyLevel
            self.operations = operations
            self.directoryArn = directoryArn
        }

    }

    public struct ListPublishedSchemaArnsResponse: Serializable, Initializable {
        /// The ARNs of published schemas.
        var schemaArns: [String]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

    }

    public struct BatchReadSuccessfulResponse: Serializable, Initializable {
        /// Returns a paginated list of child objects associated with a given object.
        var listObjectChildren: BatchListObjectChildrenResponse? = nil
        /// Lists all attributes associated with an object.
        var listObjectAttributes: BatchListObjectAttributesResponse? = nil

        public init() {}

        public init(listObjectChildren: BatchListObjectChildrenResponse? = nil, listObjectAttributes: BatchListObjectAttributesResponse? = nil) {
            self.listObjectChildren = listObjectChildren
            self.listObjectAttributes = listObjectAttributes
        }

    }

    public struct TypedAttributeValue: Serializable, Initializable {
        /// A string data value.
        var stringValue: String? = nil
        /// A binary data value.
        var binaryValue: Data? = nil
        /// A Boolean data value.
        var booleanValue: Bool? = nil
        /// A date and time value.
        var datetimeValue: Date? = nil
        /// A number data value.
        var numberValue: String? = nil

        public init() {}

        public init(stringValue: String? = nil, binaryValue: Data? = nil, booleanValue: Bool? = nil, datetimeValue: Date? = nil, numberValue: String? = nil) {
            self.stringValue = stringValue
            self.binaryValue = binaryValue
            self.booleanValue = booleanValue
            self.datetimeValue = datetimeValue
            self.numberValue = numberValue
        }

    }

    public struct ListObjectParentPathsResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// Returns the path to the ObjectIdentifiers associated with the directory.
        var pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil

        public init() {}

        public init(nextToken: String? = nil, pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil) {
            self.nextToken = nextToken
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
        }

    }

    public struct AttributeKey: Serializable, Initializable {
        /// The name of the attribute.
        var name: String = ""
        /// The ARN of the schema that contains the facet and attribute.
        var schemaArn: String = ""
        /// The name of the facet the attribute exists within.
        var facetName: String = ""

        public init() {}

        public init(name: String, schemaArn: String, facetName: String) {
            self.name = name
            self.schemaArn = schemaArn
            self.facetName = facetName
        }

    }

    public struct PathToObjectIdentifiers: Serializable, Initializable {
        /// Lists ObjectIdentifiers starting from directory root to the object in the request.
        var objectIdentifiers: [String]? = nil
        /// The path used to identify the object starting from directory root.
        var path: String? = nil

        public init() {}

        public init(objectIdentifiers: [String]? = nil, path: String? = nil) {
            self.objectIdentifiers = objectIdentifiers
            self.path = path
        }

    }

    public struct BatchDetachObject: Serializable, Initializable {
        /// The batch reference name. See Batches for more information.
        var batchReferenceName: String = ""
        /// Parent reference from which the object with the specified link name is detached.
        var parentReference: ObjectReference = ObjectReference()
        /// The name of the link.
        var linkName: String = ""

        public init() {}

        public init(batchReferenceName: String, parentReference: ObjectReference, linkName: String) {
            self.batchReferenceName = batchReferenceName
            self.parentReference = parentReference
            self.linkName = linkName
        }

    }

    public struct GetFacetRequest: Serializable, Initializable {
        /// The name of the facet to retrieve.
        var name: String = ""
        /// ARN associated with the Facet. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

    }

    public struct UpdateSchemaRequest: Serializable, Initializable {
        /// Name of the schema.
        var name: String = ""
        /// ARN of the development schema. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

    }

    public struct IndexAttachment: Serializable, Initializable {
        /// The indexed attribute values.
        var indexedAttributes: [AttributeKeyAndValue]? = nil
        /// The ObjectIdentifier of the object attached to the index.
        var objectIdentifier: String? = nil

        public init() {}

        public init(indexedAttributes: [AttributeKeyAndValue]? = nil, objectIdentifier: String? = nil) {
            self.indexedAttributes = indexedAttributes
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct ObjectAttributeUpdate: Serializable, Initializable {
        /// The key of the attribute being updated.
        var objectAttributeKey: AttributeKey? = nil
        /// The action to perform as part of the attribute update.
        var objectAttributeAction: ObjectAttributeAction? = nil

        public init() {}

        public init(objectAttributeKey: AttributeKey? = nil, objectAttributeAction: ObjectAttributeAction? = nil) {
            self.objectAttributeKey = objectAttributeKey
            self.objectAttributeAction = objectAttributeAction
        }

    }

    public struct CreateIndexRequest: Serializable, Initializable {
        /// Specifies the Attributes that should be indexed on. Currently only a single attribute is supported.
        var orderedIndexedAttributeList: [AttributeKey] = []
        /// Indicates whether objects with the same indexed attribute value can be added to the index.
        var isUnique: Bool = false
        /// A reference to the parent object that contains the index object.
        var parentReference: ObjectReference? = nil
        /// The ARN of the directory where the index should be created.
        var directoryArn: String = ""
        /// The name of the link between the parent object and the index object.
        var linkName: String? = nil

        public init() {}

        public init(orderedIndexedAttributeList: [AttributeKey], isUnique: Bool, parentReference: ObjectReference? = nil, directoryArn: String, linkName: String? = nil) {
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.isUnique = isUnique
            self.parentReference = parentReference
            self.directoryArn = directoryArn
            self.linkName = linkName
        }

    }

    public struct Facet: Serializable, Initializable {
        /// Object type associated with the facet. See CreateFacetRequest$ObjectType for more details.
        var objectType: String? = nil
        /// The name of the Facet.
        var name: String? = nil

        public init() {}

        public init(objectType: String? = nil, name: String? = nil) {
            self.objectType = objectType
            self.name = name
        }

    }

    public struct ListDirectoriesRequest: Serializable, Initializable {
        /// The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.
        var state: String? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// The maximum number of results to retrieve.
        var maxResults: Int32? = nil

        public init() {}

        public init(state: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.state = state
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct FacetAttributeDefinition: Serializable, Initializable {
        /// Whether the attribute is mutable or not.
        var isImmutable: Bool? = nil
        /// Validation rules attached to the attribute definition.
        var rules: [String: Rule]? = nil
        /// The type of the attribute.
        var type: String = ""
        /// The default value of the attribute (if configured).
        var defaultValue: TypedAttributeValue? = nil

        public init() {}

        public init(isImmutable: Bool? = nil, rules: [String: Rule]? = nil, type: String, defaultValue: TypedAttributeValue? = nil) {
            self.isImmutable = isImmutable
            self.rules = rules
            self.type = type
            self.defaultValue = defaultValue
        }

    }

    public struct DetachPolicyResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ListObjectAttributesRequest: Serializable, Initializable {
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil
        /// ARN associated with the Directory where the object resides. For more information, see arns.
        var directoryArn: String = ""
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        var consistencyLevel: String? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// Reference that identifies the object whose attributes will be listed.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(maxResults: Int32? = nil, directoryArn: String, consistencyLevel: String? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

    }

    public struct PublishSchemaResponse: Serializable, Initializable {
        /// ARN associated with the published schema. For more information, see arns.
        var publishedSchemaArn: String? = nil

        public init() {}

        public init(publishedSchemaArn: String? = nil) {
            self.publishedSchemaArn = publishedSchemaArn
        }

    }

    public struct CreateObjectResponse: Serializable, Initializable {
        /// Identifier associated with the object.
        var objectIdentifier: String? = nil

        public init() {}

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct DeleteSchemaRequest: Serializable, Initializable {
        /// ARN of the development schema. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

    }

    public struct GetObjectInformationResponse: Serializable, Initializable {
        /// The facets attached to the specified object.
        var schemaFacets: [SchemaFacet]? = nil
        /// The ObjectIdentifier of the specified object.
        var objectIdentifier: String? = nil

        public init() {}

        public init(schemaFacets: [SchemaFacet]? = nil, objectIdentifier: String? = nil) {
            self.schemaFacets = schemaFacets
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct TagResourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ListIndexResponse: Serializable, Initializable {
        /// The objects and indexed values attached to the index.
        var indexAttachments: [IndexAttachment]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

    }

    public struct UpdateObjectAttributesRequest: Serializable, Initializable {
        /// Reference that identifies the object.
        var objectReference: ObjectReference = ObjectReference()
        /// Attributes update structure.
        var attributeUpdates: [ObjectAttributeUpdate] = []
        /// ARN associated with the Directory where the object resides. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(objectReference: ObjectReference, attributeUpdates: [ObjectAttributeUpdate], directoryArn: String) {
            self.objectReference = objectReference
            self.attributeUpdates = attributeUpdates
            self.directoryArn = directoryArn
        }

    }

    public struct BatchWriteOperation: Serializable, Initializable {
        /// Batch operation adding a facet to an object.
        var addFacetToObject: BatchAddFacetToObject? = nil
        /// Update a given object's attributes.
        var updateObjectAttributes: BatchUpdateObjectAttributes? = nil
        /// Detaches an object from a Directory.
        var detachObject: BatchDetachObject? = nil
        /// Attaches an object to a Directory.
        var attachObject: BatchAttachObject? = nil
        /// Creates an object.
        var createObject: BatchCreateObject? = nil
        /// Deletes an object in a Directory.
        var deleteObject: BatchDeleteObject? = nil
        /// Batch operation removing a facet from an object.
        var removeFacetFromObject: BatchRemoveFacetFromObject? = nil

        public init() {}

        public init(addFacetToObject: BatchAddFacetToObject? = nil, updateObjectAttributes: BatchUpdateObjectAttributes? = nil, detachObject: BatchDetachObject? = nil, attachObject: BatchAttachObject? = nil, createObject: BatchCreateObject? = nil, deleteObject: BatchDeleteObject? = nil, removeFacetFromObject: BatchRemoveFacetFromObject? = nil) {
            self.addFacetToObject = addFacetToObject
            self.updateObjectAttributes = updateObjectAttributes
            self.detachObject = detachObject
            self.attachObject = attachObject
            self.createObject = createObject
            self.deleteObject = deleteObject
            self.removeFacetFromObject = removeFacetFromObject
        }

    }

    public struct DeleteSchemaResponse: Serializable, Initializable {
        /// Input ARN that is returned as part of the response. For more information, see arns.
        var schemaArn: String? = nil

        public init() {}

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

    }

    public struct ListObjectChildrenRequest: Serializable, Initializable {
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil
        /// ARN associated with the Directory where the object resides. For more information, see arns.
        var directoryArn: String = ""
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        var consistencyLevel: String? = nil
        /// The pagination token.
        var nextToken: String? = nil
        /// Reference that identifies the object for which child objects are being listed.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(maxResults: Int32? = nil, directoryArn: String, consistencyLevel: String? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

    }

    public struct ListPublishedSchemaArnsRequest: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// The maximum number of results to retrieve.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct CreateSchemaRequest: Serializable, Initializable {
        /// Name associated with the schema. This is unique to each account and in each region.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct GetFacetResponse: Serializable, Initializable {
        ///  Facet structure associated with the facet.
        var facet: Facet? = nil

        public init() {}

        public init(facet: Facet? = nil) {
            self.facet = facet
        }

    }

    public struct ListObjectPoliciesResponse: Serializable, Initializable {
        /// List of policy ObjectIdentifiers, that are attached to the object.
        var attachedPolicyIds: [String]? = nil
        /// The pagination token.
        var nextToken: String? = nil

        public init() {}

        public init(attachedPolicyIds: [String]? = nil, nextToken: String? = nil) {
            self.attachedPolicyIds = attachedPolicyIds
            self.nextToken = nextToken
        }

    }

    public struct PutSchemaFromJsonResponse: Serializable, Initializable {
        /// The ARN of the schema to update.
        var arn: String? = nil

        public init() {}

        public init(arn: String? = nil) {
            self.arn = arn
        }

    }

    public struct BatchAttachObject: Serializable, Initializable {
        /// Child object reference to be attached to the object.
        var childReference: ObjectReference = ObjectReference()
        /// Parent object reference.
        var parentReference: ObjectReference = ObjectReference()
        /// The name of the link.
        var linkName: String = ""

        public init() {}

        public init(childReference: ObjectReference, parentReference: ObjectReference, linkName: String) {
            self.childReference = childReference
            self.parentReference = parentReference
            self.linkName = linkName
        }

    }

    public struct DetachObjectResponse: Serializable, Initializable {
        /// The ObjectIdentifier that was detached from the object.
        var detachedObjectIdentifier: String? = nil

        public init() {}

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

    }

    public struct AttributeKeyAndValue: Serializable, Initializable {
        /// The value of the attribute.
        var value: TypedAttributeValue = TypedAttributeValue()
        /// The key of the attribute.
        var key: AttributeKey = AttributeKey()

        public init() {}

        public init(value: TypedAttributeValue, key: AttributeKey) {
            self.value = value
            self.key = key
        }

    }

    public struct EnableDirectoryRequest: Serializable, Initializable {
        /// The ARN of the directory to enable.
        var directoryArn: String = ""

        public init() {}

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

    }

    public struct ListFacetAttributesResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// The attributes attached to the facet.
        var attributes: [FacetAttribute]? = nil

        public init() {}

        public init(nextToken: String? = nil, attributes: [FacetAttribute]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

    }

    public struct BatchReadOperation: Serializable, Initializable {
        /// Returns a paginated list of child objects that are associated with a given object.
        var listObjectChildren: BatchListObjectChildren? = nil
        /// Lists all attributes associated with an object.
        var listObjectAttributes: BatchListObjectAttributes? = nil

        public init() {}

        public init(listObjectChildren: BatchListObjectChildren? = nil, listObjectAttributes: BatchListObjectAttributes? = nil) {
            self.listObjectChildren = listObjectChildren
            self.listObjectAttributes = listObjectAttributes
        }

    }

    public struct ListFacetAttributesRequest: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// The name of the facet whose attributes will be retrieved.
        var name: String = ""
        /// The ARN of the schema where the facet resides.
        var schemaArn: String = ""
        /// The maximum number of results to retrieve.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, name: String, schemaArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.name = name
            self.schemaArn = schemaArn
            self.maxResults = maxResults
        }

    }

    public struct BatchReadException: Serializable, Initializable {
        /// Type of exception, such as InvalidArnException.
        var type: String? = nil
        /// Exception message associated with the failure.
        var message: String? = nil

        public init() {}

        public init(type: String? = nil, message: String? = nil) {
            self.type = type
            self.message = message
        }

    }

    public struct DeleteObjectRequest: Serializable, Initializable {
        /// Reference that identifies the object.
        var objectReference: ObjectReference = ObjectReference()
        /// ARN associated with the Directory where the object resides. For more information, see arns.
        var directoryArn: String = ""

        public init() {}

        public init(objectReference: ObjectReference, directoryArn: String) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

    }

    public struct BatchListObjectChildren: Serializable, Initializable {
        /// Reference of the object for which child objects are being listed.
        var objectReference: ObjectReference = ObjectReference()
        /// The pagination token.
        var nextToken: String? = nil
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil

        public init() {}

        public init(objectReference: ObjectReference, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct UntagResourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct PolicyToPath: Serializable, Initializable {
        /// List of policy objects.
        var policies: [PolicyAttachment]? = nil
        /// The path that is referenced from the root.
        var path: String? = nil

        public init() {}

        public init(policies: [PolicyAttachment]? = nil, path: String? = nil) {
            self.policies = policies
            self.path = path
        }

    }

    public struct ObjectReference: Serializable, Initializable {
        /// Allows you to specify an object. You can identify an object in one of the following ways:    $ObjectIdentifier - Identifies the object by ObjectIdentifier     /some/path - Identifies the object based on path    #SomeBatchReference - Identifies the object in a batch call  
        var selector: String? = nil

        public init() {}

        public init(selector: String? = nil) {
            self.selector = selector
        }

    }

    public struct UpdateFacetResponse: Serializable, Initializable {

        public init() {}

    }

    public struct AttachToIndexResponse: Serializable, Initializable {
        /// The ObjectIdentifier of the object that was attached to the index.
        var attachedObjectIdentifier: String? = nil

        public init() {}

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

    }

    public struct DetachFromIndexRequest: Serializable, Initializable {
        /// A reference to the object being detached from the index.
        var targetReference: ObjectReference = ObjectReference()
        /// A reference to the index object.
        var indexReference: ObjectReference = ObjectReference()
        /// The ARN of the directory the index and object exist in.
        var directoryArn: String = ""

        public init() {}

        public init(targetReference: ObjectReference, indexReference: ObjectReference, directoryArn: String) {
            self.targetReference = targetReference
            self.indexReference = indexReference
            self.directoryArn = directoryArn
        }

    }

    public struct BatchRemoveFacetFromObject: Serializable, Initializable {
        /// The facet to remove from the object.
        var schemaFacet: SchemaFacet = SchemaFacet()
        /// A reference to the object whose facet will be removed.
        var objectReference: ObjectReference = ObjectReference()

        public init() {}

        public init(schemaFacet: SchemaFacet, objectReference: ObjectReference) {
            self.schemaFacet = schemaFacet
            self.objectReference = objectReference
        }

    }

    public struct ListFacetNamesRequest: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// The ARN to retrieve facet names from.
        var schemaArn: String = ""
        /// The maximum number of results to retrieve
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, schemaArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.maxResults = maxResults
        }

    }

    public struct BatchAttachObjectResponse: Serializable, Initializable {
        /// The ObjectIdentifier of the object that has been attached.
        var attachedObjectIdentifier: String? = nil

        public init() {}

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

    }

    public struct FacetAttributeUpdate: Serializable, Initializable {
        /// The action to perform when updating the attribute.
        var action: String? = nil
        /// The attribute to update.
        var attribute: FacetAttribute? = nil

        public init() {}

        public init(action: String? = nil, attribute: FacetAttribute? = nil) {
            self.action = action
            self.attribute = attribute
        }

    }

    public struct UpdateObjectAttributesResponse: Serializable, Initializable {
        ///  ObjectIdentifier of the updated object.
        var objectIdentifier: String? = nil

        public init() {}

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

    }

    public struct BatchDeleteObjectResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ListPolicyAttachmentsRequest: Serializable, Initializable {
        /// ARN associated with the Directory where objects reside. For more information, see arns.
        var directoryArn: String = ""
        /// Reference that identifies the policy object.
        var policyReference: ObjectReference = ObjectReference()
        /// The pagination token.
        var nextToken: String? = nil
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        var consistencyLevel: String? = nil
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        var maxResults: Int32? = nil

        public init() {}

        public init(directoryArn: String, policyReference: ObjectReference, nextToken: String? = nil, consistencyLevel: String? = nil, maxResults: Int32? = nil) {
            self.directoryArn = directoryArn
            self.policyReference = policyReference
            self.nextToken = nextToken
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
        }

    }

    public struct ListObjectParentsResponse: Serializable, Initializable {
        /// The pagination token.
        var nextToken: String? = nil
        /// Parent structure, which is a map with key as the ObjectIdentifier and LinkName as the value.
        var parents: [String: String]? = nil

        public init() {}

        public init(nextToken: String? = nil, parents: [String: String]? = nil) {
            self.nextToken = nextToken
            self.parents = parents
        }

    }

    public struct DeleteFacetRequest: Serializable, Initializable {
        /// The name of the facet to delete.
        var name: String = ""
        /// ARN associated with the Facet. For more information, see arns.
        var schemaArn: String = ""

        public init() {}

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

    }

}