// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Cur {

    public enum ReportFormat: String, CustomStringConvertible, Codable {
        case textorcsv = "textORcsv"
        public var description: String { return self.rawValue }
    }

    public enum AdditionalArtifact: String, CustomStringConvertible, Codable {
        case redshift = "REDSHIFT"
        case quicksight = "QUICKSIGHT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReportDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ReportDefinitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let reportDefinitions: [ReportDefinition]?

        public init(nextToken: String? = nil, reportDefinitions: [ReportDefinition]? = nil) {
            self.nextToken = nextToken
            self.reportDefinitions = reportDefinitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case reportDefinitions = "ReportDefinitions"
        }
    }

    public enum CompressionFormat: String, CustomStringConvertible, Codable {
        case zip = "ZIP"
        case gzip = "GZIP"
        public var description: String { return self.rawValue }
    }

    public struct DeleteReportDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResponseMessage", required: false, type: .string)
        ]
        public let responseMessage: String?

        public init(responseMessage: String? = nil) {
            self.responseMessage = responseMessage
        }

        private enum CodingKeys: String, CodingKey {
            case responseMessage = "ResponseMessage"
        }
    }

    public struct PutReportDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct ReportDefinition: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeUnit", required: true, type: .enum), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "Compression", required: true, type: .enum), 
            AWSShapeMember(label: "ReportName", required: true, type: .string), 
            AWSShapeMember(label: "S3Region", required: true, type: .enum), 
            AWSShapeMember(label: "AdditionalArtifacts", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalSchemaElements", required: true, type: .list), 
            AWSShapeMember(label: "S3Bucket", required: true, type: .string), 
            AWSShapeMember(label: "S3Prefix", required: true, type: .string)
        ]
        public let timeUnit: TimeUnit
        public let format: ReportFormat
        public let compression: CompressionFormat
        public let reportName: String
        public let s3Region: AWSRegion
        public let additionalArtifacts: [AdditionalArtifact]?
        public let additionalSchemaElements: [SchemaElement]
        public let s3Bucket: String
        public let s3Prefix: String

        public init(timeUnit: TimeUnit, format: ReportFormat, compression: CompressionFormat, reportName: String, s3Region: AWSRegion, additionalArtifacts: [AdditionalArtifact]? = nil, additionalSchemaElements: [SchemaElement], s3Bucket: String, s3Prefix: String) {
            self.timeUnit = timeUnit
            self.format = format
            self.compression = compression
            self.reportName = reportName
            self.s3Region = s3Region
            self.additionalArtifacts = additionalArtifacts
            self.additionalSchemaElements = additionalSchemaElements
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case timeUnit = "TimeUnit"
            case format = "Format"
            case compression = "Compression"
            case reportName = "ReportName"
            case s3Region = "S3Region"
            case additionalArtifacts = "AdditionalArtifacts"
            case additionalSchemaElements = "AdditionalSchemaElements"
            case s3Bucket = "S3Bucket"
            case s3Prefix = "S3Prefix"
        }
    }

    public enum AWSRegion: String, CustomStringConvertible, Codable {
        case usEast1 = "us-east-1"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case euCentral1 = "eu-central-1"
        case euWest1 = "eu-west-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        public var description: String { return self.rawValue }
    }

    public struct PutReportDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReportDefinition", required: true, type: .structure)
        ]
        public let reportDefinition: ReportDefinition

        public init(reportDefinition: ReportDefinition) {
            self.reportDefinition = reportDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case reportDefinition = "ReportDefinition"
        }
    }

    public enum TimeUnit: String, CustomStringConvertible, Codable {
        case hourly = "HOURLY"
        case daily = "DAILY"
        public var description: String { return self.rawValue }
    }

    public enum SchemaElement: String, CustomStringConvertible, Codable {
        case resources = "RESOURCES"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReportDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteReportDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReportName", required: false, type: .string)
        ]
        public let reportName: String?

        public init(reportName: String? = nil) {
            self.reportName = reportName
        }

        private enum CodingKeys: String, CodingKey {
            case reportName = "ReportName"
        }
    }

}