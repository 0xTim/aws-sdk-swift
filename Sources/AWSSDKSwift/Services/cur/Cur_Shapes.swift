// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Cur {

    public struct PutReportDefinitionResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteReportDefinitionResponse: Serializable, Initializable {
        var responseMessage: String? = nil

        public init() {}

        public init(responseMessage: String? = nil) {
            self.responseMessage = responseMessage
        }

    }

    public struct DescribeReportDefinitionsResponse: Serializable, Initializable {
        var nextToken: String? = nil
        var reportDefinitions: [ReportDefinition]? = nil

        public init() {}

        public init(nextToken: String? = nil, reportDefinitions: [ReportDefinition]? = nil) {
            self.nextToken = nextToken
            self.reportDefinitions = reportDefinitions
        }

    }

    public struct ReportDefinition: Serializable, Initializable {
        var timeUnit: String = ""
        var format: String = ""
        var compression: String = ""
        var reportName: String = ""
        var s3Region: String = ""
        var additionalArtifacts: [String]? = nil
        var additionalSchemaElements: [String] = []
        var s3Bucket: String = ""
        var s3Prefix: String = ""

        public init() {}

        public init(timeUnit: String, format: String, compression: String, reportName: String, s3Region: String, additionalArtifacts: [String]? = nil, additionalSchemaElements: [String], s3Bucket: String, s3Prefix: String) {
            self.timeUnit = timeUnit
            self.format = format
            self.compression = compression
            self.reportName = reportName
            self.s3Region = s3Region
            self.additionalArtifacts = additionalArtifacts
            self.additionalSchemaElements = additionalSchemaElements
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

    }

    public struct PutReportDefinitionRequest: Serializable, Initializable {
        var reportDefinition: ReportDefinition = ReportDefinition()

        public init() {}

        public init(reportDefinition: ReportDefinition) {
            self.reportDefinition = reportDefinition
        }

    }

    public struct DescribeReportDefinitionsRequest: Serializable, Initializable {
        var nextToken: String? = nil
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DeleteReportDefinitionRequest: Serializable, Initializable {
        var reportName: String? = nil

        public init() {}

        public init(reportName: String? = nil) {
            self.reportName = reportName
        }

    }

}