// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension MediaLive {

    ///  Get a channel schedule
    public func describeSchedulePaginator(_ input: DescribeScheduleRequest, onPage: @escaping ([ScheduleAction], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeSchedule, resultKey: \DescribeScheduleResponse.scheduleActions, tokenKey: \DescribeScheduleResponse.nextToken, onPage: onPage)
    }
    
    ///  Produces list of channels that have been created
    public func listChannelsPaginator(_ input: ListChannelsRequest, onPage: @escaping ([ChannelSummary], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listChannels, resultKey: \ListChannelsResponse.channels, tokenKey: \ListChannelsResponse.nextToken, onPage: onPage)
    }
    
    ///  Produces a list of Input Security Groups for an account
    public func listInputSecurityGroupsPaginator(_ input: ListInputSecurityGroupsRequest, onPage: @escaping ([InputSecurityGroup], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listInputSecurityGroups, resultKey: \ListInputSecurityGroupsResponse.inputSecurityGroups, tokenKey: \ListInputSecurityGroupsResponse.nextToken, onPage: onPage)
    }
    
    ///  Produces list of inputs that have been created
    public func listInputsPaginator(_ input: ListInputsRequest, onPage: @escaping ([Input], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listInputs, resultKey: \ListInputsResponse.inputs, tokenKey: \ListInputsResponse.nextToken, onPage: onPage)
    }
    
    ///  List the programs that currently exist for a specific multiplex.
    public func listMultiplexProgramsPaginator(_ input: ListMultiplexProgramsRequest, onPage: @escaping ([MultiplexProgramSummary], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listMultiplexPrograms, resultKey: \ListMultiplexProgramsResponse.multiplexPrograms, tokenKey: \ListMultiplexProgramsResponse.nextToken, onPage: onPage)
    }
    
    ///  Retrieve a list of the existing multiplexes.
    public func listMultiplexesPaginator(_ input: ListMultiplexesRequest, onPage: @escaping ([MultiplexSummary], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listMultiplexes, resultKey: \ListMultiplexesResponse.multiplexes, tokenKey: \ListMultiplexesResponse.nextToken, onPage: onPage)
    }
    
    ///  List offerings available for purchase.
    public func listOfferingsPaginator(_ input: ListOfferingsRequest, onPage: @escaping ([Offering], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listOfferings, resultKey: \ListOfferingsResponse.offerings, tokenKey: \ListOfferingsResponse.nextToken, onPage: onPage)
    }
    
    ///  List purchased reservations.
    public func listReservationsPaginator(_ input: ListReservationsRequest, onPage: @escaping ([Reservation], EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listReservations, resultKey: \ListReservationsResponse.reservations, tokenKey: \ListReservationsResponse.nextToken, onPage: onPage)
    }
    
}

extension MediaLive.DescribeScheduleRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.DescribeScheduleRequest, token: String) {
        self.init(
            channelId: original.channelId, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension MediaLive.ListChannelsRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListChannelsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension MediaLive.ListInputSecurityGroupsRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListInputSecurityGroupsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension MediaLive.ListInputsRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListInputsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension MediaLive.ListMultiplexProgramsRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListMultiplexProgramsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            multiplexId: original.multiplexId, 
            nextToken: token
        )
    }
}

extension MediaLive.ListMultiplexesRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListMultiplexesRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension MediaLive.ListOfferingsRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListOfferingsRequest, token: String) {
        self.init(
            channelClass: original.channelClass, 
            channelConfiguration: original.channelConfiguration, 
            codec: original.codec, 
            duration: original.duration, 
            maximumBitrate: original.maximumBitrate, 
            maximumFramerate: original.maximumFramerate, 
            maxResults: original.maxResults, 
            nextToken: token, 
            resolution: original.resolution, 
            resourceType: original.resourceType, 
            specialFeature: original.specialFeature, 
            videoQuality: original.videoQuality
        )
    }
}

extension MediaLive.ListReservationsRequest: AWSPaginateStringToken {
    public init(_ original: MediaLive.ListReservationsRequest, token: String) {
        self.init(
            channelClass: original.channelClass, 
            codec: original.codec, 
            maximumBitrate: original.maximumBitrate, 
            maximumFramerate: original.maximumFramerate, 
            maxResults: original.maxResults, 
            nextToken: token, 
            resolution: original.resolution, 
            resourceType: original.resourceType, 
            specialFeature: original.specialFeature, 
            videoQuality: original.videoQuality
        )
    }
}


