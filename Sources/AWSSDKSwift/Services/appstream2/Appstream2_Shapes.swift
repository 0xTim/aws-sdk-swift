// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Appstream2 {

    public struct DescribeSessionsResult: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextToken: String? = nil
        /// The list of streaming sessions.
        var sessions: [Session]? = nil

        public init() {}

        public init(nextToken: String? = nil, sessions: [Session]? = nil) {
            self.nextToken = nextToken
            self.sessions = sessions
        }

    }

    public struct ListAssociatedFleetsRequest: Serializable, Initializable {
        /// The name of the stack whose associated fleets are listed.
        var stackName: String = ""
        /// The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
        var nextToken: String? = nil

        public init() {}

        public init(stackName: String, nextToken: String? = nil) {
            self.stackName = stackName
            self.nextToken = nextToken
        }

    }

    public struct DescribeStacksResult: Serializable, Initializable {
        /// The list of stack details.
        var stacks: [Stack]? = nil
        /// The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextToken: String? = nil

        public init() {}

        public init(stacks: [Stack]? = nil, nextToken: String? = nil) {
            self.stacks = stacks
            self.nextToken = nextToken
        }

    }

    public struct DeleteStackResult: Serializable, Initializable {

        public init() {}

    }

    public struct ComputeCapacity: Serializable, Initializable {
        /// The desired number of streaming instances.
        var desiredInstances: Int32 = 0

        public init() {}

        public init(desiredInstances: Int32) {
            self.desiredInstances = desiredInstances
        }

    }

    public struct DescribeImagesRequest: Serializable, Initializable {
        /// A specific list of images to describe.
        var names: [String]? = nil

        public init() {}

        public init(names: [String]? = nil) {
            self.names = names
        }

    }

    public struct DescribeImagesResult: Serializable, Initializable {
        /// The list of images.
        var images: [Image]? = nil

        public init() {}

        public init(images: [Image]? = nil) {
            self.images = images
        }

    }

    public struct DescribeSessionsRequest: Serializable, Initializable {
        /// The user for whom to list sessions. Use null to describe all the sessions for the stack and fleet.
        var userId: String? = nil
        /// The size of each page of results. The default value is 20 and the maximum supported value is 50.
        var limit: Int32? = nil
        /// The name of the stack for which to list sessions.
        var stackName: String = ""
        /// The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
        var nextToken: String? = nil
        /// The name of the fleet for which to list sessions.
        var fleetName: String = ""

        public init() {}

        public init(userId: String? = nil, limit: Int32? = nil, stackName: String, nextToken: String? = nil, fleetName: String) {
            self.userId = userId
            self.limit = limit
            self.stackName = stackName
            self.nextToken = nextToken
            self.fleetName = fleetName
        }

    }

    public struct Session: Serializable, Initializable {
        /// The identifier of the user for whom the session was created.
        var userId: String = ""
        /// The name of the stack for which the streaming session was created.
        var stackName: String = ""
        /// The current state of the streaming session.
        var state: String = ""
        /// The name of the fleet for which the streaming session was created.
        var fleetName: String = ""
        /// The unique ID for a streaming session.
        var id: String = ""

        public init() {}

        public init(userId: String, stackName: String, state: String, fleetName: String, id: String) {
            self.userId = userId
            self.stackName = stackName
            self.state = state
            self.fleetName = fleetName
            self.id = id
        }

    }

    public struct ListAssociatedFleetsResult: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextToken: String? = nil
        /// The names of associated fleets.
        var names: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, names: [String]? = nil) {
            self.nextToken = nextToken
            self.names = names
        }

    }

    public struct DescribeFleetsRequest: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
        var nextToken: String? = nil
        /// The fleet names to describe. Use null to describe all the fleets for the AWS account.
        var names: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, names: [String]? = nil) {
            self.nextToken = nextToken
            self.names = names
        }

    }

    public struct FleetError: Serializable, Initializable {
        /// The error message generated when the fleet has errors.
        var errorMessage: String? = nil
        /// The error code for the fleet error.
        var errorCode: String? = nil

        public init() {}

        public init(errorMessage: String? = nil, errorCode: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
        }

    }

    public struct ListAssociatedStacksResult: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextToken: String? = nil
        /// The names of associated stacks.
        var names: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, names: [String]? = nil) {
            self.nextToken = nextToken
            self.names = names
        }

    }

    public struct UpdateFleetResult: Serializable, Initializable {
        /// A list of fleet details.
        var fleet: Fleet? = nil

        public init() {}

        public init(fleet: Fleet? = nil) {
            self.fleet = fleet
        }

    }

    public struct ExpireSessionResult: Serializable, Initializable {

        public init() {}

    }

    public struct DisassociateFleetResult: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteFleetResult: Serializable, Initializable {

        public init() {}

    }

    public struct CreateFleetRequest: Serializable, Initializable {
        /// The parameters for the capacity allocated to the fleet.
        var computeCapacity: ComputeCapacity = ComputeCapacity()
        /// The VPC configuration for the fleet.
        var vpcConfig: VpcConfig? = nil
        /// A unique identifier for the fleet.
        var name: String = ""
        /// The display name of the fleet.
        var displayName: String? = nil
        /// Unique name of the image used by the fleet.
        var imageName: String = ""
        /// The time after disconnection when a session is considered to have ended. If a user who got disconnected reconnects within this timeout interval, the user is connected back to his/her previous session. 
        var disconnectTimeoutInSeconds: Int32? = nil
        /// The maximum time up to which a streaming session can run.
        var maxUserDurationInSeconds: Int32? = nil
        /// The instance type of compute resources for the fleet. Fleet instances are launched from this instance type.
        var instanceType: String = ""
        /// The description of the fleet.
        var description: String? = nil

        public init() {}

        public init(computeCapacity: ComputeCapacity, vpcConfig: VpcConfig? = nil, name: String, displayName: String? = nil, imageName: String, disconnectTimeoutInSeconds: Int32? = nil, maxUserDurationInSeconds: Int32? = nil, instanceType: String, description: String? = nil) {
            self.computeCapacity = computeCapacity
            self.vpcConfig = vpcConfig
            self.name = name
            self.displayName = displayName
            self.imageName = imageName
            self.disconnectTimeoutInSeconds = disconnectTimeoutInSeconds
            self.maxUserDurationInSeconds = maxUserDurationInSeconds
            self.instanceType = instanceType
            self.description = description
        }

    }

    public struct Stack: Serializable, Initializable {
        /// A meaningful description for the stack.
        var description: String? = nil
        /// The ARN of the stack.
        var arn: String? = nil
        /// The unique identifier of the stack.
        var name: String = ""
        /// The timestamp when the stack was created.
        var createdTime: Date? = nil
        /// A display name for the stack.
        var displayName: String? = nil

        public init() {}

        public init(description: String? = nil, arn: String? = nil, name: String, createdTime: Date? = nil, displayName: String? = nil) {
            self.description = description
            self.arn = arn
            self.name = name
            self.createdTime = createdTime
            self.displayName = displayName
        }

    }

    public struct UpdateStackResult: Serializable, Initializable {
        /// A list of stack details.
        var stack: Stack? = nil

        public init() {}

        public init(stack: Stack? = nil) {
            self.stack = stack
        }

    }

    public struct UpdateFleetRequest: Serializable, Initializable {
        /// Delete the VPC association for the specified fleet.
        var deleteVpcConfig: Bool? = nil
        /// The parameters for the capacity allocated to the fleet. 
        var computeCapacity: ComputeCapacity? = nil
        /// The VPC configuration for the fleet.
        var vpcConfig: VpcConfig? = nil
        /// The name of the fleet.
        var name: String = ""
        /// The name displayed to end users on the AppStream 2.0 portal.
        var displayName: String? = nil
        /// The image name from which a fleet is created.
        var imageName: String? = nil
        /// The time after disconnection when a session is considered to have ended. When the user reconnects after a disconnection, the user is connected to the same instance within this time interval.
        var disconnectTimeoutInSeconds: Int32? = nil
        /// The maximum time during which a streaming session can run.
        var maxUserDurationInSeconds: Int32? = nil
        /// The instance type of compute resources for the fleet. Fleet instances are launched from this instance type.
        var instanceType: String? = nil
        /// The description displayed to end users on the AppStream 2.0 portal.
        var description: String? = nil

        public init() {}

        public init(deleteVpcConfig: Bool? = nil, computeCapacity: ComputeCapacity? = nil, vpcConfig: VpcConfig? = nil, name: String, displayName: String? = nil, imageName: String? = nil, disconnectTimeoutInSeconds: Int32? = nil, maxUserDurationInSeconds: Int32? = nil, instanceType: String? = nil, description: String? = nil) {
            self.deleteVpcConfig = deleteVpcConfig
            self.computeCapacity = computeCapacity
            self.vpcConfig = vpcConfig
            self.name = name
            self.displayName = displayName
            self.imageName = imageName
            self.disconnectTimeoutInSeconds = disconnectTimeoutInSeconds
            self.maxUserDurationInSeconds = maxUserDurationInSeconds
            self.instanceType = instanceType
            self.description = description
        }

    }

    public struct DisassociateFleetRequest: Serializable, Initializable {
        /// The name of the stack with which the fleet is associated.
        var stackName: String = ""
        /// The name of the fleet to disassociate.
        var fleetName: String = ""

        public init() {}

        public init(stackName: String, fleetName: String) {
            self.stackName = stackName
            self.fleetName = fleetName
        }

    }

    public struct Application: Serializable, Initializable {
        /// Additional attributes that describes the application.
        var metadata: [String: String]? = nil
        /// The unique identifier for the application.
        var name: String? = nil
        /// The name of the application shown to the end users.
        var displayName: String? = nil
        /// An application can be disabled after image creation if there is a problem.
        var enabled: Bool? = nil
        /// The path to the application executable in the instance.
        var launchPath: String? = nil
        /// A list of arguments that are passed to the application at launch.
        var launchParameters: String? = nil
        /// The URL for the application icon. This URL may be time-limited.
        var iconURL: String? = nil

        public init() {}

        public init(metadata: [String: String]? = nil, name: String? = nil, displayName: String? = nil, enabled: Bool? = nil, launchPath: String? = nil, launchParameters: String? = nil, iconURL: String? = nil) {
            self.metadata = metadata
            self.name = name
            self.displayName = displayName
            self.enabled = enabled
            self.launchPath = launchPath
            self.launchParameters = launchParameters
            self.iconURL = iconURL
        }

    }

    public struct Fleet: Serializable, Initializable {
        /// The ARN for the fleet.
        var arn: String = ""
        /// The VPC configuration for the fleet.
        var vpcConfig: VpcConfig? = nil
        /// The current state for the fleet.
        var state: String = ""
        /// The name displayed to end users on the AppStream 2.0 portal.
        var displayName: String? = nil
        /// The list of fleet errors is appended to this list.
        var fleetErrors: [FleetError]? = nil
        /// The capacity information for the fleet.
        var computeCapacityStatus: ComputeCapacityStatus = ComputeCapacityStatus()
        /// The image used by the fleet.
        var imageName: String = ""
        /// The instance type of compute resources for the fleet. The fleet instances are launched from this instance type. 
        var instanceType: String = ""
        /// The time at which the fleet was created.
        var createdTime: Date? = nil
        /// The description displayed to end users on the AppStream 2.0 portal.
        var description: String? = nil
        /// The name of the fleet.
        var name: String = ""
        /// The time after disconnection when a session is considered to have ended. When a user reconnects after a disconnection, the user is connected to the same session and instance within this time interval.
        var disconnectTimeoutInSeconds: Int32? = nil
        /// The maximum time during which a streaming session can run.
        var maxUserDurationInSeconds: Int32? = nil

        public init() {}

        public init(arn: String, vpcConfig: VpcConfig? = nil, state: String, displayName: String? = nil, fleetErrors: [FleetError]? = nil, computeCapacityStatus: ComputeCapacityStatus, imageName: String, instanceType: String, createdTime: Date? = nil, description: String? = nil, name: String, disconnectTimeoutInSeconds: Int32? = nil, maxUserDurationInSeconds: Int32? = nil) {
            self.arn = arn
            self.vpcConfig = vpcConfig
            self.state = state
            self.displayName = displayName
            self.fleetErrors = fleetErrors
            self.computeCapacityStatus = computeCapacityStatus
            self.imageName = imageName
            self.instanceType = instanceType
            self.createdTime = createdTime
            self.description = description
            self.name = name
            self.disconnectTimeoutInSeconds = disconnectTimeoutInSeconds
            self.maxUserDurationInSeconds = maxUserDurationInSeconds
        }

    }

    public struct StartFleetRequest: Serializable, Initializable {
        /// The name of the fleet to start.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StartFleetResult: Serializable, Initializable {

        public init() {}

    }

    public struct VpcConfig: Serializable, Initializable {
        /// The list of subnets to which a network interface is established from the fleet instance.
        var subnetIds: [String] = []

        public init() {}

        public init(subnetIds: [String]) {
            self.subnetIds = subnetIds
        }

    }

    public struct DescribeStacksRequest: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
        var nextToken: String? = nil
        /// The stack names to describe. Use null to describe all the stacks for the AWS account.
        var names: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, names: [String]? = nil) {
            self.nextToken = nextToken
            self.names = names
        }

    }

    public struct ImageStateChangeReason: Serializable, Initializable {
        /// The state change reason code of the image.
        var code: String? = nil
        /// The state change reason message to the end user.
        var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct ListAssociatedStacksRequest: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
        var nextToken: String? = nil
        /// The name of the fleet whose associated stacks are listed.
        var fleetName: String = ""

        public init() {}

        public init(nextToken: String? = nil, fleetName: String) {
            self.nextToken = nextToken
            self.fleetName = fleetName
        }

    }

    public struct CreateStackRequest: Serializable, Initializable {
        /// The unique identifier for this stack.
        var name: String = ""
        /// The name displayed to end users on the AppStream 2.0 portal.
        var displayName: String? = nil
        /// The description displayed to end users on the AppStream 2.0 portal.
        var description: String? = nil

        public init() {}

        public init(name: String, displayName: String? = nil, description: String? = nil) {
            self.name = name
            self.displayName = displayName
            self.description = description
        }

    }

    public struct UpdateStackRequest: Serializable, Initializable {
        /// The name of the stack to update.
        var name: String = ""
        /// The name displayed to end users on the AppStream 2.0 portal.
        var displayName: String? = nil
        /// The description displayed to end users on the AppStream 2.0 portal.
        var description: String? = nil

        public init() {}

        public init(name: String, displayName: String? = nil, description: String? = nil) {
            self.name = name
            self.displayName = displayName
            self.description = description
        }

    }

    public struct StopFleetRequest: Serializable, Initializable {
        /// The name of the fleet to stop.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct ExpireSessionRequest: Serializable, Initializable {
        /// The unique identifier of the streaming session to be stopped.
        var sessionId: String = ""

        public init() {}

        public init(sessionId: String) {
            self.sessionId = sessionId
        }

    }

    public struct CreateFleetResult: Serializable, Initializable {
        /// The details for the created fleet.
        var fleet: Fleet? = nil

        public init() {}

        public init(fleet: Fleet? = nil) {
            self.fleet = fleet
        }

    }

    public struct CreateStreamingURLRequest: Serializable, Initializable {
        /// The validity duration of the URL in seconds. After this duration, the URL returned by this operation becomes invalid.
        var validity: Int64? = nil
        /// A unique user ID for whom the URL is generated.
        var userId: String = ""
        /// The ID of the application that must be launched after the session starts.
        var applicationId: String? = nil
        /// The sessionContext of the streaming URL.
        var sessionContext: String? = nil
        /// The stack for which the URL is generated.
        var stackName: String = ""
        /// The fleet for which the URL is generated.
        var fleetName: String = ""

        public init() {}

        public init(validity: Int64? = nil, userId: String, applicationId: String? = nil, sessionContext: String? = nil, stackName: String, fleetName: String) {
            self.validity = validity
            self.userId = userId
            self.applicationId = applicationId
            self.sessionContext = sessionContext
            self.stackName = stackName
            self.fleetName = fleetName
        }

    }

    public struct ComputeCapacityStatus: Serializable, Initializable {
        /// The number of currently available instances that can be used to stream sessions.
        var available: Int32? = nil
        /// The number of instances that are being used for streaming.
        var inUse: Int32? = nil
        /// The desired number of streaming instances.
        var desired: Int32 = 0
        /// The total number of simultaneous streaming instances that are running.
        var running: Int32? = nil

        public init() {}

        public init(available: Int32? = nil, inUse: Int32? = nil, desired: Int32, running: Int32? = nil) {
            self.available = available
            self.inUse = inUse
            self.desired = desired
            self.running = running
        }

    }

    public struct CreateStreamingURLResult: Serializable, Initializable {
        /// The URL to start the AppStream 2.0 streaming session.
        var streamingURL: String? = nil
        /// Elapsed seconds after the Unix epoch, at which time this URL expires.
        var expires: Date? = nil

        public init() {}

        public init(streamingURL: String? = nil, expires: Date? = nil) {
            self.streamingURL = streamingURL
            self.expires = expires
        }

    }

    public struct AssociateFleetRequest: Serializable, Initializable {
        /// The name of the stack to which the fleet is associated.
        var stackName: String = ""
        /// The name of the fleet to associate.
        var fleetName: String = ""

        public init() {}

        public init(stackName: String, fleetName: String) {
            self.stackName = stackName
            self.fleetName = fleetName
        }

    }

    public struct DescribeFleetsResult: Serializable, Initializable {
        /// The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextToken: String? = nil
        /// The list of fleet details.
        var fleets: [Fleet]? = nil

        public init() {}

        public init(nextToken: String? = nil, fleets: [Fleet]? = nil) {
            self.nextToken = nextToken
            self.fleets = fleets
        }

    }

    public struct Image: Serializable, Initializable {
        /// The reason why the last state change occurred.
        var stateChangeReason: ImageStateChangeReason? = nil
        /// The ARN for the image.
        var arn: String? = nil
        /// The operating system platform of the image.
        var platform: String? = nil
        /// The image starts in the PENDING state, and then moves to AVAILABLE if image creation succeeds and FAILED if image creation has failed.
        var state: String? = nil
        /// The display name for the image.
        var displayName: String? = nil
        /// The unique identifier for the image.
        var name: String = ""
        /// The source image ARN from which this image was created.
        var baseImageArn: String? = nil
        /// The applications associated with an image.
        var applications: [Application]? = nil
        /// The visibility of an image to the user; images can be public or private.
        var visibility: String? = nil
        /// The timestamp when the image was created.
        var createdTime: Date? = nil
        /// A meaningful description for the image.
        var description: String? = nil

        public init() {}

        public init(stateChangeReason: ImageStateChangeReason? = nil, arn: String? = nil, platform: String? = nil, state: String? = nil, displayName: String? = nil, name: String, baseImageArn: String? = nil, applications: [Application]? = nil, visibility: String? = nil, createdTime: Date? = nil, description: String? = nil) {
            self.stateChangeReason = stateChangeReason
            self.arn = arn
            self.platform = platform
            self.state = state
            self.displayName = displayName
            self.name = name
            self.baseImageArn = baseImageArn
            self.applications = applications
            self.visibility = visibility
            self.createdTime = createdTime
            self.description = description
        }

    }

    public struct DeleteStackRequest: Serializable, Initializable {
        /// The name of the stack to delete.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StopFleetResult: Serializable, Initializable {

        public init() {}

    }

    public struct CreateStackResult: Serializable, Initializable {
        /// The details for the created stack.
        var stack: Stack? = nil

        public init() {}

        public init(stack: Stack? = nil) {
            self.stack = stack
        }

    }

    public struct DeleteFleetRequest: Serializable, Initializable {
        /// The name of the fleet to be deleted.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct AssociateFleetResult: Serializable, Initializable {

        public init() {}

    }

}