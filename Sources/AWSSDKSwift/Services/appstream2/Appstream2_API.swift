// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
Amazon AppStream 2.0 API documentation for Amazon AppStream 2.0.
*/
public struct Appstream2 {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "PhotonAdminProxyService",
            service: "appstream2",
            endpoint: endpoint
        )
    }

    ///  Updates an existing fleet. All the attributes except the fleet name can be updated in the STOPPED state. Only ComputeCapacity and ImageName can be updated in any other state. 
    public func updateFleet(_ input: UpdateFleetRequest) throws -> UpdateFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Create a new stack.
    public func createStack(_ input: CreateStackRequest) throws -> CreateStackResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateStack", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists all fleets associated with the stack.
    public func listAssociatedFleets(_ input: ListAssociatedFleetsRequest) throws -> ListAssociatedFleetsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListAssociatedFleets", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Associate a fleet to a stack.
    public func associateFleet(_ input: AssociateFleetRequest) throws -> AssociateFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "AssociateFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Starts a fleet.
    public func startFleet(_ input: StartFleetRequest) throws -> StartFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "StartFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Stops a fleet.
    public func stopFleet(_ input: StopFleetRequest) throws -> StopFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "StopFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Disassociates a fleet from a stack.
    public func disassociateFleet(_ input: DisassociateFleetRequest) throws -> DisassociateFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DisassociateFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a fleet.
    public func deleteFleet(_ input: DeleteFleetRequest) throws -> DeleteFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  This operation immediately stops a streaming session.
    public func expireSession(_ input: ExpireSessionRequest) throws -> ExpireSessionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ExpireSession", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists all stacks to which the specified fleet is associated.
    public func listAssociatedStacks(_ input: ListAssociatedStacksRequest) throws -> ListAssociatedStacksResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListAssociatedStacks", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a new fleet.
    public func createFleet(_ input: CreateFleetRequest) throws -> CreateFleetResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateFleet", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Describes the streaming sessions for a stack and a fleet. If a user ID is provided, this operation returns streaming sessions for only that user. Pass this value for the nextToken parameter in a subsequent call to this operation to retrieve the next set of items.
    public func describeSessions(_ input: DescribeSessionsRequest) throws -> DescribeSessionsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeSessions", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  If stack names are not provided, this operation describes the specified stacks; otherwise, all stacks in the account are described. Pass the nextToken value in a subsequent call to this operation to retrieve the next set of items.
    public func describeStacks(_ input: DescribeStacksRequest) throws -> DescribeStacksResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeStacks", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  If fleet names are provided, this operation describes the specified fleets; otherwise, all the fleets in the account are described.
    public func describeFleets(_ input: DescribeFleetsRequest) throws -> DescribeFleetsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeFleets", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Describes the images. If a list of names is not provided, all images in your account are returned. This operation does not return a paginated result.
    public func describeImages(_ input: DescribeImagesRequest) throws -> DescribeImagesResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeImages", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Updates the specified fields in the stack with the specified name.
    public func updateStack(_ input: UpdateStackRequest) throws -> UpdateStackResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateStack", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a URL to start an AppStream 2.0 streaming session for a user. By default, the URL is valid only for 1 minute from the time that it is generated.
    public func createStreamingURL(_ input: CreateStreamingURLRequest) throws -> CreateStreamingURLResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateStreamingURL", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the stack. After this operation completes, the environment can no longer be activated, and any reservations made for the stack are released.
    public func deleteStack(_ input: DeleteStackRequest) throws -> DeleteStackResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteStack", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try Appstream2ResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}