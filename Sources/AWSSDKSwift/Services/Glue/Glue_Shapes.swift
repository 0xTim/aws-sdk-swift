// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Glue {

    public struct GetDataflowGraphResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DagEdges", required: false, type: .list), 
            AWSShapeMember(label: "DagNodes", required: false, type: .list)
        ]
        /// A list of the edges in the resulting DAG.
        public let dagEdges: [CodeGenEdge]?
        /// A list of the nodes in the resulting DAG.
        public let dagNodes: [CodeGenNode]?

        public init(dagEdges: [CodeGenEdge]? = nil, dagNodes: [CodeGenNode]? = nil) {
            self.dagEdges = dagEdges
            self.dagNodes = dagNodes
        }

        private enum CodingKeys: String, CodingKey {
            case dagEdges = "DagEdges"
            case dagNodes = "DagNodes"
        }
    }

    public struct GetPartitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "Segment", required: false, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Expression", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The name of the catalog database where the partitions reside.
        public let databaseName: String
        /// The segment of the table's partitions to scan in this request.
        public let segment: Segment?
        /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The maximum number of partitions to return in a single response.
        public let maxResults: Int32?
        /// An expression filtering the partitions to be returned.
        public let expression: String?
        /// The name of the partitions' table.
        public let tableName: String
        /// A continuation token, if this is not the first call to retrieve these partitions.
        public let nextToken: String?

        public init(databaseName: String, segment: Segment? = nil, catalogId: String? = nil, maxResults: Int32? = nil, expression: String? = nil, tableName: String, nextToken: String? = nil) {
            self.databaseName = databaseName
            self.segment = segment
            self.catalogId = catalogId
            self.maxResults = maxResults
            self.expression = expression
            self.tableName = tableName
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case segment = "Segment"
            case catalogId = "CatalogId"
            case maxResults = "MaxResults"
            case expression = "Expression"
            case tableName = "TableName"
            case nextToken = "NextToken"
        }
    }

    public struct CreateClassifierResponse: AWSShape {

    }

    public struct StartCrawlerScheduleResponse: AWSShape {

    }

    public struct CreateConnectionResponse: AWSShape {

    }

    public enum TriggerState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case created = "CREATED"
        case activating = "ACTIVATING"
        case activated = "ACTIVATED"
        case deactivating = "DEACTIVATING"
        case deactivated = "DEACTIVATED"
        case deleting = "DELETING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateUserDefinedFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionName", required: true, type: .string), 
            AWSShapeMember(label: "FunctionInput", required: true, type: .structure), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the function.
        public let functionName: String
        /// A FunctionInput object that re-defines the function in the Data Catalog.
        public let functionInput: UserDefinedFunctionInput
        /// The name of the catalog database where the function to be updated is located.
        public let databaseName: String
        /// The ID of the Data Catalog where the function to be updated is located. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(functionName: String, functionInput: UserDefinedFunctionInput, databaseName: String, catalogId: String? = nil) {
            self.functionName = functionName
            self.functionInput = functionInput
            self.databaseName = databaseName
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case functionName = "FunctionName"
            case functionInput = "FunctionInput"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
        }
    }

    public struct NotificationProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyDelayAfter", required: false, type: .integer)
        ]
        /// After a job run starts, the number of minutes to wait before sending a job run delay notification.
        public let notifyDelayAfter: Int32?

        public init(notifyDelayAfter: Int32? = nil) {
            self.notifyDelayAfter = notifyDelayAfter
        }

        private enum CodingKeys: String, CodingKey {
            case notifyDelayAfter = "NotifyDelayAfter"
        }
    }

    public enum ScheduleState: String, CustomStringConvertible, Codable {
        case scheduled = "SCHEDULED"
        case notScheduled = "NOT_SCHEDULED"
        case transitioning = "TRANSITIONING"
        public var description: String { return self.rawValue }
    }

    public struct Predecessor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RunId", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The job-run ID of the predecessor job run.
        public let runId: String?
        /// The name of the job definition used by the predecessor job run.
        public let jobName: String?

        public init(runId: String? = nil, jobName: String? = nil) {
            self.runId = runId
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case runId = "RunId"
            case jobName = "JobName"
        }
    }

    public struct GetTableResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Table", required: false, type: .structure)
        ]
        /// The Table object that defines the specified table.
        public let table: Table?

        public init(table: Table? = nil) {
            self.table = table
        }

        private enum CodingKeys: String, CodingKey {
            case table = "Table"
        }
    }

    public enum Logical: String, CustomStringConvertible, Codable {
        case and = "AND"
        case any = "ANY"
        public var description: String { return self.rawValue }
    }

    public struct GetPartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "PartitionValues", required: true, type: .list), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The name of the catalog database where the partition resides.
        public let databaseName: String
        /// The values that define the partition.
        public let partitionValues: [String]
        /// The ID of the Data Catalog where the partition in question resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the partition's table.
        public let tableName: String

        public init(databaseName: String, partitionValues: [String], catalogId: String? = nil, tableName: String) {
            self.databaseName = databaseName
            self.partitionValues = partitionValues
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case partitionValues = "PartitionValues"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case jar = "JAR"
        case file = "FILE"
        case archive = "ARCHIVE"
        public var description: String { return self.rawValue }
    }

    public struct TriggerUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Predicate", required: false, type: .structure), 
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public let schedule: String?
        /// Reserved for future use.
        public let name: String?
        /// The predicate of this trigger, which defines when it will fire.
        public let predicate: Predicate?
        /// The actions initiated by this trigger.
        public let actions: [Action]?
        /// A description of this trigger.
        public let description: String?

        public init(schedule: String? = nil, name: String? = nil, predicate: Predicate? = nil, actions: [Action]? = nil, description: String? = nil) {
            self.schedule = schedule
            self.name = name
            self.predicate = predicate
            self.actions = actions
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case name = "Name"
            case predicate = "Predicate"
            case actions = "Actions"
            case description = "Description"
        }
    }

    public struct DevEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicKey", required: false, type: .string), 
            AWSShapeMember(label: "ZeppelinRemoteSparkInterpreterPort", required: false, type: .integer), 
            AWSShapeMember(label: "YarnEndpointAddress", required: false, type: .string), 
            AWSShapeMember(label: "EndpointName", required: false, type: .string), 
            AWSShapeMember(label: "PrivateAddress", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PublicKeys", required: false, type: .list), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExtraJarsS3Path", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "LastUpdateStatus", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "PublicAddress", required: false, type: .string), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string), 
            AWSShapeMember(label: "ExtraPythonLibsS3Path", required: false, type: .string)
        ]
        /// The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility, as the recommended attribute to use is public keys.
        public let publicKey: String?
        /// The Apache Zeppelin port for the remote Apache Spark interpreter.
        public let zeppelinRemoteSparkInterpreterPort: Int32?
        /// The YARN endpoint address used by this DevEndpoint.
        public let yarnEndpointAddress: String?
        /// The name of the DevEndpoint.
        public let endpointName: String?
        /// A private DNS to access the DevEndpoint within a VPC, if the DevEndpoint is created within one.
        public let privateAddress: String?
        /// The ID of the virtual private cloud (VPC) used by this DevEndpoint.
        public let vpcId: String?
        /// The AWS ARN of the IAM role used in this DevEndpoint.
        public let roleArn: String?
        /// A list of public keys to be used by the DevEndpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.  If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys: call the UpdateDevEndpoint API with the public key content in the deletePublicKeys attribute, and the list of new keys in the addPublicKeys attribute. 
        public let publicKeys: [String]?
        /// The point in time at which this DevEndpoint was created.
        public let createdTimestamp: TimeStamp?
        /// Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint. Please note that only pure Java/Scala libraries can currently be used on a DevEndpoint.
        public let extraJarsS3Path: String?
        /// The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.
        public let numberOfNodes: Int32?
        /// A list of security group identifiers used in this DevEndpoint.
        public let securityGroupIds: [String]?
        /// The status of the last update.
        public let lastUpdateStatus: String?
        /// The AWS availability zone where this DevEndpoint is located.
        public let availabilityZone: String?
        /// The subnet ID for this DevEndpoint.
        public let subnetId: String?
        /// The point in time at which this DevEndpoint was last modified.
        public let lastModifiedTimestamp: TimeStamp?
        /// The current status of this DevEndpoint.
        public let status: String?
        /// The public VPC address used by this DevEndpoint.
        public let publicAddress: String?
        /// The reason for a current failure in this DevEndpoint.
        public let failureReason: String?
        /// Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma. Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the pandas Python data analysis library, are not yet supported.
        public let extraPythonLibsS3Path: String?

        public init(publicKey: String? = nil, zeppelinRemoteSparkInterpreterPort: Int32? = nil, yarnEndpointAddress: String? = nil, endpointName: String? = nil, privateAddress: String? = nil, vpcId: String? = nil, roleArn: String? = nil, publicKeys: [String]? = nil, createdTimestamp: TimeStamp? = nil, extraJarsS3Path: String? = nil, numberOfNodes: Int32? = nil, securityGroupIds: [String]? = nil, lastUpdateStatus: String? = nil, availabilityZone: String? = nil, subnetId: String? = nil, lastModifiedTimestamp: TimeStamp? = nil, status: String? = nil, publicAddress: String? = nil, failureReason: String? = nil, extraPythonLibsS3Path: String? = nil) {
            self.publicKey = publicKey
            self.zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPort
            self.yarnEndpointAddress = yarnEndpointAddress
            self.endpointName = endpointName
            self.privateAddress = privateAddress
            self.vpcId = vpcId
            self.roleArn = roleArn
            self.publicKeys = publicKeys
            self.createdTimestamp = createdTimestamp
            self.extraJarsS3Path = extraJarsS3Path
            self.numberOfNodes = numberOfNodes
            self.securityGroupIds = securityGroupIds
            self.lastUpdateStatus = lastUpdateStatus
            self.availabilityZone = availabilityZone
            self.subnetId = subnetId
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.status = status
            self.publicAddress = publicAddress
            self.failureReason = failureReason
            self.extraPythonLibsS3Path = extraPythonLibsS3Path
        }

        private enum CodingKeys: String, CodingKey {
            case publicKey = "PublicKey"
            case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
            case yarnEndpointAddress = "YarnEndpointAddress"
            case endpointName = "EndpointName"
            case privateAddress = "PrivateAddress"
            case vpcId = "VpcId"
            case roleArn = "RoleArn"
            case publicKeys = "PublicKeys"
            case createdTimestamp = "CreatedTimestamp"
            case extraJarsS3Path = "ExtraJarsS3Path"
            case numberOfNodes = "NumberOfNodes"
            case securityGroupIds = "SecurityGroupIds"
            case lastUpdateStatus = "LastUpdateStatus"
            case availabilityZone = "AvailabilityZone"
            case subnetId = "SubnetId"
            case lastModifiedTimestamp = "LastModifiedTimestamp"
            case status = "Status"
            case publicAddress = "PublicAddress"
            case failureReason = "FailureReason"
            case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        }
    }

    public struct GetJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The maximum size of the response.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetDatabaseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Database", required: false, type: .structure)
        ]
        /// The definition of the specified database in the catalog.
        public let database: Database?

        public init(database: Database? = nil) {
            self.database = database
        }

        private enum CodingKeys: String, CodingKey {
            case database = "Database"
        }
    }

    public struct JdbcTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionName", required: false, type: .string), 
            AWSShapeMember(label: "Exclusions", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// The name of the connection to use to connect to the JDBC target.
        public let connectionName: String?
        /// A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler.
        public let exclusions: [String]?
        /// The path of the JDBC target.
        public let path: String?

        public init(connectionName: String? = nil, exclusions: [String]? = nil, path: String? = nil) {
            self.connectionName = connectionName
            self.exclusions = exclusions
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case connectionName = "ConnectionName"
            case exclusions = "Exclusions"
            case path = "Path"
        }
    }

    public struct CreateDatabaseResponse: AWSShape {

    }

    public struct BatchDeleteTableResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", required: false, type: .list)
        ]
        /// A list of errors encountered in attempting to delete the specified tables.
        public let errors: [TableError]?

        public init(errors: [TableError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
        }
    }

    public struct GetMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Source", required: true, type: .structure), 
            AWSShapeMember(label: "Sinks", required: false, type: .list), 
            AWSShapeMember(label: "Location", required: false, type: .structure)
        ]
        /// Specifies the source table.
        public let source: CatalogEntry
        /// A list of target tables.
        public let sinks: [CatalogEntry]?
        /// Parameters for the mapping.
        public let location: Location?

        public init(source: CatalogEntry, sinks: [CatalogEntry]? = nil, location: Location? = nil) {
            self.source = source
            self.sinks = sinks
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case source = "Source"
            case sinks = "Sinks"
            case location = "Location"
        }
    }

    public struct UpdateConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionInput", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// A ConnectionInput object that redefines the connection in question.
        public let connectionInput: ConnectionInput
        /// The name of the connection definition to update.
        public let name: String
        /// The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(connectionInput: ConnectionInput, name: String, catalogId: String? = nil) {
            self.connectionInput = connectionInput
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionInput = "ConnectionInput"
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct DeleteDatabaseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the Database to delete. For Hive compatibility, this must be all lowercase.
        public let name: String
        /// The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(name: String, catalogId: String? = nil) {
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct GetCrawlersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Crawlers", required: false, type: .list)
        ]
        /// A continuation token, if the returned list has not reached the end of those defined in this customer account.
        public let nextToken: String?
        /// A list of crawler metadata.
        public let crawlers: [Crawler]?

        public init(nextToken: String? = nil, crawlers: [Crawler]? = nil) {
            self.nextToken = nextToken
            self.crawlers = crawlers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case crawlers = "Crawlers"
        }
    }

    public struct GetConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The maximum number of connections to return in one response.
        public let maxResults: Int32?
        /// The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// A filter that controls which connections will be returned.
        public let filter: GetConnectionsFilter?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, catalogId: String? = nil, filter: GetConnectionsFilter? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.catalogId = catalogId
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case catalogId = "CatalogId"
            case filter = "Filter"
        }
    }

    public struct CreateDevEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZeppelinRemoteSparkInterpreterPort", required: false, type: .integer), 
            AWSShapeMember(label: "YarnEndpointAddress", required: false, type: .string), 
            AWSShapeMember(label: "EndpointName", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExtraJarsS3Path", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "ExtraPythonLibsS3Path", required: false, type: .string), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string)
        ]
        /// The Apache Zeppelin port for the remote Apache Spark interpreter.
        public let zeppelinRemoteSparkInterpreterPort: Int32?
        /// The address of the YARN endpoint used by this DevEndpoint.
        public let yarnEndpointAddress: String?
        /// The name assigned to the new DevEndpoint.
        public let endpointName: String?
        /// The ID of the VPC used by this DevEndpoint.
        public let vpcId: String?
        /// The AWS ARN of the role assigned to the new DevEndpoint.
        public let roleArn: String?
        /// The point in time at which this DevEndpoint was created.
        public let createdTimestamp: TimeStamp?
        /// Path to one or more Java Jars in an S3 bucket that will be loaded in your DevEndpoint.
        public let extraJarsS3Path: String?
        /// The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.
        public let numberOfNodes: Int32?
        /// The security groups assigned to the new DevEndpoint.
        public let securityGroupIds: [String]?
        /// The AWS availability zone where this DevEndpoint is located.
        public let availabilityZone: String?
        /// The subnet ID assigned to the new DevEndpoint.
        public let subnetId: String?
        /// The current status of the new DevEndpoint.
        public let status: String?
        /// Path(s) to one or more Python libraries in an S3 bucket that will be loaded in your DevEndpoint.
        public let extraPythonLibsS3Path: String?
        /// The reason for a current failure in this DevEndpoint.
        public let failureReason: String?

        public init(zeppelinRemoteSparkInterpreterPort: Int32? = nil, yarnEndpointAddress: String? = nil, endpointName: String? = nil, vpcId: String? = nil, roleArn: String? = nil, createdTimestamp: TimeStamp? = nil, extraJarsS3Path: String? = nil, numberOfNodes: Int32? = nil, securityGroupIds: [String]? = nil, availabilityZone: String? = nil, subnetId: String? = nil, status: String? = nil, extraPythonLibsS3Path: String? = nil, failureReason: String? = nil) {
            self.zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPort
            self.yarnEndpointAddress = yarnEndpointAddress
            self.endpointName = endpointName
            self.vpcId = vpcId
            self.roleArn = roleArn
            self.createdTimestamp = createdTimestamp
            self.extraJarsS3Path = extraJarsS3Path
            self.numberOfNodes = numberOfNodes
            self.securityGroupIds = securityGroupIds
            self.availabilityZone = availabilityZone
            self.subnetId = subnetId
            self.status = status
            self.extraPythonLibsS3Path = extraPythonLibsS3Path
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
            case yarnEndpointAddress = "YarnEndpointAddress"
            case endpointName = "EndpointName"
            case vpcId = "VpcId"
            case roleArn = "RoleArn"
            case createdTimestamp = "CreatedTimestamp"
            case extraJarsS3Path = "ExtraJarsS3Path"
            case numberOfNodes = "NumberOfNodes"
            case securityGroupIds = "SecurityGroupIds"
            case availabilityZone = "AvailabilityZone"
            case subnetId = "SubnetId"
            case status = "Status"
            case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
            case failureReason = "FailureReason"
        }
    }

    public struct ResetJobBookmarkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobBookmarkEntry", required: false, type: .structure)
        ]
        /// The reset bookmark entry.
        public let jobBookmarkEntry: JobBookmarkEntry?

        public init(jobBookmarkEntry: JobBookmarkEntry? = nil) {
            self.jobBookmarkEntry = jobBookmarkEntry
        }

        private enum CodingKeys: String, CodingKey {
            case jobBookmarkEntry = "JobBookmarkEntry"
        }
    }

    public struct UpdateJsonClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "JsonPath", required: false, type: .string)
        ]
        /// The name of the classifier.
        public let name: String
        /// A JsonPath string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in Writing JsonPath Custom Classifiers.
        public let jsonPath: String?

        public init(name: String, jsonPath: String? = nil) {
            self.name = name
            self.jsonPath = jsonPath
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case jsonPath = "JsonPath"
        }
    }

    public struct DeleteJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The name of the job definition that was deleted.
        public let jobName: String?

        public init(jobName: String? = nil) {
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
        }
    }

    public struct BatchDeletePartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "PartitionsToDelete", required: true, type: .list), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The name of the catalog database in which the table in question resides.
        public let databaseName: String
        /// A list of PartitionInput structures that define the partitions to be deleted.
        public let partitionsToDelete: [PartitionValueList]
        /// The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table where the partitions to be deleted is located.
        public let tableName: String

        public init(databaseName: String, partitionsToDelete: [PartitionValueList], catalogId: String? = nil, tableName: String) {
            self.databaseName = databaseName
            self.partitionsToDelete = partitionsToDelete
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case partitionsToDelete = "PartitionsToDelete"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct UpdateDatabaseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseInput", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// A DatabaseInput object specifying the new definition of the metadata database in the catalog.
        public let databaseInput: DatabaseInput
        /// The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.
        public let name: String
        /// The ID of the Data Catalog in which the metadata database resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseInput: DatabaseInput, name: String, catalogId: String? = nil) {
            self.databaseInput = databaseInput
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseInput = "DatabaseInput"
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct CrawlerTargets: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DynamoDBTargets", required: false, type: .list), 
            AWSShapeMember(label: "JdbcTargets", required: false, type: .list), 
            AWSShapeMember(label: "S3Targets", required: false, type: .list)
        ]
        /// Specifies DynamoDB targets.
        public let dynamoDBTargets: [DynamoDBTarget]?
        /// Specifies JDBC targets.
        public let jdbcTargets: [JdbcTarget]?
        /// Specifies Amazon S3 targets.
        public let s3Targets: [S3Target]?

        public init(dynamoDBTargets: [DynamoDBTarget]? = nil, jdbcTargets: [JdbcTarget]? = nil, s3Targets: [S3Target]? = nil) {
            self.dynamoDBTargets = dynamoDBTargets
            self.jdbcTargets = jdbcTargets
            self.s3Targets = s3Targets
        }

        private enum CodingKeys: String, CodingKey {
            case dynamoDBTargets = "DynamoDBTargets"
            case jdbcTargets = "JdbcTargets"
            case s3Targets = "S3Targets"
        }
    }

    public struct GetTablesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TableList", required: false, type: .list)
        ]
        /// A continuation token, present if the current list segment is not the last.
        public let nextToken: String?
        /// A list of the requested Table objects.
        public let tableList: [Table]?

        public init(nextToken: String? = nil, tableList: [Table]? = nil) {
            self.nextToken = nextToken
            self.tableList = tableList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tableList = "TableList"
        }
    }

    public struct CreatePartitionResponse: AWSShape {

    }

    public struct Segment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalSegments", required: true, type: .integer), 
            AWSShapeMember(label: "SegmentNumber", required: true, type: .integer)
        ]
        /// The total numer of segments.
        public let totalSegments: Int32
        /// The zero-based index number of the this segment. For example, if the total number of segments is 4, SegmentNumber values will range from zero through three.
        public let segmentNumber: Int32

        public init(totalSegments: Int32, segmentNumber: Int32) {
            self.totalSegments = totalSegments
            self.segmentNumber = segmentNumber
        }

        private enum CodingKeys: String, CodingKey {
            case totalSegments = "TotalSegments"
            case segmentNumber = "SegmentNumber"
        }
    }

    public struct StartCrawlerResponse: AWSShape {

    }

    public struct StopTriggerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the trigger that was stopped.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct UserDefinedFunction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FunctionName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceUris", required: false, type: .list), 
            AWSShapeMember(label: "OwnerType", required: false, type: .enum), 
            AWSShapeMember(label: "OwnerName", required: false, type: .string), 
            AWSShapeMember(label: "ClassName", required: false, type: .string)
        ]
        /// The time at which the function was created.
        public let createTime: TimeStamp?
        /// The name of the function.
        public let functionName: String?
        /// The resource URIs for the function.
        public let resourceUris: [ResourceUri]?
        /// The owner type.
        public let ownerType: PrincipalType?
        /// The owner of the function.
        public let ownerName: String?
        /// The Java class that contains the function code.
        public let className: String?

        public init(createTime: TimeStamp? = nil, functionName: String? = nil, resourceUris: [ResourceUri]? = nil, ownerType: PrincipalType? = nil, ownerName: String? = nil, className: String? = nil) {
            self.createTime = createTime
            self.functionName = functionName
            self.resourceUris = resourceUris
            self.ownerType = ownerType
            self.ownerName = ownerName
            self.className = className
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case functionName = "FunctionName"
            case resourceUris = "ResourceUris"
            case ownerType = "OwnerType"
            case ownerName = "OwnerName"
            case className = "ClassName"
        }
    }

    public struct StartTriggerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the trigger that was started.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteDatabaseResponse: AWSShape {

    }

    public struct GetUserDefinedFunctionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserDefinedFunction", required: false, type: .structure)
        ]
        /// The requested function definition.
        public let userDefinedFunction: UserDefinedFunction?

        public init(userDefinedFunction: UserDefinedFunction? = nil) {
            self.userDefinedFunction = userDefinedFunction
        }

        private enum CodingKeys: String, CodingKey {
            case userDefinedFunction = "UserDefinedFunction"
        }
    }

    public struct UpdateTriggerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "TriggerUpdate", required: true, type: .structure)
        ]
        /// The name of the trigger to update.
        public let name: String
        /// The new values with which to update the trigger.
        public let triggerUpdate: TriggerUpdate

        public init(name: String, triggerUpdate: TriggerUpdate) {
            self.name = name
            self.triggerUpdate = triggerUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case triggerUpdate = "TriggerUpdate"
        }
    }

    public struct GetConnectionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionList", required: false, type: .list)
        ]
        /// A continuation token, if the list of connections returned does not include the last of the filtered connections.
        public let nextToken: String?
        /// A list of requested connection definitions.
        public let connectionList: [Connection]?

        public init(nextToken: String? = nil, connectionList: [Connection]? = nil) {
            self.nextToken = nextToken
            self.connectionList = connectionList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case connectionList = "ConnectionList"
        }
    }

    public struct Predicate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Logical", required: false, type: .enum), 
            AWSShapeMember(label: "Conditions", required: false, type: .list)
        ]
        /// Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
        public let logical: Logical?
        /// A list of the conditions that determine when the trigger will fire.
        public let conditions: [Condition]?

        public init(logical: Logical? = nil, conditions: [Condition]? = nil) {
            self.logical = logical
            self.conditions = conditions
        }

        private enum CodingKeys: String, CodingKey {
            case logical = "Logical"
            case conditions = "Conditions"
        }
    }

    public enum CrawlerState: String, CustomStringConvertible, Codable {
        case ready = "READY"
        case running = "RUNNING"
        case stopping = "STOPPING"
        public var description: String { return self.rawValue }
    }

    public enum DeleteBehavior: String, CustomStringConvertible, Codable {
        case log = "LOG"
        case deleteFromDatabase = "DELETE_FROM_DATABASE"
        case deprecateInDatabase = "DEPRECATE_IN_DATABASE"
        public var description: String { return self.rawValue }
    }

    public struct GetCatalogImportStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportStatus", required: false, type: .structure)
        ]
        /// The status of the specified catalog migration.
        public let importStatus: CatalogImportStatus?

        public init(importStatus: CatalogImportStatus? = nil) {
            self.importStatus = importStatus
        }

        private enum CodingKeys: String, CodingKey {
            case importStatus = "ImportStatus"
        }
    }

    public struct CreateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The unique name that was provided for this job definition.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct CreateConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionInput", required: true, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// A ConnectionInput object defining the connection to create.
        public let connectionInput: ConnectionInput
        /// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(connectionInput: ConnectionInput, catalogId: String? = nil) {
            self.connectionInput = connectionInput
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionInput = "ConnectionInput"
            case catalogId = "CatalogId"
        }
    }

    public struct Trigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "Predicate", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The current state of the trigger.
        public let state: TriggerState?
        /// A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public let schedule: String?
        /// The actions initiated by this trigger.
        public let actions: [Action]?
        /// The predicate of this trigger, which defines when it will fire.
        public let predicate: Predicate?
        /// The type of trigger that this is.
        public let `type`: TriggerType?
        /// Name of the trigger.
        public let name: String?
        /// Reserved for future use.
        public let id: String?
        /// A description of this trigger.
        public let description: String?

        public init(state: TriggerState? = nil, schedule: String? = nil, actions: [Action]? = nil, predicate: Predicate? = nil, type: TriggerType? = nil, name: String? = nil, id: String? = nil, description: String? = nil) {
            self.state = state
            self.schedule = schedule
            self.actions = actions
            self.predicate = predicate
            self.`type` = `type`
            self.name = name
            self.id = id
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case schedule = "Schedule"
            case actions = "Actions"
            case predicate = "Predicate"
            case `type` = "Type"
            case name = "Name"
            case id = "Id"
            case description = "Description"
        }
    }

    public struct BatchDeleteConnectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", required: false, type: .map), 
            AWSShapeMember(label: "Succeeded", required: false, type: .list)
        ]
        /// A map of the names of connections that were not successfully deleted to error details.
        public let errors: [String: ErrorDetail]?
        /// A list of names of the connection definitions that were successfully deleted.
        public let succeeded: [String]?

        public init(errors: [String: ErrorDetail]? = nil, succeeded: [String]? = nil) {
            self.errors = errors
            self.succeeded = succeeded
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
            case succeeded = "Succeeded"
        }
    }

    public struct GetTriggersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Triggers", required: false, type: .list)
        ]
        /// A continuation token, if not all the requested triggers have yet been returned.
        public let nextToken: String?
        /// A list of triggers for the specified job.
        public let triggers: [Trigger]?

        public init(nextToken: String? = nil, triggers: [Trigger]? = nil) {
            self.nextToken = nextToken
            self.triggers = triggers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case triggers = "Triggers"
        }
    }

    public struct DeleteConnectionResponse: AWSShape {

    }

    public struct GetJobRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobRuns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of job-run metatdata objects.
        public let jobRuns: [JobRun]?
        /// A continuation token, if not all reequested job runs have been returned.
        public let nextToken: String?

        public init(jobRuns: [JobRun]? = nil, nextToken: String? = nil) {
            self.jobRuns = jobRuns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobRuns = "JobRuns"
            case nextToken = "NextToken"
        }
    }

    public struct DeletePartitionResponse: AWSShape {

    }

    public struct UpdateConnectionResponse: AWSShape {

    }

    public struct UpdatePartitionResponse: AWSShape {

    }

    public struct DeleteCrawlerResponse: AWSShape {

    }

    public struct CreateTableResponse: AWSShape {

    }

    public struct Order: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Column", required: true, type: .string), 
            AWSShapeMember(label: "SortOrder", required: true, type: .integer)
        ]
        /// The name of the column.
        public let column: String
        /// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
        public let sortOrder: Int32

        public init(column: String, sortOrder: Int32) {
            self.column = column
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case column = "Column"
            case sortOrder = "SortOrder"
        }
    }

    public struct CreateScriptRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DagEdges", required: false, type: .list), 
            AWSShapeMember(label: "DagNodes", required: false, type: .list), 
            AWSShapeMember(label: "Language", required: false, type: .enum)
        ]
        /// A list of the edges in the DAG.
        public let dagEdges: [CodeGenEdge]?
        /// A list of the nodes in the DAG.
        public let dagNodes: [CodeGenNode]?
        /// The programming language of the resulting code from the DAG.
        public let language: Language?

        public init(dagEdges: [CodeGenEdge]? = nil, dagNodes: [CodeGenNode]? = nil, language: Language? = nil) {
            self.dagEdges = dagEdges
            self.dagNodes = dagNodes
            self.language = language
        }

        private enum CodingKeys: String, CodingKey {
            case dagEdges = "DagEdges"
            case dagNodes = "DagNodes"
            case language = "Language"
        }
    }

    public struct GetDatabasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseList", required: true, type: .list)
        ]
        /// A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
        public let nextToken: String?
        /// A list of Database objects from the specified catalog.
        public let databaseList: [Database]

        public init(nextToken: String? = nil, databaseList: [Database]) {
            self.nextToken = nextToken
            self.databaseList = databaseList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case databaseList = "DatabaseList"
        }
    }

    public struct ConnectionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", required: true, type: .enum), 
            AWSShapeMember(label: "MatchCriteria", required: false, type: .list), 
            AWSShapeMember(label: "PhysicalConnectionRequirements", required: false, type: .structure), 
            AWSShapeMember(label: "ConnectionProperties", required: true, type: .map)
        ]
        /// The name of the connection.
        public let name: String
        /// Description of the connection.
        public let description: String?
        /// The type of the connection. Currently, only JDBC is supported; SFTP is not supported.
        public let connectionType: ConnectionType
        /// A list of criteria that can be used in selecting this connection.
        public let matchCriteria: [String]?
        /// A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.
        public let physicalConnectionRequirements: PhysicalConnectionRequirements?
        /// A list of key-value pairs used as parameters for this connection.
        public let connectionProperties: [ConnectionPropertyKey: String]

        public init(name: String, description: String? = nil, connectionType: ConnectionType, matchCriteria: [String]? = nil, physicalConnectionRequirements: PhysicalConnectionRequirements? = nil, connectionProperties: [ConnectionPropertyKey: String]) {
            self.name = name
            self.description = description
            self.connectionType = connectionType
            self.matchCriteria = matchCriteria
            self.physicalConnectionRequirements = physicalConnectionRequirements
            self.connectionProperties = connectionProperties
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case connectionType = "ConnectionType"
            case matchCriteria = "MatchCriteria"
            case physicalConnectionRequirements = "PhysicalConnectionRequirements"
            case connectionProperties = "ConnectionProperties"
        }
    }

    public struct CreateJsonClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "JsonPath", required: true, type: .string)
        ]
        /// The name of the classifier.
        public let name: String
        /// A JsonPath string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in Writing JsonPath Custom Classifiers.
        public let jsonPath: String

        public init(name: String, jsonPath: String) {
            self.name = name
            self.jsonPath = jsonPath
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case jsonPath = "JsonPath"
        }
    }

    public struct GetCrawlerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Name of the crawler to retrieve metadata for.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct UpdateCrawlerScheduleResponse: AWSShape {

    }

    public struct DeleteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase.
        public let name: String
        /// The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, name: String, catalogId: String? = nil) {
            self.databaseName = databaseName
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct CreatePartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartitionInput", required: true, type: .structure), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// A PartitionInput structure defining the partition to be created.
        public let partitionInput: PartitionInput
        /// The name of the metadata database in which the partition is to be created.
        public let databaseName: String
        /// The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.
        public let catalogId: String?
        /// The name of the metadata table in which the partition is to be created.
        public let tableName: String

        public init(partitionInput: PartitionInput, databaseName: String, catalogId: String? = nil, tableName: String) {
            self.partitionInput = partitionInput
            self.databaseName = databaseName
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case partitionInput = "PartitionInput"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct StopCrawlerResponse: AWSShape {

    }

    public struct BatchStopJobRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulSubmissions", required: false, type: .list), 
            AWSShapeMember(label: "Errors", required: false, type: .list)
        ]
        /// A list of the JobRuns that were successfully submitted for stopping.
        public let successfulSubmissions: [BatchStopJobRunSuccessfulSubmission]?
        /// A list of the errors that were encountered in tryng to stop JobRuns, including the JobRunId for which each error was encountered and details about the error.
        public let errors: [BatchStopJobRunError]?

        public init(successfulSubmissions: [BatchStopJobRunSuccessfulSubmission]? = nil, errors: [BatchStopJobRunError]? = nil) {
            self.successfulSubmissions = successfulSubmissions
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case successfulSubmissions = "SuccessfulSubmissions"
            case errors = "Errors"
        }
    }

    public enum ConnectionPropertyKey: String, CustomStringConvertible, Codable {
        case host = "HOST"
        case port = "PORT"
        case username = "USERNAME"
        case password = "PASSWORD"
        case jdbcDriverJarUri = "JDBC_DRIVER_JAR_URI"
        case jdbcDriverClassName = "JDBC_DRIVER_CLASS_NAME"
        case jdbcEngine = "JDBC_ENGINE"
        case jdbcEngineVersion = "JDBC_ENGINE_VERSION"
        case configFiles = "CONFIG_FILES"
        case instanceId = "INSTANCE_ID"
        case jdbcConnectionUrl = "JDBC_CONNECTION_URL"
        public var description: String { return self.rawValue }
    }

    public struct GetTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase.
        public let name: String
        /// The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, name: String, catalogId: String? = nil) {
            self.databaseName = databaseName
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct StartCrawlerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Name of the crawler to start.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeletePartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "PartitionValues", required: true, type: .list), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The name of the catalog database in which the table in question resides.
        public let databaseName: String
        /// The values that define the partition.
        public let partitionValues: [String]
        /// The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table where the partition to be deleted is located.
        public let tableName: String

        public init(databaseName: String, partitionValues: [String], catalogId: String? = nil, tableName: String) {
            self.databaseName = databaseName
            self.partitionValues = partitionValues
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case partitionValues = "PartitionValues"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct GetPartitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Partitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of requested partitions.
        public let partitions: [Partition]?
        /// A continuation token, if the returned list of partitions does not does not include the last one.
        public let nextToken: String?

        public init(partitions: [Partition]? = nil, nextToken: String? = nil) {
            self.partitions = partitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case partitions = "Partitions"
            case nextToken = "NextToken"
        }
    }

    public struct GetCrawlerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Crawler", required: false, type: .structure)
        ]
        /// The metadata for the specified crawler.
        public let crawler: Crawler?

        public init(crawler: Crawler? = nil) {
            self.crawler = crawler
        }

        private enum CodingKeys: String, CodingKey {
            case crawler = "Crawler"
        }
    }

    public struct GrokClassifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Classification", required: true, type: .string), 
            AWSShapeMember(label: "CustomPatterns", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .long), 
            AWSShapeMember(label: "GrokPattern", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "LastUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp)
        ]
        /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and so on.
        public let classification: String
        /// Optional custom grok patterns defined by this classifier. For more information, see custom patterns in Writing Custom Classifers.
        public let customPatterns: String?
        /// The version of this classifier.
        public let version: Int64?
        /// The grok pattern applied to a data store by this classifier. For more information, see built-in patterns in Writing Custom Classifers.
        public let grokPattern: String
        /// The name of the classifier.
        public let name: String
        /// The time this classifier was last updated.
        public let lastUpdated: TimeStamp?
        /// The time this classifier was registered.
        public let creationTime: TimeStamp?

        public init(classification: String, customPatterns: String? = nil, version: Int64? = nil, grokPattern: String, name: String, lastUpdated: TimeStamp? = nil, creationTime: TimeStamp? = nil) {
            self.classification = classification
            self.customPatterns = customPatterns
            self.version = version
            self.grokPattern = grokPattern
            self.name = name
            self.lastUpdated = lastUpdated
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case classification = "Classification"
            case customPatterns = "CustomPatterns"
            case version = "Version"
            case grokPattern = "GrokPattern"
            case name = "Name"
            case lastUpdated = "LastUpdated"
            case creationTime = "CreationTime"
        }
    }

    public struct CrawlerMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TablesCreated", required: false, type: .integer), 
            AWSShapeMember(label: "CrawlerName", required: false, type: .string), 
            AWSShapeMember(label: "MedianRuntimeSeconds", required: false, type: .double), 
            AWSShapeMember(label: "LastRuntimeSeconds", required: false, type: .double), 
            AWSShapeMember(label: "TimeLeftSeconds", required: false, type: .double), 
            AWSShapeMember(label: "TablesDeleted", required: false, type: .integer), 
            AWSShapeMember(label: "TablesUpdated", required: false, type: .integer), 
            AWSShapeMember(label: "StillEstimating", required: false, type: .boolean)
        ]
        /// The number of tables created by this crawler.
        public let tablesCreated: Int32?
        /// The name of the crawler.
        public let crawlerName: String?
        /// The median duration of this crawler's runs, in seconds.
        public let medianRuntimeSeconds: Double?
        /// The duration of the crawler's most recent run, in seconds.
        public let lastRuntimeSeconds: Double?
        /// The estimated time left to complete a running crawl.
        public let timeLeftSeconds: Double?
        /// The number of tables deleted by this crawler.
        public let tablesDeleted: Int32?
        /// The number of tables updated by this crawler.
        public let tablesUpdated: Int32?
        /// True if the crawler is still estimating how long it will take to complete this run.
        public let stillEstimating: Bool?

        public init(tablesCreated: Int32? = nil, crawlerName: String? = nil, medianRuntimeSeconds: Double? = nil, lastRuntimeSeconds: Double? = nil, timeLeftSeconds: Double? = nil, tablesDeleted: Int32? = nil, tablesUpdated: Int32? = nil, stillEstimating: Bool? = nil) {
            self.tablesCreated = tablesCreated
            self.crawlerName = crawlerName
            self.medianRuntimeSeconds = medianRuntimeSeconds
            self.lastRuntimeSeconds = lastRuntimeSeconds
            self.timeLeftSeconds = timeLeftSeconds
            self.tablesDeleted = tablesDeleted
            self.tablesUpdated = tablesUpdated
            self.stillEstimating = stillEstimating
        }

        private enum CodingKeys: String, CodingKey {
            case tablesCreated = "TablesCreated"
            case crawlerName = "CrawlerName"
            case medianRuntimeSeconds = "MedianRuntimeSeconds"
            case lastRuntimeSeconds = "LastRuntimeSeconds"
            case timeLeftSeconds = "TimeLeftSeconds"
            case tablesDeleted = "TablesDeleted"
            case tablesUpdated = "TablesUpdated"
            case stillEstimating = "StillEstimating"
        }
    }

    public struct CreateClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JsonClassifier", required: false, type: .structure), 
            AWSShapeMember(label: "GrokClassifier", required: false, type: .structure), 
            AWSShapeMember(label: "XMLClassifier", required: false, type: .structure)
        ]
        /// A JsonClassifier object specifying the classifier to create.
        public let jsonClassifier: CreateJsonClassifierRequest?
        /// A GrokClassifier object specifying the classifier to create.
        public let grokClassifier: CreateGrokClassifierRequest?
        /// An XMLClassifier object specifying the classifier to create.
        public let xMLClassifier: CreateXMLClassifierRequest?

        public init(jsonClassifier: CreateJsonClassifierRequest? = nil, grokClassifier: CreateGrokClassifierRequest? = nil, xMLClassifier: CreateXMLClassifierRequest? = nil) {
            self.jsonClassifier = jsonClassifier
            self.grokClassifier = grokClassifier
            self.xMLClassifier = xMLClassifier
        }

        private enum CodingKeys: String, CodingKey {
            case jsonClassifier = "JsonClassifier"
            case grokClassifier = "GrokClassifier"
            case xMLClassifier = "XMLClassifier"
        }
    }

    public struct MappingEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "TargetTable", required: false, type: .string), 
            AWSShapeMember(label: "SourceTable", required: false, type: .string), 
            AWSShapeMember(label: "TargetPath", required: false, type: .string), 
            AWSShapeMember(label: "SourcePath", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .string)
        ]
        /// The source type.
        public let sourceType: String?
        /// The target table.
        public let targetTable: String?
        /// The name of the source table.
        public let sourceTable: String?
        /// The target path.
        public let targetPath: String?
        /// The source path.
        public let sourcePath: String?
        /// The target type.
        public let targetType: String?

        public init(sourceType: String? = nil, targetTable: String? = nil, sourceTable: String? = nil, targetPath: String? = nil, sourcePath: String? = nil, targetType: String? = nil) {
            self.sourceType = sourceType
            self.targetTable = targetTable
            self.sourceTable = sourceTable
            self.targetPath = targetPath
            self.sourcePath = sourcePath
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case targetTable = "TargetTable"
            case sourceTable = "SourceTable"
            case targetPath = "TargetPath"
            case sourcePath = "SourcePath"
            case targetType = "TargetType"
        }
    }

    public struct UpdateCrawlerScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "CrawlerName", required: true, type: .string)
        ]
        /// The updated cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public let schedule: String?
        /// Name of the crawler whose schedule to update.
        public let crawlerName: String

        public init(schedule: String? = nil, crawlerName: String) {
            self.schedule = schedule
            self.crawlerName = crawlerName
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case crawlerName = "CrawlerName"
        }
    }

    public struct UpdateTableResponse: AWSShape {

    }

    public struct CreateDatabaseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseInput", required: true, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// A DatabaseInput object defining the metadata database to create in the catalog.
        public let databaseInput: DatabaseInput
        /// The ID of the Data Catalog in which to create the database. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseInput: DatabaseInput, catalogId: String? = nil) {
            self.databaseInput = databaseInput
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseInput = "DatabaseInput"
            case catalogId = "CatalogId"
        }
    }

    public struct GetConnectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connection", required: false, type: .structure)
        ]
        /// The requested connection definition.
        public let connection: Connection?

        public init(connection: Connection? = nil) {
            self.connection = connection
        }

        private enum CodingKeys: String, CodingKey {
            case connection = "Connection"
        }
    }

    public struct TableVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Table", required: false, type: .structure), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// The table in question
        public let table: Table?
        /// The ID value that identifies this table version.
        public let versionId: String?

        public init(table: Table? = nil, versionId: String? = nil) {
            self.table = table
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case table = "Table"
            case versionId = "VersionId"
        }
    }

    public struct GetDatabasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The maximum number of databases to return in one response.
        public let maxResults: Int32?
        /// The ID of the Data Catalog from which to retrieve Databases. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, catalogId: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case catalogId = "CatalogId"
        }
    }

    public struct CodeGenNode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LineNumber", required: false, type: .integer), 
            AWSShapeMember(label: "NodeType", required: true, type: .string), 
            AWSShapeMember(label: "Args", required: true, type: .list), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The line number of the node.
        public let lineNumber: Int32?
        /// The type of node this is.
        public let nodeType: String
        /// Properties of the node, in the form of name-value pairs.
        public let args: [CodeGenNodeArg]
        /// A node identifier that is unique within the node's graph.
        public let id: String

        public init(lineNumber: Int32? = nil, nodeType: String, args: [CodeGenNodeArg], id: String) {
            self.lineNumber = lineNumber
            self.nodeType = nodeType
            self.args = args
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case lineNumber = "LineNumber"
            case nodeType = "NodeType"
            case args = "Args"
            case id = "Id"
        }
    }

    public struct StartCrawlerScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CrawlerName", required: true, type: .string)
        ]
        /// Name of the crawler to schedule.
        public let crawlerName: String

        public init(crawlerName: String) {
            self.crawlerName = crawlerName
        }

        private enum CodingKeys: String, CodingKey {
            case crawlerName = "CrawlerName"
        }
    }

    public struct GetJobRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string), 
            AWSShapeMember(label: "PredecessorsIncluded", required: false, type: .boolean), 
            AWSShapeMember(label: "RunId", required: true, type: .string)
        ]
        /// Name of the job definition being run.
        public let jobName: String
        /// True if a list of predecessor runs should be returned.
        public let predecessorsIncluded: Bool?
        /// The ID of the job run.
        public let runId: String

        public init(jobName: String, predecessorsIncluded: Bool? = nil, runId: String) {
            self.jobName = jobName
            self.predecessorsIncluded = predecessorsIncluded
            self.runId = runId
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
            case predecessorsIncluded = "PredecessorsIncluded"
            case runId = "RunId"
        }
    }

    public struct UpdateCrawlerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "Classifiers", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "SchemaChangePolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Targets", required: false, type: .structure), 
            AWSShapeMember(label: "Configuration", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "TablePrefix", required: false, type: .string)
        ]
        /// A description of the new crawler.
        public let description: String?
        /// The AWS Glue database where results are stored, such as: arn:aws:daylight:us-east-1::database/sometable/*.
        public let databaseName: String?
        /// A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
        public let classifiers: [String]?
        /// Name of the new crawler.
        public let name: String
        /// The IAM role (or ARN of an IAM role) used by the new crawler to access customer resources.
        public let role: String?
        /// Policy for the crawler's update and deletion behavior.
        public let schemaChangePolicy: SchemaChangePolicy?
        /// A list of targets to crawl.
        public let targets: CrawlerTargets?
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see Configuring a Crawler.
        public let configuration: String?
        /// A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public let schedule: String?
        /// The table prefix used for catalog tables that are created.
        public let tablePrefix: String?

        public init(description: String? = nil, databaseName: String? = nil, classifiers: [String]? = nil, name: String, role: String? = nil, schemaChangePolicy: SchemaChangePolicy? = nil, targets: CrawlerTargets? = nil, configuration: String? = nil, schedule: String? = nil, tablePrefix: String? = nil) {
            self.description = description
            self.databaseName = databaseName
            self.classifiers = classifiers
            self.name = name
            self.role = role
            self.schemaChangePolicy = schemaChangePolicy
            self.targets = targets
            self.configuration = configuration
            self.schedule = schedule
            self.tablePrefix = tablePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case databaseName = "DatabaseName"
            case classifiers = "Classifiers"
            case name = "Name"
            case role = "Role"
            case schemaChangePolicy = "SchemaChangePolicy"
            case targets = "Targets"
            case configuration = "Configuration"
            case schedule = "Schedule"
            case tablePrefix = "TablePrefix"
        }
    }

    public struct Crawler: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "Configuration", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Version", required: false, type: .long), 
            AWSShapeMember(label: "Targets", required: false, type: .structure), 
            AWSShapeMember(label: "Classifiers", required: false, type: .list), 
            AWSShapeMember(label: "CrawlElapsedTime", required: false, type: .long), 
            AWSShapeMember(label: "TablePrefix", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "LastCrawl", required: false, type: .structure), 
            AWSShapeMember(label: "SchemaChangePolicy", required: false, type: .structure)
        ]
        /// The IAM role (or ARN of an IAM role) used to access customer resources, such as data in Amazon S3.
        public let role: String?
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see Configuring a Crawler.
        public let configuration: String?
        /// Indicates whether the crawler is running, or whether a run is pending.
        public let state: CrawlerState?
        /// The crawler name.
        public let name: String?
        /// The database where metadata is written by this crawler.
        public let databaseName: String?
        /// The time when the crawler was created.
        public let creationTime: TimeStamp?
        /// The version of the crawler.
        public let version: Int64?
        /// A collection of targets to crawl.
        public let targets: CrawlerTargets?
        /// A list of custom classifiers associated with the crawler.
        public let classifiers: [String]?
        /// If the crawler is running, contains the total time elapsed since the last crawl began.
        public let crawlElapsedTime: Int64?
        /// The prefix added to the names of tables that are created.
        public let tablePrefix: String?
        /// A description of the crawler.
        public let description: String?
        /// The time the crawler was last updated.
        public let lastUpdated: TimeStamp?
        /// For scheduled crawlers, the schedule when the crawler runs.
        public let schedule: Schedule?
        /// The status of the last crawl, and potentially error information if an error occurred.
        public let lastCrawl: LastCrawlInfo?
        /// Sets the behavior when the crawler finds a changed or deleted object.
        public let schemaChangePolicy: SchemaChangePolicy?

        public init(role: String? = nil, configuration: String? = nil, state: CrawlerState? = nil, name: String? = nil, databaseName: String? = nil, creationTime: TimeStamp? = nil, version: Int64? = nil, targets: CrawlerTargets? = nil, classifiers: [String]? = nil, crawlElapsedTime: Int64? = nil, tablePrefix: String? = nil, description: String? = nil, lastUpdated: TimeStamp? = nil, schedule: Schedule? = nil, lastCrawl: LastCrawlInfo? = nil, schemaChangePolicy: SchemaChangePolicy? = nil) {
            self.role = role
            self.configuration = configuration
            self.state = state
            self.name = name
            self.databaseName = databaseName
            self.creationTime = creationTime
            self.version = version
            self.targets = targets
            self.classifiers = classifiers
            self.crawlElapsedTime = crawlElapsedTime
            self.tablePrefix = tablePrefix
            self.description = description
            self.lastUpdated = lastUpdated
            self.schedule = schedule
            self.lastCrawl = lastCrawl
            self.schemaChangePolicy = schemaChangePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case configuration = "Configuration"
            case state = "State"
            case name = "Name"
            case databaseName = "DatabaseName"
            case creationTime = "CreationTime"
            case version = "Version"
            case targets = "Targets"
            case classifiers = "Classifiers"
            case crawlElapsedTime = "CrawlElapsedTime"
            case tablePrefix = "TablePrefix"
            case description = "Description"
            case lastUpdated = "LastUpdated"
            case schedule = "Schedule"
            case lastCrawl = "LastCrawl"
            case schemaChangePolicy = "SchemaChangePolicy"
        }
    }

    public struct GetTriggerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Trigger", required: false, type: .structure)
        ]
        /// The requested trigger definition.
        public let trigger: Trigger?

        public init(trigger: Trigger? = nil) {
            self.trigger = trigger
        }

        private enum CodingKeys: String, CodingKey {
            case trigger = "Trigger"
        }
    }

    public struct GetUserDefinedFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "FunctionName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the catalog database where the function is located.
        public let databaseName: String
        /// The name of the function.
        public let functionName: String
        /// The ID of the Data Catalog where the function to be retrieved is located. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, functionName: String, catalogId: String? = nil) {
            self.databaseName = databaseName
            self.functionName = functionName
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case functionName = "FunctionName"
            case catalogId = "CatalogId"
        }
    }

    public struct UpdateDevEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomLibraries", required: false, type: .structure), 
            AWSShapeMember(label: "AddPublicKeys", required: false, type: .list), 
            AWSShapeMember(label: "UpdateEtlLibraries", required: false, type: .boolean), 
            AWSShapeMember(label: "PublicKey", required: false, type: .string), 
            AWSShapeMember(label: "DeletePublicKeys", required: false, type: .list), 
            AWSShapeMember(label: "EndpointName", required: true, type: .string)
        ]
        /// Custom Python or Java libraries to be loaded in the DevEndpoint.
        public let customLibraries: DevEndpointCustomLibraries?
        /// The list of public keys for the DevEndpoint to use.
        public let addPublicKeys: [String]?
        /// True if the list of custom libraries to be loaded in the development endpoint needs to be updated, or False otherwise.
        public let updateEtlLibraries: Bool?
        /// The public key for the DevEndpoint to use.
        public let publicKey: String?
        /// The list of public keys to be deleted from the DevEndpoint. 
        public let deletePublicKeys: [String]?
        /// The name of the DevEndpoint to be updated.
        public let endpointName: String

        public init(customLibraries: DevEndpointCustomLibraries? = nil, addPublicKeys: [String]? = nil, updateEtlLibraries: Bool? = nil, publicKey: String? = nil, deletePublicKeys: [String]? = nil, endpointName: String) {
            self.customLibraries = customLibraries
            self.addPublicKeys = addPublicKeys
            self.updateEtlLibraries = updateEtlLibraries
            self.publicKey = publicKey
            self.deletePublicKeys = deletePublicKeys
            self.endpointName = endpointName
        }

        private enum CodingKeys: String, CodingKey {
            case customLibraries = "CustomLibraries"
            case addPublicKeys = "AddPublicKeys"
            case updateEtlLibraries = "UpdateEtlLibraries"
            case publicKey = "PublicKey"
            case deletePublicKeys = "DeletePublicKeys"
            case endpointName = "EndpointName"
        }
    }

    public struct BatchDeleteTableVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "VersionIds", required: true, type: .list), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// A list of the IDs of versions to be deleted.
        public let versionIds: [String]
        /// The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table. For Hive compatibility, this name is entirely lowercase.
        public let tableName: String

        public init(databaseName: String, versionIds: [String], catalogId: String? = nil, tableName: String) {
            self.databaseName = databaseName
            self.versionIds = versionIds
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case versionIds = "VersionIds"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct CreateUserDefinedFunctionResponse: AWSShape {

    }

    public struct JobBookmarkEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attempt", required: false, type: .integer), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobBookmark", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Run", required: false, type: .integer)
        ]
        /// The attempt ID number.
        public let attempt: Int32?
        /// Name of the job in question.
        public let jobName: String?
        /// The bookmark itself.
        public let jobBookmark: String?
        /// Version of the job.
        public let version: Int32?
        /// The run ID number.
        public let run: Int32?

        public init(attempt: Int32? = nil, jobName: String? = nil, jobBookmark: String? = nil, version: Int32? = nil, run: Int32? = nil) {
            self.attempt = attempt
            self.jobName = jobName
            self.jobBookmark = jobBookmark
            self.version = version
            self.run = run
        }

        private enum CodingKeys: String, CodingKey {
            case attempt = "Attempt"
            case jobName = "JobName"
            case jobBookmark = "JobBookmark"
            case version = "Version"
            case run = "Run"
        }
    }

    public struct DeleteConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the connection to delete.
        public let connectionName: String
        /// The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(connectionName: String, catalogId: String? = nil) {
            self.connectionName = connectionName
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionName = "ConnectionName"
            case catalogId = "CatalogId"
        }
    }

    public struct UpdateDatabaseResponse: AWSShape {

    }

    public struct BatchCreatePartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartitionInputList", required: true, type: .list), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// A list of PartitionInput structures that define the partitions to be created.
        public let partitionInputList: [PartitionInput]
        /// The name of the metadata database in which the partition is to be created.
        public let databaseName: String
        /// The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.
        public let catalogId: String?
        /// The name of the metadata table in which the partition is to be created.
        public let tableName: String

        public init(partitionInputList: [PartitionInput], databaseName: String, catalogId: String? = nil, tableName: String) {
            self.partitionInputList = partitionInputList
            self.databaseName = databaseName
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case partitionInputList = "PartitionInputList"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct BatchGetPartitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Partitions", required: false, type: .list), 
            AWSShapeMember(label: "UnprocessedKeys", required: false, type: .list)
        ]
        /// A list of the requested partitions.
        public let partitions: [Partition]?
        /// A list of the partition values in the request for which partions were not returned.
        public let unprocessedKeys: [PartitionValueList]?

        public init(partitions: [Partition]? = nil, unprocessedKeys: [PartitionValueList]? = nil) {
            self.partitions = partitions
            self.unprocessedKeys = unprocessedKeys
        }

        private enum CodingKeys: String, CodingKey {
            case partitions = "Partitions"
            case unprocessedKeys = "UnprocessedKeys"
        }
    }

    public struct UpdateGrokClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "GrokPattern", required: false, type: .string), 
            AWSShapeMember(label: "CustomPatterns", required: false, type: .string)
        ]
        /// The name of the GrokClassifier.
        public let name: String
        /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
        public let classification: String?
        /// The grok pattern used by this classifier.
        public let grokPattern: String?
        /// Optional custom grok patterns used by this classifier.
        public let customPatterns: String?

        public init(name: String, classification: String? = nil, grokPattern: String? = nil, customPatterns: String? = nil) {
            self.name = name
            self.classification = classification
            self.grokPattern = grokPattern
            self.customPatterns = customPatterns
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case classification = "Classification"
            case grokPattern = "GrokPattern"
            case customPatterns = "CustomPatterns"
        }
    }

    public enum TriggerType: String, CustomStringConvertible, Codable {
        case scheduled = "SCHEDULED"
        case conditional = "CONDITIONAL"
        case onDemand = "ON_DEMAND"
        public var description: String { return self.rawValue }
    }

    public struct Schedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string)
        ]
        /// The state of the schedule.
        public let state: ScheduleState?
        /// A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public let scheduleExpression: String?

        public init(state: ScheduleState? = nil, scheduleExpression: String? = nil) {
            self.state = state
            self.scheduleExpression = scheduleExpression
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case scheduleExpression = "ScheduleExpression"
        }
    }

    public struct GetTriggerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the trigger to retrieve.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct GetUserDefinedFunctionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "Pattern", required: true, type: .string)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The name of the catalog database where the functions are located.
        public let databaseName: String
        /// The maximum number of functions to return in one response.
        public let maxResults: Int32?
        /// The ID of the Data Catalog where the functions to be retrieved are located. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// An optional function-name pattern string that filters the function definitions returned.
        public let pattern: String

        public init(nextToken: String? = nil, databaseName: String, maxResults: Int32? = nil, catalogId: String? = nil, pattern: String) {
            self.nextToken = nextToken
            self.databaseName = databaseName
            self.maxResults = maxResults
            self.catalogId = catalogId
            self.pattern = pattern
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case databaseName = "DatabaseName"
            case maxResults = "MaxResults"
            case catalogId = "CatalogId"
            case pattern = "Pattern"
        }
    }

    public struct CreateCrawlerResponse: AWSShape {

    }

    public struct JobUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "MaxRetries", required: false, type: .integer), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultArguments", required: false, type: .map), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "ExecutionProperty", required: false, type: .structure), 
            AWSShapeMember(label: "Command", required: false, type: .structure), 
            AWSShapeMember(label: "NotificationProperty", required: false, type: .structure), 
            AWSShapeMember(label: "Connections", required: false, type: .structure)
        ]
        /// Description of the job being defined.
        public let description: String?
        /// The maximum number of times to retry this job if it fails.
        public let maxRetries: Int32?
        /// The job timeout in minutes. The default is 2880 minutes (48 hours).
        public let timeout: Int32?
        /// The default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
        public let defaultArguments: [String: String]?
        /// This field is reserved for future use.
        public let logUri: String?
        /// The name or ARN of the IAM role associated with this job (required).
        public let role: String?
        /// The number of AWS Glue data processing units (DPUs) to allocate to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the AWS Glue pricing page.
        public let allocatedCapacity: Int32?
        /// An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
        public let executionProperty: ExecutionProperty?
        /// The JobCommand that executes this job (required).
        public let command: JobCommand?
        /// Specifies configuration properties of a job notification.
        public let notificationProperty: NotificationProperty?
        /// The connections used for this job.
        public let connections: ConnectionsList?

        public init(description: String? = nil, maxRetries: Int32? = nil, timeout: Int32? = nil, defaultArguments: [String: String]? = nil, logUri: String? = nil, role: String? = nil, allocatedCapacity: Int32? = nil, executionProperty: ExecutionProperty? = nil, command: JobCommand? = nil, notificationProperty: NotificationProperty? = nil, connections: ConnectionsList? = nil) {
            self.description = description
            self.maxRetries = maxRetries
            self.timeout = timeout
            self.defaultArguments = defaultArguments
            self.logUri = logUri
            self.role = role
            self.allocatedCapacity = allocatedCapacity
            self.executionProperty = executionProperty
            self.command = command
            self.notificationProperty = notificationProperty
            self.connections = connections
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case maxRetries = "MaxRetries"
            case timeout = "Timeout"
            case defaultArguments = "DefaultArguments"
            case logUri = "LogUri"
            case role = "Role"
            case allocatedCapacity = "AllocatedCapacity"
            case executionProperty = "ExecutionProperty"
            case command = "Command"
            case notificationProperty = "NotificationProperty"
            case connections = "Connections"
        }
    }

    public struct UpdateCrawlerResponse: AWSShape {

    }

    public enum LastCrawlStatus: String, CustomStringConvertible, Codable {
        case succeeded = "SUCCEEDED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct GetCrawlerMetricsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CrawlerMetricsList", required: false, type: .list)
        ]
        /// A continuation token, if the returned list does not contain the last metric available.
        public let nextToken: String?
        /// A list of metrics for the specified crawler.
        public let crawlerMetricsList: [CrawlerMetrics]?

        public init(nextToken: String? = nil, crawlerMetricsList: [CrawlerMetrics]? = nil) {
            self.nextToken = nextToken
            self.crawlerMetricsList = crawlerMetricsList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case crawlerMetricsList = "CrawlerMetricsList"
        }
    }

    public struct UpdateTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "TableInput", required: true, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "SkipArchive", required: false, type: .boolean)
        ]
        /// The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// An updated TableInput object to define the metadata table in the catalog.
        public let tableInput: TableInput
        /// The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// By default, UpdateTable always creates an archived version of the table before updating it. If skipArchive is set to true, however, UpdateTable does not create the archived version.
        public let skipArchive: Bool?

        public init(databaseName: String, tableInput: TableInput, catalogId: String? = nil, skipArchive: Bool? = nil) {
            self.databaseName = databaseName
            self.tableInput = tableInput
            self.catalogId = catalogId
            self.skipArchive = skipArchive
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tableInput = "TableInput"
            case catalogId = "CatalogId"
            case skipArchive = "SkipArchive"
        }
    }

    public struct DeleteDevEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointName", required: true, type: .string)
        ]
        /// The name of the DevEndpoint.
        public let endpointName: String

        public init(endpointName: String) {
            self.endpointName = endpointName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
        }
    }

    public struct StopCrawlerScheduleResponse: AWSShape {

    }

    public struct GetConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the connection definition to retrieve.
        public let name: String
        /// The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(name: String, catalogId: String? = nil) {
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct GetTriggersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DependentJobName", required: false, type: .string)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The maximum size of the response.
        public let maxResults: Int32?
        /// The name of the job for which to retrieve triggers. The trigger that can start this job will be returned, and if there is no such trigger, all triggers will be returned.
        public let dependentJobName: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, dependentJobName: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dependentJobName = dependentJobName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case dependentJobName = "DependentJobName"
        }
    }

    public struct GetDevEndpointsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DevEndpoints", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of DevEndpoint definitions.
        public let devEndpoints: [DevEndpoint]?
        /// A continuation token, if not all DevEndpoint definitions have yet been returned.
        public let nextToken: String?

        public init(devEndpoints: [DevEndpoint]? = nil, nextToken: String? = nil) {
            self.devEndpoints = devEndpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case devEndpoints = "DevEndpoints"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateTriggerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Trigger", required: false, type: .structure)
        ]
        /// The resulting trigger definition.
        public let trigger: Trigger?

        public init(trigger: Trigger? = nil) {
            self.trigger = trigger
        }

        private enum CodingKeys: String, CodingKey {
            case trigger = "Trigger"
        }
    }

    public struct CreateUserDefinedFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "FunctionInput", required: true, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the catalog database in which to create the function.
        public let databaseName: String
        /// A FunctionInput object that defines the function to create in the Data Catalog.
        public let functionInput: UserDefinedFunctionInput
        /// The ID of the Data Catalog in which to create the function. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, functionInput: UserDefinedFunctionInput, catalogId: String? = nil) {
            self.databaseName = databaseName
            self.functionInput = functionInput
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case functionInput = "FunctionInput"
            case catalogId = "CatalogId"
        }
    }

    public struct GetJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Job", required: false, type: .structure)
        ]
        /// The requested job definition.
        public let job: Job?

        public init(job: Job? = nil) {
            self.job = job
        }

        private enum CodingKeys: String, CodingKey {
            case job = "Job"
        }
    }

    public struct GetClassifiersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Classifiers", required: false, type: .list)
        ]
        /// A continuation token.
        public let nextToken: String?
        /// The requested list of classifier objects.
        public let classifiers: [Classifier]?

        public init(nextToken: String? = nil, classifiers: [Classifier]? = nil) {
            self.nextToken = nextToken
            self.classifiers = classifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case classifiers = "Classifiers"
        }
    }

    public struct DatabaseInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "LocationUri", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Name of the database. For Hive compatibility, this is folded to lowercase when it is stored.
        public let name: String
        /// A list of key-value pairs that define parameters and properties of the database.
        public let parameters: [String: String]?
        /// The location of the database (for example, an HDFS path).
        public let locationUri: String?
        /// Description of the database
        public let description: String?

        public init(name: String, parameters: [String: String]? = nil, locationUri: String? = nil, description: String? = nil) {
            self.name = name
            self.parameters = parameters
            self.locationUri = locationUri
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case parameters = "Parameters"
            case locationUri = "LocationUri"
            case description = "Description"
        }
    }

    public struct UpdateXMLClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RowTag", required: false, type: .string), 
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by /&gt;). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, &lt;row item_a="A" item_b="B"&gt;&lt;/row&gt; is okay, but &lt;row item_a="A" item_b="B" /&gt; is not).
        public let rowTag: String?
        /// An identifier of the data format that the classifier matches.
        public let classification: String?
        /// The name of the classifier.
        public let name: String

        public init(rowTag: String? = nil, classification: String? = nil, name: String) {
            self.rowTag = rowTag
            self.classification = classification
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case rowTag = "RowTag"
            case classification = "Classification"
            case name = "Name"
        }
    }

    public struct BatchDeleteTableVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", required: false, type: .list)
        ]
        /// A list of errors encountered while trying to delete the specified table versions.
        public let errors: [TableVersionError]?

        public init(errors: [TableVersionError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
        }
    }

    public struct CreateCrawlerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "Classifiers", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "SchemaChangePolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Targets", required: true, type: .structure), 
            AWSShapeMember(label: "Configuration", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "TablePrefix", required: false, type: .string)
        ]
        /// A description of the new crawler.
        public let description: String?
        /// The AWS Glue database where results are written, such as: arn:aws:daylight:us-east-1::database/sometable/*.
        public let databaseName: String
        /// A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
        public let classifiers: [String]?
        /// Name of the new crawler.
        public let name: String
        /// The IAM role (or ARN of an IAM role) used by the new crawler to access customer resources.
        public let role: String
        /// Policy for the crawler's update and deletion behavior.
        public let schemaChangePolicy: SchemaChangePolicy?
        /// A list of collection of targets to crawl.
        public let targets: CrawlerTargets
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see Configuring a Crawler.
        public let configuration: String?
        /// A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public let schedule: String?
        /// The table prefix used for catalog tables that are created.
        public let tablePrefix: String?

        public init(description: String? = nil, databaseName: String, classifiers: [String]? = nil, name: String, role: String, schemaChangePolicy: SchemaChangePolicy? = nil, targets: CrawlerTargets, configuration: String? = nil, schedule: String? = nil, tablePrefix: String? = nil) {
            self.description = description
            self.databaseName = databaseName
            self.classifiers = classifiers
            self.name = name
            self.role = role
            self.schemaChangePolicy = schemaChangePolicy
            self.targets = targets
            self.configuration = configuration
            self.schedule = schedule
            self.tablePrefix = tablePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case databaseName = "DatabaseName"
            case classifiers = "Classifiers"
            case name = "Name"
            case role = "Role"
            case schemaChangePolicy = "SchemaChangePolicy"
            case targets = "Targets"
            case configuration = "Configuration"
            case schedule = "Schedule"
            case tablePrefix = "TablePrefix"
        }
    }

    public struct DeleteCrawlerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Name of the crawler to remove.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct BatchCreatePartitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", required: false, type: .list)
        ]
        /// Errors encountered when trying to create the requested partitions.
        public let errors: [PartitionError]?

        public init(errors: [PartitionError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
        }
    }

    public struct DynamoDBTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// The name of the DynamoDB table to crawl.
        public let path: String?

        public init(path: String? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct DeleteTriggerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the trigger to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteUserDefinedFunctionResponse: AWSShape {

    }

    public enum JobRunState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case running = "RUNNING"
        case stopping = "STOPPING"
        case stopped = "STOPPED"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case timeout = "TIMEOUT"
        public var description: String { return self.rawValue }
    }

    public struct CreateDevEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExtraJarsS3Path", required: false, type: .string), 
            AWSShapeMember(label: "PublicKey", required: false, type: .string), 
            AWSShapeMember(label: "EndpointName", required: true, type: .string), 
            AWSShapeMember(label: "ExtraPythonLibsS3Path", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "PublicKeys", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string)
        ]
        /// Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.
        public let extraJarsS3Path: String?
        /// The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility, as the recommended attribute to use is public keys.
        public let publicKey: String?
        /// The name to be assigned to the new DevEndpoint.
        public let endpointName: String
        /// Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma. Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the pandas Python data analysis library, are not yet supported.
        public let extraPythonLibsS3Path: String?
        /// The number of AWS Glue Data Processing Units (DPUs) to allocate to this DevEndpoint.
        public let numberOfNodes: Int32?
        /// The IAM role for the DevEndpoint.
        public let roleArn: String
        /// A list of public keys to be used by the DevEndpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.  If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys: call the UpdateDevEndpoint API with the public key content in the deletePublicKeys attribute, and the list of new keys in the addPublicKeys attribute. 
        public let publicKeys: [String]?
        /// Security group IDs for the security groups to be used by the new DevEndpoint.
        public let securityGroupIds: [String]?
        /// The subnet ID for the new DevEndpoint to use.
        public let subnetId: String?

        public init(extraJarsS3Path: String? = nil, publicKey: String? = nil, endpointName: String, extraPythonLibsS3Path: String? = nil, numberOfNodes: Int32? = nil, roleArn: String, publicKeys: [String]? = nil, securityGroupIds: [String]? = nil, subnetId: String? = nil) {
            self.extraJarsS3Path = extraJarsS3Path
            self.publicKey = publicKey
            self.endpointName = endpointName
            self.extraPythonLibsS3Path = extraPythonLibsS3Path
            self.numberOfNodes = numberOfNodes
            self.roleArn = roleArn
            self.publicKeys = publicKeys
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case extraJarsS3Path = "ExtraJarsS3Path"
            case publicKey = "PublicKey"
            case endpointName = "EndpointName"
            case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
            case numberOfNodes = "NumberOfNodes"
            case roleArn = "RoleArn"
            case publicKeys = "PublicKeys"
            case securityGroupIds = "SecurityGroupIds"
            case subnetId = "SubnetId"
        }
    }

    public enum ConnectionType: String, CustomStringConvertible, Codable {
        case jdbc = "JDBC"
        case sftp = "SFTP"
        public var description: String { return self.rawValue }
    }

    public struct GetPlanResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PythonScript", required: false, type: .string), 
            AWSShapeMember(label: "ScalaCode", required: false, type: .string)
        ]
        /// A Python script to perform the mapping.
        public let pythonScript: String?
        /// Scala code to perform the mapping.
        public let scalaCode: String?

        public init(pythonScript: String? = nil, scalaCode: String? = nil) {
            self.pythonScript = pythonScript
            self.scalaCode = scalaCode
        }

        private enum CodingKeys: String, CodingKey {
            case pythonScript = "PythonScript"
            case scalaCode = "ScalaCode"
        }
    }

    public struct Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Jdbc", required: false, type: .list), 
            AWSShapeMember(label: "S3", required: false, type: .list), 
            AWSShapeMember(label: "DynamoDB", required: false, type: .list)
        ]
        /// A JDBC location.
        public let jdbc: [CodeGenNodeArg]?
        /// An Amazon S3 location.
        public let s3: [CodeGenNodeArg]?
        /// A DynamoDB Table location.
        public let dynamoDB: [CodeGenNodeArg]?

        public init(jdbc: [CodeGenNodeArg]? = nil, s3: [CodeGenNodeArg]? = nil, dynamoDB: [CodeGenNodeArg]? = nil) {
            self.jdbc = jdbc
            self.s3 = s3
            self.dynamoDB = dynamoDB
        }

        private enum CodingKeys: String, CodingKey {
            case jdbc = "Jdbc"
            case s3 = "S3"
            case dynamoDB = "DynamoDB"
        }
    }

    public struct GetCrawlerMetricsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CrawlerNameList", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// A list of the names of crawlers about which to retrieve metrics.
        public let crawlerNameList: [String]?
        /// The maximum size of a list to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, crawlerNameList: [String]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.crawlerNameList = crawlerNameList
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case crawlerNameList = "CrawlerNameList"
            case maxResults = "MaxResults"
        }
    }

    public struct ErrorDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string)
        ]
        /// A message describing the error.
        public let errorMessage: String?
        /// The code associated with this error.
        public let errorCode: String?

        public init(errorMessage: String? = nil, errorCode: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
        }
    }

    public struct UpdateUserDefinedFunctionResponse: AWSShape {

    }

    public struct BatchGetPartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartitionsToGet", required: true, type: .list), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// A list of partition values identifying the partitions to retrieve.
        public let partitionsToGet: [PartitionValueList]
        /// The name of the catalog database where the partitions reside.
        public let databaseName: String
        /// The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the partitions' table.
        public let tableName: String

        public init(partitionsToGet: [PartitionValueList], databaseName: String, catalogId: String? = nil, tableName: String) {
            self.partitionsToGet = partitionsToGet
            self.databaseName = databaseName
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case partitionsToGet = "PartitionsToGet"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arguments", required: false, type: .map), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationProperty", required: false, type: .structure)
        ]
        /// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
        public let arguments: [String: String]?
        /// The job run timeout in minutes. It overrides the timeout value of the job.
        public let timeout: Int32?
        /// The name of a job to be executed.
        public let jobName: String?
        /// Specifies configuration properties of a job run notification.
        public let notificationProperty: NotificationProperty?

        public init(arguments: [String: String]? = nil, timeout: Int32? = nil, jobName: String? = nil, notificationProperty: NotificationProperty? = nil) {
            self.arguments = arguments
            self.timeout = timeout
            self.jobName = jobName
            self.notificationProperty = notificationProperty
        }

        private enum CodingKeys: String, CodingKey {
            case arguments = "Arguments"
            case timeout = "Timeout"
            case jobName = "JobName"
            case notificationProperty = "NotificationProperty"
        }
    }

    public struct BatchStopJobRunSuccessfulSubmission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobRunId", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The JobRunId of the job run that was stopped.
        public let jobRunId: String?
        /// The name of the job definition used in the job run that was stopped.
        public let jobName: String?

        public init(jobRunId: String? = nil, jobName: String? = nil) {
            self.jobRunId = jobRunId
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobRunId = "JobRunId"
            case jobName = "JobName"
        }
    }

    public struct CreateTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "TableInput", required: true, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// The TableInput object that defines the metadata table to create in the catalog.
        public let tableInput: TableInput
        /// The ID of the Data Catalog in which to create the Table. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, tableInput: TableInput, catalogId: String? = nil) {
            self.databaseName = databaseName
            self.tableInput = tableInput
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tableInput = "TableInput"
            case catalogId = "CatalogId"
        }
    }

    public enum UpdateBehavior: String, CustomStringConvertible, Codable {
        case log = "LOG"
        case updateInDatabase = "UPDATE_IN_DATABASE"
        public var description: String { return self.rawValue }
    }

    public struct TableInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageDescriptor", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TableType", required: false, type: .string), 
            AWSShapeMember(label: "ViewExpandedText", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Retention", required: false, type: .integer), 
            AWSShapeMember(label: "ViewOriginalText", required: false, type: .string), 
            AWSShapeMember(label: "LastAnalyzedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PartitionKeys", required: false, type: .list), 
            AWSShapeMember(label: "LastAccessTime", required: false, type: .timestamp)
        ]
        /// A storage descriptor containing information about the physical storage of this table.
        public let storageDescriptor: StorageDescriptor?
        /// Description of the table.
        public let description: String?
        /// The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
        public let tableType: String?
        /// If the table is a view, the expanded text of the view; otherwise null.
        public let viewExpandedText: String?
        /// Properties associated with this table, as a list of key-value pairs.
        public let parameters: [String: String]?
        /// Retention time for this table.
        public let retention: Int32?
        /// If the table is a view, the original text of the view; otherwise null.
        public let viewOriginalText: String?
        /// Last time column statistics were computed for this table.
        public let lastAnalyzedTime: TimeStamp?
        /// Owner of the table.
        public let owner: String?
        /// Name of the table. For Hive compatibility, this is folded to lowercase when it is stored.
        public let name: String
        /// A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
        public let partitionKeys: [Column]?
        /// Last time the table was accessed.
        public let lastAccessTime: TimeStamp?

        public init(storageDescriptor: StorageDescriptor? = nil, description: String? = nil, tableType: String? = nil, viewExpandedText: String? = nil, parameters: [String: String]? = nil, retention: Int32? = nil, viewOriginalText: String? = nil, lastAnalyzedTime: TimeStamp? = nil, owner: String? = nil, name: String, partitionKeys: [Column]? = nil, lastAccessTime: TimeStamp? = nil) {
            self.storageDescriptor = storageDescriptor
            self.description = description
            self.tableType = tableType
            self.viewExpandedText = viewExpandedText
            self.parameters = parameters
            self.retention = retention
            self.viewOriginalText = viewOriginalText
            self.lastAnalyzedTime = lastAnalyzedTime
            self.owner = owner
            self.name = name
            self.partitionKeys = partitionKeys
            self.lastAccessTime = lastAccessTime
        }

        private enum CodingKeys: String, CodingKey {
            case storageDescriptor = "StorageDescriptor"
            case description = "Description"
            case tableType = "TableType"
            case viewExpandedText = "ViewExpandedText"
            case parameters = "Parameters"
            case retention = "Retention"
            case viewOriginalText = "ViewOriginalText"
            case lastAnalyzedTime = "LastAnalyzedTime"
            case owner = "Owner"
            case name = "Name"
            case partitionKeys = "PartitionKeys"
            case lastAccessTime = "LastAccessTime"
        }
    }

    public struct CreateTriggerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "StartOnCreation", required: false, type: .boolean), 
            AWSShapeMember(label: "Predicate", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Actions", required: true, type: .list)
        ]
        /// A description of the new trigger.
        public let description: String?
        /// Set to true to start SCHEDULED and CONDITIONAL triggers when created. True not supported for ON_DEMAND triggers.
        public let startOnCreation: Bool?
        /// A predicate to specify when the new trigger should fire. This field is required when the trigger type is CONDITIONAL.
        public let predicate: Predicate?
        /// The type of the new trigger.
        public let `type`: TriggerType
        /// A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *). This field is required when the trigger type is SCHEDULED.
        public let schedule: String?
        /// The name of the trigger.
        public let name: String
        /// The actions initiated by this trigger when it fires.
        public let actions: [Action]

        public init(description: String? = nil, startOnCreation: Bool? = nil, predicate: Predicate? = nil, type: TriggerType, schedule: String? = nil, name: String, actions: [Action]) {
            self.description = description
            self.startOnCreation = startOnCreation
            self.predicate = predicate
            self.`type` = `type`
            self.schedule = schedule
            self.name = name
            self.actions = actions
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case startOnCreation = "StartOnCreation"
            case predicate = "Predicate"
            case `type` = "Type"
            case schedule = "Schedule"
            case name = "Name"
            case actions = "Actions"
        }
    }

    public struct GetTableVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableVersion", required: false, type: .structure)
        ]
        /// The requested table version.
        public let tableVersion: TableVersion?

        public init(tableVersion: TableVersion? = nil) {
            self.tableVersion = tableVersion
        }

        private enum CodingKeys: String, CodingKey {
            case tableVersion = "TableVersion"
        }
    }

    public struct CodeGenEdge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Source", required: true, type: .string), 
            AWSShapeMember(label: "Target", required: true, type: .string), 
            AWSShapeMember(label: "TargetParameter", required: false, type: .string)
        ]
        /// The ID of the node at which the edge starts.
        public let source: String
        /// The ID of the node at which the edge ends.
        public let target: String
        /// The target of the edge.
        public let targetParameter: String?

        public init(source: String, target: String, targetParameter: String? = nil) {
            self.source = source
            self.target = target
            self.targetParameter = targetParameter
        }

        private enum CodingKeys: String, CodingKey {
            case source = "Source"
            case target = "Target"
            case targetParameter = "TargetParameter"
        }
    }

    public struct GetTablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "Expression", required: false, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A continuation token, included if this is a continuation call.
        public let nextToken: String?
        /// The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// A regular expression pattern. If present, only those tables whose names match the pattern are returned.
        public let expression: String?
        /// The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The maximum number of tables to return in a single response.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, databaseName: String, expression: String? = nil, catalogId: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.databaseName = databaseName
            self.expression = expression
            self.catalogId = catalogId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case databaseName = "DatabaseName"
            case expression = "Expression"
            case catalogId = "CatalogId"
            case maxResults = "MaxResults"
        }
    }

    public struct CatalogEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The database in which the table metadata resides.
        public let databaseName: String
        /// The name of the table in question.
        public let tableName: String

        public init(databaseName: String, tableName: String) {
            self.databaseName = databaseName
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tableName = "TableName"
        }
    }

    public struct GetJobRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobRun", required: false, type: .structure)
        ]
        /// The requested job-run metadata.
        public let jobRun: JobRun?

        public init(jobRun: JobRun? = nil) {
            self.jobRun = jobRun
        }

        private enum CodingKeys: String, CodingKey {
            case jobRun = "JobRun"
        }
    }

    public struct SkewedInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkewedColumnValueLocationMaps", required: false, type: .map), 
            AWSShapeMember(label: "SkewedColumnValues", required: false, type: .list), 
            AWSShapeMember(label: "SkewedColumnNames", required: false, type: .list)
        ]
        /// A mapping of skewed values to the columns that contain them.
        public let skewedColumnValueLocationMaps: [String: String]?
        /// A list of values that appear so frequently as to be considered skewed.
        public let skewedColumnValues: [String]?
        /// A list of names of columns that contain skewed values.
        public let skewedColumnNames: [String]?

        public init(skewedColumnValueLocationMaps: [String: String]? = nil, skewedColumnValues: [String]? = nil, skewedColumnNames: [String]? = nil) {
            self.skewedColumnValueLocationMaps = skewedColumnValueLocationMaps
            self.skewedColumnValues = skewedColumnValues
            self.skewedColumnNames = skewedColumnNames
        }

        private enum CodingKeys: String, CodingKey {
            case skewedColumnValueLocationMaps = "SkewedColumnValueLocationMaps"
            case skewedColumnValues = "SkewedColumnValues"
            case skewedColumnNames = "SkewedColumnNames"
        }
    }

    public struct GetCrawlersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A continuation token, if this is a continuation request.
        public let nextToken: String?
        /// The number of crawlers to return on each call.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetCatalogImportStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The ID of the catalog to migrate. Currently, this should be the AWS account ID.
        public let catalogId: String?

        public init(catalogId: String? = nil) {
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case catalogId = "CatalogId"
        }
    }

    public struct ImportCatalogToGlueRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The ID of the catalog to import. Currently, this should be the AWS account ID.
        public let catalogId: String?

        public init(catalogId: String? = nil) {
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case catalogId = "CatalogId"
        }
    }

    public struct DeleteJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string)
        ]
        /// The name of the job definition to delete.
        public let jobName: String

        public init(jobName: String) {
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
        }
    }

    public struct Partition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "StorageDescriptor", required: false, type: .structure), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "LastAnalyzedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TableName", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastAccessTime", required: false, type: .timestamp)
        ]
        /// The values of the partition.
        public let values: [String]?
        /// The name of the catalog database where the table in question is located.
        public let databaseName: String?
        /// Provides information about the physical location where the partition is stored.
        public let storageDescriptor: StorageDescriptor?
        /// Partition parameters, in the form of a list of key-value pairs.
        public let parameters: [String: String]?
        /// The last time at which column statistics were computed for this partition.
        public let lastAnalyzedTime: TimeStamp?
        /// The name of the table in question.
        public let tableName: String?
        /// The time at which the partition was created.
        public let creationTime: TimeStamp?
        /// The last time at which the partition was accessed.
        public let lastAccessTime: TimeStamp?

        public init(values: [String]? = nil, databaseName: String? = nil, storageDescriptor: StorageDescriptor? = nil, parameters: [String: String]? = nil, lastAnalyzedTime: TimeStamp? = nil, tableName: String? = nil, creationTime: TimeStamp? = nil, lastAccessTime: TimeStamp? = nil) {
            self.values = values
            self.databaseName = databaseName
            self.storageDescriptor = storageDescriptor
            self.parameters = parameters
            self.lastAnalyzedTime = lastAnalyzedTime
            self.tableName = tableName
            self.creationTime = creationTime
            self.lastAccessTime = lastAccessTime
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case databaseName = "DatabaseName"
            case storageDescriptor = "StorageDescriptor"
            case parameters = "Parameters"
            case lastAnalyzedTime = "LastAnalyzedTime"
            case tableName = "TableName"
            case creationTime = "CreationTime"
            case lastAccessTime = "LastAccessTime"
        }
    }

    public struct BatchDeleteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "TablesToDelete", required: true, type: .list), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the catalog database where the tables to delete reside. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// A list of the table to delete.
        public let tablesToDelete: [String]
        /// The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, tablesToDelete: [String], catalogId: String? = nil) {
            self.databaseName = databaseName
            self.tablesToDelete = tablesToDelete
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tablesToDelete = "TablesToDelete"
            case catalogId = "CatalogId"
        }
    }

    public struct PartitionError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorDetail", required: false, type: .structure), 
            AWSShapeMember(label: "PartitionValues", required: false, type: .list)
        ]
        /// Details about the partition error.
        public let errorDetail: ErrorDetail?
        /// The values that define the partition.
        public let partitionValues: [String]?

        public init(errorDetail: ErrorDetail? = nil, partitionValues: [String]? = nil) {
            self.errorDetail = errorDetail
            self.partitionValues = partitionValues
        }

        private enum CodingKeys: String, CodingKey {
            case errorDetail = "ErrorDetail"
            case partitionValues = "PartitionValues"
        }
    }

    public struct BatchStopJobRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobRunIds", required: true, type: .list), 
            AWSShapeMember(label: "JobName", required: true, type: .string)
        ]
        /// A list of the JobRunIds that should be stopped for that job definition.
        public let jobRunIds: [String]
        /// The name of the job definition for which to stop job runs.
        public let jobName: String

        public init(jobRunIds: [String], jobName: String) {
            self.jobRunIds = jobRunIds
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobRunIds = "JobRunIds"
            case jobName = "JobName"
        }
    }

    public struct XMLClassifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "LastUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Classification", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RowTag", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .long)
        ]
        /// The name of the classifier.
        public let name: String
        /// The time this classifier was last updated.
        public let lastUpdated: TimeStamp?
        /// An identifier of the data format that the classifier matches.
        public let classification: String
        /// The time this classifier was registered.
        public let creationTime: TimeStamp?
        /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by /&gt;). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, &lt;row item_a="A" item_b="B"&gt;&lt;/row&gt; is okay, but &lt;row item_a="A" item_b="B" /&gt; is not).
        public let rowTag: String?
        /// The version of this classifier.
        public let version: Int64?

        public init(name: String, lastUpdated: TimeStamp? = nil, classification: String, creationTime: TimeStamp? = nil, rowTag: String? = nil, version: Int64? = nil) {
            self.name = name
            self.lastUpdated = lastUpdated
            self.classification = classification
            self.creationTime = creationTime
            self.rowTag = rowTag
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case lastUpdated = "LastUpdated"
            case classification = "Classification"
            case creationTime = "CreationTime"
            case rowTag = "RowTag"
            case version = "Version"
        }
    }

    public struct PartitionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastAnalyzedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "StorageDescriptor", required: false, type: .structure), 
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "LastAccessTime", required: false, type: .timestamp)
        ]
        /// The last time at which column statistics were computed for this partition.
        public let lastAnalyzedTime: TimeStamp?
        /// Partition parameters, in the form of a list of key-value pairs.
        public let parameters: [String: String]?
        /// Provides information about the physical location where the partition is stored.
        public let storageDescriptor: StorageDescriptor?
        /// The values of the partition.
        public let values: [String]?
        /// The last time at which the partition was accessed.
        public let lastAccessTime: TimeStamp?

        public init(lastAnalyzedTime: TimeStamp? = nil, parameters: [String: String]? = nil, storageDescriptor: StorageDescriptor? = nil, values: [String]? = nil, lastAccessTime: TimeStamp? = nil) {
            self.lastAnalyzedTime = lastAnalyzedTime
            self.parameters = parameters
            self.storageDescriptor = storageDescriptor
            self.values = values
            self.lastAccessTime = lastAccessTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastAnalyzedTime = "LastAnalyzedTime"
            case parameters = "Parameters"
            case storageDescriptor = "StorageDescriptor"
            case values = "Values"
            case lastAccessTime = "LastAccessTime"
        }
    }

    public struct ResourceUri: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Uri", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum)
        ]
        /// The URI for accessing the resource.
        public let uri: String?
        /// The type of the resource.
        public let resourceType: ResourceType?

        public init(uri: String? = nil, resourceType: ResourceType? = nil) {
            self.uri = uri
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case uri = "Uri"
            case resourceType = "ResourceType"
        }
    }

    public struct ConnectionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connections", required: false, type: .list)
        ]
        /// A list of connections used by the job.
        public let connections: [String]?

        public init(connections: [String]? = nil) {
            self.connections = connections
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "Connections"
        }
    }

    public struct DeleteTableVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: true, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The ID of the table version to be deleted.
        public let versionId: String
        /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table. For Hive compatibility, this name is entirely lowercase.
        public let tableName: String

        public init(versionId: String, databaseName: String, catalogId: String? = nil, tableName: String) {
            self.versionId = versionId
            self.databaseName = databaseName
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct StopCrawlerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Name of the crawler to stop.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct GetDevEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointName", required: true, type: .string)
        ]
        /// Name of the DevEndpoint for which to retrieve information.
        public let endpointName: String

        public init(endpointName: String) {
            self.endpointName = endpointName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
        }
    }

    public struct UpdateClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JsonClassifier", required: false, type: .structure), 
            AWSShapeMember(label: "GrokClassifier", required: false, type: .structure), 
            AWSShapeMember(label: "XMLClassifier", required: false, type: .structure)
        ]
        /// A JsonClassifier object with updated fields.
        public let jsonClassifier: UpdateJsonClassifierRequest?
        /// A GrokClassifier object with updated fields.
        public let grokClassifier: UpdateGrokClassifierRequest?
        /// An XMLClassifier object with updated fields.
        public let xMLClassifier: UpdateXMLClassifierRequest?

        public init(jsonClassifier: UpdateJsonClassifierRequest? = nil, grokClassifier: UpdateGrokClassifierRequest? = nil, xMLClassifier: UpdateXMLClassifierRequest? = nil) {
            self.jsonClassifier = jsonClassifier
            self.grokClassifier = grokClassifier
            self.xMLClassifier = xMLClassifier
        }

        private enum CodingKeys: String, CodingKey {
            case jsonClassifier = "JsonClassifier"
            case grokClassifier = "GrokClassifier"
            case xMLClassifier = "XMLClassifier"
        }
    }

    public struct GetDevEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The maximum size of information to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateTriggerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the trigger.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct GetDevEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DevEndpoint", required: false, type: .structure)
        ]
        /// A DevEndpoint definition.
        public let devEndpoint: DevEndpoint?

        public init(devEndpoint: DevEndpoint? = nil) {
            self.devEndpoint = devEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case devEndpoint = "DevEndpoint"
        }
    }

    public struct ExecutionProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxConcurrentRuns", required: false, type: .integer)
        ]
        /// The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
        public let maxConcurrentRuns: Int32?

        public init(maxConcurrentRuns: Int32? = nil) {
            self.maxConcurrentRuns = maxConcurrentRuns
        }

        private enum CodingKeys: String, CodingKey {
            case maxConcurrentRuns = "MaxConcurrentRuns"
        }
    }

    public struct GetTableVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// A continuation token, if this is not the first call.
        public let nextToken: String?
        /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// The maximum number of table versions to return in one response.
        public let maxResults: Int32?
        /// The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table. For Hive compatibility, this name is entirely lowercase.
        public let tableName: String

        public init(nextToken: String? = nil, databaseName: String, maxResults: Int32? = nil, catalogId: String? = nil, tableName: String) {
            self.nextToken = nextToken
            self.databaseName = databaseName
            self.maxResults = maxResults
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case databaseName = "DatabaseName"
            case maxResults = "MaxResults"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct Classifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JsonClassifier", required: false, type: .structure), 
            AWSShapeMember(label: "GrokClassifier", required: false, type: .structure), 
            AWSShapeMember(label: "XMLClassifier", required: false, type: .structure)
        ]
        /// A JsonClassifier object.
        public let jsonClassifier: JsonClassifier?
        /// A GrokClassifier object.
        public let grokClassifier: GrokClassifier?
        /// An XMLClassifier object.
        public let xMLClassifier: XMLClassifier?

        public init(jsonClassifier: JsonClassifier? = nil, grokClassifier: GrokClassifier? = nil, xMLClassifier: XMLClassifier? = nil) {
            self.jsonClassifier = jsonClassifier
            self.grokClassifier = grokClassifier
            self.xMLClassifier = xMLClassifier
        }

        private enum CodingKeys: String, CodingKey {
            case jsonClassifier = "JsonClassifier"
            case grokClassifier = "GrokClassifier"
            case xMLClassifier = "XMLClassifier"
        }
    }

    public struct GetConnectionsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionType", required: false, type: .enum), 
            AWSShapeMember(label: "MatchCriteria", required: false, type: .list)
        ]
        /// The type of connections to return. Currently, only JDBC is supported; SFTP is not supported.
        public let connectionType: ConnectionType?
        /// A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned.
        public let matchCriteria: [String]?

        public init(connectionType: ConnectionType? = nil, matchCriteria: [String]? = nil) {
            self.connectionType = connectionType
            self.matchCriteria = matchCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case connectionType = "ConnectionType"
            case matchCriteria = "MatchCriteria"
        }
    }

    public struct UpdateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string), 
            AWSShapeMember(label: "JobUpdate", required: true, type: .structure)
        ]
        /// Name of the job definition to update.
        public let jobName: String
        /// Specifies the values with which to update the job definition.
        public let jobUpdate: JobUpdate

        public init(jobName: String, jobUpdate: JobUpdate) {
            self.jobName = jobName
            self.jobUpdate = jobUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
            case jobUpdate = "JobUpdate"
        }
    }

    public struct DeleteTableResponse: AWSShape {

    }

    public struct CreateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRetries", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultArguments", required: false, type: .map), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "AllocatedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "ExecutionProperty", required: false, type: .structure), 
            AWSShapeMember(label: "Command", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NotificationProperty", required: false, type: .structure), 
            AWSShapeMember(label: "Connections", required: false, type: .structure)
        ]
        /// The maximum number of times to retry this job if it fails.
        public let maxRetries: Int32?
        /// Description of the job being defined.
        public let description: String?
        /// The job timeout in minutes. The default is 2880 minutes (48 hours).
        public let timeout: Int32?
        /// The default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
        public let defaultArguments: [String: String]?
        /// This field is reserved for future use.
        public let logUri: String?
        /// The name or ARN of the IAM role associated with this job.
        public let role: String
        /// The number of AWS Glue data processing units (DPUs) to allocate to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the AWS Glue pricing page.
        public let allocatedCapacity: Int32?
        /// An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
        public let executionProperty: ExecutionProperty?
        /// The JobCommand that executes this job.
        public let command: JobCommand
        /// The name you assign to this job definition. It must be unique in your account.
        public let name: String
        /// Specifies configuration properties of a job notification.
        public let notificationProperty: NotificationProperty?
        /// The connections used for this job.
        public let connections: ConnectionsList?

        public init(maxRetries: Int32? = nil, description: String? = nil, timeout: Int32? = nil, defaultArguments: [String: String]? = nil, logUri: String? = nil, role: String, allocatedCapacity: Int32? = nil, executionProperty: ExecutionProperty? = nil, command: JobCommand, name: String, notificationProperty: NotificationProperty? = nil, connections: ConnectionsList? = nil) {
            self.maxRetries = maxRetries
            self.description = description
            self.timeout = timeout
            self.defaultArguments = defaultArguments
            self.logUri = logUri
            self.role = role
            self.allocatedCapacity = allocatedCapacity
            self.executionProperty = executionProperty
            self.command = command
            self.name = name
            self.notificationProperty = notificationProperty
            self.connections = connections
        }

        private enum CodingKeys: String, CodingKey {
            case maxRetries = "MaxRetries"
            case description = "Description"
            case timeout = "Timeout"
            case defaultArguments = "DefaultArguments"
            case logUri = "LogUri"
            case role = "Role"
            case allocatedCapacity = "AllocatedCapacity"
            case executionProperty = "ExecutionProperty"
            case command = "Command"
            case name = "Name"
            case notificationProperty = "NotificationProperty"
            case connections = "Connections"
        }
    }

    public struct S3Target: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Exclusions", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler.
        public let exclusions: [String]?
        /// The path to the Amazon S3 target.
        public let path: String?

        public init(exclusions: [String]? = nil, path: String? = nil) {
            self.exclusions = exclusions
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case exclusions = "Exclusions"
            case path = "Path"
        }
    }

    public struct Connection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionType", required: false, type: .enum), 
            AWSShapeMember(label: "PhysicalConnectionRequirements", required: false, type: .structure), 
            AWSShapeMember(label: "LastUpdatedBy", required: false, type: .string), 
            AWSShapeMember(label: "MatchCriteria", required: false, type: .list), 
            AWSShapeMember(label: "LastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ConnectionProperties", required: false, type: .map), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of the connection. Currently, only JDBC is supported; SFTP is not supported.
        public let connectionType: ConnectionType?
        /// A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.
        public let physicalConnectionRequirements: PhysicalConnectionRequirements?
        /// The user, group or role that last updated this connection definition.
        public let lastUpdatedBy: String?
        /// A list of criteria that can be used in selecting this connection.
        public let matchCriteria: [String]?
        /// The last time this connection definition was updated.
        public let lastUpdatedTime: TimeStamp?
        /// A list of key-value pairs used as parameters for this connection.
        public let connectionProperties: [ConnectionPropertyKey: String]?
        /// The time this connection definition was created.
        public let creationTime: TimeStamp?
        /// The name of the connection definition.
        public let name: String?
        /// Description of the connection.
        public let description: String?

        public init(connectionType: ConnectionType? = nil, physicalConnectionRequirements: PhysicalConnectionRequirements? = nil, lastUpdatedBy: String? = nil, matchCriteria: [String]? = nil, lastUpdatedTime: TimeStamp? = nil, connectionProperties: [ConnectionPropertyKey: String]? = nil, creationTime: TimeStamp? = nil, name: String? = nil, description: String? = nil) {
            self.connectionType = connectionType
            self.physicalConnectionRequirements = physicalConnectionRequirements
            self.lastUpdatedBy = lastUpdatedBy
            self.matchCriteria = matchCriteria
            self.lastUpdatedTime = lastUpdatedTime
            self.connectionProperties = connectionProperties
            self.creationTime = creationTime
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case connectionType = "ConnectionType"
            case physicalConnectionRequirements = "PhysicalConnectionRequirements"
            case lastUpdatedBy = "LastUpdatedBy"
            case matchCriteria = "MatchCriteria"
            case lastUpdatedTime = "LastUpdatedTime"
            case connectionProperties = "ConnectionProperties"
            case creationTime = "CreationTime"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct CreateXMLClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RowTag", required: false, type: .string), 
            AWSShapeMember(label: "Classification", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by /&gt;). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, &lt;row item_a="A" item_b="B"&gt;&lt;/row&gt; is okay, but &lt;row item_a="A" item_b="B" /&gt; is not).
        public let rowTag: String?
        /// An identifier of the data format that the classifier matches.
        public let classification: String
        /// The name of the classifier.
        public let name: String

        public init(rowTag: String? = nil, classification: String, name: String) {
            self.rowTag = rowTag
            self.classification = classification
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case rowTag = "RowTag"
            case classification = "Classification"
            case name = "Name"
        }
    }

    public struct GetClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Name of the classifier to retrieve.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct GetClassifiersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional continuation token.
        public let nextToken: String?
        /// Size of the list to return (optional).
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteClassifierResponse: AWSShape {

    }

    public struct DeleteClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Name of the classifier to remove.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StartJobRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arguments", required: false, type: .map), 
            AWSShapeMember(label: "AllocatedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "JobRunId", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: true, type: .string), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "NotificationProperty", required: false, type: .structure)
        ]
        /// The job arguments specifically for this run. They override the equivalent default arguments set for in the job definition itself. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
        public let arguments: [String: String]?
        /// The number of AWS Glue data processing units (DPUs) to allocate to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the AWS Glue pricing page.
        public let allocatedCapacity: Int32?
        /// The ID of a previous JobRun to retry.
        public let jobRunId: String?
        /// The name of the job definition to use.
        public let jobName: String
        /// The job run timeout in minutes. It overrides the timeout value of the job.
        public let timeout: Int32?
        /// Specifies configuration properties of a job run notification.
        public let notificationProperty: NotificationProperty?

        public init(arguments: [String: String]? = nil, allocatedCapacity: Int32? = nil, jobRunId: String? = nil, jobName: String, timeout: Int32? = nil, notificationProperty: NotificationProperty? = nil) {
            self.arguments = arguments
            self.allocatedCapacity = allocatedCapacity
            self.jobRunId = jobRunId
            self.jobName = jobName
            self.timeout = timeout
            self.notificationProperty = notificationProperty
        }

        private enum CodingKeys: String, CodingKey {
            case arguments = "Arguments"
            case allocatedCapacity = "AllocatedCapacity"
            case jobRunId = "JobRunId"
            case jobName = "JobName"
            case timeout = "Timeout"
            case notificationProperty = "NotificationProperty"
        }
    }

    public struct Table: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "StorageDescriptor", required: false, type: .structure), 
            AWSShapeMember(label: "ViewOriginalText", required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedBy", required: false, type: .string), 
            AWSShapeMember(label: "TableType", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LastAccessTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "PartitionKeys", required: false, type: .list), 
            AWSShapeMember(label: "Retention", required: false, type: .integer), 
            AWSShapeMember(label: "ViewExpandedText", required: false, type: .string), 
            AWSShapeMember(label: "LastAnalyzedTime", required: false, type: .timestamp)
        ]
        /// Last time the table was updated.
        public let updateTime: TimeStamp?
        /// Owner of the table.
        public let owner: String?
        /// Name of the table. For Hive compatibility, this must be entirely lowercase.
        public let name: String
        /// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
        public let databaseName: String?
        /// Properties associated with this table, as a list of key-value pairs.
        public let parameters: [String: String]?
        /// A storage descriptor containing information about the physical storage of this table.
        public let storageDescriptor: StorageDescriptor?
        /// If the table is a view, the original text of the view; otherwise null.
        public let viewOriginalText: String?
        /// Time when the table definition was created in the Data Catalog.
        public let createTime: TimeStamp?
        /// Person or entity who created the table.
        public let createdBy: String?
        /// The type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.).
        public let tableType: String?
        /// Description of the table.
        public let description: String?
        /// Last time the table was accessed. This is usually taken from HDFS, and may not be reliable.
        public let lastAccessTime: TimeStamp?
        /// A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
        public let partitionKeys: [Column]?
        /// Retention time for this table.
        public let retention: Int32?
        /// If the table is a view, the expanded text of the view; otherwise null.
        public let viewExpandedText: String?
        /// Last time column statistics were computed for this table.
        public let lastAnalyzedTime: TimeStamp?

        public init(updateTime: TimeStamp? = nil, owner: String? = nil, name: String, databaseName: String? = nil, parameters: [String: String]? = nil, storageDescriptor: StorageDescriptor? = nil, viewOriginalText: String? = nil, createTime: TimeStamp? = nil, createdBy: String? = nil, tableType: String? = nil, description: String? = nil, lastAccessTime: TimeStamp? = nil, partitionKeys: [Column]? = nil, retention: Int32? = nil, viewExpandedText: String? = nil, lastAnalyzedTime: TimeStamp? = nil) {
            self.updateTime = updateTime
            self.owner = owner
            self.name = name
            self.databaseName = databaseName
            self.parameters = parameters
            self.storageDescriptor = storageDescriptor
            self.viewOriginalText = viewOriginalText
            self.createTime = createTime
            self.createdBy = createdBy
            self.tableType = tableType
            self.description = description
            self.lastAccessTime = lastAccessTime
            self.partitionKeys = partitionKeys
            self.retention = retention
            self.viewExpandedText = viewExpandedText
            self.lastAnalyzedTime = lastAnalyzedTime
        }

        private enum CodingKeys: String, CodingKey {
            case updateTime = "UpdateTime"
            case owner = "Owner"
            case name = "Name"
            case databaseName = "DatabaseName"
            case parameters = "Parameters"
            case storageDescriptor = "StorageDescriptor"
            case viewOriginalText = "ViewOriginalText"
            case createTime = "CreateTime"
            case createdBy = "CreatedBy"
            case tableType = "TableType"
            case description = "Description"
            case lastAccessTime = "LastAccessTime"
            case partitionKeys = "PartitionKeys"
            case retention = "Retention"
            case viewExpandedText = "ViewExpandedText"
            case lastAnalyzedTime = "LastAnalyzedTime"
        }
    }

    public struct CodeGenNodeArg: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Param", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// True if the value is used as a parameter.
        public let param: Bool?
        /// The name of the argument or property.
        public let name: String
        /// The value of the argument or property.
        public let value: String

        public init(param: Bool? = nil, name: String, value: String) {
            self.param = param
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case param = "Param"
            case name = "Name"
            case value = "Value"
        }
    }

    public struct BatchDeletePartitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", required: false, type: .list)
        ]
        /// Errors encountered when trying to delete the requested partitions.
        public let errors: [PartitionError]?

        public init(errors: [PartitionError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
        }
    }

    public struct StartJobRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobRunId", required: false, type: .string)
        ]
        /// The ID assigned to this job run.
        public let jobRunId: String?

        public init(jobRunId: String? = nil) {
            self.jobRunId = jobRunId
        }

        private enum CodingKeys: String, CodingKey {
            case jobRunId = "JobRunId"
        }
    }

    public struct BatchStopJobRunError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobRunId", required: false, type: .string), 
            AWSShapeMember(label: "ErrorDetail", required: false, type: .structure), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The JobRunId of the job run in question.
        public let jobRunId: String?
        /// Specifies details about the error that was encountered.
        public let errorDetail: ErrorDetail?
        /// The name of the job definition used in the job run in question.
        public let jobName: String?

        public init(jobRunId: String? = nil, errorDetail: ErrorDetail? = nil, jobName: String? = nil) {
            self.jobRunId = jobRunId
            self.errorDetail = errorDetail
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobRunId = "JobRunId"
            case errorDetail = "ErrorDetail"
            case jobName = "JobName"
        }
    }

    public struct CreateScriptResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PythonScript", required: false, type: .string), 
            AWSShapeMember(label: "ScalaCode", required: false, type: .string)
        ]
        /// The Python script generated from the DAG.
        public let pythonScript: String?
        /// The Scala code generated from the DAG.
        public let scalaCode: String?

        public init(pythonScript: String? = nil, scalaCode: String? = nil) {
            self.pythonScript = pythonScript
            self.scalaCode = scalaCode
        }

        private enum CodingKeys: String, CodingKey {
            case pythonScript = "PythonScript"
            case scalaCode = "ScalaCode"
        }
    }

    public struct GetDatabaseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the database to retrieve. For Hive compatibility, this should be all lowercase.
        public let name: String
        /// The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(name: String, catalogId: String? = nil) {
            self.name = name
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case catalogId = "CatalogId"
        }
    }

    public struct DeleteTableVersionResponse: AWSShape {

    }

    public struct ImportCatalogToGlueResponse: AWSShape {

    }

    public struct LastCrawlInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MessagePrefix", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "LogGroup", required: false, type: .string), 
            AWSShapeMember(label: "LogStream", required: false, type: .string)
        ]
        /// The time at which the crawl started.
        public let startTime: TimeStamp?
        /// Status of the last crawl.
        public let status: LastCrawlStatus?
        /// The prefix for a message about this crawl.
        public let messagePrefix: String?
        /// If an error occurred, the error information about the last crawl.
        public let errorMessage: String?
        /// The log group for the last crawl.
        public let logGroup: String?
        /// The log stream for the last crawl.
        public let logStream: String?

        public init(startTime: TimeStamp? = nil, status: LastCrawlStatus? = nil, messagePrefix: String? = nil, errorMessage: String? = nil, logGroup: String? = nil, logStream: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.messagePrefix = messagePrefix
            self.errorMessage = errorMessage
            self.logGroup = logGroup
            self.logStream = logStream
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case status = "Status"
            case messagePrefix = "MessagePrefix"
            case errorMessage = "ErrorMessage"
            case logGroup = "LogGroup"
            case logStream = "LogStream"
        }
    }

    public struct UserDefinedFunctionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceUris", required: false, type: .list), 
            AWSShapeMember(label: "OwnerType", required: false, type: .enum), 
            AWSShapeMember(label: "OwnerName", required: false, type: .string), 
            AWSShapeMember(label: "ClassName", required: false, type: .string)
        ]
        /// The name of the function.
        public let functionName: String?
        /// The resource URIs for the function.
        public let resourceUris: [ResourceUri]?
        /// The owner type.
        public let ownerType: PrincipalType?
        /// The owner of the function.
        public let ownerName: String?
        /// The Java class that contains the function code.
        public let className: String?

        public init(functionName: String? = nil, resourceUris: [ResourceUri]? = nil, ownerType: PrincipalType? = nil, ownerName: String? = nil, className: String? = nil) {
            self.functionName = functionName
            self.resourceUris = resourceUris
            self.ownerType = ownerType
            self.ownerName = ownerName
            self.className = className
        }

        private enum CodingKeys: String, CodingKey {
            case functionName = "FunctionName"
            case resourceUris = "ResourceUris"
            case ownerType = "OwnerType"
            case ownerName = "OwnerName"
            case className = "ClassName"
        }
    }

    public struct StartTriggerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the trigger to start.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct SchemaChangePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "DeleteBehavior", required: false, type: .enum)
        ]
        /// The update behavior when the crawler finds a changed schema.
        public let updateBehavior: UpdateBehavior?
        /// The deletion behavior when the crawler finds a deleted object.
        public let deleteBehavior: DeleteBehavior?

        public init(updateBehavior: UpdateBehavior? = nil, deleteBehavior: DeleteBehavior? = nil) {
            self.updateBehavior = updateBehavior
            self.deleteBehavior = deleteBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case updateBehavior = "UpdateBehavior"
            case deleteBehavior = "DeleteBehavior"
        }
    }

    public struct GetJobRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "JobName", required: true, type: .string)
        ]
        /// A continuation token, if this is a continuation call.
        public let nextToken: String?
        /// The maximum size of the response.
        public let maxResults: Int32?
        /// The name of the job definition for which to retrieve all job runs.
        public let jobName: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, jobName: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case jobName = "JobName"
        }
    }

    public struct PartitionValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The list of values.
        public let values: [String]

        public init(values: [String]) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public struct GetTableVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TableVersions", required: false, type: .list)
        ]
        /// A continuation token, if the list of available versions does not include the last one.
        public let nextToken: String?
        /// A list of strings identifying available versions of the specified table.
        public let tableVersions: [TableVersion]?

        public init(nextToken: String? = nil, tableVersions: [TableVersion]? = nil) {
            self.nextToken = nextToken
            self.tableVersions = tableVersions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tableVersions = "TableVersions"
        }
    }

    public struct DeleteUserDefinedFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "FunctionName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// The name of the catalog database where the function is located.
        public let databaseName: String
        /// The name of the function definition to be deleted.
        public let functionName: String
        /// The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(databaseName: String, functionName: String, catalogId: String? = nil) {
            self.databaseName = databaseName
            self.functionName = functionName
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case functionName = "FunctionName"
            case catalogId = "CatalogId"
        }
    }

    public struct TableVersionError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorDetail", required: false, type: .structure), 
            AWSShapeMember(label: "TableName", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// Detail about the error.
        public let errorDetail: ErrorDetail?
        /// The name of the table in question.
        public let tableName: String?
        /// The ID value of the version in question.
        public let versionId: String?

        public init(errorDetail: ErrorDetail? = nil, tableName: String? = nil, versionId: String? = nil) {
            self.errorDetail = errorDetail
            self.tableName = tableName
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case errorDetail = "ErrorDetail"
            case tableName = "TableName"
            case versionId = "VersionId"
        }
    }

    public struct Column: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Free-form text comment.
        public let comment: String?
        /// The datatype of data in the Column.
        public let `type`: String?
        /// The name of the Column.
        public let name: String

        public init(comment: String? = nil, type: String? = nil, name: String) {
            self.comment = comment
            self.`type` = `type`
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case `type` = "Type"
            case name = "Name"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case role = "ROLE"
        case group = "GROUP"
        public var description: String { return self.rawValue }
    }

    public struct UpdateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Returns the name of the updated job definition.
        public let jobName: String?

        public init(jobName: String? = nil) {
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
        }
    }

    public struct GetUserDefinedFunctionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserDefinedFunctions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of requested function definitions.
        public let userDefinedFunctions: [UserDefinedFunction]?
        /// A continuation token, if the list of functions returned does not include the last requested function.
        public let nextToken: String?

        public init(userDefinedFunctions: [UserDefinedFunction]? = nil, nextToken: String? = nil) {
            self.userDefinedFunctions = userDefinedFunctions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case userDefinedFunctions = "UserDefinedFunctions"
            case nextToken = "NextToken"
        }
    }

    public struct JsonClassifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "LastUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JsonPath", required: true, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .long)
        ]
        /// The name of the classifier.
        public let name: String
        /// The time this classifier was last updated.
        public let lastUpdated: TimeStamp?
        /// The time this classifier was registered.
        public let creationTime: TimeStamp?
        /// A JsonPath string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in Writing JsonPath Custom Classifiers.
        public let jsonPath: String
        /// The version of this classifier.
        public let version: Int64?

        public init(name: String, lastUpdated: TimeStamp? = nil, creationTime: TimeStamp? = nil, jsonPath: String, version: Int64? = nil) {
            self.name = name
            self.lastUpdated = lastUpdated
            self.creationTime = creationTime
            self.jsonPath = jsonPath
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case lastUpdated = "LastUpdated"
            case creationTime = "CreationTime"
            case jsonPath = "JsonPath"
            case version = "Version"
        }
    }

    public struct Job: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "NotificationProperty", required: false, type: .structure), 
            AWSShapeMember(label: "Command", required: false, type: .structure), 
            AWSShapeMember(label: "ExecutionProperty", required: false, type: .structure), 
            AWSShapeMember(label: "AllocatedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Connections", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DefaultArguments", required: false, type: .map), 
            AWSShapeMember(label: "CreatedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModifiedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxRetries", required: false, type: .integer)
        ]
        /// The name or ARN of the IAM role associated with this job.
        public let role: String?
        /// The name you assign to this job definition.
        public let name: String?
        /// This field is reserved for future use.
        public let logUri: String?
        /// The job timeout in minutes.
        public let timeout: Int32?
        /// Specifies configuration properties of a job notification.
        public let notificationProperty: NotificationProperty?
        /// The JobCommand that executes this job.
        public let command: JobCommand?
        /// An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
        public let executionProperty: ExecutionProperty?
        /// The number of AWS Glue data processing units (DPUs) allocated to runs of this job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the AWS Glue pricing page.
        public let allocatedCapacity: Int32?
        /// The connections used for this job.
        public let connections: ConnectionsList?
        /// Description of the job being defined.
        public let description: String?
        /// The default arguments for this job, specified as name-value pairs. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
        public let defaultArguments: [String: String]?
        /// The time and date that this job definition was created.
        public let createdOn: TimeStamp?
        /// The last point in time when this job definition was modified.
        public let lastModifiedOn: TimeStamp?
        /// The maximum number of times to retry this job after a JobRun fails.
        public let maxRetries: Int32?

        public init(role: String? = nil, name: String? = nil, logUri: String? = nil, timeout: Int32? = nil, notificationProperty: NotificationProperty? = nil, command: JobCommand? = nil, executionProperty: ExecutionProperty? = nil, allocatedCapacity: Int32? = nil, connections: ConnectionsList? = nil, description: String? = nil, defaultArguments: [String: String]? = nil, createdOn: TimeStamp? = nil, lastModifiedOn: TimeStamp? = nil, maxRetries: Int32? = nil) {
            self.role = role
            self.name = name
            self.logUri = logUri
            self.timeout = timeout
            self.notificationProperty = notificationProperty
            self.command = command
            self.executionProperty = executionProperty
            self.allocatedCapacity = allocatedCapacity
            self.connections = connections
            self.description = description
            self.defaultArguments = defaultArguments
            self.createdOn = createdOn
            self.lastModifiedOn = lastModifiedOn
            self.maxRetries = maxRetries
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case name = "Name"
            case logUri = "LogUri"
            case timeout = "Timeout"
            case notificationProperty = "NotificationProperty"
            case command = "Command"
            case executionProperty = "ExecutionProperty"
            case allocatedCapacity = "AllocatedCapacity"
            case connections = "Connections"
            case description = "Description"
            case defaultArguments = "DefaultArguments"
            case createdOn = "CreatedOn"
            case lastModifiedOn = "LastModifiedOn"
            case maxRetries = "MaxRetries"
        }
    }

    public struct TableError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorDetail", required: false, type: .structure), 
            AWSShapeMember(label: "TableName", required: false, type: .string)
        ]
        /// Detail about the error.
        public let errorDetail: ErrorDetail?
        /// Name of the table. For Hive compatibility, this must be entirely lowercase.
        public let tableName: String?

        public init(errorDetail: ErrorDetail? = nil, tableName: String? = nil) {
            self.errorDetail = errorDetail
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case errorDetail = "ErrorDetail"
            case tableName = "TableName"
        }
    }

    public struct GetTableVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// The ID value of the table version to be retrieved.
        public let versionId: String?
        /// The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.
        public let databaseName: String
        /// The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table. For Hive compatibility, this name is entirely lowercase.
        public let tableName: String

        public init(versionId: String? = nil, databaseName: String, catalogId: String? = nil, tableName: String) {
            self.versionId = versionId
            self.databaseName = databaseName
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct Database: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "LocationUri", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The time at which the metadata database was created in the catalog.
        public let createTime: TimeStamp?
        /// Name of the database. For Hive compatibility, this is folded to lowercase when it is stored.
        public let name: String
        /// A list of key-value pairs that define parameters and properties of the database.
        public let parameters: [String: String]?
        /// The location of the database (for example, an HDFS path).
        public let locationUri: String?
        /// Description of the database.
        public let description: String?

        public init(createTime: TimeStamp? = nil, name: String, parameters: [String: String]? = nil, locationUri: String? = nil, description: String? = nil) {
            self.createTime = createTime
            self.name = name
            self.parameters = parameters
            self.locationUri = locationUri
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case name = "Name"
            case parameters = "Parameters"
            case locationUri = "LocationUri"
            case description = "Description"
        }
    }

    public struct GetPartitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Partition", required: false, type: .structure)
        ]
        /// The requested information, in the form of a Partition object.
        public let partition: Partition?

        public init(partition: Partition? = nil) {
            self.partition = partition
        }

        private enum CodingKeys: String, CodingKey {
            case partition = "Partition"
        }
    }

    public struct DeleteDevEndpointResponse: AWSShape {

    }

    public struct GetJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string)
        ]
        /// The name of the job definition to retrieve.
        public let jobName: String

        public init(jobName: String) {
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
        }
    }

    public struct StopTriggerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the trigger to stop.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public enum Language: String, CustomStringConvertible, Codable {
        case python = "PYTHON"
        case scala = "SCALA"
        public var description: String { return self.rawValue }
    }

    public struct DeleteTriggerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the trigger that was deleted.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StorageDescriptor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", required: false, type: .string), 
            AWSShapeMember(label: "SerdeInfo", required: false, type: .structure), 
            AWSShapeMember(label: "SortColumns", required: false, type: .list), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "NumberOfBuckets", required: false, type: .integer), 
            AWSShapeMember(label: "BucketColumns", required: false, type: .list), 
            AWSShapeMember(label: "SkewedInfo", required: false, type: .structure), 
            AWSShapeMember(label: "InputFormat", required: false, type: .string), 
            AWSShapeMember(label: "Compressed", required: false, type: .boolean), 
            AWSShapeMember(label: "Columns", required: false, type: .list), 
            AWSShapeMember(label: "OutputFormat", required: false, type: .string), 
            AWSShapeMember(label: "StoredAsSubDirectories", required: false, type: .boolean)
        ]
        /// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
        public let location: String?
        /// Serialization/deserialization (SerDe) information.
        public let serdeInfo: SerDeInfo?
        /// A list specifying the sort order of each bucket in the table.
        public let sortColumns: [Order]?
        /// User-supplied properties in key-value form.
        public let parameters: [String: String]?
        /// Must be specified if the table contains any dimension columns.
        public let numberOfBuckets: Int32?
        /// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
        public let bucketColumns: [String]?
        /// Information about values that appear very frequently in a column (skewed values).
        public let skewedInfo: SkewedInfo?
        /// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
        public let inputFormat: String?
        /// True if the data in the table is compressed, or False if not.
        public let compressed: Bool?
        /// A list of the Columns in the table.
        public let columns: [Column]?
        /// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
        public let outputFormat: String?
        /// True if the table data is stored in subdirectories, or False if not.
        public let storedAsSubDirectories: Bool?

        public init(location: String? = nil, serdeInfo: SerDeInfo? = nil, sortColumns: [Order]? = nil, parameters: [String: String]? = nil, numberOfBuckets: Int32? = nil, bucketColumns: [String]? = nil, skewedInfo: SkewedInfo? = nil, inputFormat: String? = nil, compressed: Bool? = nil, columns: [Column]? = nil, outputFormat: String? = nil, storedAsSubDirectories: Bool? = nil) {
            self.location = location
            self.serdeInfo = serdeInfo
            self.sortColumns = sortColumns
            self.parameters = parameters
            self.numberOfBuckets = numberOfBuckets
            self.bucketColumns = bucketColumns
            self.skewedInfo = skewedInfo
            self.inputFormat = inputFormat
            self.compressed = compressed
            self.columns = columns
            self.outputFormat = outputFormat
            self.storedAsSubDirectories = storedAsSubDirectories
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
            case serdeInfo = "SerdeInfo"
            case sortColumns = "SortColumns"
            case parameters = "Parameters"
            case numberOfBuckets = "NumberOfBuckets"
            case bucketColumns = "BucketColumns"
            case skewedInfo = "SkewedInfo"
            case inputFormat = "InputFormat"
            case compressed = "Compressed"
            case columns = "Columns"
            case outputFormat = "OutputFormat"
            case storedAsSubDirectories = "StoredAsSubDirectories"
        }
    }

    public struct UpdateDevEndpointResponse: AWSShape {

    }

    public struct DevEndpointCustomLibraries: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExtraPythonLibsS3Path", required: false, type: .string), 
            AWSShapeMember(label: "ExtraJarsS3Path", required: false, type: .string)
        ]
        /// Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma. Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the pandas Python data analysis library, are not yet supported.
        public let extraPythonLibsS3Path: String?
        /// Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint. Please note that only pure Java/Scala libraries can currently be used on a DevEndpoint.
        public let extraJarsS3Path: String?

        public init(extraPythonLibsS3Path: String? = nil, extraJarsS3Path: String? = nil) {
            self.extraPythonLibsS3Path = extraPythonLibsS3Path
            self.extraJarsS3Path = extraJarsS3Path
        }

        private enum CodingKeys: String, CodingKey {
            case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
            case extraJarsS3Path = "ExtraJarsS3Path"
        }
    }

    public struct SerDeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "SerializationLibrary", required: false, type: .string)
        ]
        /// A list of initialization parameters for the SerDe, in key-value form.
        public let parameters: [String: String]?
        /// Name of the SerDe.
        public let name: String?
        /// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
        public let serializationLibrary: String?

        public init(parameters: [String: String]? = nil, name: String? = nil, serializationLibrary: String? = nil) {
            self.parameters = parameters
            self.name = name
            self.serializationLibrary = serializationLibrary
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case name = "Name"
            case serializationLibrary = "SerializationLibrary"
        }
    }

    public struct CatalogImportStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportedBy", required: false, type: .string), 
            AWSShapeMember(label: "ImportCompleted", required: false, type: .boolean), 
            AWSShapeMember(label: "ImportTime", required: false, type: .timestamp)
        ]
        /// The name of the person who initiated the migration.
        public let importedBy: String?
        /// True if the migration has completed, or False otherwise.
        public let importCompleted: Bool?
        /// The time that the migration was started.
        public let importTime: TimeStamp?

        public init(importedBy: String? = nil, importCompleted: Bool? = nil, importTime: TimeStamp? = nil) {
            self.importedBy = importedBy
            self.importCompleted = importCompleted
            self.importTime = importTime
        }

        private enum CodingKeys: String, CodingKey {
            case importedBy = "ImportedBy"
            case importCompleted = "ImportCompleted"
            case importTime = "ImportTime"
        }
    }

    public struct GetClassifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Classifier", required: false, type: .structure)
        ]
        /// The requested classifier.
        public let classifier: Classifier?

        public init(classifier: Classifier? = nil) {
            self.classifier = classifier
        }

        private enum CodingKeys: String, CodingKey {
            case classifier = "Classifier"
        }
    }

    public struct PhysicalConnectionRequirements: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIdList", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string)
        ]
        /// The security group ID list used by the connection.
        public let securityGroupIdList: [String]?
        /// The connection's availability zone. This field is deprecated and has no effect.
        public let availabilityZone: String?
        /// The subnet ID used by the connection.
        public let subnetId: String?

        public init(securityGroupIdList: [String]? = nil, availabilityZone: String? = nil, subnetId: String? = nil) {
            self.securityGroupIdList = securityGroupIdList
            self.availabilityZone = availabilityZone
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIdList = "SecurityGroupIdList"
            case availabilityZone = "AvailabilityZone"
            case subnetId = "SubnetId"
        }
    }

    public struct JobCommand: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ScriptLocation", required: false, type: .string)
        ]
        /// The name of the job command: this must be glueetl.
        public let name: String?
        /// Specifies the S3 path to a script that executes a job (required).
        public let scriptLocation: String?

        public init(name: String? = nil, scriptLocation: String? = nil) {
            self.name = name
            self.scriptLocation = scriptLocation
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case scriptLocation = "ScriptLocation"
        }
    }

    public struct GetMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mapping", required: true, type: .list)
        ]
        /// A list of mappings to the specified targets.
        public let mapping: [MappingEntry]

        public init(mapping: [MappingEntry]) {
            self.mapping = mapping
        }

        private enum CodingKeys: String, CodingKey {
            case mapping = "Mapping"
        }
    }

    public struct ResetJobBookmarkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string)
        ]
        /// The name of the job in question.
        public let jobName: String

        public init(jobName: String) {
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
        }
    }

    public struct UpdateClassifierResponse: AWSShape {

    }

    public struct GetPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mapping", required: true, type: .list), 
            AWSShapeMember(label: "Source", required: true, type: .structure), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Language", required: false, type: .enum), 
            AWSShapeMember(label: "Sinks", required: false, type: .list)
        ]
        /// The list of mappings from a source table to target tables.
        public let mapping: [MappingEntry]
        /// The source table.
        public let source: CatalogEntry
        /// Parameters for the mapping.
        public let location: Location?
        /// The programming language of the code to perform the mapping.
        public let language: Language?
        /// The target tables.
        public let sinks: [CatalogEntry]?

        public init(mapping: [MappingEntry], source: CatalogEntry, location: Location? = nil, language: Language? = nil, sinks: [CatalogEntry]? = nil) {
            self.mapping = mapping
            self.source = source
            self.location = location
            self.language = language
            self.sinks = sinks
        }

        private enum CodingKeys: String, CodingKey {
            case mapping = "Mapping"
            case source = "Source"
            case location = "Location"
            case language = "Language"
            case sinks = "Sinks"
        }
    }

    public struct UpdatePartitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartitionValueList", required: true, type: .list), 
            AWSShapeMember(label: "DatabaseName", required: true, type: .string), 
            AWSShapeMember(label: "PartitionInput", required: true, type: .structure), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// A list of the values defining the partition.
        public let partitionValueList: [String]
        /// The name of the catalog database in which the table in question resides.
        public let databaseName: String
        /// The new partition object to which to update the partition.
        public let partitionInput: PartitionInput
        /// The ID of the Data Catalog where the partition to be updated resides. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?
        /// The name of the table where the partition to be updated is located.
        public let tableName: String

        public init(partitionValueList: [String], databaseName: String, partitionInput: PartitionInput, catalogId: String? = nil, tableName: String) {
            self.partitionValueList = partitionValueList
            self.databaseName = databaseName
            self.partitionInput = partitionInput
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case partitionValueList = "PartitionValueList"
            case databaseName = "DatabaseName"
            case partitionInput = "PartitionInput"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct StopCrawlerScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CrawlerName", required: true, type: .string)
        ]
        /// Name of the crawler whose schedule state to set.
        public let crawlerName: String

        public init(crawlerName: String) {
            self.crawlerName = crawlerName
        }

        private enum CodingKeys: String, CodingKey {
            case crawlerName = "CrawlerName"
        }
    }

    public struct JobRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PredecessorRuns", required: false, type: .list), 
            AWSShapeMember(label: "JobRunState", required: false, type: .enum), 
            AWSShapeMember(label: "CompletedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "Arguments", required: false, type: .map), 
            AWSShapeMember(label: "StartedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "TriggerName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationProperty", required: false, type: .structure), 
            AWSShapeMember(label: "AllocatedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "PreviousRunId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "Attempt", required: false, type: .integer), 
            AWSShapeMember(label: "ExecutionTime", required: false, type: .integer)
        ]
        /// A list of predecessors to this job run.
        public let predecessorRuns: [Predecessor]?
        /// The current state of the job run.
        public let jobRunState: JobRunState?
        /// The date and time this job run completed.
        public let completedOn: TimeStamp?
        /// The job arguments associated with this run. These override equivalent default arguments set for the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own job arguments, see the Calling AWS Glue APIs in Python topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the Special Parameters Used by AWS Glue topic in the developer guide.
        public let arguments: [String: String]?
        /// The date and time at which this job run was started.
        public let startedOn: TimeStamp?
        /// The name of the job definition being used in this run.
        public let jobName: String?
        /// The job run timeout in minutes.
        public let timeout: Int32?
        /// The name of the trigger that started this job run.
        public let triggerName: String?
        /// Specifies configuration properties of a job run notification.
        public let notificationProperty: NotificationProperty?
        /// The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the AWS Glue pricing page.
        public let allocatedCapacity: Int32?
        /// The ID of this job run.
        public let id: String?
        /// The ID of the previous run of this job. For example, the JobRunId specified in the StartJobRun action.
        public let previousRunId: String?
        /// The last time this job run was modified.
        public let lastModifiedOn: TimeStamp?
        /// An error message associated with this job run.
        public let errorMessage: String?
        /// The number of the attempt to run this job.
        public let attempt: Int32?
        /// The amount of time (in seconds) that the job run consumed resources.
        public let executionTime: Int32?

        public init(predecessorRuns: [Predecessor]? = nil, jobRunState: JobRunState? = nil, completedOn: TimeStamp? = nil, arguments: [String: String]? = nil, startedOn: TimeStamp? = nil, jobName: String? = nil, timeout: Int32? = nil, triggerName: String? = nil, notificationProperty: NotificationProperty? = nil, allocatedCapacity: Int32? = nil, id: String? = nil, previousRunId: String? = nil, lastModifiedOn: TimeStamp? = nil, errorMessage: String? = nil, attempt: Int32? = nil, executionTime: Int32? = nil) {
            self.predecessorRuns = predecessorRuns
            self.jobRunState = jobRunState
            self.completedOn = completedOn
            self.arguments = arguments
            self.startedOn = startedOn
            self.jobName = jobName
            self.timeout = timeout
            self.triggerName = triggerName
            self.notificationProperty = notificationProperty
            self.allocatedCapacity = allocatedCapacity
            self.id = id
            self.previousRunId = previousRunId
            self.lastModifiedOn = lastModifiedOn
            self.errorMessage = errorMessage
            self.attempt = attempt
            self.executionTime = executionTime
        }

        private enum CodingKeys: String, CodingKey {
            case predecessorRuns = "PredecessorRuns"
            case jobRunState = "JobRunState"
            case completedOn = "CompletedOn"
            case arguments = "Arguments"
            case startedOn = "StartedOn"
            case jobName = "JobName"
            case timeout = "Timeout"
            case triggerName = "TriggerName"
            case notificationProperty = "NotificationProperty"
            case allocatedCapacity = "AllocatedCapacity"
            case id = "Id"
            case previousRunId = "PreviousRunId"
            case lastModifiedOn = "LastModifiedOn"
            case errorMessage = "ErrorMessage"
            case attempt = "Attempt"
            case executionTime = "ExecutionTime"
        }
    }

    public struct GetJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Jobs", required: false, type: .list)
        ]
        /// A continuation token, if not all job definitions have yet been returned.
        public let nextToken: String?
        /// A list of job definitions.
        public let jobs: [Job]?

        public init(nextToken: String? = nil, jobs: [Job]? = nil) {
            self.nextToken = nextToken
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case jobs = "Jobs"
        }
    }

    public struct BatchDeleteConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNameList", required: true, type: .list), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string)
        ]
        /// A list of names of the connections to delete.
        public let connectionNameList: [String]
        /// The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.
        public let catalogId: String?

        public init(connectionNameList: [String], catalogId: String? = nil) {
            self.connectionNameList = connectionNameList
            self.catalogId = catalogId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNameList = "ConnectionNameList"
            case catalogId = "CatalogId"
        }
    }

    public struct GetDataflowGraphRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PythonScript", required: false, type: .string)
        ]
        /// The Python script to transform.
        public let pythonScript: String?

        public init(pythonScript: String? = nil) {
            self.pythonScript = pythonScript
        }

        private enum CodingKeys: String, CodingKey {
            case pythonScript = "PythonScript"
        }
    }

    public enum LogicalOperator: String, CustomStringConvertible, Codable {
        case equals = "EQUALS"
        public var description: String { return self.rawValue }
    }

    public struct CreateGrokClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Classification", required: true, type: .string), 
            AWSShapeMember(label: "GrokPattern", required: true, type: .string), 
            AWSShapeMember(label: "CustomPatterns", required: false, type: .string)
        ]
        /// The name of the new classifier.
        public let name: String
        /// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
        public let classification: String
        /// The grok pattern used by this classifier.
        public let grokPattern: String
        /// Optional custom grok patterns used by this classifier.
        public let customPatterns: String?

        public init(name: String, classification: String, grokPattern: String, customPatterns: String? = nil) {
            self.name = name
            self.classification = classification
            self.grokPattern = grokPattern
            self.customPatterns = customPatterns
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case classification = "Classification"
            case grokPattern = "GrokPattern"
            case customPatterns = "CustomPatterns"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "LogicalOperator", required: false, type: .enum)
        ]
        /// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.
        public let state: JobRunState?
        /// The name of the Job to whose JobRuns this condition applies and on which this trigger waits.
        public let jobName: String?
        /// A logical operator.
        public let logicalOperator: LogicalOperator?

        public init(state: JobRunState? = nil, jobName: String? = nil, logicalOperator: LogicalOperator? = nil) {
            self.state = state
            self.jobName = jobName
            self.logicalOperator = logicalOperator
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case jobName = "JobName"
            case logicalOperator = "LogicalOperator"
        }
    }

}