// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Ds {

    public struct EnableRadiusResult: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteDirectoryResult: Serializable, Initializable {
        /// The directory identifier.
        var directoryId: String? = nil

        public init() {}

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

    }

    public struct DeleteTrustRequest: Serializable, Initializable {
        /// Delete a conditional forwarder as part of a DeleteTrustRequest.
        var deleteAssociatedConditionalForwarder: Bool? = nil
        /// The Trust ID of the trust relationship to be deleted.
        var trustId: String = ""

        public init() {}

        public init(deleteAssociatedConditionalForwarder: Bool? = nil, trustId: String) {
            self.deleteAssociatedConditionalForwarder = deleteAssociatedConditionalForwarder
            self.trustId = trustId
        }

    }

    public struct DescribeTrustsRequest: Serializable, Initializable {
        /// A list of identifiers of the trust relationships for which to obtain the information. If this member is null, all trust relationships that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        var trustIds: [String]? = nil
        /// The maximum number of objects to return.
        var limit: Int32? = nil
        /// The DescribeTrustsResult.NextToken value from a previous call to DescribeTrusts. Pass null if this is the first call.
        var nextToken: String? = nil
        /// The Directory ID of the AWS directory that is a part of the requested trust relationship.
        var directoryId: String? = nil

        public init() {}

        public init(trustIds: [String]? = nil, limit: Int32? = nil, nextToken: String? = nil, directoryId: String? = nil) {
            self.trustIds = trustIds
            self.limit = limit
            self.nextToken = nextToken
            self.directoryId = directoryId
        }

    }

    public struct CreateTrustResult: Serializable, Initializable {
        /// A unique identifier for the trust relationship that was created.
        var trustId: String? = nil

        public init() {}

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

    }

    public struct RemoveIpRoutesRequest: Serializable, Initializable {
        /// Identifier (ID) of the directory from which you want to remove the IP addresses.
        var directoryId: String = ""
        /// IP address blocks that you want to remove.
        var cidrIps: [String] = []

        public init() {}

        public init(directoryId: String, cidrIps: [String]) {
            self.directoryId = directoryId
            self.cidrIps = cidrIps
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The optional value of the tag. The string value can be Unicode characters. The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        var value: String = ""
        /// Required name of the tag. The string value can be Unicode characters and cannot be prefixed with "aws:". The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct CreateConditionalForwarderResult: Serializable, Initializable {

        public init() {}

    }

    public struct Computer: Serializable, Initializable {
        /// The identifier of the computer.
        var computerId: String? = nil
        /// The computer name.
        var computerName: String? = nil
        /// An array of Attribute objects containing the LDAP attributes that belong to the computer account.
        var computerAttributes: [Attribute]? = nil

        public init() {}

        public init(computerId: String? = nil, computerName: String? = nil, computerAttributes: [Attribute]? = nil) {
            self.computerId = computerId
            self.computerName = computerName
            self.computerAttributes = computerAttributes
        }

    }

    public struct Attribute: Serializable, Initializable {
        /// The value of the attribute.
        var value: String? = nil
        /// The name of the attribute.
        var name: String? = nil

        public init() {}

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

    }

    public struct CreateAliasRequest: Serializable, Initializable {
        /// The requested alias. The alias must be unique amongst all aliases in AWS. This operation throws an EntityAlreadyExistsException error if the alias already exists.
        var alias: String = ""
        /// The identifier of the directory for which to create the alias.
        var directoryId: String = ""

        public init() {}

        public init(alias: String, directoryId: String) {
            self.alias = alias
            self.directoryId = directoryId
        }

    }

    public struct DirectoryConnectSettingsDescription: Serializable, Initializable {
        /// A list of subnet identifiers in the VPC that the AD connector is in.
        var subnetIds: [String]? = nil
        /// The security group identifier for the AD Connector directory.
        var securityGroupId: String? = nil
        /// A list of the Availability Zones that the directory is in.
        var availabilityZones: [String]? = nil
        /// The identifier of the VPC that the AD Connector is in.
        var vpcId: String? = nil
        /// The username of the service account in the on-premises directory.
        var customerUserName: String? = nil
        /// The IP addresses of the AD Connector servers.
        var connectIps: [String]? = nil

        public init() {}

        public init(subnetIds: [String]? = nil, securityGroupId: String? = nil, availabilityZones: [String]? = nil, vpcId: String? = nil, customerUserName: String? = nil, connectIps: [String]? = nil) {
            self.subnetIds = subnetIds
            self.securityGroupId = securityGroupId
            self.availabilityZones = availabilityZones
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.connectIps = connectIps
        }

    }

    public struct DescribeSnapshotsResult: Serializable, Initializable {
        /// If not null, more results are available. Pass this value in the NextToken member of a subsequent call to DescribeSnapshots.
        var nextToken: String? = nil
        /// The list of Snapshot objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        var snapshots: [Snapshot]? = nil

        public init() {}

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

    }

    public struct AddTagsToResourceRequest: Serializable, Initializable {
        /// Identifier (ID) for the directory to which to add the tag.
        var resourceId: String = ""
        /// The tags to be assigned to the directory.
        var tags: [Tag] = []

        public init() {}

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

    }

    public struct DeleteDirectoryRequest: Serializable, Initializable {
        /// The identifier of the directory to delete.
        var directoryId: String = ""

        public init() {}

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

    }

    public struct IpRoute: Serializable, Initializable {
        /// IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your on-premises domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.
        var cidrIp: String? = nil
        /// Description of the address block.
        var description: String? = nil

        public init() {}

        public init(cidrIp: String? = nil, description: String? = nil) {
            self.cidrIp = cidrIp
            self.description = description
        }

    }

    public struct DirectoryDescription: Serializable, Initializable {
        /// The short name of the directory.
        var shortName: String? = nil
        /// Specifies when the directory was created.
        var launchTime: Date? = nil
        /// The current stage of the directory.
        var stage: String? = nil
        /// The directory identifier.
        var directoryId: String? = nil
        /// The date and time that the stage was last updated.
        var stageLastUpdatedDateTime: Date? = nil
        /// The textual description for the directory.
        var description: String? = nil
        /// A DirectoryVpcSettingsDescription object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed AD directory.
        var vpcSettings: DirectoryVpcSettingsDescription? = nil
        /// Indicates if single-sign on is enabled for the directory. For more information, see EnableSso and DisableSso.
        var ssoEnabled: Bool? = nil
        /// A RadiusSettings object that contains information about the RADIUS server configured for this directory.
        var radiusSettings: RadiusSettings? = nil
        /// Additional information about the directory stage.
        var stageReason: String? = nil
        /// The fully-qualified name of the directory.
        var name: String? = nil
        /// The access URL for the directory, such as http://&lt;alias&gt;.awsapps.com. If no alias has been created for the directory, &lt;alias&gt; is the directory identifier, such as d-XXXXXXXXXX.
        var accessUrl: String? = nil
        /// The directory size.
        var size: String? = nil
        /// The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as d-XXXXXXXXXX.
        var alias: String? = nil
        /// The status of the RADIUS MFA server connection.
        var radiusStatus: String? = nil
        /// The directory size.
        var type: String? = nil
        /// A DirectoryConnectSettingsDescription object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.
        var connectSettings: DirectoryConnectSettingsDescription? = nil
        /// The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in the on-premises directory to which the AD Connector is connected.
        var dnsIpAddrs: [String]? = nil

        public init() {}

        public init(shortName: String? = nil, launchTime: Date? = nil, stage: String? = nil, directoryId: String? = nil, stageLastUpdatedDateTime: Date? = nil, description: String? = nil, vpcSettings: DirectoryVpcSettingsDescription? = nil, ssoEnabled: Bool? = nil, radiusSettings: RadiusSettings? = nil, stageReason: String? = nil, name: String? = nil, accessUrl: String? = nil, size: String? = nil, alias: String? = nil, radiusStatus: String? = nil, type: String? = nil, connectSettings: DirectoryConnectSettingsDescription? = nil, dnsIpAddrs: [String]? = nil) {
            self.shortName = shortName
            self.launchTime = launchTime
            self.stage = stage
            self.directoryId = directoryId
            self.stageLastUpdatedDateTime = stageLastUpdatedDateTime
            self.description = description
            self.vpcSettings = vpcSettings
            self.ssoEnabled = ssoEnabled
            self.radiusSettings = radiusSettings
            self.stageReason = stageReason
            self.name = name
            self.accessUrl = accessUrl
            self.size = size
            self.alias = alias
            self.radiusStatus = radiusStatus
            self.type = type
            self.connectSettings = connectSettings
            self.dnsIpAddrs = dnsIpAddrs
        }

    }

    public struct UpdateConditionalForwarderRequest: Serializable, Initializable {
        /// The directory ID of the AWS directory for which to update the conditional forwarder.
        var directoryId: String = ""
        /// The updated IP addresses of the remote DNS server associated with the conditional forwarder.
        var dnsIpAddrs: [String] = []
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        var remoteDomainName: String = ""

        public init() {}

        public init(directoryId: String, dnsIpAddrs: [String], remoteDomainName: String) {
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.remoteDomainName = remoteDomainName
        }

    }

    public struct Trust: Serializable, Initializable {
        /// The Fully Qualified Domain Name (FQDN) of the external domain involved in the trust relationship.
        var remoteDomainName: String? = nil
        /// The date and time that the trust relationship was last updated.
        var lastUpdatedDateTime: Date? = nil
        /// The trust relationship type.
        var trustType: String? = nil
        /// The reason for the TrustState.
        var trustStateReason: String? = nil
        /// The Directory ID of the AWS directory involved in the trust relationship.
        var directoryId: String? = nil
        /// The trust relationship state.
        var trustState: String? = nil
        /// The date and time that the trust relationship was created.
        var createdDateTime: Date? = nil
        /// The unique ID of the trust relationship.
        var trustId: String? = nil
        /// The date and time that the TrustState was last updated.
        var stateLastUpdatedDateTime: Date? = nil
        /// The trust relationship direction.
        var trustDirection: String? = nil

        public init() {}

        public init(remoteDomainName: String? = nil, lastUpdatedDateTime: Date? = nil, trustType: String? = nil, trustStateReason: String? = nil, directoryId: String? = nil, trustState: String? = nil, createdDateTime: Date? = nil, trustId: String? = nil, stateLastUpdatedDateTime: Date? = nil, trustDirection: String? = nil) {
            self.remoteDomainName = remoteDomainName
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.trustType = trustType
            self.trustStateReason = trustStateReason
            self.directoryId = directoryId
            self.trustState = trustState
            self.createdDateTime = createdDateTime
            self.trustId = trustId
            self.stateLastUpdatedDateTime = stateLastUpdatedDateTime
            self.trustDirection = trustDirection
        }

    }

    public struct ListIpRoutesRequest: Serializable, Initializable {
        /// Identifier (ID) of the directory for which you want to retrieve the IP addresses.
        var directoryId: String = ""
        /// The ListIpRoutes.NextToken value from a previous call to ListIpRoutes. Pass null if this is the first call.
        var nextToken: String? = nil
        /// Maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        var limit: Int32? = nil

        public init() {}

        public init(directoryId: String, nextToken: String? = nil, limit: Int32? = nil) {
            self.directoryId = directoryId
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct RemoveTagsFromResourceResult: Serializable, Initializable {

        public init() {}

    }

    public struct EventTopic: Serializable, Initializable {
        /// The SNS topic ARN (Amazon Resource Name).
        var topicArn: String? = nil
        /// The name of an AWS SNS topic the receives status messages from the directory.
        var topicName: String? = nil
        /// The date and time of when you associated your directory with the SNS topic.
        var createdDateTime: Date? = nil
        /// The topic registration status.
        var status: String? = nil
        /// The Directory ID of an AWS Directory Service directory that will publish status messages to an SNS topic.
        var directoryId: String? = nil

        public init() {}

        public init(topicArn: String? = nil, topicName: String? = nil, createdDateTime: Date? = nil, status: String? = nil, directoryId: String? = nil) {
            self.topicArn = topicArn
            self.topicName = topicName
            self.createdDateTime = createdDateTime
            self.status = status
            self.directoryId = directoryId
        }

    }

    public struct DirectoryVpcSettings: Serializable, Initializable {
        /// The identifier of the VPC in which to create the directory.
        var vpcId: String = ""
        /// The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service creates a directory server and a DNS server in each of these subnets.
        var subnetIds: [String] = []

        public init() {}

        public init(vpcId: String, subnetIds: [String]) {
            self.vpcId = vpcId
            self.subnetIds = subnetIds
        }

    }

    public struct ListTagsForResourceRequest: Serializable, Initializable {
        /// Identifier (ID) of the directory for which you want to retrieve tags.
        var resourceId: String = ""
        /// Reserved for future use.
        var nextToken: String? = nil
        /// Reserved for future use.
        var limit: Int32? = nil

        public init() {}

        public init(resourceId: String, nextToken: String? = nil, limit: Int32? = nil) {
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct DescribeTrustsResult: Serializable, Initializable {
        /// The list of Trust objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        var trusts: [Trust]? = nil
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeTrusts to retrieve the next set of items.
        var nextToken: String? = nil

        public init() {}

        public init(trusts: [Trust]? = nil, nextToken: String? = nil) {
            self.trusts = trusts
            self.nextToken = nextToken
        }

    }

    public struct CreateMicrosoftADRequest: Serializable, Initializable {
        var vpcSettings: DirectoryVpcSettings = DirectoryVpcSettings()
        /// The NetBIOS name for your domain. A short identifier for your domain, such as CORP. If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, CORP for the directory DNS corp.example.com. 
        var shortName: String? = nil
        /// The fully qualified domain name for the directory, such as corp.example.com. This name will resolve inside your VPC only. It does not need to be publicly resolvable.
        var name: String = ""
        /// The password for the default administrative user named Admin.
        var password: String = ""
        /// A textual description for the directory. This label will appear on the AWS console Directory Details page after the directory is created.
        var description: String? = nil

        public init() {}

        public init(vpcSettings: DirectoryVpcSettings, shortName: String? = nil, name: String, password: String, description: String? = nil) {
            self.vpcSettings = vpcSettings
            self.shortName = shortName
            self.name = name
            self.password = password
            self.description = description
        }

    }

    public struct AddTagsToResourceResult: Serializable, Initializable {

        public init() {}

    }

    public struct DirectoryLimits: Serializable, Initializable {
        /// The maximum number of cloud directories allowed in the region.
        var cloudOnlyDirectoriesLimit: Int32? = nil
        /// Indicates if the cloud directory limit has been reached.
        var cloudOnlyDirectoriesLimitReached: Bool? = nil
        /// The current number of connected directories in the region.
        var connectedDirectoriesCurrentCount: Int32? = nil
        /// The current number of cloud directories in the region.
        var cloudOnlyDirectoriesCurrentCount: Int32? = nil
        /// The maximum number of Microsoft AD directories allowed in the region.
        var cloudOnlyMicrosoftADLimit: Int32? = nil
        /// The current number of Microsoft AD directories in the region.
        var cloudOnlyMicrosoftADCurrentCount: Int32? = nil
        /// Indicates if the Microsoft AD directory limit has been reached.
        var cloudOnlyMicrosoftADLimitReached: Bool? = nil
        /// Indicates if the connected directory limit has been reached.
        var connectedDirectoriesLimitReached: Bool? = nil
        /// The maximum number of connected directories allowed in the region.
        var connectedDirectoriesLimit: Int32? = nil

        public init() {}

        public init(cloudOnlyDirectoriesLimit: Int32? = nil, cloudOnlyDirectoriesLimitReached: Bool? = nil, connectedDirectoriesCurrentCount: Int32? = nil, cloudOnlyDirectoriesCurrentCount: Int32? = nil, cloudOnlyMicrosoftADLimit: Int32? = nil, cloudOnlyMicrosoftADCurrentCount: Int32? = nil, cloudOnlyMicrosoftADLimitReached: Bool? = nil, connectedDirectoriesLimitReached: Bool? = nil, connectedDirectoriesLimit: Int32? = nil) {
            self.cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit
            self.cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReached
            self.connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount
            self.cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount
            self.cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit
            self.cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount
            self.cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReached
            self.connectedDirectoriesLimitReached = connectedDirectoriesLimitReached
            self.connectedDirectoriesLimit = connectedDirectoriesLimit
        }

    }

    public struct ListSchemaExtensionsRequest: Serializable, Initializable {
        /// The identifier of the directory from which to retrieve the schema extension information.
        var directoryId: String = ""
        /// The ListSchemaExtensions.NextToken value from a previous call to ListSchemaExtensions. Pass null if this is the first call.
        var nextToken: String? = nil
        /// The maximum number of items to return.
        var limit: Int32? = nil

        public init() {}

        public init(directoryId: String, nextToken: String? = nil, limit: Int32? = nil) {
            self.directoryId = directoryId
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct DeregisterEventTopicRequest: Serializable, Initializable {
        /// The name of the SNS topic from which to remove the directory as a publisher.
        var topicName: String = ""
        /// The Directory ID to remove as a publisher. This directory will no longer send messages to the specified SNS topic.
        var directoryId: String = ""

        public init() {}

        public init(topicName: String, directoryId: String) {
            self.topicName = topicName
            self.directoryId = directoryId
        }

    }

    public struct EnableSsoResult: Serializable, Initializable {

        public init() {}

    }

    public struct GetDirectoryLimitsResult: Serializable, Initializable {
        /// A DirectoryLimits object that contains the directory limits for the current region.
        var directoryLimits: DirectoryLimits? = nil

        public init() {}

        public init(directoryLimits: DirectoryLimits? = nil) {
            self.directoryLimits = directoryLimits
        }

    }

    public struct ConnectDirectoryResult: Serializable, Initializable {
        /// The identifier of the new directory.
        var directoryId: String? = nil

        public init() {}

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

    }

    public struct DescribeConditionalForwardersRequest: Serializable, Initializable {
        /// The fully qualified domain names (FQDN) of the remote domains for which to get the list of associated conditional forwarders. If this member is null, all conditional forwarders are returned.
        var remoteDomainNames: [String]? = nil
        /// The directory ID for which to get the list of associated conditional forwarders.
        var directoryId: String = ""

        public init() {}

        public init(remoteDomainNames: [String]? = nil, directoryId: String) {
            self.remoteDomainNames = remoteDomainNames
            self.directoryId = directoryId
        }

    }

    public struct GetDirectoryLimitsRequest: Serializable, Initializable {

        public init() {}

    }

    public struct EnableSsoRequest: Serializable, Initializable {
        /// The password of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        var password: String? = nil
        /// The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name. If the AD Connector service account does not have privileges to add a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to enable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        var userName: String? = nil
        /// The identifier of the directory for which to enable single-sign on.
        var directoryId: String = ""

        public init() {}

        public init(password: String? = nil, userName: String? = nil, directoryId: String) {
            self.password = password
            self.userName = userName
            self.directoryId = directoryId
        }

    }

    public struct StartSchemaExtensionRequest: Serializable, Initializable {
        /// The identifier of the directory for which the schema extension will be applied to.
        var directoryId: String = ""
        /// If true, creates a snapshot of the directory before applying the schema extension.
        var createSnapshotBeforeSchemaExtension: Bool = false
        /// The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.
        var ldifContent: String = ""
        /// A description of the schema extension.
        var description: String = ""

        public init() {}

        public init(directoryId: String, createSnapshotBeforeSchemaExtension: Bool, ldifContent: String, description: String) {
            self.directoryId = directoryId
            self.createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtension
            self.ldifContent = ldifContent
            self.description = description
        }

    }

    public struct RestoreFromSnapshotResult: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteConditionalForwarderResult: Serializable, Initializable {

        public init() {}

    }

    public struct RemoveIpRoutesResult: Serializable, Initializable {

        public init() {}

    }

    public struct ConditionalForwarder: Serializable, Initializable {
        /// The IP addresses of the remote DNS server associated with RemoteDomainName. This is the IP address of the DNS server that your conditional forwarder points to.
        var dnsIpAddrs: [String]? = nil
        /// The replication scope of the conditional forwarder. The only allowed value is Domain, which will replicate the conditional forwarder to all of the domain controllers for your AWS directory.
        var replicationScope: String? = nil
        /// The fully qualified domain name (FQDN) of the remote domains pointed to by the conditional forwarder.
        var remoteDomainName: String? = nil

        public init() {}

        public init(dnsIpAddrs: [String]? = nil, replicationScope: String? = nil, remoteDomainName: String? = nil) {
            self.dnsIpAddrs = dnsIpAddrs
            self.replicationScope = replicationScope
            self.remoteDomainName = remoteDomainName
        }

    }

    public struct EnableRadiusRequest: Serializable, Initializable {
        /// A RadiusSettings object that contains information about the RADIUS server.
        var radiusSettings: RadiusSettings = RadiusSettings()
        /// The identifier of the directory for which to enable MFA.
        var directoryId: String = ""

        public init() {}

        public init(radiusSettings: RadiusSettings, directoryId: String) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
        }

    }

    public struct CreateSnapshotRequest: Serializable, Initializable {
        /// The descriptive name to apply to the snapshot.
        var name: String? = nil
        /// The identifier of the directory of which to take a snapshot.
        var directoryId: String = ""

        public init() {}

        public init(name: String? = nil, directoryId: String) {
            self.name = name
            self.directoryId = directoryId
        }

    }

    public struct ListTagsForResourceResult: Serializable, Initializable {
        /// Reserved for future use.
        var nextToken: String? = nil
        /// List of tags returned by the ListTagsForResource operation.
        var tags: [Tag]? = nil

        public init() {}

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

    }

    public struct GetSnapshotLimitsResult: Serializable, Initializable {
        /// A SnapshotLimits object that contains the manual snapshot limits for the specified directory.
        var snapshotLimits: SnapshotLimits? = nil

        public init() {}

        public init(snapshotLimits: SnapshotLimits? = nil) {
            self.snapshotLimits = snapshotLimits
        }

    }

    public struct SchemaExtensionInfo: Serializable, Initializable {
        /// The identifier of the schema extension.
        var schemaExtensionId: String? = nil
        /// The reason for the SchemaExtensionStatus.
        var schemaExtensionStatusReason: String? = nil
        /// The date and time that the schema extension was completed.
        var endDateTime: Date? = nil
        /// The identifier of the directory to which the schema extension is applied.
        var directoryId: String? = nil
        /// The date and time that the schema extension started being applied to the directory.
        var startDateTime: Date? = nil
        /// The current status of the schema extension.
        var schemaExtensionStatus: String? = nil
        /// A description of the schema extension.
        var description: String? = nil

        public init() {}

        public init(schemaExtensionId: String? = nil, schemaExtensionStatusReason: String? = nil, endDateTime: Date? = nil, directoryId: String? = nil, startDateTime: Date? = nil, schemaExtensionStatus: String? = nil, description: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
            self.schemaExtensionStatusReason = schemaExtensionStatusReason
            self.endDateTime = endDateTime
            self.directoryId = directoryId
            self.startDateTime = startDateTime
            self.schemaExtensionStatus = schemaExtensionStatus
            self.description = description
        }

    }

    public struct DescribeDirectoriesRequest: Serializable, Initializable {
        /// The maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        var limit: Int32? = nil
        /// The DescribeDirectoriesResult.NextToken value from a previous call to DescribeDirectories. Pass null if this is the first call.
        var nextToken: String? = nil
        /// A list of identifiers of the directories for which to obtain the information. If this member is null, all directories that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        var directoryIds: [String]? = nil

        public init() {}

        public init(limit: Int32? = nil, nextToken: String? = nil, directoryIds: [String]? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.directoryIds = directoryIds
        }

    }

    public struct CreateComputerResult: Serializable, Initializable {
        /// A Computer object that represents the computer account.
        var computer: Computer? = nil

        public init() {}

        public init(computer: Computer? = nil) {
            self.computer = computer
        }

    }

    public struct UpdateRadiusResult: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteConditionalForwarderRequest: Serializable, Initializable {
        /// The directory ID for which you are deleting the conditional forwarder.
        var directoryId: String = ""
        /// The fully qualified domain name (FQDN) of the remote domain with which you are deleting the conditional forwarder.
        var remoteDomainName: String = ""

        public init() {}

        public init(directoryId: String, remoteDomainName: String) {
            self.directoryId = directoryId
            self.remoteDomainName = remoteDomainName
        }

    }

    public struct StartSchemaExtensionResult: Serializable, Initializable {
        /// The identifier of the schema extension that will be applied.
        var schemaExtensionId: String? = nil

        public init() {}

        public init(schemaExtensionId: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
        }

    }

    public struct DescribeConditionalForwardersResult: Serializable, Initializable {
        /// The list of conditional forwarders that have been created.
        var conditionalForwarders: [ConditionalForwarder]? = nil

        public init() {}

        public init(conditionalForwarders: [ConditionalForwarder]? = nil) {
            self.conditionalForwarders = conditionalForwarders
        }

    }

    public struct SnapshotLimits: Serializable, Initializable {
        /// The maximum number of manual snapshots allowed.
        var manualSnapshotsLimit: Int32? = nil
        /// Indicates if the manual snapshot limit has been reached.
        var manualSnapshotsLimitReached: Bool? = nil
        /// The current number of manual snapshots of the directory.
        var manualSnapshotsCurrentCount: Int32? = nil

        public init() {}

        public init(manualSnapshotsLimit: Int32? = nil, manualSnapshotsLimitReached: Bool? = nil, manualSnapshotsCurrentCount: Int32? = nil) {
            self.manualSnapshotsLimit = manualSnapshotsLimit
            self.manualSnapshotsLimitReached = manualSnapshotsLimitReached
            self.manualSnapshotsCurrentCount = manualSnapshotsCurrentCount
        }

    }

    public struct CreateComputerRequest: Serializable, Initializable {
        /// The fully-qualified distinguished name of the organizational unit to place the computer account in.
        var organizationalUnitDistinguishedName: String? = nil
        /// The name of the computer account.
        var computerName: String = ""
        /// An array of Attribute objects that contain any LDAP attributes to apply to the computer account.
        var computerAttributes: [Attribute]? = nil
        /// A one-time password that is used to join the computer to the directory. You should generate a random, strong password to use for this parameter.
        var password: String = ""
        /// The identifier of the directory in which to create the computer account.
        var directoryId: String = ""

        public init() {}

        public init(organizationalUnitDistinguishedName: String? = nil, computerName: String, computerAttributes: [Attribute]? = nil, password: String, directoryId: String) {
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.computerName = computerName
            self.computerAttributes = computerAttributes
            self.password = password
            self.directoryId = directoryId
        }

    }

    public struct DescribeSnapshotsRequest: Serializable, Initializable {
        /// A list of identifiers of the snapshots to obtain the information for. If this member is null or empty, all snapshots are returned using the Limit and NextToken members.
        var snapshotIds: [String]? = nil
        /// The maximum number of objects to return.
        var limit: Int32? = nil
        /// The DescribeSnapshotsResult.NextToken value from a previous call to DescribeSnapshots. Pass null if this is the first call.
        var nextToken: String? = nil
        /// The identifier of the directory for which to retrieve snapshot information.
        var directoryId: String? = nil

        public init() {}

        public init(snapshotIds: [String]? = nil, limit: Int32? = nil, nextToken: String? = nil, directoryId: String? = nil) {
            self.snapshotIds = snapshotIds
            self.limit = limit
            self.nextToken = nextToken
            self.directoryId = directoryId
        }

    }

    public struct DescribeEventTopicsRequest: Serializable, Initializable {
        /// A list of SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned. An empty list results in an InvalidParameterException being thrown.
        var topicNames: [String]? = nil
        /// The Directory ID for which to get the list of associated SNS topics. If this member is null, associations for all Directory IDs are returned.
        var directoryId: String? = nil

        public init() {}

        public init(topicNames: [String]? = nil, directoryId: String? = nil) {
            self.topicNames = topicNames
            self.directoryId = directoryId
        }

    }

    public struct DirectoryVpcSettingsDescription: Serializable, Initializable {
        /// The identifiers of the subnets for the directory servers.
        var subnetIds: [String]? = nil
        /// The list of Availability Zones that the directory is in.
        var availabilityZones: [String]? = nil
        /// The security group identifier for the directory. If the directory was created before 8/1/2014, this is the identifier of the directory members security group that was created when the directory was created. If the directory was created after this date, this value is null.
        var securityGroupId: String? = nil
        /// The identifier of the VPC that the directory is in.
        var vpcId: String? = nil

        public init() {}

        public init(subnetIds: [String]? = nil, availabilityZones: [String]? = nil, securityGroupId: String? = nil, vpcId: String? = nil) {
            self.subnetIds = subnetIds
            self.availabilityZones = availabilityZones
            self.securityGroupId = securityGroupId
            self.vpcId = vpcId
        }

    }

    public struct DeleteTrustResult: Serializable, Initializable {
        /// The Trust ID of the trust relationship that was deleted.
        var trustId: String? = nil

        public init() {}

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

    }

    public struct CreateAliasResult: Serializable, Initializable {
        /// The alias for the directory.
        var alias: String? = nil
        /// The identifier of the directory.
        var directoryId: String? = nil

        public init() {}

        public init(alias: String? = nil, directoryId: String? = nil) {
            self.alias = alias
            self.directoryId = directoryId
        }

    }

    public struct RadiusSettings: Serializable, Initializable {
        /// The port that your RADIUS server is using for communications. Your on-premises network must allow inbound traffic over this port from the AWS Directory Service servers.
        var radiusPort: Int32? = nil
        /// The protocol specified for your RADIUS endpoints.
        var authenticationProtocol: String? = nil
        /// The maximum number of times that communication with the RADIUS server is attempted.
        var radiusRetries: Int32? = nil
        /// The amount of time, in seconds, to wait for the RADIUS server to respond.
        var radiusTimeout: Int32? = nil
        /// Not currently used.
        var useSameUsername: Bool? = nil
        /// Not currently used.
        var sharedSecret: String? = nil
        /// Not currently used.
        var displayLabel: String? = nil
        /// An array of strings that contains the IP addresses of the RADIUS server endpoints, or the IP addresses of your RADIUS server load balancer.
        var radiusServers: [String]? = nil

        public init() {}

        public init(radiusPort: Int32? = nil, authenticationProtocol: String? = nil, radiusRetries: Int32? = nil, radiusTimeout: Int32? = nil, useSameUsername: Bool? = nil, sharedSecret: String? = nil, displayLabel: String? = nil, radiusServers: [String]? = nil) {
            self.radiusPort = radiusPort
            self.authenticationProtocol = authenticationProtocol
            self.radiusRetries = radiusRetries
            self.radiusTimeout = radiusTimeout
            self.useSameUsername = useSameUsername
            self.sharedSecret = sharedSecret
            self.displayLabel = displayLabel
            self.radiusServers = radiusServers
        }

    }

    public struct RegisterEventTopicResult: Serializable, Initializable {

        public init() {}

    }

    public struct Snapshot: Serializable, Initializable {
        /// The snapshot identifier.
        var snapshotId: String? = nil
        /// The snapshot status.
        var status: String? = nil
        /// The date and time that the snapshot was taken.
        var startTime: Date? = nil
        /// The snapshot type.
        var type: String? = nil
        /// The descriptive name of the snapshot.
        var name: String? = nil
        /// The directory identifier.
        var directoryId: String? = nil

        public init() {}

        public init(snapshotId: String? = nil, status: String? = nil, startTime: Date? = nil, type: String? = nil, name: String? = nil, directoryId: String? = nil) {
            self.snapshotId = snapshotId
            self.status = status
            self.startTime = startTime
            self.type = type
            self.name = name
            self.directoryId = directoryId
        }

    }

    public struct RestoreFromSnapshotRequest: Serializable, Initializable {
        /// The identifier of the snapshot to restore from.
        var snapshotId: String = ""

        public init() {}

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

    }

    public struct DeleteSnapshotResult: Serializable, Initializable {
        /// The identifier of the directory snapshot that was deleted.
        var snapshotId: String? = nil

        public init() {}

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

    }

    public struct CreateDirectoryRequest: Serializable, Initializable {
        /// A textual description for the directory.
        var description: String? = nil
        /// A DirectoryVpcSettings object that contains additional information for the operation.
        var vpcSettings: DirectoryVpcSettings? = nil
        /// The short name of the directory, such as CORP.
        var shortName: String? = nil
        /// The fully qualified name for the directory, such as corp.example.com.
        var name: String = ""
        /// The size of the directory.
        var size: String = ""
        /// The password for the directory administrator. The directory creation process creates a directory administrator account with the username Administrator and this password.
        var password: String = ""

        public init() {}

        public init(description: String? = nil, vpcSettings: DirectoryVpcSettings? = nil, shortName: String? = nil, name: String, size: String, password: String) {
            self.description = description
            self.vpcSettings = vpcSettings
            self.shortName = shortName
            self.name = name
            self.size = size
            self.password = password
        }

    }

    public struct UpdateRadiusRequest: Serializable, Initializable {
        /// A RadiusSettings object that contains information about the RADIUS server.
        var radiusSettings: RadiusSettings = RadiusSettings()
        /// The identifier of the directory for which to update the RADIUS server information.
        var directoryId: String = ""

        public init() {}

        public init(radiusSettings: RadiusSettings, directoryId: String) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
        }

    }

    public struct DisableSsoRequest: Serializable, Initializable {
        /// The password of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        var password: String? = nil
        /// The username of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. This account must have privileges to remove a service principal name. If the AD Connector service account does not have privileges to remove a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to disable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        var userName: String? = nil
        /// The identifier of the directory for which to disable single-sign on.
        var directoryId: String = ""

        public init() {}

        public init(password: String? = nil, userName: String? = nil, directoryId: String) {
            self.password = password
            self.userName = userName
            self.directoryId = directoryId
        }

    }

    public struct DeleteSnapshotRequest: Serializable, Initializable {
        /// The identifier of the directory snapshot to be deleted.
        var snapshotId: String = ""

        public init() {}

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

    }

    public struct CreateTrustRequest: Serializable, Initializable {
        /// The Directory ID of the Microsoft AD in the AWS cloud for which to establish the trust relationship.
        var directoryId: String = ""
        /// The direction of the trust relationship.
        var trustDirection: String = ""
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        var conditionalForwarderIpAddrs: [String]? = nil
        /// The trust relationship type.
        var trustType: String? = nil
        /// The trust password. The must be the same password that was used when creating the trust relationship on the external domain.
        var trustPassword: String = ""
        /// The Fully Qualified Domain Name (FQDN) of the external domain for which to create the trust relationship.
        var remoteDomainName: String = ""

        public init() {}

        public init(directoryId: String, trustDirection: String, conditionalForwarderIpAddrs: [String]? = nil, trustType: String? = nil, trustPassword: String, remoteDomainName: String) {
            self.directoryId = directoryId
            self.trustDirection = trustDirection
            self.conditionalForwarderIpAddrs = conditionalForwarderIpAddrs
            self.trustType = trustType
            self.trustPassword = trustPassword
            self.remoteDomainName = remoteDomainName
        }

    }

    public struct VerifyTrustRequest: Serializable, Initializable {
        /// The unique Trust ID of the trust relationship to verify.
        var trustId: String = ""

        public init() {}

        public init(trustId: String) {
            self.trustId = trustId
        }

    }

    public struct RegisterEventTopicRequest: Serializable, Initializable {
        /// The SNS topic name to which the directory will publish status messages. This SNS topic must be in the same region as the specified Directory ID.
        var topicName: String = ""
        /// The Directory ID that will publish status messages to the SNS topic.
        var directoryId: String = ""

        public init() {}

        public init(topicName: String, directoryId: String) {
            self.topicName = topicName
            self.directoryId = directoryId
        }

    }

    public struct CreateSnapshotResult: Serializable, Initializable {
        /// The identifier of the snapshot that was created.
        var snapshotId: String? = nil

        public init() {}

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

    }

    public struct AddIpRoutesRequest: Serializable, Initializable {
        /// If set to true, updates the inbound and outbound rules of the security group that has the description: "AWS created security group for directory ID directory controllers." Following are the new rules:  Inbound:   Type: Custom UDP Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 123, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 138, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 389, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 464, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 88, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 135, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 464, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 636, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0   Type: DNS (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0   Type: DNS (TCP), Protocol: TCP, Range: 53, Source: 0.0.0.0/0   Type: LDAP, Protocol: TCP, Range: 389, Source: 0.0.0.0/0   Type: All ICMP, Protocol: All, Range: N/A, Source: 0.0.0.0/0    Outbound:   Type: All traffic, Protocol: All, Range: All, Destination: 0.0.0.0/0   These security rules impact an internal network interface that is not exposed publicly.
        var updateSecurityGroupForDirectoryControllers: Bool? = nil
        /// Identifier (ID) of the directory to which to add the address block.
        var directoryId: String = ""
        /// IP address blocks, using CIDR format, of the traffic to route. This is often the IP address block of the DNS server used for your on-premises domain.
        var ipRoutes: [IpRoute] = []

        public init() {}

        public init(updateSecurityGroupForDirectoryControllers: Bool? = nil, directoryId: String, ipRoutes: [IpRoute]) {
            self.updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllers
            self.directoryId = directoryId
            self.ipRoutes = ipRoutes
        }

    }

    public struct RemoveTagsFromResourceRequest: Serializable, Initializable {
        /// Identifier (ID) of the directory from which to remove the tag.
        var resourceId: String = ""
        /// The tag key (name) of the tag to be removed.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

    }

    public struct AddIpRoutesResult: Serializable, Initializable {

        public init() {}

    }

    public struct CancelSchemaExtensionRequest: Serializable, Initializable {
        /// The identifier of the schema extension that will be canceled.
        var schemaExtensionId: String = ""
        /// The identifier of the directory whose schema extension will be canceled.
        var directoryId: String = ""

        public init() {}

        public init(schemaExtensionId: String, directoryId: String) {
            self.schemaExtensionId = schemaExtensionId
            self.directoryId = directoryId
        }

    }

    public struct DescribeDirectoriesResult: Serializable, Initializable {
        /// The list of DirectoryDescription objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        var directoryDescriptions: [DirectoryDescription]? = nil
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeDirectories to retrieve the next set of items.
        var nextToken: String? = nil

        public init() {}

        public init(directoryDescriptions: [DirectoryDescription]? = nil, nextToken: String? = nil) {
            self.directoryDescriptions = directoryDescriptions
            self.nextToken = nextToken
        }

    }

    public struct CreateMicrosoftADResult: Serializable, Initializable {
        /// The identifier of the directory that was created.
        var directoryId: String? = nil

        public init() {}

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

    }

    public struct GetSnapshotLimitsRequest: Serializable, Initializable {
        /// Contains the identifier of the directory to obtain the limits for.
        var directoryId: String = ""

        public init() {}

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

    }

    public struct DisableRadiusResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListSchemaExtensionsResult: Serializable, Initializable {
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListSchemaExtensions to retrieve the next set of items.
        var nextToken: String? = nil
        /// Information about the schema extensions applied to the directory.
        var schemaExtensionsInfo: [SchemaExtensionInfo]? = nil

        public init() {}

        public init(nextToken: String? = nil, schemaExtensionsInfo: [SchemaExtensionInfo]? = nil) {
            self.nextToken = nextToken
            self.schemaExtensionsInfo = schemaExtensionsInfo
        }

    }

    public struct DeregisterEventTopicResult: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeEventTopicsResult: Serializable, Initializable {
        /// A list of SNS topic names that receive status messages from the specified Directory ID.
        var eventTopics: [EventTopic]? = nil

        public init() {}

        public init(eventTopics: [EventTopic]? = nil) {
            self.eventTopics = eventTopics
        }

    }

    public struct IpRouteInfo: Serializable, Initializable {
        /// Description of the IpRouteInfo.
        var description: String? = nil
        /// The status of the IP address block.
        var ipRouteStatusMsg: String? = nil
        /// The date and time the address block was added to the directory.
        var addedDateTime: Date? = nil
        /// IP address block in the IpRoute.
        var cidrIp: String? = nil
        /// The reason for the IpRouteStatusMsg.
        var ipRouteStatusReason: String? = nil
        /// Identifier (ID) of the directory associated with the IP addresses.
        var directoryId: String? = nil

        public init() {}

        public init(description: String? = nil, ipRouteStatusMsg: String? = nil, addedDateTime: Date? = nil, cidrIp: String? = nil, ipRouteStatusReason: String? = nil, directoryId: String? = nil) {
            self.description = description
            self.ipRouteStatusMsg = ipRouteStatusMsg
            self.addedDateTime = addedDateTime
            self.cidrIp = cidrIp
            self.ipRouteStatusReason = ipRouteStatusReason
            self.directoryId = directoryId
        }

    }

    public struct ConnectDirectoryRequest: Serializable, Initializable {
        /// The password for the on-premises user account.
        var password: String = ""
        /// A textual description for the directory.
        var description: String? = nil
        /// The NetBIOS name of the on-premises directory, such as CORP.
        var shortName: String? = nil
        /// A DirectoryConnectSettings object that contains additional information for the operation.
        var connectSettings: DirectoryConnectSettings = DirectoryConnectSettings()
        /// The size of the directory.
        var size: String = ""
        /// The fully-qualified name of the on-premises directory, such as corp.example.com.
        var name: String = ""

        public init() {}

        public init(password: String, description: String? = nil, shortName: String? = nil, connectSettings: DirectoryConnectSettings, size: String, name: String) {
            self.password = password
            self.description = description
            self.shortName = shortName
            self.connectSettings = connectSettings
            self.size = size
            self.name = name
        }

    }

    public struct VerifyTrustResult: Serializable, Initializable {
        /// The unique Trust ID of the trust relationship that was verified.
        var trustId: String? = nil

        public init() {}

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

    }

    public struct DisableSsoResult: Serializable, Initializable {

        public init() {}

    }

    public struct CreateConditionalForwarderRequest: Serializable, Initializable {
        /// The directory ID of the AWS directory for which you are creating the conditional forwarder.
        var directoryId: String = ""
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        var dnsIpAddrs: [String] = []
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        var remoteDomainName: String = ""

        public init() {}

        public init(directoryId: String, dnsIpAddrs: [String], remoteDomainName: String) {
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.remoteDomainName = remoteDomainName
        }

    }

    public struct CancelSchemaExtensionResult: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateConditionalForwarderResult: Serializable, Initializable {

        public init() {}

    }

    public struct DisableRadiusRequest: Serializable, Initializable {
        /// The identifier of the directory for which to disable MFA.
        var directoryId: String = ""

        public init() {}

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

    }

    public struct CreateDirectoryResult: Serializable, Initializable {
        /// The identifier of the directory that was created.
        var directoryId: String? = nil

        public init() {}

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

    }

    public struct ListIpRoutesResult: Serializable, Initializable {
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListIpRoutes to retrieve the next set of items.
        var nextToken: String? = nil
        /// A list of IpRoutes.
        var ipRoutesInfo: [IpRouteInfo]? = nil

        public init() {}

        public init(nextToken: String? = nil, ipRoutesInfo: [IpRouteInfo]? = nil) {
            self.nextToken = nextToken
            self.ipRoutesInfo = ipRoutesInfo
        }

    }

    public struct DirectoryConnectSettings: Serializable, Initializable {
        /// A list of subnet identifiers in the VPC in which the AD Connector is created.
        var subnetIds: [String] = []
        /// The identifier of the VPC in which the AD Connector is created.
        var vpcId: String = ""
        /// The username of an account in the on-premises directory that is used to connect to the directory. This account must have the following privileges:   Read users and groups   Create computer objects   Join computers to the domain  
        var customerUserName: String = ""
        /// A list of one or more IP addresses of DNS servers or domain controllers in the on-premises directory.
        var customerDnsIps: [String] = []

        public init() {}

        public init(subnetIds: [String], vpcId: String, customerUserName: String, customerDnsIps: [String]) {
            self.subnetIds = subnetIds
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.customerDnsIps = customerDnsIps
        }

    }

}