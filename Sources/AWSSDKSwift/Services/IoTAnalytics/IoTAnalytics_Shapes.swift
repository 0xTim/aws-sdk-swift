// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTAnalytics {

    public struct DatastoreActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the data store where processed messages are stored.
        public let datastoreName: String
        /// The name of the 'datastore' activity.
        public let name: String

        public init(datastoreName: String, name: String) {
            self.datastoreName = datastoreName
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case name = "name"
        }
    }

    public struct CancelPipelineReprocessingResponse: AWSShape {

    }

    public struct DatastoreSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "datastoreName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp)
        ]
        /// When the data store was created.
        public let creationTime: TimeStamp?
        /// The status of the data store.
        public let status: DatastoreStatus?
        /// The name of the data store.
        public let datastoreName: String?
        /// The last time the data store was updated.
        public let lastUpdateTime: TimeStamp?

        public init(creationTime: TimeStamp? = nil, status: DatastoreStatus? = nil, datastoreName: String? = nil, lastUpdateTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.status = status
            self.datastoreName = datastoreName
            self.lastUpdateTime = lastUpdateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case status = "status"
            case datastoreName = "datastoreName"
            case lastUpdateTime = "lastUpdateTime"
        }
    }

    public struct DatasetTrigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "schedule", required: false, type: .structure)
        ]
        /// The "Schedule" when the trigger is initiated.
        public let schedule: Schedule?

        public init(schedule: Schedule? = nil) {
            self.schedule = schedule
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "schedule"
        }
    }

    public struct SampleChannelDataResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payloads", required: false, type: .list)
        ]
        /// The list of message samples. Each sample message is returned as a base64-encoded string.
        public let payloads: [Data]?

        public init(payloads: [Data]? = nil) {
            self.payloads = payloads
        }

        private enum CodingKeys: String, CodingKey {
            case payloads = "payloads"
        }
    }

    public struct SelectAttributesActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The next activity in the pipeline.
        public let next: String?
        /// A list of the attributes to select from the message.
        public let attributes: [String]
        /// The name of the 'selectAttributes' activity.
        public let name: String

        public init(next: String? = nil, attributes: [String], name: String) {
            self.next = next
            self.attributes = attributes
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case next = "next"
            case attributes = "attributes"
            case name = "name"
        }
    }

    public struct DescribeChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeStatistics", location: .querystring(locationName: "includeStatistics"), required: false, type: .boolean), 
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string)
        ]
        /// If true, include statistics about the channel in the response.
        public let includeStatistics: Bool?
        /// The name of the channel whose information is retrieved.
        public let channelName: String

        public init(includeStatistics: Bool? = nil, channelName: String) {
            self.includeStatistics = includeStatistics
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case includeStatistics = "includeStatistics"
            case channelName = "channelName"
        }
    }

    public enum ReprocessingStatus: String, CustomStringConvertible, Codable {
        case running = "RUNNING"
        case succeeded = "SUCCEEDED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Dataset: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "actions", required: false, type: .list), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "triggers", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The name of the data set.
        public let name: String?
        /// The last time the data set was updated.
        public let lastUpdateTime: TimeStamp?
        /// The "DatasetAction" objects that create the data set.
        public let actions: [DatasetAction]?
        /// The ARN of the data set.
        public let arn: String?
        /// When the data set was created.
        public let creationTime: TimeStamp?
        /// The "DatasetTrigger" objects that specify when the data set is automatically updated.
        public let triggers: [DatasetTrigger]?
        /// The status of the data set.
        public let status: DatasetStatus?

        public init(name: String? = nil, lastUpdateTime: TimeStamp? = nil, actions: [DatasetAction]? = nil, arn: String? = nil, creationTime: TimeStamp? = nil, triggers: [DatasetTrigger]? = nil, status: DatasetStatus? = nil) {
            self.name = name
            self.lastUpdateTime = lastUpdateTime
            self.actions = actions
            self.arn = arn
            self.creationTime = creationTime
            self.triggers = triggers
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case lastUpdateTime = "lastUpdateTime"
            case actions = "actions"
            case arn = "arn"
            case creationTime = "creationTime"
            case triggers = "triggers"
            case status = "status"
        }
    }

    public struct DeleteDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The name of the data set to delete.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public struct LoggingOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "level", required: true, type: .enum), 
            AWSShapeMember(label: "enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The logging level. Currently, only "ERROR" is supported.
        public let level: LoggingLevel
        /// If true, logging is enabled for AWS IoT Analytics.
        public let enabled: Bool
        /// The ARN of the role that grants permission to AWS IoT Analytics to perform logging.
        public let roleArn: String

        public init(level: LoggingLevel, enabled: Bool, roleArn: String) {
            self.level = level
            self.enabled = enabled
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case level = "level"
            case enabled = "enabled"
            case roleArn = "roleArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The tags (metadata) which you have assigned to the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct DatasetAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actionName", required: false, type: .string), 
            AWSShapeMember(label: "queryAction", required: false, type: .structure)
        ]
        /// The name of the data set action.
        public let actionName: String?
        /// An "SqlQueryDatasetAction" object that contains the SQL query to modify the message.
        public let queryAction: SqlQueryDatasetAction?

        public init(actionName: String? = nil, queryAction: SqlQueryDatasetAction? = nil) {
            self.actionName = actionName
            self.queryAction = queryAction
        }

        private enum CodingKeys: String, CodingKey {
            case actionName = "actionName"
            case queryAction = "queryAction"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]
        /// The ARN of the resource whose tags will be removed.
        public let resourceArn: String
        /// The keys of those tags which will be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct ChannelStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "size", required: false, type: .structure)
        ]
        /// The estimated size of the channel.
        public let size: EstimatedResourceSize?

        public init(size: EstimatedResourceSize? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct Channel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// When the channel was created.
        public let creationTime: TimeStamp?
        /// The status of the channel.
        public let status: ChannelStatus?
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the channel.
        public let name: String?
        /// When the channel was last updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the channel.
        public let arn: String?

        public init(creationTime: TimeStamp? = nil, status: ChannelStatus? = nil, retentionPeriod: RetentionPeriod? = nil, name: String? = nil, lastUpdateTime: TimeStamp? = nil, arn: String? = nil) {
            self.creationTime = creationTime
            self.status = status
            self.retentionPeriod = retentionPeriod
            self.name = name
            self.lastUpdateTime = lastUpdateTime
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case status = "status"
            case retentionPeriod = "retentionPeriod"
            case name = "name"
            case lastUpdateTime = "lastUpdateTime"
            case arn = "arn"
        }
    }

    public struct ListPipelinesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DatasetEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "entryName", required: false, type: .string), 
            AWSShapeMember(label: "dataURI", required: false, type: .string)
        ]
        /// The name of the data set item.
        public let entryName: String?
        /// The pre-signed URI of the data set item.
        public let dataURI: String?

        public init(entryName: String? = nil, dataURI: String? = nil) {
            self.entryName = entryName
            self.dataURI = dataURI
        }

        private enum CodingKeys: String, CodingKey {
            case entryName = "entryName"
            case dataURI = "dataURI"
        }
    }

    public struct ListChannelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of "ChannelSummary" objects.
        public let channelSummaries: [ChannelSummary]?
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?

        public init(channelSummaries: [ChannelSummary]? = nil, nextToken: String? = nil) {
            self.channelSummaries = channelSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case channelSummaries = "channelSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct DescribePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// The name of the pipeline whose information is retrieved.
        public let pipelineName: String

        public init(pipelineName: String) {
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineName = "pipelineName"
        }
    }

    public struct ListChannelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DescribeDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The name of the data set whose information is retrieved.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct CreateDatastoreResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", required: false, type: .string), 
            AWSShapeMember(label: "datastoreArn", required: false, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure)
        ]
        /// The name of the data store.
        public let datastoreName: String?
        /// The ARN of the data store.
        public let datastoreArn: String?
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?

        public init(datastoreName: String? = nil, datastoreArn: String? = nil, retentionPeriod: RetentionPeriod? = nil) {
            self.datastoreName = datastoreName
            self.datastoreArn = datastoreArn
            self.retentionPeriod = retentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case datastoreArn = "datastoreArn"
            case retentionPeriod = "retentionPeriod"
        }
    }

    public struct DeletePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// The name of the pipeline to delete.
        public let pipelineName: String

        public init(pipelineName: String) {
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineName = "pipelineName"
        }
    }

    public struct StartPipelineReprocessingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp)
        ]
        /// The name of the pipeline on which to start reprocessing.
        public let pipelineName: String
        /// The end time (exclusive) of raw message data that is reprocessed.
        public let endTime: TimeStamp?
        /// The start time (inclusive) of raw message data that is reprocessed.
        public let startTime: TimeStamp?

        public init(pipelineName: String, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil) {
            self.pipelineName = pipelineName
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineName = "pipelineName"
            case endTime = "endTime"
            case startTime = "startTime"
        }
    }

    public struct RemoveAttributesActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The next activity in the pipeline.
        public let next: String?
        /// A list of 1-50 attributes to remove from the message.
        public let attributes: [String]
        /// The name of the 'removeAttributes' activity.
        public let name: String

        public init(next: String? = nil, attributes: [String], name: String) {
            self.next = next
            self.attributes = attributes
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case next = "next"
            case attributes = "attributes"
            case name = "name"
        }
    }

    public struct SampleChannelDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endTime", location: .querystring(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", location: .querystring(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "maxMessages", location: .querystring(locationName: "maxMessages"), required: false, type: .integer), 
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string)
        ]
        /// The end of the time window from which sample messages are retrieved.
        public let endTime: TimeStamp?
        /// The start of the time window from which sample messages are retrieved.
        public let startTime: TimeStamp?
        /// The number of sample messages to be retrieved. The limit is 10, the default is also 10.
        public let maxMessages: Int32?
        /// The name of the channel whose message samples are retrieved.
        public let channelName: String

        public init(endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, maxMessages: Int32? = nil, channelName: String) {
            self.endTime = endTime
            self.startTime = startTime
            self.maxMessages = maxMessages
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case startTime = "startTime"
            case maxMessages = "maxMessages"
            case channelName = "channelName"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string)
        ]
        /// The ARN of the resource whose tags you want to list.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public enum ChannelStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", location: .uri(locationName: "datastoreName"), required: true, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure)
        ]
        /// The name of the data store to be updated.
        public let datastoreName: String
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?

        public init(datastoreName: String, retentionPeriod: RetentionPeriod? = nil) {
            self.datastoreName = datastoreName
            self.retentionPeriod = retentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case retentionPeriod = "retentionPeriod"
        }
    }

    public struct DescribeLoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptions", required: false, type: .structure)
        ]
        /// The current settings of the AWS IoT Analytics logging options.
        public let loggingOptions: LoggingOptions?

        public init(loggingOptions: LoggingOptions? = nil) {
            self.loggingOptions = loggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct RetentionPeriod: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfDays", required: false, type: .integer), 
            AWSShapeMember(label: "unlimited", required: false, type: .boolean)
        ]
        /// The number of days that message data is kept. The "unlimited" parameter must be false.
        public let numberOfDays: Int32?
        /// If true, message data is kept indefinitely.
        public let unlimited: Bool?

        public init(numberOfDays: Int32? = nil, unlimited: Bool? = nil) {
            self.numberOfDays = numberOfDays
            self.unlimited = unlimited
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfDays = "numberOfDays"
            case unlimited = "unlimited"
        }
    }

    public struct DeviceRegistryEnrichActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "attribute", required: true, type: .string), 
            AWSShapeMember(label: "thingName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The name of the 'deviceRegistryEnrich' activity.
        public let name: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the attribute that is added to the message.
        public let attribute: String
        /// The name of the IoT device whose registry information is added to the message.
        public let thingName: String
        /// The ARN of the role that allows access to the device's registry information.
        public let roleArn: String

        public init(name: String, next: String? = nil, attribute: String, thingName: String, roleArn: String) {
            self.name = name
            self.next = next
            self.attribute = attribute
            self.thingName = thingName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case next = "next"
            case attribute = "attribute"
            case thingName = "thingName"
            case roleArn = "roleArn"
        }
    }

    public struct GetDatasetContentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .structure), 
            AWSShapeMember(label: "entries", required: false, type: .list), 
            AWSShapeMember(label: "timestamp", required: false, type: .timestamp)
        ]
        /// The status of the data set content.
        public let status: DatasetContentStatus?
        /// A list of "DatasetEntry" objects.
        public let entries: [DatasetEntry]?
        /// The time when the request was made.
        public let timestamp: TimeStamp?

        public init(status: DatasetContentStatus? = nil, entries: [DatasetEntry]? = nil, timestamp: TimeStamp? = nil) {
            self.status = status
            self.entries = entries
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case entries = "entries"
            case timestamp = "timestamp"
        }
    }

    public struct DeleteDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", location: .uri(locationName: "datastoreName"), required: true, type: .string)
        ]
        /// The name of the data store to delete.
        public let datastoreName: String

        public init(datastoreName: String) {
            self.datastoreName = datastoreName
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
        }
    }

    public struct UpdatePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineActivities", required: true, type: .list), 
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// A list of "PipelineActivity" objects. The list can be 1-25 PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.
        public let pipelineActivities: [PipelineActivity]
        /// The name of the pipeline to update.
        public let pipelineName: String

        public init(pipelineActivities: [PipelineActivity], pipelineName: String) {
            self.pipelineActivities = pipelineActivities
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineActivities = "pipelineActivities"
            case pipelineName = "pipelineName"
        }
    }

    public struct EstimatedResourceSize: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "estimatedSizeInBytes", required: false, type: .double), 
            AWSShapeMember(label: "estimatedOn", required: false, type: .timestamp)
        ]
        /// The estimated size of the resource in bytes.
        public let estimatedSizeInBytes: Double?
        /// The time when the estimate of the size of the resource was made.
        public let estimatedOn: TimeStamp?

        public init(estimatedSizeInBytes: Double? = nil, estimatedOn: TimeStamp? = nil) {
            self.estimatedSizeInBytes = estimatedSizeInBytes
            self.estimatedOn = estimatedOn
        }

        private enum CodingKeys: String, CodingKey {
            case estimatedSizeInBytes = "estimatedSizeInBytes"
            case estimatedOn = "estimatedOn"
        }
    }

    public struct DescribeLoggingOptionsRequest: AWSShape {

    }

    public enum DatastoreStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct CreateChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "channelName", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the channel.
        public let channelName: String
        /// Metadata which can be used to manage the channel.
        public let tags: [Tag]?

        public init(retentionPeriod: RetentionPeriod? = nil, channelName: String, tags: [Tag]? = nil) {
            self.retentionPeriod = retentionPeriod
            self.channelName = channelName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case retentionPeriod = "retentionPeriod"
            case channelName = "channelName"
            case tags = "tags"
        }
    }

    public struct DatastoreStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "size", required: false, type: .structure)
        ]
        /// The estimated size of the data store.
        public let size: EstimatedResourceSize?

        public init(size: EstimatedResourceSize? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct ListPipelinesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of "PipelineSummary" objects.
        public let pipelineSummaries: [PipelineSummary]?
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?

        public init(pipelineSummaries: [PipelineSummary]? = nil, nextToken: String? = nil) {
            self.pipelineSummaries = pipelineSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineSummaries = "pipelineSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct CreateDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", required: true, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The name of the data store.
        public let datastoreName: String
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?
        /// Metadata which can be used to manage the data store.
        public let tags: [Tag]?

        public init(datastoreName: String, retentionPeriod: RetentionPeriod? = nil, tags: [Tag]? = nil) {
            self.datastoreName = datastoreName
            self.retentionPeriod = retentionPeriod
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case retentionPeriod = "retentionPeriod"
            case tags = "tags"
        }
    }

    public struct CreateDatasetContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The name of the data set.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public struct StartPipelineReprocessingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reprocessingId", required: false, type: .string)
        ]
        /// The ID of the pipeline reprocessing activity that was started.
        public let reprocessingId: String?

        public init(reprocessingId: String? = nil) {
            self.reprocessingId = reprocessingId
        }

        private enum CodingKeys: String, CodingKey {
            case reprocessingId = "reprocessingId"
        }
    }

    public struct DescribeChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statistics", required: false, type: .structure), 
            AWSShapeMember(label: "channel", required: false, type: .structure)
        ]
        /// Statistics about the channel. Included if the 'includeStatistics' parameter is set to true in the request.
        public let statistics: ChannelStatistics?
        /// An object that contains information about the channel.
        public let channel: Channel?

        public init(statistics: ChannelStatistics? = nil, channel: Channel? = nil) {
            self.statistics = statistics
            self.channel = channel
        }

        private enum CodingKeys: String, CodingKey {
            case statistics = "statistics"
            case channel = "channel"
        }
    }

    public struct Schedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expression", required: false, type: .string)
        ]
        /// The expression that defines when to trigger an update. For more information, see  Schedule Expressions for Rules in the Amazon CloudWatch documentation.
        public let expression: String?

        public init(expression: String? = nil) {
            self.expression = expression
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "expression"
        }
    }

    public struct DeleteChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string)
        ]
        /// The name of the channel to delete.
        public let channelName: String

        public init(channelName: String) {
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
        }
    }

    public enum LoggingLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public enum DatasetContentState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct BatchPutMessageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "batchPutMessageErrorEntries", required: false, type: .list)
        ]
        /// A list of any errors encountered when sending the messages to the channel.
        public let batchPutMessageErrorEntries: [BatchPutMessageErrorEntry]?

        public init(batchPutMessageErrorEntries: [BatchPutMessageErrorEntry]? = nil) {
            self.batchPutMessageErrorEntries = batchPutMessageErrorEntries
        }

        private enum CodingKeys: String, CodingKey {
            case batchPutMessageErrorEntries = "batchPutMessageErrorEntries"
        }
    }

    public struct DatasetSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "datasetName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp)
        ]
        /// The time the data set was created.
        public let creationTime: TimeStamp?
        /// The status of the data set.
        public let status: DatasetStatus?
        /// The name of the data set.
        public let datasetName: String?
        /// The last time the data set was updated.
        public let lastUpdateTime: TimeStamp?

        public init(creationTime: TimeStamp? = nil, status: DatasetStatus? = nil, datasetName: String? = nil, lastUpdateTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.status = status
            self.datasetName = datasetName
            self.lastUpdateTime = lastUpdateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case status = "status"
            case datasetName = "datasetName"
            case lastUpdateTime = "lastUpdateTime"
        }
    }

    public struct UpdateDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: true, type: .list), 
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string), 
            AWSShapeMember(label: "triggers", required: false, type: .list)
        ]
        /// A list of "DatasetAction" objects. Only one action is supported at this time.
        public let actions: [DatasetAction]
        /// The name of the data set to update.
        public let datasetName: String
        /// A list of "DatasetTrigger" objects. The list can be empty or can contain up to five DataSetTrigger objects.
        public let triggers: [DatasetTrigger]?

        public init(actions: [DatasetAction], datasetName: String, triggers: [DatasetTrigger]? = nil) {
            self.actions = actions
            self.datasetName = datasetName
            self.triggers = triggers
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case datasetName = "datasetName"
            case triggers = "triggers"
        }
    }

    public struct CreateDatasetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", required: false, type: .string), 
            AWSShapeMember(label: "datasetArn", required: false, type: .string)
        ]
        /// The name of the data set.
        public let datasetName: String?
        /// The ARN of the data set.
        public let datasetArn: String?

        public init(datasetName: String? = nil, datasetArn: String? = nil) {
            self.datasetName = datasetName
            self.datasetArn = datasetArn
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
            case datasetArn = "datasetArn"
        }
    }

    public struct RunPipelineActivityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payloads", required: true, type: .list), 
            AWSShapeMember(label: "pipelineActivity", required: true, type: .structure)
        ]
        /// The sample message payloads on which the pipeline activity is run.
        public let payloads: [Data]
        /// The pipeline activity that is run. This must not be a 'channel' activity or a 'datastore' activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a 'lambda' activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.
        public let pipelineActivity: PipelineActivity

        public init(payloads: [Data], pipelineActivity: PipelineActivity) {
            self.payloads = payloads
            self.pipelineActivity = pipelineActivity
        }

        private enum CodingKeys: String, CodingKey {
            case payloads = "payloads"
            case pipelineActivity = "pipelineActivity"
        }
    }

    public struct Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: true, type: .blob), 
            AWSShapeMember(label: "messageId", required: true, type: .string)
        ]
        /// The payload of the message. This may be a JSON string or a Base64-encoded string representing binary data (in which case you must decode it by means of a pipeline activity).
        public let payload: Data
        /// The ID you wish to assign to the message. Each "messageId" must be unique within each batch sent.
        public let messageId: String

        public init(payload: Data, messageId: String) {
            self.payload = payload
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case messageId = "messageId"
        }
    }

    public struct BatchPutMessageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", required: true, type: .string), 
            AWSShapeMember(label: "messages", required: true, type: .list)
        ]
        /// The name of the channel where the messages are sent.
        public let channelName: String
        /// The list of messages to be sent. Each message has format: '{ "messageId": "string", "payload": "string"}'.
        public let messages: [Message]

        public init(channelName: String, messages: [Message]) {
            self.channelName = channelName
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
            case messages = "messages"
        }
    }

    public struct ListDatastoresRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The tag's key.
        public let key: String
        /// The tag's value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DescribeDatasetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataset", required: false, type: .structure)
        ]
        /// An object that contains information about the data set.
        public let dataset: Dataset?

        public init(dataset: Dataset? = nil) {
            self.dataset = dataset
        }

        private enum CodingKeys: String, CodingKey {
            case dataset = "dataset"
        }
    }

    public struct SqlQueryDatasetAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sqlQuery", required: true, type: .string)
        ]
        /// An SQL query string.
        public let sqlQuery: String

        public init(sqlQuery: String) {
            self.sqlQuery = sqlQuery
        }

        private enum CodingKeys: String, CodingKey {
            case sqlQuery = "sqlQuery"
        }
    }

    public struct ListDatasetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "datasetSummaries", required: false, type: .list)
        ]
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?
        /// A list of "DatasetSummary" objects.
        public let datasetSummaries: [DatasetSummary]?

        public init(nextToken: String? = nil, datasetSummaries: [DatasetSummary]? = nil) {
            self.nextToken = nextToken
            self.datasetSummaries = datasetSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case datasetSummaries = "datasetSummaries"
        }
    }

    public struct DescribePipelineResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipeline", required: false, type: .structure)
        ]
        /// A "Pipeline" object that contains information about the pipeline.
        public let pipeline: Pipeline?

        public init(pipeline: Pipeline? = nil) {
            self.pipeline = pipeline
        }

        private enum CodingKeys: String, CodingKey {
            case pipeline = "pipeline"
        }
    }

    public struct PipelineSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "reprocessingSummaries", required: false, type: .list), 
            AWSShapeMember(label: "pipelineName", required: false, type: .string)
        ]
        /// When the pipeline was created.
        public let creationTime: TimeStamp?
        /// When the pipeline was last updated.
        public let lastUpdateTime: TimeStamp?
        /// A summary of information about the pipeline reprocessing.
        public let reprocessingSummaries: [ReprocessingSummary]?
        /// The name of the pipeline.
        public let pipelineName: String?

        public init(creationTime: TimeStamp? = nil, lastUpdateTime: TimeStamp? = nil, reprocessingSummaries: [ReprocessingSummary]? = nil, pipelineName: String? = nil) {
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.reprocessingSummaries = reprocessingSummaries
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case lastUpdateTime = "lastUpdateTime"
            case reprocessingSummaries = "reprocessingSummaries"
            case pipelineName = "pipelineName"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The ARN of the resource whose tags will be modified.
        public let resourceArn: String
        /// The new or modified tags for the resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct UpdateChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string)
        ]
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the channel to be updated.
        public let channelName: String

        public init(retentionPeriod: RetentionPeriod? = nil, channelName: String) {
            self.retentionPeriod = retentionPeriod
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case retentionPeriod = "retentionPeriod"
            case channelName = "channelName"
        }
    }

    public struct DeleteDatasetContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string), 
            AWSShapeMember(label: "versionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The name of the data set whose content is deleted.
        public let datasetName: String
        /// The version of the data set whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
        public let versionId: String?

        public init(datasetName: String, versionId: String? = nil) {
            self.datasetName = datasetName
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
            case versionId = "versionId"
        }
    }

    public struct DatasetContentStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "reason", required: false, type: .string)
        ]
        /// The state of the data set. Can be one of "CREATING", "SUCCEEDED" or "FAILED".
        public let state: DatasetContentState?
        /// The reason the data set is in this state.
        public let reason: String?

        public init(state: DatasetContentState? = nil, reason: String? = nil) {
            self.state = state
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case reason = "reason"
        }
    }

    public struct GetDatasetContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string), 
            AWSShapeMember(label: "versionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The name of the data set whose contents are retrieved.
        public let datasetName: String
        /// The version of the data set whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
        public let versionId: String?

        public init(datasetName: String, versionId: String? = nil) {
            self.datasetName = datasetName
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
            case versionId = "versionId"
        }
    }

    public struct BatchPutMessageErrorEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "messageId", required: false, type: .string), 
            AWSShapeMember(label: "errorCode", required: false, type: .string), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// The ID of the message that caused the error. (See the value corresponding to the "messageId" key in the message object.)
        public let messageId: String?
        /// The code associated with the error.
        public let errorCode: String?
        /// The message associated with the error.
        public let errorMessage: String?

        public init(messageId: String? = nil, errorCode: String? = nil, errorMessage: String? = nil) {
            self.messageId = messageId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case messageId = "messageId"
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
        }
    }

    public struct PutLoggingOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptions", required: true, type: .structure)
        ]
        /// The new values of the AWS IoT Analytics logging options.
        public let loggingOptions: LoggingOptions

        public init(loggingOptions: LoggingOptions) {
            self.loggingOptions = loggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct ChannelActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "channelName", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the channel from which the messages are processed.
        public let channelName: String
        /// The name of the 'channel' activity.
        public let name: String

        public init(next: String? = nil, channelName: String, name: String) {
            self.next = next
            self.channelName = channelName
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case next = "next"
            case channelName = "channelName"
            case name = "name"
        }
    }

    public struct PipelineActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "selectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "lambda", required: false, type: .structure), 
            AWSShapeMember(label: "channel", required: false, type: .structure), 
            AWSShapeMember(label: "datastore", required: false, type: .structure), 
            AWSShapeMember(label: "deviceShadowEnrich", required: false, type: .structure), 
            AWSShapeMember(label: "deviceRegistryEnrich", required: false, type: .structure), 
            AWSShapeMember(label: "math", required: false, type: .structure), 
            AWSShapeMember(label: "addAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "removeAttributes", required: false, type: .structure)
        ]
        /// Creates a new message using only the specified attributes from the original message. 
        public let selectAttributes: SelectAttributesActivity?
        /// Filters a message based on its attributes.
        public let filter: FilterActivity?
        /// Runs a Lambda function to modify the message.
        public let lambda: LambdaActivity?
        /// Determines the source of the messages to be processed.
        public let channel: ChannelActivity?
        /// Specifies where to store the processed message data.
        public let datastore: DatastoreActivity?
        /// Adds information from the AWS IoT Device Shadows service to a message.
        public let deviceShadowEnrich: DeviceShadowEnrichActivity?
        /// Adds data from the AWS IoT device registry to your message.
        public let deviceRegistryEnrich: DeviceRegistryEnrichActivity?
        /// Computes an arithmetic expression using the message's attributes and adds it to the message.
        public let math: MathActivity?
        /// Adds other attributes based on existing attributes in the message.
        public let addAttributes: AddAttributesActivity?
        /// Removes attributes from a message.
        public let removeAttributes: RemoveAttributesActivity?

        public init(selectAttributes: SelectAttributesActivity? = nil, filter: FilterActivity? = nil, lambda: LambdaActivity? = nil, channel: ChannelActivity? = nil, datastore: DatastoreActivity? = nil, deviceShadowEnrich: DeviceShadowEnrichActivity? = nil, deviceRegistryEnrich: DeviceRegistryEnrichActivity? = nil, math: MathActivity? = nil, addAttributes: AddAttributesActivity? = nil, removeAttributes: RemoveAttributesActivity? = nil) {
            self.selectAttributes = selectAttributes
            self.filter = filter
            self.lambda = lambda
            self.channel = channel
            self.datastore = datastore
            self.deviceShadowEnrich = deviceShadowEnrich
            self.deviceRegistryEnrich = deviceRegistryEnrich
            self.math = math
            self.addAttributes = addAttributes
            self.removeAttributes = removeAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case selectAttributes = "selectAttributes"
            case filter = "filter"
            case lambda = "lambda"
            case channel = "channel"
            case datastore = "datastore"
            case deviceShadowEnrich = "deviceShadowEnrich"
            case deviceRegistryEnrich = "deviceRegistryEnrich"
            case math = "math"
            case addAttributes = "addAttributes"
            case removeAttributes = "removeAttributes"
        }
    }

    public struct Datastore: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// When the data store was created.
        public let creationTime: TimeStamp?
        /// The status of a data store:  CREATING  The data store is being created.  ACTIVE  The data store has been created and can be used.  DELETING  The data store is being deleted.  
        public let status: DatastoreStatus?
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the data store.
        public let name: String?
        /// The last time the data store was updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the data store.
        public let arn: String?

        public init(creationTime: TimeStamp? = nil, status: DatastoreStatus? = nil, retentionPeriod: RetentionPeriod? = nil, name: String? = nil, lastUpdateTime: TimeStamp? = nil, arn: String? = nil) {
            self.creationTime = creationTime
            self.status = status
            self.retentionPeriod = retentionPeriod
            self.name = name
            self.lastUpdateTime = lastUpdateTime
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case status = "status"
            case retentionPeriod = "retentionPeriod"
            case name = "name"
            case lastUpdateTime = "lastUpdateTime"
            case arn = "arn"
        }
    }

    public struct AddAttributesActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .map), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The next activity in the pipeline.
        public let next: String?
        /// A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.  The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity". 
        public let attributes: [String: String]
        /// The name of the 'addAttributes' activity.
        public let name: String

        public init(next: String? = nil, attributes: [String: String], name: String) {
            self.next = next
            self.attributes = attributes
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case next = "next"
            case attributes = "attributes"
            case name = "name"
        }
    }

    public struct DescribeDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", location: .uri(locationName: "datastoreName"), required: true, type: .string), 
            AWSShapeMember(label: "includeStatistics", location: .querystring(locationName: "includeStatistics"), required: false, type: .boolean)
        ]
        /// The name of the data store
        public let datastoreName: String
        /// If true, include statistics about the data store in the response.
        public let includeStatistics: Bool?

        public init(datastoreName: String, includeStatistics: Bool? = nil) {
            self.datastoreName = datastoreName
            self.includeStatistics = includeStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case includeStatistics = "includeStatistics"
        }
    }

    public struct LambdaActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "batchSize", required: true, type: .integer), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "lambdaName", required: true, type: .string)
        ]
        /// The number of messages passed to the Lambda function for processing. The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        public let batchSize: Int32
        /// The name of the 'lambda' activity.
        public let name: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the Lambda function that is run on the message.
        public let lambdaName: String

        public init(batchSize: Int32, name: String, next: String? = nil, lambdaName: String) {
            self.batchSize = batchSize
            self.name = name
            self.next = next
            self.lambdaName = lambdaName
        }

        private enum CodingKeys: String, CodingKey {
            case batchSize = "batchSize"
            case name = "name"
            case next = "next"
            case lambdaName = "lambdaName"
        }
    }

    public struct MathActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "math", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "attribute", required: true, type: .string)
        ]
        /// The name of the 'math' activity.
        public let name: String
        /// An expression that uses one or more existing attributes and must return an integer value.
        public let math: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the attribute that will contain the result of the math operation.
        public let attribute: String

        public init(name: String, math: String, next: String? = nil, attribute: String) {
            self.name = name
            self.math = math
            self.next = next
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case math = "math"
            case next = "next"
            case attribute = "attribute"
        }
    }

    public struct ReprocessingSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The 'reprocessingId' returned by "StartPipelineReprocessing".
        public let id: String?
        /// The time the pipeline reprocessing was created.
        public let creationTime: TimeStamp?
        /// The status of the pipeline reprocessing.
        public let status: ReprocessingStatus?

        public init(id: String? = nil, creationTime: TimeStamp? = nil, status: ReprocessingStatus? = nil) {
            self.id = id
            self.creationTime = creationTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case creationTime = "creationTime"
            case status = "status"
        }
    }

    public struct ListDatastoresResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "datastoreSummaries", required: false, type: .list)
        ]
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?
        /// A list of "DatastoreSummary" objects.
        public let datastoreSummaries: [DatastoreSummary]?

        public init(nextToken: String? = nil, datastoreSummaries: [DatastoreSummary]? = nil) {
            self.nextToken = nextToken
            self.datastoreSummaries = datastoreSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case datastoreSummaries = "datastoreSummaries"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct RunPipelineActivityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payloads", required: false, type: .list), 
            AWSShapeMember(label: "logResult", required: false, type: .string)
        ]
        /// The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)
        public let payloads: [Data]?
        /// In case the pipeline activity fails, the log message that is generated.
        public let logResult: String?

        public init(payloads: [Data]? = nil, logResult: String? = nil) {
            self.payloads = payloads
            self.logResult = logResult
        }

        private enum CodingKeys: String, CodingKey {
            case payloads = "payloads"
            case logResult = "logResult"
        }
    }

    public struct DeviceShadowEnrichActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "attribute", required: true, type: .string), 
            AWSShapeMember(label: "thingName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The name of the 'deviceShadowEnrich' activity.
        public let name: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the attribute that is added to the message.
        public let attribute: String
        /// The name of the IoT device whose shadow information is added to the message.
        public let thingName: String
        /// The ARN of the role that allows access to the device's shadow.
        public let roleArn: String

        public init(name: String, next: String? = nil, attribute: String, thingName: String, roleArn: String) {
            self.name = name
            self.next = next
            self.attribute = attribute
            self.thingName = thingName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case next = "next"
            case attribute = "attribute"
            case thingName = "thingName"
            case roleArn = "roleArn"
        }
    }

    public struct CreateChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "channelName", required: false, type: .string), 
            AWSShapeMember(label: "channelArn", required: false, type: .string)
        ]
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the channel.
        public let channelName: String?
        /// The ARN of the channel.
        public let channelArn: String?

        public init(retentionPeriod: RetentionPeriod? = nil, channelName: String? = nil, channelArn: String? = nil) {
            self.retentionPeriod = retentionPeriod
            self.channelName = channelName
            self.channelArn = channelArn
        }

        private enum CodingKeys: String, CodingKey {
            case retentionPeriod = "retentionPeriod"
            case channelName = "channelName"
            case channelArn = "channelArn"
        }
    }

    public struct ChannelSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "channelName", required: false, type: .string)
        ]
        /// When the channel was created.
        public let creationTime: TimeStamp?
        /// The status of the channel.
        public let status: ChannelStatus?
        /// The last time the channel was updated.
        public let lastUpdateTime: TimeStamp?
        /// The name of the channel.
        public let channelName: String?

        public init(creationTime: TimeStamp? = nil, status: ChannelStatus? = nil, lastUpdateTime: TimeStamp? = nil, channelName: String? = nil) {
            self.creationTime = creationTime
            self.status = status
            self.lastUpdateTime = lastUpdateTime
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case status = "status"
            case lastUpdateTime = "lastUpdateTime"
            case channelName = "channelName"
        }
    }

    public struct CancelPipelineReprocessingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reprocessingId", location: .uri(locationName: "reprocessingId"), required: true, type: .string), 
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// The ID of the reprocessing task (returned by "StartPipelineReprocessing").
        public let reprocessingId: String
        /// The name of pipeline for which data reprocessing is canceled.
        public let pipelineName: String

        public init(reprocessingId: String, pipelineName: String) {
            self.reprocessingId = reprocessingId
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case reprocessingId = "reprocessingId"
            case pipelineName = "pipelineName"
        }
    }

    public struct CreatePipelineResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineArn", required: false, type: .string), 
            AWSShapeMember(label: "pipelineName", required: false, type: .string)
        ]
        /// The ARN of the pipeline.
        public let pipelineArn: String?
        /// The name of the pipeline.
        public let pipelineName: String?

        public init(pipelineArn: String? = nil, pipelineName: String? = nil) {
            self.pipelineArn = pipelineArn
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineArn = "pipelineArn"
            case pipelineName = "pipelineName"
        }
    }

    public struct ListDatasetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct FilterActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filter", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// An expression that looks like an SQL WHERE clause that must return a Boolean value.
        public let filter: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the 'filter' activity.
        public let name: String

        public init(filter: String, next: String? = nil, name: String) {
            self.filter = filter
            self.next = next
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case next = "next"
            case name = "name"
        }
    }

    public enum DatasetStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct CreateDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "actions", required: true, type: .list), 
            AWSShapeMember(label: "triggers", required: false, type: .list)
        ]
        /// The name of the data set.
        public let datasetName: String
        /// Metadata which can be used to manage the data set.
        public let tags: [Tag]?
        /// A list of actions that create the data set. Only one action is supported at this time.
        public let actions: [DatasetAction]
        /// A list of triggers. A trigger causes data set content to be populated at a specified time or time interval. The list of triggers can be empty or contain up to five DataSetTrigger objects.
        public let triggers: [DatasetTrigger]?

        public init(datasetName: String, tags: [Tag]? = nil, actions: [DatasetAction], triggers: [DatasetTrigger]? = nil) {
            self.datasetName = datasetName
            self.tags = tags
            self.actions = actions
            self.triggers = triggers
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
            case tags = "tags"
            case actions = "actions"
            case triggers = "triggers"
        }
    }

    public struct CreatePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineActivities", required: true, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "pipelineName", required: true, type: .string)
        ]
        /// A list of pipeline activities. The list can be 1-25 PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming, or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.
        public let pipelineActivities: [PipelineActivity]
        /// Metadata which can be used to manage the pipeline.
        public let tags: [Tag]?
        /// The name of the pipeline.
        public let pipelineName: String

        public init(pipelineActivities: [PipelineActivity], tags: [Tag]? = nil, pipelineName: String) {
            self.pipelineActivities = pipelineActivities
            self.tags = tags
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineActivities = "pipelineActivities"
            case tags = "tags"
            case pipelineName = "pipelineName"
        }
    }

    public struct Pipeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "activities", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "reprocessingSummaries", required: false, type: .list)
        ]
        /// When the pipeline was created.
        public let creationTime: TimeStamp?
        /// The name of the pipeline.
        public let name: String?
        /// The activities that perform transformations on the messages.
        public let activities: [PipelineActivity]?
        /// The last time the pipeline was updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the pipeline.
        public let arn: String?
        /// A summary of information about the pipeline reprocessing.
        public let reprocessingSummaries: [ReprocessingSummary]?

        public init(creationTime: TimeStamp? = nil, name: String? = nil, activities: [PipelineActivity]? = nil, lastUpdateTime: TimeStamp? = nil, arn: String? = nil, reprocessingSummaries: [ReprocessingSummary]? = nil) {
            self.creationTime = creationTime
            self.name = name
            self.activities = activities
            self.lastUpdateTime = lastUpdateTime
            self.arn = arn
            self.reprocessingSummaries = reprocessingSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case name = "name"
            case activities = "activities"
            case lastUpdateTime = "lastUpdateTime"
            case arn = "arn"
            case reprocessingSummaries = "reprocessingSummaries"
        }
    }

    public struct DescribeDatastoreResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastore", required: false, type: .structure), 
            AWSShapeMember(label: "statistics", required: false, type: .structure)
        ]
        /// Information about the data store.
        public let datastore: Datastore?
        /// Statistics about the data store. Included if the 'includeStatistics' parameter is set to true in the request.
        public let statistics: DatastoreStatistics?

        public init(datastore: Datastore? = nil, statistics: DatastoreStatistics? = nil) {
            self.datastore = datastore
            self.statistics = statistics
        }

        private enum CodingKeys: String, CodingKey {
            case datastore = "datastore"
            case statistics = "statistics"
        }
    }

}