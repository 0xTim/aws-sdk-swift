// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Redshift {

    public struct ModifyClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ClusterType", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ElasticIp", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "ClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "NewClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "AutomatedSnapshotRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "EnhancedVpcRouting", required: false, type: .boolean), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure)
        ]
        /// If true, major version upgrades will be applied automatically to the cluster during the maintenance window.  Default: false 
        public let allowVersionUpgrade: Bool?
        /// The new cluster type. When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use DescribeResize to track the progress of the resize request.  Valid Values:  multi-node | single-node  
        public let clusterType: String?
        /// The unique identifier of the cluster to be modified. Example: examplecluster 
        public let clusterIdentifier: String
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?
        /// The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter. When you submit your request to resize a cluster, Amazon Redshift sets access permissions for the cluster to read-only. After Amazon Redshift provisions a new cluster according to your resize requirements, there will be a temporary outage while the old cluster is deleted and your connection is switched to the new cluster. When the new connection is complete, the original access permissions for the cluster are restored. You can use DescribeResize to track the progress of the resize request.  Valid Values: Integer greater than 0.
        public let numberOfNodes: Int32?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch Your Cluster in the Amazon Redshift Cluster Management Guide.
        public let elasticIp: String?
        /// The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter. When you submit your request to resize a cluster, Amazon Redshift sets access permissions for the cluster to read-only. After Amazon Redshift provisions a new cluster according to your resize requirements, there will be a temporary outage while the old cluster is deleted and your connection is switched to the new cluster. When the new connection is complete, the original access permissions for the cluster are restored. You can use DescribeResize to track the progress of the resize request.  Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge 
        public let nodeType: String?
        /// The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use RebootCluster.  Default: Uses existing setting. Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.
        public let clusterParameterGroupName: String?
        /// The new identifier for the cluster. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.   Example: examplecluster 
        public let newClusterIdentifier: String?
        /// The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response.   Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.  Default: Uses existing setting. Constraints:   Must be between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must contain at least one lowercase letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.  
        public let masterUserPassword: String?
        /// The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage. This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes.
        public let preferredMaintenanceWindow: String?
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted. Default: Uses existing setting. Constraints: Must be a value from 0 to 35.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
        public let maintenanceTrackName: String?
        /// If true, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
        public let publiclyAccessible: Bool?
        /// The new version number of the Amazon Redshift engine to upgrade to. For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide. Example: 1.0 
        public let clusterVersion: String?
        /// A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible. Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let clusterSecurityGroups: ClusterSecurityGroupNameList?
        /// A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?

        public init(allowVersionUpgrade: Bool? = nil, clusterType: String? = nil, clusterIdentifier: String, hsmClientCertificateIdentifier: String? = nil, numberOfNodes: Int32? = nil, hsmConfigurationIdentifier: String? = nil, elasticIp: String? = nil, nodeType: String? = nil, clusterParameterGroupName: String? = nil, newClusterIdentifier: String? = nil, masterUserPassword: String? = nil, preferredMaintenanceWindow: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, enhancedVpcRouting: Bool? = nil, maintenanceTrackName: String? = nil, publiclyAccessible: Bool? = nil, clusterVersion: String? = nil, clusterSecurityGroups: ClusterSecurityGroupNameList? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil) {
            self.allowVersionUpgrade = allowVersionUpgrade
            self.clusterType = clusterType
            self.clusterIdentifier = clusterIdentifier
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.numberOfNodes = numberOfNodes
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.elasticIp = elasticIp
            self.nodeType = nodeType
            self.clusterParameterGroupName = clusterParameterGroupName
            self.newClusterIdentifier = newClusterIdentifier
            self.masterUserPassword = masterUserPassword
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.enhancedVpcRouting = enhancedVpcRouting
            self.maintenanceTrackName = maintenanceTrackName
            self.publiclyAccessible = publiclyAccessible
            self.clusterVersion = clusterVersion
            self.clusterSecurityGroups = clusterSecurityGroups
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case allowVersionUpgrade = "AllowVersionUpgrade"
            case clusterType = "ClusterType"
            case clusterIdentifier = "ClusterIdentifier"
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
            case numberOfNodes = "NumberOfNodes"
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case elasticIp = "ElasticIp"
            case nodeType = "NodeType"
            case clusterParameterGroupName = "ClusterParameterGroupName"
            case newClusterIdentifier = "NewClusterIdentifier"
            case masterUserPassword = "MasterUserPassword"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
            case enhancedVpcRouting = "EnhancedVpcRouting"
            case maintenanceTrackName = "MaintenanceTrackName"
            case publiclyAccessible = "PubliclyAccessible"
            case clusterVersion = "ClusterVersion"
            case clusterSecurityGroups = "ClusterSecurityGroups"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct PurchaseReservedNodeOfferingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedNode", required: false, type: .structure)
        ]
        public let reservedNode: ReservedNode?

        public init(reservedNode: ReservedNode? = nil) {
            self.reservedNode = reservedNode
        }

        private enum CodingKeys: String, CodingKey {
            case reservedNode = "ReservedNode"
        }
    }

    public struct GetReservedNodeExchangeOfferingsInputMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedNodeId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// A string representing the node identifier for the DC1 Reserved Node to be exchanged.
        public let reservedNodeId: String
        /// A value that indicates the starting point for the next set of ReservedNodeOfferings.
        public let marker: String?
        /// An integer setting the maximum number of ReservedNodeOfferings to retrieve.
        public let maxRecords: Int32?

        public init(reservedNodeId: String, marker: String? = nil, maxRecords: Int32? = nil) {
            self.reservedNodeId = reservedNodeId
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case reservedNodeId = "ReservedNodeId"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct VpcSecurityGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroup", required: false, type: .list)
        ]
        public let vpcSecurityGroup: [VpcSecurityGroupMembership]?

        public init(vpcSecurityGroup: [VpcSecurityGroupMembership]? = nil) {
            self.vpcSecurityGroup = vpcSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroup = "VpcSecurityGroup"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case cluster = "cluster"
        case clusterParameterGroup = "cluster-parameter-group"
        case clusterSecurityGroup = "cluster-security-group"
        case clusterSnapshot = "cluster-snapshot"
        public var description: String { return self.rawValue }
    }

    public struct RotateEncryptionKeyMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The unique identifier of the cluster that you want to rotate the encryption keys for. Constraints: Must be the name of valid cluster that has encryption enabled.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct ParameterGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterParameterGroup", required: false, type: .list)
        ]
        public let clusterParameterGroup: [ClusterParameterGroup]?

        public init(clusterParameterGroup: [ClusterParameterGroup]? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterParameterGroup = "ClusterParameterGroup"
        }
    }

    public struct MaintenanceTrack: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseVersion", required: false, type: .string), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "UpdateTargets", required: false, type: .structure)
        ]
        /// The version number for the cluster release.
        public let databaseVersion: String?
        /// The name of the maintenance track. Possible values are current and trailing.
        public let maintenanceTrackName: String?
        /// An array of UpdateTarget objects to update with the maintenance track. 
        public let updateTargets: EligibleTracksToUpdateList?

        public init(databaseVersion: String? = nil, maintenanceTrackName: String? = nil, updateTargets: EligibleTracksToUpdateList? = nil) {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.updateTargets = updateTargets
        }

        private enum CodingKeys: String, CodingKey {
            case databaseVersion = "DatabaseVersion"
            case maintenanceTrackName = "MaintenanceTrackName"
            case updateTargets = "UpdateTargets"
        }
    }

    public struct SubnetIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .list)
        ]
        public let subnetIdentifier: [String]?

        public init(subnetIdentifier: [String]? = nil) {
            self.subnetIdentifier = subnetIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
        }
    }

    public struct AuthorizeSnapshotAccessMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountWithRestoreAccess", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier of the AWS customer account authorized to restore the specified snapshot. To share a snapshot with AWS support, specify amazon-redshift-support.
        public let accountWithRestoreAccess: String
        /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        public let snapshotClusterIdentifier: String?
        /// The identifier of the snapshot the account is authorized to restore.
        public let snapshotIdentifier: String

        public init(accountWithRestoreAccess: String, snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String) {
            self.accountWithRestoreAccess = accountWithRestoreAccess
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case accountWithRestoreAccess = "AccountWithRestoreAccess"
            case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
            case snapshotIdentifier = "SnapshotIdentifier"
        }
    }

    public struct SnapshotCopyGrantMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrants", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of SnapshotCopyGrant objects.
        public let snapshotCopyGrants: SnapshotCopyGrantList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both. 
        public let marker: String?

        public init(snapshotCopyGrants: SnapshotCopyGrantList? = nil, marker: String? = nil) {
            self.snapshotCopyGrants = snapshotCopyGrants
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrants = "SnapshotCopyGrants"
            case marker = "Marker"
        }
    }

    public struct TagList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct ClusterSubnetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "SubnetGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: false, type: .string)
        ]
        /// The list of tags for the cluster subnet group.
        public let tags: TagList?
        /// The VPC ID of the cluster subnet group.
        public let vpcId: String?
        /// The status of the cluster subnet group. Possible values are Complete, Incomplete and Invalid. 
        public let subnetGroupStatus: String?
        /// A list of the VPC Subnet elements. 
        public let subnets: SubnetList?
        /// The description of the cluster subnet group.
        public let description: String?
        /// The name of the cluster subnet group.
        public let clusterSubnetGroupName: String?

        public init(tags: TagList? = nil, vpcId: String? = nil, subnetGroupStatus: String? = nil, subnets: SubnetList? = nil, description: String? = nil, clusterSubnetGroupName: String? = nil) {
            self.tags = tags
            self.vpcId = vpcId
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.description = description
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case vpcId = "VpcId"
            case subnetGroupStatus = "SubnetGroupStatus"
            case subnets = "Subnets"
            case description = "Description"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
        }
    }

    public struct CopyClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSnapshotClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SourceSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints:   Must be the identifier for a valid cluster.  
        public let sourceSnapshotClusterIdentifier: String?
        /// The identifier for the source snapshot. Constraints:   Must be the identifier for a valid automated snapshot whose state is available.  
        public let sourceSnapshotIdentifier: String
        /// The identifier given to the new manual snapshot. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for the AWS account that is making the request.  
        public let targetSnapshotIdentifier: String

        public init(sourceSnapshotClusterIdentifier: String? = nil, sourceSnapshotIdentifier: String, targetSnapshotIdentifier: String) {
            self.sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier
            self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
            self.targetSnapshotIdentifier = targetSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSnapshotClusterIdentifier = "SourceSnapshotClusterIdentifier"
            case sourceSnapshotIdentifier = "SourceSnapshotIdentifier"
            case targetSnapshotIdentifier = "TargetSnapshotIdentifier"
        }
    }

    public struct ClusterIamRoleList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIamRole", required: false, type: .list)
        ]
        public let clusterIamRole: [ClusterIamRole]?

        public init(clusterIamRole: [ClusterIamRole]? = nil) {
            self.clusterIamRole = clusterIamRole
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIamRole = "ClusterIamRole"
        }
    }

    public struct DescribeHsmConfigurationsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
        public let hsmConfigurationIdentifier: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeHsmConfigurations request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, hsmConfigurationIdentifier: String? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.marker = marker
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case marker = "Marker"
            case tagKeys = "TagKeys"
        }
    }

    public struct ModifyClusterSubnetGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSubnetGroup", required: false, type: .structure)
        ]
        public let clusterSubnetGroup: ClusterSubnetGroup?

        public init(clusterSubnetGroup: ClusterSubnetGroup? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSubnetGroup = "ClusterSubnetGroup"
        }
    }

    public struct OrderableClusterOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableClusterOption", required: false, type: .list)
        ]
        public let orderableClusterOption: [OrderableClusterOption]?

        public init(orderableClusterOption: [OrderableClusterOption]? = nil) {
            self.orderableClusterOption = orderableClusterOption
        }

        private enum CodingKeys: String, CodingKey {
            case orderableClusterOption = "OrderableClusterOption"
        }
    }

    public struct CreateClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct RevokeClusterSecurityGroupIngressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CIDRIP", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        /// The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified, EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided. 
        public let cidrip: String?
        /// The AWS account number of the owner of the security group specified in the EC2SecurityGroupName parameter. The AWS access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified, EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided.  Example: 111122223333 
        public let eC2SecurityGroupOwnerId: String?
        /// The name of the security Group from which to revoke the ingress rule.
        public let clusterSecurityGroupName: String
        /// The name of the EC2 Security Group whose access is to be revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be provided and CIDRIP cannot be provided. 
        public let eC2SecurityGroupName: String?

        public init(cidrip: String? = nil, eC2SecurityGroupOwnerId: String? = nil, clusterSecurityGroupName: String, eC2SecurityGroupName: String? = nil) {
            self.cidrip = cidrip
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct ModifySnapshotCopyRetentionPeriodMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "RetentionPeriod", required: true, type: .integer)
        ]
        /// The unique identifier of the cluster for which you want to change the retention period for automated snapshots that are copied to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
        public let clusterIdentifier: String
        /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. If you decrease the retention period for automated snapshots that are copied to a destination region, Amazon Redshift will delete any existing automated snapshots that were copied to the destination region and that fall outside of the new retention period. Constraints: Must be at least 1 and no more than 35.
        public let retentionPeriod: Int32

        public init(clusterIdentifier: String, retentionPeriod: Int32) {
            self.clusterIdentifier = clusterIdentifier
            self.retentionPeriod = retentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case retentionPeriod = "RetentionPeriod"
        }
    }

    public struct ModifyClusterIamRolesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct TaggedResourceListMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TaggedResources", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of tags with their associated resources.
        public let taggedResources: TaggedResourceList?

        public init(marker: String? = nil, taggedResources: TaggedResourceList? = nil) {
            self.marker = marker
            self.taggedResources = taggedResources
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case taggedResources = "TaggedResources"
        }
    }

    public struct GetClusterCredentialsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "DbUser", required: true, type: .string), 
            AWSShapeMember(label: "DbGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DbName", required: false, type: .string), 
            AWSShapeMember(label: "AutoCreate", required: false, type: .boolean), 
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The number of seconds until the returned temporary password expires. Constraint: minimum 900, maximum 3600. Default: 900
        public let durationSeconds: Int32?
        /// The name of a database user. If a user name matching DbUser exists in the database, the temporary user credentials have the same permissions as the existing user. If DbUser doesn't exist in the database and Autocreate is True, a new user is created using the value for DbUser with PUBLIC permissions. If a database user matching the value for DbUser doesn't exist and Autocreate is False, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database. For more information, see CREATE USER in the Amazon Redshift Database Developer Guide.  Constraints:   Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be PUBLIC.   Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.   First character must be a letter.   Must not contain a colon ( : ) or slash ( / ).    Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.  
        public let dbUser: String
        /// A list of the names of existing database groups that the user named in DbUser will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC. Database group name constraints   Must be 1 to 64 alphanumeric characters or hyphens   Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.   First character must be a letter.   Must not contain a colon ( : ) or slash ( / ).    Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.  
        public let dbGroups: DbGroupList?
        /// The name of a database that DbUser is authorized to log on to. If DbName is not specified, DbUser can log on to any existing database. Constraints:   Must be 1 to 64 alphanumeric characters or hyphens   Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.   First character must be a letter.   Must not contain a colon ( : ) or slash ( / ).    Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.  
        public let dbName: String?
        /// Create a database user with the name specified for the user named in DbUser if one does not exist.
        public let autoCreate: Bool?
        /// The unique identifier of the cluster that contains the database for which your are requesting credentials. This parameter is case sensitive.
        public let clusterIdentifier: String

        public init(durationSeconds: Int32? = nil, dbUser: String, dbGroups: DbGroupList? = nil, dbName: String? = nil, autoCreate: Bool? = nil, clusterIdentifier: String) {
            self.durationSeconds = durationSeconds
            self.dbUser = dbUser
            self.dbGroups = dbGroups
            self.dbName = dbName
            self.autoCreate = autoCreate
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case durationSeconds = "DurationSeconds"
            case dbUser = "DbUser"
            case dbGroups = "DbGroups"
            case dbName = "DbName"
            case autoCreate = "AutoCreate"
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct ClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroups", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of ClusterParameterGroup instances. Each instance describes one cluster parameter group. 
        public let parameterGroups: ParameterGroupList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(parameterGroups: ParameterGroupList? = nil, marker: String? = nil) {
            self.parameterGroups = parameterGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroups = "ParameterGroups"
            case marker = "Marker"
        }
    }

    public struct HsmStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: false, type: .string)
        ]
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// Reports whether the Amazon Redshift cluster has finished applying any HSM settings changes specified in a modify cluster command. Values: active, applying
        public let status: String?
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?

        public init(hsmConfigurationIdentifier: String? = nil, status: String? = nil, hsmClientCertificateIdentifier: String? = nil) {
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.status = status
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case status = "Status"
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        }
    }

    public struct PendingModifiedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomatedSnapshotRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "ClusterType", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "EnhancedVpcRouting", required: false, type: .boolean)
        ]
        /// The pending or in-progress change of the automated snapshot retention period.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// The pending or in-progress change of the number of nodes in the cluster.
        public let numberOfNodes: Int32?
        /// The pending or in-progress change of the service version.
        public let clusterVersion: String?
        /// The pending or in-progress change of the cluster type.
        public let clusterType: String?
        /// The pending or in-progress change of the new identifier for the cluster.
        public let clusterIdentifier: String?
        /// The pending or in-progress change of the master user password for the cluster.
        public let masterUserPassword: String?
        /// The pending or in-progress change of the cluster's node type.
        public let nodeType: String?
        /// The pending or in-progress change of the ability to connect to the cluster from the public network.
        public let publiclyAccessible: Bool?
        /// The name of the maintenance track that the cluster will change to during the next maintenance window.
        public let maintenanceTrackName: String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?

        public init(automatedSnapshotRetentionPeriod: Int32? = nil, numberOfNodes: Int32? = nil, clusterVersion: String? = nil, clusterType: String? = nil, clusterIdentifier: String? = nil, masterUserPassword: String? = nil, nodeType: String? = nil, publiclyAccessible: Bool? = nil, maintenanceTrackName: String? = nil, enhancedVpcRouting: Bool? = nil) {
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.numberOfNodes = numberOfNodes
            self.clusterVersion = clusterVersion
            self.clusterType = clusterType
            self.clusterIdentifier = clusterIdentifier
            self.masterUserPassword = masterUserPassword
            self.nodeType = nodeType
            self.publiclyAccessible = publiclyAccessible
            self.maintenanceTrackName = maintenanceTrackName
            self.enhancedVpcRouting = enhancedVpcRouting
        }

        private enum CodingKeys: String, CodingKey {
            case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
            case numberOfNodes = "NumberOfNodes"
            case clusterVersion = "ClusterVersion"
            case clusterType = "ClusterType"
            case clusterIdentifier = "ClusterIdentifier"
            case masterUserPassword = "MasterUserPassword"
            case nodeType = "NodeType"
            case publiclyAccessible = "PubliclyAccessible"
            case maintenanceTrackName = "MaintenanceTrackName"
            case enhancedVpcRouting = "EnhancedVpcRouting"
        }
    }

    public struct DeleteClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct ReservedNodesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReservedNodes", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// The list of ReservedNode objects.
        public let reservedNodes: ReservedNodeList?

        public init(marker: String? = nil, reservedNodes: ReservedNodeList? = nil) {
            self.marker = marker
            self.reservedNodes = reservedNodes
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedNodes = "ReservedNodes"
        }
    }

    public struct IPRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CIDRIP", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The IP range in Classless Inter-Domain Routing (CIDR) notation.
        public let cidrip: String?
        /// The status of the IP range, for example, "authorized".
        public let status: String?
        /// The list of tags for the IP range.
        public let tags: TagList?

        public init(cidrip: String? = nil, status: String? = nil, tags: TagList? = nil) {
            self.cidrip = cidrip
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case status = "Status"
            case tags = "Tags"
        }
    }

    public struct ClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Clusters", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Cluster objects, where each object describes one cluster. 
        public let clusters: ClusterList?

        public init(marker: String? = nil, clusters: ClusterList? = nil) {
            self.marker = marker
            self.clusters = clusters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusters = "Clusters"
        }
    }

    public struct TableRestoreStatusList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableRestoreStatus", required: false, type: .list)
        ]
        public let tableRestoreStatus: [TableRestoreStatus]?

        public init(tableRestoreStatus: [TableRestoreStatus]? = nil) {
            self.tableRestoreStatus = tableRestoreStatus
        }

        private enum CodingKeys: String, CodingKey {
            case tableRestoreStatus = "TableRestoreStatus"
        }
    }

    public struct ModifySnapshotCopyRetentionPeriodResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetStatus", required: false, type: .string)
        ]
        /// The identifier of the subnet.
        public let subnetIdentifier: String?
        public let subnetAvailabilityZone: AvailabilityZone?
        /// The status of the subnet.
        public let subnetStatus: String?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetStatus = "SubnetStatus"
        }
    }

    public struct ReservedNodeOfferingsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReservedNodeOfferings", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of ReservedNodeOffering objects.
        public let reservedNodeOfferings: ReservedNodeOfferingList?

        public init(marker: String? = nil, reservedNodeOfferings: ReservedNodeOfferingList? = nil) {
            self.marker = marker
            self.reservedNodeOfferings = reservedNodeOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedNodeOfferings = "ReservedNodeOfferings"
        }
    }

    public struct DescribeHsmClientCertificatesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
        public let hsmClientCertificateIdentifier: String?
        /// A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeHsmClientCertificates request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, hsmClientCertificateIdentifier: String? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.tagKeys = tagKeys
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
            case tagKeys = "TagKeys"
            case marker = "Marker"
        }
    }

    public struct HsmConfigurationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmConfigurations", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of HsmConfiguration objects.
        public let hsmConfigurations: HsmConfigurationList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(hsmConfigurations: HsmConfigurationList? = nil, marker: String? = nil) {
            self.hsmConfigurations = hsmConfigurations
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case hsmConfigurations = "HsmConfigurations"
            case marker = "Marker"
        }
    }

    public struct EventSubscriptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .list)
        ]
        public let eventSubscription: [EventSubscription]?

        public init(eventSubscription: [EventSubscription]? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DescribeClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the ClusterIdentifier parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive. The default is that all clusters defined for an account are returned.
        public let clusterIdentifier: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil, clusterIdentifier: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case marker = "Marker"
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct DescribeClusterVersionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The name of a specific cluster parameter group family to return details for. Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let clusterParameterGroupFamily: String?
        /// The specific cluster version to return. Example: 1.0 
        public let clusterVersion: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterVersions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, clusterParameterGroupFamily: String? = nil, clusterVersion: String? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.clusterVersion = clusterVersion
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case clusterParameterGroupFamily = "ClusterParameterGroupFamily"
            case clusterVersion = "ClusterVersion"
            case marker = "Marker"
        }
    }

    public struct ModifyEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct ClusterDbRevisionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterDbRevision", required: false, type: .list)
        ]
        public let clusterDbRevision: [ClusterDbRevision]?

        public init(clusterDbRevision: [ClusterDbRevision]? = nil) {
            self.clusterDbRevision = clusterDbRevision
        }

        private enum CodingKeys: String, CodingKey {
            case clusterDbRevision = "ClusterDbRevision"
        }
    }

    public struct DescribeTagsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure)
        ]
        /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. 
        public let maxRecords: Int32?
        /// The type of resource with which you want to view tags. Valid resource types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group   Subnet group   HSM connection   HSM certificate   Parameter group   Snapshot copy grant   For more information about Amazon Redshift resource types and constructing ARNs, go to Specifying Policy Elements: Actions, Effects, Resources, and Principals in the Amazon Redshift Cluster Management Guide. 
        public let resourceType: String?
        /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        public let resourceName: String?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, resourceType: String? = nil, tagValues: TagValueList? = nil, resourceName: String? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.resourceType = resourceType
            self.tagValues = tagValues
            self.resourceName = resourceName
            self.marker = marker
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case resourceType = "ResourceType"
            case tagValues = "TagValues"
            case resourceName = "ResourceName"
            case marker = "Marker"
            case tagKeys = "TagKeys"
        }
    }

    public struct ClusterSecurityGroupNameList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroupName", required: false, type: .list)
        ]
        public let clusterSecurityGroupName: [String]?

        public init(clusterSecurityGroupName: [String]? = nil) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
        }
    }

    public struct CreateClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "ParameterGroupFamily", required: true, type: .string)
        ]
        /// The name of the cluster parameter group. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique withing your AWS account.    This value is stored as a lower-case string. 
        public let parameterGroupName: String
        /// A list of tag instances.
        public let tags: TagList?
        /// A description of the parameter group.
        public let description: String
        /// The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters. To get a list of valid parameter group family names, you can call DescribeClusterParameterGroups. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". 
        public let parameterGroupFamily: String

        public init(parameterGroupName: String, tags: TagList? = nil, description: String, parameterGroupFamily: String) {
            self.parameterGroupName = parameterGroupName
            self.tags = tags
            self.description = description
            self.parameterGroupFamily = parameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case tags = "Tags"
            case description = "Description"
            case parameterGroupFamily = "ParameterGroupFamily"
        }
    }

    public struct DbGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DbGroup", required: false, type: .list)
        ]
        public let dbGroup: [String]?

        public init(dbGroup: [String]? = nil) {
            self.dbGroup = dbGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dbGroup = "DbGroup"
        }
    }

    public struct ElasticIpStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticIp", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// The elastic IP (EIP) address for the cluster.
        public let elasticIp: String?
        /// The status of the elastic IP (EIP) address.
        public let status: String?

        public init(elasticIp: String? = nil, status: String? = nil) {
            self.elasticIp = elasticIp
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case elasticIp = "ElasticIp"
            case status = "Status"
        }
    }

    public struct RebootClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The cluster identifier.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct EventInfoMapList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventInfoMap", required: false, type: .list)
        ]
        public let eventInfoMap: [EventInfoMap]?

        public init(eventInfoMap: [EventInfoMap]? = nil) {
            self.eventInfoMap = eventInfoMap
        }

        private enum CodingKeys: String, CodingKey {
            case eventInfoMap = "EventInfoMap"
        }
    }

    public struct Endpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The DNS address of the Cluster.
        public let address: String?
        /// The port that the database engine is listening on.
        public let port: Int32?

        public init(address: String? = nil, port: Int32? = nil) {
            self.address = address
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case port = "Port"
        }
    }

    public struct DeleteTagsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// The tag key that you want to delete.
        public let tagKeys: TagKeyList
        /// The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        public let resourceName: String

        public init(tagKeys: TagKeyList, resourceName: String) {
            self.tagKeys = tagKeys
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case resourceName = "ResourceName"
        }
    }

    public struct DescribeOrderableClusterOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The version filter value. Specify this parameter to show only the available offerings matching the specified version. Default: All versions. Constraints: Must be one of the version returned from DescribeClusterVersions.
        public let clusterVersion: String?
        /// The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
        public let nodeType: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeOrderableClusterOptions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, clusterVersion: String? = nil, nodeType: String? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case clusterVersion = "ClusterVersion"
            case nodeType = "NodeType"
            case marker = "Marker"
        }
    }

    public struct IamRoleArnList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamRoleArn", required: false, type: .list)
        ]
        public let iamRoleArn: [String]?

        public init(iamRoleArn: [String]? = nil) {
            self.iamRoleArn = iamRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case iamRoleArn = "IamRoleArn"
        }
    }

    public struct ClusterParameterGroupNameMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupStatus", required: false, type: .string)
        ]
        /// The name of the cluster parameter group.
        public let parameterGroupName: String?
        /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
        public let parameterGroupStatus: String?

        public init(parameterGroupName: String? = nil, parameterGroupStatus: String? = nil) {
            self.parameterGroupName = parameterGroupName
            self.parameterGroupStatus = parameterGroupStatus
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case parameterGroupStatus = "ParameterGroupStatus"
        }
    }

    public struct CreateEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: true, type: .string), 
            AWSShapeMember(label: "SourceIds", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Severity", required: false, type: .string)
        ]
        /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
        public let sourceType: String?
        /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: Configuration, Management, Monitoring, Security
        public let eventCategories: EventCategoriesList?
        /// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it. 
        public let enabled: Bool?
        /// The name of the event subscription to be created. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let subscriptionName: String
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String
        /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
        public let sourceIds: SourceIdsList?
        /// A list of tag instances.
        public let tags: TagList?
        /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
        public let severity: String?

        public init(sourceType: String? = nil, eventCategories: EventCategoriesList? = nil, enabled: Bool? = nil, subscriptionName: String, snsTopicArn: String, sourceIds: SourceIdsList? = nil, tags: TagList? = nil, severity: String? = nil) {
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.subscriptionName = subscriptionName
            self.snsTopicArn = snsTopicArn
            self.sourceIds = sourceIds
            self.tags = tags
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
            case enabled = "Enabled"
            case subscriptionName = "SubscriptionName"
            case snsTopicArn = "SnsTopicArn"
            case sourceIds = "SourceIds"
            case tags = "Tags"
            case severity = "Severity"
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .string)
        ]
        /// The status of the VPC security group.
        public let status: String?
        /// The identifier of the VPC security group.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct UpdateTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseVersion", required: false, type: .string)
        ]
        /// The name of the new maintenance track.
        public let maintenanceTrackName: String?
        /// The cluster version for the new maintenance track.
        public let databaseVersion: String?

        public init(maintenanceTrackName: String? = nil, databaseVersion: String? = nil) {
            self.maintenanceTrackName = maintenanceTrackName
            self.databaseVersion = databaseVersion
        }

        private enum CodingKeys: String, CodingKey {
            case maintenanceTrackName = "MaintenanceTrackName"
            case databaseVersion = "DatabaseVersion"
        }
    }

    public struct Snapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalBackupSizeInMegaBytes", required: false, type: .double), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ElapsedTimeInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "EstimatedSecondsToCompletion", required: false, type: .long), 
            AWSShapeMember(label: "CurrentBackupRateInMegaBytesPerSecond", required: false, type: .double), 
            AWSShapeMember(label: "BackupProgressInMegaBytes", required: false, type: .double), 
            AWSShapeMember(label: "OwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "EnhancedVpcRouting", required: false, type: .boolean), 
            AWSShapeMember(label: "AccountsWithRestoreAccess", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "ActualIncrementalBackupSizeInMegaBytes", required: false, type: .double), 
            AWSShapeMember(label: "SourceRegion", required: false, type: .string), 
            AWSShapeMember(label: "EncryptedWithHSM", required: false, type: .boolean), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "RestorableNodeTypes", required: false, type: .structure)
        ]
        /// The size of the complete set of backup data that would be used to restore the cluster.
        public let totalBackupSizeInMegaBytes: Double?
        /// The Availability Zone in which the cluster was created.
        public let availabilityZone: String?
        /// The name of the maintenance track for the snapshot.
        public let maintenanceTrackName: String?
        /// The name of the database that was created when the cluster was created.
        public let dBName: String?
        /// The identifier of the cluster for which the snapshot was taken.
        public let clusterIdentifier: String?
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        public let elapsedTimeInSeconds: Int64?
        /// The AWS Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        public let kmsKeyId: String?
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup. 
        public let estimatedSecondsToCompletion: Int64?
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup. 
        public let currentBackupRateInMegaBytesPerSecond: Double?
        /// The number of megabytes that have been transferred to the snapshot backup.
        public let backupProgressInMegaBytes: Double?
        /// For manual snapshots, the AWS customer account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        public let ownerAccount: String?
        /// The number of nodes in the cluster.
        public let numberOfNodes: Int32?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// A list of the AWS customer accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner. 
        public let accountsWithRestoreAccess: AccountsWithRestoreAccessList?
        /// The time (UTC) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        public let snapshotCreateTime: TimeStamp?
        /// The snapshot type. Snapshots created using CreateClusterSnapshot and CopyClusterSnapshot will be of type "manual". 
        public let snapshotType: String?
        /// The size of the incremental backup.
        public let actualIncrementalBackupSizeInMegaBytes: Double?
        /// The source region from which the snapshot was copied.
        public let sourceRegion: String?
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        public let encryptedWithHSM: Bool?
        /// The snapshot status. The value of the status depends on the API operation used.     CreateClusterSnapshot and CopyClusterSnapshot returns status as "creating".     DescribeClusterSnapshots returns status as "creating", "available", "final snapshot", or "failed".    DeleteClusterSnapshot returns status as "deleted".  
        public let status: String?
        /// If true, the data in the snapshot is encrypted at rest.
        public let encrypted: Bool?
        /// The node type of the nodes in the cluster.
        public let nodeType: String?
        /// The snapshot identifier that is provided in the request.
        public let snapshotIdentifier: String?
        /// The time (UTC) when the cluster was originally created.
        public let clusterCreateTime: TimeStamp?
        /// The master user name for the cluster.
        public let masterUsername: String?
        /// The list of tags for the cluster snapshot.
        public let tags: TagList?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public let clusterVersion: String?
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        public let vpcId: String?
        /// The port that the cluster is listening on.
        public let port: Int32?
        /// The list of node types that this cluster snapshot is able to restore into.
        public let restorableNodeTypes: RestorableNodeTypeList?

        public init(totalBackupSizeInMegaBytes: Double? = nil, availabilityZone: String? = nil, maintenanceTrackName: String? = nil, dBName: String? = nil, clusterIdentifier: String? = nil, elapsedTimeInSeconds: Int64? = nil, kmsKeyId: String? = nil, estimatedSecondsToCompletion: Int64? = nil, currentBackupRateInMegaBytesPerSecond: Double? = nil, backupProgressInMegaBytes: Double? = nil, ownerAccount: String? = nil, numberOfNodes: Int32? = nil, enhancedVpcRouting: Bool? = nil, accountsWithRestoreAccess: AccountsWithRestoreAccessList? = nil, snapshotCreateTime: TimeStamp? = nil, snapshotType: String? = nil, actualIncrementalBackupSizeInMegaBytes: Double? = nil, sourceRegion: String? = nil, encryptedWithHSM: Bool? = nil, status: String? = nil, encrypted: Bool? = nil, nodeType: String? = nil, snapshotIdentifier: String? = nil, clusterCreateTime: TimeStamp? = nil, masterUsername: String? = nil, tags: TagList? = nil, clusterVersion: String? = nil, vpcId: String? = nil, port: Int32? = nil, restorableNodeTypes: RestorableNodeTypeList? = nil) {
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.availabilityZone = availabilityZone
            self.maintenanceTrackName = maintenanceTrackName
            self.dBName = dBName
            self.clusterIdentifier = clusterIdentifier
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.kmsKeyId = kmsKeyId
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.ownerAccount = ownerAccount
            self.numberOfNodes = numberOfNodes
            self.enhancedVpcRouting = enhancedVpcRouting
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.sourceRegion = sourceRegion
            self.encryptedWithHSM = encryptedWithHSM
            self.status = status
            self.encrypted = encrypted
            self.nodeType = nodeType
            self.snapshotIdentifier = snapshotIdentifier
            self.clusterCreateTime = clusterCreateTime
            self.masterUsername = masterUsername
            self.tags = tags
            self.clusterVersion = clusterVersion
            self.vpcId = vpcId
            self.port = port
            self.restorableNodeTypes = restorableNodeTypes
        }

        private enum CodingKeys: String, CodingKey {
            case totalBackupSizeInMegaBytes = "TotalBackupSizeInMegaBytes"
            case availabilityZone = "AvailabilityZone"
            case maintenanceTrackName = "MaintenanceTrackName"
            case dBName = "DBName"
            case clusterIdentifier = "ClusterIdentifier"
            case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
            case kmsKeyId = "KmsKeyId"
            case estimatedSecondsToCompletion = "EstimatedSecondsToCompletion"
            case currentBackupRateInMegaBytesPerSecond = "CurrentBackupRateInMegaBytesPerSecond"
            case backupProgressInMegaBytes = "BackupProgressInMegaBytes"
            case ownerAccount = "OwnerAccount"
            case numberOfNodes = "NumberOfNodes"
            case enhancedVpcRouting = "EnhancedVpcRouting"
            case accountsWithRestoreAccess = "AccountsWithRestoreAccess"
            case snapshotCreateTime = "SnapshotCreateTime"
            case snapshotType = "SnapshotType"
            case actualIncrementalBackupSizeInMegaBytes = "ActualIncrementalBackupSizeInMegaBytes"
            case sourceRegion = "SourceRegion"
            case encryptedWithHSM = "EncryptedWithHSM"
            case status = "Status"
            case encrypted = "Encrypted"
            case nodeType = "NodeType"
            case snapshotIdentifier = "SnapshotIdentifier"
            case clusterCreateTime = "ClusterCreateTime"
            case masterUsername = "MasterUsername"
            case tags = "Tags"
            case clusterVersion = "ClusterVersion"
            case vpcId = "VpcId"
            case port = "Port"
            case restorableNodeTypes = "RestorableNodeTypes"
        }
    }

    public struct ClusterParameterGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterApplyStatus", required: false, type: .string), 
            AWSShapeMember(label: "ClusterParameterStatusList", required: false, type: .list)
        ]
        /// The name of the cluster parameter group.
        public let parameterGroupName: String?
        /// The status of parameter updates.
        public let parameterApplyStatus: String?
        /// The list of parameter statuses.  For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
        public let clusterParameterStatusList: [ClusterParameterStatus]?

        public init(parameterGroupName: String? = nil, parameterApplyStatus: String? = nil, clusterParameterStatusList: [ClusterParameterStatus]? = nil) {
            self.parameterGroupName = parameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
            self.clusterParameterStatusList = clusterParameterStatusList
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case parameterApplyStatus = "ParameterApplyStatus"
            case clusterParameterStatusList = "ClusterParameterStatusList"
        }
    }

    public struct ClusterSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroupName", required: false, type: .string)
        ]
        /// The status of the cluster security group.
        public let status: String?
        /// The name of the cluster security group.
        public let clusterSecurityGroupName: String?

        public init(status: String? = nil, clusterSecurityGroupName: String? = nil) {
            self.status = status
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
        }
    }

    public struct RevisionTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatabaseRevision", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseRevisionReleaseDate", required: false, type: .timestamp)
        ]
        /// A unique string that identifies the version to update the cluster to. You can use this value in ModifyClusterDbRevision.
        public let databaseRevision: String?
        /// A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding ClusterDbRevision.
        public let description: String?
        /// The date on which the database revision was released.
        public let databaseRevisionReleaseDate: TimeStamp?

        public init(databaseRevision: String? = nil, description: String? = nil, databaseRevisionReleaseDate: TimeStamp? = nil) {
            self.databaseRevision = databaseRevision
            self.description = description
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
        }

        private enum CodingKeys: String, CodingKey {
            case databaseRevision = "DatabaseRevision"
            case description = "Description"
            case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        }
    }

    public struct ClusterVersionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterVersions", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Version elements. 
        public let clusterVersions: ClusterVersionList?

        public init(marker: String? = nil, clusterVersions: ClusterVersionList? = nil) {
            self.marker = marker
            self.clusterVersions = clusterVersions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterVersions = "ClusterVersions"
        }
    }

    public struct ClusterSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSubnetGroups", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of ClusterSubnetGroup instances. 
        public let clusterSubnetGroups: ClusterSubnetGroups?

        public init(marker: String? = nil, clusterSubnetGroups: ClusterSubnetGroups? = nil) {
            self.marker = marker
            self.clusterSubnetGroups = clusterSubnetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterSubnetGroups = "ClusterSubnetGroups"
        }
    }

    public struct ModifyClusterDbRevisionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "RevisionTarget", required: true, type: .string)
        ]
        /// The unique identifier of a cluster whose database revision you want to modify.  Example: examplecluster 
        public let clusterIdentifier: String
        /// The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.
        public let revisionTarget: String

        public init(clusterIdentifier: String, revisionTarget: String) {
            self.clusterIdentifier = clusterIdentifier
            self.revisionTarget = revisionTarget
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case revisionTarget = "RevisionTarget"
        }
    }

    public struct DescribeClusterSecurityGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroupName", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSecurityGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// The name of a cluster security group for which you are requesting details. You can specify either the Marker parameter or a ClusterSecurityGroupName parameter, but not both.   Example: securitygroup1 
        public let clusterSecurityGroupName: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil, clusterSecurityGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case marker = "Marker"
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
        }
    }

    public struct AuthorizeClusterSecurityGroupIngressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CIDRIP", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        /// The IP range to be added the Amazon Redshift security group.
        public let cidrip: String?
        /// The AWS account number of the owner of the security group specified by the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value.  Example: 111122223333 
        public let eC2SecurityGroupOwnerId: String?
        /// The name of the security group to which the ingress rule is added.
        public let clusterSecurityGroupName: String
        /// The EC2 security group to be added the Amazon Redshift security group.
        public let eC2SecurityGroupName: String?

        public init(cidrip: String? = nil, eC2SecurityGroupOwnerId: String? = nil, clusterSecurityGroupName: String, eC2SecurityGroupName: String? = nil) {
            self.cidrip = cidrip
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public enum TableRestoreStatusType: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct ClusterParameterGroupDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of Parameter instances. Each instance lists the parameters of one cluster parameter group. 
        public let parameters: ParametersList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil) {
            self.parameters = parameters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
        }
    }

    public struct EC2SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        /// The list of tags for the EC2 security group.
        public let tags: TagList?
        /// The AWS ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field. 
        public let eC2SecurityGroupOwnerId: String?
        /// The status of the EC2 security group.
        public let status: String?
        /// The name of the EC2 Security Group.
        public let eC2SecurityGroupName: String?

        public init(tags: TagList? = nil, eC2SecurityGroupOwnerId: String? = nil, status: String? = nil, eC2SecurityGroupName: String? = nil) {
            self.tags = tags
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.status = status
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case status = "Status"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct TrackList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaintenanceTrack", required: false, type: .list)
        ]
        public let maintenanceTrack: [MaintenanceTrack]?

        public init(maintenanceTrack: [MaintenanceTrack]? = nil) {
            self.maintenanceTrack = maintenanceTrack
        }

        private enum CodingKeys: String, CodingKey {
            case maintenanceTrack = "MaintenanceTrack"
        }
    }

    public struct EventInfoMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Severity", required: false, type: .string), 
            AWSShapeMember(label: "EventDescription", required: false, type: .string), 
            AWSShapeMember(label: "EventId", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure)
        ]
        /// The severity of the event. Values: ERROR, INFO
        public let severity: String?
        /// The description of an Amazon Redshift event.
        public let eventDescription: String?
        /// The identifier of an Amazon Redshift event.
        public let eventId: String?
        /// The category of an Amazon Redshift event.
        public let eventCategories: EventCategoriesList?

        public init(severity: String? = nil, eventDescription: String? = nil, eventId: String? = nil, eventCategories: EventCategoriesList? = nil) {
            self.severity = severity
            self.eventDescription = eventDescription
            self.eventId = eventId
            self.eventCategories = eventCategories
        }

        private enum CodingKeys: String, CodingKey {
            case severity = "Severity"
            case eventDescription = "EventDescription"
            case eventId = "EventId"
            case eventCategories = "EventCategories"
        }
    }

    public struct AccountWithRestoreAccess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountAlias", required: false, type: .string), 
            AWSShapeMember(label: "AccountId", required: false, type: .string)
        ]
        /// The identifier of an AWS support account authorized to restore a snapshot. For AWS support, the identifier is amazon-redshift-support. 
        public let accountAlias: String?
        /// The identifier of an AWS customer account authorized to restore a snapshot.
        public let accountId: String?

        public init(accountAlias: String? = nil, accountId: String? = nil) {
            self.accountAlias = accountAlias
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case accountAlias = "AccountAlias"
            case accountId = "AccountId"
        }
    }

    public struct ClusterSnapshotCopyStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrantName", required: false, type: .string), 
            AWSShapeMember(label: "RetentionPeriod", required: false, type: .long), 
            AWSShapeMember(label: "DestinationRegion", required: false, type: .string)
        ]
        /// The name of the snapshot copy grant.
        public let snapshotCopyGrantName: String?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region.
        public let retentionPeriod: Int64?
        /// The destination region that snapshots are automatically copied to when cross-region snapshot copy is enabled.
        public let destinationRegion: String?

        public init(snapshotCopyGrantName: String? = nil, retentionPeriod: Int64? = nil, destinationRegion: String? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.retentionPeriod = retentionPeriod
            self.destinationRegion = destinationRegion
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrantName = "SnapshotCopyGrantName"
            case retentionPeriod = "RetentionPeriod"
            case destinationRegion = "DestinationRegion"
        }
    }

    public struct DeleteClusterSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroupName", required: true, type: .string)
        ]
        /// The name of the cluster security group to be deleted.
        public let clusterSecurityGroupName: String

        public init(clusterSecurityGroupName: String) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
        }
    }

    public struct TaggedResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: false, type: .string)
        ]
        /// The type of resource with which the tag is associated. Valid resource types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group   Subnet group   HSM connection   HSM certificate   Parameter group   For more information about Amazon Redshift resource types and constructing ARNs, go to Constructing an Amazon Redshift Amazon Resource Name (ARN) in the Amazon Redshift Cluster Management Guide. 
        public let resourceType: String?
        /// The tag for the resource.
        public let tag: Tag?
        /// The Amazon Resource Name (ARN) with which the tag is associated. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1.
        public let resourceName: String?

        public init(resourceType: String? = nil, tag: Tag? = nil, resourceName: String? = nil) {
            self.resourceType = resourceType
            self.tag = tag
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tag = "Tag"
            case resourceName = "ResourceName"
        }
    }

    public struct RestoreFromClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct EC2SecurityGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroup", required: false, type: .list)
        ]
        public let eC2SecurityGroup: [EC2SecurityGroup]?

        public init(eC2SecurityGroup: [EC2SecurityGroup]? = nil) {
            self.eC2SecurityGroup = eC2SecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroup = "EC2SecurityGroup"
        }
    }

    public struct CreateClusterParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterParameterGroup", required: false, type: .structure)
        ]
        public let clusterParameterGroup: ClusterParameterGroup?

        public init(clusterParameterGroup: ClusterParameterGroup? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterParameterGroup = "ClusterParameterGroup"
        }
    }

    public struct AvailabilityZoneList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .list)
        ]
        public let availabilityZone: [AvailabilityZone]?

        public init(availabilityZone: [AvailabilityZone]? = nil) {
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct TaggedResourceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TaggedResource", required: false, type: .list)
        ]
        public let taggedResource: [TaggedResource]?

        public init(taggedResource: [TaggedResource]? = nil) {
            self.taggedResource = taggedResource
        }

        private enum CodingKeys: String, CodingKey {
            case taggedResource = "TaggedResource"
        }
    }

    public struct DescribeDefaultClusterParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultClusterParameters", required: false, type: .structure)
        ]
        public let defaultClusterParameters: DefaultClusterParameters?

        public init(defaultClusterParameters: DefaultClusterParameters? = nil) {
            self.defaultClusterParameters = defaultClusterParameters
        }

        private enum CodingKeys: String, CodingKey {
            case defaultClusterParameters = "DefaultClusterParameters"
        }
    }

    public struct TagValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagValue", required: false, type: .list)
        ]
        public let tagValue: [String]?

        public init(tagValue: [String]? = nil) {
            self.tagValue = tagValue
        }

        private enum CodingKeys: String, CodingKey {
            case tagValue = "TagValue"
        }
    }

    public struct RestoreFromClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IamRoles", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string), 
            AWSShapeMember(label: "ClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ElasticIp", required: false, type: .string), 
            AWSShapeMember(label: "OwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "AutomatedSnapshotRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "EnhancedVpcRouting", required: false, type: .boolean), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterSecurityGroups", required: false, type: .structure)
        ]
        /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.  Default: true 
        public let allowVersionUpgrade: Bool?
        /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster. VPC security groups only apply to clusters in VPCs.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
        public let kmsKeyId: String?
        /// The name of the subnet group where you want to cluster restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.
        public let clusterSubnetGroupName: String?
        /// The identifier of the cluster that will be created from restoring the snapshot. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.  
        public let clusterIdentifier: String
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request. A cluster can have up to 10 IAM roles associated at any time.
        public let iamRoles: IamRoleArnList?
        /// The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. Example: my-snapshot-id 
        public let snapshotIdentifier: String
        /// The node type that the restored cluster will be provisioned with. Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlareg cluster, then resize to a dc2.8large cluster. For more information about node types, see  About Clusters and Nodes in the Amazon Redshift Cluster Management Guide. 
        public let nodeType: String?
        /// The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        public let snapshotClusterIdentifier: String?
        /// Reserved.
        public let additionalInfo: String?
        /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to Working with Amazon Redshift Parameter Groups. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterParameterGroupName: String?
        /// The elastic IP (EIP) address for the cluster.
        public let elasticIp: String?
        /// The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
        public let ownerAccount: String?
        /// The Amazon EC2 Availability Zone in which to restore the cluster. Default: A random, system-chosen Availability Zone. Example: us-east-1a 
        public let availabilityZone: String?
        /// The weekly time range (in UTC) during which automated cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management Guide.  Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  Default: The value selected for the cluster from which the snapshot was taken. Constraints: Must be a value from 0 to 35.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
        public let maintenanceTrackName: String?
        /// If true, the cluster can be accessed from a public network. 
        public let publiclyAccessible: Bool?
        /// The port number on which the cluster accepts connections. Default: The same port as the original cluster. Constraints: Must be between 1115 and 65535.
        public let port: Int32?
        /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift. Cluster security groups only apply to clusters outside of VPCs.
        public let clusterSecurityGroups: ClusterSecurityGroupNameList?

        public init(allowVersionUpgrade: Bool? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, kmsKeyId: String? = nil, clusterSubnetGroupName: String? = nil, clusterIdentifier: String, hsmClientCertificateIdentifier: String? = nil, hsmConfigurationIdentifier: String? = nil, iamRoles: IamRoleArnList? = nil, snapshotIdentifier: String, nodeType: String? = nil, snapshotClusterIdentifier: String? = nil, additionalInfo: String? = nil, clusterParameterGroupName: String? = nil, elasticIp: String? = nil, ownerAccount: String? = nil, availabilityZone: String? = nil, preferredMaintenanceWindow: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, enhancedVpcRouting: Bool? = nil, maintenanceTrackName: String? = nil, publiclyAccessible: Bool? = nil, port: Int32? = nil, clusterSecurityGroups: ClusterSecurityGroupNameList? = nil) {
            self.allowVersionUpgrade = allowVersionUpgrade
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.kmsKeyId = kmsKeyId
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.clusterIdentifier = clusterIdentifier
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.iamRoles = iamRoles
            self.snapshotIdentifier = snapshotIdentifier
            self.nodeType = nodeType
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.additionalInfo = additionalInfo
            self.clusterParameterGroupName = clusterParameterGroupName
            self.elasticIp = elasticIp
            self.ownerAccount = ownerAccount
            self.availabilityZone = availabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.enhancedVpcRouting = enhancedVpcRouting
            self.maintenanceTrackName = maintenanceTrackName
            self.publiclyAccessible = publiclyAccessible
            self.port = port
            self.clusterSecurityGroups = clusterSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case allowVersionUpgrade = "AllowVersionUpgrade"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case kmsKeyId = "KmsKeyId"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
            case clusterIdentifier = "ClusterIdentifier"
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case iamRoles = "IamRoles"
            case snapshotIdentifier = "SnapshotIdentifier"
            case nodeType = "NodeType"
            case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
            case additionalInfo = "AdditionalInfo"
            case clusterParameterGroupName = "ClusterParameterGroupName"
            case elasticIp = "ElasticIp"
            case ownerAccount = "OwnerAccount"
            case availabilityZone = "AvailabilityZone"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
            case enhancedVpcRouting = "EnhancedVpcRouting"
            case maintenanceTrackName = "MaintenanceTrackName"
            case publiclyAccessible = "PubliclyAccessible"
            case port = "Port"
            case clusterSecurityGroups = "ClusterSecurityGroups"
        }
    }

    public struct RestoreTableFromClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetSchemaName", required: false, type: .string), 
            AWSShapeMember(label: "SourceSchemaName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetDatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "SourceTableName", required: true, type: .string), 
            AWSShapeMember(label: "NewTableName", required: true, type: .string), 
            AWSShapeMember(label: "SourceDatabaseName", required: true, type: .string)
        ]
        /// The name of the schema to restore the table to.
        public let targetSchemaName: String?
        /// The name of the source schema that contains the table to restore from. If you do not specify a SourceSchemaName value, the default is public.
        public let sourceSchemaName: String?
        /// The identifier of the Amazon Redshift cluster to restore the table to.
        public let clusterIdentifier: String
        /// The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the ClusterIdentifier parameter.
        public let snapshotIdentifier: String
        /// The name of the database to restore the table to.
        public let targetDatabaseName: String?
        /// The name of the source table to restore from.
        public let sourceTableName: String
        /// The name of the table to create as a result of the current request.
        public let newTableName: String
        /// The name of the source database that contains the table to restore from.
        public let sourceDatabaseName: String

        public init(targetSchemaName: String? = nil, sourceSchemaName: String? = nil, clusterIdentifier: String, snapshotIdentifier: String, targetDatabaseName: String? = nil, sourceTableName: String, newTableName: String, sourceDatabaseName: String) {
            self.targetSchemaName = targetSchemaName
            self.sourceSchemaName = sourceSchemaName
            self.clusterIdentifier = clusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
            self.targetDatabaseName = targetDatabaseName
            self.sourceTableName = sourceTableName
            self.newTableName = newTableName
            self.sourceDatabaseName = sourceDatabaseName
        }

        private enum CodingKeys: String, CodingKey {
            case targetSchemaName = "TargetSchemaName"
            case sourceSchemaName = "SourceSchemaName"
            case clusterIdentifier = "ClusterIdentifier"
            case snapshotIdentifier = "SnapshotIdentifier"
            case targetDatabaseName = "TargetDatabaseName"
            case sourceTableName = "SourceTableName"
            case newTableName = "NewTableName"
            case sourceDatabaseName = "SourceDatabaseName"
        }
    }

    public struct HsmConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmConfiguration", required: false, type: .list)
        ]
        public let hsmConfiguration: [HsmConfiguration]?

        public init(hsmConfiguration: [HsmConfiguration]? = nil) {
            self.hsmConfiguration = hsmConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case hsmConfiguration = "HsmConfiguration"
        }
    }

    public struct Parameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterValue", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "ApplyType", required: false, type: .enum), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "MinimumEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The value of the parameter.
        public let parameterValue: String?
        /// The data type of the parameter.
        public let dataType: String?
        /// The source of the parameter value, such as "engine-default" or "user".
        public let source: String?
        /// If true, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. 
        public let isModifiable: Bool?
        /// The name of the parameter.
        public let parameterName: String?
        /// Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
        public let applyType: ParameterApplyType?
        /// The valid range of values for the parameter.
        public let allowedValues: String?
        /// The earliest engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// A description of the parameter.
        public let description: String?

        public init(parameterValue: String? = nil, dataType: String? = nil, source: String? = nil, isModifiable: Bool? = nil, parameterName: String? = nil, applyType: ParameterApplyType? = nil, allowedValues: String? = nil, minimumEngineVersion: String? = nil, description: String? = nil) {
            self.parameterValue = parameterValue
            self.dataType = dataType
            self.source = source
            self.isModifiable = isModifiable
            self.parameterName = parameterName
            self.applyType = applyType
            self.allowedValues = allowedValues
            self.minimumEngineVersion = minimumEngineVersion
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case parameterValue = "ParameterValue"
            case dataType = "DataType"
            case source = "Source"
            case isModifiable = "IsModifiable"
            case parameterName = "ParameterName"
            case applyType = "ApplyType"
            case allowedValues = "AllowedValues"
            case minimumEngineVersion = "MinimumEngineVersion"
            case description = "Description"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringChargeFrequency", required: false, type: .string), 
            AWSShapeMember(label: "RecurringChargeAmount", required: false, type: .double)
        ]
        /// The frequency at which the recurring charge amount is applied.
        public let recurringChargeFrequency: String?
        /// The amount charged per the period of time specified by the recurring charge frequency.
        public let recurringChargeAmount: Double?

        public init(recurringChargeFrequency: String? = nil, recurringChargeAmount: Double? = nil) {
            self.recurringChargeFrequency = recurringChargeFrequency
            self.recurringChargeAmount = recurringChargeAmount
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeFrequency = "RecurringChargeFrequency"
            case recurringChargeAmount = "RecurringChargeAmount"
        }
    }

    public struct SnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Snapshots", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Snapshot instances. 
        public let snapshots: SnapshotList?

        public init(marker: String? = nil, snapshots: SnapshotList? = nil) {
            self.marker = marker
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case snapshots = "Snapshots"
        }
    }

    public struct ClusterVersionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterVersion", required: false, type: .list)
        ]
        public let clusterVersion: [ClusterVersion]?

        public init(clusterVersion: [ClusterVersion]? = nil) {
            self.clusterVersion = clusterVersion
        }

        private enum CodingKeys: String, CodingKey {
            case clusterVersion = "ClusterVersion"
        }
    }

    public struct ClusterSecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "IPRanges", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A list of EC2 security groups that are permitted to access clusters associated with this cluster security group.
        public let eC2SecurityGroups: EC2SecurityGroupList?
        /// The list of tags for the cluster security group.
        public let tags: TagList?
        /// A list of IP ranges (CIDR blocks) that are permitted to access clusters associated with this cluster security group.
        public let iPRanges: IPRangeList?
        /// The name of the cluster security group to which the operation was applied.
        public let clusterSecurityGroupName: String?
        /// A description of the security group.
        public let description: String?

        public init(eC2SecurityGroups: EC2SecurityGroupList? = nil, tags: TagList? = nil, iPRanges: IPRangeList? = nil, clusterSecurityGroupName: String? = nil, description: String? = nil) {
            self.eC2SecurityGroups = eC2SecurityGroups
            self.tags = tags
            self.iPRanges = iPRanges
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroups = "EC2SecurityGroups"
            case tags = "Tags"
            case iPRanges = "IPRanges"
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
            case description = "Description"
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceIds", required: false, type: .structure), 
            AWSShapeMember(label: "Severity", required: false, type: .string)
        ]
        /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
        public let sourceType: String?
        /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: Configuration, Management, Monitoring, Security
        public let eventCategories: EventCategoriesList?
        /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled 
        public let enabled: Bool?
        /// The name of the modified Amazon Redshift event notification subscription.
        public let subscriptionName: String
        /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
        public let snsTopicArn: String?
        /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
        public let sourceIds: SourceIdsList?
        /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
        public let severity: String?

        public init(sourceType: String? = nil, eventCategories: EventCategoriesList? = nil, enabled: Bool? = nil, subscriptionName: String, snsTopicArn: String? = nil, sourceIds: SourceIdsList? = nil, severity: String? = nil) {
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.subscriptionName = subscriptionName
            self.snsTopicArn = snsTopicArn
            self.sourceIds = sourceIds
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
            case enabled = "Enabled"
            case subscriptionName = "SubscriptionName"
            case snsTopicArn = "SnsTopicArn"
            case sourceIds = "SourceIds"
            case severity = "Severity"
        }
    }

    public struct ResizeProgressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetClusterType", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "AvgResizeRateInMegaBytesPerSecond", required: false, type: .double), 
            AWSShapeMember(label: "ProgressInMegaBytes", required: false, type: .long), 
            AWSShapeMember(label: "ImportTablesInProgress", required: false, type: .list), 
            AWSShapeMember(label: "ImportTablesNotStarted", required: false, type: .list), 
            AWSShapeMember(label: "EstimatedTimeToCompletionInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "TotalResizeDataInMegaBytes", required: false, type: .long), 
            AWSShapeMember(label: "TargetNumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "ImportTablesCompleted", required: false, type: .list), 
            AWSShapeMember(label: "TargetNodeType", required: false, type: .string), 
            AWSShapeMember(label: "ElapsedTimeInSeconds", required: false, type: .long)
        ]
        /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node 
        public let targetClusterType: String?
        /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED 
        public let status: String?
        /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
        public let avgResizeRateInMegaBytesPerSecond: Double?
        /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
        public let progressInMegaBytes: Int64?
        /// The names of tables that are being currently imported. Valid Values: List of table names.
        public let importTablesInProgress: [String]?
        /// The names of tables that have not been yet imported. Valid Values: List of table names
        public let importTablesNotStarted: [String]?
        /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
        public let estimatedTimeToCompletionInSeconds: Int64?
        /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
        public let totalResizeDataInMegaBytes: Int64?
        /// The number of nodes that the cluster will have after the resize operation is complete.
        public let targetNumberOfNodes: Int32?
        /// The names of tables that have been completely imported . Valid Values: List of table names.
        public let importTablesCompleted: [String]?
        /// The node type that the cluster will have after the resize operation is complete.
        public let targetNodeType: String?
        /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
        public let elapsedTimeInSeconds: Int64?

        public init(targetClusterType: String? = nil, status: String? = nil, avgResizeRateInMegaBytesPerSecond: Double? = nil, progressInMegaBytes: Int64? = nil, importTablesInProgress: [String]? = nil, importTablesNotStarted: [String]? = nil, estimatedTimeToCompletionInSeconds: Int64? = nil, totalResizeDataInMegaBytes: Int64? = nil, targetNumberOfNodes: Int32? = nil, importTablesCompleted: [String]? = nil, targetNodeType: String? = nil, elapsedTimeInSeconds: Int64? = nil) {
            self.targetClusterType = targetClusterType
            self.status = status
            self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
            self.progressInMegaBytes = progressInMegaBytes
            self.importTablesInProgress = importTablesInProgress
            self.importTablesNotStarted = importTablesNotStarted
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
            self.targetNumberOfNodes = targetNumberOfNodes
            self.importTablesCompleted = importTablesCompleted
            self.targetNodeType = targetNodeType
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case targetClusterType = "TargetClusterType"
            case status = "Status"
            case avgResizeRateInMegaBytesPerSecond = "AvgResizeRateInMegaBytesPerSecond"
            case progressInMegaBytes = "ProgressInMegaBytes"
            case importTablesInProgress = "ImportTablesInProgress"
            case importTablesNotStarted = "ImportTablesNotStarted"
            case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
            case totalResizeDataInMegaBytes = "TotalResizeDataInMegaBytes"
            case targetNumberOfNodes = "TargetNumberOfNodes"
            case importTablesCompleted = "ImportTablesCompleted"
            case targetNodeType = "TargetNodeType"
            case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        }
    }

    public struct DeleteSnapshotCopyGrantMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrantName", required: true, type: .string)
        ]
        /// The name of the snapshot copy grant to delete.
        public let snapshotCopyGrantName: String

        public init(snapshotCopyGrantName: String) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrantName = "SnapshotCopyGrantName"
        }
    }

    public struct DeleteClusterSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSubnetGroupName", required: true, type: .string)
        ]
        /// The name of the cluster subnet group name to be deleted.
        public let clusterSubnetGroupName: String

        public init(clusterSubnetGroupName: String) {
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
        }
    }

    public struct EnableSnapshotCopyMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationRegion", required: true, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "RetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotCopyGrantName", required: false, type: .string)
        ]
        /// The destination region that you want to copy snapshots to. Constraints: Must be the name of a valid region. For more information, see Regions and Endpoints in the Amazon Web Services General Reference. 
        public let destinationRegion: String
        /// The unique identifier of the source cluster to copy snapshots from. Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.
        public let clusterIdentifier: String
        /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Default: 7. Constraints: Must be at least 1 and no more than 35.
        public let retentionPeriod: Int32?
        /// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        public let snapshotCopyGrantName: String?

        public init(destinationRegion: String, clusterIdentifier: String, retentionPeriod: Int32? = nil, snapshotCopyGrantName: String? = nil) {
            self.destinationRegion = destinationRegion
            self.clusterIdentifier = clusterIdentifier
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

        private enum CodingKeys: String, CodingKey {
            case destinationRegion = "DestinationRegion"
            case clusterIdentifier = "ClusterIdentifier"
            case retentionPeriod = "RetentionPeriod"
            case snapshotCopyGrantName = "SnapshotCopyGrantName"
        }
    }

    public struct ReservedNode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "ReservedNodeId", required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "NodeCount", required: false, type: .integer), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedNodeOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "ReservedNodeOfferingType", required: false, type: .enum)
        ]
        /// The fixed cost Amazon Redshift charges you for this reserved node.
        public let fixedPrice: Double?
        /// The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.
        public let startTime: TimeStamp?
        /// The state of the reserved compute node. Possible Values:   pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.   active-This reserved node is owned by the caller and is available for use.   payment-failed-Payment failed for the purchase attempt.   retired-The reserved node is no longer available.    exchanging-The owner is exchanging the reserved node for another reserved node.  
        public let state: String?
        /// The recurring charges for the reserved node.
        public let recurringCharges: RecurringChargeList?
        /// The unique identifier for the reservation.
        public let reservedNodeId: String?
        /// The currency code for the reserved cluster.
        public let currencyCode: String?
        /// The duration of the node reservation in seconds.
        public let duration: Int32?
        /// The number of reserved compute nodes.
        public let nodeCount: Int32?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public let offeringType: String?
        /// The node type of the reserved node.
        public let nodeType: String?
        /// The identifier for the reserved node offering.
        public let reservedNodeOfferingId: String?
        /// The hourly rate Amazon Redshift charges you for this reserved node.
        public let usagePrice: Double?
        public let reservedNodeOfferingType: ReservedNodeOfferingType?

        public init(fixedPrice: Double? = nil, startTime: TimeStamp? = nil, state: String? = nil, recurringCharges: RecurringChargeList? = nil, reservedNodeId: String? = nil, currencyCode: String? = nil, duration: Int32? = nil, nodeCount: Int32? = nil, offeringType: String? = nil, nodeType: String? = nil, reservedNodeOfferingId: String? = nil, usagePrice: Double? = nil, reservedNodeOfferingType: ReservedNodeOfferingType? = nil) {
            self.fixedPrice = fixedPrice
            self.startTime = startTime
            self.state = state
            self.recurringCharges = recurringCharges
            self.reservedNodeId = reservedNodeId
            self.currencyCode = currencyCode
            self.duration = duration
            self.nodeCount = nodeCount
            self.offeringType = offeringType
            self.nodeType = nodeType
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.usagePrice = usagePrice
            self.reservedNodeOfferingType = reservedNodeOfferingType
        }

        private enum CodingKeys: String, CodingKey {
            case fixedPrice = "FixedPrice"
            case startTime = "StartTime"
            case state = "State"
            case recurringCharges = "RecurringCharges"
            case reservedNodeId = "ReservedNodeId"
            case currencyCode = "CurrencyCode"
            case duration = "Duration"
            case nodeCount = "NodeCount"
            case offeringType = "OfferingType"
            case nodeType = "NodeType"
            case reservedNodeOfferingId = "ReservedNodeOfferingId"
            case usagePrice = "UsagePrice"
            case reservedNodeOfferingType = "ReservedNodeOfferingType"
        }
    }

    public struct RebootClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategoriesList", required: false, type: .structure), 
            AWSShapeMember(label: "CustSubscriptionId", required: false, type: .string), 
            AWSShapeMember(label: "SourceIdsList", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionCreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CustomerAwsId", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Severity", required: false, type: .string)
        ]
        /// The source type of the events returned the Amazon Redshift event notification, such as cluster, or cluster-snapshot.
        public let sourceType: String?
        /// The list of Amazon Redshift event categories specified in the event notification subscription. Values: Configuration, Management, Monitoring, Security
        public let eventCategoriesList: EventCategoriesList?
        /// The name of the Amazon Redshift event notification subscription.
        public let custSubscriptionId: String?
        /// A list of the sources that publish events to the Amazon Redshift event notification subscription.
        public let sourceIdsList: SourceIdsList?
        /// The status of the Amazon Redshift event notification subscription. Constraints:   Can be one of the following: active | no-permission | topic-not-exist   The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.  
        public let status: String?
        /// The date and time the Amazon Redshift event notification subscription was created.
        public let subscriptionCreationTime: TimeStamp?
        /// The AWS customer account associated with the Amazon Redshift event notification subscription.
        public let customerAwsId: String?
        /// A Boolean value indicating whether the subscription is enabled. true indicates the subscription is enabled.
        public let enabled: Bool?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.
        public let snsTopicArn: String?
        /// The list of tags for the event subscription.
        public let tags: TagList?
        /// The event severity specified in the Amazon Redshift event notification subscription. Values: ERROR, INFO
        public let severity: String?

        public init(sourceType: String? = nil, eventCategoriesList: EventCategoriesList? = nil, custSubscriptionId: String? = nil, sourceIdsList: SourceIdsList? = nil, status: String? = nil, subscriptionCreationTime: TimeStamp? = nil, customerAwsId: String? = nil, enabled: Bool? = nil, snsTopicArn: String? = nil, tags: TagList? = nil, severity: String? = nil) {
            self.sourceType = sourceType
            self.eventCategoriesList = eventCategoriesList
            self.custSubscriptionId = custSubscriptionId
            self.sourceIdsList = sourceIdsList
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.snsTopicArn = snsTopicArn
            self.tags = tags
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategoriesList = "EventCategoriesList"
            case custSubscriptionId = "CustSubscriptionId"
            case sourceIdsList = "SourceIdsList"
            case status = "Status"
            case subscriptionCreationTime = "SubscriptionCreationTime"
            case customerAwsId = "CustomerAwsId"
            case enabled = "Enabled"
            case snsTopicArn = "SnsTopicArn"
            case tags = "Tags"
            case severity = "Severity"
        }
    }

    public struct CreateHsmConfigurationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmPartitionName", required: true, type: .string), 
            AWSShapeMember(label: "HsmPartitionPassword", required: true, type: .string), 
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "HsmIpAddress", required: true, type: .string), 
            AWSShapeMember(label: "HsmServerPublicCertificate", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public let hsmPartitionName: String
        /// The password required to access the HSM partition.
        public let hsmPartitionPassword: String
        /// The identifier to be assigned to the new Amazon Redshift HSM configuration.
        public let hsmConfigurationIdentifier: String
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public let hsmIpAddress: String
        /// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
        public let hsmServerPublicCertificate: String
        /// A list of tag instances.
        public let tags: TagList?
        /// A text description of the HSM configuration to be created.
        public let description: String

        public init(hsmPartitionName: String, hsmPartitionPassword: String, hsmConfigurationIdentifier: String, hsmIpAddress: String, hsmServerPublicCertificate: String, tags: TagList? = nil, description: String) {
            self.hsmPartitionName = hsmPartitionName
            self.hsmPartitionPassword = hsmPartitionPassword
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.hsmIpAddress = hsmIpAddress
            self.hsmServerPublicCertificate = hsmServerPublicCertificate
            self.tags = tags
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case hsmPartitionName = "HsmPartitionName"
            case hsmPartitionPassword = "HsmPartitionPassword"
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case hsmIpAddress = "HsmIpAddress"
            case hsmServerPublicCertificate = "HsmServerPublicCertificate"
            case tags = "Tags"
            case description = "Description"
        }
    }

    public struct EventCategoriesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategory", required: false, type: .list)
        ]
        public let eventCategory: [String]?

        public init(eventCategory: [String]? = nil) {
            self.eventCategory = eventCategory
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategory = "EventCategory"
        }
    }

    public struct CreateEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "SupportedPlatforms", required: false, type: .structure)
        ]
        /// The name of the availability zone.
        public let name: String?
        public let supportedPlatforms: SupportedPlatformsList?

        public init(name: String? = nil, supportedPlatforms: SupportedPlatformsList? = nil) {
            self.name = name
            self.supportedPlatforms = supportedPlatforms
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case supportedPlatforms = "SupportedPlatforms"
        }
    }

    public struct SourceIdsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceId", required: false, type: .list)
        ]
        public let sourceId: [String]?

        public init(sourceId: [String]? = nil) {
            self.sourceId = sourceId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceId = "SourceId"
        }
    }

    public struct ClusterSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroups", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of ClusterSecurityGroup instances. 
        public let clusterSecurityGroups: ClusterSecurityGroups?

        public init(marker: String? = nil, clusterSecurityGroups: ClusterSecurityGroups? = nil) {
            self.marker = marker
            self.clusterSecurityGroups = clusterSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterSecurityGroups = "ClusterSecurityGroups"
        }
    }

    public struct CopyClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct DescribeDefaultClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupFamily", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The name of the cluster parameter group family.
        public let parameterGroupFamily: String
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeDefaultClusterParameters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(parameterGroupFamily: String, maxRecords: Int32? = nil, marker: String? = nil) {
            self.parameterGroupFamily = parameterGroupFamily
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupFamily = "ParameterGroupFamily"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DescribeTableRestoreStatusMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TableRestoreRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
        public let maxRecords: Int32?
        /// The identifier of the table restore request to return status for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus returns the status of all in-progress table restore requests.
        public let tableRestoreRequestId: String?
        /// An optional pagination token provided by a previous DescribeTableRestoreStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
        public let marker: String?
        /// The Amazon Redshift cluster that the table is being restored to.
        public let clusterIdentifier: String?

        public init(maxRecords: Int32? = nil, tableRestoreRequestId: String? = nil, marker: String? = nil, clusterIdentifier: String? = nil) {
            self.maxRecords = maxRecords
            self.tableRestoreRequestId = tableRestoreRequestId
            self.marker = marker
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tableRestoreRequestId = "TableRestoreRequestId"
            case marker = "Marker"
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct AcceptReservedNodeExchangeOutputMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExchangedReservedNode", required: false, type: .structure)
        ]
        public let exchangedReservedNode: ReservedNode?

        public init(exchangedReservedNode: ReservedNode? = nil) {
            self.exchangedReservedNode = exchangedReservedNode
        }

        private enum CodingKeys: String, CodingKey {
            case exchangedReservedNode = "ExchangedReservedNode"
        }
    }

    public struct DefaultClusterParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupFamily", required: false, type: .string)
        ]
        /// The list of cluster default parameters.
        public let parameters: ParametersList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// The name of the cluster parameter group family to which the engine default parameters apply.
        public let parameterGroupFamily: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil, parameterGroupFamily: String? = nil) {
            self.parameters = parameters
            self.marker = marker
            self.parameterGroupFamily = parameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
            case parameterGroupFamily = "ParameterGroupFamily"
        }
    }

    public struct EventCategoriesMapList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMap", required: false, type: .list)
        ]
        public let eventCategoriesMap: [EventCategoriesMap]?

        public init(eventCategoriesMap: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMap = eventCategoriesMap
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMap = "EventCategoriesMap"
        }
    }

    public struct DescribeClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
        public let parameterGroupName: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterParameterGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(parameterGroupName: String? = nil, maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil) {
            self.parameterGroupName = parameterGroupName
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case marker = "Marker"
        }
    }

    public struct AuthorizeSnapshotAccessResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "EventId", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "Severity", required: false, type: .string)
        ]
        /// The source type for this event.
        public let sourceType: SourceType?
        /// The identifier for the source of the event.
        public let sourceIdentifier: String?
        /// The text of this event.
        public let message: String?
        /// The identifier of the event.
        public let eventId: String?
        /// A list of the event categories. Values: Configuration, Management, Monitoring, Security
        public let eventCategories: EventCategoriesList?
        /// The date and time of the event.
        public let date: TimeStamp?
        /// The severity of the event. Values: ERROR, INFO
        public let severity: String?

        public init(sourceType: SourceType? = nil, sourceIdentifier: String? = nil, message: String? = nil, eventId: String? = nil, eventCategories: EventCategoriesList? = nil, date: TimeStamp? = nil, severity: String? = nil) {
            self.sourceType = sourceType
            self.sourceIdentifier = sourceIdentifier
            self.message = message
            self.eventId = eventId
            self.eventCategories = eventCategories
            self.date = date
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case sourceIdentifier = "SourceIdentifier"
            case message = "Message"
            case eventId = "EventId"
            case eventCategories = "EventCategories"
            case date = "Date"
            case severity = "Severity"
        }
    }

    public struct RestorableNodeTypeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeType", required: false, type: .list)
        ]
        public let nodeType: [String]?

        public init(nodeType: [String]? = nil) {
            self.nodeType = nodeType
        }

        private enum CodingKeys: String, CodingKey {
            case nodeType = "NodeType"
        }
    }

    public struct RestoreTableFromClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableRestoreStatus", required: false, type: .structure)
        ]
        public let tableRestoreStatus: TableRestoreStatus?

        public init(tableRestoreStatus: TableRestoreStatus? = nil) {
            self.tableRestoreStatus = tableRestoreStatus
        }

        private enum CodingKeys: String, CodingKey {
            case tableRestoreStatus = "TableRestoreStatus"
        }
    }

    public struct DisableSnapshotCopyMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct CreateClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The cluster identifier for which you want a snapshot.
        public let clusterIdentifier: String
        /// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 alphanumeric characters or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let snapshotIdentifier: String
        /// A list of tag instances.
        public let tags: TagList?

        public init(clusterIdentifier: String, snapshotIdentifier: String, tags: TagList? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case snapshotIdentifier = "SnapshotIdentifier"
            case tags = "Tags"
        }
    }

    public struct RecurringChargeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringCharge", required: false, type: .list)
        ]
        public let recurringCharge: [RecurringCharge]?

        public init(recurringCharge: [RecurringCharge]? = nil) {
            self.recurringCharge = recurringCharge
        }

        private enum CodingKeys: String, CodingKey {
            case recurringCharge = "RecurringCharge"
        }
    }

    public struct RevisionTargetsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RevisionTarget", required: false, type: .list)
        ]
        public let revisionTarget: [RevisionTarget]?

        public init(revisionTarget: [RevisionTarget]? = nil) {
            self.revisionTarget = revisionTarget
        }

        private enum CodingKeys: String, CodingKey {
            case revisionTarget = "RevisionTarget"
        }
    }

    public struct ClusterDbRevisionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterDbRevisions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of revisions.
        public let clusterDbRevisions: ClusterDbRevisionsList?
        /// A string representing the starting point for the next set of revisions. If a value is returned in a response, you can retrieve the next set of revisions by providing the value in the marker parameter and retrying the command. If the marker field is empty, all revisions have already been returned.
        public let marker: String?

        public init(clusterDbRevisions: ClusterDbRevisionsList? = nil, marker: String? = nil) {
            self.clusterDbRevisions = clusterDbRevisions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterDbRevisions = "ClusterDbRevisions"
            case marker = "Marker"
        }
    }

    public struct DeleteClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "FinalClusterSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SkipFinalClusterSnapshot", required: false, type: .boolean)
        ]
        /// The identifier of the cluster to be deleted. Constraints:   Must contain lowercase characters.   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterIdentifier: String
        /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, SkipFinalClusterSnapshot must be false.  Constraints:   Must be 1 to 255 alphanumeric characters.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let finalClusterSnapshotIdentifier: String?
        /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is not created. If false, a final cluster snapshot is created before the cluster is deleted.   The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot is false.  Default: false 
        public let skipFinalClusterSnapshot: Bool?

        public init(clusterIdentifier: String, finalClusterSnapshotIdentifier: String? = nil, skipFinalClusterSnapshot: Bool? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier
            self.skipFinalClusterSnapshot = skipFinalClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case finalClusterSnapshotIdentifier = "FinalClusterSnapshotIdentifier"
            case skipFinalClusterSnapshot = "SkipFinalClusterSnapshot"
        }
    }

    public struct CreateClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct EventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMapList", required: false, type: .structure)
        ]
        /// A list of event categories descriptions.
        public let eventCategoriesMapList: EventCategoriesMapList?

        public init(eventCategoriesMapList: EventCategoriesMapList? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMapList = "EventCategoriesMapList"
        }
    }

    public struct DescribeResizeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive. By default, resize operations for all clusters defined for an AWS account are returned.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct DescribeReservedNodeOfferingsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedNodeOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The unique identifier for the offering.
        public let reservedNodeOfferingId: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeReservedNodeOfferings request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(reservedNodeOfferingId: String? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case reservedNodeOfferingId = "ReservedNodeOfferingId"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct CreateClusterSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: true, type: .string)
        ]
        /// A list of tag instances.
        public let tags: TagList?
        /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
        public let subnetIds: SubnetIdentifierList
        /// A description for the subnet group.
        public let description: String
        /// The name for the subnet group. Amazon Redshift stores the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric characters or hyphens.   Must not be "Default".   Must be unique for all subnet groups that are created by your AWS account.   Example: examplesubnetgroup 
        public let clusterSubnetGroupName: String

        public init(tags: TagList? = nil, subnetIds: SubnetIdentifierList, description: String, clusterSubnetGroupName: String) {
            self.tags = tags
            self.subnetIds = subnetIds
            self.description = description
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case subnetIds = "SubnetIds"
            case description = "Description"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
        }
    }

    public struct DeleteClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string)
        ]
        /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
        public let snapshotClusterIdentifier: String?
        /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available state.
        public let snapshotIdentifier: String

        public init(snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String) {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
            case snapshotIdentifier = "SnapshotIdentifier"
        }
    }

    public struct CreateSnapshotCopyGrantMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrantName", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The name of the snapshot copy grant. This name must be unique in the region for the AWS account. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.  
        public let snapshotCopyGrantName: String
        /// The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
        public let kmsKeyId: String?
        /// A list of tag instances.
        public let tags: TagList?

        public init(snapshotCopyGrantName: String, kmsKeyId: String? = nil, tags: TagList? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.kmsKeyId = kmsKeyId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrantName = "SnapshotCopyGrantName"
            case kmsKeyId = "KmsKeyId"
            case tags = "Tags"
        }
    }

    public struct EligibleTracksToUpdateList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateTarget", required: false, type: .list)
        ]
        public let updateTarget: [UpdateTarget]?

        public init(updateTarget: [UpdateTarget]? = nil) {
            self.updateTarget = updateTarget
        }

        private enum CodingKeys: String, CodingKey {
            case updateTarget = "UpdateTarget"
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The name of the Amazon Redshift event notification subscription to be deleted.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct ClusterNode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIPAddress", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIPAddress", required: false, type: .string), 
            AWSShapeMember(label: "NodeRole", required: false, type: .string)
        ]
        /// The public IP address of a node within a cluster.
        public let publicIPAddress: String?
        /// The private IP address of a node within a cluster.
        public let privateIPAddress: String?
        /// Whether the node is a leader node or a compute node.
        public let nodeRole: String?

        public init(publicIPAddress: String? = nil, privateIPAddress: String? = nil, nodeRole: String? = nil) {
            self.publicIPAddress = publicIPAddress
            self.privateIPAddress = privateIPAddress
            self.nodeRole = nodeRole
        }

        private enum CodingKeys: String, CodingKey {
            case publicIPAddress = "PublicIPAddress"
            case privateIPAddress = "PrivateIPAddress"
            case nodeRole = "NodeRole"
        }
    }

    public struct CreateClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterUserPassword", required: true, type: .string), 
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "AutomatedSnapshotRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "AllowVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "EnhancedVpcRouting", required: false, type: .boolean), 
            AWSShapeMember(label: "IamRoles", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterType", required: false, type: .string), 
            AWSShapeMember(label: "ElasticIp", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "NodeType", required: true, type: .string), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUsername", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The password associated with the master user account for the cluster that is being created. Constraints:   Must be between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must contain at least one lowercase letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.  
        public let masterUserPassword: String
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the current track.
        public let maintenanceTrackName: String?
        /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift.
        public let clusterSecurityGroups: ClusterSecurityGroupNameList?
        /// The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to Create a Database in the Amazon Redshift Database Developer Guide.  Default: dev  Constraints:   Must contain 1 to 64 alphanumeric characters.   Must contain only lowercase letters.   Cannot be a word that is reserved by the service. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.   
        public let dBName: String?
        /// A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.   Example: myexamplecluster 
        public let clusterIdentifier: String
        /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
        public let kmsKeyId: String?
        /// The weekly time range (in UTC) during which automated cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  Default: 1  Constraints: Must be a value from 0 to 35.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster. Default: true 
        public let allowVersionUpgrade: Bool?
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?
        /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.  For information about determining how many nodes you need, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster. Default: 1  Constraints: Value must be at least 1 and no more than 100.
        public let numberOfNodes: Int32?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request. A cluster can have up to 10 IAM roles associated with it at any time.
        public let iamRoles: IamRoleArnList?
        /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
        public let clusterSubnetGroupName: String?
        /// The type of the cluster. When cluster type is specified as    single-node, the NumberOfNodes parameter is not required.    multi-node, the NumberOfNodes parameter is required.   Valid Values: multi-node | single-node  Default: multi-node 
        public let clusterType: String?
        /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch Your Cluster in the Amazon Redshift Cluster Management Guide.
        public let elasticIp: String?
        /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// If true, the data in the cluster is encrypted at rest.  Default: false
        public let encrypted: Bool?
        /// The node type to be provisioned for the cluster. For information about node types, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  Valid Values: ds2.xlarge | ds2.8xlarge | ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge 
        public let nodeType: String
        /// Reserved.
        public let additionalInfo: String?
        /// If true, the cluster can be accessed from a public network. 
        public let publiclyAccessible: Bool?
        /// The user name associated with the master user account for the cluster that is being created. Constraints:   Must be 1 - 128 alphanumeric characters. The user name can't be PUBLIC.   First character must be a letter.   Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.   
        public let masterUsername: String
        /// A list of tag instances.
        public let tags: TagList?
        /// The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. Constraints: Only version 1.0 is currently available. Example: 1.0 
        public let clusterVersion: String?
        /// The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default: 5439  Valid Values: 1150-65535 
        public let port: Int32?
        /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to Working with Amazon Redshift Parameter Groups  Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterParameterGroupName: String?
        /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint. Example: us-east-1d  Constraint: The specified Availability Zone must be in the same region as the current endpoint.
        public let availabilityZone: String?

        public init(masterUserPassword: String, hsmConfigurationIdentifier: String? = nil, maintenanceTrackName: String? = nil, clusterSecurityGroups: ClusterSecurityGroupNameList? = nil, dBName: String? = nil, clusterIdentifier: String, kmsKeyId: String? = nil, preferredMaintenanceWindow: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, allowVersionUpgrade: Bool? = nil, hsmClientCertificateIdentifier: String? = nil, numberOfNodes: Int32? = nil, enhancedVpcRouting: Bool? = nil, iamRoles: IamRoleArnList? = nil, clusterSubnetGroupName: String? = nil, clusterType: String? = nil, elasticIp: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, encrypted: Bool? = nil, nodeType: String, additionalInfo: String? = nil, publiclyAccessible: Bool? = nil, masterUsername: String, tags: TagList? = nil, clusterVersion: String? = nil, port: Int32? = nil, clusterParameterGroupName: String? = nil, availabilityZone: String? = nil) {
            self.masterUserPassword = masterUserPassword
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.maintenanceTrackName = maintenanceTrackName
            self.clusterSecurityGroups = clusterSecurityGroups
            self.dBName = dBName
            self.clusterIdentifier = clusterIdentifier
            self.kmsKeyId = kmsKeyId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.allowVersionUpgrade = allowVersionUpgrade
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.numberOfNodes = numberOfNodes
            self.enhancedVpcRouting = enhancedVpcRouting
            self.iamRoles = iamRoles
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.clusterType = clusterType
            self.elasticIp = elasticIp
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.encrypted = encrypted
            self.nodeType = nodeType
            self.additionalInfo = additionalInfo
            self.publiclyAccessible = publiclyAccessible
            self.masterUsername = masterUsername
            self.tags = tags
            self.clusterVersion = clusterVersion
            self.port = port
            self.clusterParameterGroupName = clusterParameterGroupName
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case masterUserPassword = "MasterUserPassword"
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case maintenanceTrackName = "MaintenanceTrackName"
            case clusterSecurityGroups = "ClusterSecurityGroups"
            case dBName = "DBName"
            case clusterIdentifier = "ClusterIdentifier"
            case kmsKeyId = "KmsKeyId"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
            case allowVersionUpgrade = "AllowVersionUpgrade"
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
            case numberOfNodes = "NumberOfNodes"
            case enhancedVpcRouting = "EnhancedVpcRouting"
            case iamRoles = "IamRoles"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
            case clusterType = "ClusterType"
            case elasticIp = "ElasticIp"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case encrypted = "Encrypted"
            case nodeType = "NodeType"
            case additionalInfo = "AdditionalInfo"
            case publiclyAccessible = "PubliclyAccessible"
            case masterUsername = "MasterUsername"
            case tags = "Tags"
            case clusterVersion = "ClusterVersion"
            case port = "Port"
            case clusterParameterGroupName = "ClusterParameterGroupName"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct DisableLoggingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The identifier of the cluster on which logging is to be stopped. Example: examplecluster 
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct RevokeSnapshotAccessResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct HsmClientCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "HsmClientCertificates", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of the identifiers for one or more HSM client certificates used by Amazon Redshift clusters to store and retrieve database encryption keys in an HSM.
        public let hsmClientCertificates: HsmClientCertificateList?

        public init(marker: String? = nil, hsmClientCertificates: HsmClientCertificateList? = nil) {
            self.marker = marker
            self.hsmClientCertificates = hsmClientCertificates
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case hsmClientCertificates = "HsmClientCertificates"
        }
    }

    public struct CreateHsmClientCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
        public let hsmClientCertificateIdentifier: String
        /// A list of tag instances.
        public let tags: TagList?

        public init(hsmClientCertificateIdentifier: String, tags: TagList? = nil) {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
            case tags = "Tags"
        }
    }

    public struct ClusterDbRevision: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentDatabaseRevision", required: false, type: .string), 
            AWSShapeMember(label: "RevisionTargets", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseRevisionReleaseDate", required: false, type: .timestamp)
        ]
        /// A string representing the current cluster version.
        public let currentDatabaseRevision: String?
        /// A list of RevisionTarget objects, where each object describes the database revision that a cluster can be updated to.
        public let revisionTargets: RevisionTargetsList?
        /// The unique identifier of the cluster.
        public let clusterIdentifier: String?
        /// The date on which the database revision was released.
        public let databaseRevisionReleaseDate: TimeStamp?

        public init(currentDatabaseRevision: String? = nil, revisionTargets: RevisionTargetsList? = nil, clusterIdentifier: String? = nil, databaseRevisionReleaseDate: TimeStamp? = nil) {
            self.currentDatabaseRevision = currentDatabaseRevision
            self.revisionTargets = revisionTargets
            self.clusterIdentifier = clusterIdentifier
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
        }

        private enum CodingKeys: String, CodingKey {
            case currentDatabaseRevision = "CurrentDatabaseRevision"
            case revisionTargets = "RevisionTargets"
            case clusterIdentifier = "ClusterIdentifier"
            case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        }
    }

    public struct ClusterIamRole: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyStatus", required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", required: false, type: .string)
        ]
        /// A value that describes the status of the IAM role's association with an Amazon Redshift cluster. The following are possible statuses and descriptions.    in-sync: The role is available for use by the cluster.    adding: The role is in the process of being associated with the cluster.    removing: The role is in the process of being disassociated with the cluster.  
        public let applyStatus: String?
        /// The Amazon Resource Name (ARN) of the IAM role, for example, arn:aws:iam::123456789012:role/RedshiftCopyUnload. 
        public let iamRoleArn: String?

        public init(applyStatus: String? = nil, iamRoleArn: String? = nil) {
            self.applyStatus = applyStatus
            self.iamRoleArn = iamRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case applyStatus = "ApplyStatus"
            case iamRoleArn = "IamRoleArn"
        }
    }

    public struct DescribeClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        /// The name of a cluster parameter group for which to return details.
        public let parameterGroupName: String
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterParameters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The parameter types to return. Specify user to show parameters that are different form the default. Similarly, specify engine-default to show parameters that are the same as the default parameter group.  Default: All parameter types returned. Valid Values: user | engine-default 
        public let source: String?

        public init(parameterGroupName: String, maxRecords: Int32? = nil, marker: String? = nil, source: String? = nil) {
            self.parameterGroupName = parameterGroupName
            self.maxRecords = maxRecords
            self.marker = marker
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case source = "Source"
        }
    }

    public struct ModifyClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct EnableSnapshotCopyResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct EnableLoggingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: true, type: .string)
        ]
        /// The identifier of the cluster on which logging is to be started. Example: examplecluster 
        public let clusterIdentifier: String
        /// The prefix applied to the log file names. Constraints:   Cannot exceed 512 characters   Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:    x00 to x20   x22   x27   x5c   x7f or larger    
        public let s3KeyPrefix: String?
        /// The name of an existing S3 bucket where the log files are to be stored. Constraints:   Must be in the same region as the cluster   The cluster must have read bucket and put object permissions  
        public let bucketName: String

        public init(clusterIdentifier: String, s3KeyPrefix: String? = nil, bucketName: String) {
            self.clusterIdentifier = clusterIdentifier
            self.s3KeyPrefix = s3KeyPrefix
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case s3KeyPrefix = "S3KeyPrefix"
            case bucketName = "BucketName"
        }
    }

    public struct CreateHsmConfigurationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmConfiguration", required: false, type: .structure)
        ]
        public let hsmConfiguration: HsmConfiguration?

        public init(hsmConfiguration: HsmConfiguration? = nil) {
            self.hsmConfiguration = hsmConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case hsmConfiguration = "HsmConfiguration"
        }
    }

    public struct DeleteHsmClientCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: true, type: .string)
        ]
        /// The identifier of the HSM client certificate to be deleted.
        public let hsmClientCertificateIdentifier: String

        public init(hsmClientCertificateIdentifier: String) {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        }
    }

    public struct RotateEncryptionKeyResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct DescribeClusterDbRevisionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A unique identifier for a cluster whose ClusterDbRevisions you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
        public let clusterIdentifier: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request.  Default: 100 Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a DescribeClusterDbRevisions request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request.  Constraints: You can specify either the ClusterIdentifier parameter, or the marker parameter, but not both.
        public let marker: String?

        public init(clusterIdentifier: String? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct SupportedPlatform: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ClusterSecurityGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroup", required: false, type: .list)
        ]
        public let clusterSecurityGroup: [ClusterSecurityGroupMembership]?

        public init(clusterSecurityGroup: [ClusterSecurityGroupMembership]? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroup = "ClusterSecurityGroup"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned. Default: 60 
        public let duration: Int32?
        /// The event source to retrieve events for. If no value is specified, all events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be provided.   Specify cluster when SourceIdentifier is a cluster identifier.   Specify cluster-security-group when SourceIdentifier is a cluster security group name.   Specify cluster-parameter-group when SourceIdentifier is a cluster parameter group name.   Specify cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.  
        public let sourceType: SourceType?
        /// The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.   Specify a cluster identifier when SourceType is cluster.   Specify a cluster security group name when SourceType is cluster-security-group.   Specify a cluster parameter group name when SourceType is cluster-parameter-group.   Specify a cluster snapshot identifier when SourceType is cluster-snapshot.  
        public let sourceIdentifier: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEvents request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z 
        public let startTime: TimeStamp?
        /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z 
        public let endTime: TimeStamp?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(duration: Int32? = nil, sourceType: SourceType? = nil, sourceIdentifier: String? = nil, marker: String? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, maxRecords: Int32? = nil) {
            self.duration = duration
            self.sourceType = sourceType
            self.sourceIdentifier = sourceIdentifier
            self.marker = marker
            self.startTime = startTime
            self.endTime = endTime
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case sourceType = "SourceType"
            case sourceIdentifier = "SourceIdentifier"
            case marker = "Marker"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DeleteClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string)
        ]
        /// The name of the parameter group to be deleted. Constraints:   Must be the name of an existing cluster parameter group.   Cannot delete a default cluster parameter group.  
        public let parameterGroupName: String

        public init(parameterGroupName: String) {
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public enum ParameterApplyType: String, CustomStringConvertible, Codable {
        case `static` = "static"
        case dynamic = "dynamic"
        public var description: String { return self.rawValue }
    }

    public struct ModifyClusterDbRevisionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct ModifyClusterSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: true, type: .string)
        ]
        /// A text description of the subnet group to be modified.
        public let description: String?
        /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
        public let subnetIds: SubnetIdentifierList
        /// The name of the subnet group to be modified.
        public let clusterSubnetGroupName: String

        public init(description: String? = nil, subnetIds: SubnetIdentifierList, clusterSubnetGroupName: String) {
            self.description = description
            self.subnetIds = subnetIds
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case subnetIds = "SubnetIds"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
        }
    }

    public struct TableRestoreStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalDataInMegaBytes", required: false, type: .long), 
            AWSShapeMember(label: "SourceDatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "SourceTableName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "TargetSchemaName", required: false, type: .string), 
            AWSShapeMember(label: "ProgressInMegaBytes", required: false, type: .long), 
            AWSShapeMember(label: "SnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "RequestTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "TableRestoreRequestId", required: false, type: .string), 
            AWSShapeMember(label: "SourceSchemaName", required: false, type: .string), 
            AWSShapeMember(label: "TargetDatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "NewTableName", required: false, type: .string)
        ]
        /// The total amount of data to restore to the new table, in megabytes (MB).
        public let totalDataInMegaBytes: Int64?
        /// The name of the source database that contains the table being restored.
        public let sourceDatabaseName: String?
        /// The name of the source table being restored.
        public let sourceTableName: String?
        /// The identifier of the Amazon Redshift cluster that the table is being restored to.
        public let clusterIdentifier: String?
        /// The name of the schema to restore the table to.
        public let targetSchemaName: String?
        /// The amount of data restored to the new table so far, in megabytes (MB).
        public let progressInMegaBytes: Int64?
        /// The identifier of the snapshot that the table is being restored from.
        public let snapshotIdentifier: String?
        /// The time that the table restore request was made, in Universal Coordinated Time (UTC).
        public let requestTime: TimeStamp?
        /// A description of the status of the table restore request. Status values include SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS.
        public let message: String?
        /// A value that describes the current state of the table restore request. Valid Values: SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS 
        public let status: TableRestoreStatusType?
        /// The unique identifier for the table restore request.
        public let tableRestoreRequestId: String?
        /// The name of the source schema that contains the table being restored.
        public let sourceSchemaName: String?
        /// The name of the database to restore the table to.
        public let targetDatabaseName: String?
        /// The name of the table to create as a result of the table restore request.
        public let newTableName: String?

        public init(totalDataInMegaBytes: Int64? = nil, sourceDatabaseName: String? = nil, sourceTableName: String? = nil, clusterIdentifier: String? = nil, targetSchemaName: String? = nil, progressInMegaBytes: Int64? = nil, snapshotIdentifier: String? = nil, requestTime: TimeStamp? = nil, message: String? = nil, status: TableRestoreStatusType? = nil, tableRestoreRequestId: String? = nil, sourceSchemaName: String? = nil, targetDatabaseName: String? = nil, newTableName: String? = nil) {
            self.totalDataInMegaBytes = totalDataInMegaBytes
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceTableName = sourceTableName
            self.clusterIdentifier = clusterIdentifier
            self.targetSchemaName = targetSchemaName
            self.progressInMegaBytes = progressInMegaBytes
            self.snapshotIdentifier = snapshotIdentifier
            self.requestTime = requestTime
            self.message = message
            self.status = status
            self.tableRestoreRequestId = tableRestoreRequestId
            self.sourceSchemaName = sourceSchemaName
            self.targetDatabaseName = targetDatabaseName
            self.newTableName = newTableName
        }

        private enum CodingKeys: String, CodingKey {
            case totalDataInMegaBytes = "TotalDataInMegaBytes"
            case sourceDatabaseName = "SourceDatabaseName"
            case sourceTableName = "SourceTableName"
            case clusterIdentifier = "ClusterIdentifier"
            case targetSchemaName = "TargetSchemaName"
            case progressInMegaBytes = "ProgressInMegaBytes"
            case snapshotIdentifier = "SnapshotIdentifier"
            case requestTime = "RequestTime"
            case message = "Message"
            case status = "Status"
            case tableRestoreRequestId = "TableRestoreRequestId"
            case sourceSchemaName = "SourceSchemaName"
            case targetDatabaseName = "TargetDatabaseName"
            case newTableName = "NewTableName"
        }
    }

    public struct ClusterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .list)
        ]
        public let cluster: [Cluster]?

        public init(cluster: [Cluster]? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct ClusterParameterGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupFamily", required: false, type: .string)
        ]
        /// The name of the cluster parameter group.
        public let parameterGroupName: String?
        /// The list of tags for the cluster parameter group.
        public let tags: TagList?
        /// The description of the parameter group.
        public let description: String?
        /// The name of the cluster parameter group family that this cluster parameter group is compatible with.
        public let parameterGroupFamily: String?

        public init(parameterGroupName: String? = nil, tags: TagList? = nil, description: String? = nil, parameterGroupFamily: String? = nil) {
            self.parameterGroupName = parameterGroupName
            self.tags = tags
            self.description = description
            self.parameterGroupFamily = parameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case tags = "Tags"
            case description = "Description"
            case parameterGroupFamily = "ParameterGroupFamily"
        }
    }

    public struct ClusterVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ClusterParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string)
        ]
        /// The description of the cluster version.
        public let description: String?
        /// The name of the cluster parameter group family for the cluster.
        public let clusterParameterGroupFamily: String?
        /// The version number used by the cluster.
        public let clusterVersion: String?

        public init(description: String? = nil, clusterParameterGroupFamily: String? = nil, clusterVersion: String? = nil) {
            self.description = description
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.clusterVersion = clusterVersion
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case clusterParameterGroupFamily = "ClusterParameterGroupFamily"
            case clusterVersion = "ClusterVersion"
        }
    }

    public struct AcceptReservedNodeExchangeInputMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetReservedNodeOfferingId", required: true, type: .string), 
            AWSShapeMember(label: "ReservedNodeId", required: true, type: .string)
        ]
        /// The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling GetReservedNodeExchangeOfferings 
        public let targetReservedNodeOfferingId: String
        /// A string representing the node identifier of the DC1 Reserved Node to be exchanged.
        public let reservedNodeId: String

        public init(targetReservedNodeOfferingId: String, reservedNodeId: String) {
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
            self.reservedNodeId = reservedNodeId
        }

        private enum CodingKeys: String, CodingKey {
            case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
            case reservedNodeId = "ReservedNodeId"
        }
    }

    public struct CreateSnapshotCopyGrantResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrant", required: false, type: .structure)
        ]
        public let snapshotCopyGrant: SnapshotCopyGrant?

        public init(snapshotCopyGrant: SnapshotCopyGrant? = nil) {
            self.snapshotCopyGrant = snapshotCopyGrant
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrant = "SnapshotCopyGrant"
        }
    }

    public struct CreateClusterSubnetGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSubnetGroup", required: false, type: .structure)
        ]
        public let clusterSubnetGroup: ClusterSubnetGroup?

        public init(clusterSubnetGroup: ClusterSubnetGroup? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSubnetGroup = "ClusterSubnetGroup"
        }
    }

    public struct TableRestoreStatusMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TableRestoreStatusDetails", required: false, type: .structure)
        ]
        /// A pagination token that can be used in a subsequent DescribeTableRestoreStatus request.
        public let marker: String?
        /// A list of status details for one or more table restore requests.
        public let tableRestoreStatusDetails: TableRestoreStatusList?

        public init(marker: String? = nil, tableRestoreStatusDetails: TableRestoreStatusList? = nil) {
            self.marker = marker
            self.tableRestoreStatusDetails = tableRestoreStatusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tableRestoreStatusDetails = "TableRestoreStatusDetails"
        }
    }

    public struct SnapshotCopyGrant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrantName", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The name of the snapshot copy grant.
        public let snapshotCopyGrantName: String?
        /// The unique identifier of the customer master key (CMK) in AWS KMS to which Amazon Redshift is granted permission.
        public let kmsKeyId: String?
        /// A list of tag instances.
        public let tags: TagList?

        public init(snapshotCopyGrantName: String? = nil, kmsKeyId: String? = nil, tags: TagList? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.kmsKeyId = kmsKeyId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrantName = "SnapshotCopyGrantName"
            case kmsKeyId = "KmsKeyId"
            case tags = "Tags"
        }
    }

    public struct HsmConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmPartitionName", required: false, type: .string), 
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "HsmIpAddress", required: false, type: .string)
        ]
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public let hsmPartitionName: String?
        /// The name of the Amazon Redshift HSM configuration.
        public let hsmConfigurationIdentifier: String?
        /// The list of tags for the HSM configuration.
        public let tags: TagList?
        /// A text description of the HSM configuration.
        public let description: String?
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public let hsmIpAddress: String?

        public init(hsmPartitionName: String? = nil, hsmConfigurationIdentifier: String? = nil, tags: TagList? = nil, description: String? = nil, hsmIpAddress: String? = nil) {
            self.hsmPartitionName = hsmPartitionName
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.tags = tags
            self.description = description
            self.hsmIpAddress = hsmIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case hsmPartitionName = "HsmPartitionName"
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
            case tags = "Tags"
            case description = "Description"
            case hsmIpAddress = "HsmIpAddress"
        }
    }

    public struct DescribeClusterSubnetGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSubnetGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The name of the cluster subnet group for which information is requested.
        public let clusterSubnetGroupName: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil, clusterSubnetGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case marker = "Marker"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
        }
    }

    public struct DeleteClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct ReservedNodeOfferingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedNodeOffering", required: false, type: .list)
        ]
        public let reservedNodeOffering: [ReservedNodeOffering]?

        public init(reservedNodeOffering: [ReservedNodeOffering]? = nil) {
            self.reservedNodeOffering = reservedNodeOffering
        }

        private enum CodingKeys: String, CodingKey {
            case reservedNodeOffering = "ReservedNodeOffering"
        }
    }

    public struct TrackListMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaintenanceTracks", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of maintenance tracks output by the DescribeClusterTracks operation. 
        public let maintenanceTracks: TrackList?
        /// The starting point to return a set of response tracklist records. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
        public let marker: String?

        public init(maintenanceTracks: TrackList? = nil, marker: String? = nil) {
            self.maintenanceTracks = maintenanceTracks
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maintenanceTracks = "MaintenanceTracks"
            case marker = "Marker"
        }
    }

    public struct EventList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Event", required: false, type: .list)
        ]
        public let event: [Event]?

        public init(event: [Event]? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event = "Event"
        }
    }

    public struct ModifyClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .structure)
        ]
        /// The name of the parameter group to be modified.
        public let parameterGroupName: String
        /// An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request. For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional. For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.
        public let parameters: ParametersList

        public init(parameterGroupName: String, parameters: ParametersList) {
            self.parameterGroupName = parameterGroupName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
            case parameters = "Parameters"
        }
    }

    public struct PurchaseReservedNodeOfferingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeCount", required: false, type: .integer), 
            AWSShapeMember(label: "ReservedNodeOfferingId", required: true, type: .string)
        ]
        /// The number of reserved nodes that you want to purchase. Default: 1 
        public let nodeCount: Int32?
        /// The unique identifier of the reserved node offering you want to purchase.
        public let reservedNodeOfferingId: String

        public init(nodeCount: Int32? = nil, reservedNodeOfferingId: String) {
            self.nodeCount = nodeCount
            self.reservedNodeOfferingId = reservedNodeOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case nodeCount = "NodeCount"
            case reservedNodeOfferingId = "ReservedNodeOfferingId"
        }
    }

    public struct DeleteHsmConfigurationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmConfigurationIdentifier", required: true, type: .string)
        ]
        /// The identifier of the Amazon Redshift HSM configuration to be deleted.
        public let hsmConfigurationIdentifier: String

        public init(hsmConfigurationIdentifier: String) {
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key, or name, for the resource tag.
        public let key: String?
        /// The value for the resource tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct EventCategoriesMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .structure), 
            AWSShapeMember(label: "SourceType", required: false, type: .string)
        ]
        /// The events in the event category.
        public let events: EventInfoMapList?
        /// The source type, such as cluster or cluster-snapshot, that the returned categories belong to.
        public let sourceType: String?

        public init(events: EventInfoMapList? = nil, sourceType: String? = nil) {
            self.events = events
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case sourceType = "SourceType"
        }
    }

    public struct ModifyClusterIamRolesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "AddIamRoles", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveIamRoles", required: false, type: .structure)
        ]
        /// The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
        public let clusterIdentifier: String
        /// Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
        public let addIamRoles: IamRoleArnList?
        /// Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
        public let removeIamRoles: IamRoleArnList?

        public init(clusterIdentifier: String, addIamRoles: IamRoleArnList? = nil, removeIamRoles: IamRoleArnList? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.addIamRoles = addIamRoles
            self.removeIamRoles = removeIamRoles
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
            case addIamRoles = "AddIamRoles"
            case removeIamRoles = "RemoveIamRoles"
        }
    }

    public struct AuthorizeClusterSecurityGroupIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroup", required: false, type: .structure)
        ]
        public let clusterSecurityGroup: ClusterSecurityGroup?

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroup = "ClusterSecurityGroup"
        }
    }

    public struct HsmClientCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmClientCertificatePublicKey", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "HsmClientCertificateIdentifier", required: false, type: .string)
        ]
        /// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
        public let hsmClientCertificatePublicKey: String?
        /// The list of tags for the HSM client certificate.
        public let tags: TagList?
        /// The identifier of the HSM client certificate.
        public let hsmClientCertificateIdentifier: String?

        public init(hsmClientCertificatePublicKey: String? = nil, tags: TagList? = nil, hsmClientCertificateIdentifier: String? = nil) {
            self.hsmClientCertificatePublicKey = hsmClientCertificatePublicKey
            self.tags = tags
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case hsmClientCertificatePublicKey = "HsmClientCertificatePublicKey"
            case tags = "Tags"
            case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        }
    }

    public struct DisableSnapshotCopyResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct ClusterSecurityGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroup", required: false, type: .list)
        ]
        public let clusterSecurityGroup: [ClusterSecurityGroup]?

        public init(clusterSecurityGroup: [ClusterSecurityGroup]? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroup = "ClusterSecurityGroup"
        }
    }

    public struct RevokeSnapshotAccessMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountWithRestoreAccess", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier of the AWS customer account that can no longer restore the specified snapshot.
        public let accountWithRestoreAccess: String
        /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        public let snapshotClusterIdentifier: String?
        /// The identifier of the snapshot that the account can no longer access.
        public let snapshotIdentifier: String

        public init(accountWithRestoreAccess: String, snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String) {
            self.accountWithRestoreAccess = accountWithRestoreAccess
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case accountWithRestoreAccess = "AccountWithRestoreAccess"
            case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
            case snapshotIdentifier = "SnapshotIdentifier"
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The name of the Amazon Redshift event notification subscription to be described.
        public let subscriptionName: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil, subscriptionName: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case marker = "Marker"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct ClusterCredentials: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DbPassword", required: false, type: .string), 
            AWSShapeMember(label: "DbUser", required: false, type: .string), 
            AWSShapeMember(label: "Expiration", required: false, type: .timestamp)
        ]
        /// A temporary password that authorizes the user name returned by DbUser to log on to the database DbName. 
        public let dbPassword: String?
        /// A database user name that is authorized to log on to the database DbName using the password DbPassword. If the specified DbUser exists in the database, the new user name has the same database privileges as the the user named in DbUser. By default, the user is added to PUBLIC. If the DbGroups parameter is specifed, DbUser is added to the listed groups for any sessions created using these credentials.
        public let dbUser: String?
        /// The date and time the password in DbPassword expires.
        public let expiration: TimeStamp?

        public init(dbPassword: String? = nil, dbUser: String? = nil, expiration: TimeStamp? = nil) {
            self.dbPassword = dbPassword
            self.dbUser = dbUser
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case dbPassword = "DbPassword"
            case dbUser = "DbUser"
            case expiration = "Expiration"
        }
    }

    public struct ReservedNodeOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedNodeOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "ReservedNodeOfferingType", required: false, type: .enum), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "NodeType", required: false, type: .string)
        ]
        /// The duration, in seconds, for which the offering will reserve the node.
        public let duration: Int32?
        /// The upfront fixed charge you will pay to purchase the specific reserved node offering.
        public let fixedPrice: Double?
        /// The charge to your account regardless of whether you are creating any clusters using the node offering. Recurring charges are only in effect for heavy-utilization reserved nodes.
        public let recurringCharges: RecurringChargeList?
        /// The currency code for the compute nodes offering.
        public let currencyCode: String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public let offeringType: String?
        /// The offering identifier.
        public let reservedNodeOfferingId: String?
        public let reservedNodeOfferingType: ReservedNodeOfferingType?
        /// The rate you are charged for each hour the cluster that is using the offering is running.
        public let usagePrice: Double?
        /// The node type offered by the reserved node offering.
        public let nodeType: String?

        public init(duration: Int32? = nil, fixedPrice: Double? = nil, recurringCharges: RecurringChargeList? = nil, currencyCode: String? = nil, offeringType: String? = nil, reservedNodeOfferingId: String? = nil, reservedNodeOfferingType: ReservedNodeOfferingType? = nil, usagePrice: Double? = nil, nodeType: String? = nil) {
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.recurringCharges = recurringCharges
            self.currencyCode = currencyCode
            self.offeringType = offeringType
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.usagePrice = usagePrice
            self.nodeType = nodeType
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case fixedPrice = "FixedPrice"
            case recurringCharges = "RecurringCharges"
            case currencyCode = "CurrencyCode"
            case offeringType = "OfferingType"
            case reservedNodeOfferingId = "ReservedNodeOfferingId"
            case reservedNodeOfferingType = "ReservedNodeOfferingType"
            case usagePrice = "UsagePrice"
            case nodeType = "NodeType"
        }
    }

    public struct DescribeClusterTracksMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The name of the maintenance track. 
        public let maintenanceTrackName: String?
        /// An integer value for the maximum number of maintenance tracks to return.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterTracks request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?

        public init(maintenanceTrackName: String? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.maintenanceTrackName = maintenanceTrackName
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maintenanceTrackName = "MaintenanceTrackName"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DescribeClusterSnapshotsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "OwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ClusterExists", required: false, type: .boolean), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The type of snapshots for which you are requesting information. By default, snapshots of all types are returned. Valid Values: automated | manual 
        public let snapshotType: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSnapshots request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
        public let ownerAccount: String?
        /// A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z 
        public let startTime: TimeStamp?
        /// The identifier of the cluster for which information about snapshots is requested.
        public let clusterIdentifier: String?
        /// A value that indicates whether to return snapshots only for an existing cluster. Table-level restore can be performed only using a snapshot of an existing cluster, that is, a cluster that has not been deleted. If ClusterExists is set to true, ClusterIdentifier is required.
        public let clusterExists: Bool?
        /// A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z 
        public let endTime: TimeStamp?
        /// The snapshot identifier of the snapshot about which to return information.
        public let snapshotIdentifier: String?
        /// A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(snapshotType: String? = nil, marker: String? = nil, ownerAccount: String? = nil, startTime: TimeStamp? = nil, clusterIdentifier: String? = nil, clusterExists: Bool? = nil, endTime: TimeStamp? = nil, snapshotIdentifier: String? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, maxRecords: Int32? = nil) {
            self.snapshotType = snapshotType
            self.marker = marker
            self.ownerAccount = ownerAccount
            self.startTime = startTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterExists = clusterExists
            self.endTime = endTime
            self.snapshotIdentifier = snapshotIdentifier
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotType = "SnapshotType"
            case marker = "Marker"
            case ownerAccount = "OwnerAccount"
            case startTime = "StartTime"
            case clusterIdentifier = "ClusterIdentifier"
            case clusterExists = "ClusterExists"
            case endTime = "EndTime"
            case snapshotIdentifier = "SnapshotIdentifier"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case maxRecords = "MaxRecords"
        }
    }

    public struct ResetClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResetAllParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string)
        ]
        /// If true, all parameters in the specified parameter group will be reset to their default values.  Default: true 
        public let resetAllParameters: Bool?
        /// An array of names of parameters to be reset. If ResetAllParameters option is not used, then at least one parameter name must be supplied.  Constraints: A maximum of 20 parameters can be reset in a single request.
        public let parameters: ParametersList?
        /// The name of the cluster parameter group to be reset.
        public let parameterGroupName: String

        public init(resetAllParameters: Bool? = nil, parameters: ParametersList? = nil, parameterGroupName: String) {
            self.resetAllParameters = resetAllParameters
            self.parameters = parameters
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case resetAllParameters = "ResetAllParameters"
            case parameters = "Parameters"
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public struct CreateClusterSecurityGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroup", required: false, type: .structure)
        ]
        public let clusterSecurityGroup: ClusterSecurityGroup?

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroup = "ClusterSecurityGroup"
        }
    }

    public struct LoggingStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "LastFailureTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: false, type: .string), 
            AWSShapeMember(label: "LastSuccessfulDeliveryTime", required: false, type: .timestamp)
        ]
        ///  true if logging is on, false if logging is off.
        public let loggingEnabled: Bool?
        /// The prefix applied to the log file names.
        public let s3KeyPrefix: String?
        /// The last time when logs failed to be delivered.
        public let lastFailureTime: TimeStamp?
        /// The message indicating that logs failed to be delivered.
        public let lastFailureMessage: String?
        /// The name of the S3 bucket where the log files are stored.
        public let bucketName: String?
        /// The last time that logs were delivered.
        public let lastSuccessfulDeliveryTime: TimeStamp?

        public init(loggingEnabled: Bool? = nil, s3KeyPrefix: String? = nil, lastFailureTime: TimeStamp? = nil, lastFailureMessage: String? = nil, bucketName: String? = nil, lastSuccessfulDeliveryTime: TimeStamp? = nil) {
            self.loggingEnabled = loggingEnabled
            self.s3KeyPrefix = s3KeyPrefix
            self.lastFailureTime = lastFailureTime
            self.lastFailureMessage = lastFailureMessage
            self.bucketName = bucketName
            self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
            case s3KeyPrefix = "S3KeyPrefix"
            case lastFailureTime = "LastFailureTime"
            case lastFailureMessage = "LastFailureMessage"
            case bucketName = "BucketName"
            case lastSuccessfulDeliveryTime = "LastSuccessfulDeliveryTime"
        }
    }

    public struct ParametersList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameter", required: false, type: .list)
        ]
        public let parameter: [Parameter]?

        public init(parameter: [Parameter]? = nil) {
            self.parameter = parameter
        }

        private enum CodingKeys: String, CodingKey {
            case parameter = "Parameter"
        }
    }

    public enum ReservedNodeOfferingType: String, CustomStringConvertible, Codable {
        case regular = "Regular"
        case upgradable = "Upgradable"
        public var description: String { return self.rawValue }
    }

    public struct GetReservedNodeExchangeOfferingsOutputMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReservedNodeOfferings", required: false, type: .structure)
        ]
        /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a GetReservedNodeExchangeOfferings request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. 
        public let marker: String?
        /// Returns an array of ReservedNodeOffering objects.
        public let reservedNodeOfferings: ReservedNodeOfferingList?

        public init(marker: String? = nil, reservedNodeOfferings: ReservedNodeOfferingList? = nil) {
            self.marker = marker
            self.reservedNodeOfferings = reservedNodeOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedNodeOfferings = "ReservedNodeOfferings"
        }
    }

    public struct EventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of Event instances. 
        public let events: EventList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(events: EventList? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct ClusterParameterGroupStatusList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterParameterGroup", required: false, type: .list)
        ]
        public let clusterParameterGroup: [ClusterParameterGroupStatus]?

        public init(clusterParameterGroup: [ClusterParameterGroupStatus]? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterParameterGroup = "ClusterParameterGroup"
        }
    }

    public struct HsmClientCertificateList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmClientCertificate", required: false, type: .list)
        ]
        public let hsmClientCertificate: [HsmClientCertificate]?

        public init(hsmClientCertificate: [HsmClientCertificate]? = nil) {
            self.hsmClientCertificate = hsmClientCertificate
        }

        private enum CodingKeys: String, CodingKey {
            case hsmClientCertificate = "HsmClientCertificate"
        }
    }

    public struct SubnetList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", required: false, type: .list)
        ]
        public let subnet: [Subnet]?

        public init(subnet: [Subnet]? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "Subnet"
        }
    }

    public struct CreateClusterSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// A description for the security group.
        public let description: String
        /// The name for the security group. Amazon Redshift stores the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric characters or hyphens.   Must not be "Default".   Must be unique for all security groups that are created by your AWS account.   Example: examplesecuritygroup 
        public let clusterSecurityGroupName: String
        /// A list of tag instances.
        public let tags: TagList?

        public init(description: String, clusterSecurityGroupName: String, tags: TagList? = nil) {
            self.description = description
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case clusterSecurityGroupName = "ClusterSecurityGroupName"
            case tags = "Tags"
        }
    }

    public struct OrderableClusterOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "ClusterType", required: false, type: .string)
        ]
        /// A list of availability zones for the orderable cluster.
        public let availabilityZones: AvailabilityZoneList?
        /// The version of the orderable cluster.
        public let clusterVersion: String?
        /// The node type for the orderable cluster.
        public let nodeType: String?
        /// The cluster type, for example multi-node. 
        public let clusterType: String?

        public init(availabilityZones: AvailabilityZoneList? = nil, clusterVersion: String? = nil, nodeType: String? = nil, clusterType: String? = nil) {
            self.availabilityZones = availabilityZones
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
            self.clusterType = clusterType
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case clusterVersion = "ClusterVersion"
            case nodeType = "NodeType"
            case clusterType = "ClusterType"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string)
        ]
        /// The source type, such as cluster or parameter group, to which the described event categories apply. Valid values: cluster, cluster-snapshot, cluster-parameter-group, and cluster-security-group.
        public let sourceType: String?

        public init(sourceType: String? = nil) {
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
        }
    }

    public struct CreateTagsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter Key and the corresponding value is passed in with the parameter Value. The Key and Value parameters are separated by a comma (,). Separate multiple tags with a space. For example, --tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0". 
        public let tags: TagList
        /// The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        public let resourceName: String

        public init(tags: TagList, resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceName = "ResourceName"
        }
    }

    public struct OrderableClusterOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableClusterOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// An OrderableClusterOption structure containing information about orderable options for the cluster.
        public let orderableClusterOptions: OrderableClusterOptionsList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(orderableClusterOptions: OrderableClusterOptionsList? = nil, marker: String? = nil) {
            self.orderableClusterOptions = orderableClusterOptions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case orderableClusterOptions = "OrderableClusterOptions"
            case marker = "Marker"
        }
    }

    public struct RevokeClusterSecurityGroupIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSecurityGroup", required: false, type: .structure)
        ]
        public let clusterSecurityGroup: ClusterSecurityGroup?

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroup = "ClusterSecurityGroup"
        }
    }

    public struct AccountsWithRestoreAccessList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountWithRestoreAccess", required: false, type: .list)
        ]
        public let accountWithRestoreAccess: [AccountWithRestoreAccess]?

        public init(accountWithRestoreAccess: [AccountWithRestoreAccess]? = nil) {
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }

        private enum CodingKeys: String, CodingKey {
            case accountWithRestoreAccess = "AccountWithRestoreAccess"
        }
    }

    public struct ClusterParameterStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterApplyErrorDescription", required: false, type: .string), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterApplyStatus", required: false, type: .string)
        ]
        /// The error that prevented the parameter from being applied to the database.
        public let parameterApplyErrorDescription: String?
        /// The name of the parameter.
        public let parameterName: String?
        /// The status of the parameter that indicates whether the parameter is in sync with the database, waiting for a cluster reboot, or encountered an error when being applied. The following are possible statuses and descriptions.    in-sync: The parameter value is in sync with the database.    pending-reboot: The parameter value will be applied after the cluster reboots.    applying: The parameter value is being applied to the database.    invalid-parameter: Cannot apply the parameter value because it has an invalid value or syntax.    apply-deferred: The parameter contains static property changes. The changes are deferred until the cluster reboots.    apply-error: Cannot connect to the cluster. The parameter change will be applied after the cluster reboots.    unknown-error: Cannot apply the parameter change right now. The change will be applied after the cluster reboots.  
        public let parameterApplyStatus: String?

        public init(parameterApplyErrorDescription: String? = nil, parameterName: String? = nil, parameterApplyStatus: String? = nil) {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterName = parameterName
            self.parameterApplyStatus = parameterApplyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case parameterApplyErrorDescription = "ParameterApplyErrorDescription"
            case parameterName = "ParameterName"
            case parameterApplyStatus = "ParameterApplyStatus"
        }
    }

    public struct DescribeReservedNodesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedNodeId", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// Identifier for the node reservation.
        public let reservedNodeId: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeReservedNodes request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(reservedNodeId: String? = nil, marker: String? = nil, maxRecords: Int32? = nil) {
            self.reservedNodeId = reservedNodeId
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case reservedNodeId = "ReservedNodeId"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct RestoreStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotSizeInMegaBytes", required: false, type: .long), 
            AWSShapeMember(label: "CurrentRestoreRateInMegaBytesPerSecond", required: false, type: .double), 
            AWSShapeMember(label: "ElapsedTimeInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "EstimatedTimeToCompletionInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "ProgressInMegaBytes", required: false, type: .long), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// The size of the set of snapshot data used to restore the cluster.
        public let snapshotSizeInMegaBytes: Int64?
        /// The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup.
        public let currentRestoreRateInMegaBytesPerSecond: Double?
        /// The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish.
        public let elapsedTimeInSeconds: Int64?
        /// The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore.
        public let estimatedTimeToCompletionInSeconds: Int64?
        /// The number of megabytes that have been transferred from snapshot storage.
        public let progressInMegaBytes: Int64?
        /// The status of the restore action. Returns starting, restoring, completed, or failed.
        public let status: String?

        public init(snapshotSizeInMegaBytes: Int64? = nil, currentRestoreRateInMegaBytesPerSecond: Double? = nil, elapsedTimeInSeconds: Int64? = nil, estimatedTimeToCompletionInSeconds: Int64? = nil, progressInMegaBytes: Int64? = nil, status: String? = nil) {
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotSizeInMegaBytes = "SnapshotSizeInMegaBytes"
            case currentRestoreRateInMegaBytesPerSecond = "CurrentRestoreRateInMegaBytesPerSecond"
            case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
            case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
            case progressInMegaBytes = "ProgressInMegaBytes"
            case status = "Status"
        }
    }

    public struct Cluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "PendingActions", required: false, type: .list), 
            AWSShapeMember(label: "MaintenanceTrackName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "ClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ClusterNodes", required: false, type: .list), 
            AWSShapeMember(label: "ClusterRevisionNumber", required: false, type: .string), 
            AWSShapeMember(label: "ModifyStatus", required: false, type: .string), 
            AWSShapeMember(label: "HsmStatus", required: false, type: .structure), 
            AWSShapeMember(label: "AutomatedSnapshotRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterParameterGroups", required: false, type: .structure), 
            AWSShapeMember(label: "AllowVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ClusterSnapshotCopyStatus", required: false, type: .structure), 
            AWSShapeMember(label: "RestoreStatus", required: false, type: .structure), 
            AWSShapeMember(label: "NumberOfNodes", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterPublicKey", required: false, type: .string), 
            AWSShapeMember(label: "EnhancedVpcRouting", required: false, type: .boolean), 
            AWSShapeMember(label: "IamRoles", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ClusterStatus", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticIpStatus", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterVersion", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]
        /// A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        /// Cluster operations that are waiting to be started.
        public let pendingActions: [String]?
        /// The name of the maintenance track for the cluster.
        public let maintenanceTrackName: String?
        /// A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements.  Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter. 
        public let clusterSecurityGroups: ClusterSecurityGroupMembershipList?
        /// The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default. 
        public let dBName: String?
        /// The unique identifier of the cluster.
        public let clusterIdentifier: String?
        /// The AWS Key Management Service (AWS KMS) key ID of the encryption key used to encrypt data in the cluster.
        public let kmsKeyId: String?
        /// The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
        public let preferredMaintenanceWindow: String?
        /// The nodes in the cluster.
        public let clusterNodes: [ClusterNode]?
        /// The specific revision number of the database in the cluster.
        public let clusterRevisionNumber: String?
        /// The status of a modify operation, if any, initiated for the cluster.
        public let modifyStatus: String?
        /// A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command. Values: active, applying
        public let hsmStatus: HsmStatus?
        /// The number of days that automatic cluster snapshots are retained.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.
        public let clusterParameterGroups: ClusterParameterGroupStatusList?
        /// A Boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window. 
        public let allowVersionUpgrade: Bool?
        /// A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
        public let clusterSnapshotCopyStatus: ClusterSnapshotCopyStatus?
        /// A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.
        public let restoreStatus: RestoreStatus?
        /// The number of compute nodes in the cluster.
        public let numberOfNodes: Int32?
        /// The public key for the cluster.
        public let clusterPublicKey: String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.
        public let iamRoles: ClusterIamRoleList?
        /// The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.
        public let clusterSubnetGroupName: String?
        /// A Boolean value that, if true, indicates that data in the cluster is encrypted at rest.
        public let encrypted: Bool?
        /// The node type for the nodes in the cluster.
        public let nodeType: String?
        /// A Boolean value that, if true, indicates that the cluster can be accessed from a public network.
        public let publiclyAccessible: Bool?
        /// A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.
        public let pendingModifiedValues: PendingModifiedValues?
        /// The date and time that the cluster was created.
        public let clusterCreateTime: TimeStamp?
        ///  The current state of the cluster. Possible values are the following:    available     creating     deleting     final-snapshot     hardware-failure     incompatible-hsm     incompatible-network     incompatible-parameters     incompatible-restore     modifying     rebooting     renaming     resizing     rotating-keys     storage-full     updating-hsm   
        public let clusterStatus: String?
        /// The master user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter. 
        public let masterUsername: String?
        /// The connection endpoint.
        public let endpoint: Endpoint?
        /// The list of tags for the cluster.
        public let tags: TagList?
        /// The status of the elastic IP (EIP) address.
        public let elasticIpStatus: ElasticIpStatus?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public let clusterVersion: String?
        /// The name of the Availability Zone in which the cluster is located.
        public let availabilityZone: String?
        /// The identifier of the VPC the cluster is in, if the cluster is in a VPC.
        public let vpcId: String?

        public init(vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, pendingActions: [String]? = nil, maintenanceTrackName: String? = nil, clusterSecurityGroups: ClusterSecurityGroupMembershipList? = nil, dBName: String? = nil, clusterIdentifier: String? = nil, kmsKeyId: String? = nil, preferredMaintenanceWindow: String? = nil, clusterNodes: [ClusterNode]? = nil, clusterRevisionNumber: String? = nil, modifyStatus: String? = nil, hsmStatus: HsmStatus? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, clusterParameterGroups: ClusterParameterGroupStatusList? = nil, allowVersionUpgrade: Bool? = nil, clusterSnapshotCopyStatus: ClusterSnapshotCopyStatus? = nil, restoreStatus: RestoreStatus? = nil, numberOfNodes: Int32? = nil, clusterPublicKey: String? = nil, enhancedVpcRouting: Bool? = nil, iamRoles: ClusterIamRoleList? = nil, clusterSubnetGroupName: String? = nil, encrypted: Bool? = nil, nodeType: String? = nil, publiclyAccessible: Bool? = nil, pendingModifiedValues: PendingModifiedValues? = nil, clusterCreateTime: TimeStamp? = nil, clusterStatus: String? = nil, masterUsername: String? = nil, endpoint: Endpoint? = nil, tags: TagList? = nil, elasticIpStatus: ElasticIpStatus? = nil, clusterVersion: String? = nil, availabilityZone: String? = nil, vpcId: String? = nil) {
            self.vpcSecurityGroups = vpcSecurityGroups
            self.pendingActions = pendingActions
            self.maintenanceTrackName = maintenanceTrackName
            self.clusterSecurityGroups = clusterSecurityGroups
            self.dBName = dBName
            self.clusterIdentifier = clusterIdentifier
            self.kmsKeyId = kmsKeyId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.clusterNodes = clusterNodes
            self.clusterRevisionNumber = clusterRevisionNumber
            self.modifyStatus = modifyStatus
            self.hsmStatus = hsmStatus
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.clusterParameterGroups = clusterParameterGroups
            self.allowVersionUpgrade = allowVersionUpgrade
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.restoreStatus = restoreStatus
            self.numberOfNodes = numberOfNodes
            self.clusterPublicKey = clusterPublicKey
            self.enhancedVpcRouting = enhancedVpcRouting
            self.iamRoles = iamRoles
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.encrypted = encrypted
            self.nodeType = nodeType
            self.publiclyAccessible = publiclyAccessible
            self.pendingModifiedValues = pendingModifiedValues
            self.clusterCreateTime = clusterCreateTime
            self.clusterStatus = clusterStatus
            self.masterUsername = masterUsername
            self.endpoint = endpoint
            self.tags = tags
            self.elasticIpStatus = elasticIpStatus
            self.clusterVersion = clusterVersion
            self.availabilityZone = availabilityZone
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroups = "VpcSecurityGroups"
            case pendingActions = "PendingActions"
            case maintenanceTrackName = "MaintenanceTrackName"
            case clusterSecurityGroups = "ClusterSecurityGroups"
            case dBName = "DBName"
            case clusterIdentifier = "ClusterIdentifier"
            case kmsKeyId = "KmsKeyId"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case clusterNodes = "ClusterNodes"
            case clusterRevisionNumber = "ClusterRevisionNumber"
            case modifyStatus = "ModifyStatus"
            case hsmStatus = "HsmStatus"
            case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
            case clusterParameterGroups = "ClusterParameterGroups"
            case allowVersionUpgrade = "AllowVersionUpgrade"
            case clusterSnapshotCopyStatus = "ClusterSnapshotCopyStatus"
            case restoreStatus = "RestoreStatus"
            case numberOfNodes = "NumberOfNodes"
            case clusterPublicKey = "ClusterPublicKey"
            case enhancedVpcRouting = "EnhancedVpcRouting"
            case iamRoles = "IamRoles"
            case clusterSubnetGroupName = "ClusterSubnetGroupName"
            case encrypted = "Encrypted"
            case nodeType = "NodeType"
            case publiclyAccessible = "PubliclyAccessible"
            case pendingModifiedValues = "PendingModifiedValues"
            case clusterCreateTime = "ClusterCreateTime"
            case clusterStatus = "ClusterStatus"
            case masterUsername = "MasterUsername"
            case endpoint = "Endpoint"
            case tags = "Tags"
            case elasticIpStatus = "ElasticIpStatus"
            case clusterVersion = "ClusterVersion"
            case availabilityZone = "AvailabilityZone"
            case vpcId = "VpcId"
        }
    }

    public struct TagKeyList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKey", required: false, type: .list)
        ]
        public let tagKey: [String]?

        public init(tagKey: [String]? = nil) {
            self.tagKey = tagKey
        }

        private enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
        }
    }

    public struct SnapshotCopyGrantList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCopyGrant", required: false, type: .list)
        ]
        public let snapshotCopyGrant: [SnapshotCopyGrant]?

        public init(snapshotCopyGrant: [SnapshotCopyGrant]? = nil) {
            self.snapshotCopyGrant = snapshotCopyGrant
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCopyGrant = "SnapshotCopyGrant"
        }
    }

    public struct SnapshotList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .list)
        ]
        public let snapshot: [Snapshot]?

        public init(snapshot: [Snapshot]? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct DescribeSnapshotCopyGrantsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TagValues", required: false, type: .structure), 
            AWSShapeMember(label: "TagKeys", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotCopyGrantName", required: false, type: .string)
        ]
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// The name of the snapshot copy grant.
        public let snapshotCopyGrantName: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil, snapshotCopyGrantName: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case tagValues = "TagValues"
            case tagKeys = "TagKeys"
            case marker = "Marker"
            case snapshotCopyGrantName = "SnapshotCopyGrantName"
        }
    }

    public struct ReservedNodeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedNode", required: false, type: .list)
        ]
        public let reservedNode: [ReservedNode]?

        public init(reservedNode: [ReservedNode]? = nil) {
            self.reservedNode = reservedNode
        }

        private enum CodingKeys: String, CodingKey {
            case reservedNode = "ReservedNode"
        }
    }

    public struct SupportedPlatformsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportedPlatform", required: false, type: .list)
        ]
        public let supportedPlatform: [SupportedPlatform]?

        public init(supportedPlatform: [SupportedPlatform]? = nil) {
            self.supportedPlatform = supportedPlatform
        }

        private enum CodingKeys: String, CodingKey {
            case supportedPlatform = "SupportedPlatform"
        }
    }

    public struct ClusterSubnetGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterSubnetGroup", required: false, type: .list)
        ]
        public let clusterSubnetGroup: [ClusterSubnetGroup]?

        public init(clusterSubnetGroup: [ClusterSubnetGroup]? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSubnetGroup = "ClusterSubnetGroup"
        }
    }

    public struct IPRangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IPRange", required: false, type: .list)
        ]
        public let iPRange: [IPRange]?

        public init(iPRange: [IPRange]? = nil) {
            self.iPRange = iPRange
        }

        private enum CodingKeys: String, CodingKey {
            case iPRange = "IPRange"
        }
    }

    public struct CreateHsmClientCertificateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmClientCertificate", required: false, type: .structure)
        ]
        public let hsmClientCertificate: HsmClientCertificate?

        public init(hsmClientCertificate: HsmClientCertificate? = nil) {
            self.hsmClientCertificate = hsmClientCertificate
        }

        private enum CodingKeys: String, CodingKey {
            case hsmClientCertificate = "HsmClientCertificate"
        }
    }

    public struct DescribeLoggingStatusMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterIdentifier", required: true, type: .string)
        ]
        /// The identifier of the cluster from which to get the logging status. Example: examplecluster 
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterIdentifier = "ClusterIdentifier"
        }
    }

    public struct EventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "EventSubscriptionsList", required: false, type: .structure)
        ]
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of event subscriptions.
        public let eventSubscriptionsList: EventSubscriptionsList?

        public init(marker: String? = nil, eventSubscriptionsList: EventSubscriptionsList? = nil) {
            self.marker = marker
            self.eventSubscriptionsList = eventSubscriptionsList
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case eventSubscriptionsList = "EventSubscriptionsList"
        }
    }

    public struct VpcSecurityGroupIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .list)
        ]
        public let vpcSecurityGroupId: [String]?

        public init(vpcSecurityGroupId: [String]? = nil) {
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

}