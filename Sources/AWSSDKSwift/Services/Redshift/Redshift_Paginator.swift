// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.


extension Redshift {

    ///  Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.  For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all parameter groups that have any combination of those values are returned. If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.
    public func describeClusterParameterGroupsPaginator(_ input: DescribeClusterParameterGroupsMessage) -> Future<[ClusterParameterGroup]> {
        return client.paginate(input: input, command: describeClusterParameterGroups, resultKey: "parameterGroups", tokenKey: "marker")
    }
    
    ///  Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on. You can specify source filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from ModifyClusterParameterGroup, you can specify source equal to user.  For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
    public func describeClusterParametersPaginator(_ input: DescribeClusterParametersMessage) -> Future<[Parameter]> {
        return client.paginate(input: input, command: describeClusterParameters, resultKey: "parameters", tokenKey: "marker")
    }
    
    ///  Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.  For information about managing security groups, go to Amazon Redshift Cluster Security Groups in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all security groups that have any combination of those values are returned. If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.
    public func describeClusterSecurityGroupsPaginator(_ input: DescribeClusterSecurityGroupsMessage) -> Future<[ClusterSecurityGroup]> {
        return client.paginate(input: input, command: describeClusterSecurityGroups, resultKey: "clusterSecurityGroups", tokenKey: "marker")
    }
    
    ///  Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters. If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.
    public func describeClusterSnapshotsPaginator(_ input: DescribeClusterSnapshotsMessage) -> Future<[Snapshot]> {
        return client.paginate(input: input, command: describeClusterSnapshots, resultKey: "snapshots", tokenKey: "marker")
    }
    
    ///  Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all subnet groups that have any combination of those values are returned. If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.
    public func describeClusterSubnetGroupsPaginator(_ input: DescribeClusterSubnetGroupsMessage) -> Future<[ClusterSubnetGroup]> {
        return client.paginate(input: input, command: describeClusterSubnetGroups, resultKey: "clusterSubnetGroups", tokenKey: "marker")
    }
    
    ///  Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide.
    public func describeClusterVersionsPaginator(_ input: DescribeClusterVersionsMessage) -> Future<[ClusterVersion]> {
        return client.paginate(input: input, command: describeClusterVersions, resultKey: "clusterVersions", tokenKey: "marker")
    }
    
    ///  Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all clusters that have any combination of those values are returned. If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.
    public func describeClustersPaginator(_ input: DescribeClustersMessage) -> Future<[Cluster]> {
        return client.paginate(input: input, command: describeClusters, resultKey: "clusters", tokenKey: "marker")
    }
    
    ///  Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all subscriptions that have any combination of those values are returned. If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.
    public func describeEventSubscriptionsPaginator(_ input: DescribeEventSubscriptionsMessage) -> Future<[EventSubscription]> {
        return client.paginate(input: input, command: describeEventSubscriptions, resultKey: "eventSubscriptionsList", tokenKey: "marker")
    }
    
    ///  Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
    public func describeEventsPaginator(_ input: DescribeEventsMessage) -> Future<[Event]> {
        return client.paginate(input: input, command: describeEvents, resultKey: "events", tokenKey: "marker")
    }
    
    ///  Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all HSM client certificates that have any combination of those values are returned. If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.
    public func describeHsmClientCertificatesPaginator(_ input: DescribeHsmClientCertificatesMessage) -> Future<[HsmClientCertificate]> {
        return client.paginate(input: input, command: describeHsmClientCertificates, resultKey: "hsmClientCertificates", tokenKey: "marker")
    }
    
    ///  Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all HSM connections that have any combination of those values are returned. If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.
    public func describeHsmConfigurationsPaginator(_ input: DescribeHsmConfigurationsMessage) -> Future<[HsmConfiguration]> {
        return client.paginate(input: input, command: describeHsmConfigurations, resultKey: "hsmConfigurations", tokenKey: "marker")
    }
    
    ///  Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
    public func describeNodeConfigurationOptionsPaginator(_ input: DescribeNodeConfigurationOptionsMessage) -> Future<[NodeConfigurationOption]> {
        return client.paginate(input: input, command: describeNodeConfigurationOptions, resultKey: "nodeConfigurationOptionList", tokenKey: "marker")
    }
    
    ///  Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to Amazon Redshift Clusters in the Amazon Redshift Cluster Management Guide.
    public func describeOrderableClusterOptionsPaginator(_ input: DescribeOrderableClusterOptionsMessage) -> Future<[OrderableClusterOption]> {
        return client.paginate(input: input, command: describeOrderableClusterOptions, resultKey: "orderableClusterOptions", tokenKey: "marker")
    }
    
    ///  Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to PurchaseReservedNodeOffering to reserve one or more nodes for your Amazon Redshift cluster.   For more information about reserved node offerings, go to Purchasing Reserved Nodes in the Amazon Redshift Cluster Management Guide.
    public func describeReservedNodeOfferingsPaginator(_ input: DescribeReservedNodeOfferingsMessage) -> Future<[ReservedNodeOffering]> {
        return client.paginate(input: input, command: describeReservedNodeOfferings, resultKey: "reservedNodeOfferings", tokenKey: "marker")
    }
    
    ///  Returns the descriptions of the reserved nodes.
    public func describeReservedNodesPaginator(_ input: DescribeReservedNodesMessage) -> Future<[ReservedNode]> {
        return client.paginate(input: input, command: describeReservedNodes, resultKey: "reservedNodes", tokenKey: "marker")
    }
    
    ///  Describes properties of scheduled actions. 
    public func describeScheduledActionsPaginator(_ input: DescribeScheduledActionsMessage) -> Future<[ScheduledAction]> {
        return client.paginate(input: input, command: describeScheduledActions, resultKey: "scheduledActions", tokenKey: "marker")
    }
    
}

extension Redshift.DescribeClusterParameterGroupsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            marker: token, 
            maxRecords: original.maxRecords, 
            parameterGroupName: original.parameterGroupName, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeClusterParametersMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            marker: token, 
            maxRecords: original.maxRecords, 
            parameterGroupName: original.parameterGroupName, 
            source: original.source
        )
    }
}

extension Redshift.DescribeClusterSecurityGroupsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            clusterSecurityGroupName: original.clusterSecurityGroupName, 
            marker: token, 
            maxRecords: original.maxRecords, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeClusterSnapshotsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            clusterExists: original.clusterExists, 
            clusterIdentifier: original.clusterIdentifier, 
            endTime: original.endTime, 
            marker: token, 
            maxRecords: original.maxRecords, 
            ownerAccount: original.ownerAccount, 
            snapshotIdentifier: original.snapshotIdentifier, 
            snapshotType: original.snapshotType, 
            sortingEntities: original.sortingEntities, 
            startTime: original.startTime, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeClusterSubnetGroupsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            clusterSubnetGroupName: original.clusterSubnetGroupName, 
            marker: token, 
            maxRecords: original.maxRecords, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeClusterVersionsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            clusterParameterGroupFamily: original.clusterParameterGroupFamily, 
            clusterVersion: original.clusterVersion, 
            marker: token, 
            maxRecords: original.maxRecords
        )
    }
}

extension Redshift.DescribeClustersMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            clusterIdentifier: original.clusterIdentifier, 
            marker: token, 
            maxRecords: original.maxRecords, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeEventSubscriptionsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            marker: token, 
            maxRecords: original.maxRecords, 
            subscriptionName: original.subscriptionName, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeEventsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            duration: original.duration, 
            endTime: original.endTime, 
            marker: token, 
            maxRecords: original.maxRecords, 
            sourceIdentifier: original.sourceIdentifier, 
            sourceType: original.sourceType, 
            startTime: original.startTime
        )
    }
}

extension Redshift.DescribeHsmClientCertificatesMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            hsmClientCertificateIdentifier: original.hsmClientCertificateIdentifier, 
            marker: token, 
            maxRecords: original.maxRecords, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeHsmConfigurationsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            hsmConfigurationIdentifier: original.hsmConfigurationIdentifier, 
            marker: token, 
            maxRecords: original.maxRecords, 
            tagKeys: original.tagKeys, 
            tagValues: original.tagValues
        )
    }
}

extension Redshift.DescribeNodeConfigurationOptionsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            actionType: original.actionType, 
            clusterIdentifier: original.clusterIdentifier, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords, 
            ownerAccount: original.ownerAccount, 
            snapshotIdentifier: original.snapshotIdentifier
        )
    }
}

extension Redshift.DescribeOrderableClusterOptionsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            clusterVersion: original.clusterVersion, 
            marker: token, 
            maxRecords: original.maxRecords, 
            nodeType: original.nodeType
        )
    }
}

extension Redshift.DescribeReservedNodeOfferingsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            marker: token, 
            maxRecords: original.maxRecords, 
            reservedNodeOfferingId: original.reservedNodeOfferingId
        )
    }
}

extension Redshift.DescribeReservedNodesMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            marker: token, 
            maxRecords: original.maxRecords, 
            reservedNodeId: original.reservedNodeId
        )
    }
}

extension Redshift.DescribeScheduledActionsMessage: AWSPaginateable {
    public init(_ original: Self, token: String) {
        self.init(
            active: original.active, 
            endTime: original.endTime, 
            filters: original.filters, 
            marker: token, 
            maxRecords: original.maxRecords, 
            scheduledActionName: original.scheduledActionName, 
            startTime: original.startTime, 
            targetActionType: original.targetActionType
        )
    }
}


