// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
AWS Serverless Application Repository
*/
public struct Serverlessrepo {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "serverlessrepo",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-09-08",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [ServerlessrepoError.self]
        )
    }

    ///  Lists versions for the specified application.
    public func listApplicationVersions(_ input: ListApplicationVersionsRequest) throws -> ListApplicationVersionsResponse {
        return try client.send(operation: "ListApplicationVersions", path: "/applications/{applicationId}/versions", httpMethod: "GET", input: input)
    }

    ///  Gets the specified application.
    public func getApplication(_ input: GetApplicationRequest) throws -> GetApplicationResponse {
        return try client.send(operation: "GetApplication", path: "/applications/{applicationId}", httpMethod: "GET", input: input)
    }

    ///  Creates an application version.
    public func createApplicationVersion(_ input: CreateApplicationVersionRequest) throws -> CreateApplicationVersionResponse {
        return try client.send(operation: "CreateApplicationVersion", path: "/applications/{applicationId}/versions/{semanticVersion}", httpMethod: "PUT", input: input)
    }

    ///  Gets the policy for the specified application.
    public func getApplicationPolicy(_ input: GetApplicationPolicyRequest) throws -> GetApplicationPolicyResponse {
        return try client.send(operation: "GetApplicationPolicy", path: "/applications/{applicationId}/policy", httpMethod: "GET", input: input)
    }

    ///  Lists applications owned by the requester.
    public func listApplications(_ input: ListApplicationsRequest) throws -> ListApplicationsResponse {
        return try client.send(operation: "ListApplications", path: "/applications", httpMethod: "GET", input: input)
    }

    ///  Puts the policy for the specified application.
    public func putApplicationPolicy(_ input: PutApplicationPolicyRequest) throws -> PutApplicationPolicyResponse {
        return try client.send(operation: "PutApplicationPolicy", path: "/applications/{applicationId}/policy", httpMethod: "PUT", input: input)
    }

    ///  Creates an AWS CloudFormation ChangeSet for the given application.
    public func createCloudFormationChangeSet(_ input: CreateCloudFormationChangeSetRequest) throws -> CreateCloudFormationChangeSetResponse {
        return try client.send(operation: "CreateCloudFormationChangeSet", path: "/applications/{applicationId}/changesets", httpMethod: "POST", input: input)
    }

    ///  Updates the specified application.
    public func updateApplication(_ input: UpdateApplicationRequest) throws -> UpdateApplicationResponse {
        return try client.send(operation: "UpdateApplication", path: "/applications/{applicationId}", httpMethod: "PATCH", input: input)
    }

    ///  Creates an application, optionally including an AWS SAM file to create the first application version in the same call.
    public func createApplication(_ input: CreateApplicationRequest) throws -> CreateApplicationResponse {
        return try client.send(operation: "CreateApplication", path: "/applications", httpMethod: "POST", input: input)
    }


}