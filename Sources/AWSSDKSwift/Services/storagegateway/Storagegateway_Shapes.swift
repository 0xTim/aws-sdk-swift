// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Storagegateway {

    public struct DeleteSnapshotScheduleOutput: Serializable, Initializable {
        var volumeARN: String? = nil

        public init() {}

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

    }

    public struct DeleteTapeArchiveOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape that was deleted from the virtual tape shelf (VTS).
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct ResetCacheInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeGatewayInformationInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct SetLocalConsolePasswordInput: Serializable, Initializable {
        /// The password you want to set for your VM local console.
        var localConsolePassword: String = ""
        var gatewayARN: String = ""

        public init() {}

        public init(localConsolePassword: String, gatewayARN: String) {
            self.localConsolePassword = localConsolePassword
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeTapesOutput: Serializable, Initializable {
        /// An opaque string which can be used as part of a subsequent DescribeTapes call to retrieve the next page of results. If a response does not contain a marker, then there are no more results to be retrieved.
        var marker: String? = nil
        /// An array of virtual tape descriptions.
        var tapes: [Tape]? = nil

        public init() {}

        public init(marker: String? = nil, tapes: [Tape]? = nil) {
            self.marker = marker
            self.tapes = tapes
        }

    }

    public struct AddUploadBufferOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct RetrieveTapeArchiveInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape you want to retrieve from the virtual tape shelf (VTS).
        var tapeARN: String = ""
        /// The Amazon Resource Name (ARN) of the gateway you want to retrieve the virtual tape to. Use the ListGateways operation to return a list of gateways for your account and region. You retrieve archived virtual tapes to only one gateway and the gateway must be a gateway-VTL.
        var gatewayARN: String = ""

        public init() {}

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

    }

    public struct CreateTapeWithBarcodeInput: Serializable, Initializable {
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tape with. Use the ListGateways operation to return a list of gateways for your account and region.
        var gatewayARN: String = ""
        /// The size, in bytes, of the virtual tape that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        var tapeSizeInBytes: Int64 = 0
        /// The barcode that you want to assign to the tape.
        var tapeBarcode: String = ""

        public init() {}

        public init(gatewayARN: String, tapeSizeInBytes: Int64, tapeBarcode: String) {
            self.gatewayARN = gatewayARN
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcode = tapeBarcode
        }

    }

    public struct CancelArchivalInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel archiving for.
        var tapeARN: String = ""
        var gatewayARN: String = ""

        public init() {}

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

    }

    public struct DeleteGatewayOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeCacheOutput: Serializable, Initializable {
        var cacheAllocatedInBytes: Int64? = nil
        var gatewayARN: String? = nil
        var cacheUsedPercentage: Double? = nil
        var cacheDirtyPercentage: Double? = nil
        var cacheHitPercentage: Double? = nil
        var cacheMissPercentage: Double? = nil
        var diskIds: [String]? = nil

        public init() {}

        public init(cacheAllocatedInBytes: Int64? = nil, gatewayARN: String? = nil, cacheUsedPercentage: Double? = nil, cacheDirtyPercentage: Double? = nil, cacheHitPercentage: Double? = nil, cacheMissPercentage: Double? = nil, diskIds: [String]? = nil) {
            self.cacheAllocatedInBytes = cacheAllocatedInBytes
            self.gatewayARN = gatewayARN
            self.cacheUsedPercentage = cacheUsedPercentage
            self.cacheDirtyPercentage = cacheDirtyPercentage
            self.cacheHitPercentage = cacheHitPercentage
            self.cacheMissPercentage = cacheMissPercentage
            self.diskIds = diskIds
        }

    }

    public struct DescribeNFSFileSharesOutput: Serializable, Initializable {
        /// An array containing a description for each requested file share. 
        var nFSFileShareInfoList: [NFSFileShareInfo]? = nil

        public init() {}

        public init(nFSFileShareInfoList: [NFSFileShareInfo]? = nil) {
            self.nFSFileShareInfoList = nFSFileShareInfoList
        }

    }

    public struct NFSFileShareDefaults: Serializable, Initializable {
        /// The default owner ID for files in the file share (unless the files have another owner ID specified). The default value is nfsnobody. 
        var ownerId: Int64? = nil
        /// The Unix file mode in the form "nnnn". For example, "0666" represents the default file mode inside the file share. The default value is 0666. 
        var fileMode: String? = nil
        /// The default group ID for the file share (unless the files have another group ID specified). The default value is nfsnobody. 
        var groupId: Int64? = nil
        /// The Unix directory mode in the form "nnnn". For example, "0666" represents the default access mode for all directories inside the file share. The default value is 0777.
        var directoryMode: String? = nil

        public init() {}

        public init(ownerId: Int64? = nil, fileMode: String? = nil, groupId: Int64? = nil, directoryMode: String? = nil) {
            self.ownerId = ownerId
            self.fileMode = fileMode
            self.groupId = groupId
            self.directoryMode = directoryMode
        }

    }

    public struct DescribeTapesInput: Serializable, Initializable {
        var gatewayARN: String = ""
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe. If this parameter is not specified, AWS Storage Gateway returns a description of all virtual tapes associated with the specified gateway.
        var tapeARNs: [String]? = nil
        /// Specifies that the number of virtual tapes described be limited to the specified number.  Amazon Web Services may impose its own limit, if this field is not set. 
        var limit: Int32? = nil
        /// A marker value, obtained in a previous call to DescribeTapes. This marker indicates which page of results to retrieve.  If not specified, the first page of results is retrieved.
        var marker: String? = nil

        public init() {}

        public init(gatewayARN: String, tapeARNs: [String]? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.tapeARNs = tapeARNs
            self.limit = limit
            self.marker = marker
        }

    }

    public struct DescribeTapeRecoveryPointsInput: Serializable, Initializable {
        /// An opaque string that indicates the position at which to begin describing the virtual tape recovery points.
        var marker: String? = nil
        var gatewayARN: String = ""
        /// Specifies that the number of virtual tape recovery points that are described be limited to the specified number.
        var limit: Int32? = nil

        public init() {}

        public init(marker: String? = nil, gatewayARN: String, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

    }

    public struct CreateSnapshotFromVolumeRecoveryPointInput: Serializable, Initializable {
        var snapshotDescription: String = ""
        var volumeARN: String = ""

        public init() {}

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

    }

    public struct AddUploadBufferInput: Serializable, Initializable {
        var gatewayARN: String = ""
        var diskIds: [String] = []

        public init() {}

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

    }

    public struct ListVolumeRecoveryPointsInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct ListTagsForResourceInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource for which you want to list tags.
        var resourceARN: String = ""
        /// An opaque string that indicates the position at which to begin returning the list of tags.
        var marker: String? = nil
        /// Specifies that the list of tags returned be limited to the specified number of items.
        var limit: Int32? = nil

        public init() {}

        public init(resourceARN: String, marker: String? = nil, limit: Int32? = nil) {
            self.resourceARN = resourceARN
            self.marker = marker
            self.limit = limit
        }

    }

    public struct UpdateVTLDeviceTypeInput: Serializable, Initializable {
        /// The type of medium changer you want to select.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        var deviceType: String = ""
        /// The Amazon Resource Name (ARN) of the medium changer you want to select.
        var vTLDeviceARN: String = ""

        public init() {}

        public init(deviceType: String, vTLDeviceARN: String) {
            self.deviceType = deviceType
            self.vTLDeviceARN = vTLDeviceARN
        }

    }

    public struct TapeRecoveryPointInfo: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape.
        var tapeARN: String? = nil
        /// The time when the point-in-time view of the virtual tape was replicated for later recovery. The string format of the tape recovery point time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        var tapeRecoveryPointTime: Date? = nil
        var tapeStatus: String? = nil
        /// The size, in bytes, of the virtual tapes to recover.
        var tapeSizeInBytes: Int64? = nil

        public init() {}

        public init(tapeARN: String? = nil, tapeRecoveryPointTime: Date? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.tapeRecoveryPointTime = tapeRecoveryPointTime
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

    }

    public struct RetrieveTapeArchiveOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the retrieved virtual tape.
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct Tag: Serializable, Initializable {
        var value: String = ""
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct AddCacheOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct StartGatewayInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct ListTapesOutput: Serializable, Initializable {
        /// A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.
        var marker: String? = nil
        var tapeInfos: [TapeInfo]? = nil

        public init() {}

        public init(marker: String? = nil, tapeInfos: [TapeInfo]? = nil) {
            self.marker = marker
            self.tapeInfos = tapeInfos
        }

    }

    public struct TapeInfo: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of a virtual tape.
        var tapeARN: String? = nil
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        var gatewayARN: String? = nil
        /// The status of the tape.
        var tapeStatus: String? = nil
        /// The size, in bytes, of a virtual tape.
        var tapeSizeInBytes: Int64? = nil
        /// The barcode that identifies a specific virtual tape.
        var tapeBarcode: String? = nil

        public init() {}

        public init(tapeARN: String? = nil, gatewayARN: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil, tapeBarcode: String? = nil) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcode = tapeBarcode
        }

    }

    public struct UpdateGatewayInformationInput: Serializable, Initializable {
        var gatewayTimezone: String? = nil
        var gatewayName: String? = nil
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayTimezone: String? = nil, gatewayName: String? = nil, gatewayARN: String) {
            self.gatewayTimezone = gatewayTimezone
            self.gatewayName = gatewayName
            self.gatewayARN = gatewayARN
        }

    }

    public struct UpdateMaintenanceStartTimeInput: Serializable, Initializable {
        var gatewayARN: String = ""
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
        var hourOfDay: Int32 = 0
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
        var minuteOfHour: Int32 = 0
        /// The maintenance start time day of the week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
        var dayOfWeek: Int32 = 0

        public init() {}

        public init(gatewayARN: String, hourOfDay: Int32, minuteOfHour: Int32, dayOfWeek: Int32) {
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.dayOfWeek = dayOfWeek
        }

    }

    public struct DeleteVolumeInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        var volumeARN: String = ""

        public init() {}

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

    }

    public struct DescribeSnapshotScheduleInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        var volumeARN: String = ""

        public init() {}

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

    }

    public struct RemoveTagsFromResourceInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource you want to remove the tags from.
        var resourceARN: String = ""
        /// The keys of the tags you want to remove from the specified resource. A tag is composed of a key/value pair.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

    }

    public struct DescribeWorkingStorageInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeWorkingStorageOutput: Serializable, Initializable {
        /// An array of the gateway's local disk IDs that are configured as working storage. Each local disk ID is specified as a string (minimum length of 1 and maximum length of 300). If no local disks are configured as working storage, then the DiskIds array is empty.
        var diskIds: [String]? = nil
        var gatewayARN: String? = nil
        /// The total working storage in bytes in use by the gateway. If no working storage is configured for the gateway, this field returns 0.
        var workingStorageUsedInBytes: Int64? = nil
        /// The total working storage in bytes allocated for the gateway. If no working storage is configured for the gateway, this field returns 0.
        var workingStorageAllocatedInBytes: Int64? = nil

        public init() {}

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, workingStorageUsedInBytes: Int64? = nil, workingStorageAllocatedInBytes: Int64? = nil) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
            self.workingStorageUsedInBytes = workingStorageUsedInBytes
            self.workingStorageAllocatedInBytes = workingStorageAllocatedInBytes
        }

    }

    public struct DeleteTapeArchiveInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).
        var tapeARN: String = ""

        public init() {}

        public init(tapeARN: String) {
            self.tapeARN = tapeARN
        }

    }

    public struct Disk: Serializable, Initializable {
        var diskStatus: String? = nil
        var diskSizeInBytes: Int64? = nil
        var diskId: String? = nil
        var diskNode: String? = nil
        var diskPath: String? = nil
        var diskAllocationType: String? = nil
        var diskAllocationResource: String? = nil

        public init() {}

        public init(diskStatus: String? = nil, diskSizeInBytes: Int64? = nil, diskId: String? = nil, diskNode: String? = nil, diskPath: String? = nil, diskAllocationType: String? = nil, diskAllocationResource: String? = nil) {
            self.diskStatus = diskStatus
            self.diskSizeInBytes = diskSizeInBytes
            self.diskId = diskId
            self.diskNode = diskNode
            self.diskPath = diskPath
            self.diskAllocationType = diskAllocationType
            self.diskAllocationResource = diskAllocationResource
        }

    }

    public struct UpdateVTLDeviceTypeOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the medium changer you have selected.
        var vTLDeviceARN: String? = nil

        public init() {}

        public init(vTLDeviceARN: String? = nil) {
            self.vTLDeviceARN = vTLDeviceARN
        }

    }

    public struct ActivateGatewayInput: Serializable, Initializable {
        /// Your gateway activation key. You can obtain the activation key by sending an HTTP GET request with redirects enabled to the gateway IP address (port 80). The redirect URL returned in the response provides you the activation key for your gateway in the query string parameter activationKey. It may also include other activation-related parameters, however, these are merely defaults -- the arguments you pass to the ActivateGateway API call determine the actual configuration of your gateway.
        var activationKey: String = ""
        /// A value that defines the type of gateway to activate. The type specified is critical to all later functions of the gateway and cannot be changed after activation. The default value is STORED. 
        var gatewayType: String? = nil
        /// The value that indicates the type of medium changer to use for gateway-VTL. This field is optional.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        var mediumChangerType: String? = nil
        /// A value that indicates the time zone you want to set for the gateway. The time zone is used, for example, for scheduling snapshots and your gateway's maintenance schedule.
        var gatewayTimezone: String = ""
        /// A value that indicates the region where you want to store the snapshot backups. The gateway region specified must be the same region as the region in your Host header in the request. For more information about available regions and endpoints for AWS Storage Gateway, see Regions and Endpoints in the Amazon Web Services Glossary.  Valid Values: "us-east-1", "us-west-1", "us-west-2", "eu-west-1", "eu-central-1", "ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "sa-east-1"
        var gatewayRegion: String = ""
        /// The name you configured for your gateway.
        var gatewayName: String = ""
        /// The value that indicates the type of tape drive to use for gateway-VTL. This field is optional.  Valid Values: "IBM-ULT3580-TD5" 
        var tapeDriveType: String? = nil

        public init() {}

        public init(activationKey: String, gatewayType: String? = nil, mediumChangerType: String? = nil, gatewayTimezone: String, gatewayRegion: String, gatewayName: String, tapeDriveType: String? = nil) {
            self.activationKey = activationKey
            self.gatewayType = gatewayType
            self.mediumChangerType = mediumChangerType
            self.gatewayTimezone = gatewayTimezone
            self.gatewayRegion = gatewayRegion
            self.gatewayName = gatewayName
            self.tapeDriveType = tapeDriveType
        }

    }

    public struct NFSFileShareInfo: Serializable, Initializable {
        /// True to use Amazon S3 server side encryption with your own KMS key, or false to use a key managed by Amazon S3. Optional. 
        var kMSEncrypted: Bool? = nil
        var fileShareStatus: String? = nil
        var gatewayARN: String? = nil
        var path: String? = nil
        var fileShareId: String? = nil
        var role: String? = nil
        var kMSKey: String? = nil
        var nFSFileShareDefaults: NFSFileShareDefaults? = nil
        var clientList: [String]? = nil
        var fileShareARN: String? = nil
        var locationARN: String? = nil
        /// The default storage class for objects put into an Amazon S3 bucket by file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        var defaultStorageClass: String? = nil

        public init() {}

        public init(kMSEncrypted: Bool? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, path: String? = nil, fileShareId: String? = nil, role: String? = nil, kMSKey: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, fileShareARN: String? = nil, locationARN: String? = nil, defaultStorageClass: String? = nil) {
            self.kMSEncrypted = kMSEncrypted
            self.fileShareStatus = fileShareStatus
            self.gatewayARN = gatewayARN
            self.path = path
            self.fileShareId = fileShareId
            self.role = role
            self.kMSKey = kMSKey
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.fileShareARN = fileShareARN
            self.locationARN = locationARN
            self.defaultStorageClass = defaultStorageClass
        }

    }

    public struct AddTagsToResourceInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        var resourceARN: String = ""
        /// The key-value pair that represents the tag you want to add to the resource. The value can be an empty string.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. 
        var tags: [Tag] = []

        public init() {}

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

    }

    public struct UpdateChapCredentialsOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the target. This is the same target specified in the request.
        var targetARN: String? = nil
        /// The iSCSI initiator that connects to the target. This is the same initiator name specified in the request.
        var initiatorName: String? = nil

        public init() {}

        public init(targetARN: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

    }

    public struct UpdateMaintenanceStartTimeOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct UpdateGatewaySoftwareNowOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct CancelArchivalOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape for which archiving was canceled.
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct NetworkInterface: Serializable, Initializable {
        /// The Internet Protocol version 6 (IPv6) address of the interface. Currently not supported.
        var ipv6Address: String? = nil
        /// The Media Access Control (MAC) address of the interface.  This is currently unsupported and will not be returned in output. 
        var macAddress: String? = nil
        /// The Internet Protocol version 4 (IPv4) address of the interface.
        var ipv4Address: String? = nil

        public init() {}

        public init(ipv6Address: String? = nil, macAddress: String? = nil, ipv4Address: String? = nil) {
            self.ipv6Address = ipv6Address
            self.macAddress = macAddress
            self.ipv4Address = ipv4Address
        }

    }

    public struct DeviceiSCSIAttributes: Serializable, Initializable {
        /// Specifies the unique Amazon Resource Name(ARN) that encodes the iSCSI qualified name(iqn) of a tape drive or media changer target.
        var targetARN: String? = nil
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        var chapEnabled: Bool? = nil
        /// The network interface identifier of the VTL device.
        var networkInterfaceId: String? = nil
        /// The port used to communicate with iSCSI VTL device targets.
        var networkInterfacePort: Int32? = nil

        public init() {}

        public init(targetARN: String? = nil, chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil) {
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
        }

    }

    public struct CancelRetrievalInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel retrieval for.
        var tapeARN: String = ""
        var gatewayARN: String = ""

        public init() {}

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

    }

    public struct ResetCacheOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeCachediSCSIVolumesInput: Serializable, Initializable {
        var volumeARNs: [String] = []

        public init() {}

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

    }

    public struct TapeArchive: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of an archived virtual tape.
        var tapeARN: String? = nil
        /// The time that the archiving of the virtual tape was completed. The string format of the completion time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        var completionTime: Date? = nil
        var tapeCreatedDate: Date? = nil
        /// The barcode that identifies the archived virtual tape.
        var tapeBarcode: String? = nil
        /// The Amazon Resource Name (ARN) of the gateway-VTL that the virtual tape is being retrieved to. The virtual tape is retrieved from the virtual tape shelf (VTS).
        var retrievedTo: String? = nil
        /// The current state of the archived virtual tape.
        var tapeStatus: String? = nil
        /// The size, in bytes, of the archived virtual tape.
        var tapeSizeInBytes: Int64? = nil

        public init() {}

        public init(tapeARN: String? = nil, completionTime: Date? = nil, tapeCreatedDate: Date? = nil, tapeBarcode: String? = nil, retrievedTo: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.completionTime = completionTime
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeBarcode = tapeBarcode
            self.retrievedTo = retrievedTo
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

    }

    public struct ListTapesInput: Serializable, Initializable {
        /// A string that indicates the position at which to begin the returned list of tapes.
        var marker: String? = nil
        var tapeARNs: [String]? = nil
        /// An optional number limit for the tapes in the list returned by this call.
        var limit: Int32? = nil

        public init() {}

        public init(marker: String? = nil, tapeARNs: [String]? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

    }

    public struct ListVolumeInitiatorsInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes for the gateway.
        var volumeARN: String = ""

        public init() {}

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

    }

    public struct CreateSnapshotOutput: Serializable, Initializable {
        /// The snapshot ID that is used to refer to the snapshot in future operations such as describing snapshots (Amazon Elastic Compute Cloud API DescribeSnapshots) or creating a volume from a snapshot (CreateStorediSCSIVolume).
        var snapshotId: String? = nil
        /// The Amazon Resource Name (ARN) of the volume of which the snapshot was taken.
        var volumeARN: String? = nil

        public init() {}

        public init(snapshotId: String? = nil, volumeARN: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeARN = volumeARN
        }

    }

    public struct CreateNFSFileShareInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        var gatewayARN: String = ""
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        var clientToken: String = ""
        /// The KMS key used for Amazon S3 server side encryption. This value can only be set when KmsEncrypted is true. Optional.
        var kMSKey: String? = nil
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        var role: String = ""
        /// File share default values. Optional.
        var nFSFileShareDefaults: NFSFileShareDefaults? = nil
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        var clientList: [String]? = nil
        /// The ARN of the backend storage used for storing file data. 
        var locationARN: String = ""
        /// The default storage class for objects put into an Amazon S3 bucket by file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        var defaultStorageClass: String? = nil
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        var kMSEncrypted: Bool? = nil

        public init() {}

        public init(gatewayARN: String, clientToken: String, kMSKey: String? = nil, role: String, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, locationARN: String, defaultStorageClass: String? = nil, kMSEncrypted: Bool? = nil) {
            self.gatewayARN = gatewayARN
            self.clientToken = clientToken
            self.kMSKey = kMSKey
            self.role = role
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.locationARN = locationARN
            self.defaultStorageClass = defaultStorageClass
            self.kMSEncrypted = kMSEncrypted
        }

    }

    public struct ListTagsForResourceOutput: Serializable, Initializable {
        /// he Amazon Resource Name (ARN) of the resource for which you want to list tags.
        var resourceARN: String? = nil
        /// An array that contains the tags for the specified resource.
        var tags: [Tag]? = nil
        /// An opaque string that indicates the position at which to stop returning the list of tags.
        var marker: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, tags: [Tag]? = nil, marker: String? = nil) {
            self.resourceARN = resourceARN
            self.tags = tags
            self.marker = marker
        }

    }

    public struct CreateCachediSCSIVolumeOutput: Serializable, Initializable {
        var targetARN: String? = nil
        var volumeARN: String? = nil

        public init() {}

        public init(targetARN: String? = nil, volumeARN: String? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
        }

    }

    public struct ListVolumesInput: Serializable, Initializable {
        /// A string that indicates the position at which to begin the returned list of volumes. Obtain the marker from the response of a previous List iSCSI Volumes request.
        var marker: String? = nil
        var gatewayARN: String? = nil
        /// Specifies that the list of volumes returned be limited to the specified number of items.
        var limit: Int32? = nil

        public init() {}

        public init(marker: String? = nil, gatewayARN: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

    }

    public struct RemoveTagsFromResourceOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource that the tags were removed from.
        var resourceARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

    }

    public struct UpdateChapCredentialsInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return the TargetARN for specified VolumeARN.
        var targetARN: String = ""
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client). Byte constraints: Minimum bytes of 12. Maximum bytes of 16.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        var secretToAuthenticateTarget: String? = nil
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        var secretToAuthenticateInitiator: String = ""
        /// The iSCSI initiator that connects to the target.
        var initiatorName: String = ""

        public init() {}

        public init(targetARN: String, secretToAuthenticateTarget: String? = nil, secretToAuthenticateInitiator: String, initiatorName: String) {
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
        }

    }

    public struct CreateNFSFileShareOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the newly created file share. 
        var fileShareARN: String? = nil

        public init() {}

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

    }

    public struct DeleteVolumeOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the storage volume that was deleted. It is the same ARN you provided in the request.
        var volumeARN: String? = nil

        public init() {}

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

    }

    public struct RetrieveTapeRecoveryPointInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape for which you want to retrieve the recovery point.
        var tapeARN: String = ""
        var gatewayARN: String = ""

        public init() {}

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeBandwidthRateLimitOutput: Serializable, Initializable {
        /// The average download bandwidth rate limit in bits per second. This field does not appear in the response if the download rate limit is not set.
        var averageDownloadRateLimitInBitsPerSec: Int64? = nil
        /// The average upload bandwidth rate limit in bits per second. This field does not appear in the response if the upload rate limit is not set.
        var averageUploadRateLimitInBitsPerSec: Int64? = nil
        var gatewayARN: String? = nil

        public init() {}

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String? = nil) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

    }

    public struct SetLocalConsolePasswordOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct UpdateSnapshotScheduleOutput: Serializable, Initializable {
        var volumeARN: String? = nil

        public init() {}

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

    }

    public struct DescribeChapCredentialsOutput: Serializable, Initializable {
        /// An array of ChapInfo objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:    InitiatorName: The iSCSI initiator that connects to the target.    SecretToAuthenticateInitiator: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.    SecretToAuthenticateTarget: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).    TargetARN: The Amazon Resource Name (ARN) of the storage volume.  
        var chapCredentials: [ChapInfo]? = nil

        public init() {}

        public init(chapCredentials: [ChapInfo]? = nil) {
            self.chapCredentials = chapCredentials
        }

    }

    public struct UpdateNFSFileShareInput: Serializable, Initializable {
        /// The KMS key used for Amazon S3 server side encryption. This value can only be set when KmsEncrypted is true. Optional. 
        var kMSKey: String? = nil
        /// The Amazon Resource Name (ARN) of the file share to be updated. 
        var fileShareARN: String = ""
        /// The default values for the file share. Optional.
        var nFSFileShareDefaults: NFSFileShareDefaults? = nil
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        var clientList: [String]? = nil
        /// The default storage class for objects put into an Amazon S3 bucket by a file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        var defaultStorageClass: String? = nil
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        var kMSEncrypted: Bool? = nil

        public init() {}

        public init(kMSKey: String? = nil, fileShareARN: String, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, defaultStorageClass: String? = nil, kMSEncrypted: Bool? = nil) {
            self.kMSKey = kMSKey
            self.fileShareARN = fileShareARN
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.defaultStorageClass = defaultStorageClass
            self.kMSEncrypted = kMSEncrypted
        }

    }

    public struct ListLocalDisksOutput: Serializable, Initializable {
        var disks: [Disk]? = nil
        var gatewayARN: String? = nil

        public init() {}

        public init(disks: [Disk]? = nil, gatewayARN: String? = nil) {
            self.disks = disks
            self.gatewayARN = gatewayARN
        }

    }

    public struct DeleteBandwidthRateLimitOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DeleteBandwidthRateLimitInput: Serializable, Initializable {
        /// One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete. Valid Values: Upload, Download, All.
        var bandwidthType: String = ""
        var gatewayARN: String = ""

        public init() {}

        public init(bandwidthType: String, gatewayARN: String) {
            self.bandwidthType = bandwidthType
            self.gatewayARN = gatewayARN
        }

    }

    public struct DeleteTapeInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape to delete.
        var tapeARN: String = ""
        /// The unique Amazon Resource Name (ARN) of the gateway that the virtual tape to delete is associated with. Use the ListGateways operation to return a list of gateways for your account and region.
        var gatewayARN: String = ""

        public init() {}

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

    }

    public struct UpdateBandwidthRateLimitOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct VTLDevice: Serializable, Initializable {
        var vTLDeviceVendor: String? = nil
        var vTLDeviceType: String? = nil
        /// Specifies the unique Amazon Resource Name (ARN) of the device (tape drive or media changer).
        var vTLDeviceARN: String? = nil
        /// A list of iSCSI information about a VTL device.
        var deviceiSCSIAttributes: DeviceiSCSIAttributes? = nil
        var vTLDeviceProductIdentifier: String? = nil

        public init() {}

        public init(vTLDeviceVendor: String? = nil, vTLDeviceType: String? = nil, vTLDeviceARN: String? = nil, deviceiSCSIAttributes: DeviceiSCSIAttributes? = nil, vTLDeviceProductIdentifier: String? = nil) {
            self.vTLDeviceVendor = vTLDeviceVendor
            self.vTLDeviceType = vTLDeviceType
            self.vTLDeviceARN = vTLDeviceARN
            self.deviceiSCSIAttributes = deviceiSCSIAttributes
            self.vTLDeviceProductIdentifier = vTLDeviceProductIdentifier
        }

    }

    public struct GatewayInfo: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        var gatewayARN: String? = nil
        /// The type of the gateway.
        var gatewayType: String? = nil
        /// The state of the gateway. Valid Values: DISABLED or ACTIVE
        var gatewayOperationalState: String? = nil
        /// The name of the gateway.
        var gatewayName: String? = nil
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        var gatewayId: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil, gatewayType: String? = nil, gatewayOperationalState: String? = nil, gatewayName: String? = nil, gatewayId: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayType = gatewayType
            self.gatewayOperationalState = gatewayOperationalState
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
        }

    }

    public struct CreateSnapshotInput: Serializable, Initializable {
        /// Textual description of the snapshot that appears in the Amazon EC2 console, Elastic Block Store snapshots panel in the Description field, and in the AWS Storage Gateway snapshot Details pane, Description field
        var snapshotDescription: String = ""
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        var volumeARN: String = ""

        public init() {}

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

    }

    public struct UpdateBandwidthRateLimitInput: Serializable, Initializable {
        /// The average download bandwidth rate limit in bits per second.
        var averageDownloadRateLimitInBitsPerSec: Int64? = nil
        /// The average upload bandwidth rate limit in bits per second.
        var averageUploadRateLimitInBitsPerSec: Int64? = nil
        var gatewayARN: String = ""

        public init() {}

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeMaintenanceStartTimeInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct StartGatewayOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct ListFileSharesInput: Serializable, Initializable {
        /// Opaque pagination token returned from a previous ListFileShares operation. If present, Marker specifies where to continue the list from after a previous call to ListFileShares. Optional.
        var marker: String? = nil
        /// The Amazon resource Name (ARN) of the gateway whose file shares you want to list. If this field is not present, all file shares under your account are listed.
        var gatewayARN: String? = nil
        /// The maximum number of file shares to return in the response. The value must be an integer with a value greater than zero. Optional.
        var limit: Int32? = nil

        public init() {}

        public init(marker: String? = nil, gatewayARN: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

    }

    public struct ActivateGatewayOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct VolumeRecoveryPointInfo: Serializable, Initializable {
        var volumeRecoveryPointTime: String? = nil
        var volumeARN: String? = nil
        var volumeUsageInBytes: Int64? = nil
        var volumeSizeInBytes: Int64? = nil

        public init() {}

        public init(volumeRecoveryPointTime: String? = nil, volumeARN: String? = nil, volumeUsageInBytes: Int64? = nil, volumeSizeInBytes: Int64? = nil) {
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.volumeARN = volumeARN
            self.volumeUsageInBytes = volumeUsageInBytes
            self.volumeSizeInBytes = volumeSizeInBytes
        }

    }

    public struct DescribeTapeArchivesOutput: Serializable, Initializable {
        /// An array of virtual tape objects in the virtual tape shelf (VTS). The description includes of the Amazon Resource Name(ARN) of the virtual tapes. The information returned includes the Amazon Resource Names (ARNs) of the tapes, size of the tapes, status of the tapes, progress of the description and tape barcode.
        var tapeArchives: [TapeArchive]? = nil
        /// An opaque string that indicates the position at which the virtual tapes that were fetched for description ended. Use this marker in your next request to fetch the next set of virtual tapes in the virtual tape shelf (VTS). If there are no more virtual tapes to describe, this field does not appear in the response.
        var marker: String? = nil

        public init() {}

        public init(tapeArchives: [TapeArchive]? = nil, marker: String? = nil) {
            self.tapeArchives = tapeArchives
            self.marker = marker
        }

    }

    public struct StorediSCSIVolume: Serializable, Initializable {
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        var volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil
        /// If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        var sourceSnapshotId: String? = nil
        /// One of the VolumeType enumeration values describing the type of the volume.
        var volumeType: String? = nil
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        var volumeStatus: String? = nil
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        var volumeId: String? = nil
        /// The size of the volume in bytes.
        var volumeSizeInBytes: Int64? = nil
        /// Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.  Valid Values: true, false
        var preservedExistingData: Bool? = nil
        var createdDate: Date? = nil
        /// The Amazon Resource Name (ARN) of the storage volume.
        var volumeARN: String? = nil
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.
        var volumeProgress: Double? = nil
        /// The ID of the local disk that was specified in the CreateStorediSCSIVolume operation.
        var volumeDiskId: String? = nil

        public init() {}

        public init(volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, sourceSnapshotId: String? = nil, volumeType: String? = nil, volumeStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, preservedExistingData: Bool? = nil, createdDate: Date? = nil, volumeARN: String? = nil, volumeProgress: Double? = nil, volumeDiskId: String? = nil) {
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeType = volumeType
            self.volumeStatus = volumeStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.preservedExistingData = preservedExistingData
            self.createdDate = createdDate
            self.volumeARN = volumeARN
            self.volumeProgress = volumeProgress
            self.volumeDiskId = volumeDiskId
        }

    }

    public struct CreateTapesInput: Serializable, Initializable {
        /// The number of virtual tapes that you want to create.
        var numTapesToCreate: Int32 = 0
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tapes with. Use the ListGateways operation to return a list of gateways for your account and region.
        var gatewayARN: String = ""
        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.  Using the same ClientToken prevents creating the tape multiple times. 
        var clientToken: String = ""
        /// The size, in bytes, of the virtual tapes that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        var tapeSizeInBytes: Int64 = 0
        /// A prefix that you append to the barcode of the virtual tape you are creating. This prefix makes the barcode unique.  The prefix must be 1 to 4 characters in length and must be one of the uppercase letters from A to Z. 
        var tapeBarcodePrefix: String = ""

        public init() {}

        public init(numTapesToCreate: Int32, gatewayARN: String, clientToken: String, tapeSizeInBytes: Int64, tapeBarcodePrefix: String) {
            self.numTapesToCreate = numTapesToCreate
            self.gatewayARN = gatewayARN
            self.clientToken = clientToken
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcodePrefix = tapeBarcodePrefix
        }

    }

    public struct CachediSCSIVolume: Serializable, Initializable {
        /// If the cached volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        var sourceSnapshotId: String? = nil
        /// One of the VolumeType enumeration values that describes the type of the volume.
        var volumeType: String? = nil
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        var volumeStatus: String? = nil
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        var volumeId: String? = nil
        /// The size of the volume in bytes.
        var volumeSizeInBytes: Int64? = nil
        /// The Amazon Resource Name (ARN) of the storage volume.
        var volumeARN: String? = nil
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the cached volume is not restoring or bootstrapping.
        var volumeProgress: Double? = nil
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        var volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil
        var createdDate: Date? = nil

        public init() {}

        public init(sourceSnapshotId: String? = nil, volumeType: String? = nil, volumeStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, volumeARN: String? = nil, volumeProgress: Double? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, createdDate: Date? = nil) {
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeType = volumeType
            self.volumeStatus = volumeStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeARN = volumeARN
            self.volumeProgress = volumeProgress
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.createdDate = createdDate
        }

    }

    public struct AddTagsToResourceOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        var resourceARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

    }

    public struct DescribeChapCredentialsInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        var targetARN: String = ""

        public init() {}

        public init(targetARN: String) {
            self.targetARN = targetARN
        }

    }

    public struct DeleteFileShareOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the deleted file share. 
        var fileShareARN: String? = nil

        public init() {}

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

    }

    public struct DeleteGatewayInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct Tape: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape.
        var tapeARN: String? = nil
        /// The virtual tape library (VTL) device that the virtual tape is associated with.
        var vTLDevice: String? = nil
        /// For archiving virtual tapes, indicates how much data remains to be uploaded before archiving is complete. Range: 0 (not started) to 100 (complete).
        var progress: Double? = nil
        var tapeCreatedDate: Date? = nil
        /// The barcode that identifies a specific virtual tape.
        var tapeBarcode: String? = nil
        /// The current state of the virtual tape.
        var tapeStatus: String? = nil
        /// The size, in bytes, of the virtual tape.
        var tapeSizeInBytes: Int64? = nil

        public init() {}

        public init(tapeARN: String? = nil, vTLDevice: String? = nil, progress: Double? = nil, tapeCreatedDate: Date? = nil, tapeBarcode: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.vTLDevice = vTLDevice
            self.progress = progress
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeBarcode = tapeBarcode
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

    }

    public struct DeleteTapeOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the deleted virtual tape.
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct DescribeStorediSCSIVolumesInput: Serializable, Initializable {
        /// An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must from the same gateway. Use ListVolumes to get volume ARNs for a gateway.
        var volumeARNs: [String] = []

        public init() {}

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

    }

    public struct DescribeTapeArchivesInput: Serializable, Initializable {
        /// An opaque string that indicates the position at which to begin describing virtual tapes.
        var marker: String? = nil
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.
        var tapeARNs: [String]? = nil
        /// Specifies that the number of virtual tapes descried be limited to the specified number.
        var limit: Int32? = nil

        public init() {}

        public init(marker: String? = nil, tapeARNs: [String]? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

    }

    public struct UpdateGatewaySoftwareNowInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct CreateTapeWithBarcodeOutput: Serializable, Initializable {
        /// A unique Amazon Resource Name (ARN) that represents the virtual tape that was created.
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct AddWorkingStorageInput: Serializable, Initializable {
        var gatewayARN: String = ""
        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        var diskIds: [String] = []

        public init() {}

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

    }

    public struct DeleteChapCredentialsInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        var targetARN: String = ""
        /// The iSCSI initiator that connects to the target.
        var initiatorName: String = ""

        public init() {}

        public init(targetARN: String, initiatorName: String) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

    }

    public struct DescribeNFSFileSharesInput: Serializable, Initializable {
        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        var fileShareARNList: [String] = []

        public init() {}

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

    }

    public struct DescribeStorediSCSIVolumesOutput: Serializable, Initializable {
        var storediSCSIVolumes: [StorediSCSIVolume]? = nil

        public init() {}

        public init(storediSCSIVolumes: [StorediSCSIVolume]? = nil) {
            self.storediSCSIVolumes = storediSCSIVolumes
        }

    }

    public struct DescribeUploadBufferOutput: Serializable, Initializable {
        var gatewayARN: String? = nil
        var uploadBufferUsedInBytes: Int64? = nil
        var uploadBufferAllocatedInBytes: Int64? = nil
        var diskIds: [String]? = nil

        public init() {}

        public init(gatewayARN: String? = nil, uploadBufferUsedInBytes: Int64? = nil, uploadBufferAllocatedInBytes: Int64? = nil, diskIds: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.uploadBufferUsedInBytes = uploadBufferUsedInBytes
            self.uploadBufferAllocatedInBytes = uploadBufferAllocatedInBytes
            self.diskIds = diskIds
        }

    }

    public struct UpdateNFSFileShareOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the updated file share. 
        var fileShareARN: String? = nil

        public init() {}

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

    }

    public struct ListVolumesOutput: Serializable, Initializable {
        var marker: String? = nil
        var gatewayARN: String? = nil
        var volumeInfos: [VolumeInfo]? = nil

        public init() {}

        public init(marker: String? = nil, gatewayARN: String? = nil, volumeInfos: [VolumeInfo]? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.volumeInfos = volumeInfos
        }

    }

    public struct DescribeCachediSCSIVolumesOutput: Serializable, Initializable {
        /// An array of objects where each object contains metadata about one cached volume.
        var cachediSCSIVolumes: [CachediSCSIVolume]? = nil

        public init() {}

        public init(cachediSCSIVolumes: [CachediSCSIVolume]? = nil) {
            self.cachediSCSIVolumes = cachediSCSIVolumes
        }

    }

    public struct DeleteSnapshotScheduleInput: Serializable, Initializable {
        var volumeARN: String = ""

        public init() {}

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

    }

    public struct CreateTapesOutput: Serializable, Initializable {
        /// A list of unique Amazon Resource Names (ARNs) that represents the virtual tapes that were created.
        var tapeARNs: [String]? = nil

        public init() {}

        public init(tapeARNs: [String]? = nil) {
            self.tapeARNs = tapeARNs
        }

    }

    public struct CreateStorediSCSIVolumeOutput: Serializable, Initializable {
        /// he Amazon Resource Name (ARN) of the volume target that includes the iSCSI name that initiators can use to connect to the target.
        var targetARN: String? = nil
        /// The Amazon Resource Name (ARN) of the configured volume.
        var volumeARN: String? = nil
        /// The size of the volume in bytes.
        var volumeSizeInBytes: Int64? = nil

        public init() {}

        public init(targetARN: String? = nil, volumeARN: String? = nil, volumeSizeInBytes: Int64? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
            self.volumeSizeInBytes = volumeSizeInBytes
        }

    }

    public struct ListLocalDisksInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct CreateSnapshotFromVolumeRecoveryPointOutput: Serializable, Initializable {
        var volumeARN: String? = nil
        var volumeRecoveryPointTime: String? = nil
        var snapshotId: String? = nil

        public init() {}

        public init(volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil, snapshotId: String? = nil) {
            self.volumeARN = volumeARN
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.snapshotId = snapshotId
        }

    }

    public struct DescribeGatewayInformationOutput: Serializable, Initializable {
        /// A value that indicates the operating state of the gateway.
        var gatewayState: String? = nil
        /// The type of the gateway.
        var gatewayType: String? = nil
        var gatewayARN: String? = nil
        /// A value that indicates the time zone configured for the gateway.
        var gatewayTimezone: String? = nil
        /// The date on which the last software update was applied to the gateway. If the gateway has never been updated, this field does not return a value in the response.
        var lastSoftwareUpdate: String? = nil
        /// A NetworkInterface array that contains descriptions of the gateway network interfaces.
        var gatewayNetworkInterfaces: [NetworkInterface]? = nil
        /// The date on which an update to the gateway is available. This date is in the time zone of the gateway. If the gateway is not available for an update this field is not returned in the response.
        var nextUpdateAvailabilityDate: String? = nil
        /// The name you configured for your gateway.
        var gatewayName: String? = nil
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        var gatewayId: String? = nil

        public init() {}

        public init(gatewayState: String? = nil, gatewayType: String? = nil, gatewayARN: String? = nil, gatewayTimezone: String? = nil, lastSoftwareUpdate: String? = nil, gatewayNetworkInterfaces: [NetworkInterface]? = nil, nextUpdateAvailabilityDate: String? = nil, gatewayName: String? = nil, gatewayId: String? = nil) {
            self.gatewayState = gatewayState
            self.gatewayType = gatewayType
            self.gatewayARN = gatewayARN
            self.gatewayTimezone = gatewayTimezone
            self.lastSoftwareUpdate = lastSoftwareUpdate
            self.gatewayNetworkInterfaces = gatewayNetworkInterfaces
            self.nextUpdateAvailabilityDate = nextUpdateAvailabilityDate
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
        }

    }

    public struct FileShareInfo: Serializable, Initializable {
        var fileShareId: String? = nil
        var fileShareStatus: String? = nil
        var fileShareARN: String? = nil
        var gatewayARN: String? = nil

        public init() {}

        public init(fileShareId: String? = nil, fileShareStatus: String? = nil, fileShareARN: String? = nil, gatewayARN: String? = nil) {
            self.fileShareId = fileShareId
            self.fileShareStatus = fileShareStatus
            self.fileShareARN = fileShareARN
            self.gatewayARN = gatewayARN
        }

    }

    public struct UpdateSnapshotScheduleInput: Serializable, Initializable {
        /// Frequency of snapshots. Specify the number of hours between snapshots.
        var recurrenceInHours: Int32 = 0
        /// The hour of the day at which the snapshot schedule begins represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        var startAt: Int32 = 0
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        var volumeARN: String = ""
        /// Optional description of the snapshot that overwrites the existing description.
        var description: String? = nil

        public init() {}

        public init(recurrenceInHours: Int32, startAt: Int32, volumeARN: String, description: String? = nil) {
            self.recurrenceInHours = recurrenceInHours
            self.startAt = startAt
            self.volumeARN = volumeARN
            self.description = description
        }

    }

    public struct DescribeVTLDevicesOutput: Serializable, Initializable {
        /// An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.
        var marker: String? = nil
        /// An array of VTL device objects composed of the Amazon Resource Name(ARN) of the VTL devices.
        var vTLDevices: [VTLDevice]? = nil
        var gatewayARN: String? = nil

        public init() {}

        public init(marker: String? = nil, vTLDevices: [VTLDevice]? = nil, gatewayARN: String? = nil) {
            self.marker = marker
            self.vTLDevices = vTLDevices
            self.gatewayARN = gatewayARN
        }

    }

    public struct DeleteChapCredentialsOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the target.
        var targetARN: String? = nil
        /// The iSCSI initiator that connects to the target.
        var initiatorName: String? = nil

        public init() {}

        public init(targetARN: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

    }

    public struct UpdateGatewayInformationOutput: Serializable, Initializable {
        var gatewayARN: String? = nil
        var gatewayName: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil, gatewayName: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayName = gatewayName
        }

    }

    public struct DescribeMaintenanceStartTimeOutput: Serializable, Initializable {
        var gatewayARN: String? = nil
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        var hourOfDay: Int32? = nil
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.
        var minuteOfHour: Int32? = nil
        var timezone: String? = nil
        /// An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.
        var dayOfWeek: Int32? = nil

        public init() {}

        public init(gatewayARN: String? = nil, hourOfDay: Int32? = nil, minuteOfHour: Int32? = nil, timezone: String? = nil, dayOfWeek: Int32? = nil) {
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.timezone = timezone
            self.dayOfWeek = dayOfWeek
        }

    }

    public struct DescribeSnapshotScheduleOutput: Serializable, Initializable {
        var startAt: Int32? = nil
        var recurrenceInHours: Int32? = nil
        var volumeARN: String? = nil
        var timezone: String? = nil
        var description: String? = nil

        public init() {}

        public init(startAt: Int32? = nil, recurrenceInHours: Int32? = nil, volumeARN: String? = nil, timezone: String? = nil, description: String? = nil) {
            self.startAt = startAt
            self.recurrenceInHours = recurrenceInHours
            self.volumeARN = volumeARN
            self.timezone = timezone
            self.description = description
        }

    }

    public struct DeleteFileShareInput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the file share to be deleted. 
        var fileShareARN: String = ""

        public init() {}

        public init(fileShareARN: String) {
            self.fileShareARN = fileShareARN
        }

    }

    public struct DescribeTapeRecoveryPointsOutput: Serializable, Initializable {
        /// An opaque string that indicates the position at which the virtual tape recovery points that were listed for description ended. Use this marker in your next request to list the next set of virtual tape recovery points in the list. If there are no more recovery points to describe, this field does not appear in the response.
        var marker: String? = nil
        var gatewayARN: String? = nil
        /// An array of TapeRecoveryPointInfos that are available for the specified gateway.
        var tapeRecoveryPointInfos: [TapeRecoveryPointInfo]? = nil

        public init() {}

        public init(marker: String? = nil, gatewayARN: String? = nil, tapeRecoveryPointInfos: [TapeRecoveryPointInfo]? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.tapeRecoveryPointInfos = tapeRecoveryPointInfos
        }

    }

    public struct DescribeCacheInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct ShutdownGatewayOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct ListFileSharesOutput: Serializable, Initializable {
        /// If the request includes Marker, the response returns that value in this field. 
        var marker: String? = nil
        /// An array of information about the file gateway's file shares. 
        var fileShareInfoList: [FileShareInfo]? = nil
        /// If a value is present, there are more file shares to return. In a subsequent request, use NextMarker as the value for Marker to retrieve the next set of file shares. 
        var nextMarker: String? = nil

        public init() {}

        public init(marker: String? = nil, fileShareInfoList: [FileShareInfo]? = nil, nextMarker: String? = nil) {
            self.marker = marker
            self.fileShareInfoList = fileShareInfoList
            self.nextMarker = nextMarker
        }

    }

    public struct DisableGatewayInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeVTLDevicesInput: Serializable, Initializable {
        var gatewayARN: String = ""
        /// Specifies that the number of VTL devices described be limited to the specified number.
        var limit: Int32? = nil
        /// An opaque string that indicates the position at which to begin describing the VTL devices.
        var marker: String? = nil
        /// An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.  All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway. 
        var vTLDeviceARNs: [String]? = nil

        public init() {}

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, vTLDeviceARNs: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
            self.vTLDeviceARNs = vTLDeviceARNs
        }

    }

    public struct VolumeiSCSIAttributes: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the volume target.
        var targetARN: String? = nil
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        var chapEnabled: Bool? = nil
        /// The network interface identifier.
        var networkInterfaceId: String? = nil
        /// The port used to communicate with iSCSI targets.
        var networkInterfacePort: Int32? = nil
        /// The logical disk number.
        var lunNumber: Int32? = nil

        public init() {}

        public init(targetARN: String? = nil, chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, lunNumber: Int32? = nil) {
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
            self.lunNumber = lunNumber
        }

    }

    public struct ListVolumeRecoveryPointsOutput: Serializable, Initializable {
        var gatewayARN: String? = nil
        var volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]? = nil

        public init() {}

        public init(gatewayARN: String? = nil, volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.volumeRecoveryPointInfos = volumeRecoveryPointInfos
        }

    }

    public struct ListGatewaysInput: Serializable, Initializable {
        /// An opaque string that indicates the position at which to begin the returned list of gateways.
        var marker: String? = nil
        /// Specifies that the list of gateways returned be limited to the specified number of items.
        var limit: Int32? = nil

        public init() {}

        public init(marker: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.limit = limit
        }

    }

    public struct CreateStorediSCSIVolumeInput: Serializable, Initializable {
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new stored volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        var snapshotId: String? = nil
        var gatewayARN: String = ""
        /// Specify this field as true if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.  Valid Values: true, false
        var preserveExistingData: Bool = false
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        var networkInterfaceId: String = ""
        /// The unique identifier for the gateway local disk that is configured as a stored volume. Use ListLocalDisks to list disk IDs for a gateway.
        var diskId: String = ""
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes of a gateway.
        var targetName: String = ""

        public init() {}

        public init(snapshotId: String? = nil, gatewayARN: String, preserveExistingData: Bool, networkInterfaceId: String, diskId: String, targetName: String) {
            self.snapshotId = snapshotId
            self.gatewayARN = gatewayARN
            self.preserveExistingData = preserveExistingData
            self.networkInterfaceId = networkInterfaceId
            self.diskId = diskId
            self.targetName = targetName
        }

    }

    public struct ChapInfo: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the volume.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        var targetARN: String? = nil
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).
        var secretToAuthenticateTarget: String? = nil
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.
        var secretToAuthenticateInitiator: String? = nil
        /// The iSCSI initiator that connects to the target.
        var initiatorName: String? = nil

        public init() {}

        public init(targetARN: String? = nil, secretToAuthenticateTarget: String? = nil, secretToAuthenticateInitiator: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
        }

    }

    public struct StorageGatewayError: Serializable, Initializable {
        /// Additional information about the error.
        var errorCode: String? = nil
        /// Human-readable text that provides detail about the error that occurred.
        var errorDetails: [String: String]? = nil

        public init() {}

        public init(errorCode: String? = nil, errorDetails: [String: String]? = nil) {
            self.errorCode = errorCode
            self.errorDetails = errorDetails
        }

    }

    public struct VolumeInfo: Serializable, Initializable {
        /// The size of the volume in bytes. Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        var volumeSizeInBytes: Int64? = nil
        var gatewayARN: String? = nil
        var volumeType: String? = nil
        /// The Amazon Resource Name (ARN) for the storage volume. For example, the following is a valid ARN:  arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB   Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        var volumeARN: String? = nil
        /// The unique identifier assigned to the volume. This ID becomes part of the volume Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        var volumeId: String? = nil
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        var gatewayId: String? = nil

        public init() {}

        public init(volumeSizeInBytes: Int64? = nil, gatewayARN: String? = nil, volumeType: String? = nil, volumeARN: String? = nil, volumeId: String? = nil, gatewayId: String? = nil) {
            self.volumeSizeInBytes = volumeSizeInBytes
            self.gatewayARN = gatewayARN
            self.volumeType = volumeType
            self.volumeARN = volumeARN
            self.volumeId = volumeId
            self.gatewayId = gatewayId
        }

    }

    public struct AddWorkingStorageOutput: Serializable, Initializable {
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct CancelRetrievalOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape for which retrieval was canceled.
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct ListVolumeInitiatorsOutput: Serializable, Initializable {
        /// The host names and port numbers of all iSCSI initiators that are connected to the gateway.
        var initiators: [String]? = nil

        public init() {}

        public init(initiators: [String]? = nil) {
            self.initiators = initiators
        }

    }

    public struct DescribeBandwidthRateLimitInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct DescribeUploadBufferInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct CreateCachediSCSIVolumeInput: Serializable, Initializable {
        var gatewayARN: String = ""
        var networkInterfaceId: String = ""
        var clientToken: String = ""
        var volumeSizeInBytes: Int64 = 0
        var snapshotId: String? = nil
        var targetName: String = ""
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The VolumeSizeInBytes value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        var sourceVolumeARN: String? = nil

        public init() {}

        public init(gatewayARN: String, networkInterfaceId: String, clientToken: String, volumeSizeInBytes: Int64, snapshotId: String? = nil, targetName: String, sourceVolumeARN: String? = nil) {
            self.gatewayARN = gatewayARN
            self.networkInterfaceId = networkInterfaceId
            self.clientToken = clientToken
            self.volumeSizeInBytes = volumeSizeInBytes
            self.snapshotId = snapshotId
            self.targetName = targetName
            self.sourceVolumeARN = sourceVolumeARN
        }

    }

    public struct ListGatewaysOutput: Serializable, Initializable {
        var marker: String? = nil
        var gateways: [GatewayInfo]? = nil

        public init() {}

        public init(marker: String? = nil, gateways: [GatewayInfo]? = nil) {
            self.marker = marker
            self.gateways = gateways
        }

    }

    public struct ShutdownGatewayInput: Serializable, Initializable {
        var gatewayARN: String = ""

        public init() {}

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct RetrieveTapeRecoveryPointOutput: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the virtual tape for which the recovery point was retrieved.
        var tapeARN: String? = nil

        public init() {}

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

    }

    public struct DisableGatewayOutput: Serializable, Initializable {
        /// The unique Amazon Resource Name of the disabled gateway.
        var gatewayARN: String? = nil

        public init() {}

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

    }

    public struct AddCacheInput: Serializable, Initializable {
        var gatewayARN: String = ""
        var diskIds: [String] = []

        public init() {}

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

    }

}