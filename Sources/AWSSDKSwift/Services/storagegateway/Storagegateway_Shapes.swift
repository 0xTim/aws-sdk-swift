// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Storagegateway {

    public struct DeleteSnapshotScheduleOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteTapeArchiveOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape that was deleted from the virtual tape shelf (VTS).
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct ResetCacheInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeGatewayInformationInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct SetLocalConsolePasswordInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalConsolePassword", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The password you want to set for your VM local console.
        public let localConsolePassword: String
        public let gatewayARN: String

        public init(localConsolePassword: String, gatewayARN: String) {
            self.localConsolePassword = localConsolePassword
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case localConsolePassword = "LocalConsolePassword"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeTapesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Tapes", required: false, type: .list)
        ]
        /// An opaque string which can be used as part of a subsequent DescribeTapes call to retrieve the next page of results. If a response does not contain a marker, then there are no more results to be retrieved.
        public let marker: String?
        /// An array of virtual tape descriptions.
        public let tapes: [Tape]?

        public init(marker: String? = nil, tapes: [Tape]? = nil) {
            self.marker = marker
            self.tapes = tapes
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapes = "Tapes"
        }
    }

    public struct AddUploadBufferOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RetrieveTapeArchiveInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape you want to retrieve from the virtual tape shelf (VTS).
        public let tapeARN: String
        /// The Amazon Resource Name (ARN) of the gateway you want to retrieve the virtual tape to. Use the ListGateways operation to return a list of gateways for your account and region. You retrieve archived virtual tapes to only one gateway and the gateway must be a tape gateway.
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RefreshCacheOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct CreateTapeWithBarcodeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: true, type: .long), 
            AWSShapeMember(label: "TapeBarcode", required: true, type: .string)
        ]
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tape with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// The size, in bytes, of the virtual tape that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64
        /// The barcode that you want to assign to the tape.
        public let tapeBarcode: String

        public init(gatewayARN: String, tapeSizeInBytes: Int64, tapeBarcode: String) {
            self.gatewayARN = gatewayARN
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcode = tapeBarcode
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeBarcode = "TapeBarcode"
        }
    }

    public struct CancelArchivalInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel archiving for.
        public let tapeARN: String
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteGatewayOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeCacheOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "CacheUsedPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheDirtyPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheHitPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheMissPercentage", required: false, type: .double), 
            AWSShapeMember(label: "DiskIds", required: false, type: .list)
        ]
        public let cacheAllocatedInBytes: Int64?
        public let gatewayARN: String?
        public let cacheUsedPercentage: Double?
        public let cacheDirtyPercentage: Double?
        public let cacheHitPercentage: Double?
        public let cacheMissPercentage: Double?
        public let diskIds: [String]?

        public init(cacheAllocatedInBytes: Int64? = nil, gatewayARN: String? = nil, cacheUsedPercentage: Double? = nil, cacheDirtyPercentage: Double? = nil, cacheHitPercentage: Double? = nil, cacheMissPercentage: Double? = nil, diskIds: [String]? = nil) {
            self.cacheAllocatedInBytes = cacheAllocatedInBytes
            self.gatewayARN = gatewayARN
            self.cacheUsedPercentage = cacheUsedPercentage
            self.cacheDirtyPercentage = cacheDirtyPercentage
            self.cacheHitPercentage = cacheHitPercentage
            self.cacheMissPercentage = cacheMissPercentage
            self.diskIds = diskIds
        }

        private enum CodingKeys: String, CodingKey {
            case cacheAllocatedInBytes = "CacheAllocatedInBytes"
            case gatewayARN = "GatewayARN"
            case cacheUsedPercentage = "CacheUsedPercentage"
            case cacheDirtyPercentage = "CacheDirtyPercentage"
            case cacheHitPercentage = "CacheHitPercentage"
            case cacheMissPercentage = "CacheMissPercentage"
            case diskIds = "DiskIds"
        }
    }

    public struct DescribeNFSFileSharesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NFSFileShareInfoList", required: false, type: .list)
        ]
        /// An array containing a description for each requested file share. 
        public let nFSFileShareInfoList: [NFSFileShareInfo]?

        public init(nFSFileShareInfoList: [NFSFileShareInfo]? = nil) {
            self.nFSFileShareInfoList = nFSFileShareInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case nFSFileShareInfoList = "NFSFileShareInfoList"
        }
    }

    public struct NFSFileShareDefaults: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", required: false, type: .long), 
            AWSShapeMember(label: "FileMode", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .long), 
            AWSShapeMember(label: "DirectoryMode", required: false, type: .string)
        ]
        /// The default owner ID for files in the file share (unless the files have another owner ID specified). The default value is nfsnobody. 
        public let ownerId: Int64?
        /// The Unix file mode in the form "nnnn". For example, "0666" represents the default file mode inside the file share. The default value is 0666. 
        public let fileMode: String?
        /// The default group ID for the file share (unless the files have another group ID specified). The default value is nfsnobody. 
        public let groupId: Int64?
        /// The Unix directory mode in the form "nnnn". For example, "0666" represents the default access mode for all directories inside the file share. The default value is 0777.
        public let directoryMode: String?

        public init(ownerId: Int64? = nil, fileMode: String? = nil, groupId: Int64? = nil, directoryMode: String? = nil) {
            self.ownerId = ownerId
            self.fileMode = fileMode
            self.groupId = groupId
            self.directoryMode = directoryMode
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "OwnerId"
            case fileMode = "FileMode"
            case groupId = "GroupId"
            case directoryMode = "DirectoryMode"
        }
    }

    public struct DescribeTapesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        public let gatewayARN: String
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe. If this parameter is not specified, Tape gateway returns a description of all virtual tapes associated with the specified gateway.
        public let tapeARNs: [String]?
        /// Specifies that the number of virtual tapes described be limited to the specified number.  Amazon Web Services may impose its own limit, if this field is not set. 
        public let limit: Int32?
        /// A marker value, obtained in a previous call to DescribeTapes. This marker indicates which page of results to retrieve.  If not specified, the first page of results is retrieved.
        public let marker: String?

        public init(gatewayARN: String, tapeARNs: [String]? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.tapeARNs = tapeARNs
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARNs = "TapeARNs"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct DescribeTapeRecoveryPointsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// An opaque string that indicates the position at which to begin describing the virtual tape recovery points.
        public let marker: String?
        public let gatewayARN: String
        /// Specifies that the number of virtual tape recovery points that are described be limited to the specified number.
        public let limit: Int32?

        public init(marker: String? = nil, gatewayARN: String, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDescription", required: true, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        public let snapshotDescription: String
        public let volumeARN: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDescription = "SnapshotDescription"
            case volumeARN = "VolumeARN"
        }
    }

    public struct AddUploadBufferInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "DiskIds", required: true, type: .list)
        ]
        public let gatewayARN: String
        public let diskIds: [String]

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case diskIds = "DiskIds"
        }
    }

    public struct ListVolumeRecoveryPointsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListTagsForResourceInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String
        /// An opaque string that indicates the position at which to begin returning the list of tags.
        public let marker: String?
        /// Specifies that the list of tags returned be limited to the specified number of items.
        public let limit: Int32?

        public init(resourceARN: String, marker: String? = nil, limit: Int32? = nil) {
            self.resourceARN = resourceARN
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case marker = "Marker"
            case limit = "Limit"
        }
    }

    public struct UpdateVTLDeviceTypeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceType", required: true, type: .string), 
            AWSShapeMember(label: "VTLDeviceARN", required: true, type: .string)
        ]
        /// The type of medium changer you want to select.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let deviceType: String
        /// The Amazon Resource Name (ARN) of the medium changer you want to select.
        public let vTLDeviceARN: String

        public init(deviceType: String, vTLDeviceARN: String) {
            self.deviceType = deviceType
            self.vTLDeviceARN = vTLDeviceARN
        }

        private enum CodingKeys: String, CodingKey {
            case deviceType = "DeviceType"
            case vTLDeviceARN = "VTLDeviceARN"
        }
    }

    public struct TapeRecoveryPointInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeRecoveryPointTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The time when the point-in-time view of the virtual tape was replicated for later recovery. The string format of the tape recovery point time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let tapeRecoveryPointTime: TimeStamp?
        public let tapeStatus: String?
        /// The size, in bytes, of the virtual tapes to recover.
        public let tapeSizeInBytes: Int64?

        public init(tapeARN: String? = nil, tapeRecoveryPointTime: TimeStamp? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.tapeRecoveryPointTime = tapeRecoveryPointTime
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case tapeRecoveryPointTime = "TapeRecoveryPointTime"
            case tapeStatus = "TapeStatus"
            case tapeSizeInBytes = "TapeSizeInBytes"
        }
    }

    public struct RetrieveTapeArchiveOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the retrieved virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct Tag: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        public let value: String
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct AddCacheOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct StartGatewayInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListTapesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeInfos", required: false, type: .list)
        ]
        /// A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.
        public let marker: String?
        public let tapeInfos: [TapeInfo]?

        public init(marker: String? = nil, tapeInfos: [TapeInfo]? = nil) {
            self.marker = marker
            self.tapeInfos = tapeInfos
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeInfos = "TapeInfos"
        }
    }

    public struct TapeInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of a virtual tape.
        public let tapeARN: String?
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The status of the tape.
        public let tapeStatus: String?
        /// The size, in bytes, of a virtual tape.
        public let tapeSizeInBytes: Int64?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?

        public init(tapeARN: String? = nil, gatewayARN: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil, tapeBarcode: String? = nil) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcode = tapeBarcode
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
            case tapeStatus = "TapeStatus"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeBarcode = "TapeBarcode"
        }
    }

    public struct UpdateGatewayInformationInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayTimezone", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayTimezone: String?
        public let gatewayName: String?
        public let gatewayARN: String

        public init(gatewayTimezone: String? = nil, gatewayName: String? = nil, gatewayARN: String) {
            self.gatewayTimezone = gatewayTimezone
            self.gatewayName = gatewayName
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayTimezone = "GatewayTimezone"
            case gatewayName = "GatewayName"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateMaintenanceStartTimeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "HourOfDay", required: true, type: .integer), 
            AWSShapeMember(label: "MinuteOfHour", required: true, type: .integer), 
            AWSShapeMember(label: "DayOfWeek", required: true, type: .integer)
        ]
        public let gatewayARN: String
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32
        /// The maintenance start time day of the week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
        public let dayOfWeek: Int32

        public init(gatewayARN: String, hourOfDay: Int32, minuteOfHour: Int32, dayOfWeek: Int32) {
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case hourOfDay = "HourOfDay"
            case minuteOfHour = "MinuteOfHour"
            case dayOfWeek = "DayOfWeek"
        }
    }

    public struct DeleteVolumeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeSnapshotScheduleInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct RemoveTagsFromResourceInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource you want to remove the tags from.
        public let resourceARN: String
        /// The keys of the tags you want to remove from the specified resource. A tag is composed of a key/value pair.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct DescribeWorkingStorageInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeWorkingStorageOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "WorkingStorageUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "WorkingStorageAllocatedInBytes", required: false, type: .long)
        ]
        /// An array of the gateway's local disk IDs that are configured as working storage. Each local disk ID is specified as a string (minimum length of 1 and maximum length of 300). If no local disks are configured as working storage, then the DiskIds array is empty.
        public let diskIds: [String]?
        public let gatewayARN: String?
        /// The total working storage in bytes in use by the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageUsedInBytes: Int64?
        /// The total working storage in bytes allocated for the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageAllocatedInBytes: Int64?

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, workingStorageUsedInBytes: Int64? = nil, workingStorageAllocatedInBytes: Int64? = nil) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
            self.workingStorageUsedInBytes = workingStorageUsedInBytes
            self.workingStorageAllocatedInBytes = workingStorageAllocatedInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
            case workingStorageUsedInBytes = "WorkingStorageUsedInBytes"
            case workingStorageAllocatedInBytes = "WorkingStorageAllocatedInBytes"
        }
    }

    public struct DeleteTapeArchiveInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).
        public let tapeARN: String

        public init(tapeARN: String) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct Disk: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskStatus", required: false, type: .string), 
            AWSShapeMember(label: "DiskSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "DiskId", required: false, type: .string), 
            AWSShapeMember(label: "DiskNode", required: false, type: .string), 
            AWSShapeMember(label: "DiskPath", required: false, type: .string), 
            AWSShapeMember(label: "DiskAllocationType", required: false, type: .string), 
            AWSShapeMember(label: "DiskAllocationResource", required: false, type: .string)
        ]
        public let diskStatus: String?
        public let diskSizeInBytes: Int64?
        public let diskId: String?
        public let diskNode: String?
        public let diskPath: String?
        public let diskAllocationType: String?
        public let diskAllocationResource: String?

        public init(diskStatus: String? = nil, diskSizeInBytes: Int64? = nil, diskId: String? = nil, diskNode: String? = nil, diskPath: String? = nil, diskAllocationType: String? = nil, diskAllocationResource: String? = nil) {
            self.diskStatus = diskStatus
            self.diskSizeInBytes = diskSizeInBytes
            self.diskId = diskId
            self.diskNode = diskNode
            self.diskPath = diskPath
            self.diskAllocationType = diskAllocationType
            self.diskAllocationResource = diskAllocationResource
        }

        private enum CodingKeys: String, CodingKey {
            case diskStatus = "DiskStatus"
            case diskSizeInBytes = "DiskSizeInBytes"
            case diskId = "DiskId"
            case diskNode = "DiskNode"
            case diskPath = "DiskPath"
            case diskAllocationType = "DiskAllocationType"
            case diskAllocationResource = "DiskAllocationResource"
        }
    }

    public struct UpdateVTLDeviceTypeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VTLDeviceARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the medium changer you have selected.
        public let vTLDeviceARN: String?

        public init(vTLDeviceARN: String? = nil) {
            self.vTLDeviceARN = vTLDeviceARN
        }

        private enum CodingKeys: String, CodingKey {
            case vTLDeviceARN = "VTLDeviceARN"
        }
    }

    public struct UpdateChapCredentialsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target. This is the same target specified in the request.
        public let targetARN: String?
        /// The iSCSI initiator that connects to the target. This is the same initiator name specified in the request.
        public let initiatorName: String?

        public init(targetARN: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case initiatorName = "InitiatorName"
        }
    }

    public struct ActivateGatewayInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationKey", required: true, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "MediumChangerType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: true, type: .string), 
            AWSShapeMember(label: "GatewayRegion", required: true, type: .string), 
            AWSShapeMember(label: "GatewayName", required: true, type: .string), 
            AWSShapeMember(label: "TapeDriveType", required: false, type: .string)
        ]
        /// Your gateway activation key. You can obtain the activation key by sending an HTTP GET request with redirects enabled to the gateway IP address (port 80). The redirect URL returned in the response provides you the activation key for your gateway in the query string parameter activationKey. It may also include other activation-related parameters, however, these are merely defaults -- the arguments you pass to the ActivateGateway API call determine the actual configuration of your gateway.
        public let activationKey: String
        /// A value that defines the type of gateway to activate. The type specified is critical to all later functions of the gateway and cannot be changed after activation. The default value is STORED.   Valid Values: "STORED", "CACHED", "VTL", "FILE_S3"
        public let gatewayType: String?
        /// The value that indicates the type of medium changer to use for tape gateway. This field is optional.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let mediumChangerType: String?
        /// A value that indicates the time zone you want to set for the gateway. The time zone is of the format "GMT-hr:mm" or "GMT+hr:mm". For example, GMT-4:00 indicates the time is 4 hours behind GMT. GMT+2:00 indicates the time is 2 hours ahead of GMT. The time zone is used, for example, for scheduling snapshots and your gateway's maintenance schedule.
        public let gatewayTimezone: String
        /// A value that indicates the region where you want to store your data. The gateway region specified must be the same region as the region in your Host header in the request. For more information about available regions and endpoints for AWS Storage Gateway, see Regions and Endpoints in the Amazon Web Services Glossary.  Valid Values: "us-east-1", "us-east-2", "us-west-1", "us-west-2", "ca-central-1", "eu-west-1", "eu-central-1", "eu-west-2", "ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "ap-south-1", "sa-east-1"
        public let gatewayRegion: String
        /// The name you configured for your gateway.
        public let gatewayName: String
        /// The value that indicates the type of tape drive to use for tape gateway. This field is optional.  Valid Values: "IBM-ULT3580-TD5" 
        public let tapeDriveType: String?

        public init(activationKey: String, gatewayType: String? = nil, mediumChangerType: String? = nil, gatewayTimezone: String, gatewayRegion: String, gatewayName: String, tapeDriveType: String? = nil) {
            self.activationKey = activationKey
            self.gatewayType = gatewayType
            self.mediumChangerType = mediumChangerType
            self.gatewayTimezone = gatewayTimezone
            self.gatewayRegion = gatewayRegion
            self.gatewayName = gatewayName
            self.tapeDriveType = tapeDriveType
        }

        private enum CodingKeys: String, CodingKey {
            case activationKey = "ActivationKey"
            case gatewayType = "GatewayType"
            case mediumChangerType = "MediumChangerType"
            case gatewayTimezone = "GatewayTimezone"
            case gatewayRegion = "GatewayRegion"
            case gatewayName = "GatewayName"
            case tapeDriveType = "TapeDriveType"
        }
    }

    public struct NFSFileShareInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: false, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean)
        ]
        public let path: String?
        public let fileShareId: String?
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        public let fileShareARN: String?
        public let locationARN: String?
        /// The default storage class for objects put into an Amazon S3 bucket by file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        public let fileShareStatus: String?
        public let gatewayARN: String?
        public let kMSKey: String?
        public let role: String?
        public let readOnly: Bool?
        public let clientList: [String]?
        public let squash: String?
        /// True to use Amazon S3 server side encryption with your own KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?

        public init(path: String? = nil, fileShareId: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, fileShareARN: String? = nil, locationARN: String? = nil, defaultStorageClass: String? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, kMSKey: String? = nil, role: String? = nil, readOnly: Bool? = nil, clientList: [String]? = nil, squash: String? = nil, kMSEncrypted: Bool? = nil) {
            self.path = path
            self.fileShareId = fileShareId
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.fileShareARN = fileShareARN
            self.locationARN = locationARN
            self.defaultStorageClass = defaultStorageClass
            self.fileShareStatus = fileShareStatus
            self.gatewayARN = gatewayARN
            self.kMSKey = kMSKey
            self.role = role
            self.readOnly = readOnly
            self.clientList = clientList
            self.squash = squash
            self.kMSEncrypted = kMSEncrypted
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
            case fileShareId = "FileShareId"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case fileShareARN = "FileShareARN"
            case locationARN = "LocationARN"
            case defaultStorageClass = "DefaultStorageClass"
            case fileShareStatus = "FileShareStatus"
            case gatewayARN = "GatewayARN"
            case kMSKey = "KMSKey"
            case role = "Role"
            case readOnly = "ReadOnly"
            case clientList = "ClientList"
            case squash = "Squash"
            case kMSEncrypted = "KMSEncrypted"
        }
    }

    public struct AddTagsToResourceInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String
        /// The key-value pair that represents the tag you want to add to the resource. The value can be an empty string.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. 
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct UpdateMaintenanceStartTimeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateGatewaySoftwareNowOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CancelArchivalOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which archiving was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string), 
            AWSShapeMember(label: "MacAddress", required: false, type: .string), 
            AWSShapeMember(label: "Ipv4Address", required: false, type: .string)
        ]
        /// The Internet Protocol version 6 (IPv6) address of the interface. Currently not supported.
        public let ipv6Address: String?
        /// The Media Access Control (MAC) address of the interface.  This is currently unsupported and will not be returned in output. 
        public let macAddress: String?
        /// The Internet Protocol version 4 (IPv4) address of the interface.
        public let ipv4Address: String?

        public init(ipv6Address: String? = nil, macAddress: String? = nil, ipv4Address: String? = nil) {
            self.ipv6Address = ipv6Address
            self.macAddress = macAddress
            self.ipv4Address = ipv4Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
            case macAddress = "MacAddress"
            case ipv4Address = "Ipv4Address"
        }
    }

    public struct DeviceiSCSIAttributes: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "ChapEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePort", required: false, type: .integer)
        ]
        /// Specifies the unique Amazon Resource Name(ARN) that encodes the iSCSI qualified name(iqn) of a tape drive or media changer target.
        public let targetARN: String?
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The network interface identifier of the VTL device.
        public let networkInterfaceId: String?
        /// The port used to communicate with iSCSI VTL device targets.
        public let networkInterfacePort: Int32?

        public init(targetARN: String? = nil, chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil) {
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case chapEnabled = "ChapEnabled"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkInterfacePort = "NetworkInterfacePort"
        }
    }

    public struct CancelRetrievalInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel retrieval for.
        public let tapeARN: String
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ResetCacheOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeCachediSCSIVolumesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARNs", required: true, type: .list)
        ]
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARNs = "VolumeARNs"
        }
    }

    public struct TapeArchive: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "CompletionTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeCreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "RetrievedTo", required: false, type: .string), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long)
        ]
        /// The Amazon Resource Name (ARN) of an archived virtual tape.
        public let tapeARN: String?
        /// The time that the archiving of the virtual tape was completed. The string format of the completion time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let completionTime: TimeStamp?
        public let tapeCreatedDate: TimeStamp?
        /// The barcode that identifies the archived virtual tape.
        public let tapeBarcode: String?
        /// The size, in bytes, of data written to the virtual tape.  This value is not available for tapes created prior to May,13 2015. 
        public let tapeUsedInBytes: Int64?
        /// The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to. The virtual tape is retrieved from the virtual tape shelf (VTS).
        public let retrievedTo: String?
        /// The current state of the archived virtual tape.
        public let tapeStatus: String?
        /// The size, in bytes, of the archived virtual tape.
        public let tapeSizeInBytes: Int64?

        public init(tapeARN: String? = nil, completionTime: TimeStamp? = nil, tapeCreatedDate: TimeStamp? = nil, tapeBarcode: String? = nil, tapeUsedInBytes: Int64? = nil, retrievedTo: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.completionTime = completionTime
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeBarcode = tapeBarcode
            self.tapeUsedInBytes = tapeUsedInBytes
            self.retrievedTo = retrievedTo
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case completionTime = "CompletionTime"
            case tapeCreatedDate = "TapeCreatedDate"
            case tapeBarcode = "TapeBarcode"
            case tapeUsedInBytes = "TapeUsedInBytes"
            case retrievedTo = "RetrievedTo"
            case tapeStatus = "TapeStatus"
            case tapeSizeInBytes = "TapeSizeInBytes"
        }
    }

    public struct ListTapesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// A string that indicates the position at which to begin the returned list of tapes.
        public let marker: String?
        public let tapeARNs: [String]?
        /// An optional number limit for the tapes in the list returned by this call.
        public let limit: Int32?

        public init(marker: String? = nil, tapeARNs: [String]? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
            case limit = "Limit"
        }
    }

    public struct ListVolumeInitiatorsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes for the gateway.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateSnapshotOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        /// The snapshot ID that is used to refer to the snapshot in future operations such as describing snapshots (Amazon Elastic Compute Cloud API DescribeSnapshots) or creating a volume from a snapshot (CreateStorediSCSIVolume).
        public let snapshotId: String?
        /// The Amazon Resource Name (ARN) of the volume of which the snapshot was taken.
        public let volumeARN: String?

        public init(snapshotId: String? = nil, volumeARN: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateNFSFileShareInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: true, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        public let gatewayARN: String
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        public let clientToken: String
        /// The KMS key used for Amazon S3 server side encryption. This value can only be set when KmsEncrypted is true. Optional.
        public let kMSKey: String?
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        public let role: String
        /// Sets the write status of a file share: "true" if the write status is read-only, and otherwise "false".
        public let readOnly: Bool?
        /// File share default values. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks. 
        public let clientList: [String]?
        /// Maps a user to anonymous user. Valid options are the following:    "RootSquash" - Only root is mapped to anonymous user.   "NoSquash" - No one is mapped to anonymous user.   "AllSquash" - Everyone is mapped to anonymous user.  
        public let squash: String?
        /// The ARN of the backed storage used for storing file data. 
        public let locationARN: String
        /// The default storage class for objects put into an Amazon S3 bucket by file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?

        public init(gatewayARN: String, clientToken: String, kMSKey: String? = nil, role: String, readOnly: Bool? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, squash: String? = nil, locationARN: String, defaultStorageClass: String? = nil, kMSEncrypted: Bool? = nil) {
            self.gatewayARN = gatewayARN
            self.clientToken = clientToken
            self.kMSKey = kMSKey
            self.role = role
            self.readOnly = readOnly
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.squash = squash
            self.locationARN = locationARN
            self.defaultStorageClass = defaultStorageClass
            self.kMSEncrypted = kMSEncrypted
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case clientToken = "ClientToken"
            case kMSKey = "KMSKey"
            case role = "Role"
            case readOnly = "ReadOnly"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case clientList = "ClientList"
            case squash = "Squash"
            case locationARN = "LocationARN"
            case defaultStorageClass = "DefaultStorageClass"
            case kMSEncrypted = "KMSEncrypted"
        }
    }

    public struct ListTagsForResourceOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// he Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String?
        /// An array that contains the tags for the specified resource.
        public let tags: [Tag]?
        /// An opaque string that indicates the position at which to stop returning the list of tags.
        public let marker: String?

        public init(resourceARN: String? = nil, tags: [Tag]? = nil, marker: String? = nil) {
            self.resourceARN = resourceARN
            self.tags = tags
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
            case marker = "Marker"
        }
    }

    public struct CreateCachediSCSIVolumeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        public let targetARN: String?
        public let volumeARN: String?

        public init(targetARN: String? = nil, volumeARN: String? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeARN = "VolumeARN"
        }
    }

    public struct ListVolumesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// A string that indicates the position at which to begin the returned list of volumes. Obtain the marker from the response of a previous List iSCSI Volumes request.
        public let marker: String?
        public let gatewayARN: String?
        /// Specifies that the list of volumes returned be limited to the specified number of items.
        public let limit: Int32?

        public init(marker: String? = nil, gatewayARN: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
        }
    }

    public struct RemoveTagsFromResourceOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource that the tags were removed from.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct UpdateChapCredentialsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateTarget", required: false, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateInitiator", required: true, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return the TargetARN for specified VolumeARN.
        public let targetARN: String
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client). Byte constraints: Minimum bytes of 12. Maximum bytes of 16.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateTarget: String?
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateInitiator: String
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String

        public init(targetARN: String, secretToAuthenticateTarget: String? = nil, secretToAuthenticateInitiator: String, initiatorName: String) {
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
            case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
            case initiatorName = "InitiatorName"
        }
    }

    public struct CreateNFSFileShareOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the newly created file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct DeleteVolumeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the storage volume that was deleted. It is the same ARN you provided in the request.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct RetrieveTapeRecoveryPointInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which you want to retrieve the recovery point.
        public let tapeARN: String
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeBandwidthRateLimitOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AverageDownloadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "AverageUploadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// The average download bandwidth rate limit in bits per second. This field does not appear in the response if the download rate limit is not set.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second. This field does not appear in the response if the upload rate limit is not set.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String?

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String? = nil) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
            case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct SetLocalConsolePasswordOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateSnapshotScheduleOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeChapCredentialsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChapCredentials", required: false, type: .list)
        ]
        /// An array of ChapInfo objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:    InitiatorName: The iSCSI initiator that connects to the target.    SecretToAuthenticateInitiator: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.    SecretToAuthenticateTarget: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).    TargetARN: The Amazon Resource Name (ARN) of the storage volume.  
        public let chapCredentials: [ChapInfo]?

        public init(chapCredentials: [ChapInfo]? = nil) {
            self.chapCredentials = chapCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case chapCredentials = "ChapCredentials"
        }
    }

    public struct UpdateNFSFileShareInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean)
        ]
        /// The KMS key used for Amazon S3 server side encryption. This value can only be set when KmsEncrypted is true. Optional. 
        public let kMSKey: String?
        /// Sets the write status of a file share: "true" if the write status is read-only, and otherwise "false".
        public let readOnly: Bool?
        /// The default values for the file share. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        public let clientList: [String]?
        /// The user mapped to anonymous user. Valid options are the following:   "RootSquash" - Only root is mapped to anonymous user.   "NoSquash" - No one is mapped to anonymous user   "AllSquash" - Everyone is mapped to anonymous user.  
        public let squash: String?
        /// The Amazon Resource Name (ARN) of the file share to be updated. 
        public let fileShareARN: String
        /// The default storage class for objects put into an Amazon S3 bucket by a file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?

        public init(kMSKey: String? = nil, readOnly: Bool? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, squash: String? = nil, fileShareARN: String, defaultStorageClass: String? = nil, kMSEncrypted: Bool? = nil) {
            self.kMSKey = kMSKey
            self.readOnly = readOnly
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.squash = squash
            self.fileShareARN = fileShareARN
            self.defaultStorageClass = defaultStorageClass
            self.kMSEncrypted = kMSEncrypted
        }

        private enum CodingKeys: String, CodingKey {
            case kMSKey = "KMSKey"
            case readOnly = "ReadOnly"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case clientList = "ClientList"
            case squash = "Squash"
            case fileShareARN = "FileShareARN"
            case defaultStorageClass = "DefaultStorageClass"
            case kMSEncrypted = "KMSEncrypted"
        }
    }

    public struct ListLocalDisksOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Disks", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let disks: [Disk]?
        public let gatewayARN: String?

        public init(disks: [Disk]? = nil, gatewayARN: String? = nil) {
            self.disks = disks
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "Disks"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteBandwidthRateLimitOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteBandwidthRateLimitInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BandwidthType", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete. Valid Values: Upload, Download, All.
        public let bandwidthType: String
        public let gatewayARN: String

        public init(bandwidthType: String, gatewayARN: String) {
            self.bandwidthType = bandwidthType
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidthType = "BandwidthType"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteTapeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape to delete.
        public let tapeARN: String
        /// The unique Amazon Resource Name (ARN) of the gateway that the virtual tape to delete is associated with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateBandwidthRateLimitOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct VTLDevice: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VTLDeviceVendor", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceType", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceARN", required: false, type: .string), 
            AWSShapeMember(label: "DeviceiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "VTLDeviceProductIdentifier", required: false, type: .string)
        ]
        public let vTLDeviceVendor: String?
        public let vTLDeviceType: String?
        /// Specifies the unique Amazon Resource Name (ARN) of the device (tape drive or media changer).
        public let vTLDeviceARN: String?
        /// A list of iSCSI information about a VTL device.
        public let deviceiSCSIAttributes: DeviceiSCSIAttributes?
        public let vTLDeviceProductIdentifier: String?

        public init(vTLDeviceVendor: String? = nil, vTLDeviceType: String? = nil, vTLDeviceARN: String? = nil, deviceiSCSIAttributes: DeviceiSCSIAttributes? = nil, vTLDeviceProductIdentifier: String? = nil) {
            self.vTLDeviceVendor = vTLDeviceVendor
            self.vTLDeviceType = vTLDeviceType
            self.vTLDeviceARN = vTLDeviceARN
            self.deviceiSCSIAttributes = deviceiSCSIAttributes
            self.vTLDeviceProductIdentifier = vTLDeviceProductIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case vTLDeviceVendor = "VTLDeviceVendor"
            case vTLDeviceType = "VTLDeviceType"
            case vTLDeviceARN = "VTLDeviceARN"
            case deviceiSCSIAttributes = "DeviceiSCSIAttributes"
            case vTLDeviceProductIdentifier = "VTLDeviceProductIdentifier"
        }
    }

    public struct GatewayInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayOperationalState", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The type of the gateway.
        public let gatewayType: String?
        /// The state of the gateway. Valid Values: DISABLED or ACTIVE
        public let gatewayOperationalState: String?
        /// The name of the gateway.
        public let gatewayName: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?

        public init(gatewayARN: String? = nil, gatewayType: String? = nil, gatewayOperationalState: String? = nil, gatewayName: String? = nil, gatewayId: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayType = gatewayType
            self.gatewayOperationalState = gatewayOperationalState
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case gatewayType = "GatewayType"
            case gatewayOperationalState = "GatewayOperationalState"
            case gatewayName = "GatewayName"
            case gatewayId = "GatewayId"
        }
    }

    public struct CreateSnapshotInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDescription", required: true, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// Textual description of the snapshot that appears in the Amazon EC2 console, Elastic Block Store snapshots panel in the Description field, and in the AWS Storage Gateway snapshot Details pane, Description field
        public let snapshotDescription: String
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDescription = "SnapshotDescription"
            case volumeARN = "VolumeARN"
        }
    }

    public struct UpdateBandwidthRateLimitInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AverageDownloadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "AverageUploadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The average download bandwidth rate limit in bits per second.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
            case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeMaintenanceStartTimeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct StartGatewayOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListFileSharesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Opaque pagination token returned from a previous ListFileShares operation. If present, Marker specifies where to continue the list from after a previous call to ListFileShares. Optional.
        public let marker: String?
        /// The Amazon resource Name (ARN) of the gateway whose file shares you want to list. If this field is not present, all file shares under your account are listed.
        public let gatewayARN: String?
        /// The maximum number of file shares to return in the response. The value must be an integer with a value greater than zero. Optional.
        public let limit: Int32?

        public init(marker: String? = nil, gatewayARN: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
        }
    }

    public struct ActivateGatewayOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct VolumeRecoveryPointInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeRecoveryPointTime", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeUsageInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long)
        ]
        public let volumeRecoveryPointTime: String?
        public let volumeARN: String?
        public let volumeUsageInBytes: Int64?
        public let volumeSizeInBytes: Int64?

        public init(volumeRecoveryPointTime: String? = nil, volumeARN: String? = nil, volumeUsageInBytes: Int64? = nil, volumeSizeInBytes: Int64? = nil) {
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.volumeARN = volumeARN
            self.volumeUsageInBytes = volumeUsageInBytes
            self.volumeSizeInBytes = volumeSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
            case volumeARN = "VolumeARN"
            case volumeUsageInBytes = "VolumeUsageInBytes"
            case volumeSizeInBytes = "VolumeSizeInBytes"
        }
    }

    public struct DescribeTapeArchivesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeArchives", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// An array of virtual tape objects in the virtual tape shelf (VTS). The description includes of the Amazon Resource Name(ARN) of the virtual tapes. The information returned includes the Amazon Resource Names (ARNs) of the tapes, size of the tapes, status of the tapes, progress of the description and tape barcode.
        public let tapeArchives: [TapeArchive]?
        /// An opaque string that indicates the position at which the virtual tapes that were fetched for description ended. Use this marker in your next request to fetch the next set of virtual tapes in the virtual tape shelf (VTS). If there are no more virtual tapes to describe, this field does not appear in the response.
        public let marker: String?

        public init(tapeArchives: [TapeArchive]? = nil, marker: String? = nil) {
            self.tapeArchives = tapeArchives
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case tapeArchives = "TapeArchives"
            case marker = "Marker"
        }
    }

    public struct StorediSCSIVolume: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "SourceSnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "PreservedExistingData", required: false, type: .boolean), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeProgress", required: false, type: .double), 
            AWSShapeMember(label: "VolumeDiskId", required: false, type: .string)
        ]
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        /// If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// One of the VolumeType enumeration values describing the type of the volume.
        public let volumeType: String?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.  Valid Values: true, false
        public let preservedExistingData: Bool?
        /// The date the volume was created. Volumes created prior to March 28, 2017 don’t have this time stamp.
        public let createdDate: TimeStamp?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// The ID of the local disk that was specified in the CreateStorediSCSIVolume operation.
        public let volumeDiskId: String?

        public init(volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, sourceSnapshotId: String? = nil, volumeType: String? = nil, volumeStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, preservedExistingData: Bool? = nil, createdDate: TimeStamp? = nil, volumeARN: String? = nil, volumeProgress: Double? = nil, volumeDiskId: String? = nil) {
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeType = volumeType
            self.volumeStatus = volumeStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.preservedExistingData = preservedExistingData
            self.createdDate = createdDate
            self.volumeARN = volumeARN
            self.volumeProgress = volumeProgress
            self.volumeDiskId = volumeDiskId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
            case sourceSnapshotId = "SourceSnapshotId"
            case volumeType = "VolumeType"
            case volumeStatus = "VolumeStatus"
            case volumeId = "VolumeId"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case preservedExistingData = "PreservedExistingData"
            case createdDate = "CreatedDate"
            case volumeARN = "VolumeARN"
            case volumeProgress = "VolumeProgress"
            case volumeDiskId = "VolumeDiskId"
        }
    }

    public struct CreateTapesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumTapesToCreate", required: true, type: .integer), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: true, type: .long), 
            AWSShapeMember(label: "TapeBarcodePrefix", required: true, type: .string)
        ]
        /// The number of virtual tapes that you want to create.
        public let numTapesToCreate: Int32
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tapes with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.  Using the same ClientToken prevents creating the tape multiple times. 
        public let clientToken: String
        /// The size, in bytes, of the virtual tapes that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64
        /// A prefix that you append to the barcode of the virtual tape you are creating. This prefix makes the barcode unique.  The prefix must be 1 to 4 characters in length and must be one of the uppercase letters from A to Z. 
        public let tapeBarcodePrefix: String

        public init(numTapesToCreate: Int32, gatewayARN: String, clientToken: String, tapeSizeInBytes: Int64, tapeBarcodePrefix: String) {
            self.numTapesToCreate = numTapesToCreate
            self.gatewayARN = gatewayARN
            self.clientToken = clientToken
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcodePrefix = tapeBarcodePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case numTapesToCreate = "NumTapesToCreate"
            case gatewayARN = "GatewayARN"
            case clientToken = "ClientToken"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeBarcodePrefix = "TapeBarcodePrefix"
        }
    }

    public struct CachediSCSIVolume: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeProgress", required: false, type: .double), 
            AWSShapeMember(label: "VolumeiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp)
        ]
        /// If the cached volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// One of the VolumeType enumeration values that describes the type of the volume.
        public let volumeType: String?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the cached volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        /// The date the volume was created. Volumes created prior to March 28, 2017 don’t have this time stamp.
        public let createdDate: TimeStamp?

        public init(sourceSnapshotId: String? = nil, volumeType: String? = nil, volumeStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, volumeARN: String? = nil, volumeProgress: Double? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, createdDate: TimeStamp? = nil) {
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeType = volumeType
            self.volumeStatus = volumeStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeARN = volumeARN
            self.volumeProgress = volumeProgress
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSnapshotId = "SourceSnapshotId"
            case volumeType = "VolumeType"
            case volumeStatus = "VolumeStatus"
            case volumeId = "VolumeId"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeARN = "VolumeARN"
            case volumeProgress = "VolumeProgress"
            case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
            case createdDate = "CreatedDate"
        }
    }

    public struct AddTagsToResourceOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct DescribeChapCredentialsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String

        public init(targetARN: String) {
            self.targetARN = targetARN
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
        }
    }

    public struct DeleteGatewayInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteFileShareOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct Tape: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "VTLDevice", required: false, type: .string), 
            AWSShapeMember(label: "Progress", required: false, type: .double), 
            AWSShapeMember(label: "TapeCreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The virtual tape library (VTL) device that the virtual tape is associated with.
        public let vTLDevice: String?
        /// For archiving virtual tapes, indicates how much data remains to be uploaded before archiving is complete. Range: 0 (not started) to 100 (complete).
        public let progress: Double?
        /// The date the virtual tape was created.
        public let tapeCreatedDate: TimeStamp?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?
        /// The size, in bytes, of data written to the virtual tape.  This value is not available for tapes created prior to May,13 2015. 
        public let tapeUsedInBytes: Int64?
        /// The current state of the virtual tape.
        public let tapeStatus: String?
        /// The size, in bytes, of the virtual tape capacity.
        public let tapeSizeInBytes: Int64?

        public init(tapeARN: String? = nil, vTLDevice: String? = nil, progress: Double? = nil, tapeCreatedDate: TimeStamp? = nil, tapeBarcode: String? = nil, tapeUsedInBytes: Int64? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.vTLDevice = vTLDevice
            self.progress = progress
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeBarcode = tapeBarcode
            self.tapeUsedInBytes = tapeUsedInBytes
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case vTLDevice = "VTLDevice"
            case progress = "Progress"
            case tapeCreatedDate = "TapeCreatedDate"
            case tapeBarcode = "TapeBarcode"
            case tapeUsedInBytes = "TapeUsedInBytes"
            case tapeStatus = "TapeStatus"
            case tapeSizeInBytes = "TapeSizeInBytes"
        }
    }

    public struct DeleteTapeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DescribeStorediSCSIVolumesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARNs", required: true, type: .list)
        ]
        /// An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must from the same gateway. Use ListVolumes to get volume ARNs for a gateway.
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARNs = "VolumeARNs"
        }
    }

    public struct DescribeTapeArchivesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// An opaque string that indicates the position at which to begin describing virtual tapes.
        public let marker: String?
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.
        public let tapeARNs: [String]?
        /// Specifies that the number of virtual tapes descried be limited to the specified number.
        public let limit: Int32?

        public init(marker: String? = nil, tapeARNs: [String]? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
            case limit = "Limit"
        }
    }

    public struct UpdateGatewaySoftwareNowInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CreateTapeWithBarcodeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// A unique Amazon Resource Name (ARN) that represents the virtual tape that was created.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct AddWorkingStorageInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "DiskIds", required: true, type: .list)
        ]
        public let gatewayARN: String
        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case diskIds = "DiskIds"
        }
    }

    public struct DeleteChapCredentialsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String

        public init(targetARN: String, initiatorName: String) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case initiatorName = "InitiatorName"
        }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case activationkeyexpired = "ActivationKeyExpired"
        case activationkeyinvalid = "ActivationKeyInvalid"
        case activationkeynotfound = "ActivationKeyNotFound"
        case gatewayinternalerror = "GatewayInternalError"
        case gatewaynotconnected = "GatewayNotConnected"
        case gatewaynotfound = "GatewayNotFound"
        case gatewayproxynetworkconnectionbusy = "GatewayProxyNetworkConnectionBusy"
        case authenticationfailure = "AuthenticationFailure"
        case bandwidththrottleschedulenotfound = "BandwidthThrottleScheduleNotFound"
        case blocked = "Blocked"
        case cannotexportsnapshot = "CannotExportSnapshot"
        case chapcredentialnotfound = "ChapCredentialNotFound"
        case diskalreadyallocated = "DiskAlreadyAllocated"
        case diskdoesnotexist = "DiskDoesNotExist"
        case disksizegreaterthanvolumemaxsize = "DiskSizeGreaterThanVolumeMaxSize"
        case disksizelessthanvolumesize = "DiskSizeLessThanVolumeSize"
        case disksizenotgigaligned = "DiskSizeNotGigAligned"
        case duplicatecertificateinfo = "DuplicateCertificateInfo"
        case duplicateschedule = "DuplicateSchedule"
        case endpointnotfound = "EndpointNotFound"
        case iamnotsupported = "IAMNotSupported"
        case initiatorinvalid = "InitiatorInvalid"
        case initiatornotfound = "InitiatorNotFound"
        case internalerror = "InternalError"
        case invalidgateway = "InvalidGateway"
        case invalidendpoint = "InvalidEndpoint"
        case invalidparameters = "InvalidParameters"
        case invalidschedule = "InvalidSchedule"
        case localstoragelimitexceeded = "LocalStorageLimitExceeded"
        case lunalreadyallocated = "LunAlreadyAllocated "
        case luninvalid = "LunInvalid"
        case maximumcontentlengthexceeded = "MaximumContentLengthExceeded"
        case maximumtapecartridgecountexceeded = "MaximumTapeCartridgeCountExceeded"
        case maximumvolumecountexceeded = "MaximumVolumeCountExceeded"
        case networkconfigurationchanged = "NetworkConfigurationChanged"
        case nodisksavailable = "NoDisksAvailable"
        case notimplemented = "NotImplemented"
        case notsupported = "NotSupported"
        case operationaborted = "OperationAborted"
        case outdatedgateway = "OutdatedGateway"
        case parametersnotimplemented = "ParametersNotImplemented"
        case regioninvalid = "RegionInvalid"
        case requesttimeout = "RequestTimeout"
        case serviceunavailable = "ServiceUnavailable"
        case snapshotdeleted = "SnapshotDeleted"
        case snapshotidinvalid = "SnapshotIdInvalid"
        case snapshotinprogress = "SnapshotInProgress"
        case snapshotnotfound = "SnapshotNotFound"
        case snapshotschedulenotfound = "SnapshotScheduleNotFound"
        case stagingareafull = "StagingAreaFull"
        case storagefailure = "StorageFailure"
        case tapecartridgenotfound = "TapeCartridgeNotFound"
        case targetalreadyexists = "TargetAlreadyExists"
        case targetinvalid = "TargetInvalid"
        case targetnotfound = "TargetNotFound"
        case unauthorizedoperation = "UnauthorizedOperation"
        case volumealreadyexists = "VolumeAlreadyExists"
        case volumeidinvalid = "VolumeIdInvalid"
        case volumeinuse = "VolumeInUse"
        case volumenotfound = "VolumeNotFound"
        case volumenotready = "VolumeNotReady"
        public var description: String { return self.rawValue }
    }

    public struct DescribeNFSFileSharesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARNList", required: true, type: .list)
        ]
        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        public let fileShareARNList: [String]

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARNList = "FileShareARNList"
        }
    }

    public struct DescribeStorediSCSIVolumesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorediSCSIVolumes", required: false, type: .list)
        ]
        public let storediSCSIVolumes: [StorediSCSIVolume]?

        public init(storediSCSIVolumes: [StorediSCSIVolume]? = nil) {
            self.storediSCSIVolumes = storediSCSIVolumes
        }

        private enum CodingKeys: String, CodingKey {
            case storediSCSIVolumes = "StorediSCSIVolumes"
        }
    }

    public struct DescribeUploadBufferOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "UploadBufferUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "UploadBufferAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "DiskIds", required: false, type: .list)
        ]
        public let gatewayARN: String?
        public let uploadBufferUsedInBytes: Int64?
        public let uploadBufferAllocatedInBytes: Int64?
        public let diskIds: [String]?

        public init(gatewayARN: String? = nil, uploadBufferUsedInBytes: Int64? = nil, uploadBufferAllocatedInBytes: Int64? = nil, diskIds: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.uploadBufferUsedInBytes = uploadBufferUsedInBytes
            self.uploadBufferAllocatedInBytes = uploadBufferAllocatedInBytes
            self.diskIds = diskIds
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case uploadBufferUsedInBytes = "UploadBufferUsedInBytes"
            case uploadBufferAllocatedInBytes = "UploadBufferAllocatedInBytes"
            case diskIds = "DiskIds"
        }
    }

    public struct UpdateNFSFileShareOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the updated file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct ListVolumesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeInfos", required: false, type: .list)
        ]
        public let marker: String?
        public let gatewayARN: String?
        public let volumeInfos: [VolumeInfo]?

        public init(marker: String? = nil, gatewayARN: String? = nil, volumeInfos: [VolumeInfo]? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.volumeInfos = volumeInfos
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gatewayARN = "GatewayARN"
            case volumeInfos = "VolumeInfos"
        }
    }

    public struct DescribeCachediSCSIVolumesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CachediSCSIVolumes", required: false, type: .list)
        ]
        /// An array of objects where each object contains metadata about one cached volume.
        public let cachediSCSIVolumes: [CachediSCSIVolume]?

        public init(cachediSCSIVolumes: [CachediSCSIVolume]? = nil) {
            self.cachediSCSIVolumes = cachediSCSIVolumes
        }

        private enum CodingKeys: String, CodingKey {
            case cachediSCSIVolumes = "CachediSCSIVolumes"
        }
    }

    public struct DeleteSnapshotScheduleInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateTapesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]
        /// A list of unique Amazon Resource Names (ARNs) that represents the virtual tapes that were created.
        public let tapeARNs: [String]?

        public init(tapeARNs: [String]? = nil) {
            self.tapeARNs = tapeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARNs = "TapeARNs"
        }
    }

    public struct CreateStorediSCSIVolumeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long)
        ]
        /// he Amazon Resource Name (ARN) of the volume target that includes the iSCSI name that initiators can use to connect to the target.
        public let targetARN: String?
        /// The Amazon Resource Name (ARN) of the configured volume.
        public let volumeARN: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?

        public init(targetARN: String? = nil, volumeARN: String? = nil, volumeSizeInBytes: Int64? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
            self.volumeSizeInBytes = volumeSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeARN = "VolumeARN"
            case volumeSizeInBytes = "VolumeSizeInBytes"
        }
    }

    public struct ListLocalDisksInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeRecoveryPointTime", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        public let volumeARN: String?
        public let volumeRecoveryPointTime: String?
        public let snapshotId: String?

        public init(volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil, snapshotId: String? = nil) {
            self.volumeARN = volumeARN
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
            case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
            case snapshotId = "SnapshotId"
        }
    }

    public struct DescribeGatewayInformationOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayState", required: false, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: false, type: .string), 
            AWSShapeMember(label: "LastSoftwareUpdate", required: false, type: .string), 
            AWSShapeMember(label: "GatewayNetworkInterfaces", required: false, type: .list), 
            AWSShapeMember(label: "NextUpdateAvailabilityDate", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string)
        ]
        /// A value that indicates the operating state of the gateway.
        public let gatewayState: String?
        /// The type of the gateway.
        public let gatewayType: String?
        public let gatewayARN: String?
        /// A value that indicates the time zone configured for the gateway.
        public let gatewayTimezone: String?
        /// The date on which the last software update was applied to the gateway. If the gateway has never been updated, this field does not return a value in the response.
        public let lastSoftwareUpdate: String?
        /// A NetworkInterface array that contains descriptions of the gateway network interfaces.
        public let gatewayNetworkInterfaces: [NetworkInterface]?
        /// The date on which an update to the gateway is available. This date is in the time zone of the gateway. If the gateway is not available for an update this field is not returned in the response.
        public let nextUpdateAvailabilityDate: String?
        /// The name you configured for your gateway.
        public let gatewayName: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?

        public init(gatewayState: String? = nil, gatewayType: String? = nil, gatewayARN: String? = nil, gatewayTimezone: String? = nil, lastSoftwareUpdate: String? = nil, gatewayNetworkInterfaces: [NetworkInterface]? = nil, nextUpdateAvailabilityDate: String? = nil, gatewayName: String? = nil, gatewayId: String? = nil) {
            self.gatewayState = gatewayState
            self.gatewayType = gatewayType
            self.gatewayARN = gatewayARN
            self.gatewayTimezone = gatewayTimezone
            self.lastSoftwareUpdate = lastSoftwareUpdate
            self.gatewayNetworkInterfaces = gatewayNetworkInterfaces
            self.nextUpdateAvailabilityDate = nextUpdateAvailabilityDate
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayState = "GatewayState"
            case gatewayType = "GatewayType"
            case gatewayARN = "GatewayARN"
            case gatewayTimezone = "GatewayTimezone"
            case lastSoftwareUpdate = "LastSoftwareUpdate"
            case gatewayNetworkInterfaces = "GatewayNetworkInterfaces"
            case nextUpdateAvailabilityDate = "NextUpdateAvailabilityDate"
            case gatewayName = "GatewayName"
            case gatewayId = "GatewayId"
        }
    }

    public struct FileShareInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let fileShareId: String?
        public let fileShareStatus: String?
        public let fileShareARN: String?
        public let gatewayARN: String?

        public init(fileShareId: String? = nil, fileShareStatus: String? = nil, fileShareARN: String? = nil, gatewayARN: String? = nil) {
            self.fileShareId = fileShareId
            self.fileShareStatus = fileShareStatus
            self.fileShareARN = fileShareARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareId = "FileShareId"
            case fileShareStatus = "FileShareStatus"
            case fileShareARN = "FileShareARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateSnapshotScheduleInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurrenceInHours", required: true, type: .integer), 
            AWSShapeMember(label: "StartAt", required: true, type: .integer), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Frequency of snapshots. Specify the number of hours between snapshots.
        public let recurrenceInHours: Int32
        /// The hour of the day at which the snapshot schedule begins represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let startAt: Int32
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String
        /// Optional description of the snapshot that overwrites the existing description.
        public let description: String?

        public init(recurrenceInHours: Int32, startAt: Int32, volumeARN: String, description: String? = nil) {
            self.recurrenceInHours = recurrenceInHours
            self.startAt = startAt
            self.volumeARN = volumeARN
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case recurrenceInHours = "RecurrenceInHours"
            case startAt = "StartAt"
            case volumeARN = "VolumeARN"
            case description = "Description"
        }
    }

    public struct DescribeVTLDevicesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "VTLDevices", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of VTL device objects composed of the Amazon Resource Name(ARN) of the VTL devices.
        public let vTLDevices: [VTLDevice]?
        public let gatewayARN: String?

        public init(marker: String? = nil, vTLDevices: [VTLDevice]? = nil, gatewayARN: String? = nil) {
            self.marker = marker
            self.vTLDevices = vTLDevices
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case vTLDevices = "VTLDevices"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteChapCredentialsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target.
        public let targetARN: String?
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?

        public init(targetARN: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case initiatorName = "InitiatorName"
        }
    }

    public struct UpdateGatewayInformationOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string)
        ]
        public let gatewayARN: String?
        public let gatewayName: String?

        public init(gatewayARN: String? = nil, gatewayName: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayName = gatewayName
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case gatewayName = "GatewayName"
        }
    }

    public struct DescribeMaintenanceStartTimeOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "HourOfDay", required: false, type: .integer), 
            AWSShapeMember(label: "MinuteOfHour", required: false, type: .integer), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "DayOfWeek", required: false, type: .integer)
        ]
        public let gatewayARN: String?
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32?
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32?
        public let timezone: String?
        /// An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.
        public let dayOfWeek: Int32?

        public init(gatewayARN: String? = nil, hourOfDay: Int32? = nil, minuteOfHour: Int32? = nil, timezone: String? = nil, dayOfWeek: Int32? = nil) {
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.timezone = timezone
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case hourOfDay = "HourOfDay"
            case minuteOfHour = "MinuteOfHour"
            case timezone = "Timezone"
            case dayOfWeek = "DayOfWeek"
        }
    }

    public struct DescribeSnapshotScheduleOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartAt", required: false, type: .integer), 
            AWSShapeMember(label: "RecurrenceInHours", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        public let startAt: Int32?
        public let recurrenceInHours: Int32?
        public let volumeARN: String?
        public let timezone: String?
        public let description: String?

        public init(startAt: Int32? = nil, recurrenceInHours: Int32? = nil, volumeARN: String? = nil, timezone: String? = nil, description: String? = nil) {
            self.startAt = startAt
            self.recurrenceInHours = recurrenceInHours
            self.volumeARN = volumeARN
            self.timezone = timezone
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case startAt = "StartAt"
            case recurrenceInHours = "RecurrenceInHours"
            case volumeARN = "VolumeARN"
            case timezone = "Timezone"
            case description = "Description"
        }
    }

    public struct DeleteFileShareInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the file share to be deleted. 
        public let fileShareARN: String

        public init(fileShareARN: String) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct DescribeTapeRecoveryPointsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeRecoveryPointInfos", required: false, type: .list)
        ]
        /// An opaque string that indicates the position at which the virtual tape recovery points that were listed for description ended. Use this marker in your next request to list the next set of virtual tape recovery points in the list. If there are no more recovery points to describe, this field does not appear in the response.
        public let marker: String?
        public let gatewayARN: String?
        /// An array of TapeRecoveryPointInfos that are available for the specified gateway.
        public let tapeRecoveryPointInfos: [TapeRecoveryPointInfo]?

        public init(marker: String? = nil, gatewayARN: String? = nil, tapeRecoveryPointInfos: [TapeRecoveryPointInfo]? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.tapeRecoveryPointInfos = tapeRecoveryPointInfos
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gatewayARN = "GatewayARN"
            case tapeRecoveryPointInfos = "TapeRecoveryPointInfos"
        }
    }

    public struct DescribeCacheInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RefreshCacheInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string)
        ]
        public let fileShareARN: String

        public init(fileShareARN: String) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct ShutdownGatewayOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListFileSharesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "FileShareInfoList", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// If the request includes Marker, the response returns that value in this field. 
        public let marker: String?
        /// An array of information about the file gateway's file shares. 
        public let fileShareInfoList: [FileShareInfo]?
        /// If a value is present, there are more file shares to return. In a subsequent request, use NextMarker as the value for Marker to retrieve the next set of file shares. 
        public let nextMarker: String?

        public init(marker: String? = nil, fileShareInfoList: [FileShareInfo]? = nil, nextMarker: String? = nil) {
            self.marker = marker
            self.fileShareInfoList = fileShareInfoList
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case fileShareInfoList = "FileShareInfoList"
            case nextMarker = "NextMarker"
        }
    }

    public struct DisableGatewayInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeVTLDevicesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceARNs", required: false, type: .list)
        ]
        public let gatewayARN: String
        /// Specifies that the number of VTL devices described be limited to the specified number.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin describing the VTL devices.
        public let marker: String?
        /// An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.  All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway. 
        public let vTLDeviceARNs: [String]?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, vTLDeviceARNs: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
            self.vTLDeviceARNs = vTLDeviceARNs
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
            case vTLDeviceARNs = "VTLDeviceARNs"
        }
    }

    public struct VolumeiSCSIAttributes: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "ChapEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePort", required: false, type: .integer), 
            AWSShapeMember(label: "LunNumber", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the volume target.
        public let targetARN: String?
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The network interface identifier.
        public let networkInterfaceId: String?
        /// The port used to communicate with iSCSI targets.
        public let networkInterfacePort: Int32?
        /// The logical disk number.
        public let lunNumber: Int32?

        public init(targetARN: String? = nil, chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, lunNumber: Int32? = nil) {
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
            self.lunNumber = lunNumber
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case chapEnabled = "ChapEnabled"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkInterfacePort = "NetworkInterfacePort"
            case lunNumber = "LunNumber"
        }
    }

    public struct ListVolumeRecoveryPointsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeRecoveryPointInfos", required: false, type: .list)
        ]
        public let gatewayARN: String?
        public let volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]?

        public init(gatewayARN: String? = nil, volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.volumeRecoveryPointInfos = volumeRecoveryPointInfos
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case volumeRecoveryPointInfos = "VolumeRecoveryPointInfos"
        }
    }

    public struct ListGatewaysInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// An opaque string that indicates the position at which to begin the returned list of gateways.
        public let marker: String?
        /// Specifies that the list of gateways returned be limited to the specified number of items.
        public let limit: Int32?

        public init(marker: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case limit = "Limit"
        }
    }

    public struct CreateStorediSCSIVolumeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "PreserveExistingData", required: true, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "DiskId", required: true, type: .string), 
            AWSShapeMember(label: "TargetName", required: true, type: .string)
        ]
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new stored volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        public let snapshotId: String?
        public let gatewayARN: String
        /// Specify this field as true if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.  Valid Values: true, false
        public let preserveExistingData: Bool
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// The unique identifier for the gateway local disk that is configured as a stored volume. Use ListLocalDisks to list disk IDs for a gateway.
        public let diskId: String
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes of a gateway.
        public let targetName: String

        public init(snapshotId: String? = nil, gatewayARN: String, preserveExistingData: Bool, networkInterfaceId: String, diskId: String, targetName: String) {
            self.snapshotId = snapshotId
            self.gatewayARN = gatewayARN
            self.preserveExistingData = preserveExistingData
            self.networkInterfaceId = networkInterfaceId
            self.diskId = diskId
            self.targetName = targetName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case gatewayARN = "GatewayARN"
            case preserveExistingData = "PreserveExistingData"
            case networkInterfaceId = "NetworkInterfaceId"
            case diskId = "DiskId"
            case targetName = "TargetName"
        }
    }

    public struct ChapInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateTarget", required: false, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateInitiator", required: false, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let targetARN: String?
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).
        public let secretToAuthenticateTarget: String?
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.
        public let secretToAuthenticateInitiator: String?
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?

        public init(targetARN: String? = nil, secretToAuthenticateTarget: String? = nil, secretToAuthenticateInitiator: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
            case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
            case initiatorName = "InitiatorName"
        }
    }

    public struct StorageGatewayError: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "errorCode", required: false, type: .enum), 
            AWSShapeMember(label: "errorDetails", required: false, type: .map)
        ]
        /// Additional information about the error.
        public let errorCode: ErrorCode?
        /// Human-readable text that provides detail about the error that occurred.
        public let errorDetails: [String: String]?

        public init(errorCode: ErrorCode? = nil, errorDetails: [String: String]? = nil) {
            self.errorCode = errorCode
            self.errorDetails = errorDetails
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorDetails = "errorDetails"
        }
    }

    public struct VolumeInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string)
        ]
        /// The size of the volume in bytes. Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeSizeInBytes: Int64?
        public let gatewayARN: String?
        public let volumeType: String?
        /// The Amazon Resource Name (ARN) for the storage volume. For example, the following is a valid ARN:  arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB   Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeARN: String?
        /// The unique identifier assigned to the volume. This ID becomes part of the volume Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeId: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let gatewayId: String?

        public init(volumeSizeInBytes: Int64? = nil, gatewayARN: String? = nil, volumeType: String? = nil, volumeARN: String? = nil, volumeId: String? = nil, gatewayId: String? = nil) {
            self.volumeSizeInBytes = volumeSizeInBytes
            self.gatewayARN = gatewayARN
            self.volumeType = volumeType
            self.volumeARN = volumeARN
            self.volumeId = volumeId
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case gatewayARN = "GatewayARN"
            case volumeType = "VolumeType"
            case volumeARN = "VolumeARN"
            case volumeId = "VolumeId"
            case gatewayId = "GatewayId"
        }
    }

    public struct AddWorkingStorageOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CancelRetrievalOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which retrieval was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct ListVolumeInitiatorsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Initiators", required: false, type: .list)
        ]
        /// The host names and port numbers of all iSCSI initiators that are connected to the gateway.
        public let initiators: [String]?

        public init(initiators: [String]? = nil) {
            self.initiators = initiators
        }

        private enum CodingKeys: String, CodingKey {
            case initiators = "Initiators"
        }
    }

    public struct DescribeBandwidthRateLimitInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeUploadBufferInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CreateCachediSCSIVolumeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: true, type: .long), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "TargetName", required: true, type: .string), 
            AWSShapeMember(label: "SourceVolumeARN", required: false, type: .string)
        ]
        public let gatewayARN: String
        public let networkInterfaceId: String
        public let clientToken: String
        public let volumeSizeInBytes: Int64
        public let snapshotId: String?
        public let targetName: String
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The VolumeSizeInBytes value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        public let sourceVolumeARN: String?

        public init(gatewayARN: String, networkInterfaceId: String, clientToken: String, volumeSizeInBytes: Int64, snapshotId: String? = nil, targetName: String, sourceVolumeARN: String? = nil) {
            self.gatewayARN = gatewayARN
            self.networkInterfaceId = networkInterfaceId
            self.clientToken = clientToken
            self.volumeSizeInBytes = volumeSizeInBytes
            self.snapshotId = snapshotId
            self.targetName = targetName
            self.sourceVolumeARN = sourceVolumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case networkInterfaceId = "NetworkInterfaceId"
            case clientToken = "ClientToken"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case snapshotId = "SnapshotId"
            case targetName = "TargetName"
            case sourceVolumeARN = "SourceVolumeARN"
        }
    }

    public struct ListGatewaysOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Gateways", required: false, type: .list)
        ]
        public let marker: String?
        public let gateways: [GatewayInfo]?

        public init(marker: String? = nil, gateways: [GatewayInfo]? = nil) {
            self.marker = marker
            self.gateways = gateways
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gateways = "Gateways"
        }
    }

    public struct ShutdownGatewayInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RetrieveTapeRecoveryPointOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which the recovery point was retrieved.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DisableGatewayOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// The unique Amazon Resource Name of the disabled gateway.
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddCacheInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "DiskIds", required: true, type: .list)
        ]
        public let gatewayARN: String
        public let diskIds: [String]

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case diskIds = "DiskIds"
        }
    }

}