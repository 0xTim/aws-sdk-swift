// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ImportExport {

    public struct Artifact: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "URL", required: false, type: .string)
        ]
        public let description: String?
        public let url: String?

        public init(description: String? = nil, url: String? = nil) {
            self.description = description
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case url = "URL"
        }
    }

    public struct CreateJobInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APIVersion", required: false, type: .string), 
            AWSShapeMember(label: "Manifest", required: true, type: .string), 
            AWSShapeMember(label: "JobType", required: true, type: .enum), 
            AWSShapeMember(label: "ManifestAddendum", required: false, type: .string), 
            AWSShapeMember(label: "ValidateOnly", required: true, type: .boolean)
        ]
        public let aPIVersion: String?
        public let manifest: String
        public let jobType: JobType
        public let manifestAddendum: String?
        public let validateOnly: Bool

        public init(aPIVersion: String? = nil, manifest: String, jobType: JobType, manifestAddendum: String? = nil, validateOnly: Bool) {
            self.aPIVersion = aPIVersion
            self.manifest = manifest
            self.jobType = jobType
            self.manifestAddendum = manifestAddendum
            self.validateOnly = validateOnly
        }

        private enum CodingKeys: String, CodingKey {
            case aPIVersion = "APIVersion"
            case manifest = "Manifest"
            case jobType = "JobType"
            case manifestAddendum = "ManifestAddendum"
            case validateOnly = "ValidateOnly"
        }
    }

    public struct UpdateJobInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APIVersion", required: false, type: .string), 
            AWSShapeMember(label: "Manifest", required: true, type: .string), 
            AWSShapeMember(label: "JobType", required: true, type: .enum), 
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "ValidateOnly", required: true, type: .boolean)
        ]
        public let aPIVersion: String?
        public let manifest: String
        public let jobType: JobType
        public let jobId: String
        public let validateOnly: Bool

        public init(aPIVersion: String? = nil, manifest: String, jobType: JobType, jobId: String, validateOnly: Bool) {
            self.aPIVersion = aPIVersion
            self.manifest = manifest
            self.jobType = jobType
            self.jobId = jobId
            self.validateOnly = validateOnly
        }

        private enum CodingKeys: String, CodingKey {
            case aPIVersion = "APIVersion"
            case manifest = "Manifest"
            case jobType = "JobType"
            case jobId = "JobId"
            case validateOnly = "ValidateOnly"
        }
    }

    public struct ListJobsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Jobs", required: false, type: .list)
        ]
        public let isTruncated: Bool?
        public let jobs: [Job]?

        public init(isTruncated: Bool? = nil, jobs: [Job]? = nil) {
            self.isTruncated = isTruncated
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case jobs = "Jobs"
        }
    }

    public struct GetShippingLabelInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APIVersion", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "stateOrProvince", required: false, type: .string), 
            AWSShapeMember(label: "street2", required: false, type: .string), 
            AWSShapeMember(label: "street3", required: false, type: .string), 
            AWSShapeMember(label: "company", required: false, type: .string), 
            AWSShapeMember(label: "city", required: false, type: .string), 
            AWSShapeMember(label: "jobIds", required: true, type: .list), 
            AWSShapeMember(label: "postalCode", required: false, type: .string), 
            AWSShapeMember(label: "country", required: false, type: .string), 
            AWSShapeMember(label: "phoneNumber", required: false, type: .string), 
            AWSShapeMember(label: "street1", required: false, type: .string)
        ]
        public let aPIVersion: String?
        public let name: String?
        public let stateOrProvince: String?
        public let street2: String?
        public let street3: String?
        public let company: String?
        public let city: String?
        public let jobIds: [String]
        public let postalCode: String?
        public let country: String?
        public let phoneNumber: String?
        public let street1: String?

        public init(aPIVersion: String? = nil, name: String? = nil, stateOrProvince: String? = nil, street2: String? = nil, street3: String? = nil, company: String? = nil, city: String? = nil, jobIds: [String], postalCode: String? = nil, country: String? = nil, phoneNumber: String? = nil, street1: String? = nil) {
            self.aPIVersion = aPIVersion
            self.name = name
            self.stateOrProvince = stateOrProvince
            self.street2 = street2
            self.street3 = street3
            self.company = company
            self.city = city
            self.jobIds = jobIds
            self.postalCode = postalCode
            self.country = country
            self.phoneNumber = phoneNumber
            self.street1 = street1
        }

        private enum CodingKeys: String, CodingKey {
            case aPIVersion = "APIVersion"
            case name = "name"
            case stateOrProvince = "stateOrProvince"
            case street2 = "street2"
            case street3 = "street3"
            case company = "company"
            case city = "city"
            case jobIds = "jobIds"
            case postalCode = "postalCode"
            case country = "country"
            case phoneNumber = "phoneNumber"
            case street1 = "street1"
        }
    }

    public struct CancelJobOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Success", required: false, type: .boolean)
        ]
        public let success: Bool?

        public init(success: Bool? = nil) {
            self.success = success
        }

        private enum CodingKeys: String, CodingKey {
            case success = "Success"
        }
    }

    public struct UpdateJobOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Success", required: false, type: .boolean), 
            AWSShapeMember(label: "WarningMessage", required: false, type: .string), 
            AWSShapeMember(label: "ArtifactList", required: false, type: .list)
        ]
        public let success: Bool?
        public let warningMessage: String?
        public let artifactList: [Artifact]?

        public init(success: Bool? = nil, warningMessage: String? = nil, artifactList: [Artifact]? = nil) {
            self.success = success
            self.warningMessage = warningMessage
            self.artifactList = artifactList
        }

        private enum CodingKeys: String, CodingKey {
            case success = "Success"
            case warningMessage = "WarningMessage"
            case artifactList = "ArtifactList"
        }
    }

    public struct GetShippingLabelOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShippingLabelURL", required: false, type: .string), 
            AWSShapeMember(label: "Warning", required: false, type: .string)
        ]
        public let shippingLabelURL: String?
        public let warning: String?

        public init(shippingLabelURL: String? = nil, warning: String? = nil) {
            self.shippingLabelURL = shippingLabelURL
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case shippingLabelURL = "ShippingLabelURL"
            case warning = "Warning"
        }
    }

    public struct Job: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsCanceled", required: false, type: .boolean), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "JobType", required: false, type: .enum), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp)
        ]
        public let isCanceled: Bool?
        public let jobId: String?
        public let jobType: JobType?
        public let creationDate: TimeStamp?

        public init(isCanceled: Bool? = nil, jobId: String? = nil, jobType: JobType? = nil, creationDate: TimeStamp? = nil) {
            self.isCanceled = isCanceled
            self.jobId = jobId
            self.jobType = jobType
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case isCanceled = "IsCanceled"
            case jobId = "JobId"
            case jobType = "JobType"
            case creationDate = "CreationDate"
        }
    }

    public struct ListJobsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxJobs", required: false, type: .integer), 
            AWSShapeMember(label: "APIVersion", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        public let maxJobs: Int32?
        public let aPIVersion: String?
        public let marker: String?

        public init(maxJobs: Int32? = nil, aPIVersion: String? = nil, marker: String? = nil) {
            self.maxJobs = maxJobs
            self.aPIVersion = aPIVersion
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxJobs = "MaxJobs"
            case aPIVersion = "APIVersion"
            case marker = "Marker"
        }
    }

    public enum JobType: String, CustomStringConvertible, Codable {
        case `import` = "Import"
        case export = "Export"
        public var description: String { return self.rawValue }
    }

    public struct CancelJobInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "APIVersion", required: false, type: .string)
        ]
        public let jobId: String
        public let aPIVersion: String?

        public init(jobId: String, aPIVersion: String? = nil) {
            self.jobId = jobId
            self.aPIVersion = aPIVersion
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case aPIVersion = "APIVersion"
        }
    }

    public struct GetStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogKey", required: false, type: .string), 
            AWSShapeMember(label: "ProgressCode", required: false, type: .string), 
            AWSShapeMember(label: "LogBucket", required: false, type: .string), 
            AWSShapeMember(label: "LocationMessage", required: false, type: .string), 
            AWSShapeMember(label: "ArtifactList", required: false, type: .list), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "CurrentManifest", required: false, type: .string), 
            AWSShapeMember(label: "Carrier", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TrackingNumber", required: false, type: .string), 
            AWSShapeMember(label: "LocationCode", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCount", required: false, type: .integer), 
            AWSShapeMember(label: "JobType", required: false, type: .enum), 
            AWSShapeMember(label: "SignatureFileContents", required: false, type: .string), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "ProgressMessage", required: false, type: .string)
        ]
        public let logKey: String?
        public let progressCode: String?
        public let logBucket: String?
        public let locationMessage: String?
        public let artifactList: [Artifact]?
        public let jobId: String?
        public let currentManifest: String?
        public let carrier: String?
        public let creationDate: TimeStamp?
        public let trackingNumber: String?
        public let locationCode: String?
        public let errorCount: Int32?
        public let jobType: JobType?
        public let signatureFileContents: String?
        public let signature: String?
        public let progressMessage: String?

        public init(logKey: String? = nil, progressCode: String? = nil, logBucket: String? = nil, locationMessage: String? = nil, artifactList: [Artifact]? = nil, jobId: String? = nil, currentManifest: String? = nil, carrier: String? = nil, creationDate: TimeStamp? = nil, trackingNumber: String? = nil, locationCode: String? = nil, errorCount: Int32? = nil, jobType: JobType? = nil, signatureFileContents: String? = nil, signature: String? = nil, progressMessage: String? = nil) {
            self.logKey = logKey
            self.progressCode = progressCode
            self.logBucket = logBucket
            self.locationMessage = locationMessage
            self.artifactList = artifactList
            self.jobId = jobId
            self.currentManifest = currentManifest
            self.carrier = carrier
            self.creationDate = creationDate
            self.trackingNumber = trackingNumber
            self.locationCode = locationCode
            self.errorCount = errorCount
            self.jobType = jobType
            self.signatureFileContents = signatureFileContents
            self.signature = signature
            self.progressMessage = progressMessage
        }

        private enum CodingKeys: String, CodingKey {
            case logKey = "LogKey"
            case progressCode = "ProgressCode"
            case logBucket = "LogBucket"
            case locationMessage = "LocationMessage"
            case artifactList = "ArtifactList"
            case jobId = "JobId"
            case currentManifest = "CurrentManifest"
            case carrier = "Carrier"
            case creationDate = "CreationDate"
            case trackingNumber = "TrackingNumber"
            case locationCode = "LocationCode"
            case errorCount = "ErrorCount"
            case jobType = "JobType"
            case signatureFileContents = "SignatureFileContents"
            case signature = "Signature"
            case progressMessage = "ProgressMessage"
        }
    }

    public struct CreateJobOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobType", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "WarningMessage", required: false, type: .string), 
            AWSShapeMember(label: "SignatureFileContents", required: false, type: .string), 
            AWSShapeMember(label: "ArtifactList", required: false, type: .list), 
            AWSShapeMember(label: "Signature", required: false, type: .string)
        ]
        public let jobType: JobType?
        public let jobId: String?
        public let warningMessage: String?
        public let signatureFileContents: String?
        public let artifactList: [Artifact]?
        public let signature: String?

        public init(jobType: JobType? = nil, jobId: String? = nil, warningMessage: String? = nil, signatureFileContents: String? = nil, artifactList: [Artifact]? = nil, signature: String? = nil) {
            self.jobType = jobType
            self.jobId = jobId
            self.warningMessage = warningMessage
            self.signatureFileContents = signatureFileContents
            self.artifactList = artifactList
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case jobType = "JobType"
            case jobId = "JobId"
            case warningMessage = "WarningMessage"
            case signatureFileContents = "SignatureFileContents"
            case artifactList = "ArtifactList"
            case signature = "Signature"
        }
    }

    public struct GetStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "APIVersion", required: false, type: .string)
        ]
        public let jobId: String
        public let aPIVersion: String?

        public init(jobId: String, aPIVersion: String? = nil) {
            self.jobId = jobId
            self.aPIVersion = aPIVersion
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case aPIVersion = "APIVersion"
        }
    }

}