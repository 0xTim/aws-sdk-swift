// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension S3 {

    public struct DeleteBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket from which an analytics configuration is deleted.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public enum InventoryOptionalField: String, CustomStringConvertible, Codable {
        case size = "Size"
        case lastmodifieddate = "LastModifiedDate"
        case storageclass = "StorageClass"
        case etag = "ETag"
        case ismultipartuploaded = "IsMultipartUploaded"
        case replicationstatus = "ReplicationStatus"
        case encryptionstatus = "EncryptionStatus"
        case objectlockretainuntildate = "ObjectLockRetainUntilDate"
        case objectlockmode = "ObjectLockMode"
        case objectlocklegalholdstatus = "ObjectLockLegalHoldStatus"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExpiredObjectDeleteMarker", required: false, type: .boolean)
        ]
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public let expiredObjectDeleteMarker: Bool?

        public init(days: Int32? = nil, date: TimeStamp? = nil, expiredObjectDeleteMarker: Bool? = nil) {
            self.days = days
            self.date = date
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
        }

        private enum CodingKeys: String, CodingKey {
            case days = "Days"
            case date = "Date"
            case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "NoncurrentVersionTransition", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure), 
            AWSShapeMember(label: "Transition", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure), 
            AWSShapeMember(label: "ID", required: false, type: .string)
        ]
        public let expiration: LifecycleExpiration?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let noncurrentVersionTransition: NoncurrentVersionTransition?
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let transition: Transition?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?

        public init(expiration: LifecycleExpiration? = nil, status: ExpirationStatus, noncurrentVersionTransition: NoncurrentVersionTransition? = nil, prefix: String, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, transition: Transition? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, id: String? = nil) {
            self.expiration = expiration
            self.status = status
            self.noncurrentVersionTransition = noncurrentVersionTransition
            self.prefix = prefix
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.transition = transition
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "Expiration"
            case status = "Status"
            case noncurrentVersionTransition = "NoncurrentVersionTransition"
            case prefix = "Prefix"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case transition = "Transition"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case id = "ID"
        }
    }

    public struct GlacierJobParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tier", required: true, type: .enum)
        ]
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier

        public init(tier: Tier) {
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case tier = "Tier"
        }
    }

    public struct PutObjectLegalHoldOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct GetBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum ObjectStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        public var description: String { return self.rawValue }
    }

    public struct ReplicationRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "SourceSelectionCriteria", required: false, type: .structure), 
            AWSShapeMember(label: "DeleteMarkerReplication", required: false, type: .structure), 
            AWSShapeMember(label: "ID", required: false, type: .string)
        ]
        /// A container for information about the replication destination.
        public let destination: Destination
        public let filter: ReplicationRuleFilter?
        /// If status isn't enabled, the rule is ignored.
        public let status: ReplicationRuleStatus
        /// The priority associated with the rule. If you specify multiple rules in a replication configuration, Amazon S3 prioritizes the rules to prevent conflicts when filtering. If two or more rules identify the same object based on a specified filter, the rule with higher priority takes precedence. For example:   Same object quality prefix based filter criteria If prefixes you specified in multiple rules overlap    Same object qualify tag based filter criteria specified in multiple rules   For more information, see Cross-Region Replication (CRR) in the Amazon S3 Developer Guide.
        public let priority: Int32?
        /// An object keyname prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. 
        public let prefix: String?
        /// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using an AWS KMS-Managed Key (SSE-KMS).   If you want Amazon S3 to replicate objects created with server-side encryption using AWS KMS-Managed Keys. 
        public let sourceSelectionCriteria: SourceSelectionCriteria?
        public let deleteMarkerReplication: DeleteMarkerReplication?
        /// A unique identifier for the rule. The maximum value is 255 characters.
        public let id: String?

        public init(destination: Destination, filter: ReplicationRuleFilter? = nil, status: ReplicationRuleStatus, priority: Int32? = nil, prefix: String? = nil, sourceSelectionCriteria: SourceSelectionCriteria? = nil, deleteMarkerReplication: DeleteMarkerReplication? = nil, id: String? = nil) {
            self.destination = destination
            self.filter = filter
            self.status = status
            self.priority = priority
            self.prefix = prefix
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.deleteMarkerReplication = deleteMarkerReplication
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case filter = "Filter"
            case status = "Status"
            case priority = "Priority"
            case prefix = "Prefix"
            case sourceSelectionCriteria = "SourceSelectionCriteria"
            case deleteMarkerReplication = "DeleteMarkerReplication"
            case id = "ID"
        }
    }

    public struct MultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Initiated", required: false, type: .timestamp)
        ]
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        public let owner: Owner?
        /// Upload ID that identifies the multipart upload.
        public let uploadId: String?
        /// Key of the object for which the multipart upload was initiated.
        public let key: String?
        /// Date and time at which the multipart upload was initiated.
        public let initiated: TimeStamp?

        public init(initiator: Initiator? = nil, storageClass: StorageClass? = nil, owner: Owner? = nil, uploadId: String? = nil, key: String? = nil, initiated: TimeStamp? = nil) {
            self.initiator = initiator
            self.storageClass = storageClass
            self.owner = owner
            self.uploadId = uploadId
            self.key = key
            self.initiated = initiated
        }

        private enum CodingKeys: String, CodingKey {
            case initiator = "Initiator"
            case storageClass = "StorageClass"
            case owner = "Owner"
            case uploadId = "UploadId"
            case key = "Key"
            case initiated = "Initiated"
        }
    }

    public struct GetObjectLockConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ObjectLockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockConfiguration", required: false, type: .structure)
        ]
        /// The specified bucket's Object Lock configuration.
        public let objectLockConfiguration: ObjectLockConfiguration?

        public init(objectLockConfiguration: ObjectLockConfiguration? = nil) {
            self.objectLockConfiguration = objectLockConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockConfiguration = "ObjectLockConfiguration"
        }
    }

    public struct Grant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grantee", required: false, type: .structure), 
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        public let grantee: Grantee?
        /// Specifies the permission given to the grantee.
        public let permission: Permission?

        public init(grantee: Grantee? = nil, permission: Permission? = nil) {
            self.grantee = grantee
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case grantee = "Grantee"
            case permission = "Permission"
        }
    }

    public struct AbortIncompleteMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DaysAfterInitiation", required: false, type: .integer)
        ]
        /// Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
        public let daysAfterInitiation: Int32?

        public init(daysAfterInitiation: Int32? = nil) {
            self.daysAfterInitiation = daysAfterInitiation
        }

        private enum CodingKeys: String, CodingKey {
            case daysAfterInitiation = "DaysAfterInitiation"
        }
    }

    public enum InventoryIncludedObjectVersions: String, CustomStringConvertible, Codable {
        case all = "All"
        case current = "Current"
        public var description: String { return self.rawValue }
    }

    public struct PutPublicAccessBlockRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicAccessBlockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "PublicAccessBlockConfiguration", location: .body(locationName: "PublicAccessBlockConfiguration"), required: true, type: .structure)
        ]
        /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to set.
        public let bucket: String
        /// The MD5 hash of the PutPublicAccessBlock request body. 
        public let contentMD5: String?
        /// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see The Meaning of "Public" in the Amazon Simple Storage Service Developer Guide.
        public let publicAccessBlockConfiguration: PublicAccessBlockConfiguration

        public init(bucket: String, contentMD5: String? = nil, publicAccessBlockConfiguration: PublicAccessBlockConfiguration) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
        }
    }

    public struct CompleteMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MultipartUpload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "MultipartUpload", location: .body(locationName: "CompleteMultipartUpload"), required: false, type: .structure), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        public let bucket: String
        public let uploadId: String
        public let multipartUpload: CompletedMultipartUpload?
        public let requestPayer: RequestPayer?
        public let key: String

        public init(bucket: String, uploadId: String, multipartUpload: CompletedMultipartUpload? = nil, requestPayer: RequestPayer? = nil, key: String) {
            self.bucket = bucket
            self.uploadId = uploadId
            self.multipartUpload = multipartUpload
            self.requestPayer = requestPayer
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case uploadId = "uploadId"
            case multipartUpload = "CompleteMultipartUpload"
            case requestPayer = "x-amz-request-payer"
            case key = "Key"
        }
    }

    public struct FilterRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .enum)
        ]
        public let value: String?
        /// The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum prefix length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see Configuring Event Notifications in the Amazon Simple Storage Service Developer Guide.
        public let name: FilterRuleName?

        public init(value: String? = nil, name: FilterRuleName? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct DeleteBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct LoggingEnabled: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGrants", required: false, type: .structure), 
            AWSShapeMember(label: "TargetBucket", required: true, type: .string), 
            AWSShapeMember(label: "TargetPrefix", required: true, type: .string)
        ]
        public let targetGrants: TargetGrants?
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        public let targetBucket: String
        /// This element lets you specify a prefix for the keys that the log files will be stored under.
        public let targetPrefix: String

        public init(targetGrants: TargetGrants? = nil, targetBucket: String, targetPrefix: String) {
            self.targetGrants = targetGrants
            self.targetBucket = targetBucket
            self.targetPrefix = targetPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case targetGrants = "TargetGrants"
            case targetBucket = "TargetBucket"
            case targetPrefix = "TargetPrefix"
        }
    }

    public struct SseKmsEncryptedObjects: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .enum)
        ]
        ///  If the status is not Enabled, replication for S3 objects encrypted with AWS KMS is disabled.
        public let status: SseKmsEncryptedObjectsStatus

        public init(status: SseKmsEncryptedObjectsStatus) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct GetPublicAccessBlockOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicAccessBlockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicAccessBlockConfiguration", required: false, type: .structure)
        ]
        /// The PublicAccessBlock configuration currently in effect for this Amazon S3 bucket.
        public let publicAccessBlockConfiguration: PublicAccessBlockConfiguration?

        public init(publicAccessBlockConfiguration: PublicAccessBlockConfiguration? = nil) {
            self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
        }
    }

    public struct ParquetInput: AWSShape {

    }

    public struct GetObjectLegalHoldOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LegalHold"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LegalHold", required: false, type: .structure)
        ]
        /// The current Legal Hold status for the specified object.
        public let legalHold: ObjectLockLegalHold?

        public init(legalHold: ObjectLockLegalHold? = nil) {
            self.legalHold = legalHold
        }

        private enum CodingKeys: String, CodingKey {
            case legalHold = "LegalHold"
        }
    }

    public enum DeleteMarkerReplicationStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum MFADeleteStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum ReplicationStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case pending = "PENDING"
        case failed = "FAILED"
        case replica = "REPLICA"
        public var description: String { return self.rawValue }
    }

    public struct VersioningConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum)
        ]
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADelete?

        public init(status: BucketVersioningStatus? = nil, mFADelete: MFADelete? = nil) {
            self.status = status
            self.mFADelete = mFADelete
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case mFADelete = "MfaDelete"
        }
    }

    public struct GetObjectAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let bucket: String
        public let key: String
        public let requestPayer: RequestPayer?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?

        public init(bucket: String, key: String, requestPayer: RequestPayer? = nil, versionId: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
        }
    }

    public struct DeleteBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum EncodingType: String, CustomStringConvertible, Codable {
        case url = "url"
        public var description: String { return self.rawValue }
    }

    public struct RedirectAllRequestsTo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostName", required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum)
        ]
        /// Name of the host where requests will be redirected.
        public let hostName: String
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?

        public init(hostName: String, protocol: Protocol? = nil) {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case hostName = "HostName"
            case `protocol` = "Protocol"
        }
    }

    public struct PutBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let tagging: Tagging
        public let contentMD5: String?

        public init(bucket: String, tagging: Tagging, contentMD5: String? = nil) {
            self.bucket = bucket
            self.tagging = tagging
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case tagging = "Tagging"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct DeleteMarkerEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        public let owner: Owner?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?
        /// The object key.
        public let key: String?
        /// Version ID of an object.
        public let versionId: String?

        public init(isLatest: Bool? = nil, owner: Owner? = nil, lastModified: TimeStamp? = nil, key: String? = nil, versionId: String? = nil) {
            self.isLatest = isLatest
            self.owner = owner
            self.lastModified = lastModified
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case isLatest = "IsLatest"
            case owner = "Owner"
            case lastModified = "LastModified"
            case key = "Key"
            case versionId = "VersionId"
        }
    }

    public struct GetBucketLocationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct HeadBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutBucketLoggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BucketLoggingStatus"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "BucketLoggingStatus", location: .body(locationName: "BucketLoggingStatus"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let bucketLoggingStatus: BucketLoggingStatus
        public let contentMD5: String?

        public init(bucket: String, bucketLoggingStatus: BucketLoggingStatus, contentMD5: String? = nil) {
            self.bucket = bucket
            self.bucketLoggingStatus = bucketLoggingStatus
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case bucketLoggingStatus = "BucketLoggingStatus"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct AnalyticsExportDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// A destination signifying output to an S3 bucket.
        public let s3BucketDestination: AnalyticsS3BucketDestination

        public init(s3BucketDestination: AnalyticsS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public struct GetBucketLifecycleConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DefaultRetention: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "Years", required: false, type: .integer), 
            AWSShapeMember(label: "Days", required: false, type: .integer)
        ]
        /// The default Object Lock retention mode you want to apply to new objects placed in the specified bucket.
        public let mode: ObjectLockRetentionMode?
        /// The number of years that you want to specify for the default retention period.
        public let years: Int32?
        /// The number of days that you want to specify for the default retention period.
        public let days: Int32?

        public init(mode: ObjectLockRetentionMode? = nil, years: Int32? = nil, days: Int32? = nil) {
            self.mode = mode
            self.years = years
            self.days = days
        }

        private enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case years = "Years"
            case days = "Days"
        }
    }

    public struct SSES3: AWSShape {

    }

    public struct CopyPartResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        /// Entity tag of the object.
        public let eTag: String?
        /// Date and time at which the object was uploaded.
        public let lastModified: TimeStamp?

        public init(eTag: String? = nil, lastModified: TimeStamp? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case lastModified = "LastModified"
        }
    }

    public struct ServerSideEncryptionByDefault: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSEAlgorithm", required: true, type: .enum), 
            AWSShapeMember(label: "KMSMasterKeyID", required: false, type: .string)
        ]
        /// Server-side encryption algorithm to use for the default encryption.
        public let sSEAlgorithm: ServerSideEncryption
        /// KMS master key ID to use for the default encryption. This parameter is allowed if SSEAlgorithm is aws:kms.
        public let kMSMasterKeyID: String?

        public init(sSEAlgorithm: ServerSideEncryption, kMSMasterKeyID: String? = nil) {
            self.sSEAlgorithm = sSEAlgorithm
            self.kMSMasterKeyID = kMSMasterKeyID
        }

        private enum CodingKeys: String, CodingKey {
            case sSEAlgorithm = "SSEAlgorithm"
            case kMSMasterKeyID = "KMSMasterKeyID"
        }
    }

    public struct PutObjectAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string)
        ]
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        public let key: String
        public let accessControlPolicy: AccessControlPolicy?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        public let contentMD5: String?
        public let requestPayer: RequestPayer?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        public let bucket: String
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?

        public init(grantFullControl: String? = nil, key: String, accessControlPolicy: AccessControlPolicy? = nil, grantReadACP: String? = nil, contentMD5: String? = nil, requestPayer: RequestPayer? = nil, grantRead: String? = nil, grantWrite: String? = nil, acl: ObjectCannedACL? = nil, bucket: String, versionId: String? = nil, grantWriteACP: String? = nil) {
            self.grantFullControl = grantFullControl
            self.key = key
            self.accessControlPolicy = accessControlPolicy
            self.grantReadACP = grantReadACP
            self.contentMD5 = contentMD5
            self.requestPayer = requestPayer
            self.grantRead = grantRead
            self.grantWrite = grantWrite
            self.acl = acl
            self.bucket = bucket
            self.versionId = versionId
            self.grantWriteACP = grantWriteACP
        }

        private enum CodingKeys: String, CodingKey {
            case grantFullControl = "x-amz-grant-full-control"
            case key = "Key"
            case accessControlPolicy = "AccessControlPolicy"
            case grantReadACP = "x-amz-grant-read-acp"
            case contentMD5 = "Content-MD5"
            case requestPayer = "x-amz-request-payer"
            case grantRead = "x-amz-grant-read"
            case grantWrite = "x-amz-grant-write"
            case acl = "x-amz-acl"
            case bucket = "Bucket"
            case versionId = "versionId"
            case grantWriteACP = "x-amz-grant-write-acp"
        }
    }

    public struct CORSRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedHeaders", location: .body(locationName: "AllowedHeader"), required: false, type: .list), 
            AWSShapeMember(label: "ExposeHeaders", location: .body(locationName: "ExposeHeader"), required: false, type: .list), 
            AWSShapeMember(label: "MaxAgeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "AllowedOrigins", location: .body(locationName: "AllowedOrigin"), required: true, type: .list), 
            AWSShapeMember(label: "AllowedMethods", location: .body(locationName: "AllowedMethod"), required: true, type: .list)
        ]
        /// Specifies which headers are allowed in a pre-flight OPTIONS request.
        public let allowedHeaders: [String]?
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public let exposeHeaders: [String]?
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public let maxAgeSeconds: Int32?
        /// One or more origins you want customers to be able to access the bucket from.
        public let allowedOrigins: [String]
        /// Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
        public let allowedMethods: [String]

        public init(allowedHeaders: [String]? = nil, exposeHeaders: [String]? = nil, maxAgeSeconds: Int32? = nil, allowedOrigins: [String], allowedMethods: [String]) {
            self.allowedHeaders = allowedHeaders
            self.exposeHeaders = exposeHeaders
            self.maxAgeSeconds = maxAgeSeconds
            self.allowedOrigins = allowedOrigins
            self.allowedMethods = allowedMethods
        }

        private enum CodingKeys: String, CodingKey {
            case allowedHeaders = "AllowedHeader"
            case exposeHeaders = "ExposeHeader"
            case maxAgeSeconds = "MaxAgeSeconds"
            case allowedOrigins = "AllowedOrigin"
            case allowedMethods = "AllowedMethod"
        }
    }

    public struct DeleteBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct StatsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Stats event details.
        public let details: Stats?

        public init(details: Stats? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct HeadObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        public let bucket: String
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
        public let partNumber: Int32?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        public let key: String
        public let requestPayer: RequestPayer?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?

        public init(sSECustomerKeyMD5: String? = nil, bucket: String, ifModifiedSince: TimeStamp? = nil, versionId: String? = nil, sSECustomerAlgorithm: String? = nil, range: String? = nil, partNumber: Int32? = nil, ifNoneMatch: String? = nil, sSECustomerKey: String? = nil, key: String, requestPayer: RequestPayer? = nil, ifUnmodifiedSince: TimeStamp? = nil, ifMatch: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.bucket = bucket
            self.ifModifiedSince = ifModifiedSince
            self.versionId = versionId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.range = range
            self.partNumber = partNumber
            self.ifNoneMatch = ifNoneMatch
            self.sSECustomerKey = sSECustomerKey
            self.key = key
            self.requestPayer = requestPayer
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case bucket = "Bucket"
            case ifModifiedSince = "If-Modified-Since"
            case versionId = "versionId"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case range = "Range"
            case partNumber = "partNumber"
            case ifNoneMatch = "If-None-Match"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case ifMatch = "If-Match"
        }
    }

    public struct AnalyticsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "StorageClassAnalysis", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public let filter: AnalyticsFilter?
        /// If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes.
        public let storageClassAnalysis: StorageClassAnalysis
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(filter: AnalyticsFilter? = nil, storageClassAnalysis: StorageClassAnalysis, id: String) {
            self.filter = filter
            self.storageClassAnalysis = storageClassAnalysis
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case storageClassAnalysis = "StorageClassAnalysis"
            case id = "Id"
        }
    }

    public struct SelectObjectContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "RequestProgress", required: false, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Expression", required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum), 
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure)
        ]
        /// Describes the format of the data in the object that is being queried.
        public let inputSerialization: InputSerialization
        /// Specifies if periodic request progress information should be enabled.
        public let requestProgress: RequestProgress?
        /// The object key.
        public let key: String
        /// The SSE Customer Key MD5. For more information, see  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerKeyMD5: String?
        /// The SSE Algorithm used to encrypt the object. For more information, see  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerAlgorithm: String?
        /// The SSE Customer Key. For more information, see  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerKey: String?
        /// The expression that is used to query the object.
        public let expression: String
        /// The S3 bucket.
        public let bucket: String
        /// The type of the provided expression (for example., SQL).
        public let expressionType: ExpressionType
        /// Describes the format of the data that you want Amazon S3 to return in response.
        public let outputSerialization: OutputSerialization

        public init(inputSerialization: InputSerialization, requestProgress: RequestProgress? = nil, key: String, sSECustomerKeyMD5: String? = nil, sSECustomerAlgorithm: String? = nil, sSECustomerKey: String? = nil, expression: String, bucket: String, expressionType: ExpressionType, outputSerialization: OutputSerialization) {
            self.inputSerialization = inputSerialization
            self.requestProgress = requestProgress
            self.key = key
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSECustomerKey = sSECustomerKey
            self.expression = expression
            self.bucket = bucket
            self.expressionType = expressionType
            self.outputSerialization = outputSerialization
        }

        private enum CodingKeys: String, CodingKey {
            case inputSerialization = "InputSerialization"
            case requestProgress = "RequestProgress"
            case key = "Key"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case expression = "Expression"
            case bucket = "Bucket"
            case expressionType = "ExpressionType"
            case outputSerialization = "OutputSerialization"
        }
    }

    public struct GetBucketLocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ObjectLockRetention: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "RetainUntilDate", required: false, type: .timestamp)
        ]
        /// Indicates the Retention mode for the specified object.
        public let mode: ObjectLockRetentionMode?
        /// The date on which this Object Lock Retention will expire.
        public let retainUntilDate: TimeStamp?

        public init(mode: ObjectLockRetentionMode? = nil, retainUntilDate: TimeStamp? = nil) {
            self.mode = mode
            self.retainUntilDate = retainUntilDate
        }

        private enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case retainUntilDate = "RetainUntilDate"
        }
    }

    public struct PutObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string)
        ]
        /// The Legal Hold status that you want to apply to the specified object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Name of the bucket to which the PUT operation was initiated.
        public let bucket: String
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let requestPayer: RequestPayer?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, "Key1=Value1")
        public let tagging: String?
        /// The Object Lock mode that you want to apply to this object.
        public let objectLockMode: ObjectLockMode?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// The date and time when you want this object's Object Lock to expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// Object data.
        public let body: Data?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// Object key for which the PUT operation was initiated.
        public let key: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?

        public init(objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, acl: ObjectCannedACL? = nil, grantFullControl: String? = nil, metadata: [String: String]? = nil, grantRead: String? = nil, contentLanguage: String? = nil, websiteRedirectLocation: String? = nil, bucket: String, sSECustomerAlgorithm: String? = nil, requestPayer: RequestPayer? = nil, contentEncoding: String? = nil, storageClass: StorageClass? = nil, contentDisposition: String? = nil, tagging: String? = nil, objectLockMode: ObjectLockMode? = nil, sSECustomerKeyMD5: String? = nil, grantReadACP: String? = nil, grantWriteACP: String? = nil, cacheControl: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, contentLength: Int64? = nil, objectLockRetainUntilDate: TimeStamp? = nil, body: Data? = nil, contentMD5: String? = nil, expires: TimeStamp? = nil, key: String, sSECustomerKey: String? = nil, contentType: String? = nil, sSEKMSKeyId: String? = nil) {
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.acl = acl
            self.grantFullControl = grantFullControl
            self.metadata = metadata
            self.grantRead = grantRead
            self.contentLanguage = contentLanguage
            self.websiteRedirectLocation = websiteRedirectLocation
            self.bucket = bucket
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestPayer = requestPayer
            self.contentEncoding = contentEncoding
            self.storageClass = storageClass
            self.contentDisposition = contentDisposition
            self.tagging = tagging
            self.objectLockMode = objectLockMode
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.grantReadACP = grantReadACP
            self.grantWriteACP = grantWriteACP
            self.cacheControl = cacheControl
            self.serverSideEncryption = serverSideEncryption
            self.contentLength = contentLength
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.body = body
            self.contentMD5 = contentMD5
            self.expires = expires
            self.key = key
            self.sSECustomerKey = sSECustomerKey
            self.contentType = contentType
            self.sSEKMSKeyId = sSEKMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case acl = "x-amz-acl"
            case grantFullControl = "x-amz-grant-full-control"
            case metadata = "Metadata"
            case grantRead = "x-amz-grant-read"
            case contentLanguage = "Content-Language"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case bucket = "Bucket"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestPayer = "x-amz-request-payer"
            case contentEncoding = "Content-Encoding"
            case storageClass = "x-amz-storage-class"
            case contentDisposition = "Content-Disposition"
            case tagging = "x-amz-tagging"
            case objectLockMode = "x-amz-object-lock-mode"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case grantReadACP = "x-amz-grant-read-acp"
            case grantWriteACP = "x-amz-grant-write-acp"
            case cacheControl = "Cache-Control"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case contentLength = "Content-Length"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case body = "Body"
            case contentMD5 = "Content-MD5"
            case expires = "Expires"
            case key = "Key"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case contentType = "Content-Type"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
        }
    }

    public struct DeleteMarkerReplication: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The status of the delete marker replication.   In the current implementation, Amazon S3 doesn't replicate the delete markers. The status must be Disabled.  
        public let status: DeleteMarkerReplicationStatus?

        public init(status: DeleteMarkerReplicationStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct GetBucketVersioningOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum)
        ]
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADeleteStatus?

        public init(status: BucketVersioningStatus? = nil, mFADelete: MFADeleteStatus? = nil) {
            self.status = status
            self.mFADelete = mFADelete
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case mFADelete = "MfaDelete"
        }
    }

    public struct GetBucketEncryptionOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", required: false, type: .structure)
        ]
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?

        public init(serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil) {
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        }
    }

    public struct ListBucketMetricsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket containing the metrics configurations to retrieve.
        public let bucket: String
        /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct ListBucketAnalyticsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "AnalyticsConfigurationList", location: .body(locationName: "AnalyticsConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The list of analytics configurations for a bucket.
        public let analyticsConfigurationList: [AnalyticsConfiguration]?
        /// The ContinuationToken that represents where this request began.
        public let continuationToken: String?
        /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
        public let nextContinuationToken: String?

        public init(isTruncated: Bool? = nil, analyticsConfigurationList: [AnalyticsConfiguration]? = nil, continuationToken: String? = nil, nextContinuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.analyticsConfigurationList = analyticsConfigurationList
            self.continuationToken = continuationToken
            self.nextContinuationToken = nextContinuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case analyticsConfigurationList = "AnalyticsConfiguration"
            case continuationToken = "ContinuationToken"
            case nextContinuationToken = "NextContinuationToken"
        }
    }

    public struct CSVInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileHeaderInfo", required: false, type: .enum), 
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string), 
            AWSShapeMember(label: "AllowQuotedRecordDelimiter", required: false, type: .boolean), 
            AWSShapeMember(label: "Comments", required: false, type: .string), 
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string), 
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string)
        ]
        /// Describes the first line of input. Valid values: None, Ignore, Use.
        public let fileHeaderInfo: FileHeaderInfo?
        /// The single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?
        /// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
        public let allowQuotedRecordDelimiter: Bool?
        /// The single character used to indicate a row should be ignored when present at the start of a row.
        public let comments: String?
        /// The value used to separate individual records.
        public let recordDelimiter: String?
        /// Value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// The value used to separate individual fields in a record.
        public let fieldDelimiter: String?

        public init(fileHeaderInfo: FileHeaderInfo? = nil, quoteEscapeCharacter: String? = nil, allowQuotedRecordDelimiter: Bool? = nil, comments: String? = nil, recordDelimiter: String? = nil, quoteCharacter: String? = nil, fieldDelimiter: String? = nil) {
            self.fileHeaderInfo = fileHeaderInfo
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
            self.comments = comments
            self.recordDelimiter = recordDelimiter
            self.quoteCharacter = quoteCharacter
            self.fieldDelimiter = fieldDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case fileHeaderInfo = "FileHeaderInfo"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
            case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
            case comments = "Comments"
            case recordDelimiter = "RecordDelimiter"
            case quoteCharacter = "QuoteCharacter"
            case fieldDelimiter = "FieldDelimiter"
        }
    }

    public struct LifecycleRuleFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// This tag must exist in the object's tag set in order for the rule to apply.
        public let tag: Tag?
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String?
        public let and: LifecycleRuleAndOperator?

        public init(tag: Tag? = nil, prefix: String? = nil, and: LifecycleRuleAndOperator? = nil) {
            self.tag = tag
            self.prefix = prefix
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case prefix = "Prefix"
            case and = "And"
        }
    }

    public struct ReplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list), 
            AWSShapeMember(label: "Role", required: true, type: .string)
        ]
        /// A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules. 
        public let rules: [ReplicationRule]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 can assume when replicating the objects.
        public let role: String

        public init(rules: [ReplicationRule], role: String) {
            self.rules = rules
            self.role = role
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
            case role = "Role"
        }
    }

    public struct ReplicationRuleAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        public let tags: TagSet?
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct PutBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ReplicationConfiguration", location: .body(locationName: "ReplicationConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let replicationConfiguration: ReplicationConfiguration

        public init(bucket: String, contentMD5: String? = nil, replicationConfiguration: ReplicationConfiguration) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public struct PutBucketAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string)
        ]
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        public let accessControlPolicy: AccessControlPolicy?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        public let contentMD5: String?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        public let bucket: String
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?

        public init(grantFullControl: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, grantReadACP: String? = nil, contentMD5: String? = nil, grantRead: String? = nil, grantWrite: String? = nil, acl: BucketCannedACL? = nil, bucket: String, grantWriteACP: String? = nil) {
            self.grantFullControl = grantFullControl
            self.accessControlPolicy = accessControlPolicy
            self.grantReadACP = grantReadACP
            self.contentMD5 = contentMD5
            self.grantRead = grantRead
            self.grantWrite = grantWrite
            self.acl = acl
            self.bucket = bucket
            self.grantWriteACP = grantWriteACP
        }

        private enum CodingKeys: String, CodingKey {
            case grantFullControl = "x-amz-grant-full-control"
            case accessControlPolicy = "AccessControlPolicy"
            case grantReadACP = "x-amz-grant-read-acp"
            case contentMD5 = "Content-MD5"
            case grantRead = "x-amz-grant-read"
            case grantWrite = "x-amz-grant-write"
            case acl = "x-amz-acl"
            case bucket = "Bucket"
            case grantWriteACP = "x-amz-grant-write-acp"
        }
    }

    public struct PutBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsConfiguration", location: .body(locationName: "AnalyticsConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration
        /// The name of the bucket to which an analytics configuration is stored.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(analyticsConfiguration: AnalyticsConfiguration, bucket: String, id: String) {
            self.analyticsConfiguration = analyticsConfiguration
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsConfiguration = "AnalyticsConfiguration"
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public enum OwnerOverride: String, CustomStringConvertible, Codable {
        case destination = "Destination"
        public var description: String { return self.rawValue }
    }

    public enum ObjectLockLegalHoldStatus: String, CustomStringConvertible, Codable {
        case on = "ON"
        case off = "OFF"
        public var description: String { return self.rawValue }
    }

    public struct Part: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", required: false, type: .integer), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?
        /// Date and time at which the part was uploaded.
        public let lastModified: TimeStamp?
        /// Size in bytes of the uploaded part data.
        public let size: Int32?

        public init(eTag: String? = nil, partNumber: Int32? = nil, lastModified: TimeStamp? = nil, size: Int32? = nil) {
            self.eTag = eTag
            self.partNumber = partNumber
            self.lastModified = lastModified
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case partNumber = "PartNumber"
            case lastModified = "LastModified"
            case size = "Size"
        }
    }

    public struct Owner: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        public let id: String?
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct GetObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let key: String
        public let bucket: String
        public let versionId: String?

        public init(key: String, bucket: String, versionId: String? = nil) {
            self.key = key
            self.bucket = bucket
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case versionId = "versionId"
        }
    }

    public struct SelectParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum), 
            AWSShapeMember(label: "Expression", required: true, type: .string), 
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure)
        ]
        /// The type of the provided expression (e.g., SQL).
        public let expressionType: ExpressionType
        /// The expression that is used to query the object.
        public let expression: String
        /// Describes the serialization format of the object.
        public let inputSerialization: InputSerialization
        /// Describes how the results of the Select job are serialized.
        public let outputSerialization: OutputSerialization

        public init(expressionType: ExpressionType, expression: String, inputSerialization: InputSerialization, outputSerialization: OutputSerialization) {
            self.expressionType = expressionType
            self.expression = expression
            self.inputSerialization = inputSerialization
            self.outputSerialization = outputSerialization
        }

        private enum CodingKeys: String, CodingKey {
            case expressionType = "ExpressionType"
            case expression = "Expression"
            case inputSerialization = "InputSerialization"
            case outputSerialization = "OutputSerialization"
        }
    }

    public enum RequestPayer: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketInventoryConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryConfiguration", required: false, type: .structure)
        ]
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration?

        public init(inventoryConfiguration: InventoryConfiguration? = nil) {
            self.inventoryConfiguration = inventoryConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryConfiguration = "InventoryConfiguration"
        }
    }

    public struct RestoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "SelectParameters", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Tier", required: false, type: .enum), 
            AWSShapeMember(label: "GlacierJobParameters", required: false, type: .structure), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Lifetime of the active copy in days. Do not use with restores that specify OutputLocation.
        public let days: Int32?
        /// Describes the parameters for Select job types.
        public let selectParameters: SelectParameters?
        /// Type of restore request.
        public let `type`: RestoreRequestType?
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier?
        /// Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation.
        public let glacierJobParameters: GlacierJobParameters?
        /// Describes the location where the restore job's output is stored.
        public let outputLocation: OutputLocation?
        /// The optional description for the job.
        public let description: String?

        public init(days: Int32? = nil, selectParameters: SelectParameters? = nil, type: RestoreRequestType? = nil, tier: Tier? = nil, glacierJobParameters: GlacierJobParameters? = nil, outputLocation: OutputLocation? = nil, description: String? = nil) {
            self.days = days
            self.selectParameters = selectParameters
            self.`type` = `type`
            self.tier = tier
            self.glacierJobParameters = glacierJobParameters
            self.outputLocation = outputLocation
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case days = "Days"
            case selectParameters = "SelectParameters"
            case `type` = "Type"
            case tier = "Tier"
            case glacierJobParameters = "GlacierJobParameters"
            case outputLocation = "OutputLocation"
            case description = "Description"
        }
    }

    public struct GetBucketAccelerateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket for which the accelerate configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ObjectLockRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultRetention", required: false, type: .structure)
        ]
        /// The default retention period that you want to apply to new objects placed in the specified bucket.
        public let defaultRetention: DefaultRetention?

        public init(defaultRetention: DefaultRetention? = nil) {
            self.defaultRetention = defaultRetention
        }

        private enum CodingKeys: String, CodingKey {
            case defaultRetention = "DefaultRetention"
        }
    }

    public struct ObjectLockConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockEnabled", required: false, type: .enum), 
            AWSShapeMember(label: "Rule", required: false, type: .structure)
        ]
        /// Indicates whether this bucket has an Object Lock configuration enabled.
        public let objectLockEnabled: ObjectLockEnabled?
        /// The Object Lock rule in place for the specified object.
        public let rule: ObjectLockRule?

        public init(objectLockEnabled: ObjectLockEnabled? = nil, rule: ObjectLockRule? = nil) {
            self.objectLockEnabled = objectLockEnabled
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockEnabled = "ObjectLockEnabled"
            case rule = "Rule"
        }
    }

    public struct PutObjectLockConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct TopicConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "TopicArn", location: .body(locationName: "Topic"), required: true, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list)
        ]
        public let id: String?
        public let filter: NotificationConfigurationFilter?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 will publish a message when it detects events of the specified type.
        public let topicArn: String
        public let events: [Event]

        public init(id: String? = nil, filter: NotificationConfigurationFilter? = nil, topicArn: String, events: [Event]) {
            self.id = id
            self.filter = filter
            self.topicArn = topicArn
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
            case topicArn = "Topic"
            case events = "Event"
        }
    }

    public struct ListPartsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MaxParts", location: .querystring(locationName: "max-parts"), required: false, type: .integer), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "PartNumberMarker", location: .querystring(locationName: "part-number-marker"), required: false, type: .integer), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        /// Sets the maximum number of parts to return.
        public let maxParts: Int32?
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String
        public let key: String
        /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
        public let partNumberMarker: Int32?
        public let requestPayer: RequestPayer?

        public init(bucket: String, maxParts: Int32? = nil, uploadId: String, key: String, partNumberMarker: Int32? = nil, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.maxParts = maxParts
            self.uploadId = uploadId
            self.key = key
            self.partNumberMarker = partNumberMarker
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxParts = "max-parts"
            case uploadId = "uploadId"
            case key = "Key"
            case partNumberMarker = "part-number-marker"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct UploadPartCopyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string), 
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceRange", location: .header(locationName: "x-amz-copy-source-range"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string)
        ]
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Upload ID identifying the multipart upload whose part is being copied.
        public let uploadId: String
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?
        /// Part number of part being copied. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        public let key: String
        public let requestPayer: RequestPayer?
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first ten bytes of the source. You can copy a range only if the source object is greater than 5 GB.
        public let copySourceRange: String?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?

        public init(sSECustomerKeyMD5: String? = nil, copySourceIfModifiedSince: TimeStamp? = nil, bucket: String, copySourceSSECustomerKey: String? = nil, copySourceSSECustomerAlgorithm: String? = nil, uploadId: String, sSECustomerAlgorithm: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil, partNumber: Int32, copySourceSSECustomerKeyMD5: String? = nil, sSECustomerKey: String? = nil, key: String, requestPayer: RequestPayer? = nil, copySource: String, copySourceIfNoneMatch: String? = nil, copySourceRange: String? = nil, copySourceIfMatch: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.bucket = bucket
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.uploadId = uploadId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.partNumber = partNumber
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.sSECustomerKey = sSECustomerKey
            self.key = key
            self.requestPayer = requestPayer
            self.copySource = copySource
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.copySourceRange = copySourceRange
            self.copySourceIfMatch = copySourceIfMatch
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case bucket = "Bucket"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case uploadId = "uploadId"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
            case partNumber = "partNumber"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case copySource = "x-amz-copy-source"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case copySourceRange = "x-amz-copy-source-range"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
        }
    }

    public struct Transition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "Days", required: false, type: .integer)
        ]
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?

        public init(storageClass: TransitionStorageClass? = nil, date: TimeStamp? = nil, days: Int32? = nil) {
            self.storageClass = storageClass
            self.date = date
            self.days = days
        }

        private enum CodingKeys: String, CodingKey {
            case storageClass = "StorageClass"
            case date = "Date"
            case days = "Days"
        }
    }

    public struct Stats: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesReturned", required: false, type: .long), 
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long), 
            AWSShapeMember(label: "BytesScanned", required: false, type: .long)
        ]
        /// The total number of bytes of records payload data returned.
        public let bytesReturned: Int64?
        /// The total number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?
        /// The total number of object bytes scanned.
        public let bytesScanned: Int64?

        public init(bytesReturned: Int64? = nil, bytesProcessed: Int64? = nil, bytesScanned: Int64? = nil) {
            self.bytesReturned = bytesReturned
            self.bytesProcessed = bytesProcessed
            self.bytesScanned = bytesScanned
        }

        private enum CodingKeys: String, CodingKey {
            case bytesReturned = "BytesReturned"
            case bytesProcessed = "BytesProcessed"
            case bytesScanned = "BytesScanned"
        }
    }

    public struct GetBucketLifecycleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct OutputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSV", required: false, type: .structure), 
            AWSShapeMember(label: "JSON", required: false, type: .structure)
        ]
        /// Describes the serialization of CSV-encoded Select results.
        public let csv: CSVOutput?
        /// Specifies JSON as request's output serialization format.
        public let json: JSONOutput?

        public init(csv: CSVOutput? = nil, json: JSONOutput? = nil) {
            self.csv = csv
            self.json = json
        }

        private enum CodingKeys: String, CodingKey {
            case csv = "CSV"
            case json = "JSON"
        }
    }

    public struct ListObjectsV2Request: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "StartAfter", location: .querystring(locationName: "start-after"), required: false, type: .string), 
            AWSShapeMember(label: "FetchOwner", location: .querystring(locationName: "fetch-owner"), required: false, type: .boolean), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true
        public let fetchOwner: Bool?
        /// Name of the bucket to list.
        public let bucket: String

        public init(encodingType: EncodingType? = nil, requestPayer: RequestPayer? = nil, continuationToken: String? = nil, maxKeys: Int32? = nil, prefix: String? = nil, delimiter: String? = nil, startAfter: String? = nil, fetchOwner: Bool? = nil, bucket: String) {
            self.encodingType = encodingType
            self.requestPayer = requestPayer
            self.continuationToken = continuationToken
            self.maxKeys = maxKeys
            self.prefix = prefix
            self.delimiter = delimiter
            self.startAfter = startAfter
            self.fetchOwner = fetchOwner
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "encoding-type"
            case requestPayer = "x-amz-request-payer"
            case continuationToken = "continuation-token"
            case maxKeys = "max-keys"
            case prefix = "prefix"
            case delimiter = "delimiter"
            case startAfter = "start-after"
            case fetchOwner = "fetch-owner"
            case bucket = "Bucket"
        }
    }

    public struct InventoryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The prefix that an object must have to be included in the inventory results.
        public let prefix: String

        public init(prefix: String) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public enum Event: String, CustomStringConvertible, Codable {
        case s3Reducedredundancylostobject = "s3:ReducedRedundancyLostObject"
        case s3ObjectcreatedAll = "s3:ObjectCreated:*"
        case s3ObjectcreatedPut = "s3:ObjectCreated:Put"
        case s3ObjectcreatedPost = "s3:ObjectCreated:Post"
        case s3ObjectcreatedCopy = "s3:ObjectCreated:Copy"
        case s3ObjectcreatedCompletemultipartupload = "s3:ObjectCreated:CompleteMultipartUpload"
        case s3ObjectremovedAll = "s3:ObjectRemoved:*"
        case s3ObjectremovedDelete = "s3:ObjectRemoved:Delete"
        case s3ObjectremovedDeletemarkercreated = "s3:ObjectRemoved:DeleteMarkerCreated"
        case s3ObjectrestorePost = "s3:ObjectRestore:Post"
        case s3ObjectrestoreCompleted = "s3:ObjectRestore:Completed"
        public var description: String { return self.rawValue }
    }

    public struct NoncurrentVersionTransition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?

        public init(noncurrentDays: Int32? = nil, storageClass: TransitionStorageClass? = nil) {
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
            case storageClass = "StorageClass"
        }
    }

    public enum AnalyticsS3ExportFileFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public enum BucketLogsPermission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case read = "READ"
        case write = "WRITE"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// A list of grants.
        public let grants: Grants?
        public let owner: Owner?

        public init(grants: Grants? = nil, owner: Owner? = nil) {
            self.grants = grants
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "AccessControlList"
            case owner = "Owner"
        }
    }

    public struct QueueConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Queue", required: false, type: .string), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list)
        ]
        public let id: String?
        public let queue: String?
        public let event: Event?
        public let events: [Event]?

        public init(id: String? = nil, queue: String? = nil, event: Event? = nil, events: [Event]? = nil) {
            self.id = id
            self.queue = queue
            self.event = event
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case queue = "Queue"
            case event = "Event"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case events = "_Event"
        }
    }

    public struct RestoreObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RestoreRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RestoreRequest", location: .body(locationName: "RestoreRequest"), required: false, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let bucket: String
        public let restoreRequest: RestoreRequest?
        public let key: String
        public let requestPayer: RequestPayer?
        public let versionId: String?

        public init(bucket: String, restoreRequest: RestoreRequest? = nil, key: String, requestPayer: RequestPayer? = nil, versionId: String? = nil) {
            self.bucket = bucket
            self.restoreRequest = restoreRequest
            self.key = key
            self.requestPayer = requestPayer
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case restoreRequest = "RestoreRequest"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
        }
    }

    public struct S3KeyFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterRules", location: .body(locationName: "FilterRule"), required: false, type: .list)
        ]
        public let filterRules: [FilterRule]?

        public init(filterRules: [FilterRule]? = nil) {
            self.filterRules = filterRules
        }

        private enum CodingKeys: String, CodingKey {
            case filterRules = "FilterRule"
        }
    }

    public struct PutBucketEncryptionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", location: .body(locationName: "ServerSideEncryptionConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        /// The name of the bucket for which the server-side encryption configuration is set.
        public let bucket: String
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration
        /// The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.
        public let contentMD5: String?

        public init(bucket: String, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct RecordsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payload", required: false, type: .blob)
        ]
        /// The byte array of partial, one or more result records.
        public let payload: Data?

        public init(payload: Data? = nil) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "Payload"
        }
    }

    public enum MFADelete: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let lifecycleConfiguration: LifecycleConfiguration?

        public init(bucket: String, contentMD5: String? = nil, lifecycleConfiguration: LifecycleConfiguration? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.lifecycleConfiguration = lifecycleConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case lifecycleConfiguration = "LifecycleConfiguration"
        }
    }

    public enum BucketAccelerateStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct CompletedMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list)
        ]
        public let parts: [CompletedPart]?

        public init(parts: [CompletedPart]? = nil) {
            self.parts = parts
        }

        private enum CodingKeys: String, CodingKey {
            case parts = "Part"
        }
    }

    public struct SourceSelectionCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SseKmsEncryptedObjects", required: false, type: .structure)
        ]
        ///  A container for filter information for the selection of S3 objects encrypted with AWS KMS. If you include SourceSelectionCriteria in the replication configuration, this element is required. 
        public let sseKmsEncryptedObjects: SseKmsEncryptedObjects?

        public init(sseKmsEncryptedObjects: SseKmsEncryptedObjects? = nil) {
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }

        private enum CodingKeys: String, CodingKey {
            case sseKmsEncryptedObjects = "SseKmsEncryptedObjects"
        }
    }

    public struct CompletedPart: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", required: false, type: .integer)
        ]
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?

        public init(eTag: String? = nil, partNumber: Int32? = nil) {
            self.eTag = eTag
            self.partNumber = partNumber
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case partNumber = "PartNumber"
        }
    }

    public struct ObjectVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        public let owner: Owner?
        /// The object key.
        public let key: String?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?
        public let eTag: String?
        /// Size in bytes of the object.
        public let size: Int32?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        /// Version ID of an object.
        public let versionId: String?
        /// The class of storage used to store the object.
        public let storageClass: ObjectVersionStorageClass?

        public init(owner: Owner? = nil, key: String? = nil, lastModified: TimeStamp? = nil, eTag: String? = nil, size: Int32? = nil, isLatest: Bool? = nil, versionId: String? = nil, storageClass: ObjectVersionStorageClass? = nil) {
            self.owner = owner
            self.key = key
            self.lastModified = lastModified
            self.eTag = eTag
            self.size = size
            self.isLatest = isLatest
            self.versionId = versionId
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case key = "Key"
            case lastModified = "LastModified"
            case eTag = "ETag"
            case size = "Size"
            case isLatest = "IsLatest"
            case versionId = "VersionId"
            case storageClass = "StorageClass"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Account", required: false, type: .string), 
            AWSShapeMember(label: "AccessControlTranslation", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure)
        ]
        ///  The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.   If there are multiple rules in your replication configuration, all rules must specify the same bucket as the destination. A replication configuration can replicate objects to only one destination bucket. 
        public let bucket: String
        ///  The class of storage used to store the object. By default Amazon S3 uses storage class of the source object when creating a replica. 
        public let storageClass: StorageClass?
        /// The account ID of the destination bucket. Currently, Amazon S3 verifies this value only if Access Control Translation is enabled.  In a cross-account scenario, if you change replica ownership to the AWS account that owns the destination bucket by adding the AccessControlTranslation element, this is the account ID of the owner of the destination bucket. 
        public let account: String?
        /// A container for information about access control for replicas.  Use this element only in a cross-account scenario where source and destination bucket owners are not the same to change replica ownership to the AWS account that owns the destination bucket. If you don't add this element to the replication configuration, the replicas are owned by same AWS account that owns the source object. 
        public let accessControlTranslation: AccessControlTranslation?
        /// A container that provides information about encryption. If SourceSelectionCriteria is specified, you must specify this element. 
        public let encryptionConfiguration: EncryptionConfiguration?

        public init(bucket: String, storageClass: StorageClass? = nil, account: String? = nil, accessControlTranslation: AccessControlTranslation? = nil, encryptionConfiguration: EncryptionConfiguration? = nil) {
            self.bucket = bucket
            self.storageClass = storageClass
            self.account = account
            self.accessControlTranslation = accessControlTranslation
            self.encryptionConfiguration = encryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case storageClass = "StorageClass"
            case account = "Account"
            case accessControlTranslation = "AccessControlTranslation"
            case encryptionConfiguration = "EncryptionConfiguration"
        }
    }

    public struct DeleteObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let key: String
        public let bucket: String
        /// The versionId of the object that the tag-set will be removed from.
        public let versionId: String?

        public init(key: String, bucket: String, versionId: String? = nil) {
            self.key = key
            self.bucket = bucket
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case versionId = "versionId"
        }
    }

    public struct DeleteBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        ///  The bucket name.   It can take a while to propagate the deletion of a replication configuration to all Amazon S3 systems. 
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string)
        ]
        /// The bucket policy as a JSON document.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct MetricsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The list of tags used when evaluating an AND predicate.
        public let tags: TagSet?
        /// The prefix used when evaluating an AND predicate.
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct PutBucketNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let notificationConfiguration: NotificationConfigurationDeprecated
        public let contentMD5: String?

        public init(bucket: String, notificationConfiguration: NotificationConfigurationDeprecated, contentMD5: String? = nil) {
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case notificationConfiguration = "NotificationConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct WebsiteConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure), 
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure), 
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure)
        ]
        public let redirectAllRequestsTo: RedirectAllRequestsTo?
        public let routingRules: RoutingRules?
        public let errorDocument: ErrorDocument?
        public let indexDocument: IndexDocument?

        public init(redirectAllRequestsTo: RedirectAllRequestsTo? = nil, routingRules: RoutingRules? = nil, errorDocument: ErrorDocument? = nil, indexDocument: IndexDocument? = nil) {
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.routingRules = routingRules
            self.errorDocument = errorDocument
            self.indexDocument = indexDocument
        }

        private enum CodingKeys: String, CodingKey {
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
            case routingRules = "RoutingRules"
            case errorDocument = "ErrorDocument"
            case indexDocument = "IndexDocument"
        }
    }

    public struct PutBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "MetricsConfiguration", location: .body(locationName: "MetricsConfiguration"), required: true, type: .structure)
        ]
        /// The name of the bucket for which the metrics configuration is set.
        public let bucket: String
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration

        public init(bucket: String, id: String, metricsConfiguration: MetricsConfiguration) {
            self.bucket = bucket
            self.id = id
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public struct GetBucketRequestPaymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CompleteMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Location", required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Entity tag of the object.
        public let eTag: String?
        public let key: String?
        public let requestCharged: RequestCharged?
        public let location: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        public let bucket: String?
        /// Version of the object.
        public let versionId: String?

        public init(expiration: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, eTag: String? = nil, key: String? = nil, requestCharged: RequestCharged? = nil, location: String? = nil, sSEKMSKeyId: String? = nil, bucket: String? = nil, versionId: String? = nil) {
            self.expiration = expiration
            self.serverSideEncryption = serverSideEncryption
            self.eTag = eTag
            self.key = key
            self.requestCharged = requestCharged
            self.location = location
            self.sSEKMSKeyId = sSEKMSKeyId
            self.bucket = bucket
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case eTag = "ETag"
            case key = "Key"
            case requestCharged = "x-amz-request-charged"
            case location = "Location"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case bucket = "Bucket"
            case versionId = "x-amz-version-id"
        }
    }

    public struct HeadObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer)
        ]
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// The Legal Hold status for the specified object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The language the content is in.
        public let contentLanguage: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        public let storageClass: StorageClass?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// The Object Lock mode currently in place for this object.
        public let objectLockMode: ObjectLockMode?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let acceptRanges: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// The date and time when this object's Object Lock will expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// Version of the object.
        public let versionId: String?
        public let requestCharged: RequestCharged?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        public let replicationStatus: ReplicationStatus?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// The count of parts this object has.
        public let partsCount: Int32?

        public init(expiration: String? = nil, objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, metadata: [String: String]? = nil, contentLanguage: String? = nil, websiteRedirectLocation: String? = nil, sSECustomerAlgorithm: String? = nil, contentEncoding: String? = nil, restore: String? = nil, storageClass: StorageClass? = nil, contentDisposition: String? = nil, objectLockMode: ObjectLockMode? = nil, sSECustomerKeyMD5: String? = nil, acceptRanges: String? = nil, cacheControl: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, lastModified: TimeStamp? = nil, contentLength: Int64? = nil, objectLockRetainUntilDate: TimeStamp? = nil, versionId: String? = nil, requestCharged: RequestCharged? = nil, missingMeta: Int32? = nil, replicationStatus: ReplicationStatus? = nil, expires: TimeStamp? = nil, eTag: String? = nil, contentType: String? = nil, deleteMarker: Bool? = nil, sSEKMSKeyId: String? = nil, partsCount: Int32? = nil) {
            self.expiration = expiration
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.metadata = metadata
            self.contentLanguage = contentLanguage
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentEncoding = contentEncoding
            self.restore = restore
            self.storageClass = storageClass
            self.contentDisposition = contentDisposition
            self.objectLockMode = objectLockMode
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acceptRanges = acceptRanges
            self.cacheControl = cacheControl
            self.serverSideEncryption = serverSideEncryption
            self.lastModified = lastModified
            self.contentLength = contentLength
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.versionId = versionId
            self.requestCharged = requestCharged
            self.missingMeta = missingMeta
            self.replicationStatus = replicationStatus
            self.expires = expires
            self.eTag = eTag
            self.contentType = contentType
            self.deleteMarker = deleteMarker
            self.sSEKMSKeyId = sSEKMSKeyId
            self.partsCount = partsCount
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case metadata = "Metadata"
            case contentLanguage = "Content-Language"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentEncoding = "Content-Encoding"
            case restore = "x-amz-restore"
            case storageClass = "x-amz-storage-class"
            case contentDisposition = "Content-Disposition"
            case objectLockMode = "x-amz-object-lock-mode"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case acceptRanges = "accept-ranges"
            case cacheControl = "Cache-Control"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case lastModified = "Last-Modified"
            case contentLength = "Content-Length"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case versionId = "x-amz-version-id"
            case requestCharged = "x-amz-request-charged"
            case missingMeta = "x-amz-missing-meta"
            case replicationStatus = "x-amz-replication-status"
            case expires = "Expires"
            case eTag = "ETag"
            case contentType = "Content-Type"
            case deleteMarker = "x-amz-delete-marker"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case partsCount = "x-amz-mp-parts-count"
        }
    }

    public struct GetBucketLoggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum BucketLocationConstraint: String, CustomStringConvertible, Codable {
        case eu = "EU"
        case euWest1 = "eu-west-1"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case apSouth1 = "ap-south-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case saEast1 = "sa-east-1"
        case cnNorth1 = "cn-north-1"
        case euCentral1 = "eu-central-1"
        public var description: String { return self.rawValue }
    }

    public enum ObjectVersionStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public struct JSONOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string)
        ]
        /// The value used to separate individual records in the output.
        public let recordDelimiter: String?

        public init(recordDelimiter: String? = nil) {
            self.recordDelimiter = recordDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordDelimiter = "RecordDelimiter"
        }
    }

    public struct GetObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let tagSet: TagSet
        public let versionId: String?

        public init(tagSet: TagSet, versionId: String? = nil) {
            self.tagSet = tagSet
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
            case versionId = "x-amz-version-id"
        }
    }

    public struct GetBucketPolicyStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the Amazon S3 bucket whose policy status you want to retrieve.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DeleteObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        /// Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker.
        public let deleteMarker: Bool?
        /// Returns the version ID of the delete marker created as a result of the DELETE operation.
        public let versionId: String?

        public init(requestCharged: RequestCharged? = nil, deleteMarker: Bool? = nil, versionId: String? = nil) {
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case deleteMarker = "x-amz-delete-marker"
            case versionId = "x-amz-version-id"
        }
    }

    public struct ListObjectVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string), 
            AWSShapeMember(label: "VersionIdMarker", location: .querystring(locationName: "version-id-marker"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let encodingType: EncodingType?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// Specifies the key to start with when listing objects in a bucket.
        public let keyMarker: String?
        /// Specifies the object version you want to start listing from.
        public let versionIdMarker: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        public let bucket: String

        public init(encodingType: EncodingType? = nil, maxKeys: Int32? = nil, prefix: String? = nil, keyMarker: String? = nil, versionIdMarker: String? = nil, delimiter: String? = nil, bucket: String) {
            self.encodingType = encodingType
            self.maxKeys = maxKeys
            self.prefix = prefix
            self.keyMarker = keyMarker
            self.versionIdMarker = versionIdMarker
            self.delimiter = delimiter
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "encoding-type"
            case maxKeys = "max-keys"
            case prefix = "prefix"
            case keyMarker = "key-marker"
            case versionIdMarker = "version-id-marker"
            case delimiter = "delimiter"
            case bucket = "Bucket"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "Tagging", required: false, type: .structure), 
            AWSShapeMember(label: "AccessControlList", required: false, type: .structure), 
            AWSShapeMember(label: "UserMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "CannedACL", required: false, type: .enum), 
            AWSShapeMember(label: "BucketName", required: true, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        public let encryption: Encryption?
        /// The prefix that is prepended to the restore results for this request.
        public let prefix: String
        /// The tag-set that is applied to the restore results.
        public let tagging: Tagging?
        /// A list of grants that control access to the staged results.
        public let accessControlList: Grants?
        /// A list of metadata to store with the restore results in S3.
        public let userMetadata: UserMetadata?
        /// The canned ACL to apply to the restore results.
        public let cannedACL: ObjectCannedACL?
        /// The name of the bucket where the restore results will be placed.
        public let bucketName: String
        /// The class of storage used to store the restore results.
        public let storageClass: StorageClass?

        public init(encryption: Encryption? = nil, prefix: String, tagging: Tagging? = nil, accessControlList: Grants? = nil, userMetadata: UserMetadata? = nil, cannedACL: ObjectCannedACL? = nil, bucketName: String, storageClass: StorageClass? = nil) {
            self.encryption = encryption
            self.prefix = prefix
            self.tagging = tagging
            self.accessControlList = accessControlList
            self.userMetadata = userMetadata
            self.cannedACL = cannedACL
            self.bucketName = bucketName
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case encryption = "Encryption"
            case prefix = "Prefix"
            case tagging = "Tagging"
            case accessControlList = "AccessControlList"
            case userMetadata = "UserMetadata"
            case cannedACL = "CannedACL"
            case bucketName = "BucketName"
            case storageClass = "StorageClass"
        }
    }

    public struct StorageClassAnalysisDataExport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "OutputSchemaVersion", required: true, type: .enum)
        ]
        /// The place to store the data for an analysis.
        public let destination: AnalyticsExportDestination
        /// The version of the output schema to use when exporting data. Must be V_1.
        public let outputSchemaVersion: StorageClassAnalysisSchemaVersion

        public init(destination: AnalyticsExportDestination, outputSchemaVersion: StorageClassAnalysisSchemaVersion) {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case outputSchemaVersion = "OutputSchemaVersion"
        }
    }

    public struct PutObjectRetentionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct PutBucketRequestPaymentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RequestPaymentConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPaymentConfiguration", location: .body(locationName: "RequestPaymentConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let requestPaymentConfiguration: RequestPaymentConfiguration
        public let contentMD5: String?

        public init(bucket: String, requestPaymentConfiguration: RequestPaymentConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.requestPaymentConfiguration = requestPaymentConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case requestPaymentConfiguration = "RequestPaymentConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct ListObjectVersionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Versions", location: .body(locationName: "Version"), required: false, type: .list), 
            AWSShapeMember(label: "DeleteMarkers", location: .body(locationName: "DeleteMarker"), required: false, type: .list), 
            AWSShapeMember(label: "NextVersionIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "VersionIdMarker", required: false, type: .string)
        ]
        public let prefix: String?
        /// Marks the last Key returned in a truncated response.
        public let keyMarker: String?
        public let delimiter: String?
        public let commonPrefixes: [CommonPrefix]?
        /// Use this value for the key marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
        public let isTruncated: Bool?
        public let name: String?
        public let maxKeys: Int32?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        public let versions: [ObjectVersion]?
        public let deleteMarkers: [DeleteMarkerEntry]?
        /// Use this value for the next version id marker parameter in a subsequent request.
        public let nextVersionIdMarker: String?
        public let versionIdMarker: String?

        public init(prefix: String? = nil, keyMarker: String? = nil, delimiter: String? = nil, commonPrefixes: [CommonPrefix]? = nil, nextKeyMarker: String? = nil, isTruncated: Bool? = nil, name: String? = nil, maxKeys: Int32? = nil, encodingType: EncodingType? = nil, versions: [ObjectVersion]? = nil, deleteMarkers: [DeleteMarkerEntry]? = nil, nextVersionIdMarker: String? = nil, versionIdMarker: String? = nil) {
            self.prefix = prefix
            self.keyMarker = keyMarker
            self.delimiter = delimiter
            self.commonPrefixes = commonPrefixes
            self.nextKeyMarker = nextKeyMarker
            self.isTruncated = isTruncated
            self.name = name
            self.maxKeys = maxKeys
            self.encodingType = encodingType
            self.versions = versions
            self.deleteMarkers = deleteMarkers
            self.nextVersionIdMarker = nextVersionIdMarker
            self.versionIdMarker = versionIdMarker
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case keyMarker = "KeyMarker"
            case delimiter = "Delimiter"
            case commonPrefixes = "CommonPrefixes"
            case nextKeyMarker = "NextKeyMarker"
            case isTruncated = "IsTruncated"
            case name = "Name"
            case maxKeys = "MaxKeys"
            case encodingType = "EncodingType"
            case versions = "Version"
            case deleteMarkers = "DeleteMarker"
            case nextVersionIdMarker = "NextVersionIdMarker"
            case versionIdMarker = "VersionIdMarker"
        }
    }

    public struct LifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [Rule]

        public init(rules: [Rule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct UploadPartCopyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyPartResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "CopyPartResult", required: false, type: .structure), 
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string)
        ]
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let requestCharged: RequestCharged?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        public let copyPartResult: CopyPartResult?
        /// The version of the source object that was copied, if you have enabled versioning on the source bucket.
        public let copySourceVersionId: String?

        public init(serverSideEncryption: ServerSideEncryption? = nil, sSECustomerKeyMD5: String? = nil, requestCharged: RequestCharged? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, copyPartResult: CopyPartResult? = nil, copySourceVersionId: String? = nil) {
            self.serverSideEncryption = serverSideEncryption
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.requestCharged = requestCharged
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.copyPartResult = copyPartResult
            self.copySourceVersionId = copySourceVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryption = "x-amz-server-side-encryption"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case requestCharged = "x-amz-request-charged"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case copyPartResult = "CopyPartResult"
            case copySourceVersionId = "x-amz-copy-source-version-id"
        }
    }

    public enum RequestCharged: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct BucketLoggingStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct ListBucketMetricsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "MetricsConfigurationList", location: .body(locationName: "MetricsConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
        public let continuationToken: String?
        /// The list of metrics configurations for a bucket.
        public let metricsConfigurationList: [MetricsConfiguration]?
        /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?

        public init(isTruncated: Bool? = nil, continuationToken: String? = nil, metricsConfigurationList: [MetricsConfiguration]? = nil, nextContinuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.continuationToken = continuationToken
            self.metricsConfigurationList = metricsConfigurationList
            self.nextContinuationToken = nextContinuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case continuationToken = "ContinuationToken"
            case metricsConfigurationList = "MetricsConfiguration"
            case nextContinuationToken = "NextContinuationToken"
        }
    }

    public struct GetBucketNotificationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket to get the notification configuration for.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case http = "http"
        case https = "https"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketReplicationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationConfiguration", required: false, type: .structure)
        ]
        public let replicationConfiguration: ReplicationConfiguration?

        public init(replicationConfiguration: ReplicationConfiguration? = nil) {
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public enum FileHeaderInfo: String, CustomStringConvertible, Codable {
        case use = "USE"
        case ignore = "IGNORE"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectTorrentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let key: String
        public let bucket: String
        public let requestPayer: RequestPayer?

        public init(key: String, bucket: String, requestPayer: RequestPayer? = nil) {
            self.key = key
            self.bucket = bucket
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct PolicyStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsPublic", location: .body(locationName: "IsPublic"), required: false, type: .boolean)
        ]
        /// The policy status for this bucket. TRUE indicates that this bucket is public. FALSE indicates that the bucket is not public.
        public let isPublic: Bool?

        public init(isPublic: Bool? = nil) {
            self.isPublic = isPublic
        }

        private enum CodingKeys: String, CodingKey {
            case isPublic = "IsPublic"
        }
    }

    public struct ListObjectsV2Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "KeyCount", required: false, type: .integer), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "StartAfter", required: false, type: .string), 
            AWSShapeMember(label: "Contents", required: false, type: .list), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list)
        ]
        /// Name of the bucket to list.
        public let name: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys 
        public let keyCount: Int32?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
        public let nextContinuationToken: String?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// Metadata about each object returned.
        public let contents: [Object]?
        /// CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
        public let commonPrefixes: [CommonPrefix]?

        public init(name: String? = nil, encodingType: EncodingType? = nil, continuationToken: String? = nil, maxKeys: Int32? = nil, isTruncated: Bool? = nil, prefix: String? = nil, keyCount: Int32? = nil, delimiter: String? = nil, nextContinuationToken: String? = nil, startAfter: String? = nil, contents: [Object]? = nil, commonPrefixes: [CommonPrefix]? = nil) {
            self.name = name
            self.encodingType = encodingType
            self.continuationToken = continuationToken
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.prefix = prefix
            self.keyCount = keyCount
            self.delimiter = delimiter
            self.nextContinuationToken = nextContinuationToken
            self.startAfter = startAfter
            self.contents = contents
            self.commonPrefixes = commonPrefixes
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case encodingType = "EncodingType"
            case continuationToken = "ContinuationToken"
            case maxKeys = "MaxKeys"
            case isTruncated = "IsTruncated"
            case prefix = "Prefix"
            case keyCount = "KeyCount"
            case delimiter = "Delimiter"
            case nextContinuationToken = "NextContinuationToken"
            case startAfter = "StartAfter"
            case contents = "Contents"
            case commonPrefixes = "CommonPrefixes"
        }
    }

    public struct DeletedObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteMarker", required: false, type: .boolean), 
            AWSShapeMember(label: "DeleteMarkerVersionId", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        public let deleteMarker: Bool?
        public let deleteMarkerVersionId: String?
        public let key: String?
        public let versionId: String?

        public init(deleteMarker: Bool? = nil, deleteMarkerVersionId: String? = nil, key: String? = nil, versionId: String? = nil) {
            self.deleteMarker = deleteMarker
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteMarker = "DeleteMarker"
            case deleteMarkerVersionId = "DeleteMarkerVersionId"
            case key = "Key"
            case versionId = "VersionId"
        }
    }

    public struct UploadPartRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Object data.
        public let body: Data?
        /// Upload ID identifying the multipart upload whose part is being uploaded.
        public let uploadId: String
        /// Object key for which the multipart upload was initiated.
        public let key: String
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String

        public init(partNumber: Int32, body: Data? = nil, uploadId: String, key: String, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, contentMD5: String? = nil, sSECustomerAlgorithm: String? = nil, contentLength: Int64? = nil, sSECustomerKey: String? = nil, bucket: String) {
            self.partNumber = partNumber
            self.body = body
            self.uploadId = uploadId
            self.key = key
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.contentMD5 = contentMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentLength = contentLength
            self.sSECustomerKey = sSECustomerKey
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case partNumber = "partNumber"
            case body = "Body"
            case uploadId = "uploadId"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case contentMD5 = "Content-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentLength = "Content-Length"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case bucket = "Bucket"
        }
    }

    public struct PutBucketLifecycleConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure)
        ]
        public let bucket: String
        public let lifecycleConfiguration: BucketLifecycleConfiguration?

        public init(bucket: String, lifecycleConfiguration: BucketLifecycleConfiguration? = nil) {
            self.bucket = bucket
            self.lifecycleConfiguration = lifecycleConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case lifecycleConfiguration = "LifecycleConfiguration"
        }
    }

    public struct CSVOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteFields", required: false, type: .enum), 
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string)
        ]
        /// The value used to separate individual records.
        public let recordDelimiter: String?
        /// Indicates whether or not all output fields should be quoted.
        public let quoteFields: QuoteFields?
        /// The value used to separate individual fields in a record.
        public let fieldDelimiter: String?
        /// The value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// Th single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?

        public init(recordDelimiter: String? = nil, quoteFields: QuoteFields? = nil, fieldDelimiter: String? = nil, quoteCharacter: String? = nil, quoteEscapeCharacter: String? = nil) {
            self.recordDelimiter = recordDelimiter
            self.quoteFields = quoteFields
            self.fieldDelimiter = fieldDelimiter
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
        }

        private enum CodingKeys: String, CodingKey {
            case recordDelimiter = "RecordDelimiter"
            case quoteFields = "QuoteFields"
            case fieldDelimiter = "FieldDelimiter"
            case quoteCharacter = "QuoteCharacter"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
        }
    }

    public struct GetBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PublicAccessBlockConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockPublicAcls", location: .body(locationName: "BlockPublicAcls"), required: false, type: .boolean), 
            AWSShapeMember(label: "RestrictPublicBuckets", location: .body(locationName: "RestrictPublicBuckets"), required: false, type: .boolean), 
            AWSShapeMember(label: "BlockPublicPolicy", location: .body(locationName: "BlockPublicPolicy"), required: false, type: .boolean), 
            AWSShapeMember(label: "IgnorePublicAcls", location: .body(locationName: "IgnorePublicAcls"), required: false, type: .boolean)
        ]
        /// Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to TRUE causes the following behavior:   PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.   PUT Object calls fail if the request includes a public ACL.   Enabling this setting doesn't affect existing policies or ACLs.
        public let blockPublicAcls: Bool?
        /// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy. Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        public let restrictPublicBuckets: Bool?
        /// Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.  Enabling this setting doesn't affect existing bucket policies.
        public let blockPublicPolicy: Bool?
        /// Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        public let ignorePublicAcls: Bool?

        public init(blockPublicAcls: Bool? = nil, restrictPublicBuckets: Bool? = nil, blockPublicPolicy: Bool? = nil, ignorePublicAcls: Bool? = nil) {
            self.blockPublicAcls = blockPublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicAcls = "BlockPublicAcls"
            case restrictPublicBuckets = "RestrictPublicBuckets"
            case blockPublicPolicy = "BlockPublicPolicy"
            case ignorePublicAcls = "IgnorePublicAcls"
        }
    }

    public struct LifecycleRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", required: false, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionTransitions", location: .body(locationName: "NoncurrentVersionTransition"), required: false, type: .list), 
            AWSShapeMember(label: "Transitions", location: .body(locationName: "Transition"), required: false, type: .list), 
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure), 
            AWSShapeMember(label: "ID", required: false, type: .string)
        ]
        public let expiration: LifecycleExpiration?
        public let filter: LifecycleRuleFilter?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        /// Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead.
        public let prefix: String?
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let noncurrentVersionTransitions: [NoncurrentVersionTransition]?
        public let transitions: [Transition]?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?

        public init(expiration: LifecycleExpiration? = nil, filter: LifecycleRuleFilter? = nil, status: ExpirationStatus, prefix: String? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil, transitions: [Transition]? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, id: String? = nil) {
            self.expiration = expiration
            self.filter = filter
            self.status = status
            self.prefix = prefix
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.transitions = transitions
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "Expiration"
            case filter = "Filter"
            case status = "Status"
            case prefix = "Prefix"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case noncurrentVersionTransitions = "NoncurrentVersionTransition"
            case transitions = "Transition"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case id = "ID"
        }
    }

    public struct Bucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp)
        ]
        /// The name of the bucket.
        public let name: String?
        /// Date the bucket was created.
        public let creationDate: TimeStamp?

        public init(name: String? = nil, creationDate: TimeStamp? = nil) {
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDate = "CreationDate"
        }
    }

    public struct CreateBucketOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        public let location: String?

        public init(location: String? = nil) {
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
        }
    }

    public struct TagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public enum BucketVersioningStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct QueueConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "QueueArn", location: .body(locationName: "Queue"), required: true, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list)
        ]
        public let id: String?
        public let filter: NotificationConfigurationFilter?
        /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 will publish a message when it detects events of the specified type.
        public let queueArn: String
        public let events: [Event]

        public init(id: String? = nil, filter: NotificationConfigurationFilter? = nil, queueArn: String, events: [Event]) {
            self.id = id
            self.filter = filter
            self.queueArn = queueArn
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
            case queueArn = "Queue"
            case events = "Event"
        }
    }

    public struct CreateMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .body(locationName: "Bucket"), required: false, type: .string)
        ]
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// ID for the initiated multipart upload.
        public let uploadId: String?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let requestCharged: RequestCharged?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?

        public init(serverSideEncryption: ServerSideEncryption? = nil, uploadId: String? = nil, abortRuleId: String? = nil, key: String? = nil, sSECustomerKeyMD5: String? = nil, abortDate: TimeStamp? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: RequestCharged? = nil, sSEKMSKeyId: String? = nil, bucket: String? = nil) {
            self.serverSideEncryption = serverSideEncryption
            self.uploadId = uploadId
            self.abortRuleId = abortRuleId
            self.key = key
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.abortDate = abortDate
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.sSEKMSKeyId = sSEKMSKeyId
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryption = "x-amz-server-side-encryption"
            case uploadId = "UploadId"
            case abortRuleId = "x-amz-abort-rule-id"
            case key = "Key"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case abortDate = "x-amz-abort-date"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestCharged = "x-amz-request-charged"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case bucket = "Bucket"
        }
    }

    public enum ObjectLockRetentionMode: String, CustomStringConvertible, Codable {
        case governance = "GOVERNANCE"
        case compliance = "COMPLIANCE"
        public var description: String { return self.rawValue }
    }

    public struct ListMultipartUploadsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "UploadIdMarker", location: .querystring(locationName: "upload-id-marker"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxUploads", location: .querystring(locationName: "max-uploads"), required: false, type: .integer), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let encodingType: EncodingType?
        /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
        public let uploadIdMarker: String?
        /// Lists in-progress uploads only for those keys that begin with the specified prefix.
        public let prefix: String?
        /// Character you use to group keys.
        public let delimiter: String?
        /// Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.
        public let keyMarker: String?
        /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
        public let maxUploads: Int32?
        public let bucket: String

        public init(encodingType: EncodingType? = nil, uploadIdMarker: String? = nil, prefix: String? = nil, delimiter: String? = nil, keyMarker: String? = nil, maxUploads: Int32? = nil, bucket: String) {
            self.encodingType = encodingType
            self.uploadIdMarker = uploadIdMarker
            self.prefix = prefix
            self.delimiter = delimiter
            self.keyMarker = keyMarker
            self.maxUploads = maxUploads
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "encoding-type"
            case uploadIdMarker = "upload-id-marker"
            case prefix = "prefix"
            case delimiter = "delimiter"
            case keyMarker = "key-marker"
            case maxUploads = "max-uploads"
            case bucket = "Bucket"
        }
    }

    public struct LambdaFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list), 
            AWSShapeMember(label: "LambdaFunctionArn", location: .body(locationName: "CloudFunction"), required: true, type: .string)
        ]
        public let id: String?
        public let filter: NotificationConfigurationFilter?
        public let events: [Event]
        /// The Amazon Resource Name (ARN) of the Lambda cloud function that Amazon S3 can invoke when it detects events of the specified type.
        public let lambdaFunctionArn: String

        public init(id: String? = nil, filter: NotificationConfigurationFilter? = nil, events: [Event], lambdaFunctionArn: String) {
            self.id = id
            self.filter = filter
            self.events = events
            self.lambdaFunctionArn = lambdaFunctionArn
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
            case events = "Event"
            case lambdaFunctionArn = "CloudFunction"
        }
    }

    public enum Permission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case write = "WRITE"
        case writeAcp = "WRITE_ACP"
        case read = "READ"
        case readAcp = "READ_ACP"
        public var description: String { return self.rawValue }
    }

    public enum ObjectCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        case awsExecRead = "aws-exec-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketPolicyStatusOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PolicyStatus"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyStatus", required: false, type: .structure)
        ]
        /// The policy status for the specified bucket.
        public let policyStatus: PolicyStatus?

        public init(policyStatus: PolicyStatus? = nil) {
            self.policyStatus = policyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case policyStatus = "PolicyStatus"
        }
    }

    public struct GetBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct UploadPartOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string)
        ]
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?

        public init(sSEKMSKeyId: String? = nil, eTag: String? = nil, sSECustomerKeyMD5: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, sSECustomerAlgorithm: String? = nil) {
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case eTag = "ETag"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
        }
    }

    public struct Delete: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Objects", location: .body(locationName: "Object"), required: true, type: .list), 
            AWSShapeMember(label: "Quiet", required: false, type: .boolean)
        ]
        public let objects: [ObjectIdentifier]
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public let quiet: Bool?

        public init(objects: [ObjectIdentifier], quiet: Bool? = nil) {
            self.objects = objects
            self.quiet = quiet
        }

        private enum CodingKeys: String, CodingKey {
            case objects = "Object"
            case quiet = "Quiet"
        }
    }

    public struct RoutingRules: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingRule", required: false, type: .list)
        ]
        public let routingRule: [RoutingRule]?

        public init(routingRule: [RoutingRule]? = nil) {
            self.routingRule = routingRule
        }

        private enum CodingKeys: String, CodingKey {
            case routingRule = "RoutingRule"
        }
    }

    public struct GetObjectLegalHoldRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The bucket containing the object whose Legal Hold status you want to retrieve.
        public let bucket: String
        /// The key name for the object whose Legal Hold status you want to retrieve.
        public let key: String
        public let requestPayer: RequestPayer?
        /// The version ID of the object whose Legal Hold status you want to retrieve.
        public let versionId: String?

        public init(bucket: String, key: String, requestPayer: RequestPayer? = nil, versionId: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
        }
    }

    public struct NotificationConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudFunctionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "QueueConfiguration", required: false, type: .structure)
        ]
        public let topicConfiguration: TopicConfigurationDeprecated?
        public let cloudFunctionConfiguration: CloudFunctionConfiguration?
        public let queueConfiguration: QueueConfigurationDeprecated?

        public init(topicConfiguration: TopicConfigurationDeprecated? = nil, cloudFunctionConfiguration: CloudFunctionConfiguration? = nil, queueConfiguration: QueueConfigurationDeprecated? = nil) {
            self.topicConfiguration = topicConfiguration
            self.cloudFunctionConfiguration = cloudFunctionConfiguration
            self.queueConfiguration = queueConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case topicConfiguration = "TopicConfiguration"
            case cloudFunctionConfiguration = "CloudFunctionConfiguration"
            case queueConfiguration = "QueueConfiguration"
        }
    }

    public struct JSONInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The type of JSON. Valid values: Document, Lines.
        public let `type`: JSONType?

        public init(type: JSONType? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct SSEKMS: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// Specifies the ID of the AWS Key Management Service (KMS) master encryption key to use for encrypting Inventory reports.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public enum FilterRuleName: String, CustomStringConvertible, Codable {
        case prefix = "prefix"
        case suffix = "suffix"
        public var description: String { return self.rawValue }
    }

    public struct NotificationConfigurationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "S3Key"), required: false, type: .structure)
        ]
        public let key: S3KeyFilter?

        public init(key: S3KeyFilter? = nil) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "S3Key"
        }
    }

    public enum Payer: String, CustomStringConvertible, Codable {
        case requester = "Requester"
        case bucketowner = "BucketOwner"
        public var description: String { return self.rawValue }
    }

    public enum ObjectLockMode: String, CustomStringConvertible, Codable {
        case governance = "GOVERNANCE"
        case compliance = "COMPLIANCE"
        public var description: String { return self.rawValue }
    }

    public struct CopyObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyObjectResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "CopyObjectResult", required: false, type: .structure), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string)
        ]
        /// If the object expiration is configured, the response includes this header.
        public let expiration: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let requestCharged: RequestCharged?
        public let copyObjectResult: CopyObjectResult?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Version ID of the newly created copy.
        public let versionId: String?
        public let copySourceVersionId: String?

        public init(expiration: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, sSECustomerKeyMD5: String? = nil, requestCharged: RequestCharged? = nil, copyObjectResult: CopyObjectResult? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, versionId: String? = nil, copySourceVersionId: String? = nil) {
            self.expiration = expiration
            self.serverSideEncryption = serverSideEncryption
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.requestCharged = requestCharged
            self.copyObjectResult = copyObjectResult
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.versionId = versionId
            self.copySourceVersionId = copySourceVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case requestCharged = "x-amz-request-charged"
            case copyObjectResult = "CopyObjectResult"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case versionId = "x-amz-version-id"
            case copySourceVersionId = "x-amz-copy-source-version-id"
        }
    }

    public struct OutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]
        /// Describes an S3 location that will receive the results of the restore request.
        public let s3: S3Location?

        public init(s3: S3Location? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct GetBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket from which the server-side encryption configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DeleteBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket containing the server-side encryption configuration to delete.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum MetadataDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct InventoryConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "IsEnabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Schedule", required: true, type: .structure), 
            AWSShapeMember(label: "IncludedObjectVersions", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "OptionalFields", required: false, type: .structure)
        ]
        /// Contains information about where to publish the inventory results.
        public let destination: InventoryDestination
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public let filter: InventoryFilter?
        /// Specifies whether the inventory is enabled or disabled.
        public let isEnabled: Bool
        /// Specifies the schedule for generating inventory results.
        public let schedule: InventorySchedule
        /// Specifies which object version(s) to included in the inventory results.
        public let includedObjectVersions: InventoryIncludedObjectVersions
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// Contains the optional fields that are included in the inventory results.
        public let optionalFields: InventoryOptionalFields?

        public init(destination: InventoryDestination, filter: InventoryFilter? = nil, isEnabled: Bool, schedule: InventorySchedule, includedObjectVersions: InventoryIncludedObjectVersions, id: String, optionalFields: InventoryOptionalFields? = nil) {
            self.destination = destination
            self.filter = filter
            self.isEnabled = isEnabled
            self.schedule = schedule
            self.includedObjectVersions = includedObjectVersions
            self.id = id
            self.optionalFields = optionalFields
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case filter = "Filter"
            case isEnabled = "IsEnabled"
            case schedule = "Schedule"
            case includedObjectVersions = "IncludedObjectVersions"
            case id = "Id"
            case optionalFields = "OptionalFields"
        }
    }

    public struct PutObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct Progress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesReturned", required: false, type: .long), 
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long), 
            AWSShapeMember(label: "BytesScanned", required: false, type: .long)
        ]
        /// The current number of bytes of records payload data returned.
        public let bytesReturned: Int64?
        /// The current number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?
        /// The current number of object bytes scanned.
        public let bytesScanned: Int64?

        public init(bytesReturned: Int64? = nil, bytesProcessed: Int64? = nil, bytesScanned: Int64? = nil) {
            self.bytesReturned = bytesReturned
            self.bytesProcessed = bytesProcessed
            self.bytesScanned = bytesScanned
        }

        private enum CodingKeys: String, CodingKey {
            case bytesReturned = "BytesReturned"
            case bytesProcessed = "BytesProcessed"
            case bytesScanned = "BytesScanned"
        }
    }

    public struct ErrorDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The object key name to use when a 4XX class error occurs.
        public let key: String

        public init(key: String) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct AccessControlPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// A list of grants.
        public let grants: Grants?
        public let owner: Owner?

        public init(grants: Grants? = nil, owner: Owner? = nil) {
            self.grants = grants
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "AccessControlList"
            case owner = "Owner"
        }
    }

    public struct Encryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionType", required: true, type: .enum), 
            AWSShapeMember(label: "KMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "KMSContext", required: false, type: .string)
        ]
        /// The server-side encryption algorithm used when storing job results in Amazon S3 (e.g., AES256, aws:kms).
        public let encryptionType: ServerSideEncryption
        /// If the encryption type is aws:kms, this optional value specifies the AWS KMS key ID to use for encryption of job results.
        public let kMSKeyId: String?
        /// If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results.
        public let kMSContext: String?

        public init(encryptionType: ServerSideEncryption, kMSKeyId: String? = nil, kMSContext: String? = nil) {
            self.encryptionType = encryptionType
            self.kMSKeyId = kMSKeyId
            self.kMSContext = kMSContext
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionType = "EncryptionType"
            case kMSKeyId = "KMSKeyId"
            case kMSContext = "KMSContext"
        }
    }

    public enum Tier: String, CustomStringConvertible, Codable {
        case standard = "Standard"
        case bulk = "Bulk"
        case expedited = "Expedited"
        public var description: String { return self.rawValue }
    }

    public enum StorageClassAnalysisSchemaVersion: String, CustomStringConvertible, Codable {
        case v1 = "V_1"
        public var description: String { return self.rawValue }
    }

    public struct PutObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let bucket: String
        public let tagging: Tagging
        public let contentMD5: String?
        public let key: String
        public let versionId: String?

        public init(bucket: String, tagging: Tagging, contentMD5: String? = nil, key: String, versionId: String? = nil) {
            self.bucket = bucket
            self.tagging = tagging
            self.contentMD5 = contentMD5
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case tagging = "Tagging"
            case contentMD5 = "Content-MD5"
            case key = "Key"
            case versionId = "versionId"
        }
    }

    public struct AnalyticsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// The tag to use when evaluating an analytics filter.
        public let tag: Tag?
        /// The prefix to use when evaluating an analytics filter.
        public let prefix: String?
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        public let and: AnalyticsAndOperator?

        public init(tag: Tag? = nil, prefix: String? = nil, and: AnalyticsAndOperator? = nil) {
            self.tag = tag
            self.prefix = prefix
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case prefix = "Prefix"
            case and = "And"
        }
    }

    public struct CORSConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: true, type: .list)
        ]
        public let cORSRules: [CORSRule]

        public init(cORSRules: [CORSRule]) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct DeleteBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the inventory configuration to delete.
        public let bucket: String
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct PutBucketAccelerateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccelerateConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "AccelerateConfiguration", location: .body(locationName: "AccelerateConfiguration"), required: true, type: .structure)
        ]
        /// Name of the bucket for which the accelerate configuration is set.
        public let bucket: String
        /// Specifies the Accelerate Configuration you want to set for the bucket.
        public let accelerateConfiguration: AccelerateConfiguration

        public init(bucket: String, accelerateConfiguration: AccelerateConfiguration) {
            self.bucket = bucket
            self.accelerateConfiguration = accelerateConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case accelerateConfiguration = "AccelerateConfiguration"
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "BypassGovernanceRetention", location: .header(locationName: "x-amz-bypass-governance-retention"), required: false, type: .boolean), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let bucket: String
        /// Indicates whether S3 Object Lock should bypass Governance-mode restrictions to process this operation.
        public let bypassGovernanceRetention: Bool?
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let key: String
        public let requestPayer: RequestPayer?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?

        public init(bucket: String, bypassGovernanceRetention: Bool? = nil, mfa: String? = nil, key: String, requestPayer: RequestPayer? = nil, versionId: String? = nil) {
            self.bucket = bucket
            self.bypassGovernanceRetention = bypassGovernanceRetention
            self.mfa = mfa
            self.key = key
            self.requestPayer = requestPayer
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case bypassGovernanceRetention = "x-amz-bypass-governance-retention"
            case mfa = "x-amz-mfa"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
        }
    }

    public struct CreateMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string)
        ]
        /// Specifies whether you want to apply a Legal Hold to the uploaded object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        public let bucket: String
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let requestPayer: RequestPayer?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Specifies the Object Lock mode that you want to apply to the uploaded object.
        public let objectLockMode: ObjectLockMode?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Specifies the date and time when you want the Object Lock to expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        public let key: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?

        public init(objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, acl: ObjectCannedACL? = nil, grantFullControl: String? = nil, metadata: [String: String]? = nil, grantRead: String? = nil, contentLanguage: String? = nil, websiteRedirectLocation: String? = nil, bucket: String, sSECustomerAlgorithm: String? = nil, requestPayer: RequestPayer? = nil, contentEncoding: String? = nil, storageClass: StorageClass? = nil, contentDisposition: String? = nil, tagging: String? = nil, objectLockMode: ObjectLockMode? = nil, sSECustomerKeyMD5: String? = nil, grantReadACP: String? = nil, grantWriteACP: String? = nil, cacheControl: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, objectLockRetainUntilDate: TimeStamp? = nil, expires: TimeStamp? = nil, key: String, sSECustomerKey: String? = nil, contentType: String? = nil, sSEKMSKeyId: String? = nil) {
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.acl = acl
            self.grantFullControl = grantFullControl
            self.metadata = metadata
            self.grantRead = grantRead
            self.contentLanguage = contentLanguage
            self.websiteRedirectLocation = websiteRedirectLocation
            self.bucket = bucket
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestPayer = requestPayer
            self.contentEncoding = contentEncoding
            self.storageClass = storageClass
            self.contentDisposition = contentDisposition
            self.tagging = tagging
            self.objectLockMode = objectLockMode
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.grantReadACP = grantReadACP
            self.grantWriteACP = grantWriteACP
            self.cacheControl = cacheControl
            self.serverSideEncryption = serverSideEncryption
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.expires = expires
            self.key = key
            self.sSECustomerKey = sSECustomerKey
            self.contentType = contentType
            self.sSEKMSKeyId = sSEKMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case acl = "x-amz-acl"
            case grantFullControl = "x-amz-grant-full-control"
            case metadata = "Metadata"
            case grantRead = "x-amz-grant-read"
            case contentLanguage = "Content-Language"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case bucket = "Bucket"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestPayer = "x-amz-request-payer"
            case contentEncoding = "Content-Encoding"
            case storageClass = "x-amz-storage-class"
            case contentDisposition = "Content-Disposition"
            case tagging = "x-amz-tagging"
            case objectLockMode = "x-amz-object-lock-mode"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case grantReadACP = "x-amz-grant-read-acp"
            case grantWriteACP = "x-amz-grant-write-acp"
            case cacheControl = "Cache-Control"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case expires = "Expires"
            case key = "Key"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case contentType = "Content-Type"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
        }
    }

    public struct GetObjectRetentionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The bucket containing the object whose retention settings you want to retrieve.
        public let bucket: String
        /// The key name for the object whose retention settings you want to retrieve.
        public let key: String
        public let requestPayer: RequestPayer?
        /// The version ID for the object whose retention settings you want to retrieve.
        public let versionId: String?

        public init(bucket: String, key: String, requestPayer: RequestPayer? = nil, versionId: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
        }
    }

    public struct TopicConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Topic", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list)
        ]
        public let id: String?
        /// Bucket event for which to send notifications.
        public let event: Event?
        /// Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
        public let topic: String?
        public let events: [Event]?

        public init(id: String? = nil, event: Event? = nil, topic: String? = nil, events: [Event]? = nil) {
            self.id = id
            self.event = event
            self.topic = topic
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case event = "Event"
            case topic = "Topic"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case events = "_Event"
        }
    }

    public struct GetBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CreateBucketRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CreateBucketConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "CreateBucketConfiguration", location: .body(locationName: "CreateBucketConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectLockEnabledForBucket", location: .header(locationName: "x-amz-bucket-object-lock-enabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string)
        ]
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        public let createBucketConfiguration: CreateBucketConfiguration?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        public let bucket: String
        /// Specifies whether you want S3 Object Lock to be enabled for the new bucket.
        public let objectLockEnabledForBucket: Bool?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?

        public init(grantFullControl: String? = nil, grantReadACP: String? = nil, createBucketConfiguration: CreateBucketConfiguration? = nil, grantRead: String? = nil, grantWrite: String? = nil, acl: BucketCannedACL? = nil, bucket: String, objectLockEnabledForBucket: Bool? = nil, grantWriteACP: String? = nil) {
            self.grantFullControl = grantFullControl
            self.grantReadACP = grantReadACP
            self.createBucketConfiguration = createBucketConfiguration
            self.grantRead = grantRead
            self.grantWrite = grantWrite
            self.acl = acl
            self.bucket = bucket
            self.objectLockEnabledForBucket = objectLockEnabledForBucket
            self.grantWriteACP = grantWriteACP
        }

        private enum CodingKeys: String, CodingKey {
            case grantFullControl = "x-amz-grant-full-control"
            case grantReadACP = "x-amz-grant-read-acp"
            case createBucketConfiguration = "CreateBucketConfiguration"
            case grantRead = "x-amz-grant-read"
            case grantWrite = "x-amz-grant-write"
            case acl = "x-amz-acl"
            case bucket = "Bucket"
            case objectLockEnabledForBucket = "x-amz-bucket-object-lock-enabled"
            case grantWriteACP = "x-amz-grant-write-acp"
        }
    }

    public enum ExpirationStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct RestoreObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "RestoreOutputPath", location: .header(locationName: "x-amz-restore-output-path"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        /// Indicates the path in the provided S3 output location where Select results will be restored to.
        public let restoreOutputPath: String?

        public init(requestCharged: RequestCharged? = nil, restoreOutputPath: String? = nil) {
            self.requestCharged = requestCharged
            self.restoreOutputPath = restoreOutputPath
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case restoreOutputPath = "x-amz-restore-output-path"
        }
    }

    public struct MetricsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
        public let filter: MetricsFilter?
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(filter: MetricsFilter? = nil, id: String) {
            self.filter = filter
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case id = "Id"
        }
    }

    public struct PutObjectLockConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ObjectLockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectLockConfiguration", location: .body(locationName: "ObjectLockConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Token", location: .header(locationName: "x-amz-bucket-object-lock-token"), required: false, type: .string)
        ]
        /// The bucket whose Object Lock configuration you want to create or replace.
        public let bucket: String
        /// The Object Lock configuration that you want to apply to the specified bucket.
        public let objectLockConfiguration: ObjectLockConfiguration?
        /// The MD5 hash for the request body.
        public let contentMD5: String?
        public let requestPayer: RequestPayer?
        public let token: String?

        public init(bucket: String, objectLockConfiguration: ObjectLockConfiguration? = nil, contentMD5: String? = nil, requestPayer: RequestPayer? = nil, token: String? = nil) {
            self.bucket = bucket
            self.objectLockConfiguration = objectLockConfiguration
            self.contentMD5 = contentMD5
            self.requestPayer = requestPayer
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case objectLockConfiguration = "ObjectLockConfiguration"
            case contentMD5 = "Content-MD5"
            case requestPayer = "x-amz-request-payer"
            case token = "x-amz-bucket-object-lock-token"
        }
    }

    public struct DeleteObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Errors", location: .body(locationName: "Error"), required: false, type: .list), 
            AWSShapeMember(label: "Deleted", required: false, type: .list)
        ]
        public let requestCharged: RequestCharged?
        public let errors: [Error]?
        public let deleted: [DeletedObject]?

        public init(requestCharged: RequestCharged? = nil, errors: [Error]? = nil, deleted: [DeletedObject]? = nil) {
            self.requestCharged = requestCharged
            self.errors = errors
            self.deleted = deleted
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case errors = "Error"
            case deleted = "Deleted"
        }
    }

    public struct ListBucketInventoryConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "InventoryConfigurationList", location: .body(locationName: "InventoryConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated.
        public let isTruncated: Bool?
        /// The list of inventory configurations for a bucket.
        public let inventoryConfigurationList: [InventoryConfiguration]?
        /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
        public let continuationToken: String?
        /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?

        public init(isTruncated: Bool? = nil, inventoryConfigurationList: [InventoryConfiguration]? = nil, continuationToken: String? = nil, nextContinuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.inventoryConfigurationList = inventoryConfigurationList
            self.continuationToken = continuationToken
            self.nextContinuationToken = nextContinuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case inventoryConfigurationList = "InventoryConfiguration"
            case continuationToken = "ContinuationToken"
            case nextContinuationToken = "NextContinuationToken"
        }
    }

    public struct DeleteBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the metrics configuration to retrieve.
        public let bucket: String
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct GetObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// A list of grants.
        public let grants: Grants?
        public let requestCharged: RequestCharged?
        public let owner: Owner?

        public init(grants: Grants? = nil, requestCharged: RequestCharged? = nil, owner: Owner? = nil) {
            self.grants = grants
            self.requestCharged = requestCharged
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "AccessControlList"
            case requestCharged = "x-amz-request-charged"
            case owner = "Owner"
        }
    }

    public struct GetBucketLifecycleConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [LifecycleRule]?

        public init(rules: [LifecycleRule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// Name of the tag.
        public let key: String
        /// Value of the tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct MetadataEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let value: String?
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public enum StorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        case glacier = "GLACIER"
        public var description: String { return self.rawValue }
    }

    public struct ServerSideEncryptionRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyServerSideEncryptionByDefault", required: false, type: .structure)
        ]
        /// Describes the default server-side encryption to apply to new objects in the bucket. If Put Object request does not specify any server-side encryption, this default encryption will be applied.
        public let applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault?

        public init(applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault? = nil) {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        }
    }

    public struct DeleteBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the metrics configuration to delete.
        public let bucket: String
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct UserMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetadataEntry", required: false, type: .list)
        ]
        public let metadataEntry: [MetadataEntry]?

        public init(metadataEntry: [MetadataEntry]? = nil) {
            self.metadataEntry = metadataEntry
        }

        private enum CodingKeys: String, CodingKey {
            case metadataEntry = "MetadataEntry"
        }
    }

    public struct RoutingRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Condition", required: false, type: .structure), 
            AWSShapeMember(label: "Redirect", required: true, type: .structure)
        ]
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public let condition: Condition?
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
        public let redirect: Redirect

        public init(condition: Condition? = nil, redirect: Redirect) {
            self.condition = condition
            self.redirect = redirect
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case redirect = "Redirect"
        }
    }

    public enum QuoteFields: String, CustomStringConvertible, Codable {
        case always = "ALWAYS"
        case asneeded = "ASNEEDED"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectRetentionOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Retention"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Retention", required: false, type: .structure)
        ]
        /// The container element for an object's retention settings.
        public let retention: ObjectLockRetention?

        public init(retention: ObjectLockRetention? = nil) {
            self.retention = retention
        }

        private enum CodingKeys: String, CodingKey {
            case retention = "Retention"
        }
    }

    public struct ProgressEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Progress event details.
        public let details: Progress?

        public init(details: Progress? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct LifecycleRuleAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public let tags: TagSet?
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct CommonPrefix: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        public let prefix: String?

        public init(prefix: String? = nil) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public struct GetPublicAccessBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to retrieve. 
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketMetricsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsConfiguration", required: false, type: .structure)
        ]
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration?

        public init(metricsConfiguration: MetricsConfiguration? = nil) {
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public struct PutObjectRetentionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Retention"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Retention", location: .body(locationName: "Retention"), required: false, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "BypassGovernanceRetention", location: .header(locationName: "x-amz-bypass-governance-retention"), required: false, type: .boolean), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The container element for the Object Retention configuration.
        public let retention: ObjectLockRetention?
        /// The key name for the object that you want to apply this Object Retention configuration to.
        public let key: String
        public let requestPayer: RequestPayer?
        /// The MD5 hash for the request body.
        public let contentMD5: String?
        /// The bucket that contains the object you want to apply this Object Retention configuration to.
        public let bucket: String
        /// Indicates whether this operation should bypass Governance-mode restrictions.j
        public let bypassGovernanceRetention: Bool?
        /// The version ID for the object that you want to apply this Object Retention configuration to.
        public let versionId: String?

        public init(retention: ObjectLockRetention? = nil, key: String, requestPayer: RequestPayer? = nil, contentMD5: String? = nil, bucket: String, bypassGovernanceRetention: Bool? = nil, versionId: String? = nil) {
            self.retention = retention
            self.key = key
            self.requestPayer = requestPayer
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.bypassGovernanceRetention = bypassGovernanceRetention
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case retention = "Retention"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case bypassGovernanceRetention = "x-amz-bypass-governance-retention"
            case versionId = "versionId"
        }
    }

    public struct IndexDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Suffix", required: true, type: .string)
        ]
        /// A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
        public let suffix: String

        public init(suffix: String) {
            self.suffix = suffix
        }

        private enum CodingKeys: String, CodingKey {
            case suffix = "Suffix"
        }
    }

    public enum SseKmsEncryptedObjectsStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct Redirect: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplaceKeyPrefixWith", required: false, type: .string), 
            AWSShapeMember(label: "ReplaceKeyWith", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "HostName", required: false, type: .string), 
            AWSShapeMember(label: "HttpRedirectCode", required: false, type: .string)
        ]
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
        public let replaceKeyPrefixWith: String?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
        public let replaceKeyWith: String?
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?
        /// The host name to use in the redirect request.
        public let hostName: String?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public let httpRedirectCode: String?

        public init(replaceKeyPrefixWith: String? = nil, replaceKeyWith: String? = nil, protocol: Protocol? = nil, hostName: String? = nil, httpRedirectCode: String? = nil) {
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.replaceKeyWith = replaceKeyWith
            self.`protocol` = `protocol`
            self.hostName = hostName
            self.httpRedirectCode = httpRedirectCode
        }

        private enum CodingKeys: String, CodingKey {
            case replaceKeyPrefixWith = "ReplaceKeyPrefixWith"
            case replaceKeyWith = "ReplaceKeyWith"
            case `protocol` = "Protocol"
            case hostName = "HostName"
            case httpRedirectCode = "HttpRedirectCode"
        }
    }

    public struct Grantee: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "xsi:type"), required: true, type: .enum), 
            AWSShapeMember(label: "URI", required: false, type: .string), 
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        /// Type of grantee
        public let `type`: `Type`
        /// URI of the grantee group.
        public let uri: String?
        /// The canonical user ID of the grantee.
        public let id: String?
        /// Email address of the grantee.
        public let emailAddress: String?
        /// Screen name of the grantee.
        public let displayName: String?

        public init(type: `Type`, uri: String? = nil, id: String? = nil, emailAddress: String? = nil, displayName: String? = nil) {
            self.`type` = `type`
            self.uri = uri
            self.id = id
            self.emailAddress = emailAddress
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "xsi:type"
            case uri = "URI"
            case id = "ID"
            case emailAddress = "EmailAddress"
            case displayName = "DisplayName"
        }
    }

    public struct InventoryS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "AccountId", required: false, type: .string)
        ]
        /// The Amazon resource name (ARN) of the bucket where inventory results will be published.
        public let bucket: String
        /// The prefix that is prepended to all inventory results.
        public let prefix: String?
        /// Specifies the output format of the inventory results.
        public let format: InventoryFormat
        /// Contains the type of server-side encryption used to encrypt the inventory results.
        public let encryption: InventoryEncryption?
        /// The ID of the account that owns the destination bucket.
        public let accountId: String?

        public init(bucket: String, prefix: String? = nil, format: InventoryFormat, encryption: InventoryEncryption? = nil, accountId: String? = nil) {
            self.bucket = bucket
            self.prefix = prefix
            self.format = format
            self.encryption = encryption
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case prefix = "Prefix"
            case format = "Format"
            case encryption = "Encryption"
            case accountId = "AccountId"
        }
    }

    public struct InventoryEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSES3", location: .body(locationName: "SSE-S3"), required: false, type: .structure), 
            AWSShapeMember(label: "SSEKMS", location: .body(locationName: "SSE-KMS"), required: false, type: .structure)
        ]
        /// Specifies the use of SSE-S3 to encrypt delivered Inventory reports.
        public let sses3: SSES3?
        /// Specifies the use of SSE-KMS to encrypt delivered Inventory reports.
        public let ssekms: SSEKMS?

        public init(sses3: SSES3? = nil, ssekms: SSEKMS? = nil) {
            self.sses3 = sses3
            self.ssekms = ssekms
        }

        private enum CodingKeys: String, CodingKey {
            case sses3 = "SSE-S3"
            case ssekms = "SSE-KMS"
        }
    }

    public struct PutBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "InventoryConfiguration", location: .body(locationName: "InventoryConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket where the inventory configuration will be stored.
        public let bucket: String
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, inventoryConfiguration: InventoryConfiguration, id: String) {
            self.bucket = bucket
            self.inventoryConfiguration = inventoryConfiguration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case inventoryConfiguration = "InventoryConfiguration"
            case id = "id"
        }
    }

    public struct Grants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [Grant]?

        public init(grant: [Grant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public struct GetBucketCorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: false, type: .list)
        ]
        public let cORSRules: [CORSRule]?

        public init(cORSRules: [CORSRule]? = nil) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicaKmsKeyID", required: false, type: .string)
        ]
        /// The ID of the AWS KMS key for the AWS Region where the destination bucket resides. Amazon S3 uses this key to encrypt the replica object. 
        public let replicaKmsKeyID: String?

        public init(replicaKmsKeyID: String? = nil) {
            self.replicaKmsKeyID = replicaKmsKeyID
        }

        private enum CodingKeys: String, CodingKey {
            case replicaKmsKeyID = "ReplicaKmsKeyID"
        }
    }

    public struct StorageClassAnalysis: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataExport", required: false, type: .structure)
        ]
        /// A container used to describe how data related to the storage class analysis should be exported.
        public let dataExport: StorageClassAnalysisDataExport?

        public init(dataExport: StorageClassAnalysisDataExport? = nil) {
            self.dataExport = dataExport
        }

        private enum CodingKeys: String, CodingKey {
            case dataExport = "DataExport"
        }
    }

    public struct GetBucketRequestPaymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: false, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer?

        public init(payer: Payer? = nil) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public struct GetBucketWebsiteOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure), 
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure), 
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure)
        ]
        public let redirectAllRequestsTo: RedirectAllRequestsTo?
        public let routingRules: RoutingRules?
        public let errorDocument: ErrorDocument?
        public let indexDocument: IndexDocument?

        public init(redirectAllRequestsTo: RedirectAllRequestsTo? = nil, routingRules: RoutingRules? = nil, errorDocument: ErrorDocument? = nil, indexDocument: IndexDocument? = nil) {
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.routingRules = routingRules
            self.errorDocument = errorDocument
            self.indexDocument = indexDocument
        }

        private enum CodingKeys: String, CodingKey {
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
            case routingRules = "RoutingRules"
            case errorDocument = "ErrorDocument"
            case indexDocument = "IndexDocument"
        }
    }

    public struct AccelerateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct InputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JSON", required: false, type: .structure), 
            AWSShapeMember(label: "CSV", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionType", required: false, type: .enum), 
            AWSShapeMember(label: "Parquet", required: false, type: .structure)
        ]
        /// Specifies JSON as object's input serialization format.
        public let json: JSONInput?
        /// Describes the serialization of a CSV-encoded object.
        public let csv: CSVInput?
        /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
        public let compressionType: CompressionType?
        /// Specifies Parquet as object's input serialization format.
        public let parquet: ParquetInput?

        public init(json: JSONInput? = nil, csv: CSVInput? = nil, compressionType: CompressionType? = nil, parquet: ParquetInput? = nil) {
            self.json = json
            self.csv = csv
            self.compressionType = compressionType
            self.parquet = parquet
        }

        private enum CodingKeys: String, CodingKey {
            case json = "JSON"
            case csv = "CSV"
            case compressionType = "CompressionType"
            case parquet = "Parquet"
        }
    }

    public enum TaggingDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct CloudFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFunction", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "InvocationRole", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list)
        ]
        public let cloudFunction: String?
        public let id: String?
        public let event: Event?
        public let invocationRole: String?
        public let events: [Event]?

        public init(cloudFunction: String? = nil, id: String? = nil, event: Event? = nil, invocationRole: String? = nil, events: [Event]? = nil) {
            self.cloudFunction = cloudFunction
            self.id = id
            self.event = event
            self.invocationRole = invocationRole
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFunction = "CloudFunction"
            case id = "Id"
            case event = "Event"
            case invocationRole = "InvocationRole"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case events = "_Event"
        }
    }

    public struct RequestPaymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: true, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer

        public init(payer: Payer) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public enum InventoryFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case orc = "ORC"
        case parquet = "Parquet"
        public var description: String { return self.rawValue }
    }

    public struct ListBucketAnalyticsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket from which analytics configurations are retrieved.
        public let bucket: String
        /// The ContinuationToken that represents a placeholder from where this request should begin.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpErrorCodeReturnedEquals", required: false, type: .string), 
            AWSShapeMember(label: "KeyPrefixEquals", required: false, type: .string)
        ]
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public let httpErrorCodeReturnedEquals: String?
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        public let keyPrefixEquals: String?

        public init(httpErrorCodeReturnedEquals: String? = nil, keyPrefixEquals: String? = nil) {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }

        private enum CodingKeys: String, CodingKey {
            case httpErrorCodeReturnedEquals = "HttpErrorCodeReturnedEquals"
            case keyPrefixEquals = "KeyPrefixEquals"
        }
    }

    public struct Buckets: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .list)
        ]
        public let bucket: [Bucket]?

        public init(bucket: [Bucket]? = nil) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DeletePublicAccessBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The Amazon S3 bucket whose PublicAccessBlock configuration you want to delete. 
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CopyObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "MetadataDirective", location: .header(locationName: "x-amz-metadata-directive"), required: false, type: .enum), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TaggingDirective", location: .header(locationName: "x-amz-tagging-directive"), required: false, type: .enum), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string)
        ]
        /// Specifies whether you want to apply a Legal Hold to the copied object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.
        public let metadataDirective: MetadataDirective?
        public let bucket: String
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let requestPayer: RequestPayer?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// The tag-set for the object destination object this value must be used in conjunction with the TaggingDirective. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// The Object Lock mode that you want to apply to the copied object.
        public let objectLockMode: ObjectLockMode?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The date and time when you want the copied object's Object Lock to expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request.
        public let taggingDirective: TaggingDirective?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        public let key: String
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?

        public init(objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, copySourceIfMatch: String? = nil, acl: ObjectCannedACL? = nil, copySourceSSECustomerAlgorithm: String? = nil, grantFullControl: String? = nil, metadata: [String: String]? = nil, grantRead: String? = nil, contentLanguage: String? = nil, metadataDirective: MetadataDirective? = nil, bucket: String, sSECustomerAlgorithm: String? = nil, requestPayer: RequestPayer? = nil, websiteRedirectLocation: String? = nil, contentEncoding: String? = nil, storageClass: StorageClass? = nil, copySourceSSECustomerKeyMD5: String? = nil, tagging: String? = nil, contentDisposition: String? = nil, objectLockMode: ObjectLockMode? = nil, sSECustomerKeyMD5: String? = nil, grantReadACP: String? = nil, grantWriteACP: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil, serverSideEncryption: ServerSideEncryption? = nil, copySourceIfNoneMatch: String? = nil, cacheControl: String? = nil, objectLockRetainUntilDate: TimeStamp? = nil, taggingDirective: TaggingDirective? = nil, expires: TimeStamp? = nil, copySourceSSECustomerKey: String? = nil, key: String, copySourceIfModifiedSince: TimeStamp? = nil, contentType: String? = nil, copySource: String, sSECustomerKey: String? = nil, sSEKMSKeyId: String? = nil) {
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.copySourceIfMatch = copySourceIfMatch
            self.acl = acl
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.grantFullControl = grantFullControl
            self.metadata = metadata
            self.grantRead = grantRead
            self.contentLanguage = contentLanguage
            self.metadataDirective = metadataDirective
            self.bucket = bucket
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestPayer = requestPayer
            self.websiteRedirectLocation = websiteRedirectLocation
            self.contentEncoding = contentEncoding
            self.storageClass = storageClass
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.tagging = tagging
            self.contentDisposition = contentDisposition
            self.objectLockMode = objectLockMode
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.grantReadACP = grantReadACP
            self.grantWriteACP = grantWriteACP
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.serverSideEncryption = serverSideEncryption
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.cacheControl = cacheControl
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.taggingDirective = taggingDirective
            self.expires = expires
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.key = key
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.contentType = contentType
            self.copySource = copySource
            self.sSECustomerKey = sSECustomerKey
            self.sSEKMSKeyId = sSEKMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case acl = "x-amz-acl"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case grantFullControl = "x-amz-grant-full-control"
            case metadata = "Metadata"
            case grantRead = "x-amz-grant-read"
            case contentLanguage = "Content-Language"
            case metadataDirective = "x-amz-metadata-directive"
            case bucket = "Bucket"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestPayer = "x-amz-request-payer"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case contentEncoding = "Content-Encoding"
            case storageClass = "x-amz-storage-class"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case tagging = "x-amz-tagging"
            case contentDisposition = "Content-Disposition"
            case objectLockMode = "x-amz-object-lock-mode"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case grantReadACP = "x-amz-grant-read-acp"
            case grantWriteACP = "x-amz-grant-write-acp"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case cacheControl = "Cache-Control"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case taggingDirective = "x-amz-tagging-directive"
            case expires = "Expires"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case key = "Key"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case contentType = "Content-Type"
            case copySource = "x-amz-copy-source"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
        }
    }

    public struct PutBucketNotificationConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let notificationConfiguration: NotificationConfiguration

        public init(bucket: String, notificationConfiguration: NotificationConfiguration) {
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case notificationConfiguration = "NotificationConfiguration"
        }
    }

    public struct CreateBucketConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        /// Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct DeleteObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        /// The versionId of the object the tag-set was removed from.
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public struct GetBucketAccelerateConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct GetBucketAnalyticsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure)
        ]
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration?

        public init(analyticsConfiguration: AnalyticsConfiguration? = nil) {
            self.analyticsConfiguration = analyticsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsConfiguration = "AnalyticsConfiguration"
        }
    }

    public struct MetricsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// The tag used when evaluating a metrics filter.
        public let tag: Tag?
        /// The prefix used when evaluating a metrics filter.
        public let prefix: String?
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public let and: MetricsAndOperator?

        public init(tag: Tag? = nil, prefix: String? = nil, and: MetricsAndOperator? = nil) {
            self.tag = tag
            self.prefix = prefix
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case prefix = "Prefix"
            case and = "And"
        }
    }

    public struct Tagging: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public enum ReplicationRuleStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct RequestProgress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct GetObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentRange", location: .header(locationName: "Content-Range"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "TagCount", location: .header(locationName: "x-amz-tagging-count"), required: false, type: .integer), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer)
        ]
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// Indicates whether this object has an active legal hold. This field is only returned if you have permission to view an object's legal hold status.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The language the content is in.
        public let contentLanguage: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        public let storageClass: StorageClass?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// The Object Lock mode currently in place for this object.
        public let objectLockMode: ObjectLockMode?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let acceptRanges: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// The date and time when this object's Object Lock will expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// The portion of the object returned in the response.
        public let contentRange: String?
        /// Version of the object.
        public let versionId: String?
        /// The number of tags, if any, on the object.
        public let tagCount: Int32?
        public let requestCharged: RequestCharged?
        /// Object data.
        public let body: Data?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        public let replicationStatus: ReplicationStatus?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// The count of parts this object has.
        public let partsCount: Int32?

        public init(expiration: String? = nil, objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, metadata: [String: String]? = nil, contentLanguage: String? = nil, websiteRedirectLocation: String? = nil, sSECustomerAlgorithm: String? = nil, contentEncoding: String? = nil, restore: String? = nil, storageClass: StorageClass? = nil, contentDisposition: String? = nil, objectLockMode: ObjectLockMode? = nil, sSECustomerKeyMD5: String? = nil, acceptRanges: String? = nil, cacheControl: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, lastModified: TimeStamp? = nil, contentLength: Int64? = nil, objectLockRetainUntilDate: TimeStamp? = nil, contentRange: String? = nil, versionId: String? = nil, tagCount: Int32? = nil, requestCharged: RequestCharged? = nil, body: Data? = nil, missingMeta: Int32? = nil, replicationStatus: ReplicationStatus? = nil, expires: TimeStamp? = nil, eTag: String? = nil, contentType: String? = nil, deleteMarker: Bool? = nil, sSEKMSKeyId: String? = nil, partsCount: Int32? = nil) {
            self.expiration = expiration
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.metadata = metadata
            self.contentLanguage = contentLanguage
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentEncoding = contentEncoding
            self.restore = restore
            self.storageClass = storageClass
            self.contentDisposition = contentDisposition
            self.objectLockMode = objectLockMode
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acceptRanges = acceptRanges
            self.cacheControl = cacheControl
            self.serverSideEncryption = serverSideEncryption
            self.lastModified = lastModified
            self.contentLength = contentLength
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.contentRange = contentRange
            self.versionId = versionId
            self.tagCount = tagCount
            self.requestCharged = requestCharged
            self.body = body
            self.missingMeta = missingMeta
            self.replicationStatus = replicationStatus
            self.expires = expires
            self.eTag = eTag
            self.contentType = contentType
            self.deleteMarker = deleteMarker
            self.sSEKMSKeyId = sSEKMSKeyId
            self.partsCount = partsCount
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case metadata = "Metadata"
            case contentLanguage = "Content-Language"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentEncoding = "Content-Encoding"
            case restore = "x-amz-restore"
            case storageClass = "x-amz-storage-class"
            case contentDisposition = "Content-Disposition"
            case objectLockMode = "x-amz-object-lock-mode"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case acceptRanges = "accept-ranges"
            case cacheControl = "Cache-Control"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case lastModified = "Last-Modified"
            case contentLength = "Content-Length"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case contentRange = "Content-Range"
            case versionId = "x-amz-version-id"
            case tagCount = "x-amz-tagging-count"
            case requestCharged = "x-amz-request-charged"
            case body = "Body"
            case missingMeta = "x-amz-missing-meta"
            case replicationStatus = "x-amz-replication-status"
            case expires = "Expires"
            case eTag = "ETag"
            case contentType = "Content-Type"
            case deleteMarker = "x-amz-delete-marker"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case partsCount = "x-amz-mp-parts-count"
        }
    }

    public struct AnalyticsS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "BucketAccountId", required: false, type: .string)
        ]
        /// The Amazon resource name (ARN) of the bucket to which data is exported.
        public let bucket: String
        /// The prefix to use when exporting data. The exported data begins with this prefix.
        public let prefix: String?
        /// The file format used when exporting data to Amazon S3.
        public let format: AnalyticsS3ExportFileFormat
        /// The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.
        public let bucketAccountId: String?

        public init(bucket: String, prefix: String? = nil, format: AnalyticsS3ExportFileFormat, bucketAccountId: String? = nil) {
            self.bucket = bucket
            self.prefix = prefix
            self.format = format
            self.bucketAccountId = bucketAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case prefix = "Prefix"
            case format = "Format"
            case bucketAccountId = "BucketAccountId"
        }
    }

    public struct GetBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ServerSideEncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        /// Container for information about a particular server-side encryption configuration rule.
        public let rules: [ServerSideEncryptionRule]

        public init(rules: [ServerSideEncryptionRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct Initiator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        /// If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
        public let id: String?
        /// Name of the Principal.
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct ListObjectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let encodingType: EncodingType?
        /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// Specifies the key to start with when listing objects in a bucket.
        public let marker: String?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        public let bucket: String

        public init(encodingType: EncodingType? = nil, requestPayer: RequestPayer? = nil, marker: String? = nil, maxKeys: Int32? = nil, prefix: String? = nil, delimiter: String? = nil, bucket: String) {
            self.encodingType = encodingType
            self.requestPayer = requestPayer
            self.marker = marker
            self.maxKeys = maxKeys
            self.prefix = prefix
            self.delimiter = delimiter
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "encoding-type"
            case requestPayer = "x-amz-request-payer"
            case marker = "marker"
            case maxKeys = "max-keys"
            case prefix = "prefix"
            case delimiter = "delimiter"
            case bucket = "Bucket"
        }
    }

    public struct ObjectLockLegalHold: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Indicates whether the specified object has a Legal Hold in place.
        public let status: ObjectLockLegalHoldStatus?

        public init(status: ObjectLockLegalHoldStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct TargetGrants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [TargetGrant]?

        public init(grant: [TargetGrant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public struct ListPartsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list), 
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "PartNumberMarker", required: false, type: .integer), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "MaxParts", required: false, type: .integer), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "NextPartNumberMarker", required: false, type: .integer), 
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string), 
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp)
        ]
        public let parts: [Part]?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// Part number after which listing begins.
        public let partNumberMarker: Int32?
        public let owner: Owner?
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String?
        /// Maximum number of parts that were allowed in the response.
        public let maxParts: Int32?
        public let requestCharged: RequestCharged?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Indicates whether the returned list of parts is truncated.
        public let isTruncated: Bool?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
        public let nextPartNumberMarker: Int32?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?

        public init(parts: [Part]? = nil, bucket: String? = nil, initiator: Initiator? = nil, partNumberMarker: Int32? = nil, owner: Owner? = nil, uploadId: String? = nil, maxParts: Int32? = nil, requestCharged: RequestCharged? = nil, storageClass: StorageClass? = nil, isTruncated: Bool? = nil, key: String? = nil, nextPartNumberMarker: Int32? = nil, abortRuleId: String? = nil, abortDate: TimeStamp? = nil) {
            self.parts = parts
            self.bucket = bucket
            self.initiator = initiator
            self.partNumberMarker = partNumberMarker
            self.owner = owner
            self.uploadId = uploadId
            self.maxParts = maxParts
            self.requestCharged = requestCharged
            self.storageClass = storageClass
            self.isTruncated = isTruncated
            self.key = key
            self.nextPartNumberMarker = nextPartNumberMarker
            self.abortRuleId = abortRuleId
            self.abortDate = abortDate
        }

        private enum CodingKeys: String, CodingKey {
            case parts = "Part"
            case bucket = "Bucket"
            case initiator = "Initiator"
            case partNumberMarker = "PartNumberMarker"
            case owner = "Owner"
            case uploadId = "UploadId"
            case maxParts = "MaxParts"
            case requestCharged = "x-amz-request-charged"
            case storageClass = "StorageClass"
            case isTruncated = "IsTruncated"
            case key = "Key"
            case nextPartNumberMarker = "NextPartNumberMarker"
            case abortRuleId = "x-amz-abort-rule-id"
            case abortDate = "x-amz-abort-date"
        }
    }

    public struct InventoryDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        public let s3BucketDestination: InventoryS3BucketDestination

        public init(s3BucketDestination: InventoryS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public struct PutObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let requestCharged: RequestCharged?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Version of the object.
        public let versionId: String?

        public init(expiration: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, eTag: String? = nil, sSECustomerKeyMD5: String? = nil, requestCharged: RequestCharged? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, versionId: String? = nil) {
            self.expiration = expiration
            self.serverSideEncryption = serverSideEncryption
            self.eTag = eTag
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.requestCharged = requestCharged
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case eTag = "ETag"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case requestCharged = "x-amz-request-charged"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case versionId = "x-amz-version-id"
        }
    }

    public struct AbortMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public enum JSONType: String, CustomStringConvertible, Codable {
        case document = "DOCUMENT"
        case lines = "LINES"
        public var description: String { return self.rawValue }
    }

    public struct ListMultipartUploadsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Uploads", location: .body(locationName: "Upload"), required: false, type: .list), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "UploadIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "NextUploadIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "MaxUploads", required: false, type: .integer), 
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list)
        ]
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        public let uploads: [MultipartUpload]?
        /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
        public let isTruncated: Bool?
        /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
        public let prefix: String?
        /// Upload ID after which listing began.
        public let uploadIdMarker: String?
        public let delimiter: String?
        /// The key at or after which the listing began.
        public let keyMarker: String?
        /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
        public let nextUploadIdMarker: String?
        /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        /// Maximum number of multipart uploads that could have been included in the response.
        public let maxUploads: Int32?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        public let commonPrefixes: [CommonPrefix]?

        public init(encodingType: EncodingType? = nil, uploads: [MultipartUpload]? = nil, isTruncated: Bool? = nil, prefix: String? = nil, uploadIdMarker: String? = nil, delimiter: String? = nil, keyMarker: String? = nil, nextUploadIdMarker: String? = nil, nextKeyMarker: String? = nil, maxUploads: Int32? = nil, bucket: String? = nil, commonPrefixes: [CommonPrefix]? = nil) {
            self.encodingType = encodingType
            self.uploads = uploads
            self.isTruncated = isTruncated
            self.prefix = prefix
            self.uploadIdMarker = uploadIdMarker
            self.delimiter = delimiter
            self.keyMarker = keyMarker
            self.nextUploadIdMarker = nextUploadIdMarker
            self.nextKeyMarker = nextKeyMarker
            self.maxUploads = maxUploads
            self.bucket = bucket
            self.commonPrefixes = commonPrefixes
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "EncodingType"
            case uploads = "Upload"
            case isTruncated = "IsTruncated"
            case prefix = "Prefix"
            case uploadIdMarker = "UploadIdMarker"
            case delimiter = "Delimiter"
            case keyMarker = "KeyMarker"
            case nextUploadIdMarker = "NextUploadIdMarker"
            case nextKeyMarker = "NextKeyMarker"
            case maxUploads = "MaxUploads"
            case bucket = "Bucket"
            case commonPrefixes = "CommonPrefixes"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LambdaFunctionConfigurations", location: .body(locationName: "CloudFunctionConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "TopicConfigurations", location: .body(locationName: "TopicConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "QueueConfigurations", location: .body(locationName: "QueueConfiguration"), required: false, type: .list)
        ]
        public let lambdaFunctionConfigurations: [LambdaFunctionConfiguration]?
        public let topicConfigurations: [TopicConfiguration]?
        public let queueConfigurations: [QueueConfiguration]?

        public init(lambdaFunctionConfigurations: [LambdaFunctionConfiguration]? = nil, topicConfigurations: [TopicConfiguration]? = nil, queueConfigurations: [QueueConfiguration]? = nil) {
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
            self.topicConfigurations = topicConfigurations
            self.queueConfigurations = queueConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
            case topicConfigurations = "TopicConfiguration"
            case queueConfigurations = "QueueConfiguration"
        }
    }

    public struct GetBucketVersioningRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ConfirmRemoveSelfBucketAccess", location: .header(locationName: "x-amz-confirm-remove-self-bucket-access"), required: false, type: .boolean), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Policy", required: true, type: .string)
        ]
        public let bucket: String
        /// Set this parameter to true to confirm that you want to remove your permissions to change this bucket policy in the future.
        public let confirmRemoveSelfBucketAccess: Bool?
        public let contentMD5: String?
        /// The bucket policy as a JSON document.
        public let policy: String

        public init(bucket: String, confirmRemoveSelfBucketAccess: Bool? = nil, contentMD5: String? = nil, policy: String) {
            self.bucket = bucket
            self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
            self.contentMD5 = contentMD5
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case confirmRemoveSelfBucketAccess = "x-amz-confirm-remove-self-bucket-access"
            case contentMD5 = "Content-MD5"
            case policy = "Policy"
        }
    }

    public struct ListBucketsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Buckets", required: false, type: .structure), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        public let buckets: Buckets?
        public let owner: Owner?

        public init(buckets: Buckets? = nil, owner: Owner? = nil) {
            self.buckets = buckets
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case buckets = "Buckets"
            case owner = "Owner"
        }
    }

    public struct GetObjectTorrentOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let body: Data?
        public let requestCharged: RequestCharged?

        public init(body: Data? = nil, requestCharged: RequestCharged? = nil) {
            self.body = body
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct GetObjectLockConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The bucket whose Object Lock configuration you want to retrieve.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket from which an analytics configuration is retrieved.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public enum InventoryFrequency: String, CustomStringConvertible, Codable {
        case daily = "Daily"
        case weekly = "Weekly"
        public var description: String { return self.rawValue }
    }

    public enum ServerSideEncryption: String, CustomStringConvertible, Codable {
        case aes256 = "AES256"
        case awsKms = "aws:kms"
        public var description: String { return self.rawValue }
    }

    public struct DeleteObjectsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Delete"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "BypassGovernanceRetention", location: .header(locationName: "x-amz-bypass-governance-retention"), required: false, type: .boolean), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Delete", location: .body(locationName: "Delete"), required: true, type: .structure)
        ]
        public let bucket: String
        /// Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. You must have sufficient permissions to perform this operation.
        public let bypassGovernanceRetention: Bool?
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let requestPayer: RequestPayer?
        public let delete: Delete

        public init(bucket: String, bypassGovernanceRetention: Bool? = nil, mfa: String? = nil, requestPayer: RequestPayer? = nil, delete: Delete) {
            self.bucket = bucket
            self.bypassGovernanceRetention = bypassGovernanceRetention
            self.mfa = mfa
            self.requestPayer = requestPayer
            self.delete = delete
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case bypassGovernanceRetention = "x-amz-bypass-governance-retention"
            case mfa = "x-amz-mfa"
            case requestPayer = "x-amz-request-payer"
            case delete = "Delete"
        }
    }

    public enum ExpressionType: String, CustomStringConvertible, Codable {
        case sql = "SQL"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct AccessControlTranslation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: true, type: .enum)
        ]
        /// The override value for the owner of the replica object.
        public let owner: OwnerOverride

        public init(owner: OwnerOverride) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
        }
    }

    public struct InventoryOptionalFields: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Field", required: false, type: .list)
        ]
        public let field: [InventoryOptionalField]?

        public init(field: [InventoryOptionalField]? = nil) {
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case field = "Field"
        }
    }

    public enum RestoreRequestType: String, CustomStringConvertible, Codable {
        case select = "SELECT"
        public var description: String { return self.rawValue }
    }

    public enum BucketCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        public var description: String { return self.rawValue }
    }

    public struct AbortMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        public let uploadId: String
        public let key: String
        public let requestPayer: RequestPayer?

        public init(bucket: String, uploadId: String, key: String, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.uploadId = uploadId
            self.key = key
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case uploadId = "uploadId"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct GetBucketLoggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct ReplicationRuleFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// A container for specifying a tag key and value.  The rule applies only to objects that have the tag in their tag set.
        public let tag: Tag?
        /// An object keyname prefix that identifies the subset of objects to which the rule applies.
        public let prefix: String?
        /// A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example:    If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.   If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.  
        public let and: ReplicationRuleAndOperator?

        public init(tag: Tag? = nil, prefix: String? = nil, and: ReplicationRuleAndOperator? = nil) {
            self.tag = tag
            self.prefix = prefix
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case prefix = "Prefix"
            case and = "And"
        }
    }

    public enum CompressionType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case gzip = "GZIP"
        case bzip2 = "BZIP2"
        public var description: String { return self.rawValue }
    }

    public struct ContinuationEvent: AWSShape {

    }

    public struct GetBucketTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public struct PutObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public struct ListObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "Contents", required: false, type: .list), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list)
        ]
        public let name: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        public let marker: String?
        public let maxKeys: Int32?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        public let prefix: String?
        /// When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
        public let nextMarker: String?
        public let delimiter: String?
        public let contents: [Object]?
        public let commonPrefixes: [CommonPrefix]?

        public init(name: String? = nil, encodingType: EncodingType? = nil, marker: String? = nil, maxKeys: Int32? = nil, isTruncated: Bool? = nil, prefix: String? = nil, nextMarker: String? = nil, delimiter: String? = nil, contents: [Object]? = nil, commonPrefixes: [CommonPrefix]? = nil) {
            self.name = name
            self.encodingType = encodingType
            self.marker = marker
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.prefix = prefix
            self.nextMarker = nextMarker
            self.delimiter = delimiter
            self.contents = contents
            self.commonPrefixes = commonPrefixes
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case encodingType = "EncodingType"
            case marker = "Marker"
            case maxKeys = "MaxKeys"
            case isTruncated = "IsTruncated"
            case prefix = "Prefix"
            case nextMarker = "NextMarker"
            case delimiter = "Delimiter"
            case contents = "Contents"
            case commonPrefixes = "CommonPrefixes"
        }
    }

    public struct AnalyticsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The list of tags to use when evaluating an AND predicate.
        public let tags: TagSet?
        /// The prefix to use when evaluating an AND predicate.
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct GetBucketAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ObjectIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// Key name of the object to delete.
        public let key: String
        /// VersionId for the specific version of the object to delete.
        public let versionId: String?

        public init(key: String, versionId: String? = nil) {
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case versionId = "VersionId"
        }
    }

    public struct Object: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        public let eTag: String?
        /// The class of storage used to store the object.
        public let storageClass: ObjectStorageClass?
        public let lastModified: TimeStamp?
        public let owner: Owner?
        public let key: String?
        public let size: Int32?

        public init(eTag: String? = nil, storageClass: ObjectStorageClass? = nil, lastModified: TimeStamp? = nil, owner: Owner? = nil, key: String? = nil, size: Int32? = nil) {
            self.eTag = eTag
            self.storageClass = storageClass
            self.lastModified = lastModified
            self.owner = owner
            self.key = key
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case storageClass = "StorageClass"
            case lastModified = "LastModified"
            case owner = "Owner"
            case key = "Key"
            case size = "Size"
        }
    }

    public struct PutBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CORSConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "CORSConfiguration", location: .body(locationName: "CORSConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let cORSConfiguration: CORSConfiguration
        public let contentMD5: String?

        public init(bucket: String, cORSConfiguration: CORSConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.cORSConfiguration = cORSConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case cORSConfiguration = "CORSConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct CopyObjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        public let eTag: String?
        public let lastModified: TimeStamp?

        public init(eTag: String? = nil, lastModified: TimeStamp? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case lastModified = "LastModified"
        }
    }

    public struct DeleteBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WebsiteConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteConfiguration", location: .body(locationName: "WebsiteConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let websiteConfiguration: WebsiteConfiguration

        public init(bucket: String, contentMD5: String? = nil, websiteConfiguration: WebsiteConfiguration) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.websiteConfiguration = websiteConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case websiteConfiguration = "WebsiteConfiguration"
        }
    }

    public struct PutBucketVersioningRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "VersioningConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "VersioningConfiguration", location: .body(locationName: "VersioningConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let contentMD5: String?
        public let versioningConfiguration: VersioningConfiguration

        public init(bucket: String, mfa: String? = nil, contentMD5: String? = nil, versioningConfiguration: VersioningConfiguration) {
            self.bucket = bucket
            self.mfa = mfa
            self.contentMD5 = contentMD5
            self.versioningConfiguration = versioningConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case mfa = "x-amz-mfa"
            case contentMD5 = "Content-MD5"
            case versioningConfiguration = "VersioningConfiguration"
        }
    }

    public struct GetBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct EndEvent: AWSShape {

    }

    public struct GetObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentType", location: .querystring(locationName: "response-content-type"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ResponseContentDisposition", location: .querystring(locationName: "response-content-disposition"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseExpires", location: .querystring(locationName: "response-expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ResponseCacheControl", location: .querystring(locationName: "response-cache-control"), required: false, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentEncoding", location: .querystring(locationName: "response-content-encoding"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentLanguage", location: .querystring(locationName: "response-content-language"), required: false, type: .string)
        ]
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Sets the Content-Type header of the response.
        public let responseContentType: String?
        public let bucket: String
        /// Sets the Content-Disposition header of the response
        public let responseContentDisposition: String?
        /// Sets the Expires header of the response.
        public let responseExpires: TimeStamp?
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
        public let partNumber: Int32?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        public let key: String
        public let requestPayer: RequestPayer?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Sets the Cache-Control header of the response.
        public let responseCacheControl: String?
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?
        /// Sets the Content-Encoding header of the response.
        public let responseContentEncoding: String?
        /// Sets the Content-Language header of the response.
        public let responseContentLanguage: String?

        public init(sSECustomerKeyMD5: String? = nil, responseContentType: String? = nil, bucket: String, responseContentDisposition: String? = nil, responseExpires: TimeStamp? = nil, ifModifiedSince: TimeStamp? = nil, versionId: String? = nil, sSECustomerAlgorithm: String? = nil, range: String? = nil, partNumber: Int32? = nil, ifNoneMatch: String? = nil, sSECustomerKey: String? = nil, key: String, requestPayer: RequestPayer? = nil, ifUnmodifiedSince: TimeStamp? = nil, responseCacheControl: String? = nil, ifMatch: String? = nil, responseContentEncoding: String? = nil, responseContentLanguage: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.responseContentType = responseContentType
            self.bucket = bucket
            self.responseContentDisposition = responseContentDisposition
            self.responseExpires = responseExpires
            self.ifModifiedSince = ifModifiedSince
            self.versionId = versionId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.range = range
            self.partNumber = partNumber
            self.ifNoneMatch = ifNoneMatch
            self.sSECustomerKey = sSECustomerKey
            self.key = key
            self.requestPayer = requestPayer
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.responseCacheControl = responseCacheControl
            self.ifMatch = ifMatch
            self.responseContentEncoding = responseContentEncoding
            self.responseContentLanguage = responseContentLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case responseContentType = "response-content-type"
            case bucket = "Bucket"
            case responseContentDisposition = "response-content-disposition"
            case responseExpires = "response-expires"
            case ifModifiedSince = "If-Modified-Since"
            case versionId = "versionId"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case range = "Range"
            case partNumber = "partNumber"
            case ifNoneMatch = "If-None-Match"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case responseCacheControl = "response-cache-control"
            case ifMatch = "If-Match"
            case responseContentEncoding = "response-content-encoding"
            case responseContentLanguage = "response-content-language"
        }
    }

    public struct BucketLifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [LifecycleRule]

        public init(rules: [LifecycleRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public enum TransitionStorageClass: String, CustomStringConvertible, Codable {
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        public var description: String { return self.rawValue }
    }

    public struct TargetGrant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grantee", required: false, type: .structure), 
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        public let grantee: Grantee?
        /// Logging permissions assigned to the Grantee for the bucket.
        public let permission: BucketLogsPermission?

        public init(grantee: Grantee? = nil, permission: BucketLogsPermission? = nil) {
            self.grantee = grantee
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case grantee = "Grantee"
            case permission = "Permission"
        }
    }

    public struct ListBucketInventoryConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket containing the inventory configurations to retrieve.
        public let bucket: String
        /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct NoncurrentVersionExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?

        public init(noncurrentDays: Int32? = nil) {
            self.noncurrentDays = noncurrentDays
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
        }
    }

    public struct Error: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        public let code: String?
        public let message: String?
        public let key: String?
        public let versionId: String?

        public init(code: String? = nil, message: String? = nil, key: String? = nil, versionId: String? = nil) {
            self.code = code
            self.message = message
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
            case key = "Key"
            case versionId = "VersionId"
        }
    }

    public struct PutObjectLegalHoldRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LegalHold"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "LegalHold", location: .body(locationName: "LegalHold"), required: false, type: .structure), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The bucket containing the object that you want to place a Legal Hold on.
        public let bucket: String
        /// The key name for the object that you want to place a Legal Hold on.
        public let key: String
        /// The MD5 hash for the request body.
        public let contentMD5: String?
        /// Container element for the Legal Hold configuration you want to apply to the specified object.
        public let legalHold: ObjectLockLegalHold?
        public let requestPayer: RequestPayer?
        /// The version ID of the object that you want to place a Legal Hold on.
        public let versionId: String?

        public init(bucket: String, key: String, contentMD5: String? = nil, legalHold: ObjectLockLegalHold? = nil, requestPayer: RequestPayer? = nil, versionId: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.contentMD5 = contentMD5
            self.legalHold = legalHold
            self.requestPayer = requestPayer
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case contentMD5 = "Content-MD5"
            case legalHold = "LegalHold"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
        }
    }

    public enum ObjectLockEnabled: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case canonicaluser = "CanonicalUser"
        case amazoncustomerbyemail = "AmazonCustomerByEmail"
        case group = "Group"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the inventory configuration to retrieve.
        public let bucket: String
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct InventorySchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", required: true, type: .enum)
        ]
        /// Specifies how frequently inventory results are produced.
        public let frequency: InventoryFrequency

        public init(frequency: InventoryFrequency) {
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
        }
    }

}