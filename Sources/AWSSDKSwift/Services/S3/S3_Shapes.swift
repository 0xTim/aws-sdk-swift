// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension S3 {

    public struct GlacierJobParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tier", required: true, type: .enum)
        ]
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier

        public init(tier: Tier) {
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case tier = "Tier"
        }
    }

    public struct DeleteObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "Deleted", required: false, type: .list),
            AWSShapeMember(label: "Errors", location: .body(locationName: "Error"), required: false, type: .list)
        ]
        public let requestCharged: RequestCharged?
        public let deleted: [DeletedObject]?
        public let errors: [Error]?

        public init(requestCharged: RequestCharged? = nil, deleted: [DeletedObject]? = nil, errors: [Error]? = nil) {
            self.requestCharged = requestCharged
            self.deleted = deleted
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case deleted = "Deleted"
            case errors = "Error"
        }
    }

    public struct CreateMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp),
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum),
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string),
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum),
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string),
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string),
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string),
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "Metadata", required: false, type: .map),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string),
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string)
        ]
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// The language the content is in.
        public let contentLanguage: String?
        public let key: String
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let bucket: String
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        public let requestPayer: RequestPayer?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?

        public init(expires: TimeStamp? = nil, acl: ObjectCannedACL? = nil, contentLanguage: String? = nil, key: String, websiteRedirectLocation: String? = nil, storageClass: StorageClass? = nil, grantFullControl: String? = nil, grantWriteACP: String? = nil, grantRead: String? = nil, grantReadACP: String? = nil, sSECustomerAlgorithm: String? = nil, bucket: String, contentType: String? = nil, sSECustomerKeyMD5: String? = nil, sSECustomerKey: String? = nil, contentDisposition: String? = nil, sSEKMSKeyId: String? = nil, metadata: [String: String]? = nil, serverSideEncryption: ServerSideEncryption? = nil, tagging: String? = nil, requestPayer: RequestPayer? = nil, cacheControl: String? = nil, contentEncoding: String? = nil) {
            self.expires = expires
            self.acl = acl
            self.contentLanguage = contentLanguage
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.storageClass = storageClass
            self.grantFullControl = grantFullControl
            self.grantWriteACP = grantWriteACP
            self.grantRead = grantRead
            self.grantReadACP = grantReadACP
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.bucket = bucket
            self.contentType = contentType
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerKey = sSECustomerKey
            self.contentDisposition = contentDisposition
            self.sSEKMSKeyId = sSEKMSKeyId
            self.metadata = metadata
            self.serverSideEncryption = serverSideEncryption
            self.tagging = tagging
            self.requestPayer = requestPayer
            self.cacheControl = cacheControl
            self.contentEncoding = contentEncoding
        }

        private enum CodingKeys: String, CodingKey {
            case expires = "Expires"
            case acl = "x-amz-acl"
            case contentLanguage = "Content-Language"
            case key = "Key"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case storageClass = "x-amz-storage-class"
            case grantFullControl = "x-amz-grant-full-control"
            case grantWriteACP = "x-amz-grant-write-acp"
            case grantRead = "x-amz-grant-read"
            case grantReadACP = "x-amz-grant-read-acp"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case bucket = "Bucket"
            case contentType = "Content-Type"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case contentDisposition = "Content-Disposition"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case metadata = "Metadata"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case tagging = "x-amz-tagging"
            case requestPayer = "x-amz-request-payer"
            case cacheControl = "Cache-Control"
            case contentEncoding = "Content-Encoding"
        }
    }

    public enum ReplicationRuleStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct WebsiteConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure),
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure),
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure),
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure)
        ]
        public let indexDocument: IndexDocument?
        public let routingRules: RoutingRules?
        public let errorDocument: ErrorDocument?
        public let redirectAllRequestsTo: RedirectAllRequestsTo?

        public init(indexDocument: IndexDocument? = nil, routingRules: RoutingRules? = nil, errorDocument: ErrorDocument? = nil, redirectAllRequestsTo: RedirectAllRequestsTo? = nil) {
            self.indexDocument = indexDocument
            self.routingRules = routingRules
            self.errorDocument = errorDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
        }

        private enum CodingKeys: String, CodingKey {
            case indexDocument = "IndexDocument"
            case routingRules = "RoutingRules"
            case errorDocument = "ErrorDocument"
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
        }
    }

    public enum InventoryOptionalField: String, CustomStringConvertible, Codable {
        case size = "Size"
        case lastmodifieddate = "LastModifiedDate"
        case storageclass = "StorageClass"
        case etag = "ETag"
        case ismultipartuploaded = "IsMultipartUploaded"
        case replicationstatus = "ReplicationStatus"
        case encryptionstatus = "EncryptionStatus"
        public var description: String { return self.rawValue }
    }

    public enum RestoreRequestType: String, CustomStringConvertible, Codable {
        case select = "SELECT"
        public var description: String { return self.rawValue }
    }

    public struct ListPartsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "MaxParts", required: false, type: .integer),
            AWSShapeMember(label: "PartNumberMarker", required: false, type: .integer),
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "NextPartNumberMarker", required: false, type: .integer),
            AWSShapeMember(label: "Bucket", required: false, type: .string),
            AWSShapeMember(label: "UploadId", required: false, type: .string),
            AWSShapeMember(label: "Initiator", required: false, type: .structure),
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list),
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        public let owner: Owner?
        /// Maximum number of parts that were allowed in the response.
        public let maxParts: Int32?
        /// Part number after which listing begins.
        public let partNumberMarker: Int32?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
        public let nextPartNumberMarker: Int32?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String?
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// Indicates whether the returned list of parts is truncated.
        public let isTruncated: Bool?
        public let parts: [Part]?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?

        public init(requestCharged: RequestCharged? = nil, owner: Owner? = nil, maxParts: Int32? = nil, partNumberMarker: Int32? = nil, abortDate: TimeStamp? = nil, storageClass: StorageClass? = nil, key: String? = nil, nextPartNumberMarker: Int32? = nil, bucket: String? = nil, uploadId: String? = nil, initiator: Initiator? = nil, isTruncated: Bool? = nil, parts: [Part]? = nil, abortRuleId: String? = nil) {
            self.requestCharged = requestCharged
            self.owner = owner
            self.maxParts = maxParts
            self.partNumberMarker = partNumberMarker
            self.abortDate = abortDate
            self.storageClass = storageClass
            self.key = key
            self.nextPartNumberMarker = nextPartNumberMarker
            self.bucket = bucket
            self.uploadId = uploadId
            self.initiator = initiator
            self.isTruncated = isTruncated
            self.parts = parts
            self.abortRuleId = abortRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case owner = "Owner"
            case maxParts = "MaxParts"
            case partNumberMarker = "PartNumberMarker"
            case abortDate = "x-amz-abort-date"
            case storageClass = "StorageClass"
            case key = "Key"
            case nextPartNumberMarker = "NextPartNumberMarker"
            case bucket = "Bucket"
            case uploadId = "UploadId"
            case initiator = "Initiator"
            case isTruncated = "IsTruncated"
            case parts = "Part"
            case abortRuleId = "x-amz-abort-rule-id"
        }
    }

    public struct CSVOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string),
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string),
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string),
            AWSShapeMember(label: "QuoteFields", required: false, type: .enum),
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string)
        ]
        /// Value used to separate individual records.
        public let recordDelimiter: String?
        /// Single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?
        /// Value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// Indicates whether or not all output fields should be quoted.
        public let quoteFields: QuoteFields?
        /// Value used to separate individual fields in a record.
        public let fieldDelimiter: String?

        public init(recordDelimiter: String? = nil, quoteEscapeCharacter: String? = nil, quoteCharacter: String? = nil, quoteFields: QuoteFields? = nil, fieldDelimiter: String? = nil) {
            self.recordDelimiter = recordDelimiter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.quoteCharacter = quoteCharacter
            self.quoteFields = quoteFields
            self.fieldDelimiter = fieldDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordDelimiter = "RecordDelimiter"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
            case quoteCharacter = "QuoteCharacter"
            case quoteFields = "QuoteFields"
            case fieldDelimiter = "FieldDelimiter"
        }
    }

    public struct GetBucketLocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CompletedPart: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string),
            AWSShapeMember(label: "PartNumber", required: false, type: .integer)
        ]
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?

        public init(eTag: String? = nil, partNumber: Int32? = nil) {
            self.eTag = eTag
            self.partNumber = partNumber
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case partNumber = "PartNumber"
        }
    }

    public struct PutBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "InventoryConfiguration", location: .body(locationName: "InventoryConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration
        /// The name of the bucket where the inventory configuration will be stored.
        public let bucket: String

        public init(id: String, inventoryConfiguration: InventoryConfiguration, bucket: String) {
            self.id = id
            self.inventoryConfiguration = inventoryConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case inventoryConfiguration = "InventoryConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct GetBucketNotificationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket to get the notification configuration for.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// The name of the bucket from which an analytics configuration is retrieved.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public struct DeleteObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let key: String
        public let bucket: String
        /// The versionId of the object that the tag-set will be removed from.
        public let versionId: String?

        public init(key: String, bucket: String, versionId: String? = nil) {
            self.key = key
            self.bucket = bucket
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case versionId = "versionId"
        }
    }

    public struct PutBucketNotificationConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let notificationConfiguration: NotificationConfiguration
        public let bucket: String

        public init(notificationConfiguration: NotificationConfiguration, bucket: String) {
            self.notificationConfiguration = notificationConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case notificationConfiguration = "NotificationConfiguration"
            case bucket = "Bucket"
        }
    }

    public enum ObjectCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        case awsExecRead = "aws-exec-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        public var description: String { return self.rawValue }
    }

    public struct InputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompressionType", required: false, type: .enum),
            AWSShapeMember(label: "JSON", required: false, type: .structure),
            AWSShapeMember(label: "CSV", required: false, type: .structure)
        ]
        /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
        public let compressionType: CompressionType?
        /// Specifies JSON as object's input serialization format.
        public let json: JSONInput?
        /// Describes the serialization of a CSV-encoded object.
        public let csv: CSVInput?

        public init(compressionType: CompressionType? = nil, json: JSONInput? = nil, csv: CSVInput? = nil) {
            self.compressionType = compressionType
            self.json = json
            self.csv = csv
        }

        private enum CodingKeys: String, CodingKey {
            case compressionType = "CompressionType"
            case json = "JSON"
            case csv = "CSV"
        }
    }

    public struct LifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [Rule]

        public init(rules: [Rule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct HeadObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer),
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp),
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string),
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
        public let partNumber: Int32?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        public let key: String
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let bucket: String
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        public let requestPayer: RequestPayer?

        public init(partNumber: Int32? = nil, ifUnmodifiedSince: TimeStamp? = nil, ifModifiedSince: TimeStamp? = nil, key: String, ifMatch: String? = nil, range: String? = nil, sSECustomerAlgorithm: String? = nil, bucket: String, versionId: String? = nil, sSECustomerKeyMD5: String? = nil, sSECustomerKey: String? = nil, ifNoneMatch: String? = nil, requestPayer: RequestPayer? = nil) {
            self.partNumber = partNumber
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.ifModifiedSince = ifModifiedSince
            self.key = key
            self.ifMatch = ifMatch
            self.range = range
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.bucket = bucket
            self.versionId = versionId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerKey = sSECustomerKey
            self.ifNoneMatch = ifNoneMatch
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case partNumber = "partNumber"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case ifModifiedSince = "If-Modified-Since"
            case key = "Key"
            case ifMatch = "If-Match"
            case range = "Range"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case bucket = "Bucket"
            case versionId = "versionId"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case ifNoneMatch = "If-None-Match"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct ListObjectVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer),
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string),
            AWSShapeMember(label: "VersionIdMarker", location: .querystring(locationName: "version-id-marker"), required: false, type: .string),
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum),
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string),
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string)
        ]
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// Specifies the object version you want to start listing from.
        public let versionIdMarker: String?
        public let encodingType: EncodingType?
        /// Specifies the key to start with when listing objects in a bucket.
        public let keyMarker: String?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?

        public init(bucket: String, maxKeys: Int32? = nil, delimiter: String? = nil, versionIdMarker: String? = nil, encodingType: EncodingType? = nil, keyMarker: String? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.delimiter = delimiter
            self.versionIdMarker = versionIdMarker
            self.encodingType = encodingType
            self.keyMarker = keyMarker
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxKeys = "max-keys"
            case delimiter = "delimiter"
            case versionIdMarker = "version-id-marker"
            case encodingType = "encoding-type"
            case keyMarker = "key-marker"
            case prefix = "prefix"
        }
    }

    public enum RequestCharged: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct TopicConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list),
            AWSShapeMember(label: "TopicArn", location: .body(locationName: "Topic"), required: true, type: .string),
            AWSShapeMember(label: "Filter", required: false, type: .structure),
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]
        /// Amazon SNS topic ARN to which Amazon S3 will publish a message when it detects events of specified type.
        public let topicArn: String
        public let filter: NotificationConfigurationFilter?
        public let id: String?

        public init(events: [Event], topicArn: String, filter: NotificationConfigurationFilter? = nil, id: String? = nil) {
            self.events = events
            self.topicArn = topicArn
            self.filter = filter
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case topicArn = "Topic"
            case filter = "Filter"
            case id = "Id"
        }
    }

    public struct GetBucketWebsiteOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure),
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure),
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure),
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure)
        ]
        public let indexDocument: IndexDocument?
        public let routingRules: RoutingRules?
        public let errorDocument: ErrorDocument?
        public let redirectAllRequestsTo: RedirectAllRequestsTo?

        public init(indexDocument: IndexDocument? = nil, routingRules: RoutingRules? = nil, errorDocument: ErrorDocument? = nil, redirectAllRequestsTo: RedirectAllRequestsTo? = nil) {
            self.indexDocument = indexDocument
            self.routingRules = routingRules
            self.errorDocument = errorDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
        }

        private enum CodingKeys: String, CodingKey {
            case indexDocument = "IndexDocument"
            case routingRules = "RoutingRules"
            case errorDocument = "ErrorDocument"
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
        }
    }

    public enum ObjectVersionStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public struct TopicConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list),
            AWSShapeMember(label: "Topic", required: false, type: .string),
            AWSShapeMember(label: "Event", required: false, type: .enum),
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]?
        /// Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
        public let topic: String?
        /// Bucket event for which to send notifications.
        public let event: Event?
        public let id: String?

        public init(events: [Event]? = nil, topic: String? = nil, event: Event? = nil, id: String? = nil) {
            self.events = events
            self.topic = topic
            self.event = event
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case topic = "Topic"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case event = "_Event"
            case id = "Id"
        }
    }

    public struct AccessControlPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure)
        ]
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?

        public init(owner: Owner? = nil, grants: Grants? = nil) {
            self.owner = owner
            self.grants = grants
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case grants = "AccessControlList"
        }
    }

    public struct GetBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ListBucketAnalyticsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ContinuationToken that represents a placeholder from where this request should begin.
        public let continuationToken: String?
        /// The name of the bucket from which analytics configurations are retrieved.
        public let bucket: String

        public init(continuationToken: String? = nil, bucket: String) {
            self.continuationToken = continuationToken
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "continuation-token"
            case bucket = "Bucket"
        }
    }

    public struct DeleteMarkerEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp),
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean)
        ]
        /// Version ID of an object.
        public let versionId: String?
        /// The object key.
        public let key: String?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?
        public let owner: Owner?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?

        public init(versionId: String? = nil, key: String? = nil, lastModified: TimeStamp? = nil, owner: Owner? = nil, isLatest: Bool? = nil) {
            self.versionId = versionId
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.isLatest = isLatest
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case key = "Key"
            case lastModified = "LastModified"
            case owner = "Owner"
            case isLatest = "IsLatest"
        }
    }

    public struct QueueConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list),
            AWSShapeMember(label: "QueueArn", location: .body(locationName: "Queue"), required: true, type: .string),
            AWSShapeMember(label: "Filter", required: false, type: .structure),
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]
        /// Amazon SQS queue ARN to which Amazon S3 will publish a message when it detects events of specified type.
        public let queueArn: String
        public let filter: NotificationConfigurationFilter?
        public let id: String?

        public init(events: [Event], queueArn: String, filter: NotificationConfigurationFilter? = nil, id: String? = nil) {
            self.events = events
            self.queueArn = queueArn
            self.filter = filter
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case queueArn = "Queue"
            case filter = "Filter"
            case id = "Id"
        }
    }

    public struct CopyPartResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp),
            AWSShapeMember(label: "ETag", required: false, type: .string)
        ]
        /// Date and time at which the object was uploaded.
        public let lastModified: TimeStamp?
        /// Entity tag of the object.
        public let eTag: String?

        public init(lastModified: TimeStamp? = nil, eTag: String? = nil) {
            self.lastModified = lastModified
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case lastModified = "LastModified"
            case eTag = "ETag"
        }
    }

    public struct GetBucketTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public struct PutObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let versionId: String?
        public let bucket: String
        public let key: String
        public let tagging: Tagging
        public let contentMD5: String?

        public init(versionId: String? = nil, bucket: String, key: String, tagging: Tagging, contentMD5: String? = nil) {
            self.versionId = versionId
            self.bucket = bucket
            self.key = key
            self.tagging = tagging
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case bucket = "Bucket"
            case key = "Key"
            case tagging = "Tagging"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct GetObjectTorrentOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "Body", required: false, type: .blob)
        ]
        public let requestCharged: RequestCharged?
        public let body: Data?

        public init(requestCharged: RequestCharged? = nil, body: Data? = nil) {
            self.requestCharged = requestCharged
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case body = "Body"
        }
    }

    public struct ReplicationRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSelectionCriteria", required: false, type: .structure),
            AWSShapeMember(label: "ID", required: false, type: .string),
            AWSShapeMember(label: "Prefix", required: true, type: .string),
            AWSShapeMember(label: "Status", required: true, type: .enum),
            AWSShapeMember(label: "Destination", required: true, type: .structure)
        ]
        /// Container for filters that define which source objects should be replicated.
        public let sourceSelectionCriteria: SourceSelectionCriteria?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        /// Object keyname prefix identifying one or more objects to which the rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes are not supported.
        public let prefix: String
        /// The rule is ignored if status is not Enabled.
        public let status: ReplicationRuleStatus
        /// Container for replication destination information.
        public let destination: Destination

        public init(sourceSelectionCriteria: SourceSelectionCriteria? = nil, id: String? = nil, prefix: String, status: ReplicationRuleStatus, destination: Destination) {
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.id = id
            self.prefix = prefix
            self.status = status
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSelectionCriteria = "SourceSelectionCriteria"
            case id = "ID"
            case prefix = "Prefix"
            case status = "Status"
            case destination = "Destination"
        }
    }

    public struct NoncurrentVersionExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?

        public init(noncurrentDays: Int32? = nil) {
            self.noncurrentDays = noncurrentDays
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
        }
    }

    public struct PutObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public enum EncodingType: String, CustomStringConvertible, Codable {
        case url = "url"
        public var description: String { return self.rawValue }
    }

    public struct ListObjectsV2Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer),
            AWSShapeMember(label: "Delimiter", required: false, type: .string),
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string),
            AWSShapeMember(label: "StartAfter", required: false, type: .string),
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list),
            AWSShapeMember(label: "EncodingType", required: false, type: .enum),
            AWSShapeMember(label: "KeyCount", required: false, type: .integer),
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string),
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "Name", required: false, type: .string),
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Contents", required: false, type: .list)
        ]
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
        public let nextContinuationToken: String?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
        public let commonPrefixes: [CommonPrefix]?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys
        public let keyCount: Int32?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        /// Name of the bucket to list.
        public let name: String?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// Metadata about each object returned.
        public let contents: [Object]?

        public init(maxKeys: Int32? = nil, delimiter: String? = nil, nextContinuationToken: String? = nil, startAfter: String? = nil, commonPrefixes: [CommonPrefix]? = nil, encodingType: EncodingType? = nil, keyCount: Int32? = nil, continuationToken: String? = nil, isTruncated: Bool? = nil, name: String? = nil, prefix: String? = nil, contents: [Object]? = nil) {
            self.maxKeys = maxKeys
            self.delimiter = delimiter
            self.nextContinuationToken = nextContinuationToken
            self.startAfter = startAfter
            self.commonPrefixes = commonPrefixes
            self.encodingType = encodingType
            self.keyCount = keyCount
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.name = name
            self.prefix = prefix
            self.contents = contents
        }

        private enum CodingKeys: String, CodingKey {
            case maxKeys = "MaxKeys"
            case delimiter = "Delimiter"
            case nextContinuationToken = "NextContinuationToken"
            case startAfter = "StartAfter"
            case commonPrefixes = "CommonPrefixes"
            case encodingType = "EncodingType"
            case keyCount = "KeyCount"
            case continuationToken = "ContinuationToken"
            case isTruncated = "IsTruncated"
            case name = "Name"
            case prefix = "Prefix"
            case contents = "Contents"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string),
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// Name of the tag.
        public let key: String
        /// Value of the tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct RedirectAllRequestsTo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostName", required: true, type: .string),
            AWSShapeMember(label: "Protocol", required: false, type: .enum)
        ]
        /// Name of the host where requests will be redirected.
        public let hostName: String
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?

        public init(hostName: String, protocol: Protocol? = nil) {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case hostName = "HostName"
            case `protocol` = "Protocol"
        }
    }

    public struct GetBucketLifecycleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct CompletedMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list)
        ]
        public let parts: [CompletedPart]?

        public init(parts: [CompletedPart]? = nil) {
            self.parts = parts
        }

        private enum CodingKeys: String, CodingKey {
            case parts = "Part"
        }
    }

    public struct ServerSideEncryptionRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyServerSideEncryptionByDefault", required: false, type: .structure)
        ]
        /// Describes the default server-side encryption to apply to new objects in the bucket. If Put Object request does not specify any server-side encryption, this default encryption will be applied.
        public let applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault?

        public init(applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault? = nil) {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        }
    }

    public struct CompleteMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string),
            AWSShapeMember(label: "Location", required: false, type: .string),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "ETag", required: false, type: .string),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string)
        ]
        public let bucket: String?
        public let location: String?
        public let requestCharged: RequestCharged?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let key: String?
        /// Entity tag of the object.
        public let eTag: String?
        /// Version of the object.
        public let versionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?

        public init(bucket: String? = nil, location: String? = nil, requestCharged: RequestCharged? = nil, serverSideEncryption: ServerSideEncryption? = nil, key: String? = nil, eTag: String? = nil, versionId: String? = nil, sSEKMSKeyId: String? = nil, expiration: String? = nil) {
            self.bucket = bucket
            self.location = location
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
            self.key = key
            self.eTag = eTag
            self.versionId = versionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case location = "Location"
            case requestCharged = "x-amz-request-charged"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case key = "Key"
            case eTag = "ETag"
            case versionId = "x-amz-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case expiration = "x-amz-expiration"
        }
    }

    public struct PutBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfirmRemoveSelfBucketAccess", location: .header(locationName: "x-amz-confirm-remove-self-bucket-access"), required: false, type: .boolean),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Policy", required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        /// Set this parameter to true to confirm that you want to remove your permissions to change this bucket policy in the future.
        public let confirmRemoveSelfBucketAccess: Bool?
        public let bucket: String
        /// The bucket policy as a JSON document.
        public let policy: String
        public let contentMD5: String?

        public init(confirmRemoveSelfBucketAccess: Bool? = nil, bucket: String, policy: String, contentMD5: String? = nil) {
            self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
            self.bucket = bucket
            self.policy = policy
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case confirmRemoveSelfBucketAccess = "x-amz-confirm-remove-self-bucket-access"
            case bucket = "Bucket"
            case policy = "Policy"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct GetBucketRequestPaymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: false, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer?

        public init(payer: Payer? = nil) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public struct Initiator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string),
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        /// If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
        public let id: String?
        /// Name of the Principal.
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct GetObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure)
        ]
        public let requestCharged: RequestCharged?
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?

        public init(requestCharged: RequestCharged? = nil, owner: Owner? = nil, grants: Grants? = nil) {
            self.requestCharged = requestCharged
            self.owner = owner
            self.grants = grants
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case owner = "Owner"
            case grants = "AccessControlList"
        }
    }

    public struct DeleteObjectsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Delete"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string),
            AWSShapeMember(label: "Delete", location: .body(locationName: "Delete"), required: true, type: .structure),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let delete: Delete
        public let requestPayer: RequestPayer?

        public init(bucket: String, mfa: String? = nil, delete: Delete, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.mfa = mfa
            self.delete = delete
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case mfa = "x-amz-mfa"
            case delete = "Delete"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct OutputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JSON", required: false, type: .structure),
            AWSShapeMember(label: "CSV", required: false, type: .structure)
        ]
        /// Specifies JSON as request's output serialization format.
        public let json: JSONOutput?
        /// Describes the serialization of CSV-encoded Select results.
        public let csv: CSVOutput?

        public init(json: JSONOutput? = nil, csv: CSVOutput? = nil) {
            self.json = json
            self.csv = csv
        }

        private enum CodingKeys: String, CodingKey {
            case json = "JSON"
            case csv = "CSV"
        }
    }

    public struct Object: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageClass", required: false, type: .enum),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp),
            AWSShapeMember(label: "Size", required: false, type: .integer),
            AWSShapeMember(label: "ETag", required: false, type: .string)
        ]
        /// The class of storage used to store the object.
        public let storageClass: ObjectStorageClass?
        public let key: String?
        public let owner: Owner?
        public let lastModified: TimeStamp?
        public let size: Int32?
        public let eTag: String?

        public init(storageClass: ObjectStorageClass? = nil, key: String? = nil, owner: Owner? = nil, lastModified: TimeStamp? = nil, size: Int32? = nil, eTag: String? = nil) {
            self.storageClass = storageClass
            self.key = key
            self.owner = owner
            self.lastModified = lastModified
            self.size = size
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case storageClass = "StorageClass"
            case key = "Key"
            case owner = "Owner"
            case lastModified = "LastModified"
            case size = "Size"
            case eTag = "ETag"
        }
    }

    public enum SseKmsEncryptedObjectsStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum TransitionStorageClass: String, CustomStringConvertible, Codable {
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        public var description: String { return self.rawValue }
    }

    public struct DeleteObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        /// The versionId of the object the tag-set was removed from.
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public struct RestoreObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RestoreRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "RestoreRequest", location: .body(locationName: "RestoreRequest"), required: false, type: .structure),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let versionId: String?
        public let bucket: String
        public let key: String
        public let restoreRequest: RestoreRequest?
        public let requestPayer: RequestPayer?

        public init(versionId: String? = nil, bucket: String, key: String, restoreRequest: RestoreRequest? = nil, requestPayer: RequestPayer? = nil) {
            self.versionId = versionId
            self.bucket = bucket
            self.key = key
            self.restoreRequest = restoreRequest
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case bucket = "Bucket"
            case key = "Key"
            case restoreRequest = "RestoreRequest"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct InventoryConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsEnabled", required: true, type: .boolean),
            AWSShapeMember(label: "Filter", required: false, type: .structure),
            AWSShapeMember(label: "OptionalFields", required: false, type: .structure),
            AWSShapeMember(label: "IncludedObjectVersions", required: true, type: .enum),
            AWSShapeMember(label: "Destination", required: true, type: .structure),
            AWSShapeMember(label: "Id", required: true, type: .string),
            AWSShapeMember(label: "Schedule", required: true, type: .structure)
        ]
        /// Specifies whether the inventory is enabled or disabled.
        public let isEnabled: Bool
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public let filter: InventoryFilter?
        /// Contains the optional fields that are included in the inventory results.
        public let optionalFields: InventoryOptionalFields?
        /// Specifies which object version(s) to included in the inventory results.
        public let includedObjectVersions: InventoryIncludedObjectVersions
        /// Contains information about where to publish the inventory results.
        public let destination: InventoryDestination
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// Specifies the schedule for generating inventory results.
        public let schedule: InventorySchedule

        public init(isEnabled: Bool, filter: InventoryFilter? = nil, optionalFields: InventoryOptionalFields? = nil, includedObjectVersions: InventoryIncludedObjectVersions, destination: InventoryDestination, id: String, schedule: InventorySchedule) {
            self.isEnabled = isEnabled
            self.filter = filter
            self.optionalFields = optionalFields
            self.includedObjectVersions = includedObjectVersions
            self.destination = destination
            self.id = id
            self.schedule = schedule
        }

        private enum CodingKeys: String, CodingKey {
            case isEnabled = "IsEnabled"
            case filter = "Filter"
            case optionalFields = "OptionalFields"
            case includedObjectVersions = "IncludedObjectVersions"
            case destination = "Destination"
            case id = "Id"
            case schedule = "Schedule"
        }
    }

    public struct IndexDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Suffix", required: true, type: .string)
        ]
        /// A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
        public let suffix: String

        public init(suffix: String) {
            self.suffix = suffix
        }

        private enum CodingKeys: String, CodingKey {
            case suffix = "Suffix"
        }
    }

    public struct SelectObjectContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum),
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure),
            AWSShapeMember(label: "RequestProgress", required: false, type: .structure),
            AWSShapeMember(label: "Expression", required: true, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string)
        ]
        /// The S3 Bucket.
        public let bucket: String
        /// The SSE Customer Key. For more information, go to  Server-Side Encryption (Using Customer-Provided Encryption Keys.
        public let sSECustomerKey: String?
        /// The Object Key.
        public let key: String
        /// The type of the provided expression (e.g., SQL).
        public let expressionType: ExpressionType
        /// Describes the format of the data in the object that is being queried.
        public let inputSerialization: InputSerialization
        /// The SSE Algorithm used to encrypt the object. For more information, go to  Server-Side Encryption (Using Customer-Provided Encryption Keys.
        public let sSECustomerAlgorithm: String?
        /// Describes the format of the data that you want Amazon S3 to return in response.
        public let outputSerialization: OutputSerialization
        /// Specifies if periodic request progress information should be enabled.
        public let requestProgress: RequestProgress?
        /// The expression that is used to query the object.
        public let expression: String
        /// The SSE Customer Key MD5. For more information, go to  Server-Side Encryption (Using Customer-Provided Encryption Keys.
        public let sSECustomerKeyMD5: String?

        public init(bucket: String, sSECustomerKey: String? = nil, key: String, expressionType: ExpressionType, inputSerialization: InputSerialization, sSECustomerAlgorithm: String? = nil, outputSerialization: OutputSerialization, requestProgress: RequestProgress? = nil, expression: String, sSECustomerKeyMD5: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.key = key
            self.expressionType = expressionType
            self.inputSerialization = inputSerialization
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.outputSerialization = outputSerialization
            self.requestProgress = requestProgress
            self.expression = expression
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case key = "Key"
            case expressionType = "ExpressionType"
            case inputSerialization = "InputSerialization"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case outputSerialization = "OutputSerialization"
            case requestProgress = "RequestProgress"
            case expression = "Expression"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
        }
    }

    public struct ListObjectsV2Request: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer),
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string),
            AWSShapeMember(label: "StartAfter", location: .querystring(locationName: "start-after"), required: false, type: .string),
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum),
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string),
            AWSShapeMember(label: "FetchOwner", location: .querystring(locationName: "fetch-owner"), required: false, type: .boolean)
        ]
        /// Name of the bucket to list.
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true
        public let fetchOwner: Bool?

        public init(bucket: String, maxKeys: Int32? = nil, delimiter: String? = nil, startAfter: String? = nil, encodingType: EncodingType? = nil, continuationToken: String? = nil, requestPayer: RequestPayer? = nil, prefix: String? = nil, fetchOwner: Bool? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.delimiter = delimiter
            self.startAfter = startAfter
            self.encodingType = encodingType
            self.continuationToken = continuationToken
            self.requestPayer = requestPayer
            self.prefix = prefix
            self.fetchOwner = fetchOwner
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxKeys = "max-keys"
            case delimiter = "delimiter"
            case startAfter = "start-after"
            case encodingType = "encoding-type"
            case continuationToken = "continuation-token"
            case requestPayer = "x-amz-request-payer"
            case prefix = "prefix"
            case fetchOwner = "fetch-owner"
        }
    }

    public struct CORSRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExposeHeaders", location: .body(locationName: "ExposeHeader"), required: false, type: .list),
            AWSShapeMember(label: "MaxAgeSeconds", required: false, type: .integer),
            AWSShapeMember(label: "AllowedHeaders", location: .body(locationName: "AllowedHeader"), required: false, type: .list),
            AWSShapeMember(label: "AllowedMethods", location: .body(locationName: "AllowedMethod"), required: true, type: .list),
            AWSShapeMember(label: "AllowedOrigins", location: .body(locationName: "AllowedOrigin"), required: true, type: .list)
        ]
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public let exposeHeaders: [String]?
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public let maxAgeSeconds: Int32?
        /// Specifies which headers are allowed in a pre-flight OPTIONS request.
        public let allowedHeaders: [String]?
        /// Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
        public let allowedMethods: [String]
        /// One or more origins you want customers to be able to access the bucket from.
        public let allowedOrigins: [String]

        public init(exposeHeaders: [String]? = nil, maxAgeSeconds: Int32? = nil, allowedHeaders: [String]? = nil, allowedMethods: [String], allowedOrigins: [String]) {
            self.exposeHeaders = exposeHeaders
            self.maxAgeSeconds = maxAgeSeconds
            self.allowedHeaders = allowedHeaders
            self.allowedMethods = allowedMethods
            self.allowedOrigins = allowedOrigins
        }

        private enum CodingKeys: String, CodingKey {
            case exposeHeaders = "ExposeHeader"
            case maxAgeSeconds = "MaxAgeSeconds"
            case allowedHeaders = "AllowedHeader"
            case allowedMethods = "AllowedMethod"
            case allowedOrigins = "AllowedOrigin"
        }
    }

    public struct NotificationConfigurationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "S3Key"), required: false, type: .structure)
        ]
        public let key: S3KeyFilter?

        public init(key: S3KeyFilter? = nil) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "S3Key"
        }
    }

    public struct Grantee: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string),
            AWSShapeMember(label: "Type", location: .body(locationName: "xsi:type"), required: true, type: .enum),
            AWSShapeMember(label: "URI", required: false, type: .string),
            AWSShapeMember(label: "EmailAddress", required: false, type: .string),
            AWSShapeMember(label: "ID", required: false, type: .string)
        ]
        /// Screen name of the grantee.
        public let displayName: String?
        /// Type of grantee
        public let `type`: `Type`
        /// URI of the grantee group.
        public let uri: String?
        /// Email address of the grantee.
        public let emailAddress: String?
        /// The canonical user ID of the grantee.
        public let id: String?

        public init(displayName: String? = nil, type: `Type`, uri: String? = nil, emailAddress: String? = nil, id: String? = nil) {
            self.displayName = displayName
            self.`type` = `type`
            self.uri = uri
            self.emailAddress = emailAddress
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case `type` = "xsi:type"
            case uri = "URI"
            case emailAddress = "EmailAddress"
            case id = "ID"
        }
    }

    public struct DeleteBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket containing the server-side encryption configuration to delete.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure)
        ]
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?

        public init(owner: Owner? = nil, grants: Grants? = nil) {
            self.owner = owner
            self.grants = grants
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case grants = "AccessControlList"
        }
    }

    public enum StorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        public var description: String { return self.rawValue }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", required: false, type: .structure),
            AWSShapeMember(label: "Status", required: true, type: .enum),
            AWSShapeMember(label: "Transition", required: false, type: .structure),
            AWSShapeMember(label: "ID", required: false, type: .string),
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure),
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure),
            AWSShapeMember(label: "Prefix", required: true, type: .string),
            AWSShapeMember(label: "NoncurrentVersionTransition", required: false, type: .structure)
        ]
        public let expiration: LifecycleExpiration?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let transition: Transition?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String
        public let noncurrentVersionTransition: NoncurrentVersionTransition?

        public init(expiration: LifecycleExpiration? = nil, status: ExpirationStatus, transition: Transition? = nil, id: String? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, prefix: String, noncurrentVersionTransition: NoncurrentVersionTransition? = nil) {
            self.expiration = expiration
            self.status = status
            self.transition = transition
            self.id = id
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.prefix = prefix
            self.noncurrentVersionTransition = noncurrentVersionTransition
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "Expiration"
            case status = "Status"
            case transition = "Transition"
            case id = "ID"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case prefix = "Prefix"
            case noncurrentVersionTransition = "NoncurrentVersionTransition"
        }
    }

    public struct QueueConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list),
            AWSShapeMember(label: "Queue", required: false, type: .string),
            AWSShapeMember(label: "Event", required: false, type: .enum),
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]?
        public let queue: String?
        public let event: Event?
        public let id: String?

        public init(events: [Event]? = nil, queue: String? = nil, event: Event? = nil, id: String? = nil) {
            self.events = events
            self.queue = queue
            self.event = event
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case queue = "Queue"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case event = "_Event"
            case id = "Id"
        }
    }

    public enum Permission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case write = "WRITE"
        case writeAcp = "WRITE_ACP"
        case read = "READ"
        case readAcp = "READ_ACP"
        public var description: String { return self.rawValue }
    }

    public struct MetricsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string),
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
        public let filter: MetricsFilter?

        public init(id: String, filter: MetricsFilter? = nil) {
            self.id = id
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
        }
    }

    public struct DeleteBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// The name of the bucket from which an analytics configuration is deleted.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public struct InventoryOptionalFields: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Field", required: false, type: .list)
        ]
        public let field: [InventoryOptionalField]?

        public init(field: [InventoryOptionalField]? = nil) {
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case field = "Field"
        }
    }

    public struct CSVInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileHeaderInfo", required: false, type: .enum),
            AWSShapeMember(label: "Comments", required: false, type: .string),
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string),
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string),
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string),
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string),
            AWSShapeMember(label: "AllowQuotedRecordDelimiter", required: false, type: .boolean)
        ]
        /// Describes the first line of input. Valid values: None, Ignore, Use.
        public let fileHeaderInfo: FileHeaderInfo?
        /// Single character used to indicate a row should be ignored when present at the start of a row.
        public let comments: String?
        /// Value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// Value used to separate individual records.
        public let recordDelimiter: String?
        /// Value used to separate individual fields in a record.
        public let fieldDelimiter: String?
        /// Single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?
        /// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
        public let allowQuotedRecordDelimiter: Bool?

        public init(fileHeaderInfo: FileHeaderInfo? = nil, comments: String? = nil, quoteCharacter: String? = nil, recordDelimiter: String? = nil, fieldDelimiter: String? = nil, quoteEscapeCharacter: String? = nil, allowQuotedRecordDelimiter: Bool? = nil) {
            self.fileHeaderInfo = fileHeaderInfo
            self.comments = comments
            self.quoteCharacter = quoteCharacter
            self.recordDelimiter = recordDelimiter
            self.fieldDelimiter = fieldDelimiter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case fileHeaderInfo = "FileHeaderInfo"
            case comments = "Comments"
            case quoteCharacter = "QuoteCharacter"
            case recordDelimiter = "RecordDelimiter"
            case fieldDelimiter = "FieldDelimiter"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
            case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
        }
    }

    public struct PutBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CORSConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSConfiguration", location: .body(locationName: "CORSConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let cORSConfiguration: CORSConfiguration
        public let bucket: String
        public let contentMD5: String?

        public init(cORSConfiguration: CORSConfiguration, bucket: String, contentMD5: String? = nil) {
            self.cORSConfiguration = cORSConfiguration
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case cORSConfiguration = "CORSConfiguration"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public enum BucketCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        public var description: String { return self.rawValue }
    }

    public struct PutObjectAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string),
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure),
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string),
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string),
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string)
        ]
        public let bucket: String
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        public let key: String
        public let accessControlPolicy: AccessControlPolicy?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        public let contentMD5: String?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        public let requestPayer: RequestPayer?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?

        public init(bucket: String, grantWrite: String? = nil, grantReadACP: String? = nil, key: String, accessControlPolicy: AccessControlPolicy? = nil, acl: ObjectCannedACL? = nil, contentMD5: String? = nil, grantWriteACP: String? = nil, requestPayer: RequestPayer? = nil, grantRead: String? = nil, versionId: String? = nil, grantFullControl: String? = nil) {
            self.bucket = bucket
            self.grantWrite = grantWrite
            self.grantReadACP = grantReadACP
            self.key = key
            self.accessControlPolicy = accessControlPolicy
            self.acl = acl
            self.contentMD5 = contentMD5
            self.grantWriteACP = grantWriteACP
            self.requestPayer = requestPayer
            self.grantRead = grantRead
            self.versionId = versionId
            self.grantFullControl = grantFullControl
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case grantWrite = "x-amz-grant-write"
            case grantReadACP = "x-amz-grant-read-acp"
            case key = "Key"
            case accessControlPolicy = "AccessControlPolicy"
            case acl = "x-amz-acl"
            case contentMD5 = "Content-MD5"
            case grantWriteACP = "x-amz-grant-write-acp"
            case requestPayer = "x-amz-request-payer"
            case grantRead = "x-amz-grant-read"
            case versionId = "versionId"
            case grantFullControl = "x-amz-grant-full-control"
        }
    }

    public enum CompressionType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case gzip = "GZIP"
        case bzip2 = "BZIP2"
        public var description: String { return self.rawValue }
    }

    public struct VersioningConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum),
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum)
        ]
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADelete?

        public init(status: BucketVersioningStatus? = nil, mFADelete: MFADelete? = nil) {
            self.status = status
            self.mFADelete = mFADelete
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case mFADelete = "MfaDelete"
        }
    }

    public struct ContinuationEvent: AWSShape {

    }

    public struct GetBucketLoggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CreateMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "Bucket"), required: false, type: .string),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string),
            AWSShapeMember(label: "UploadId", required: false, type: .string)
        ]
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// ID for the initiated multipart upload.
        public let uploadId: String?

        public init(bucket: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, abortDate: TimeStamp? = nil, key: String? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerKeyMD5: String? = nil, abortRuleId: String? = nil, uploadId: String? = nil) {
            self.bucket = bucket
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.abortDate = abortDate
            self.key = key
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.abortRuleId = abortRuleId
            self.uploadId = uploadId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case abortDate = "x-amz-abort-date"
            case key = "Key"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case abortRuleId = "x-amz-abort-rule-id"
            case uploadId = "UploadId"
        }
    }

    public struct DeleteBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum MFADeleteStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        public let key: String
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let requestPayer: RequestPayer?

        public init(bucket: String, key: String, versionId: String? = nil, mfa: String? = nil, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.key = key
            self.versionId = versionId
            self.mfa = mfa
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case versionId = "versionId"
            case mfa = "x-amz-mfa"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public enum InventoryIncludedObjectVersions: String, CustomStringConvertible, Codable {
        case all = "All"
        case current = "Current"
        public var description: String { return self.rawValue }
    }

    public struct ObjectIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string),
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// Key name of the object to delete.
        public let key: String
        /// VersionId for the specific version of the object to delete.
        public let versionId: String?

        public init(key: String, versionId: String? = nil) {
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case versionId = "VersionId"
        }
    }

    public struct ListObjectVersionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", required: false, type: .enum),
            AWSShapeMember(label: "Name", required: false, type: .string),
            AWSShapeMember(label: "VersionIdMarker", required: false, type: .string),
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list),
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string),
            AWSShapeMember(label: "DeleteMarkers", location: .body(locationName: "DeleteMarker"), required: false, type: .list),
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Versions", location: .body(locationName: "Version"), required: false, type: .list),
            AWSShapeMember(label: "Delimiter", required: false, type: .string),
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer),
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "NextVersionIdMarker", required: false, type: .string),
            AWSShapeMember(label: "KeyMarker", required: false, type: .string)
        ]
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        public let name: String?
        public let versionIdMarker: String?
        public let commonPrefixes: [CommonPrefix]?
        /// Use this value for the key marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        public let deleteMarkers: [DeleteMarkerEntry]?
        public let prefix: String?
        public let versions: [ObjectVersion]?
        public let delimiter: String?
        public let maxKeys: Int32?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
        public let isTruncated: Bool?
        /// Use this value for the next version id marker parameter in a subsequent request.
        public let nextVersionIdMarker: String?
        /// Marks the last Key returned in a truncated response.
        public let keyMarker: String?

        public init(encodingType: EncodingType? = nil, name: String? = nil, versionIdMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, nextKeyMarker: String? = nil, deleteMarkers: [DeleteMarkerEntry]? = nil, prefix: String? = nil, versions: [ObjectVersion]? = nil, delimiter: String? = nil, maxKeys: Int32? = nil, isTruncated: Bool? = nil, nextVersionIdMarker: String? = nil, keyMarker: String? = nil) {
            self.encodingType = encodingType
            self.name = name
            self.versionIdMarker = versionIdMarker
            self.commonPrefixes = commonPrefixes
            self.nextKeyMarker = nextKeyMarker
            self.deleteMarkers = deleteMarkers
            self.prefix = prefix
            self.versions = versions
            self.delimiter = delimiter
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.nextVersionIdMarker = nextVersionIdMarker
            self.keyMarker = keyMarker
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "EncodingType"
            case name = "Name"
            case versionIdMarker = "VersionIdMarker"
            case commonPrefixes = "CommonPrefixes"
            case nextKeyMarker = "NextKeyMarker"
            case deleteMarkers = "DeleteMarker"
            case prefix = "Prefix"
            case versions = "Version"
            case delimiter = "Delimiter"
            case maxKeys = "MaxKeys"
            case isTruncated = "IsTruncated"
            case nextVersionIdMarker = "NextVersionIdMarker"
            case keyMarker = "KeyMarker"
        }
    }

    public struct Stats: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesReturned", required: false, type: .long),
            AWSShapeMember(label: "BytesScanned", required: false, type: .long),
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long)
        ]
        /// Total number of bytes of records payload data returned.
        public let bytesReturned: Int64?
        /// Total number of object bytes scanned.
        public let bytesScanned: Int64?
        /// Total number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?

        public init(bytesReturned: Int64? = nil, bytesScanned: Int64? = nil, bytesProcessed: Int64? = nil) {
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
            self.bytesProcessed = bytesProcessed
        }

        private enum CodingKeys: String, CodingKey {
            case bytesReturned = "BytesReturned"
            case bytesScanned = "BytesScanned"
            case bytesProcessed = "BytesProcessed"
        }
    }

    public struct LambdaFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list),
            AWSShapeMember(label: "LambdaFunctionArn", location: .body(locationName: "CloudFunction"), required: true, type: .string),
            AWSShapeMember(label: "Filter", required: false, type: .structure),
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]
        /// Lambda cloud function ARN that Amazon S3 can invoke when it detects events of the specified type.
        public let lambdaFunctionArn: String
        public let filter: NotificationConfigurationFilter?
        public let id: String?

        public init(events: [Event], lambdaFunctionArn: String, filter: NotificationConfigurationFilter? = nil, id: String? = nil) {
            self.events = events
            self.lambdaFunctionArn = lambdaFunctionArn
            self.filter = filter
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case lambdaFunctionArn = "CloudFunction"
            case filter = "Filter"
            case id = "Id"
        }
    }

    public struct ListBucketMetricsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string),
            AWSShapeMember(label: "MetricsConfigurationList", location: .body(locationName: "MetricsConfiguration"), required: false, type: .list),
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?
        /// The list of metrics configurations for a bucket.
        public let metricsConfigurationList: [MetricsConfiguration]?
        /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
        public let continuationToken: String?

        public init(isTruncated: Bool? = nil, nextContinuationToken: String? = nil, metricsConfigurationList: [MetricsConfiguration]? = nil, continuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.nextContinuationToken = nextContinuationToken
            self.metricsConfigurationList = metricsConfigurationList
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case nextContinuationToken = "NextContinuationToken"
            case metricsConfigurationList = "MetricsConfiguration"
            case continuationToken = "ContinuationToken"
        }
    }

    public struct Tagging: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public struct InventoryDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        public let s3BucketDestination: InventoryS3BucketDestination

        public init(s3BucketDestination: InventoryS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public struct ListPartsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "PartNumberMarker", location: .querystring(locationName: "part-number-marker"), required: false, type: .integer),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "MaxParts", location: .querystring(locationName: "max-parts"), required: false, type: .integer),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String
        public let bucket: String
        /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
        public let partNumberMarker: Int32?
        public let key: String
        /// Sets the maximum number of parts to return.
        public let maxParts: Int32?
        public let requestPayer: RequestPayer?

        public init(uploadId: String, bucket: String, partNumberMarker: Int32? = nil, key: String, maxParts: Int32? = nil, requestPayer: RequestPayer? = nil) {
            self.uploadId = uploadId
            self.bucket = bucket
            self.partNumberMarker = partNumberMarker
            self.key = key
            self.maxParts = maxParts
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case uploadId = "uploadId"
            case bucket = "Bucket"
            case partNumberMarker = "part-number-marker"
            case key = "Key"
            case maxParts = "max-parts"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct DeleteBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ReplicationConfiguration", location: .body(locationName: "ReplicationConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let replicationConfiguration: ReplicationConfiguration

        public init(contentMD5: String? = nil, bucket: String, replicationConfiguration: ReplicationConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string),
            AWSShapeMember(label: "Account", required: false, type: .string),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum),
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure),
            AWSShapeMember(label: "AccessControlTranslation", required: false, type: .structure)
        ]
        /// Amazon resource name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.
        public let bucket: String
        /// Account ID of the destination bucket. Currently this is only being verified if Access Control Translation is enabled
        public let account: String?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Container for information regarding encryption based configuration for replicas.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// Container for information regarding the access control for replicas.
        public let accessControlTranslation: AccessControlTranslation?

        public init(bucket: String, account: String? = nil, storageClass: StorageClass? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, accessControlTranslation: AccessControlTranslation? = nil) {
            self.bucket = bucket
            self.account = account
            self.storageClass = storageClass
            self.encryptionConfiguration = encryptionConfiguration
            self.accessControlTranslation = accessControlTranslation
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case account = "Account"
            case storageClass = "StorageClass"
            case encryptionConfiguration = "EncryptionConfiguration"
            case accessControlTranslation = "AccessControlTranslation"
        }
    }

    public struct PutBucketNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let notificationConfiguration: NotificationConfigurationDeprecated
        public let bucket: String
        public let contentMD5: String?

        public init(notificationConfiguration: NotificationConfigurationDeprecated, bucket: String, contentMD5: String? = nil) {
            self.notificationConfiguration = notificationConfiguration
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case notificationConfiguration = "NotificationConfiguration"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct FilterRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .enum),
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// Object key name prefix or suffix identifying one or more objects to which the filtering rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, go to Configuring Event Notifications in the Amazon Simple Storage Service Developer Guide.
        public let name: FilterRuleName?
        public let value: String?

        public init(name: FilterRuleName? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PutObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct CreateBucketConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        /// Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public enum InventoryFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case orc = "ORC"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketCorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: false, type: .list)
        ]
        public let cORSRules: [CORSRule]?

        public init(cORSRules: [CORSRule]? = nil) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct GetBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// The name of the bucket containing the inventory configuration to retrieve.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public struct GetBucketLifecycleConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [LifecycleRule]?

        public init(rules: [LifecycleRule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct ObjectVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", required: false, type: .integer),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean),
            AWSShapeMember(label: "ETag", required: false, type: .string),
            AWSShapeMember(label: "VersionId", required: false, type: .string),
            AWSShapeMember(label: "Owner", required: false, type: .structure),
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        /// Size in bytes of the object.
        public let size: Int32?
        /// The class of storage used to store the object.
        public let storageClass: ObjectVersionStorageClass?
        /// The object key.
        public let key: String?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        public let eTag: String?
        /// Version ID of an object.
        public let versionId: String?
        public let owner: Owner?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?

        public init(size: Int32? = nil, storageClass: ObjectVersionStorageClass? = nil, key: String? = nil, isLatest: Bool? = nil, eTag: String? = nil, versionId: String? = nil, owner: Owner? = nil, lastModified: TimeStamp? = nil) {
            self.size = size
            self.storageClass = storageClass
            self.key = key
            self.isLatest = isLatest
            self.eTag = eTag
            self.versionId = versionId
            self.owner = owner
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case size = "Size"
            case storageClass = "StorageClass"
            case key = "Key"
            case isLatest = "IsLatest"
            case eTag = "ETag"
            case versionId = "VersionId"
            case owner = "Owner"
            case lastModified = "LastModified"
        }
    }

    public struct BucketLoggingStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct Part: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumber", required: false, type: .integer),
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp),
            AWSShapeMember(label: "ETag", required: false, type: .string),
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?
        /// Date and time at which the part was uploaded.
        public let lastModified: TimeStamp?
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Size of the uploaded part data.
        public let size: Int32?

        public init(partNumber: Int32? = nil, lastModified: TimeStamp? = nil, eTag: String? = nil, size: Int32? = nil) {
            self.partNumber = partNumber
            self.lastModified = lastModified
            self.eTag = eTag
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case partNumber = "PartNumber"
            case lastModified = "LastModified"
            case eTag = "ETag"
            case size = "Size"
        }
    }

    public struct MetricsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Tag", required: false, type: .structure),
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// The prefix used when evaluating a metrics filter.
        public let prefix: String?
        /// The tag used when evaluating a metrics filter.
        public let tag: Tag?
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public let and: MetricsAndOperator?

        public init(prefix: String? = nil, tag: Tag? = nil, and: MetricsAndOperator? = nil) {
            self.prefix = prefix
            self.tag = tag
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tag = "Tag"
            case and = "And"
        }
    }

    public struct CompleteMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MultipartUpload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "MultipartUpload", location: .body(locationName: "CompleteMultipartUpload"), required: false, type: .structure),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let uploadId: String
        public let bucket: String
        public let key: String
        public let multipartUpload: CompletedMultipartUpload?
        public let requestPayer: RequestPayer?

        public init(uploadId: String, bucket: String, key: String, multipartUpload: CompletedMultipartUpload? = nil, requestPayer: RequestPayer? = nil) {
            self.uploadId = uploadId
            self.bucket = bucket
            self.key = key
            self.multipartUpload = multipartUpload
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case uploadId = "uploadId"
            case bucket = "Bucket"
            case key = "Key"
            case multipartUpload = "CompleteMultipartUpload"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct UploadPartCopyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp),
            AWSShapeMember(label: "CopySourceRange", location: .header(locationName: "x-amz-copy-source-range"), required: false, type: .string),
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer),
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string),
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string),
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp)
        ]
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first ten bytes of the source. You can copy a range only if the source object is greater than 5 GB.
        public let copySourceRange: String?
        /// Part number of part being copied. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        public let key: String
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let bucket: String
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// Upload ID identifying the multipart upload whose part is being copied.
        public let uploadId: String
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        public let requestPayer: RequestPayer?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?

        public init(copySourceIfModifiedSince: TimeStamp? = nil, copySourceRange: String? = nil, partNumber: Int32, copySourceIfMatch: String? = nil, key: String, copySource: String, copySourceSSECustomerKeyMD5: String? = nil, copySourceSSECustomerAlgorithm: String? = nil, sSECustomerAlgorithm: String? = nil, bucket: String, sSECustomerKeyMD5: String? = nil, copySourceSSECustomerKey: String? = nil, uploadId: String, copySourceIfNoneMatch: String? = nil, sSECustomerKey: String? = nil, requestPayer: RequestPayer? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil) {
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.copySourceRange = copySourceRange
            self.partNumber = partNumber
            self.copySourceIfMatch = copySourceIfMatch
            self.key = key
            self.copySource = copySource
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.bucket = bucket
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.uploadId = uploadId
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.sSECustomerKey = sSECustomerKey
            self.requestPayer = requestPayer
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        }

        private enum CodingKeys: String, CodingKey {
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case copySourceRange = "x-amz-copy-source-range"
            case partNumber = "partNumber"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case key = "Key"
            case copySource = "x-amz-copy-source"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case bucket = "Bucket"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case uploadId = "uploadId"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case requestPayer = "x-amz-request-payer"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
        }
    }

    public struct AnalyticsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Tag", required: false, type: .structure),
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// The prefix to use when evaluating an analytics filter.
        public let prefix: String?
        /// The tag to use when evaluating an analytics filter.
        public let tag: Tag?
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        public let and: AnalyticsAndOperator?

        public init(prefix: String? = nil, tag: Tag? = nil, and: AnalyticsAndOperator? = nil) {
            self.prefix = prefix
            self.tag = tag
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tag = "Tag"
            case and = "And"
        }
    }

    public struct PutBucketEncryptionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", location: .body(locationName: "ServerSideEncryptionConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration
        /// The name of the bucket for which the server-side encryption configuration is set.
        public let bucket: String
        /// The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.
        public let contentMD5: String?

        public init(serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration, bucket: String, contentMD5: String? = nil) {
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public enum Tier: String, CustomStringConvertible, Codable {
        case standard = "Standard"
        case bulk = "Bulk"
        case expedited = "Expedited"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WebsiteConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "WebsiteConfiguration", location: .body(locationName: "WebsiteConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let websiteConfiguration: WebsiteConfiguration

        public init(contentMD5: String? = nil, bucket: String, websiteConfiguration: WebsiteConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.websiteConfiguration = websiteConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case websiteConfiguration = "WebsiteConfiguration"
        }
    }

    public struct AccessControlTranslation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: true, type: .enum)
        ]
        /// The override value for the owner of the replica object.
        public let owner: OwnerOverride

        public init(owner: OwnerOverride) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
        }
    }

    public struct GetBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueueConfigurations", location: .body(locationName: "QueueConfiguration"), required: false, type: .list),
            AWSShapeMember(label: "TopicConfigurations", location: .body(locationName: "TopicConfiguration"), required: false, type: .list),
            AWSShapeMember(label: "LambdaFunctionConfigurations", location: .body(locationName: "CloudFunctionConfiguration"), required: false, type: .list)
        ]
        public let queueConfigurations: [QueueConfiguration]?
        public let topicConfigurations: [TopicConfiguration]?
        public let lambdaFunctionConfigurations: [LambdaFunctionConfiguration]?

        public init(queueConfigurations: [QueueConfiguration]? = nil, topicConfigurations: [TopicConfiguration]? = nil, lambdaFunctionConfigurations: [LambdaFunctionConfiguration]? = nil) {
            self.queueConfigurations = queueConfigurations
            self.topicConfigurations = topicConfigurations
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case queueConfigurations = "QueueConfiguration"
            case topicConfigurations = "TopicConfiguration"
            case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        }
    }

    public struct UploadPartRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "Body", required: false, type: .blob),
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long),
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer)
        ]
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        /// Object data.
        public let body: Data?
        /// Upload ID identifying the multipart upload whose part is being uploaded.
        public let uploadId: String
        /// Object key for which the multipart upload was initiated.
        public let key: String
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32

        public init(bucket: String, sSECustomerKey: String? = nil, body: Data? = nil, uploadId: String, key: String, sSECustomerAlgorithm: String? = nil, contentMD5: String? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, contentLength: Int64? = nil, partNumber: Int32) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.body = body
            self.uploadId = uploadId
            self.key = key
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentMD5 = contentMD5
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.contentLength = contentLength
            self.partNumber = partNumber
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case body = "Body"
            case uploadId = "uploadId"
            case key = "Key"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentMD5 = "Content-MD5"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case contentLength = "Content-Length"
            case partNumber = "partNumber"
        }
    }

    public struct GetBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// The name of the bucket containing the metrics configuration to retrieve.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public struct PutBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "MetricsConfiguration", location: .body(locationName: "MetricsConfiguration"), required: true, type: .structure)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// The name of the bucket for which the metrics configuration is set.
        public let bucket: String
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration

        public init(id: String, bucket: String, metricsConfiguration: MetricsConfiguration) {
            self.id = id
            self.bucket = bucket
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public struct Transition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Days", required: false, type: .integer),
            AWSShapeMember(label: "Date", required: false, type: .timestamp),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?

        public init(days: Int32? = nil, date: TimeStamp? = nil, storageClass: TransitionStorageClass? = nil) {
            self.days = days
            self.date = date
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case days = "Days"
            case date = "Date"
            case storageClass = "StorageClass"
        }
    }

    public struct AccelerateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public enum ExpirationStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketVersioningRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer),
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp),
            AWSShapeMember(label: "ResponseCacheControl", location: .querystring(locationName: "response-cache-control"), required: false, type: .string),
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string),
            AWSShapeMember(label: "ResponseContentLanguage", location: .querystring(locationName: "response-content-language"), required: false, type: .string),
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string),
            AWSShapeMember(label: "ResponseExpires", location: .querystring(locationName: "response-expires"), required: false, type: .timestamp),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "ResponseContentDisposition", location: .querystring(locationName: "response-content-disposition"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "ResponseContentType", location: .querystring(locationName: "response-content-type"), required: false, type: .string),
            AWSShapeMember(label: "ResponseContentEncoding", location: .querystring(locationName: "response-content-encoding"), required: false, type: .string)
        ]
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
        public let partNumber: Int32?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Sets the Cache-Control header of the response.
        public let responseCacheControl: String?
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        public let key: String
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?
        /// Sets the Content-Language header of the response.
        public let responseContentLanguage: String?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Sets the Expires header of the response.
        public let responseExpires: TimeStamp?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Sets the Content-Disposition header of the response
        public let responseContentDisposition: String?
        public let bucket: String
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        public let requestPayer: RequestPayer?
        /// Sets the Content-Type header of the response.
        public let responseContentType: String?
        /// Sets the Content-Encoding header of the response.
        public let responseContentEncoding: String?

        public init(partNumber: Int32? = nil, ifUnmodifiedSince: TimeStamp? = nil, responseCacheControl: String? = nil, ifModifiedSince: TimeStamp? = nil, key: String, ifMatch: String? = nil, responseContentLanguage: String? = nil, range: String? = nil, responseExpires: TimeStamp? = nil, sSECustomerAlgorithm: String? = nil, responseContentDisposition: String? = nil, bucket: String, sSECustomerKeyMD5: String? = nil, versionId: String? = nil, sSECustomerKey: String? = nil, ifNoneMatch: String? = nil, requestPayer: RequestPayer? = nil, responseContentType: String? = nil, responseContentEncoding: String? = nil) {
            self.partNumber = partNumber
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.responseCacheControl = responseCacheControl
            self.ifModifiedSince = ifModifiedSince
            self.key = key
            self.ifMatch = ifMatch
            self.responseContentLanguage = responseContentLanguage
            self.range = range
            self.responseExpires = responseExpires
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.responseContentDisposition = responseContentDisposition
            self.bucket = bucket
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.versionId = versionId
            self.sSECustomerKey = sSECustomerKey
            self.ifNoneMatch = ifNoneMatch
            self.requestPayer = requestPayer
            self.responseContentType = responseContentType
            self.responseContentEncoding = responseContentEncoding
        }

        private enum CodingKeys: String, CodingKey {
            case partNumber = "partNumber"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case responseCacheControl = "response-cache-control"
            case ifModifiedSince = "If-Modified-Since"
            case key = "Key"
            case ifMatch = "If-Match"
            case responseContentLanguage = "response-content-language"
            case range = "Range"
            case responseExpires = "response-expires"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case responseContentDisposition = "response-content-disposition"
            case bucket = "Bucket"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case versionId = "versionId"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case ifNoneMatch = "If-None-Match"
            case requestPayer = "x-amz-request-payer"
            case responseContentType = "response-content-type"
            case responseContentEncoding = "response-content-encoding"
        }
    }

    public struct DeleteBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// The name of the bucket containing the inventory configuration to delete.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public struct Error: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string),
            AWSShapeMember(label: "Message", required: false, type: .string),
            AWSShapeMember(label: "Code", required: false, type: .string),
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        public let versionId: String?
        public let message: String?
        public let code: String?
        public let key: String?

        public init(versionId: String? = nil, message: String? = nil, code: String? = nil, key: String? = nil) {
            self.versionId = versionId
            self.message = message
            self.code = code
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case message = "Message"
            case code = "Code"
            case key = "Key"
        }
    }

    public struct GetBucketVersioningOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum),
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum)
        ]
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADeleteStatus?

        public init(status: BucketVersioningStatus? = nil, mFADelete: MFADeleteStatus? = nil) {
            self.status = status
            self.mFADelete = mFADelete
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case mFADelete = "MfaDelete"
        }
    }

    public struct GetObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let tagSet: TagSet
        public let versionId: String?

        public init(tagSet: TagSet, versionId: String? = nil) {
            self.tagSet = tagSet
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
            case versionId = "x-amz-version-id"
        }
    }

    public struct PutBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let tagging: Tagging
        public let bucket: String
        public let contentMD5: String?

        public init(tagging: Tagging, bucket: String, contentMD5: String? = nil) {
            self.tagging = tagging
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case tagging = "Tagging"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct GetBucketPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string)
        ]
        /// The bucket policy as a JSON document.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct PutBucketAccelerateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccelerateConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccelerateConfiguration", location: .body(locationName: "AccelerateConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Specifies the Accelerate Configuration you want to set for the bucket.
        public let accelerateConfiguration: AccelerateConfiguration
        /// Name of the bucket for which the accelerate configuration is set.
        public let bucket: String

        public init(accelerateConfiguration: AccelerateConfiguration, bucket: String) {
            self.accelerateConfiguration = accelerateConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case accelerateConfiguration = "AccelerateConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct CloudFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list),
            AWSShapeMember(label: "CloudFunction", required: false, type: .string),
            AWSShapeMember(label: "Event", required: false, type: .enum),
            AWSShapeMember(label: "InvocationRole", required: false, type: .string),
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]?
        public let cloudFunction: String?
        public let event: Event?
        public let invocationRole: String?
        public let id: String?

        public init(events: [Event]? = nil, cloudFunction: String? = nil, event: Event? = nil, invocationRole: String? = nil, id: String? = nil) {
            self.events = events
            self.cloudFunction = cloudFunction
            self.event = event
            self.invocationRole = invocationRole
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case cloudFunction = "CloudFunction"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case event = "_Event"
            case invocationRole = "InvocationRole"
            case id = "Id"
        }
    }

    public struct RestoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Days", required: false, type: .integer),
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure),
            AWSShapeMember(label: "Tier", required: false, type: .enum),
            AWSShapeMember(label: "SelectParameters", required: false, type: .structure),
            AWSShapeMember(label: "Type", required: false, type: .enum),
            AWSShapeMember(label: "GlacierJobParameters", required: false, type: .structure),
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Lifetime of the active copy in days. Do not use with restores that specify OutputLocation.
        public let days: Int32?
        /// Describes the location where the restore job's output is stored.
        public let outputLocation: OutputLocation?
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier?
        /// Describes the parameters for Select job types.
        public let selectParameters: SelectParameters?
        /// Type of restore request.
        public let `type`: RestoreRequestType?
        /// Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation.
        public let glacierJobParameters: GlacierJobParameters?
        /// The optional description for the job.
        public let description: String?

        public init(days: Int32? = nil, outputLocation: OutputLocation? = nil, tier: Tier? = nil, selectParameters: SelectParameters? = nil, type: RestoreRequestType? = nil, glacierJobParameters: GlacierJobParameters? = nil, description: String? = nil) {
            self.days = days
            self.outputLocation = outputLocation
            self.tier = tier
            self.selectParameters = selectParameters
            self.`type` = `type`
            self.glacierJobParameters = glacierJobParameters
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case days = "Days"
            case outputLocation = "OutputLocation"
            case tier = "Tier"
            case selectParameters = "SelectParameters"
            case `type` = "Type"
            case glacierJobParameters = "GlacierJobParameters"
            case description = "Description"
        }
    }

    public enum BucketVersioningStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct Encryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionType", required: true, type: .enum),
            AWSShapeMember(label: "KMSContext", required: false, type: .string),
            AWSShapeMember(label: "KMSKeyId", required: false, type: .string)
        ]
        /// The server-side encryption algorithm used when storing job results in Amazon S3 (e.g., AES256, aws:kms).
        public let encryptionType: ServerSideEncryption
        /// If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results.
        public let kMSContext: String?
        /// If the encryption type is aws:kms, this optional value specifies the AWS KMS key ID to use for encryption of job results.
        public let kMSKeyId: String?

        public init(encryptionType: ServerSideEncryption, kMSContext: String? = nil, kMSKeyId: String? = nil) {
            self.encryptionType = encryptionType
            self.kMSContext = kMSContext
            self.kMSKeyId = kMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionType = "EncryptionType"
            case kMSContext = "KMSContext"
            case kMSKeyId = "KMSKeyId"
        }
    }

    public struct DeleteBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// The name of the bucket containing the metrics configuration to delete.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public enum OwnerOverride: String, CustomStringConvertible, Codable {
        case destination = "Destination"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectTorrentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        public let requestPayer: RequestPayer?
        public let bucket: String
        public let key: String

        public init(requestPayer: RequestPayer? = nil, bucket: String, key: String) {
            self.requestPayer = requestPayer
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case requestPayer = "x-amz-request-payer"
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct ListBucketInventoryConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?
        /// The name of the bucket containing the inventory configurations to retrieve.
        public let bucket: String

        public init(continuationToken: String? = nil, bucket: String) {
            self.continuationToken = continuationToken
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "continuation-token"
            case bucket = "Bucket"
        }
    }

    public struct GetObjectAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        public let bucket: String
        public let key: String
        public let requestPayer: RequestPayer?

        public init(versionId: String? = nil, bucket: String, key: String, requestPayer: RequestPayer? = nil) {
            self.versionId = versionId
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case bucket = "Bucket"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct SSES3: AWSShape {

    }

    public struct ListBucketInventoryConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "InventoryConfigurationList", location: .body(locationName: "InventoryConfiguration"), required: false, type: .list),
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string),
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated.
        public let isTruncated: Bool?
        /// The list of inventory configurations for a bucket.
        public let inventoryConfigurationList: [InventoryConfiguration]?
        /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?
        /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
        public let continuationToken: String?

        public init(isTruncated: Bool? = nil, inventoryConfigurationList: [InventoryConfiguration]? = nil, nextContinuationToken: String? = nil, continuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.inventoryConfigurationList = inventoryConfigurationList
            self.nextContinuationToken = nextContinuationToken
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case inventoryConfigurationList = "InventoryConfiguration"
            case nextContinuationToken = "NextContinuationToken"
            case continuationToken = "ContinuationToken"
        }
    }

    public struct StorageClassAnalysis: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataExport", required: false, type: .structure)
        ]
        /// A container used to describe how data related to the storage class analysis should be exported.
        public let dataExport: StorageClassAnalysisDataExport?

        public init(dataExport: StorageClassAnalysisDataExport? = nil) {
            self.dataExport = dataExport
        }

        private enum CodingKeys: String, CodingKey {
            case dataExport = "DataExport"
        }
    }

    public struct SseKmsEncryptedObjects: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .enum)
        ]
        /// The replication for KMS encrypted S3 objects is disabled if status is not Enabled.
        public let status: SseKmsEncryptedObjectsStatus

        public init(status: SseKmsEncryptedObjectsStatus) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct InventoryS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string),
            AWSShapeMember(label: "Format", required: true, type: .enum),
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Encryption", required: false, type: .structure),
            AWSShapeMember(label: "AccountId", required: false, type: .string)
        ]
        /// The Amazon resource name (ARN) of the bucket where inventory results will be published.
        public let bucket: String
        /// Specifies the output format of the inventory results.
        public let format: InventoryFormat
        /// The prefix that is prepended to all inventory results.
        public let prefix: String?
        /// Contains the type of server-side encryption used to encrypt the inventory results.
        public let encryption: InventoryEncryption?
        /// The ID of the account that owns the destination bucket.
        public let accountId: String?

        public init(bucket: String, format: InventoryFormat, prefix: String? = nil, encryption: InventoryEncryption? = nil, accountId: String? = nil) {
            self.bucket = bucket
            self.format = format
            self.prefix = prefix
            self.encryption = encryption
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case format = "Format"
            case prefix = "Prefix"
            case encryption = "Encryption"
            case accountId = "AccountId"
        }
    }

    public struct ListObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer),
            AWSShapeMember(label: "Delimiter", required: false, type: .string),
            AWSShapeMember(label: "NextMarker", required: false, type: .string),
            AWSShapeMember(label: "Marker", required: false, type: .string),
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list),
            AWSShapeMember(label: "EncodingType", required: false, type: .enum),
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "Name", required: false, type: .string),
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Contents", required: false, type: .list)
        ]
        public let maxKeys: Int32?
        public let delimiter: String?
        /// When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
        public let nextMarker: String?
        public let marker: String?
        public let commonPrefixes: [CommonPrefix]?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        public let name: String?
        public let prefix: String?
        public let contents: [Object]?

        public init(maxKeys: Int32? = nil, delimiter: String? = nil, nextMarker: String? = nil, marker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, encodingType: EncodingType? = nil, isTruncated: Bool? = nil, name: String? = nil, prefix: String? = nil, contents: [Object]? = nil) {
            self.maxKeys = maxKeys
            self.delimiter = delimiter
            self.nextMarker = nextMarker
            self.marker = marker
            self.commonPrefixes = commonPrefixes
            self.encodingType = encodingType
            self.isTruncated = isTruncated
            self.name = name
            self.prefix = prefix
            self.contents = contents
        }

        private enum CodingKeys: String, CodingKey {
            case maxKeys = "MaxKeys"
            case delimiter = "Delimiter"
            case nextMarker = "NextMarker"
            case marker = "Marker"
            case commonPrefixes = "CommonPrefixes"
            case encodingType = "EncodingType"
            case isTruncated = "IsTruncated"
            case name = "Name"
            case prefix = "Prefix"
            case contents = "Contents"
        }
    }

    public struct Redirect: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: false, type: .enum),
            AWSShapeMember(label: "HttpRedirectCode", required: false, type: .string),
            AWSShapeMember(label: "HostName", required: false, type: .string),
            AWSShapeMember(label: "ReplaceKeyWith", required: false, type: .string),
            AWSShapeMember(label: "ReplaceKeyPrefixWith", required: false, type: .string)
        ]
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public let httpRedirectCode: String?
        /// The host name to use in the redirect request.
        public let hostName: String?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
        public let replaceKeyWith: String?
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
        public let replaceKeyPrefixWith: String?

        public init(protocol: Protocol? = nil, httpRedirectCode: String? = nil, hostName: String? = nil, replaceKeyWith: String? = nil, replaceKeyPrefixWith: String? = nil) {
            self.`protocol` = `protocol`
            self.httpRedirectCode = httpRedirectCode
            self.hostName = hostName
            self.replaceKeyWith = replaceKeyWith
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case httpRedirectCode = "HttpRedirectCode"
            case hostName = "HostName"
            case replaceKeyWith = "ReplaceKeyWith"
            case replaceKeyPrefixWith = "ReplaceKeyPrefixWith"
        }
    }

    public enum ObjectStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        public var description: String { return self.rawValue }
    }

    public enum BucketAccelerateStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketLifecycleConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let lifecycleConfiguration: BucketLifecycleConfiguration?
        public let bucket: String

        public init(lifecycleConfiguration: BucketLifecycleConfiguration? = nil, bucket: String) {
            self.lifecycleConfiguration = lifecycleConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleConfiguration = "LifecycleConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct DeletedObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "DeleteMarkerVersionId", required: false, type: .string),
            AWSShapeMember(label: "DeleteMarker", required: false, type: .boolean)
        ]
        public let versionId: String?
        public let key: String?
        public let deleteMarkerVersionId: String?
        public let deleteMarker: Bool?

        public init(versionId: String? = nil, key: String? = nil, deleteMarkerVersionId: String? = nil, deleteMarker: Bool? = nil) {
            self.versionId = versionId
            self.key = key
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.deleteMarker = deleteMarker
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case key = "Key"
            case deleteMarkerVersionId = "DeleteMarkerVersionId"
            case deleteMarker = "DeleteMarker"
        }
    }

    public enum BucketLocationConstraint: String, CustomStringConvertible, Codable {
        case eu = "EU"
        case euWest1 = "eu-west-1"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case apSouth1 = "ap-south-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case saEast1 = "sa-east-1"
        case cnNorth1 = "cn-north-1"
        case euCentral1 = "eu-central-1"
        public var description: String { return self.rawValue }
    }

    public struct Delete: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Quiet", required: false, type: .boolean),
            AWSShapeMember(label: "Objects", location: .body(locationName: "Object"), required: true, type: .list)
        ]
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public let quiet: Bool?
        public let objects: [ObjectIdentifier]

        public init(quiet: Bool? = nil, objects: [ObjectIdentifier]) {
            self.quiet = quiet
            self.objects = objects
        }

        private enum CodingKeys: String, CodingKey {
            case quiet = "Quiet"
            case objects = "Object"
        }
    }

    public struct GetBucketRequestPaymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct AnalyticsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure)
        ]
        /// The prefix to use when evaluating an AND predicate.
        public let prefix: String?
        /// The list of tags to use when evaluating an AND predicate.
        public let tags: TagSet?

        public init(prefix: String? = nil, tags: TagSet? = nil) {
            self.prefix = prefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tags = "Tag"
        }
    }

    public enum FilterRuleName: String, CustomStringConvertible, Codable {
        case prefix = "prefix"
        case suffix = "suffix"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketVersioningRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "VersioningConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string),
            AWSShapeMember(label: "VersioningConfiguration", location: .body(locationName: "VersioningConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let versioningConfiguration: VersioningConfiguration
        public let contentMD5: String?

        public init(bucket: String, mfa: String? = nil, versioningConfiguration: VersioningConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.mfa = mfa
            self.versioningConfiguration = versioningConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case mfa = "x-amz-mfa"
            case versioningConfiguration = "VersioningConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct GetBucketAccelerateConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct ListObjectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer),
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string),
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string),
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        public let encodingType: EncodingType?
        /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// Specifies the key to start with when listing objects in a bucket.
        public let marker: String?

        public init(bucket: String, maxKeys: Int32? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil, requestPayer: RequestPayer? = nil, prefix: String? = nil, marker: String? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.requestPayer = requestPayer
            self.prefix = prefix
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxKeys = "max-keys"
            case delimiter = "delimiter"
            case encodingType = "encoding-type"
            case requestPayer = "x-amz-request-payer"
            case prefix = "prefix"
            case marker = "marker"
        }
    }

    public struct LifecycleExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpiredObjectDeleteMarker", required: false, type: .boolean),
            AWSShapeMember(label: "Days", required: false, type: .integer),
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public let expiredObjectDeleteMarker: Bool?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?

        public init(expiredObjectDeleteMarker: Bool? = nil, days: Int32? = nil, date: TimeStamp? = nil) {
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
            self.days = days
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
            case days = "Days"
            case date = "Date"
        }
    }

    public struct GetBucketLoggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct DeleteObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        /// Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker.
        public let deleteMarker: Bool?
        /// Returns the version ID of the delete marker created as a result of the DELETE operation.
        public let versionId: String?

        public init(requestCharged: RequestCharged? = nil, deleteMarker: Bool? = nil, versionId: String? = nil) {
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case deleteMarker = "x-amz-delete-marker"
            case versionId = "x-amz-version-id"
        }
    }

    public struct GetBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket from which the server-side encryption configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum Event: String, CustomStringConvertible, Codable {
        case s3Reducedredundancylostobject = "s3:ReducedRedundancyLostObject"
        case s3ObjectcreatedAll = "s3:ObjectCreated:*"
        case s3ObjectcreatedPut = "s3:ObjectCreated:Put"
        case s3ObjectcreatedPost = "s3:ObjectCreated:Post"
        case s3ObjectcreatedCopy = "s3:ObjectCreated:Copy"
        case s3ObjectcreatedCompletemultipartupload = "s3:ObjectCreated:CompleteMultipartUpload"
        case s3ObjectremovedAll = "s3:ObjectRemoved:*"
        case s3ObjectremovedDelete = "s3:ObjectRemoved:Delete"
        case s3ObjectremovedDeletemarkercreated = "s3:ObjectRemoved:DeleteMarkerCreated"
        public var description: String { return self.rawValue }
    }

    public struct MetadataEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string),
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        public let name: String?
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PutBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let lifecycleConfiguration: LifecycleConfiguration?
        public let bucket: String
        public let contentMD5: String?

        public init(lifecycleConfiguration: LifecycleConfiguration? = nil, bucket: String, contentMD5: String? = nil) {
            self.lifecycleConfiguration = lifecycleConfiguration
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleConfiguration = "LifecycleConfiguration"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct ListMultipartUploadsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string),
            AWSShapeMember(label: "Delimiter", required: false, type: .string),
            AWSShapeMember(label: "UploadIdMarker", required: false, type: .string),
            AWSShapeMember(label: "NextUploadIdMarker", required: false, type: .string),
            AWSShapeMember(label: "Uploads", location: .body(locationName: "Upload"), required: false, type: .list),
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list),
            AWSShapeMember(label: "EncodingType", required: false, type: .enum),
            AWSShapeMember(label: "KeyMarker", required: false, type: .string),
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "MaxUploads", required: false, type: .integer),
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string)
        ]
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        public let delimiter: String?
        /// Upload ID after which listing began.
        public let uploadIdMarker: String?
        /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
        public let nextUploadIdMarker: String?
        public let uploads: [MultipartUpload]?
        public let commonPrefixes: [CommonPrefix]?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// The key at or after which the listing began.
        public let keyMarker: String?
        /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
        public let isTruncated: Bool?
        /// Maximum number of multipart uploads that could have been included in the response.
        public let maxUploads: Int32?
        /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
        public let prefix: String?
        /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
        public let nextKeyMarker: String?

        public init(bucket: String? = nil, delimiter: String? = nil, uploadIdMarker: String? = nil, nextUploadIdMarker: String? = nil, uploads: [MultipartUpload]? = nil, commonPrefixes: [CommonPrefix]? = nil, encodingType: EncodingType? = nil, keyMarker: String? = nil, isTruncated: Bool? = nil, maxUploads: Int32? = nil, prefix: String? = nil, nextKeyMarker: String? = nil) {
            self.bucket = bucket
            self.delimiter = delimiter
            self.uploadIdMarker = uploadIdMarker
            self.nextUploadIdMarker = nextUploadIdMarker
            self.uploads = uploads
            self.commonPrefixes = commonPrefixes
            self.encodingType = encodingType
            self.keyMarker = keyMarker
            self.isTruncated = isTruncated
            self.maxUploads = maxUploads
            self.prefix = prefix
            self.nextKeyMarker = nextKeyMarker
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case delimiter = "Delimiter"
            case uploadIdMarker = "UploadIdMarker"
            case nextUploadIdMarker = "NextUploadIdMarker"
            case uploads = "Upload"
            case commonPrefixes = "CommonPrefixes"
            case encodingType = "EncodingType"
            case keyMarker = "KeyMarker"
            case isTruncated = "IsTruncated"
            case maxUploads = "MaxUploads"
            case prefix = "Prefix"
            case nextKeyMarker = "NextKeyMarker"
        }
    }

    public struct PutBucketRequestPaymentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RequestPaymentConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestPaymentConfiguration", location: .body(locationName: "RequestPaymentConfiguration"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let requestPaymentConfiguration: RequestPaymentConfiguration
        public let bucket: String
        public let contentMD5: String?

        public init(requestPaymentConfiguration: RequestPaymentConfiguration, bucket: String, contentMD5: String? = nil) {
            self.requestPaymentConfiguration = requestPaymentConfiguration
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case requestPaymentConfiguration = "RequestPaymentConfiguration"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct OutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]
        /// Describes an S3 location that will receive the results of the restore request.
        public let s3: S3Location?

        public init(s3: S3Location? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct CORSConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: true, type: .list)
        ]
        public let cORSRules: [CORSRule]

        public init(cORSRules: [CORSRule]) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct EndEvent: AWSShape {

    }

    public struct MultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadId", required: false, type: .string),
            AWSShapeMember(label: "Initiator", required: false, type: .structure),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum),
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "Initiated", required: false, type: .timestamp),
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// Upload ID that identifies the multipart upload.
        public let uploadId: String?
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Key of the object for which the multipart upload was initiated.
        public let key: String?
        /// Date and time at which the multipart upload was initiated.
        public let initiated: TimeStamp?
        public let owner: Owner?

        public init(uploadId: String? = nil, initiator: Initiator? = nil, storageClass: StorageClass? = nil, key: String? = nil, initiated: TimeStamp? = nil, owner: Owner? = nil) {
            self.uploadId = uploadId
            self.initiator = initiator
            self.storageClass = storageClass
            self.key = key
            self.initiated = initiated
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case uploadId = "UploadId"
            case initiator = "Initiator"
            case storageClass = "StorageClass"
            case key = "Key"
            case initiated = "Initiated"
            case owner = "Owner"
        }
    }

    public enum Payer: String, CustomStringConvertible, Codable {
        case requester = "Requester"
        case bucketowner = "BucketOwner"
        public var description: String { return self.rawValue }
    }

    public struct TagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct ListMultipartUploadsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string),
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum),
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string),
            AWSShapeMember(label: "UploadIdMarker", location: .querystring(locationName: "upload-id-marker"), required: false, type: .string),
            AWSShapeMember(label: "MaxUploads", location: .querystring(locationName: "max-uploads"), required: false, type: .integer),
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string)
        ]
        public let bucket: String
        /// Character you use to group keys.
        public let delimiter: String?
        public let encodingType: EncodingType?
        /// Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.
        public let keyMarker: String?
        /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
        public let uploadIdMarker: String?
        /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
        public let maxUploads: Int32?
        /// Lists in-progress uploads only for those keys that begin with the specified prefix.
        public let prefix: String?

        public init(bucket: String, delimiter: String? = nil, encodingType: EncodingType? = nil, keyMarker: String? = nil, uploadIdMarker: String? = nil, maxUploads: Int32? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyMarker = keyMarker
            self.uploadIdMarker = uploadIdMarker
            self.maxUploads = maxUploads
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case delimiter = "delimiter"
            case encodingType = "encoding-type"
            case keyMarker = "key-marker"
            case uploadIdMarker = "upload-id-marker"
            case maxUploads = "max-uploads"
            case prefix = "prefix"
        }
    }

    public struct CopyObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyObjectResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string),
            AWSShapeMember(label: "CopyObjectResult", required: false, type: .structure),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string)
        ]
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let copySourceVersionId: String?
        public let copyObjectResult: CopyObjectResult?
        /// Version ID of the newly created copy.
        public let versionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If the object expiration is configured, the response includes this header.
        public let expiration: String?

        public init(serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, sSECustomerAlgorithm: String? = nil, copySourceVersionId: String? = nil, copyObjectResult: CopyObjectResult? = nil, versionId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerKeyMD5: String? = nil, expiration: String? = nil) {
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceVersionId = copySourceVersionId
            self.copyObjectResult = copyObjectResult
            self.versionId = versionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copySourceVersionId = "x-amz-copy-source-version-id"
            case copyObjectResult = "CopyObjectResult"
            case versionId = "x-amz-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case expiration = "x-amz-expiration"
        }
    }

    public struct ListBucketMetricsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?
        /// The name of the bucket containing the metrics configurations to retrieve.
        public let bucket: String

        public init(continuationToken: String? = nil, bucket: String) {
            self.continuationToken = continuationToken
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "continuation-token"
            case bucket = "Bucket"
        }
    }

    public struct Progress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesReturned", required: false, type: .long),
            AWSShapeMember(label: "BytesScanned", required: false, type: .long),
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long)
        ]
        /// Current number of bytes of records payload data returned.
        public let bytesReturned: Int64?
        /// Current number of object bytes scanned.
        public let bytesScanned: Int64?
        /// Current number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?

        public init(bytesReturned: Int64? = nil, bytesScanned: Int64? = nil, bytesProcessed: Int64? = nil) {
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
            self.bytesProcessed = bytesProcessed
        }

        private enum CodingKeys: String, CodingKey {
            case bytesReturned = "BytesReturned"
            case bytesScanned = "BytesScanned"
            case bytesProcessed = "BytesProcessed"
        }
    }

    public struct MetricsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure)
        ]
        /// The prefix used when evaluating an AND predicate.
        public let prefix: String?
        /// The list of tags used when evaluating an AND predicate.
        public let tags: TagSet?

        public init(prefix: String? = nil, tags: TagSet? = nil) {
            self.prefix = prefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tags = "Tag"
        }
    }

    public struct GetBucketEncryptionOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", required: false, type: .structure)
        ]
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?

        public init(serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil) {
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        }
    }

    public enum RequestPayer: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketInventoryConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryConfiguration", required: false, type: .structure)
        ]
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration?

        public init(inventoryConfiguration: InventoryConfiguration? = nil) {
            self.inventoryConfiguration = inventoryConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryConfiguration = "InventoryConfiguration"
        }
    }

    public struct PutObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "Body", required: false, type: .blob),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long),
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string),
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string),
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp),
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string),
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string),
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "Metadata", required: false, type: .map),
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string),
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string),
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string),
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string)
        ]
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Object data.
        public let body: Data?
        public let requestPayer: RequestPayer?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Object key for which the PUT operation was initiated.
        public let key: String
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Name of the bucket to which the PUT operation was initiated.
        public let bucket: String
        /// The language the content is in.
        public let contentLanguage: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?

        public init(websiteRedirectLocation: String? = nil, sSECustomerAlgorithm: String? = nil, body: Data? = nil, requestPayer: RequestPayer? = nil, contentLength: Int64? = nil, tagging: String? = nil, grantWriteACP: String? = nil, sSECustomerKeyMD5: String? = nil, contentDisposition: String? = nil, key: String, contentType: String? = nil, expires: TimeStamp? = nil, acl: ObjectCannedACL? = nil, contentMD5: String? = nil, contentEncoding: String? = nil, storageClass: StorageClass? = nil, sSECustomerKey: String? = nil, metadata: [String: String]? = nil, cacheControl: String? = nil, sSEKMSKeyId: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, bucket: String, contentLanguage: String? = nil, grantRead: String? = nil, grantFullControl: String? = nil, grantReadACP: String? = nil) {
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.body = body
            self.requestPayer = requestPayer
            self.contentLength = contentLength
            self.tagging = tagging
            self.grantWriteACP = grantWriteACP
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.contentDisposition = contentDisposition
            self.key = key
            self.contentType = contentType
            self.expires = expires
            self.acl = acl
            self.contentMD5 = contentMD5
            self.contentEncoding = contentEncoding
            self.storageClass = storageClass
            self.sSECustomerKey = sSECustomerKey
            self.metadata = metadata
            self.cacheControl = cacheControl
            self.sSEKMSKeyId = sSEKMSKeyId
            self.serverSideEncryption = serverSideEncryption
            self.bucket = bucket
            self.contentLanguage = contentLanguage
            self.grantRead = grantRead
            self.grantFullControl = grantFullControl
            self.grantReadACP = grantReadACP
        }

        private enum CodingKeys: String, CodingKey {
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case body = "Body"
            case requestPayer = "x-amz-request-payer"
            case contentLength = "Content-Length"
            case tagging = "x-amz-tagging"
            case grantWriteACP = "x-amz-grant-write-acp"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case contentDisposition = "Content-Disposition"
            case key = "Key"
            case contentType = "Content-Type"
            case expires = "Expires"
            case acl = "x-amz-acl"
            case contentMD5 = "Content-MD5"
            case contentEncoding = "Content-Encoding"
            case storageClass = "x-amz-storage-class"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case metadata = "Metadata"
            case cacheControl = "Cache-Control"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case bucket = "Bucket"
            case contentLanguage = "Content-Language"
            case grantRead = "x-amz-grant-read"
            case grantFullControl = "x-amz-grant-full-control"
            case grantReadACP = "x-amz-grant-read-acp"
        }
    }

    public struct ErrorDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The object key name to use when a 4XX class error occurs.
        public let key: String

        public init(key: String) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct LifecycleRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Transitions", location: .body(locationName: "Transition"), required: false, type: .list),
            AWSShapeMember(label: "Status", required: true, type: .enum),
            AWSShapeMember(label: "Filter", required: false, type: .structure),
            AWSShapeMember(label: "ID", required: false, type: .string),
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure),
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure),
            AWSShapeMember(label: "NoncurrentVersionTransitions", location: .body(locationName: "NoncurrentVersionTransition"), required: false, type: .list),
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Expiration", required: false, type: .structure)
        ]
        public let transitions: [Transition]?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let filter: LifecycleRuleFilter?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        public let noncurrentVersionTransitions: [NoncurrentVersionTransition]?
        /// Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead.
        public let prefix: String?
        public let expiration: LifecycleExpiration?

        public init(transitions: [Transition]? = nil, status: ExpirationStatus, filter: LifecycleRuleFilter? = nil, id: String? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil, prefix: String? = nil, expiration: LifecycleExpiration? = nil) {
            self.transitions = transitions
            self.status = status
            self.filter = filter
            self.id = id
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.prefix = prefix
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case transitions = "Transition"
            case status = "Status"
            case filter = "Filter"
            case id = "ID"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case noncurrentVersionTransitions = "NoncurrentVersionTransition"
            case prefix = "Prefix"
            case expiration = "Expiration"
        }
    }

    public enum MetadataDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct ReplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list),
            AWSShapeMember(label: "Role", required: true, type: .string)
        ]
        /// Container for information about a particular replication rule. Replication configuration must have at least one rule and can contain up to 1,000 rules.
        public let rules: [ReplicationRule]
        /// Amazon Resource Name (ARN) of an IAM role for Amazon S3 to assume when replicating the objects.
        public let role: String

        public init(rules: [ReplicationRule], role: String) {
            self.rules = rules
            self.role = role
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
            case role = "Role"
        }
    }

    public struct LifecycleRuleAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure)
        ]
        public let prefix: String?
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public let tags: TagSet?

        public init(prefix: String? = nil, tags: TagSet? = nil) {
            self.prefix = prefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tags = "Tag"
        }
    }

    public struct GetBucketLocationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct InventoryEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSES3", location: .body(locationName: "SSE-S3"), required: false, type: .structure),
            AWSShapeMember(label: "SSEKMS", location: .body(locationName: "SSE-KMS"), required: false, type: .structure)
        ]
        /// Specifies the use of SSE-S3 to encrypt delievered Inventory reports.
        public let sses3: SSES3?
        /// Specifies the use of SSE-KMS to encrypt delievered Inventory reports.
        public let ssekms: SSEKMS?

        public init(sses3: SSES3? = nil, ssekms: SSEKMS? = nil) {
            self.sses3 = sses3
            self.ssekms = ssekms
        }

        private enum CodingKeys: String, CodingKey {
            case sses3 = "SSE-S3"
            case ssekms = "SSE-KMS"
        }
    }

    public struct GetBucketLifecycleConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Grants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [Grant]?

        public init(grant: [Grant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public struct Owner: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string),
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        public let id: String?
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct InventorySchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", required: true, type: .enum)
        ]
        /// Specifies how frequently inventory results are produced.
        public let frequency: InventoryFrequency

        public init(frequency: InventoryFrequency) {
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicaKmsKeyID", required: false, type: .string)
        ]
        /// The id of the KMS key used to encrypt the replica object.
        public let replicaKmsKeyID: String?

        public init(replicaKmsKeyID: String? = nil) {
            self.replicaKmsKeyID = replicaKmsKeyID
        }

        private enum CodingKeys: String, CodingKey {
            case replicaKmsKeyID = "ReplicaKmsKeyID"
        }
    }

    public struct AbortMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let uploadId: String
        public let bucket: String
        public let key: String
        public let requestPayer: RequestPayer?

        public init(uploadId: String, bucket: String, key: String, requestPayer: RequestPayer? = nil) {
            self.uploadId = uploadId
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case uploadId = "uploadId"
            case bucket = "Bucket"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct GetBucketReplicationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationConfiguration", required: false, type: .structure)
        ]
        public let replicationConfiguration: ReplicationConfiguration?

        public init(replicationConfiguration: ReplicationConfiguration? = nil) {
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public struct RecordsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payload", required: false, type: .blob)
        ]
        /// The byte array of partial, one or more result records.
        public let payload: Data?

        public init(payload: Data? = nil) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "Payload"
        }
    }

    public struct ProgressEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Progress event details.
        public let details: Progress?

        public init(details: Progress? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct ServerSideEncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        /// Container for information about a particular server-side encryption configuration rule.
        public let rules: [ServerSideEncryptionRule]

        public init(rules: [ServerSideEncryptionRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct ListBucketAnalyticsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean),
            AWSShapeMember(label: "AnalyticsConfigurationList", location: .body(locationName: "AnalyticsConfiguration"), required: false, type: .list),
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string),
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The list of analytics configurations for a bucket.
        public let analyticsConfigurationList: [AnalyticsConfiguration]?
        /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
        public let nextContinuationToken: String?
        /// The ContinuationToken that represents where this request began.
        public let continuationToken: String?

        public init(isTruncated: Bool? = nil, analyticsConfigurationList: [AnalyticsConfiguration]? = nil, nextContinuationToken: String? = nil, continuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.analyticsConfigurationList = analyticsConfigurationList
            self.nextContinuationToken = nextContinuationToken
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case analyticsConfigurationList = "AnalyticsConfiguration"
            case nextContinuationToken = "NextContinuationToken"
            case continuationToken = "ContinuationToken"
        }
    }

    public struct RequestProgress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public enum MFADelete: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct LoggingEnabled: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGrants", required: false, type: .structure),
            AWSShapeMember(label: "TargetBucket", required: true, type: .string),
            AWSShapeMember(label: "TargetPrefix", required: true, type: .string)
        ]
        public let targetGrants: TargetGrants?
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        public let targetBucket: String
        /// This element lets you specify a prefix for the keys that the log files will be stored under.
        public let targetPrefix: String

        public init(targetGrants: TargetGrants? = nil, targetBucket: String, targetPrefix: String) {
            self.targetGrants = targetGrants
            self.targetBucket = targetBucket
            self.targetPrefix = targetPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case targetGrants = "TargetGrants"
            case targetBucket = "TargetBucket"
            case targetPrefix = "TargetPrefix"
        }
    }

    public struct LifecycleRuleFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string),
            AWSShapeMember(label: "Tag", required: false, type: .structure),
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String?
        /// This tag must exist in the object's tag set in order for the rule to apply.
        public let tag: Tag?
        public let and: LifecycleRuleAndOperator?

        public init(prefix: String? = nil, tag: Tag? = nil, and: LifecycleRuleAndOperator? = nil) {
            self.prefix = prefix
            self.tag = tag
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tag = "Tag"
            case and = "And"
        }
    }

    public struct DeleteBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Encryption", required: false, type: .structure),
            AWSShapeMember(label: "UserMetadata", required: false, type: .structure),
            AWSShapeMember(label: "Prefix", required: true, type: .string),
            AWSShapeMember(label: "AccessControlList", required: false, type: .structure),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum),
            AWSShapeMember(label: "BucketName", required: true, type: .string),
            AWSShapeMember(label: "Tagging", required: false, type: .structure),
            AWSShapeMember(label: "CannedACL", required: false, type: .enum)
        ]
        public let encryption: Encryption?
        /// A list of metadata to store with the restore results in S3.
        public let userMetadata: UserMetadata?
        /// The prefix that is prepended to the restore results for this request.
        public let prefix: String
        /// A list of grants that control access to the staged results.
        public let accessControlList: Grants?
        /// The class of storage used to store the restore results.
        public let storageClass: StorageClass?
        /// The name of the bucket where the restore results will be placed.
        public let bucketName: String
        /// The tag-set that is applied to the restore results.
        public let tagging: Tagging?
        /// The canned ACL to apply to the restore results.
        public let cannedACL: ObjectCannedACL?

        public init(encryption: Encryption? = nil, userMetadata: UserMetadata? = nil, prefix: String, accessControlList: Grants? = nil, storageClass: StorageClass? = nil, bucketName: String, tagging: Tagging? = nil, cannedACL: ObjectCannedACL? = nil) {
            self.encryption = encryption
            self.userMetadata = userMetadata
            self.prefix = prefix
            self.accessControlList = accessControlList
            self.storageClass = storageClass
            self.bucketName = bucketName
            self.tagging = tagging
            self.cannedACL = cannedACL
        }

        private enum CodingKeys: String, CodingKey {
            case encryption = "Encryption"
            case userMetadata = "UserMetadata"
            case prefix = "Prefix"
            case accessControlList = "AccessControlList"
            case storageClass = "StorageClass"
            case bucketName = "BucketName"
            case tagging = "Tagging"
            case cannedACL = "CannedACL"
        }
    }

    public struct SelectParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure),
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum),
            AWSShapeMember(label: "Expression", required: true, type: .string),
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure)
        ]
        /// Describes the serialization format of the object.
        public let inputSerialization: InputSerialization
        /// The type of the provided expression (e.g., SQL).
        public let expressionType: ExpressionType
        /// The expression that is used to query the object.
        public let expression: String
        /// Describes how the results of the Select job are serialized.
        public let outputSerialization: OutputSerialization

        public init(inputSerialization: InputSerialization, expressionType: ExpressionType, expression: String, outputSerialization: OutputSerialization) {
            self.inputSerialization = inputSerialization
            self.expressionType = expressionType
            self.expression = expression
            self.outputSerialization = outputSerialization
        }

        private enum CodingKeys: String, CodingKey {
            case inputSerialization = "InputSerialization"
            case expressionType = "ExpressionType"
            case expression = "Expression"
            case outputSerialization = "OutputSerialization"
        }
    }

    public struct StorageClassAnalysisDataExport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", required: true, type: .structure),
            AWSShapeMember(label: "OutputSchemaVersion", required: true, type: .enum)
        ]
        /// The place to store the data for an analysis.
        public let destination: AnalyticsExportDestination
        /// The version of the output schema to use when exporting data. Must be V_1.
        public let outputSchemaVersion: StorageClassAnalysisSchemaVersion

        public init(destination: AnalyticsExportDestination, outputSchemaVersion: StorageClassAnalysisSchemaVersion) {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case outputSchemaVersion = "OutputSchemaVersion"
        }
    }

    public enum QuoteFields: String, CustomStringConvertible, Codable {
        case always = "ALWAYS"
        case asneeded = "ASNEEDED"
        public var description: String { return self.rawValue }
    }

    public struct ListBucketsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Buckets", required: false, type: .structure),
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        public let buckets: Buckets?
        public let owner: Owner?

        public init(buckets: Buckets? = nil, owner: Owner? = nil) {
            self.buckets = buckets
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case buckets = "Buckets"
            case owner = "Owner"
        }
    }

    public struct RequestPaymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: true, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer

        public init(payer: Payer) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public struct RoutingRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Redirect", required: true, type: .structure),
            AWSShapeMember(label: "Condition", required: false, type: .structure)
        ]
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        public let redirect: Redirect
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public let condition: Condition?

        public init(redirect: Redirect, condition: Condition? = nil) {
            self.redirect = redirect
            self.condition = condition
        }

        private enum CodingKeys: String, CodingKey {
            case redirect = "Redirect"
            case condition = "Condition"
        }
    }

    public enum TaggingDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketAccelerateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket for which the accelerate configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DeleteBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct UploadPartOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string)
        ]
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let requestCharged: RequestCharged?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?

        public init(sSECustomerKeyMD5: String? = nil, requestCharged: RequestCharged? = nil, sSEKMSKeyId: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.requestCharged = requestCharged
            self.sSEKMSKeyId = sSEKMSKeyId
            self.serverSideEncryption = serverSideEncryption
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case requestCharged = "x-amz-request-charged"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case eTag = "ETag"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
        }
    }

    public struct DeleteBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct AnalyticsS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string),
            AWSShapeMember(label: "Format", required: true, type: .enum),
            AWSShapeMember(label: "BucketAccountId", required: false, type: .string),
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The Amazon resource name (ARN) of the bucket to which data is exported.
        public let bucket: String
        /// The file format used when exporting data to Amazon S3.
        public let format: AnalyticsS3ExportFileFormat
        /// The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.
        public let bucketAccountId: String?
        /// The prefix to use when exporting data. The exported data begins with this prefix.
        public let prefix: String?

        public init(bucket: String, format: AnalyticsS3ExportFileFormat, bucketAccountId: String? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.format = format
            self.bucketAccountId = bucketAccountId
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case format = "Format"
            case bucketAccountId = "BucketAccountId"
            case prefix = "Prefix"
        }
    }

    public struct BucketLifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [LifecycleRule]

        public init(rules: [LifecycleRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct JSONInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The type of JSON. Valid values: Document, Lines.
        public let `type`: JSONType?

        public init(type: JSONType? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct GetObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "Body", required: false, type: .blob),
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long),
            AWSShapeMember(label: "TagCount", location: .header(locationName: "x-amz-tagging-count"), required: false, type: .integer),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer),
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string),
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string),
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string),
            AWSShapeMember(label: "ContentRange", location: .header(locationName: "Content-Range"), required: false, type: .string),
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string),
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string),
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp),
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum),
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean),
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string),
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum),
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string),
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer),
            AWSShapeMember(label: "Metadata", required: false, type: .map),
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string),
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string)
        ]
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Object data.
        public let body: Data?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// The number of tags, if any, on the object.
        public let tagCount: Int32?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// The count of parts this object has.
        public let partsCount: Int32?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        /// The portion of the object returned in the response.
        public let contentRange: String?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        public let acceptRanges: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        public let replicationStatus: ReplicationStatus?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        public let storageClass: StorageClass?
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Version of the object.
        public let versionId: String?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        public let requestCharged: RequestCharged?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The language the content is in.
        public let contentLanguage: String?

        public init(websiteRedirectLocation: String? = nil, sSECustomerAlgorithm: String? = nil, body: Data? = nil, contentLength: Int64? = nil, tagCount: Int32? = nil, sSECustomerKeyMD5: String? = nil, partsCount: Int32? = nil, contentDisposition: String? = nil, contentType: String? = nil, restore: String? = nil, contentRange: String? = nil, eTag: String? = nil, acceptRanges: String? = nil, expires: TimeStamp? = nil, replicationStatus: ReplicationStatus? = nil, deleteMarker: Bool? = nil, contentEncoding: String? = nil, storageClass: StorageClass? = nil, expiration: String? = nil, missingMeta: Int32? = nil, metadata: [String: String]? = nil, cacheControl: String? = nil, versionId: String? = nil, lastModified: TimeStamp? = nil, sSEKMSKeyId: String? = nil, requestCharged: RequestCharged? = nil, serverSideEncryption: ServerSideEncryption? = nil, contentLanguage: String? = nil) {
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.body = body
            self.contentLength = contentLength
            self.tagCount = tagCount
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.partsCount = partsCount
            self.contentDisposition = contentDisposition
            self.contentType = contentType
            self.restore = restore
            self.contentRange = contentRange
            self.eTag = eTag
            self.acceptRanges = acceptRanges
            self.expires = expires
            self.replicationStatus = replicationStatus
            self.deleteMarker = deleteMarker
            self.contentEncoding = contentEncoding
            self.storageClass = storageClass
            self.expiration = expiration
            self.missingMeta = missingMeta
            self.metadata = metadata
            self.cacheControl = cacheControl
            self.versionId = versionId
            self.lastModified = lastModified
            self.sSEKMSKeyId = sSEKMSKeyId
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
            self.contentLanguage = contentLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case body = "Body"
            case contentLength = "Content-Length"
            case tagCount = "x-amz-tagging-count"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case partsCount = "x-amz-mp-parts-count"
            case contentDisposition = "Content-Disposition"
            case contentType = "Content-Type"
            case restore = "x-amz-restore"
            case contentRange = "Content-Range"
            case eTag = "ETag"
            case acceptRanges = "accept-ranges"
            case expires = "Expires"
            case replicationStatus = "x-amz-replication-status"
            case deleteMarker = "x-amz-delete-marker"
            case contentEncoding = "Content-Encoding"
            case storageClass = "x-amz-storage-class"
            case expiration = "x-amz-expiration"
            case missingMeta = "x-amz-missing-meta"
            case metadata = "Metadata"
            case cacheControl = "Cache-Control"
            case versionId = "x-amz-version-id"
            case lastModified = "Last-Modified"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case requestCharged = "x-amz-request-charged"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case contentLanguage = "Content-Language"
        }
    }

    public enum AnalyticsS3ExportFileFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "AnalyticsConfiguration", location: .body(locationName: "AnalyticsConfiguration"), required: true, type: .structure)
        ]
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// The name of the bucket to which an analytics configuration is stored.
        public let bucket: String
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration

        public init(id: String, bucket: String, analyticsConfiguration: AnalyticsConfiguration) {
            self.id = id
            self.bucket = bucket
            self.analyticsConfiguration = analyticsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
            case analyticsConfiguration = "AnalyticsConfiguration"
        }
    }

    public struct CreateBucketOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        public let location: String?

        public init(location: String? = nil) {
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
        }
    }

    public struct SSEKMS: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// Specifies the ID of the AWS Key Management Service (KMS) master encryption key to use for encrypting Inventory reports.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case canonicaluser = "CanonicalUser"
        case amazoncustomerbyemail = "AmazonCustomerByEmail"
        case group = "Group"
        public var description: String { return self.rawValue }
    }

    public struct CopyObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp),
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum),
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string),
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string),
            AWSShapeMember(label: "TaggingDirective", location: .header(locationName: "x-amz-tagging-directive"), required: false, type: .enum),
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp),
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum),
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string),
            AWSShapeMember(label: "MetadataDirective", location: .header(locationName: "x-amz-metadata-directive"), required: false, type: .enum),
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum),
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string),
            AWSShapeMember(label: "Metadata", required: false, type: .map),
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp),
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string),
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string),
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string)
        ]
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        public let requestPayer: RequestPayer?
        /// The tag-set for the object destination object this value must be used in conjunction with the TaggingDirective. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        public let key: String
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request.
        public let taggingDirective: TaggingDirective?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.
        public let metadataDirective: MetadataDirective?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let bucket: String
        /// The language the content is in.
        public let contentLanguage: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?

        public init(websiteRedirectLocation: String? = nil, copySourceIfModifiedSince: TimeStamp? = nil, copySourceIfMatch: String? = nil, sSECustomerAlgorithm: String? = nil, requestPayer: RequestPayer? = nil, tagging: String? = nil, copySourceSSECustomerKeyMD5: String? = nil, grantWriteACP: String? = nil, copySourceIfNoneMatch: String? = nil, sSECustomerKeyMD5: String? = nil, key: String, contentType: String? = nil, contentDisposition: String? = nil, taggingDirective: TaggingDirective? = nil, copySourceSSECustomerAlgorithm: String? = nil, expires: TimeStamp? = nil, acl: ObjectCannedACL? = nil, contentEncoding: String? = nil, metadataDirective: MetadataDirective? = nil, storageClass: StorageClass? = nil, copySourceSSECustomerKey: String? = nil, sSECustomerKey: String? = nil, metadata: [String: String]? = nil, cacheControl: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil, copySource: String, serverSideEncryption: ServerSideEncryption? = nil, bucket: String, contentLanguage: String? = nil, sSEKMSKeyId: String? = nil, grantRead: String? = nil, grantFullControl: String? = nil, grantReadACP: String? = nil) {
            self.websiteRedirectLocation = websiteRedirectLocation
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.copySourceIfMatch = copySourceIfMatch
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestPayer = requestPayer
            self.tagging = tagging
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.grantWriteACP = grantWriteACP
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.key = key
            self.contentType = contentType
            self.contentDisposition = contentDisposition
            self.taggingDirective = taggingDirective
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.expires = expires
            self.acl = acl
            self.contentEncoding = contentEncoding
            self.metadataDirective = metadataDirective
            self.storageClass = storageClass
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.sSECustomerKey = sSECustomerKey
            self.metadata = metadata
            self.cacheControl = cacheControl
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.copySource = copySource
            self.serverSideEncryption = serverSideEncryption
            self.bucket = bucket
            self.contentLanguage = contentLanguage
            self.sSEKMSKeyId = sSEKMSKeyId
            self.grantRead = grantRead
            self.grantFullControl = grantFullControl
            self.grantReadACP = grantReadACP
        }

        private enum CodingKeys: String, CodingKey {
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestPayer = "x-amz-request-payer"
            case tagging = "x-amz-tagging"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case grantWriteACP = "x-amz-grant-write-acp"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case key = "Key"
            case contentType = "Content-Type"
            case contentDisposition = "Content-Disposition"
            case taggingDirective = "x-amz-tagging-directive"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case expires = "Expires"
            case acl = "x-amz-acl"
            case contentEncoding = "Content-Encoding"
            case metadataDirective = "x-amz-metadata-directive"
            case storageClass = "x-amz-storage-class"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case metadata = "Metadata"
            case cacheControl = "Cache-Control"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
            case copySource = "x-amz-copy-source"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case bucket = "Bucket"
            case contentLanguage = "Content-Language"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case grantRead = "x-amz-grant-read"
            case grantFullControl = "x-amz-grant-full-control"
            case grantReadACP = "x-amz-grant-read-acp"
        }
    }

    public struct GetBucketMetricsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsConfiguration", required: false, type: .structure)
        ]
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration?

        public init(metricsConfiguration: MetricsConfiguration? = nil) {
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public enum FileHeaderInfo: String, CustomStringConvertible, Codable {
        case use = "USE"
        case ignore = "IGNORE"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct RoutingRules: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingRule", required: false, type: .list)
        ]
        public let routingRule: [RoutingRule]?

        public init(routingRule: [RoutingRule]? = nil) {
            self.routingRule = routingRule
        }

        private enum CodingKeys: String, CodingKey {
            case routingRule = "RoutingRule"
        }
    }

    public struct AnalyticsExportDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// A destination signifying output to an S3 bucket.
        public let s3BucketDestination: AnalyticsS3BucketDestination

        public init(s3BucketDestination: AnalyticsS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public struct CopyObjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp),
            AWSShapeMember(label: "ETag", required: false, type: .string)
        ]
        public let lastModified: TimeStamp?
        public let eTag: String?

        public init(lastModified: TimeStamp? = nil, eTag: String? = nil) {
            self.lastModified = lastModified
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case lastModified = "LastModified"
            case eTag = "ETag"
        }
    }

    public struct Grant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grantee", required: false, type: .structure),
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        public let grantee: Grantee?
        /// Specifies the permission given to the grantee.
        public let permission: Permission?

        public init(grantee: Grantee? = nil, permission: Permission? = nil) {
            self.grantee = grantee
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case grantee = "Grantee"
            case permission = "Permission"
        }
    }

    public struct UserMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetadataEntry", required: false, type: .list)
        ]
        public let metadataEntry: [MetadataEntry]?

        public init(metadataEntry: [MetadataEntry]? = nil) {
            self.metadataEntry = metadataEntry
        }

        private enum CodingKeys: String, CodingKey {
            case metadataEntry = "MetadataEntry"
        }
    }

    public struct UploadPartCopyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyPartResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "CopyPartResult", required: false, type: .structure),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string)
        ]
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        public let copyPartResult: CopyPartResult?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// The version of the source object that was copied, if you have enabled versioning on the source bucket.
        public let copySourceVersionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?

        public init(serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, copyPartResult: CopyPartResult? = nil, sSECustomerAlgorithm: String? = nil, copySourceVersionId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerKeyMD5: String? = nil) {
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.copyPartResult = copyPartResult
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceVersionId = copySourceVersionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case copyPartResult = "CopyPartResult"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copySourceVersionId = "x-amz-copy-source-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
        }
    }

    public enum ExpressionType: String, CustomStringConvertible, Codable {
        case sql = "SQL"
        public var description: String { return self.rawValue }
    }

    public enum InventoryFrequency: String, CustomStringConvertible, Codable {
        case daily = "Daily"
        case weekly = "Weekly"
        public var description: String { return self.rawValue }
    }

    public struct RestoreObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "RestoreOutputPath", location: .header(locationName: "x-amz-restore-output-path"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        /// Indicates the path in the provided S3 output location where Select results will be restored to.
        public let restoreOutputPath: String?

        public init(requestCharged: RequestCharged? = nil, restoreOutputPath: String? = nil) {
            self.requestCharged = requestCharged
            self.restoreOutputPath = restoreOutputPath
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case restoreOutputPath = "x-amz-restore-output-path"
        }
    }

    public struct TargetGrants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [TargetGrant]?

        public init(grant: [TargetGrant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public enum ServerSideEncryption: String, CustomStringConvertible, Codable {
        case aes256 = "AES256"
        case awsKms = "aws:kms"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let key: String
        public let bucket: String
        public let versionId: String?

        public init(key: String, bucket: String, versionId: String? = nil) {
            self.key = key
            self.bucket = bucket
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case versionId = "versionId"
        }
    }

    public enum ReplicationStatus: String, CustomStringConvertible, Codable {
        case complete = "COMPLETED"
        case pending = "PENDING"
        case failed = "FAILED"
        case replica = "REPLICA"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case http = "http"
        case https = "https"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutBucketLoggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BucketLoggingStatus"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketLoggingStatus", location: .body(locationName: "BucketLoggingStatus"), required: true, type: .structure),
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucketLoggingStatus: BucketLoggingStatus
        public let bucket: String
        public let contentMD5: String?

        public init(bucketLoggingStatus: BucketLoggingStatus, bucket: String, contentMD5: String? = nil) {
            self.bucketLoggingStatus = bucketLoggingStatus
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucketLoggingStatus = "BucketLoggingStatus"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct CommonPrefix: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        public let prefix: String?

        public init(prefix: String? = nil) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public struct InventoryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The prefix that an object must have to be included in the inventory results.
        public let prefix: String

        public init(prefix: String) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public struct S3KeyFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterRules", location: .body(locationName: "FilterRule"), required: false, type: .list)
        ]
        public let filterRules: [FilterRule]?

        public init(filterRules: [FilterRule]? = nil) {
            self.filterRules = filterRules
        }

        private enum CodingKeys: String, CodingKey {
            case filterRules = "FilterRule"
        }
    }

    public struct AbortMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct HeadObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer),
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string),
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string),
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string),
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string),
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string),
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp),
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum),
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean),
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string),
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum),
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string),
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer),
            AWSShapeMember(label: "Metadata", required: false, type: .map),
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string),
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string)
        ]
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// The count of parts this object has.
        public let partsCount: Int32?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        public let acceptRanges: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        public let replicationStatus: ReplicationStatus?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        public let storageClass: StorageClass?
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Version of the object.
        public let versionId: String?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        public let requestCharged: RequestCharged?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The language the content is in.
        public let contentLanguage: String?

        public init(websiteRedirectLocation: String? = nil, sSECustomerAlgorithm: String? = nil, contentLength: Int64? = nil, sSECustomerKeyMD5: String? = nil, partsCount: Int32? = nil, contentDisposition: String? = nil, contentType: String? = nil, restore: String? = nil, eTag: String? = nil, acceptRanges: String? = nil, expires: TimeStamp? = nil, replicationStatus: ReplicationStatus? = nil, deleteMarker: Bool? = nil, contentEncoding: String? = nil, storageClass: StorageClass? = nil, expiration: String? = nil, missingMeta: Int32? = nil, metadata: [String: String]? = nil, cacheControl: String? = nil, versionId: String? = nil, lastModified: TimeStamp? = nil, requestCharged: RequestCharged? = nil, sSEKMSKeyId: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, contentLanguage: String? = nil) {
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentLength = contentLength
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.partsCount = partsCount
            self.contentDisposition = contentDisposition
            self.contentType = contentType
            self.restore = restore
            self.eTag = eTag
            self.acceptRanges = acceptRanges
            self.expires = expires
            self.replicationStatus = replicationStatus
            self.deleteMarker = deleteMarker
            self.contentEncoding = contentEncoding
            self.storageClass = storageClass
            self.expiration = expiration
            self.missingMeta = missingMeta
            self.metadata = metadata
            self.cacheControl = cacheControl
            self.versionId = versionId
            self.lastModified = lastModified
            self.requestCharged = requestCharged
            self.sSEKMSKeyId = sSEKMSKeyId
            self.serverSideEncryption = serverSideEncryption
            self.contentLanguage = contentLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentLength = "Content-Length"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case partsCount = "x-amz-mp-parts-count"
            case contentDisposition = "Content-Disposition"
            case contentType = "Content-Type"
            case restore = "x-amz-restore"
            case eTag = "ETag"
            case acceptRanges = "accept-ranges"
            case expires = "Expires"
            case replicationStatus = "x-amz-replication-status"
            case deleteMarker = "x-amz-delete-marker"
            case contentEncoding = "Content-Encoding"
            case storageClass = "x-amz-storage-class"
            case expiration = "x-amz-expiration"
            case missingMeta = "x-amz-missing-meta"
            case metadata = "Metadata"
            case cacheControl = "Cache-Control"
            case versionId = "x-amz-version-id"
            case lastModified = "Last-Modified"
            case requestCharged = "x-amz-request-charged"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case contentLanguage = "Content-Language"
        }
    }

    public struct AbortIncompleteMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DaysAfterInitiation", required: false, type: .integer)
        ]
        /// Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
        public let daysAfterInitiation: Int32?

        public init(daysAfterInitiation: Int32? = nil) {
            self.daysAfterInitiation = daysAfterInitiation
        }

        private enum CodingKeys: String, CodingKey {
            case daysAfterInitiation = "DaysAfterInitiation"
        }
    }

    public struct StatsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Stats event details.
        public let details: Stats?

        public init(details: Stats? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct ServerSideEncryptionByDefault: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSEAlgorithm", required: true, type: .enum),
            AWSShapeMember(label: "KMSMasterKeyID", required: false, type: .string)
        ]
        /// Server-side encryption algorithm to use for the default encryption.
        public let sSEAlgorithm: ServerSideEncryption
        /// KMS master key ID to use for the default encryption. This parameter is allowed if SSEAlgorithm is aws:kms.
        public let kMSMasterKeyID: String?

        public init(sSEAlgorithm: ServerSideEncryption, kMSMasterKeyID: String? = nil) {
            self.sSEAlgorithm = sSEAlgorithm
            self.kMSMasterKeyID = kMSMasterKeyID
        }

        private enum CodingKeys: String, CodingKey {
            case sSEAlgorithm = "SSEAlgorithm"
            case kMSMasterKeyID = "KMSMasterKeyID"
        }
    }

    public struct NoncurrentVersionTransition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer),
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?

        public init(noncurrentDays: Int32? = nil, storageClass: TransitionStorageClass? = nil) {
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
            case storageClass = "StorageClass"
        }
    }

    public struct CreateBucketRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CreateBucketConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string),
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum),
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string),
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string),
            AWSShapeMember(label: "CreateBucketConfiguration", location: .body(locationName: "CreateBucketConfiguration"), required: false, type: .structure),
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string),
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string)
        ]
        public let bucket: String
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        public let createBucketConfiguration: CreateBucketConfiguration?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?

        public init(bucket: String, grantWrite: String? = nil, acl: BucketCannedACL? = nil, grantReadACP: String? = nil, grantWriteACP: String? = nil, createBucketConfiguration: CreateBucketConfiguration? = nil, grantRead: String? = nil, grantFullControl: String? = nil) {
            self.bucket = bucket
            self.grantWrite = grantWrite
            self.acl = acl
            self.grantReadACP = grantReadACP
            self.grantWriteACP = grantWriteACP
            self.createBucketConfiguration = createBucketConfiguration
            self.grantRead = grantRead
            self.grantFullControl = grantFullControl
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case grantWrite = "x-amz-grant-write"
            case acl = "x-amz-acl"
            case grantReadACP = "x-amz-grant-read-acp"
            case grantWriteACP = "x-amz-grant-write-acp"
            case createBucketConfiguration = "CreateBucketConfiguration"
            case grantRead = "x-amz-grant-read"
            case grantFullControl = "x-amz-grant-full-control"
        }
    }

    public enum JSONType: String, CustomStringConvertible, Codable {
        case document = "DOCUMENT"
        case lines = "LINES"
        public var description: String { return self.rawValue }
    }

    public struct Buckets: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .list)
        ]
        public let bucket: [Bucket]?

        public init(bucket: [Bucket]? = nil) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DeleteBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Bucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string),
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp)
        ]
        /// The name of the bucket.
        public let name: String?
        /// Date the bucket was created.
        public let creationDate: TimeStamp?

        public init(name: String? = nil, creationDate: TimeStamp? = nil) {
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDate = "CreationDate"
        }
    }

    public struct TargetGrant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grantee", required: false, type: .structure),
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        public let grantee: Grantee?
        /// Logging permissions assigned to the Grantee for the bucket.
        public let permission: BucketLogsPermission?

        public init(grantee: Grantee? = nil, permission: BucketLogsPermission? = nil) {
            self.grantee = grantee
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case grantee = "Grantee"
            case permission = "Permission"
        }
    }

    public struct GetBucketAnalyticsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure)
        ]
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration?

        public init(analyticsConfiguration: AnalyticsConfiguration? = nil) {
            self.analyticsConfiguration = analyticsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsConfiguration = "AnalyticsConfiguration"
        }
    }

    public struct AnalyticsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string),
            AWSShapeMember(label: "Filter", required: false, type: .structure),
            AWSShapeMember(label: "StorageClassAnalysis", required: true, type: .structure)
        ]
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public let filter: AnalyticsFilter?
        /// If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes.
        public let storageClassAnalysis: StorageClassAnalysis

        public init(id: String, filter: AnalyticsFilter? = nil, storageClassAnalysis: StorageClassAnalysis) {
            self.id = id
            self.filter = filter
            self.storageClassAnalysis = storageClassAnalysis
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
            case storageClassAnalysis = "StorageClassAnalysis"
        }
    }

    public enum StorageClassAnalysisSchemaVersion: String, CustomStringConvertible, Codable {
        case v1 = "V_1"
        public var description: String { return self.rawValue }
    }

    public struct JSONOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string)
        ]
        /// The value used to separate individual records in the output.
        public let recordDelimiter: String?

        public init(recordDelimiter: String? = nil) {
            self.recordDelimiter = recordDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordDelimiter = "RecordDelimiter"
        }
    }

    public struct GetBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct HeadBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum BucketLogsPermission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case read = "READ"
        case write = "WRITE"
        public var description: String { return self.rawValue }
    }

    public struct NotificationConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicConfiguration", required: false, type: .structure),
            AWSShapeMember(label: "CloudFunctionConfiguration", required: false, type: .structure),
            AWSShapeMember(label: "QueueConfiguration", required: false, type: .structure)
        ]
        public let topicConfiguration: TopicConfigurationDeprecated?
        public let cloudFunctionConfiguration: CloudFunctionConfiguration?
        public let queueConfiguration: QueueConfigurationDeprecated?

        public init(topicConfiguration: TopicConfigurationDeprecated? = nil, cloudFunctionConfiguration: CloudFunctionConfiguration? = nil, queueConfiguration: QueueConfigurationDeprecated? = nil) {
            self.topicConfiguration = topicConfiguration
            self.cloudFunctionConfiguration = cloudFunctionConfiguration
            self.queueConfiguration = queueConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case topicConfiguration = "TopicConfiguration"
            case cloudFunctionConfiguration = "CloudFunctionConfiguration"
            case queueConfiguration = "QueueConfiguration"
        }
    }

    public struct SourceSelectionCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SseKmsEncryptedObjects", required: false, type: .structure)
        ]
        /// Container for filter information of selection of KMS Encrypted S3 objects.
        public let sseKmsEncryptedObjects: SseKmsEncryptedObjects?

        public init(sseKmsEncryptedObjects: SseKmsEncryptedObjects? = nil) {
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }

        private enum CodingKeys: String, CodingKey {
            case sseKmsEncryptedObjects = "SseKmsEncryptedObjects"
        }
    }

    public struct PutObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum),
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum),
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string),
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string),
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string),
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string),
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string)
        ]
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Version of the object.
        public let versionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?

        public init(serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil, versionId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerKeyMD5: String? = nil, expiration: String? = nil) {
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.versionId = versionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case eTag = "ETag"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case versionId = "x-amz-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case expiration = "x-amz-expiration"
        }
    }

    public struct PutBucketAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string),
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string),
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum),
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string),
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string),
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure),
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string),
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string),
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string)
        ]
        public let bucket: String
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        public let accessControlPolicy: AccessControlPolicy?
        public let contentMD5: String?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?

        public init(bucket: String, grantWrite: String? = nil, acl: BucketCannedACL? = nil, grantReadACP: String? = nil, grantWriteACP: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, contentMD5: String? = nil, grantRead: String? = nil, grantFullControl: String? = nil) {
            self.bucket = bucket
            self.grantWrite = grantWrite
            self.acl = acl
            self.grantReadACP = grantReadACP
            self.grantWriteACP = grantWriteACP
            self.accessControlPolicy = accessControlPolicy
            self.contentMD5 = contentMD5
            self.grantRead = grantRead
            self.grantFullControl = grantFullControl
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case grantWrite = "x-amz-grant-write"
            case acl = "x-amz-acl"
            case grantReadACP = "x-amz-grant-read-acp"
            case grantWriteACP = "x-amz-grant-write-acp"
            case accessControlPolicy = "AccessControlPolicy"
            case contentMD5 = "Content-MD5"
            case grantRead = "x-amz-grant-read"
            case grantFullControl = "x-amz-grant-full-control"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpErrorCodeReturnedEquals", required: false, type: .string),
            AWSShapeMember(label: "KeyPrefixEquals", required: false, type: .string)
        ]
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public let httpErrorCodeReturnedEquals: String?
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        public let keyPrefixEquals: String?

        public init(httpErrorCodeReturnedEquals: String? = nil, keyPrefixEquals: String? = nil) {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }

        private enum CodingKeys: String, CodingKey {
            case httpErrorCodeReturnedEquals = "HttpErrorCodeReturnedEquals"
            case keyPrefixEquals = "KeyPrefixEquals"
        }
    }

}
