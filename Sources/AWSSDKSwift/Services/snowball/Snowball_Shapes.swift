// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Snowball {

    public struct S3Resource: Serializable, Initializable {
        /// For export jobs, you can provide an optional KeyRange within a specific Amazon S3 bucket. The length of the range is defined at job creation, and has either an inclusive BeginMarker, an inclusive EndMarker, or both. Ranges are UTF-8 binary sorted.
        var keyRange: KeyRange? = nil
        /// The Amazon Resource Name (ARN) of an Amazon S3 bucket.
        var bucketArn: String? = nil

        public init() {}

        public init(keyRange: KeyRange? = nil, bucketArn: String? = nil) {
            self.keyRange = keyRange
            self.bucketArn = bucketArn
        }

    }

    public struct UpdateJobRequest: Serializable, Initializable {
        /// The updated shipping option value of this job's ShippingDetails object.
        var shippingOption: String? = nil
        /// The updated SnowballCapacityPreference of this job's JobMetadata object. The 50 TB Snowballs are only available in the US regions.
        var snowballCapacityPreference: String? = nil
        /// The ID of the updated Address object.
        var addressId: String? = nil
        /// The new role Amazon Resource Name (ARN) that you want to associate with this job. To create a role ARN, use the CreateRole AWS Identity and Access Management (IAM) API action.
        var roleARN: String? = nil
        /// The new or updated Notification object.
        var notification: Notification? = nil
        /// The updated S3Resource object (for a single Amazon S3 bucket or key range), or the updated JobResource object (for multiple buckets or key ranges). 
        var resources: JobResource? = nil
        /// The job ID of the job that you want to update, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String = ""
        /// The updated description of this job's JobMetadata object.
        var description: String? = nil

        public init() {}

        public init(shippingOption: String? = nil, snowballCapacityPreference: String? = nil, addressId: String? = nil, roleARN: String? = nil, notification: Notification? = nil, resources: JobResource? = nil, jobId: String, description: String? = nil) {
            self.shippingOption = shippingOption
            self.snowballCapacityPreference = snowballCapacityPreference
            self.addressId = addressId
            self.roleARN = roleARN
            self.notification = notification
            self.resources = resources
            self.jobId = jobId
            self.description = description
        }

    }

    public struct JobResource: Serializable, Initializable {
        /// An array of S3Resource objects.
        var s3Resources: [S3Resource]? = nil
        /// The Python-language Lambda functions for this job.
        var lambdaResources: [LambdaResource]? = nil

        public init() {}

        public init(s3Resources: [S3Resource]? = nil, lambdaResources: [LambdaResource]? = nil) {
            self.s3Resources = s3Resources
            self.lambdaResources = lambdaResources
        }

    }

    public struct CancelClusterRequest: Serializable, Initializable {
        /// The 39-character ID for the cluster that you want to cancel, for example CID123e4567-e89b-12d3-a456-426655440000.
        var clusterId: String = ""

        public init() {}

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

    }

    public struct ShippingDetails: Serializable, Initializable {
        /// The shipping speed for a particular job. This speed doesn't dictate how soon you'll get the Snowball from the job's creation date. This speed represents how quickly it moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowballs are delivered in one to seven days.   In the United States of America (US), you have access to one-day shipping and two-day shipping.  
        var shippingOption: String? = nil
        /// The Status and TrackingNumber values for a Snowball being delivered to the address that you specified for a particular job.
        var inboundShipment: Shipment? = nil
        /// The Status and TrackingNumber values for a Snowball being returned to AWS for a particular job.
        var outboundShipment: Shipment? = nil

        public init() {}

        public init(shippingOption: String? = nil, inboundShipment: Shipment? = nil, outboundShipment: Shipment? = nil) {
            self.shippingOption = shippingOption
            self.inboundShipment = inboundShipment
            self.outboundShipment = outboundShipment
        }

    }

    public struct ListClusterJobsRequest: Serializable, Initializable {
        /// HTTP requests are stateless. To identify what object comes "next" in the list of JobListEntry objects, you have the option of specifying NextToken as the starting point for your returned list.
        var nextToken: String? = nil
        /// The 39-character ID for the cluster that you want to list, for example CID123e4567-e89b-12d3-a456-426655440000.
        var clusterId: String = ""
        /// The number of JobListEntry objects to return.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, clusterId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.clusterId = clusterId
            self.maxResults = maxResults
        }

    }

    public struct UpdateJobResult: Serializable, Initializable {

        public init() {}

    }

    public struct EventTriggerDefinition: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) for any local Amazon S3 resource that is an AWS Lambda function's event trigger associated with this job.
        var eventResourceARN: String? = nil

        public init() {}

        public init(eventResourceARN: String? = nil) {
            self.eventResourceARN = eventResourceARN
        }

    }

    public struct GetJobUnlockCodeRequest: Serializable, Initializable {
        /// The ID for the job that you want to get the UnlockCode value for, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String = ""

        public init() {}

        public init(jobId: String) {
            self.jobId = jobId
        }

    }

    public struct KeyRange: Serializable, Initializable {
        /// The key that starts an optional key range for an export job. Ranges are inclusive and UTF-8 binary sorted.
        var beginMarker: String? = nil
        /// The key that ends an optional key range for an export job. Ranges are inclusive and UTF-8 binary sorted.
        var endMarker: String? = nil

        public init() {}

        public init(beginMarker: String? = nil, endMarker: String? = nil) {
            self.beginMarker = beginMarker
            self.endMarker = endMarker
        }

    }

    public struct DescribeClusterResult: Serializable, Initializable {
        /// Information about a specific cluster, including shipping information, cluster status, and other important metadata.
        var clusterMetadata: ClusterMetadata? = nil

        public init() {}

        public init(clusterMetadata: ClusterMetadata? = nil) {
            self.clusterMetadata = clusterMetadata
        }

    }

    public struct Address: Serializable, Initializable {
        /// The landmark identifying the address that the appliance will be shipped to.
        var landmark: String? = nil
        /// The phone number associated with an address that a Snowball is to be delivered to.
        var phoneNumber: String? = nil
        /// The country in an address that a Snowball is to be delivered to.
        var country: String? = nil
        /// The first line in a street address that a Snowball is to be delivered to.
        var street1: String? = nil
        /// The postal code in an address that a Snowball is to be delivered to.
        var postalCode: String? = nil
        /// The second line in a street address that a Snowball is to be delivered to.
        var street2: String? = nil
        /// The state or province in an address that a Snowball is to be delivered to.
        var stateOrProvince: String? = nil
        /// The prefecture or district that the appliance will be shipped to.
        var prefectureOrDistrict: String? = nil
        /// The unique ID for an address.
        var addressId: String? = nil
        /// The name of a person to receive a Snowball at an address.
        var name: String? = nil
        /// The city in an address that a Snowball is to be delivered to.
        var city: String? = nil
        /// The third line in a street address that a Snowball is to be delivered to.
        var street3: String? = nil
        /// The name of the company to receive a Snowball at an address.
        var company: String? = nil

        public init() {}

        public init(landmark: String? = nil, phoneNumber: String? = nil, country: String? = nil, street1: String? = nil, postalCode: String? = nil, street2: String? = nil, stateOrProvince: String? = nil, prefectureOrDistrict: String? = nil, addressId: String? = nil, name: String? = nil, city: String? = nil, street3: String? = nil, company: String? = nil) {
            self.landmark = landmark
            self.phoneNumber = phoneNumber
            self.country = country
            self.street1 = street1
            self.postalCode = postalCode
            self.street2 = street2
            self.stateOrProvince = stateOrProvince
            self.prefectureOrDistrict = prefectureOrDistrict
            self.addressId = addressId
            self.name = name
            self.city = city
            self.street3 = street3
            self.company = company
        }

    }

    public struct ListClustersResult: Serializable, Initializable {
        /// Each ClusterListEntry object contains a cluster's state, a cluster's ID, and other important status information.
        var clusterListEntries: [ClusterListEntry]? = nil
        /// HTTP requests are stateless. If you use the automatically generated NextToken value in your next ClusterListEntry call, your list of returned clusters will start from this point in the array.
        var nextToken: String? = nil

        public init() {}

        public init(clusterListEntries: [ClusterListEntry]? = nil, nextToken: String? = nil) {
            self.clusterListEntries = clusterListEntries
            self.nextToken = nextToken
        }

    }

    public struct GetSnowballUsageRequest: Serializable, Initializable {

        public init() {}

    }

    public struct CancelJobResult: Serializable, Initializable {

        public init() {}

    }

    public struct CreateClusterResult: Serializable, Initializable {
        /// The automatically generated ID for a cluster.
        var clusterId: String? = nil

        public init() {}

        public init(clusterId: String? = nil) {
            self.clusterId = clusterId
        }

    }

    public struct CreateClusterRequest: Serializable, Initializable {
        /// The shipping speed for each node in this cluster. This speed doesn't dictate how soon you'll get each Snowball Edge appliance, rather it represents how quickly each appliance moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, appliances shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowball Edges shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowball Edges are delivered in one to seven days.   In the US, you have access to one-day shipping and two-day shipping.  
        var shippingOption: String = ""
        /// The ID for the address that you want the cluster shipped to.&gt;
        var addressId: String = ""
        /// The RoleARN that you want to associate with this cluster. RoleArn values are created by using the CreateRole API action in AWS Identity and Access Management (IAM).
        var roleARN: String = ""
        /// The type of job for this cluster. Currently, the only job type supported for clusters is LOCAL_USE.
        var jobType: String = ""
        /// The Amazon Simple Notification Service (Amazon SNS) notification settings for this cluster.
        var notification: Notification? = nil
        /// The KmsKeyARN value that you want to associate with this cluster. KmsKeyARN values are created by using the CreateKey API action in AWS Key Management Service (AWS KMS). 
        var kmsKeyARN: String? = nil
        /// The type of AWS Snowball appliance to use for this cluster. Currently, the only supported appliance type for cluster jobs is EDGE.
        var snowballType: String? = nil
        /// The resources associated with the cluster job. These resources include Amazon S3 buckets and optional AWS Lambda functions written in the Python language. 
        var resources: JobResource = JobResource()
        /// An optional description of this specific cluster, for example Environmental Data Cluster-01.
        var description: String? = nil

        public init() {}

        public init(shippingOption: String, addressId: String, roleARN: String, jobType: String, notification: Notification? = nil, kmsKeyARN: String? = nil, snowballType: String? = nil, resources: JobResource, description: String? = nil) {
            self.shippingOption = shippingOption
            self.addressId = addressId
            self.roleARN = roleARN
            self.jobType = jobType
            self.notification = notification
            self.kmsKeyARN = kmsKeyARN
            self.snowballType = snowballType
            self.resources = resources
            self.description = description
        }

    }

    public struct DescribeClusterRequest: Serializable, Initializable {
        /// The automatically generated ID for a cluster.
        var clusterId: String = ""

        public init() {}

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

    }

    public struct ListClustersRequest: Serializable, Initializable {
        /// HTTP requests are stateless. To identify what object comes "next" in the list of ClusterListEntry objects, you have the option of specifying NextToken as the starting point for your returned list.
        var nextToken: String? = nil
        /// The number of ClusterListEntry objects to return.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct CreateAddressRequest: Serializable, Initializable {
        /// The address that you want the Snowball shipped to.
        var address: Address = Address()

        public init() {}

        public init(address: Address) {
            self.address = address
        }

    }

    public struct DescribeAddressesResult: Serializable, Initializable {
        /// HTTP requests are stateless. If you use the automatically generated NextToken value in your next DescribeAddresses call, your list of returned addresses will start from this point in the array.
        var nextToken: String? = nil
        /// The Snowball shipping addresses that were created for this account.
        var addresses: [Address]? = nil

        public init() {}

        public init(nextToken: String? = nil, addresses: [Address]? = nil) {
            self.nextToken = nextToken
            self.addresses = addresses
        }

    }

    public struct DataTransfer: Serializable, Initializable {
        /// The number of objects transferred between a Snowball and Amazon S3.
        var objectsTransferred: Int64? = nil
        /// The number of bytes transferred between a Snowball and Amazon S3.
        var bytesTransferred: Int64? = nil
        /// The total bytes of data for a transfer between a Snowball and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.
        var totalBytes: Int64? = nil
        /// The total number of objects for a transfer between a Snowball and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.
        var totalObjects: Int64? = nil

        public init() {}

        public init(objectsTransferred: Int64? = nil, bytesTransferred: Int64? = nil, totalBytes: Int64? = nil, totalObjects: Int64? = nil) {
            self.objectsTransferred = objectsTransferred
            self.bytesTransferred = bytesTransferred
            self.totalBytes = totalBytes
            self.totalObjects = totalObjects
        }

    }

    public struct GetJobManifestRequest: Serializable, Initializable {
        /// The ID for a job that you want to get the manifest file for, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String = ""

        public init() {}

        public init(jobId: String) {
            self.jobId = jobId
        }

    }

    public struct DescribeAddressRequest: Serializable, Initializable {
        /// The automatically generated ID for a specific address.
        var addressId: String = ""

        public init() {}

        public init(addressId: String) {
            self.addressId = addressId
        }

    }

    public struct DescribeJobRequest: Serializable, Initializable {
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String = ""

        public init() {}

        public init(jobId: String) {
            self.jobId = jobId
        }

    }

    public struct GetJobUnlockCodeResult: Serializable, Initializable {
        /// The UnlockCode value for the specified job. The UnlockCode value can be accessed for up to 90 days after the job has been created.
        var unlockCode: String? = nil

        public init() {}

        public init(unlockCode: String? = nil) {
            self.unlockCode = unlockCode
        }

    }

    public struct UpdateClusterResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListJobsResult: Serializable, Initializable {
        /// HTTP requests are stateless. If you use this automatically generated NextToken value in your next ListJobs call, your returned JobListEntry objects will start from this point in the array.
        var nextToken: String? = nil
        /// Each JobListEntry object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. 
        var jobListEntries: [JobListEntry]? = nil

        public init() {}

        public init(nextToken: String? = nil, jobListEntries: [JobListEntry]? = nil) {
            self.nextToken = nextToken
            self.jobListEntries = jobListEntries
        }

    }

    public struct CreateJobResult: Serializable, Initializable {
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String? = nil

        public init() {}

        public init(jobId: String? = nil) {
            self.jobId = jobId
        }

    }

    public struct DescribeAddressResult: Serializable, Initializable {
        /// The address that you want the Snowball or Snowballs associated with a specific job to be shipped to.
        var address: Address? = nil

        public init() {}

        public init(address: Address? = nil) {
            self.address = address
        }

    }

    public struct CancelClusterResult: Serializable, Initializable {

        public init() {}

    }

    public struct LambdaResource: Serializable, Initializable {
        /// An Amazon Resource Name (ARN) that represents an AWS Lambda function to be triggered by PUT object actions on the associated local Amazon S3 resource.
        var lambdaArn: String? = nil
        /// The array of ARNs for S3Resource objects to trigger the LambdaResource objects associated with this job.
        var eventTriggers: [EventTriggerDefinition]? = nil

        public init() {}

        public init(lambdaArn: String? = nil, eventTriggers: [EventTriggerDefinition]? = nil) {
            self.lambdaArn = lambdaArn
            self.eventTriggers = eventTriggers
        }

    }

    public struct ClusterMetadata: Serializable, Initializable {
        /// The current status of the cluster.
        var clusterState: String? = nil
        /// The shipping speed for each node in this cluster. This speed doesn't dictate how soon you'll get each Snowball Edge appliance, rather it represents how quickly each appliance moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, appliances shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowball Edges shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowball Edges are delivered in one to seven days.   In the US, you have access to one-day shipping and two-day shipping.  
        var shippingOption: String? = nil
        /// The automatically generated ID for a specific address.
        var addressId: String? = nil
        /// The KmsKeyARN Amazon Resource Name (ARN) associated with this cluster. This ARN was created using the CreateKey API action in AWS Key Management Service (AWS KMS).
        var kmsKeyARN: String? = nil
        /// The role ARN associated with this cluster. This ARN was created using the CreateRole API action in AWS Identity and Access Management (IAM).
        var roleARN: String? = nil
        /// The type of job for this cluster. Currently, the only job type supported for clusters is LOCAL_USE.
        var jobType: String? = nil
        /// The creation date for this cluster.
        var creationDate: Date? = nil
        /// The type of AWS Snowball appliance to use for this cluster. Currently, the only supported appliance type for cluster jobs is EDGE.
        var snowballType: String? = nil
        /// The Amazon Simple Notification Service (Amazon SNS) notification settings for this cluster.
        var notification: Notification? = nil
        /// The automatically generated ID for a cluster.
        var clusterId: String? = nil
        /// The arrays of JobResource objects that can include updated S3Resource objects or LambdaResource objects.
        var resources: JobResource? = nil
        /// The optional description of the cluster.
        var description: String? = nil

        public init() {}

        public init(clusterState: String? = nil, shippingOption: String? = nil, addressId: String? = nil, kmsKeyARN: String? = nil, roleARN: String? = nil, jobType: String? = nil, creationDate: Date? = nil, snowballType: String? = nil, notification: Notification? = nil, clusterId: String? = nil, resources: JobResource? = nil, description: String? = nil) {
            self.clusterState = clusterState
            self.shippingOption = shippingOption
            self.addressId = addressId
            self.kmsKeyARN = kmsKeyARN
            self.roleARN = roleARN
            self.jobType = jobType
            self.creationDate = creationDate
            self.snowballType = snowballType
            self.notification = notification
            self.clusterId = clusterId
            self.resources = resources
            self.description = description
        }

    }

    public struct Notification: Serializable, Initializable {
        /// Any change in job state will trigger a notification for this job.
        var notifyAll: Bool? = nil
        /// The list of job states that will trigger a notification for this job.
        var jobStatesToNotify: [String]? = nil
        /// The new SNS TopicArn that you want to associate with this job. You can create Amazon Resource Names (ARNs) for topics by using the CreateTopic Amazon SNS API action. You can subscribe email addresses to an Amazon SNS topic through the AWS Management Console, or by using the Subscribe AWS Simple Notification Service (SNS) API action.
        var snsTopicARN: String? = nil

        public init() {}

        public init(notifyAll: Bool? = nil, jobStatesToNotify: [String]? = nil, snsTopicARN: String? = nil) {
            self.notifyAll = notifyAll
            self.jobStatesToNotify = jobStatesToNotify
            self.snsTopicARN = snsTopicARN
        }

    }

    public struct ListJobsRequest: Serializable, Initializable {
        /// HTTP requests are stateless. To identify what object comes "next" in the list of JobListEntry objects, you have the option of specifying NextToken as the starting point for your returned list.
        var nextToken: String? = nil
        /// The number of JobListEntry objects to return.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct Shipment: Serializable, Initializable {
        /// Status information for a shipment. Valid statuses include NEW, IN_TRANSIT, and DELIVERED.
        var status: String? = nil
        /// The tracking number for this job. Using this tracking number with your region's carrier's website, you can track a Snowball as the carrier transports it. For India, the carrier is Amazon Logistics. For all other regions, UPS is the carrier.
        var trackingNumber: String? = nil

        public init() {}

        public init(status: String? = nil, trackingNumber: String? = nil) {
            self.status = status
            self.trackingNumber = trackingNumber
        }

    }

    public struct DescribeAddressesRequest: Serializable, Initializable {
        /// HTTP requests are stateless. To identify what object comes "next" in the list of ADDRESS objects, you have the option of specifying a value for NextToken as the starting point for your list of returned addresses.
        var nextToken: String? = nil
        /// The number of ADDRESS objects to return.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct UpdateClusterRequest: Serializable, Initializable {
        /// The updated shipping option value of this cluster's ShippingDetails object.
        var shippingOption: String? = nil
        /// The ID of the updated Address object.
        var addressId: String? = nil
        /// The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the CreateRole API action in AWS Identity and Access Management (IAM).
        var roleARN: String? = nil
        /// The new or updated Notification object.
        var notification: Notification? = nil
        /// The updated arrays of JobResource objects that can include updated S3Resource objects or LambdaResource objects.
        var resources: JobResource? = nil
        /// The cluster ID of the cluster that you want to update, for example CID123e4567-e89b-12d3-a456-426655440000.
        var clusterId: String = ""
        /// The updated description of this cluster.
        var description: String? = nil

        public init() {}

        public init(shippingOption: String? = nil, addressId: String? = nil, roleARN: String? = nil, notification: Notification? = nil, resources: JobResource? = nil, clusterId: String, description: String? = nil) {
            self.shippingOption = shippingOption
            self.addressId = addressId
            self.roleARN = roleARN
            self.notification = notification
            self.resources = resources
            self.clusterId = clusterId
            self.description = description
        }

    }

    public struct DescribeJobResult: Serializable, Initializable {
        /// Information about a specific job, including shipping information, job status, and other important metadata.
        var jobMetadata: JobMetadata? = nil
        /// Information about a specific job part (in the case of an export job), including shipping information, job status, and other important metadata.
        var subJobMetadata: [JobMetadata]? = nil

        public init() {}

        public init(jobMetadata: JobMetadata? = nil, subJobMetadata: [JobMetadata]? = nil) {
            self.jobMetadata = jobMetadata
            self.subJobMetadata = subJobMetadata
        }

    }

    public struct JobListEntry: Serializable, Initializable {
        /// A value that indicates that this job is a master job. A master job represents a successful request to create an export job. Master jobs aren't associated with any Snowballs. Instead, each master job will have at least one job part, and each job part is associated with a Snowball. It might take some time before the job parts associated with a particular master job are listed, because they are created after the master job is created.
        var isMaster: Bool? = nil
        /// The type of job.
        var jobType: String? = nil
        /// The current state of this job.
        var jobState: String? = nil
        /// The creation date for this job.
        var creationDate: Date? = nil
        /// The type of appliance used with this job.
        var snowballType: String? = nil
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String? = nil
        /// The optional description of this specific job, for example Important Photos 2016-08-11.
        var description: String? = nil

        public init() {}

        public init(isMaster: Bool? = nil, jobType: String? = nil, jobState: String? = nil, creationDate: Date? = nil, snowballType: String? = nil, jobId: String? = nil, description: String? = nil) {
            self.isMaster = isMaster
            self.jobType = jobType
            self.jobState = jobState
            self.creationDate = creationDate
            self.snowballType = snowballType
            self.jobId = jobId
            self.description = description
        }

    }

    public struct ListClusterJobsResult: Serializable, Initializable {
        /// HTTP requests are stateless. If you use the automatically generated NextToken value in your next ListClusterJobsResult call, your list of returned jobs will start from this point in the array.
        var nextToken: String? = nil
        /// Each JobListEntry object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. 
        var jobListEntries: [JobListEntry]? = nil

        public init() {}

        public init(nextToken: String? = nil, jobListEntries: [JobListEntry]? = nil) {
            self.nextToken = nextToken
            self.jobListEntries = jobListEntries
        }

    }

    public struct CreateAddressResult: Serializable, Initializable {
        /// The automatically generated ID for a specific address. You'll use this ID when you create a job to specify which address you want the Snowball for that job shipped to.
        var addressId: String? = nil

        public init() {}

        public init(addressId: String? = nil) {
            self.addressId = addressId
        }

    }

    public struct CancelJobRequest: Serializable, Initializable {
        /// The 39-character job ID for the job that you want to cancel, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String = ""

        public init() {}

        public init(jobId: String) {
            self.jobId = jobId
        }

    }

    public struct ClusterListEntry: Serializable, Initializable {
        /// The current state of this cluster. For information about the state of a specific node, see JobListEntry$JobState.
        var clusterState: String? = nil
        /// The creation date for this cluster.
        var creationDate: Date? = nil
        /// The 39-character ID for the cluster that you want to list, for example CID123e4567-e89b-12d3-a456-426655440000.
        var clusterId: String? = nil
        /// Defines an optional description of the cluster, for example Environmental Data Cluster-01.
        var description: String? = nil

        public init() {}

        public init(clusterState: String? = nil, creationDate: Date? = nil, clusterId: String? = nil, description: String? = nil) {
            self.clusterState = clusterState
            self.creationDate = creationDate
            self.clusterId = clusterId
            self.description = description
        }

    }

    public struct JobMetadata: Serializable, Initializable {
        /// A value that defines the real-time status of a Snowball's data transfer while the appliance is at AWS. This data is only available while a job has a JobState value of InProgress, for both import and export jobs.
        var dataTransferProgress: DataTransfer? = nil
        /// The Snowball capacity preference for this job, specified at job creation. In US regions, you can choose between 50 TB and 80 TB Snowballs. All other regions use 80 TB capacity Snowballs.
        var snowballCapacityPreference: String? = nil
        /// The Amazon Resource Name (ARN) for the AWS Key Management Service (AWS KMS) key associated with this job. This ARN was created using the CreateKey API action in AWS KMS.
        var kmsKeyARN: String? = nil
        /// The role ARN associated with this job. This ARN was created using the CreateRole API action in AWS Identity and Access Management (IAM).
        var roleARN: String? = nil
        /// The current status of the jobs.
        var jobState: String? = nil
        /// The creation date for this job.
        var creationDate: Date? = nil
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        var jobId: String? = nil
        /// The description of the job, provided at job creation.
        var description: String? = nil
        /// A job's shipping information, including inbound and outbound tracking numbers and shipping speed options.
        var shippingDetails: ShippingDetails? = nil
        /// The ID for the address that you want the Snowball shipped to.
        var addressId: String? = nil
        /// The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The Notification object is returned as a part of the response syntax of the DescribeJob action in the JobMetadata data type.
        var notification: Notification? = nil
        /// The type of job.
        var jobType: String? = nil
        /// The type of appliance used with this job.
        var snowballType: String? = nil
        /// Links to Amazon S3 presigned URLs for the job report and logs. For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snowball for your job part is being delivered to you.
        var jobLogInfo: JobLogs? = nil
        /// The 39-character ID for the cluster, for example CID123e4567-e89b-12d3-a456-426655440000.
        var clusterId: String? = nil
        /// An array of S3Resource objects. Each S3Resource object represents an Amazon S3 bucket that your transferred data will be exported from or imported into.
        var resources: JobResource? = nil

        public init() {}

        public init(dataTransferProgress: DataTransfer? = nil, snowballCapacityPreference: String? = nil, kmsKeyARN: String? = nil, roleARN: String? = nil, jobState: String? = nil, creationDate: Date? = nil, jobId: String? = nil, description: String? = nil, shippingDetails: ShippingDetails? = nil, addressId: String? = nil, notification: Notification? = nil, jobType: String? = nil, snowballType: String? = nil, jobLogInfo: JobLogs? = nil, clusterId: String? = nil, resources: JobResource? = nil) {
            self.dataTransferProgress = dataTransferProgress
            self.snowballCapacityPreference = snowballCapacityPreference
            self.kmsKeyARN = kmsKeyARN
            self.roleARN = roleARN
            self.jobState = jobState
            self.creationDate = creationDate
            self.jobId = jobId
            self.description = description
            self.shippingDetails = shippingDetails
            self.addressId = addressId
            self.notification = notification
            self.jobType = jobType
            self.snowballType = snowballType
            self.jobLogInfo = jobLogInfo
            self.clusterId = clusterId
            self.resources = resources
        }

    }

    public struct JobLogs: Serializable, Initializable {
        /// A link to an Amazon S3 presigned URL where the job failure log is located.
        var jobFailureLogURI: String? = nil
        /// A link to an Amazon S3 presigned URL where the job success log is located.
        var jobSuccessLogURI: String? = nil
        /// A link to an Amazon S3 presigned URL where the job completion report is located.
        var jobCompletionReportURI: String? = nil

        public init() {}

        public init(jobFailureLogURI: String? = nil, jobSuccessLogURI: String? = nil, jobCompletionReportURI: String? = nil) {
            self.jobFailureLogURI = jobFailureLogURI
            self.jobSuccessLogURI = jobSuccessLogURI
            self.jobCompletionReportURI = jobCompletionReportURI
        }

    }

    public struct GetSnowballUsageResult: Serializable, Initializable {
        /// The service limit for number of Snowballs this account can have at once. The default service limit is 1 (one).
        var snowballLimit: Int32? = nil
        /// The number of Snowballs that this account is currently using.
        var snowballsInUse: Int32? = nil

        public init() {}

        public init(snowballLimit: Int32? = nil, snowballsInUse: Int32? = nil) {
            self.snowballLimit = snowballLimit
            self.snowballsInUse = snowballsInUse
        }

    }

    public struct CreateJobRequest: Serializable, Initializable {
        /// The shipping speed for this job. This speed doesn't dictate how soon you'll get the Snowball, rather it represents how quickly the Snowball moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowballs are delivered in one to seven days.   In the US, you have access to one-day shipping and two-day shipping.  
        var shippingOption: String? = nil
        /// If your job is being created in one of the US regions, you have the option of specifying what size Snowball you'd like for this job. In all other regions, Snowballs come with 80 TB in storage capacity.
        var snowballCapacityPreference: String? = nil
        /// The ID for the address that you want the Snowball shipped to.
        var addressId: String? = nil
        /// The RoleARN that you want to associate with this job. RoleArns are created using the CreateRole AWS Identity and Access Management (IAM) API action.
        var roleARN: String? = nil
        /// Defines the type of job that you're creating. 
        var jobType: String? = nil
        /// Defines the Amazon Simple Notification Service (Amazon SNS) notification settings for this job.
        var notification: Notification? = nil
        /// The KmsKeyARN that you want to associate with this job. KmsKeyARNs are created using the CreateKey AWS Key Management Service (KMS) API action.
        var kmsKeyARN: String? = nil
        /// The type of AWS Snowball appliance to use for this job. Currently, the only supported appliance type for cluster jobs is EDGE.
        var snowballType: String? = nil
        /// Defines the Amazon S3 buckets associated with this job. With IMPORT jobs, you specify the bucket or buckets that your transferred data will be imported into. With EXPORT jobs, you specify the bucket or buckets that your transferred data will be exported from. Optionally, you can also specify a KeyRange value. If you choose to export a range, you define the length of the range by providing either an inclusive BeginMarker value, an inclusive EndMarker value, or both. Ranges are UTF-8 binary sorted.
        var resources: JobResource? = nil
        /// The ID of a cluster. If you're creating a job for a node in a cluster, you need to provide only this clusterId value. The other job attributes are inherited from the cluster.
        var clusterId: String? = nil
        /// Defines an optional description of this specific job, for example Important Photos 2016-08-11.
        var description: String? = nil

        public init() {}

        public init(shippingOption: String? = nil, snowballCapacityPreference: String? = nil, addressId: String? = nil, roleARN: String? = nil, jobType: String? = nil, notification: Notification? = nil, kmsKeyARN: String? = nil, snowballType: String? = nil, resources: JobResource? = nil, clusterId: String? = nil, description: String? = nil) {
            self.shippingOption = shippingOption
            self.snowballCapacityPreference = snowballCapacityPreference
            self.addressId = addressId
            self.roleARN = roleARN
            self.jobType = jobType
            self.notification = notification
            self.kmsKeyARN = kmsKeyARN
            self.snowballType = snowballType
            self.resources = resources
            self.clusterId = clusterId
            self.description = description
        }

    }

    public struct GetJobManifestResult: Serializable, Initializable {
        /// The Amazon S3 presigned URL for the manifest file associated with the specified JobId value.
        var manifestURI: String? = nil

        public init() {}

        public init(manifestURI: String? = nil) {
            self.manifestURI = manifestURI
        }

    }

}