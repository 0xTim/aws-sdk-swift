// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SMS {

    public struct UpdateReplicationJobResponse: AWSShape {

    }

    public enum OutputFormat: String, CustomStringConvertible, Codable {
        case json = "JSON"
        case yaml = "YAML"
        public var description: String { return self.rawValue }
    }

    public struct GetAppReplicationConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serverGroupReplicationConfigurations", required: false, type: .list)
        ]
        /// Replication configurations associated with server groups in this application.
        public let serverGroupReplicationConfigurations: [ServerGroupReplicationConfiguration]?

        public init(serverGroupReplicationConfigurations: [ServerGroupReplicationConfiguration]? = nil) {
            self.serverGroupReplicationConfigurations = serverGroupReplicationConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case serverGroupReplicationConfigurations = "serverGroupReplicationConfigurations"
        }
    }

    public struct ServerReplicationParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfRecentAmisToKeep", required: false, type: .integer), 
            AWSShapeMember(label: "frequency", required: false, type: .integer), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum), 
            AWSShapeMember(label: "runOnce", required: false, type: .boolean), 
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "seedTime", required: false, type: .timestamp)
        ]
        /// Number of recent AMIs to keep when creating a replication job for this server.
        public let numberOfRecentAmisToKeep: Int32?
        /// Frequency of creating replication jobs for the server.
        public let frequency: Int32?
        /// License type for creating a replication job for the server.
        public let licenseType: LicenseType?
        public let runOnce: Bool?
        ///  KMS key ID for replication jobs that produce encrypted AMIs. Can be any of the following:    KMS key ID   KMS key alias   ARN referring to KMS key ID   ARN referring to KMS key alias    If encrypted is true but a KMS key id is not specified, the customer's default KMS key for EBS is used. 
        public let kmsKeyId: String?
        /// When true, the replication job produces encrypted AMIs. See also KmsKeyId below.
        public let encrypted: Bool?
        /// Seed time for creating a replication job for the server.
        public let seedTime: TimeStamp?

        public init(numberOfRecentAmisToKeep: Int32? = nil, frequency: Int32? = nil, licenseType: LicenseType? = nil, runOnce: Bool? = nil, kmsKeyId: String? = nil, encrypted: Bool? = nil, seedTime: TimeStamp? = nil) {
            self.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep
            self.frequency = frequency
            self.licenseType = licenseType
            self.runOnce = runOnce
            self.kmsKeyId = kmsKeyId
            self.encrypted = encrypted
            self.seedTime = seedTime
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfRecentAmisToKeep = "numberOfRecentAmisToKeep"
            case frequency = "frequency"
            case licenseType = "licenseType"
            case runOnce = "runOnce"
            case kmsKeyId = "kmsKeyId"
            case encrypted = "encrypted"
            case seedTime = "seedTime"
        }
    }

    public struct ReplicationRunStageDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageProgress", required: false, type: .string), 
            AWSShapeMember(label: "stage", required: false, type: .string)
        ]
        /// String describing the progress of the current stage of a replication run.
        public let stageProgress: String?
        /// String describing the current stage of a replication run.
        public let stage: String?

        public init(stageProgress: String? = nil, stage: String? = nil) {
            self.stageProgress = stageProgress
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case stageProgress = "stageProgress"
            case stage = "stage"
        }
    }

    public struct GetReplicationRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The identifier of the replication job.
        public let replicationJobId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, replicationJobId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case replicationJobId = "replicationJobId"
        }
    }

    public enum ConnectorStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public enum AppStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case updating = "UPDATING"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case deleteFailed = "DELETE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ServerGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "serverList", required: false, type: .list), 
            AWSShapeMember(label: "serverGroupId", required: false, type: .string)
        ]
        /// Name of a server group.
        public let name: String?
        /// List of servers belonging to a server group.
        public let serverList: [Server]?
        /// Identifier of a server group.
        public let serverGroupId: String?

        public init(name: String? = nil, serverList: [Server]? = nil, serverGroupId: String? = nil) {
            self.name = name
            self.serverList = serverList
            self.serverGroupId = serverGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case serverList = "serverList"
            case serverGroupId = "serverGroupId"
        }
    }

    public enum AppLaunchStatus: String, CustomStringConvertible, Codable {
        case readyForConfiguration = "READY_FOR_CONFIGURATION"
        case configurationInProgress = "CONFIGURATION_IN_PROGRESS"
        case configurationInvalid = "CONFIGURATION_INVALID"
        case readyForLaunch = "READY_FOR_LAUNCH"
        case validationInProgress = "VALIDATION_IN_PROGRESS"
        case launchPending = "LAUNCH_PENDING"
        case launchInProgress = "LAUNCH_IN_PROGRESS"
        case launched = "LAUNCHED"
        case deltaLaunchInProgress = "DELTA_LAUNCH_IN_PROGRESS"
        case deltaLaunchFailed = "DELTA_LAUNCH_FAILED"
        case launchFailed = "LAUNCH_FAILED"
        case terminateInProgress = "TERMINATE_IN_PROGRESS"
        case terminateFailed = "TERMINATE_FAILED"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteAppReplicationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application associated with the replication configuration.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct GetServersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "vmServerAddressList", required: false, type: .list)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// List of VmServerAddress objects
        public let vmServerAddressList: [VmServerAddress]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, vmServerAddressList: [VmServerAddress]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.vmServerAddressList = vmServerAddressList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case vmServerAddressList = "vmServerAddressList"
        }
    }

    public struct LaunchAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application to launch.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct GenerateChangeSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// Location of the Amazon S3 object.
        public let s3Location: S3Location?

        public init(s3Location: S3Location? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
        }
    }

    public struct PutAppReplicationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string), 
            AWSShapeMember(label: "serverGroupReplicationConfigurations", required: false, type: .list)
        ]
        /// ID of the application tassociated with the replication configuration.
        public let appId: String?
        /// Replication configurations for server groups in the application.
        public let serverGroupReplicationConfigurations: [ServerGroupReplicationConfiguration]?

        public init(appId: String? = nil, serverGroupReplicationConfigurations: [ServerGroupReplicationConfiguration]? = nil) {
            self.appId = appId
            self.serverGroupReplicationConfigurations = serverGroupReplicationConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
            case serverGroupReplicationConfigurations = "serverGroupReplicationConfigurations"
        }
    }

    public enum ReplicationRunType: String, CustomStringConvertible, Codable {
        case onDemand = "ON_DEMAND"
        case automatic = "AUTOMATIC"
        public var description: String { return self.rawValue }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "bucket", required: false, type: .string)
        ]
        /// Amazon S3 bucket key.
        public let key: String?
        /// Amazon S3 bucket name.
        public let bucket: String?

        public init(key: String? = nil, bucket: String? = nil) {
            self.key = key
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case bucket = "bucket"
        }
    }

    public struct GetAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application whose information is being retrieved.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct DeleteAppLaunchConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application associated with the launch configuration.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct UserData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// Amazon S3 location of the user-data script.
        public let s3Location: S3Location?

        public init(s3Location: S3Location? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
        }
    }

    public enum ServerCatalogStatus: String, CustomStringConvertible, Codable {
        case notImported = "NOT_IMPORTED"
        case importing = "IMPORTING"
        case available = "AVAILABLE"
        case deleted = "DELETED"
        case expired = "EXPIRED"
        public var description: String { return self.rawValue }
    }

    public struct CreateReplicationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationJobId", required: false, type: .string)
        ]
        /// The unique identifier of the replication job.
        public let replicationJobId: String?

        public init(replicationJobId: String? = nil) {
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case replicationJobId = "replicationJobId"
        }
    }

    public struct GenerateChangeSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string), 
            AWSShapeMember(label: "changesetFormat", required: false, type: .enum)
        ]
        /// ID of the application associated with the change set.
        public let appId: String?
        /// Format for the change set.
        public let changesetFormat: OutputFormat?

        public init(appId: String? = nil, changesetFormat: OutputFormat? = nil) {
            self.appId = appId
            self.changesetFormat = changesetFormat
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
            case changesetFormat = "changesetFormat"
        }
    }

    public struct ServerGroupReplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serverReplicationConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "serverGroupId", required: false, type: .string)
        ]
        /// Replication configuration for servers in the server group.
        public let serverReplicationConfigurations: [ServerReplicationConfiguration]?
        /// Identifier of the server group this replication configuration is associated with.
        public let serverGroupId: String?

        public init(serverReplicationConfigurations: [ServerReplicationConfiguration]? = nil, serverGroupId: String? = nil) {
            self.serverReplicationConfigurations = serverReplicationConfigurations
            self.serverGroupId = serverGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case serverReplicationConfigurations = "serverReplicationConfigurations"
            case serverGroupId = "serverGroupId"
        }
    }

    public struct Server: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serverType", required: false, type: .enum), 
            AWSShapeMember(label: "serverId", required: false, type: .string), 
            AWSShapeMember(label: "vmServer", required: false, type: .structure), 
            AWSShapeMember(label: "replicationJobTerminated", required: false, type: .boolean), 
            AWSShapeMember(label: "replicationJobId", required: false, type: .string)
        ]
        /// The type of server.
        public let serverType: ServerType?
        /// The identifier of the server.
        public let serverId: String?
        /// Information about the VM server.
        public let vmServer: VmServer?
        /// Indicates whether the replication job is deleted or failed.
        public let replicationJobTerminated: Bool?
        /// The identifier of the replication job.
        public let replicationJobId: String?

        public init(serverType: ServerType? = nil, serverId: String? = nil, vmServer: VmServer? = nil, replicationJobTerminated: Bool? = nil, replicationJobId: String? = nil) {
            self.serverType = serverType
            self.serverId = serverId
            self.vmServer = vmServer
            self.replicationJobTerminated = replicationJobTerminated
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case serverType = "serverType"
            case serverId = "serverId"
            case vmServer = "vmServer"
            case replicationJobTerminated = "replicationJobTerminated"
            case replicationJobId = "replicationJobId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// Tag key.
        public let key: String?
        /// Tag value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct UpdateAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "appId", required: false, type: .string), 
            AWSShapeMember(label: "serverGroups", required: false, type: .list)
        ]
        /// List of tags to associate with the application.
        public let tags: [Tag]?
        /// New name of the application.
        public let name: String?
        /// Name of the service role in the customer's account used by AWS SMS.
        public let roleName: String?
        /// New description of the application.
        public let description: String?
        /// ID of the application to update.
        public let appId: String?
        /// List of server groups in the application to update.
        public let serverGroups: [ServerGroup]?

        public init(tags: [Tag]? = nil, name: String? = nil, roleName: String? = nil, description: String? = nil, appId: String? = nil, serverGroups: [ServerGroup]? = nil) {
            self.tags = tags
            self.name = name
            self.roleName = roleName
            self.description = description
            self.appId = appId
            self.serverGroups = serverGroups
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case name = "name"
            case roleName = "roleName"
            case description = "description"
            case appId = "appId"
            case serverGroups = "serverGroups"
        }
    }

    public struct ServerGroupLaunchConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serverLaunchConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "serverGroupId", required: false, type: .string), 
            AWSShapeMember(label: "launchOrder", required: false, type: .integer)
        ]
        /// Launch configuration for servers in the server group.
        public let serverLaunchConfigurations: [ServerLaunchConfiguration]?
        /// Identifier of the server group the launch configuration is associated with.
        public let serverGroupId: String?
        /// Launch order of servers in the server group.
        public let launchOrder: Int32?

        public init(serverLaunchConfigurations: [ServerLaunchConfiguration]? = nil, serverGroupId: String? = nil, launchOrder: Int32? = nil) {
            self.serverLaunchConfigurations = serverLaunchConfigurations
            self.serverGroupId = serverGroupId
            self.launchOrder = launchOrder
        }

        private enum CodingKeys: String, CodingKey {
            case serverLaunchConfigurations = "serverLaunchConfigurations"
            case serverGroupId = "serverGroupId"
            case launchOrder = "launchOrder"
        }
    }

    public struct GetReplicationRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationJob", required: false, type: .structure), 
            AWSShapeMember(label: "replicationRunList", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Information about the replication job.
        public let replicationJob: ReplicationJob?
        /// Information about the replication runs.
        public let replicationRunList: [ReplicationRun]?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(replicationJob: ReplicationJob? = nil, replicationRunList: [ReplicationRun]? = nil, nextToken: String? = nil) {
            self.replicationJob = replicationJob
            self.replicationRunList = replicationRunList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case replicationJob = "replicationJob"
            case replicationRunList = "replicationRunList"
            case nextToken = "nextToken"
        }
    }

    public struct ListAppsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appIds", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        public let appIds: [String]?
        /// The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned NextToken value. 
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(appIds: [String]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.appIds = appIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case appIds = "appIds"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteServerCatalogResponse: AWSShape {

    }

    public struct Connector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "macAddress", required: false, type: .string), 
            AWSShapeMember(label: "connectorId", required: false, type: .string), 
            AWSShapeMember(label: "capabilityList", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "vmManagerType", required: false, type: .enum), 
            AWSShapeMember(label: "vmManagerId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "associatedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "vmManagerName", required: false, type: .string)
        ]
        /// The IP address of the connector.
        public let ipAddress: String?
        /// The MAC address of the connector.
        public let macAddress: String?
        /// The identifier of the connector.
        public let connectorId: String?
        /// The capabilities of the connector.
        public let capabilityList: [ConnectorCapability]?
        /// The status of the connector.
        public let status: ConnectorStatus?
        /// The VM management product.
        public let vmManagerType: VmManagerType?
        /// The identifier of the VM manager.
        public let vmManagerId: String?
        /// The connector version.
        public let version: String?
        /// The time the connector was associated.
        public let associatedOn: TimeStamp?
        /// The name of the VM manager.
        public let vmManagerName: String?

        public init(ipAddress: String? = nil, macAddress: String? = nil, connectorId: String? = nil, capabilityList: [ConnectorCapability]? = nil, status: ConnectorStatus? = nil, vmManagerType: VmManagerType? = nil, vmManagerId: String? = nil, version: String? = nil, associatedOn: TimeStamp? = nil, vmManagerName: String? = nil) {
            self.ipAddress = ipAddress
            self.macAddress = macAddress
            self.connectorId = connectorId
            self.capabilityList = capabilityList
            self.status = status
            self.vmManagerType = vmManagerType
            self.vmManagerId = vmManagerId
            self.version = version
            self.associatedOn = associatedOn
            self.vmManagerName = vmManagerName
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddress = "ipAddress"
            case macAddress = "macAddress"
            case connectorId = "connectorId"
            case capabilityList = "capabilityList"
            case status = "status"
            case vmManagerType = "vmManagerType"
            case vmManagerId = "vmManagerId"
            case version = "version"
            case associatedOn = "associatedOn"
            case vmManagerName = "vmManagerName"
        }
    }

    public struct ReplicationJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "vmServer", required: false, type: .structure), 
            AWSShapeMember(label: "nextReplicationRunStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "serverType", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobId", required: false, type: .string), 
            AWSShapeMember(label: "latestAmiId", required: false, type: .string), 
            AWSShapeMember(label: "runOnce", required: false, type: .boolean), 
            AWSShapeMember(label: "serverId", required: false, type: .string), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum), 
            AWSShapeMember(label: "replicationRunList", required: false, type: .list), 
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "seedReplicationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "numberOfRecentAmisToKeep", required: false, type: .integer), 
            AWSShapeMember(label: "frequency", required: false, type: .integer)
        ]
        /// The state of the replication job.
        public let state: ReplicationJobState?
        /// Information about the VM server.
        public let vmServer: VmServer?
        /// The start time of the next replication run.
        public let nextReplicationRunStartTime: TimeStamp?
        /// The type of server.
        public let serverType: ServerType?
        /// The description of the replication job.
        public let description: String?
        /// The name of the IAM role to be used by the Server Migration Service.
        public let roleName: String?
        /// The identifier of the replication job.
        public let replicationJobId: String?
        /// The ID of the latest Amazon Machine Image (AMI).
        public let latestAmiId: String?
        public let runOnce: Bool?
        /// The identifier of the server.
        public let serverId: String?
        /// The license type to be used for the AMI created by a successful replication run.
        public let licenseType: LicenseType?
        /// Information about the replication runs.
        public let replicationRunList: [ReplicationRun]?
        /// KMS key ID for replication jobs that produce encrypted AMIs. Can be any of the following:    KMS key ID   KMS key alias   ARN referring to KMS key ID   ARN referring to KMS key alias    If encrypted is true but a KMS key id is not specified, the customer's default KMS key for EBS is used. 
        public let kmsKeyId: String?
        /// The description of the current status of the replication job.
        public let statusMessage: String?
        /// Whether the replication job should produce encrypted AMIs or not. See also KmsKeyId below.
        public let encrypted: Bool?
        /// The seed replication time.
        public let seedReplicationTime: TimeStamp?
        /// Number of recent AMIs to keep in the customer's account for a replication job. By default the value is set to zero, meaning that all AMIs are kept.
        public let numberOfRecentAmisToKeep: Int32?
        /// The time between consecutive replication runs, in hours.
        public let frequency: Int32?

        public init(state: ReplicationJobState? = nil, vmServer: VmServer? = nil, nextReplicationRunStartTime: TimeStamp? = nil, serverType: ServerType? = nil, description: String? = nil, roleName: String? = nil, replicationJobId: String? = nil, latestAmiId: String? = nil, runOnce: Bool? = nil, serverId: String? = nil, licenseType: LicenseType? = nil, replicationRunList: [ReplicationRun]? = nil, kmsKeyId: String? = nil, statusMessage: String? = nil, encrypted: Bool? = nil, seedReplicationTime: TimeStamp? = nil, numberOfRecentAmisToKeep: Int32? = nil, frequency: Int32? = nil) {
            self.state = state
            self.vmServer = vmServer
            self.nextReplicationRunStartTime = nextReplicationRunStartTime
            self.serverType = serverType
            self.description = description
            self.roleName = roleName
            self.replicationJobId = replicationJobId
            self.latestAmiId = latestAmiId
            self.runOnce = runOnce
            self.serverId = serverId
            self.licenseType = licenseType
            self.replicationRunList = replicationRunList
            self.kmsKeyId = kmsKeyId
            self.statusMessage = statusMessage
            self.encrypted = encrypted
            self.seedReplicationTime = seedReplicationTime
            self.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vmServer = "vmServer"
            case nextReplicationRunStartTime = "nextReplicationRunStartTime"
            case serverType = "serverType"
            case description = "description"
            case roleName = "roleName"
            case replicationJobId = "replicationJobId"
            case latestAmiId = "latestAmiId"
            case runOnce = "runOnce"
            case serverId = "serverId"
            case licenseType = "licenseType"
            case replicationRunList = "replicationRunList"
            case kmsKeyId = "kmsKeyId"
            case statusMessage = "statusMessage"
            case encrypted = "encrypted"
            case seedReplicationTime = "seedReplicationTime"
            case numberOfRecentAmisToKeep = "numberOfRecentAmisToKeep"
            case frequency = "frequency"
        }
    }

    public struct GenerateTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "templateFormat", required: false, type: .enum), 
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// Format for generating the Amazon CloudFormation template.
        public let templateFormat: OutputFormat?
        /// ID of the application associated with the Amazon CloudFormation template.
        public let appId: String?

        public init(templateFormat: OutputFormat? = nil, appId: String? = nil) {
            self.templateFormat = templateFormat
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case templateFormat = "templateFormat"
            case appId = "appId"
        }
    }

    public struct VmServer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vmName", required: false, type: .string), 
            AWSShapeMember(label: "vmServerAddress", required: false, type: .structure), 
            AWSShapeMember(label: "vmManagerType", required: false, type: .enum), 
            AWSShapeMember(label: "vmPath", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerName", required: false, type: .string)
        ]
        /// The name of the VM.
        public let vmName: String?
        /// Information about the VM server location.
        public let vmServerAddress: VmServerAddress?
        /// The type of VM management product.
        public let vmManagerType: VmManagerType?
        /// The VM folder path in the vCenter Server virtual machine inventory tree.
        public let vmPath: String?
        /// The name of the VM manager.
        public let vmManagerName: String?

        public init(vmName: String? = nil, vmServerAddress: VmServerAddress? = nil, vmManagerType: VmManagerType? = nil, vmPath: String? = nil, vmManagerName: String? = nil) {
            self.vmName = vmName
            self.vmServerAddress = vmServerAddress
            self.vmManagerType = vmManagerType
            self.vmPath = vmPath
            self.vmManagerName = vmManagerName
        }

        private enum CodingKeys: String, CodingKey {
            case vmName = "vmName"
            case vmServerAddress = "vmServerAddress"
            case vmManagerType = "vmManagerType"
            case vmPath = "vmPath"
            case vmManagerName = "vmManagerName"
        }
    }

    public struct GetAppReplicationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application associated with the replication configuration.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct ServerReplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "server", required: false, type: .structure), 
            AWSShapeMember(label: "serverReplicationParameters", required: false, type: .structure)
        ]
        /// Identifier of the server this replication configuration is associated with.
        public let server: Server?
        /// Parameters for replicating the server.
        public let serverReplicationParameters: ServerReplicationParameters?

        public init(server: Server? = nil, serverReplicationParameters: ServerReplicationParameters? = nil) {
            self.server = server
            self.serverReplicationParameters = serverReplicationParameters
        }

        private enum CodingKeys: String, CodingKey {
            case server = "server"
            case serverReplicationParameters = "serverReplicationParameters"
        }
    }

    public enum LicenseType: String, CustomStringConvertible, Codable {
        case aws = "AWS"
        case byol = "BYOL"
        public var description: String { return self.rawValue }
    }

    public struct GetConnectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "connectorList", required: false, type: .list)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the registered connectors.
        public let connectorList: [Connector]?

        public init(nextToken: String? = nil, connectorList: [Connector]? = nil) {
            self.nextToken = nextToken
            self.connectorList = connectorList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case connectorList = "connectorList"
        }
    }

    public struct UpdateAppResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appSummary", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "serverGroups", required: false, type: .list)
        ]
        /// Summary description of the application.
        public let appSummary: AppSummary?
        /// List of tags associated with the application.
        public let tags: [Tag]?
        /// List of updated server groups in the application.
        public let serverGroups: [ServerGroup]?

        public init(appSummary: AppSummary? = nil, tags: [Tag]? = nil, serverGroups: [ServerGroup]? = nil) {
            self.appSummary = appSummary
            self.tags = tags
            self.serverGroups = serverGroups
        }

        private enum CodingKeys: String, CodingKey {
            case appSummary = "appSummary"
            case tags = "tags"
            case serverGroups = "serverGroups"
        }
    }

    public struct StartAppReplicationResponse: AWSShape {

    }

    public struct GetConnectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteAppLaunchConfigurationResponse: AWSShape {

    }

    public struct CreateAppResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appSummary", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "serverGroups", required: false, type: .list)
        ]
        /// Summary description of the application.
        public let appSummary: AppSummary?
        /// List of taags associated with the application.
        public let tags: [Tag]?
        /// List of server groups included in the application.
        public let serverGroups: [ServerGroup]?

        public init(appSummary: AppSummary? = nil, tags: [Tag]? = nil, serverGroups: [ServerGroup]? = nil) {
            self.appSummary = appSummary
            self.tags = tags
            self.serverGroups = serverGroups
        }

        private enum CodingKeys: String, CodingKey {
            case appSummary = "appSummary"
            case tags = "tags"
            case serverGroups = "serverGroups"
        }
    }

    public struct DisassociateConnectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectorId", required: true, type: .string)
        ]
        /// The identifier of the connector.
        public let connectorId: String

        public init(connectorId: String) {
            self.connectorId = connectorId
        }

        private enum CodingKeys: String, CodingKey {
            case connectorId = "connectorId"
        }
    }

    public struct DeleteServerCatalogRequest: AWSShape {

    }

    public struct PutAppLaunchConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "serverGroupLaunchConfigurations", required: false, type: .list)
        ]
        /// ID of the application associated with the launch configuration.
        public let appId: String?
        /// Name of service role in the customer's account that Amazon CloudFormation uses to launch the application.
        public let roleName: String?
        /// Launch configurations for server groups in the application.
        public let serverGroupLaunchConfigurations: [ServerGroupLaunchConfiguration]?

        public init(appId: String? = nil, roleName: String? = nil, serverGroupLaunchConfigurations: [ServerGroupLaunchConfiguration]? = nil) {
            self.appId = appId
            self.roleName = roleName
            self.serverGroupLaunchConfigurations = serverGroupLaunchConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
            case roleName = "roleName"
            case serverGroupLaunchConfigurations = "serverGroupLaunchConfigurations"
        }
    }

    public struct DisassociateConnectorResponse: AWSShape {

    }

    public struct LaunchDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "latestLaunchTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "stackId", required: false, type: .string), 
            AWSShapeMember(label: "stackName", required: false, type: .string)
        ]
        /// Latest time this application was launched successfully.
        public let latestLaunchTime: TimeStamp?
        /// Identifier of the latest stack launched for this application.
        public let stackId: String?
        /// Name of the latest stack launched for this application.
        public let stackName: String?

        public init(latestLaunchTime: TimeStamp? = nil, stackId: String? = nil, stackName: String? = nil) {
            self.latestLaunchTime = latestLaunchTime
            self.stackId = stackId
            self.stackName = stackName
        }

        private enum CodingKeys: String, CodingKey {
            case latestLaunchTime = "latestLaunchTime"
            case stackId = "stackId"
            case stackName = "stackName"
        }
    }

    public struct StartOnDemandReplicationRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationRunId", required: false, type: .string)
        ]
        /// The identifier of the replication run.
        public let replicationRunId: String?

        public init(replicationRunId: String? = nil) {
            self.replicationRunId = replicationRunId
        }

        private enum CodingKeys: String, CodingKey {
            case replicationRunId = "replicationRunId"
        }
    }

    public struct ImportServerCatalogRequest: AWSShape {

    }

    public struct TerminateAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application to terminate.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct StopAppReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application to stop replicating.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct TerminateAppResponse: AWSShape {

    }

    public struct GetAppResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appSummary", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "serverGroups", required: false, type: .list)
        ]
        /// Information about the application.
        public let appSummary: AppSummary?
        /// List of tags associated with the application.
        public let tags: [Tag]?
        /// List of server groups belonging to the application.
        public let serverGroups: [ServerGroup]?

        public init(appSummary: AppSummary? = nil, tags: [Tag]? = nil, serverGroups: [ServerGroup]? = nil) {
            self.appSummary = appSummary
            self.tags = tags
            self.serverGroups = serverGroups
        }

        private enum CodingKeys: String, CodingKey {
            case appSummary = "appSummary"
            case tags = "tags"
            case serverGroups = "serverGroups"
        }
    }

    public struct GetReplicationJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "replicationJobId", required: false, type: .string)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The identifier of the replication job.
        public let replicationJobId: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, replicationJobId: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case replicationJobId = "replicationJobId"
        }
    }

    public struct LaunchAppResponse: AWSShape {

    }

    public struct VmServerAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vmId", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerId", required: false, type: .string)
        ]
        /// The identifier of the VM.
        public let vmId: String?
        /// The identifier of the VM manager.
        public let vmManagerId: String?

        public init(vmId: String? = nil, vmManagerId: String? = nil) {
            self.vmId = vmId
            self.vmManagerId = vmManagerId
        }

        private enum CodingKeys: String, CodingKey {
            case vmId = "vmId"
            case vmManagerId = "vmManagerId"
        }
    }

    public struct GetAppLaunchConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application launch configuration.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public enum VmManagerType: String, CustomStringConvertible, Codable {
        case vsphere = "VSPHERE"
        case scvmm = "SCVMM"
        case hypervManager = "HYPERV-MANAGER"
        public var description: String { return self.rawValue }
    }

    public struct ReplicationRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "stageDetails", required: false, type: .structure), 
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "replicationRunId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "scheduledStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "completedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "amiId", required: false, type: .string)
        ]
        /// The description of the current status of the replication job.
        public let statusMessage: String?
        /// The type of replication run.
        public let `type`: ReplicationRunType?
        /// Details of the current stage of the replication run.
        public let stageDetails: ReplicationRunStageDetails?
        /// The state of the replication run.
        public let state: ReplicationRunState?
        /// KMS key ID for replication jobs that produce encrypted AMIs. Can be any of the following:    KMS key ID   KMS key alias   ARN referring to KMS key ID   ARN referring to KMS key alias    If encrypted is true but a KMS key id is not specified, the customer's default KMS key for EBS is used. 
        public let kmsKeyId: String?
        /// Whether the replication run should produce encrypted AMI or not. See also KmsKeyId below.
        public let encrypted: Bool?
        /// The identifier of the replication run.
        public let replicationRunId: String?
        /// The description of the replication run.
        public let description: String?
        /// The start time of the next replication run.
        public let scheduledStartTime: TimeStamp?
        /// The completion time of the last replication run.
        public let completedTime: TimeStamp?
        /// The identifier of the Amazon Machine Image (AMI) from the replication run.
        public let amiId: String?

        public init(statusMessage: String? = nil, type: ReplicationRunType? = nil, stageDetails: ReplicationRunStageDetails? = nil, state: ReplicationRunState? = nil, kmsKeyId: String? = nil, encrypted: Bool? = nil, replicationRunId: String? = nil, description: String? = nil, scheduledStartTime: TimeStamp? = nil, completedTime: TimeStamp? = nil, amiId: String? = nil) {
            self.statusMessage = statusMessage
            self.`type` = `type`
            self.stageDetails = stageDetails
            self.state = state
            self.kmsKeyId = kmsKeyId
            self.encrypted = encrypted
            self.replicationRunId = replicationRunId
            self.description = description
            self.scheduledStartTime = scheduledStartTime
            self.completedTime = completedTime
            self.amiId = amiId
        }

        private enum CodingKeys: String, CodingKey {
            case statusMessage = "statusMessage"
            case `type` = "type"
            case stageDetails = "stageDetails"
            case state = "state"
            case kmsKeyId = "kmsKeyId"
            case encrypted = "encrypted"
            case replicationRunId = "replicationRunId"
            case description = "description"
            case scheduledStartTime = "scheduledStartTime"
            case completedTime = "completedTime"
            case amiId = "amiId"
        }
    }

    public struct StartAppReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// ID of the application to replicate.
        public let appId: String?

        public init(appId: String? = nil) {
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
        }
    }

    public struct CreateAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "serverGroups", required: false, type: .list), 
            AWSShapeMember(label: "clientToken", required: false, type: .string)
        ]
        /// List of tags to be associated with the application.
        public let tags: [Tag]?
        /// Name of the new application.
        public let name: String?
        /// Name of service role in customer's account to be used by AWS SMS.
        public let roleName: String?
        /// Description of the new application
        public let description: String?
        /// List of server groups to include in the application.
        public let serverGroups: [ServerGroup]?
        /// A unique, case-sensitive identifier you provide to ensure idempotency of application creation.
        public let clientToken: String?

        public init(tags: [Tag]? = nil, name: String? = nil, roleName: String? = nil, description: String? = nil, serverGroups: [ServerGroup]? = nil, clientToken: String? = nil) {
            self.tags = tags
            self.name = name
            self.roleName = roleName
            self.description = description
            self.serverGroups = serverGroups
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case name = "name"
            case roleName = "roleName"
            case description = "description"
            case serverGroups = "serverGroups"
            case clientToken = "clientToken"
        }
    }

    public struct GetServersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastModifiedOn", required: false, type: .timestamp), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "serverList", required: false, type: .list), 
            AWSShapeMember(label: "serverCatalogStatus", required: false, type: .enum)
        ]
        /// The time when the server was last modified.
        public let lastModifiedOn: TimeStamp?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the servers.
        public let serverList: [Server]?
        /// The status of the server catalog.
        public let serverCatalogStatus: ServerCatalogStatus?

        public init(lastModifiedOn: TimeStamp? = nil, nextToken: String? = nil, serverList: [Server]? = nil, serverCatalogStatus: ServerCatalogStatus? = nil) {
            self.lastModifiedOn = lastModifiedOn
            self.nextToken = nextToken
            self.serverList = serverList
            self.serverCatalogStatus = serverCatalogStatus
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedOn = "lastModifiedOn"
            case nextToken = "nextToken"
            case serverList = "serverList"
            case serverCatalogStatus = "serverCatalogStatus"
        }
    }

    public struct DeleteAppReplicationConfigurationResponse: AWSShape {

    }

    public struct GetAppLaunchConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "appId", required: false, type: .string), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "serverGroupLaunchConfigurations", required: false, type: .list)
        ]
        /// ID of the application associated with the launch configuration.
        public let appId: String?
        /// Name of the service role in the customer's account that Amazon CloudFormation uses to launch the application.
        public let roleName: String?
        /// List of launch configurations for server groups in this application.
        public let serverGroupLaunchConfigurations: [ServerGroupLaunchConfiguration]?

        public init(appId: String? = nil, roleName: String? = nil, serverGroupLaunchConfigurations: [ServerGroupLaunchConfiguration]? = nil) {
            self.appId = appId
            self.roleName = roleName
            self.serverGroupLaunchConfigurations = serverGroupLaunchConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case appId = "appId"
            case roleName = "roleName"
            case serverGroupLaunchConfigurations = "serverGroupLaunchConfigurations"
        }
    }

    public struct PutAppReplicationConfigurationResponse: AWSShape {

    }

    public struct ImportServerCatalogResponse: AWSShape {

    }

    public enum ReplicationJobState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case active = "ACTIVE"
        case failed = "FAILED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case completed = "COMPLETED"
        case pausedOnFailure = "PAUSED_ON_FAILURE"
        case failing = "FAILING"
        public var description: String { return self.rawValue }
    }

    public enum ReplicationRunState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case missed = "MISSED"
        case active = "ACTIVE"
        case failed = "FAILED"
        case completed = "COMPLETED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum AppReplicationStatus: String, CustomStringConvertible, Codable {
        case readyForConfiguration = "READY_FOR_CONFIGURATION"
        case configurationInProgress = "CONFIGURATION_IN_PROGRESS"
        case configurationInvalid = "CONFIGURATION_INVALID"
        case readyForReplication = "READY_FOR_REPLICATION"
        case validationInProgress = "VALIDATION_IN_PROGRESS"
        case replicationPending = "REPLICATION_PENDING"
        case replicationInProgress = "REPLICATION_IN_PROGRESS"
        case replicated = "REPLICATED"
        case deltaReplicationInProgress = "DELTA_REPLICATION_IN_PROGRESS"
        case deltaReplicated = "DELTA_REPLICATED"
        case deltaReplicationFailed = "DELTA_REPLICATION_FAILED"
        case replicationFailed = "REPLICATION_FAILED"
        case replicationStopping = "REPLICATION_STOPPING"
        case replicationStopFailed = "REPLICATION_STOP_FAILED"
        case replicationStopped = "REPLICATION_STOPPED"
        public var description: String { return self.rawValue }
    }

    public struct StopAppReplicationResponse: AWSShape {

    }

    public struct GetReplicationJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobList", required: false, type: .list)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the replication jobs.
        public let replicationJobList: [ReplicationJob]?

        public init(nextToken: String? = nil, replicationJobList: [ReplicationJob]? = nil) {
            self.nextToken = nextToken
            self.replicationJobList = replicationJobList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case replicationJobList = "replicationJobList"
        }
    }

    public struct GenerateTemplateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// Location of the Amazon S3 object.
        public let s3Location: S3Location?

        public init(s3Location: S3Location? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
        }
    }

    public enum ConnectorCapability: String, CustomStringConvertible, Codable {
        case vsphere = "VSPHERE"
        case scvmm = "SCVMM"
        case hypervManager = "HYPERV-MANAGER"
        case snapshotBatching = "SNAPSHOT_BATCHING"
        public var description: String { return self.rawValue }
    }

    public struct DeleteAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "forceStopAppReplication", required: false, type: .boolean), 
            AWSShapeMember(label: "forceTerminateApp", required: false, type: .boolean), 
            AWSShapeMember(label: "appId", required: false, type: .string)
        ]
        /// While deleting the application, stop all replication jobs corresponding to the servers in the application.
        public let forceStopAppReplication: Bool?
        /// While deleting the application, terminate the stack corresponding to the application.
        public let forceTerminateApp: Bool?
        /// ID of the application to delete.
        public let appId: String?

        public init(forceStopAppReplication: Bool? = nil, forceTerminateApp: Bool? = nil, appId: String? = nil) {
            self.forceStopAppReplication = forceStopAppReplication
            self.forceTerminateApp = forceTerminateApp
            self.appId = appId
        }

        private enum CodingKeys: String, CodingKey {
            case forceStopAppReplication = "forceStopAppReplication"
            case forceTerminateApp = "forceTerminateApp"
            case appId = "appId"
        }
    }

    public struct CreateReplicationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfRecentAmisToKeep", required: false, type: .integer), 
            AWSShapeMember(label: "frequency", required: false, type: .integer), 
            AWSShapeMember(label: "runOnce", required: false, type: .boolean), 
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "seedReplicationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "serverId", required: true, type: .string)
        ]
        /// The maximum number of SMS-created AMIs to retain. The oldest will be deleted once the maximum number is reached and a new AMI is created.
        public let numberOfRecentAmisToKeep: Int32?
        /// The time between consecutive replication runs, in hours.
        public let frequency: Int32?
        public let runOnce: Bool?
        /// KMS key ID for replication jobs that produce encrypted AMIs. Can be any of the following:    KMS key ID   KMS key alias   ARN referring to KMS key ID   ARN referring to KMS key alias    If encrypted is true but a KMS key id is not specified, the customer's default KMS key for EBS is used. 
        public let kmsKeyId: String?
        /// The seed replication time.
        public let seedReplicationTime: TimeStamp
        /// The license type to be used for the AMI created by a successful replication run.
        public let licenseType: LicenseType?
        /// The name of the IAM role to be used by the AWS SMS.
        public let roleName: String?
        /// When true, the replication job produces encrypted AMIs. See also KmsKeyId below.
        public let encrypted: Bool?
        /// The description of the replication job.
        public let description: String?
        /// The identifier of the server.
        public let serverId: String

        public init(numberOfRecentAmisToKeep: Int32? = nil, frequency: Int32? = nil, runOnce: Bool? = nil, kmsKeyId: String? = nil, seedReplicationTime: TimeStamp, licenseType: LicenseType? = nil, roleName: String? = nil, encrypted: Bool? = nil, description: String? = nil, serverId: String) {
            self.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep
            self.frequency = frequency
            self.runOnce = runOnce
            self.kmsKeyId = kmsKeyId
            self.seedReplicationTime = seedReplicationTime
            self.licenseType = licenseType
            self.roleName = roleName
            self.encrypted = encrypted
            self.description = description
            self.serverId = serverId
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfRecentAmisToKeep = "numberOfRecentAmisToKeep"
            case frequency = "frequency"
            case runOnce = "runOnce"
            case kmsKeyId = "kmsKeyId"
            case seedReplicationTime = "seedReplicationTime"
            case licenseType = "licenseType"
            case roleName = "roleName"
            case encrypted = "encrypted"
            case description = "description"
            case serverId = "serverId"
        }
    }

    public struct DeleteReplicationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        /// The identifier of the replication job.
        public let replicationJobId: String

        public init(replicationJobId: String) {
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case replicationJobId = "replicationJobId"
        }
    }

    public struct AppSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "launchDetails", required: false, type: .structure), 
            AWSShapeMember(label: "totalServerGroups", required: false, type: .integer), 
            AWSShapeMember(label: "launchStatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "lastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "appId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "latestReplicationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "launchStatus", required: false, type: .enum), 
            AWSShapeMember(label: "replicationStatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "replicationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "totalServers", required: false, type: .integer), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp)
        ]
        /// Details about the latest launch of the application.
        public let launchDetails: LaunchDetails?
        /// Number of server groups present in the application.
        public let totalServerGroups: Int32?
        /// A message related to the launch status of the application.
        public let launchStatusMessage: String?
        /// Timestamp of the application's creation.
        public let lastModified: TimeStamp?
        /// Name of the application.
        public let name: String?
        /// Status of the application.
        public let status: AppStatus?
        /// Name of the service role in the customer's account used by AWS SMS.
        public let roleName: String?
        /// Unique ID of the application.
        public let appId: String?
        /// Description of the application.
        public let description: String?
        /// Timestamp of the application's most recent successful replication.
        public let latestReplicationTime: TimeStamp?
        /// Launch status of the application.
        public let launchStatus: AppLaunchStatus?
        /// A message related to the replication status of the application.
        public let replicationStatusMessage: String?
        /// Replication status of the application.
        public let replicationStatus: AppReplicationStatus?
        /// Number of servers present in the application.
        public let totalServers: Int32?
        /// A message related to the status of the application
        public let statusMessage: String?
        /// Time of creation of this application.
        public let creationTime: TimeStamp?

        public init(launchDetails: LaunchDetails? = nil, totalServerGroups: Int32? = nil, launchStatusMessage: String? = nil, lastModified: TimeStamp? = nil, name: String? = nil, status: AppStatus? = nil, roleName: String? = nil, appId: String? = nil, description: String? = nil, latestReplicationTime: TimeStamp? = nil, launchStatus: AppLaunchStatus? = nil, replicationStatusMessage: String? = nil, replicationStatus: AppReplicationStatus? = nil, totalServers: Int32? = nil, statusMessage: String? = nil, creationTime: TimeStamp? = nil) {
            self.launchDetails = launchDetails
            self.totalServerGroups = totalServerGroups
            self.launchStatusMessage = launchStatusMessage
            self.lastModified = lastModified
            self.name = name
            self.status = status
            self.roleName = roleName
            self.appId = appId
            self.description = description
            self.latestReplicationTime = latestReplicationTime
            self.launchStatus = launchStatus
            self.replicationStatusMessage = replicationStatusMessage
            self.replicationStatus = replicationStatus
            self.totalServers = totalServers
            self.statusMessage = statusMessage
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case launchDetails = "launchDetails"
            case totalServerGroups = "totalServerGroups"
            case launchStatusMessage = "launchStatusMessage"
            case lastModified = "lastModified"
            case name = "name"
            case status = "status"
            case roleName = "roleName"
            case appId = "appId"
            case description = "description"
            case latestReplicationTime = "latestReplicationTime"
            case launchStatus = "launchStatus"
            case replicationStatusMessage = "replicationStatusMessage"
            case replicationStatus = "replicationStatus"
            case totalServers = "totalServers"
            case statusMessage = "statusMessage"
            case creationTime = "creationTime"
        }
    }

    public struct StartOnDemandReplicationRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        /// The description of the replication run.
        public let description: String?
        /// The identifier of the replication job.
        public let replicationJobId: String

        public init(description: String? = nil, replicationJobId: String) {
            self.description = description
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case replicationJobId = "replicationJobId"
        }
    }

    public struct UpdateReplicationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfRecentAmisToKeep", required: false, type: .integer), 
            AWSShapeMember(label: "frequency", required: false, type: .integer), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum), 
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "nextReplicationRunStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        /// The maximum number of SMS-created AMIs to retain. The oldest will be deleted once the maximum number is reached and a new AMI is created.
        public let numberOfRecentAmisToKeep: Int32?
        /// The time between consecutive replication runs, in hours.
        public let frequency: Int32?
        /// The license type to be used for the AMI created by a successful replication run.
        public let licenseType: LicenseType?
        ///  KMS key ID for replication jobs that produce encrypted AMIs. Can be any of the following:    KMS key ID   KMS key alias   ARN referring to KMS key ID   ARN referring to KMS key alias    If encrypted is true but a KMS key id is not specified, the customer's default KMS key for EBS is used. 
        public let kmsKeyId: String?
        /// When true, the replication job produces encrypted AMIs . See also KmsKeyId below.
        public let encrypted: Bool?
        /// The name of the IAM role to be used by AWS SMS.
        public let roleName: String?
        /// The description of the replication job.
        public let description: String?
        /// The start time of the next replication run.
        public let nextReplicationRunStartTime: TimeStamp?
        /// The identifier of the replication job.
        public let replicationJobId: String

        public init(numberOfRecentAmisToKeep: Int32? = nil, frequency: Int32? = nil, licenseType: LicenseType? = nil, kmsKeyId: String? = nil, encrypted: Bool? = nil, roleName: String? = nil, description: String? = nil, nextReplicationRunStartTime: TimeStamp? = nil, replicationJobId: String) {
            self.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep
            self.frequency = frequency
            self.licenseType = licenseType
            self.kmsKeyId = kmsKeyId
            self.encrypted = encrypted
            self.roleName = roleName
            self.description = description
            self.nextReplicationRunStartTime = nextReplicationRunStartTime
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfRecentAmisToKeep = "numberOfRecentAmisToKeep"
            case frequency = "frequency"
            case licenseType = "licenseType"
            case kmsKeyId = "kmsKeyId"
            case encrypted = "encrypted"
            case roleName = "roleName"
            case description = "description"
            case nextReplicationRunStartTime = "nextReplicationRunStartTime"
            case replicationJobId = "replicationJobId"
        }
    }

    public struct DeleteAppResponse: AWSShape {

    }

    public enum ServerType: String, CustomStringConvertible, Codable {
        case virtualMachine = "VIRTUAL_MACHINE"
        public var description: String { return self.rawValue }
    }

    public struct ListAppsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apps", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of application summaries.
        public let apps: [AppSummary]?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(apps: [AppSummary]? = nil, nextToken: String? = nil) {
            self.apps = apps
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apps = "apps"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteReplicationJobResponse: AWSShape {

    }

    public struct PutAppLaunchConfigurationResponse: AWSShape {

    }

    public struct ServerLaunchConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "server", required: false, type: .structure), 
            AWSShapeMember(label: "instanceType", required: false, type: .string), 
            AWSShapeMember(label: "associatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "vpc", required: false, type: .string), 
            AWSShapeMember(label: "ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "subnet", required: false, type: .string), 
            AWSShapeMember(label: "logicalId", required: false, type: .string), 
            AWSShapeMember(label: "securityGroup", required: false, type: .string), 
            AWSShapeMember(label: "userData", required: false, type: .structure)
        ]
        /// Identifier of the server the launch configuration is associated with.
        public let server: Server?
        /// Instance type to be used for launching the server.
        public let instanceType: String?
        /// If true, a publicly accessible IP address is created when launching the server.
        public let associatePublicIpAddress: Bool?
        /// Identifier of the VPC the server should be launched into.
        public let vpc: String?
        /// Name of the EC2 SSH Key to be used for connecting to the launched server.
        public let ec2KeyName: String?
        /// Identifier of the subnet the server should be launched into.
        public let subnet: String?
        /// Logical ID of the server in the Amazon CloudFormation template.
        public let logicalId: String?
        /// Identifier of the security group that applies to the launched server.
        public let securityGroup: String?
        /// Location of the user-data script to be executed when launching the server.
        public let userData: UserData?

        public init(server: Server? = nil, instanceType: String? = nil, associatePublicIpAddress: Bool? = nil, vpc: String? = nil, ec2KeyName: String? = nil, subnet: String? = nil, logicalId: String? = nil, securityGroup: String? = nil, userData: UserData? = nil) {
            self.server = server
            self.instanceType = instanceType
            self.associatePublicIpAddress = associatePublicIpAddress
            self.vpc = vpc
            self.ec2KeyName = ec2KeyName
            self.subnet = subnet
            self.logicalId = logicalId
            self.securityGroup = securityGroup
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case server = "server"
            case instanceType = "instanceType"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case vpc = "vpc"
            case ec2KeyName = "ec2KeyName"
            case subnet = "subnet"
            case logicalId = "logicalId"
            case securityGroup = "securityGroup"
            case userData = "userData"
        }
    }

}