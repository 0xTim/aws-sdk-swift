// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Workdocs {

    public struct DescribeDocumentVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .string)
        ]
        /// Specify "SOURCE" to include initialized versions and a URL for the source document.
        public let fields: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The maximum number of versions to return with this call.
        public let limit: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The ID of the document.
        public let documentId: String
        /// A comma-separated list of values. Specify "INITIALIZED" to include incomplete versions.
        public let include: String?

        public init(fields: String? = nil, authenticationToken: String? = nil, limit: Int32? = nil, marker: String? = nil, documentId: String, include: String? = nil) {
            self.fields = fields
            self.authenticationToken = authenticationToken
            self.limit = limit
            self.marker = marker
            self.documentId = documentId
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case fields = "fields"
            case authenticationToken = "Authentication"
            case limit = "limit"
            case marker = "marker"
            case documentId = "DocumentId"
            case include = "include"
        }
    }

    public struct DescribeActivitiesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", location: .querystring(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .querystring(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "EndTime", location: .querystring(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string)
        ]
        /// The timestamp that determines the starting time of the activities; the response includes the activities performed after the specified timestamp.
        public let startTime: TimeStamp?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user who performed the action. The response includes activities pertaining to this user. This is an optional parameter and is only applicable for administrative API (SigV4) requests.
        public let userId: String?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The timestamp that determines the end time of the activities; the response includes the activities performed before the specified timestamp.
        public let endTime: TimeStamp?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The ID of the organization. This is a mandatory parameter when using administrative API (SigV4) requests.
        public let organizationId: String?

        public init(startTime: TimeStamp? = nil, authenticationToken: String? = nil, userId: String? = nil, marker: String? = nil, endTime: TimeStamp? = nil, limit: Int32? = nil, organizationId: String? = nil) {
            self.startTime = startTime
            self.authenticationToken = authenticationToken
            self.userId = userId
            self.marker = marker
            self.endTime = endTime
            self.limit = limit
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "startTime"
            case authenticationToken = "Authentication"
            case userId = "userId"
            case marker = "marker"
            case endTime = "endTime"
            case limit = "limit"
            case organizationId = "organizationId"
        }
    }

    public struct CreateLabelsResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateNotificationSubscriptionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionType", required: true, type: .enum), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "Endpoint", required: true, type: .string)
        ]
        /// The ID of the organization.
        public let organizationId: String
        /// The notification type.
        public let subscriptionType: SubscriptionType
        /// The protocol to use. The supported value is https, which delivers JSON-encoded messasges using HTTPS POST.
        public let `protocol`: SubscriptionProtocolType
        /// The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with "https://".
        public let endpoint: String

        public init(organizationId: String, subscriptionType: SubscriptionType, protocol: SubscriptionProtocolType, endpoint: String) {
            self.organizationId = organizationId
            self.subscriptionType = subscriptionType
            self.`protocol` = `protocol`
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case subscriptionType = "SubscriptionType"
            case `protocol` = "Protocol"
            case endpoint = "Endpoint"
        }
    }

    public enum ActivityType: String, CustomStringConvertible, Codable {
        case document_checked_in = "DOCUMENT_CHECKED_IN"
        case document_checked_out = "DOCUMENT_CHECKED_OUT"
        case document_renamed = "DOCUMENT_RENAMED"
        case document_version_uploaded = "DOCUMENT_VERSION_UPLOADED"
        case document_version_deleted = "DOCUMENT_VERSION_DELETED"
        case document_recycled = "DOCUMENT_RECYCLED"
        case document_restored = "DOCUMENT_RESTORED"
        case document_reverted = "DOCUMENT_REVERTED"
        case document_shared = "DOCUMENT_SHARED"
        case document_unshared = "DOCUMENT_UNSHARED"
        case document_share_permission_changed = "DOCUMENT_SHARE_PERMISSION_CHANGED"
        case document_shareable_link_created = "DOCUMENT_SHAREABLE_LINK_CREATED"
        case document_shareable_link_removed = "DOCUMENT_SHAREABLE_LINK_REMOVED"
        case document_shareable_link_permission_changed = "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED"
        case document_moved = "DOCUMENT_MOVED"
        case document_comment_added = "DOCUMENT_COMMENT_ADDED"
        case document_comment_deleted = "DOCUMENT_COMMENT_DELETED"
        case document_annotation_added = "DOCUMENT_ANNOTATION_ADDED"
        case document_annotation_deleted = "DOCUMENT_ANNOTATION_DELETED"
        case folder_created = "FOLDER_CREATED"
        case folder_deleted = "FOLDER_DELETED"
        case folder_renamed = "FOLDER_RENAMED"
        case folder_recycled = "FOLDER_RECYCLED"
        case folder_restored = "FOLDER_RESTORED"
        case folder_shared = "FOLDER_SHARED"
        case folder_unshared = "FOLDER_UNSHARED"
        case folder_share_permission_changed = "FOLDER_SHARE_PERMISSION_CHANGED"
        case folder_shareable_link_created = "FOLDER_SHAREABLE_LINK_CREATED"
        case folder_shareable_link_removed = "FOLDER_SHAREABLE_LINK_REMOVED"
        case folder_shareable_link_permission_changed = "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED"
        case folder_moved = "FOLDER_MOVED"
        public var description: String { return self.rawValue }
    }

    public struct CreateCommentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Visibility", required: false, type: .enum), 
            AWSShapeMember(label: "NotifyCollaborators", required: false, type: .boolean)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the parent comment.
        public let parentId: String?
        /// The ID of the root comment in the thread.
        public let threadId: String?
        /// The text of the comment.
        public let text: String
        /// The ID of the document version.
        public let versionId: String
        /// The ID of the document.
        public let documentId: String
        /// The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.
        public let visibility: CommentVisibilityType?
        /// Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
        public let notifyCollaborators: Bool?

        public init(authenticationToken: String? = nil, parentId: String? = nil, threadId: String? = nil, text: String, versionId: String, documentId: String, visibility: CommentVisibilityType? = nil, notifyCollaborators: Bool? = nil) {
            self.authenticationToken = authenticationToken
            self.parentId = parentId
            self.threadId = threadId
            self.text = text
            self.versionId = versionId
            self.documentId = documentId
            self.visibility = visibility
            self.notifyCollaborators = notifyCollaborators
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case parentId = "ParentId"
            case threadId = "ThreadId"
            case text = "Text"
            case versionId = "VersionId"
            case documentId = "DocumentId"
            case visibility = "Visibility"
            case notifyCollaborators = "NotifyCollaborators"
        }
    }

    public enum DocumentThumbnailType: String, CustomStringConvertible, Codable {
        case small = "SMALL"
        case small_hq = "SMALL_HQ"
        case large = "LARGE"
        public var description: String { return self.rawValue }
    }

    public struct ShareResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "PrincipalId", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "ShareId", required: false, type: .string)
        ]
        /// The role.
        public let role: RoleType?
        /// The status.
        public let status: ShareStatusType?
        /// The ID of the principal.
        public let principalId: String?
        /// The status message.
        public let statusMessage: String?
        /// The ID of the resource that was shared.
        public let shareId: String?

        public init(role: RoleType? = nil, status: ShareStatusType? = nil, principalId: String? = nil, statusMessage: String? = nil, shareId: String? = nil) {
            self.role = role
            self.status = status
            self.principalId = principalId
            self.statusMessage = statusMessage
            self.shareId = shareId
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case status = "Status"
            case principalId = "PrincipalId"
            case statusMessage = "StatusMessage"
            case shareId = "ShareId"
        }
    }

    public struct GetDocumentVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The version ID of the document.
        public let versionId: String
        /// Set this to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?
        /// A comma-separated list of values. Specify "SOURCE" to include a URL for the source document.
        public let fields: String?
        /// The ID of the document.
        public let documentId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(versionId: String, includeCustomMetadata: Bool? = nil, fields: String? = nil, documentId: String, authenticationToken: String? = nil) {
            self.versionId = versionId
            self.includeCustomMetadata = includeCustomMetadata
            self.fields = fields
            self.documentId = documentId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case includeCustomMetadata = "includeCustomMetadata"
            case fields = "fields"
            case documentId = "DocumentId"
            case authenticationToken = "Authentication"
        }
    }

    public struct PermissionInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Role", required: false, type: .enum)
        ]
        /// The type of permissions.
        public let `type`: RolePermissionType?
        /// The role of the user.
        public let role: RoleType?

        public init(type: RolePermissionType? = nil, role: RoleType? = nil) {
            self.`type` = `type`
            self.role = role
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case role = "Role"
        }
    }

    public struct Subscription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionId", required: false, type: .string), 
            AWSShapeMember(label: "EndPoint", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum)
        ]
        /// The ID of the subscription.
        public let subscriptionId: String?
        /// The endpoint of the subscription.
        public let endPoint: String?
        /// The protocol of the subscription.
        public let `protocol`: SubscriptionProtocolType?

        public init(subscriptionId: String? = nil, endPoint: String? = nil, protocol: SubscriptionProtocolType? = nil) {
            self.subscriptionId = subscriptionId
            self.endPoint = endPoint
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionId = "SubscriptionId"
            case endPoint = "EndPoint"
            case `protocol` = "Protocol"
        }
    }

    public struct DescribeFolderContentsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Documents", required: false, type: .list), 
            AWSShapeMember(label: "Folders", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The documents in the specified folder.
        public let documents: [DocumentMetadata]?
        /// The subfolders in the specified folder.
        public let folders: [FolderMetadata]?

        public init(marker: String? = nil, documents: [DocumentMetadata]? = nil, folders: [FolderMetadata]? = nil) {
            self.marker = marker
            self.documents = documents
            self.folders = folders
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case documents = "Documents"
            case folders = "Folders"
        }
    }

    public enum CommentStatusType: String, CustomStringConvertible, Codable {
        case draft = "DRAFT"
        case published = "PUBLISHED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct DescribeUsersResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "TotalNumberOfUsers", required: false, type: .long)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The users.
        public let users: [User]?
        /// The total number of users included in the results.
        public let totalNumberOfUsers: Int64?

        public init(marker: String? = nil, users: [User]? = nil, totalNumberOfUsers: Int64? = nil) {
            self.marker = marker
            self.users = users
            self.totalNumberOfUsers = totalNumberOfUsers
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case users = "Users"
            case totalNumberOfUsers = "TotalNumberOfUsers"
        }
    }

    public struct ResourcePathComponent: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the resource path.
        public let name: String?
        /// The ID of the resource path.
        public let id: String?

        public init(name: String? = nil, id: String? = nil) {
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
        }
    }

    public struct CommentMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Contributor", required: false, type: .structure), 
            AWSShapeMember(label: "CommentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "CommentId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "RecipientId", required: false, type: .string)
        ]
        /// The user who made the comment.
        public let contributor: User?
        public let commentStatus: CommentStatusType?
        /// The ID of the comment.
        public let commentId: String?
        public let createdTimestamp: TimeStamp?
        /// The ID of the user being replied to.
        public let recipientId: String?

        public init(contributor: User? = nil, commentStatus: CommentStatusType? = nil, commentId: String? = nil, createdTimestamp: TimeStamp? = nil, recipientId: String? = nil) {
            self.contributor = contributor
            self.commentStatus = commentStatus
            self.commentId = commentId
            self.createdTimestamp = createdTimestamp
            self.recipientId = recipientId
        }

        private enum CodingKeys: String, CodingKey {
            case contributor = "Contributor"
            case commentStatus = "CommentStatus"
            case commentId = "CommentId"
            case createdTimestamp = "CreatedTimestamp"
            case recipientId = "RecipientId"
        }
    }

    public struct DescribeResourcePermissionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Principals", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The principals.
        public let principals: [Principal]?

        public init(marker: String? = nil, principals: [Principal]? = nil) {
            self.marker = marker
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case principals = "Principals"
        }
    }

    public struct CreateLabelsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Labels", required: true, type: .list)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// List of labels to add to the resource.
        public let labels: [String]

        public init(resourceId: String, authenticationToken: String? = nil, labels: [String]) {
            self.resourceId = resourceId
            self.authenticationToken = authenticationToken
            self.labels = labels
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case authenticationToken = "Authentication"
            case labels = "Labels"
        }
    }

    public struct DeleteDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String

        public init(authenticationToken: String? = nil, documentId: String) {
            self.authenticationToken = authenticationToken
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
        }
    }

    public enum DocumentStatusType: String, CustomStringConvertible, Codable {
        case initialized = "INITIALIZED"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The resource state of the document. Note that only ACTIVE and RECYCLED are supported.
        public let resourceState: ResourceStateType?
        /// The ID of the document.
        public let documentId: String
        /// The name of the document.
        public let name: String?

        public init(parentFolderId: String? = nil, authenticationToken: String? = nil, resourceState: ResourceStateType? = nil, documentId: String, name: String? = nil) {
            self.parentFolderId = parentFolderId
            self.authenticationToken = authenticationToken
            self.resourceState = resourceState
            self.documentId = documentId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case parentFolderId = "ParentFolderId"
            case authenticationToken = "Authentication"
            case resourceState = "ResourceState"
            case documentId = "DocumentId"
            case name = "Name"
        }
    }

    public enum RolePermissionType: String, CustomStringConvertible, Codable {
        case direct = "DIRECT"
        case inherited = "INHERITED"
        public var description: String { return self.rawValue }
    }

    public struct AddResourcePermissionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareResults", required: false, type: .list)
        ]
        /// The share results.
        public let shareResults: [ShareResult]?

        public init(shareResults: [ShareResult]? = nil) {
            self.shareResults = shareResults
        }

        private enum CodingKeys: String, CodingKey {
            case shareResults = "ShareResults"
        }
    }

    public struct InitiateDocumentVersionUploadRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ContentModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "ParentFolderId", required: true, type: .string), 
            AWSShapeMember(label: "ContentCreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "DocumentSizeInBytes", required: false, type: .long)
        ]
        /// The ID of the document.
        public let id: String?
        /// The time stamp when the content of the document was modified.
        public let contentModifiedTimestamp: TimeStamp?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The name of the document.
        public let name: String?
        /// The content type of the document.
        public let contentType: String?
        /// The ID of the parent folder.
        public let parentFolderId: String
        /// The time stamp when the content of the document was originally created.
        public let contentCreatedTimestamp: TimeStamp?
        /// The size of the document, in bytes.
        public let documentSizeInBytes: Int64?

        public init(id: String? = nil, contentModifiedTimestamp: TimeStamp? = nil, authenticationToken: String? = nil, name: String? = nil, contentType: String? = nil, parentFolderId: String, contentCreatedTimestamp: TimeStamp? = nil, documentSizeInBytes: Int64? = nil) {
            self.id = id
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.authenticationToken = authenticationToken
            self.name = name
            self.contentType = contentType
            self.parentFolderId = parentFolderId
            self.contentCreatedTimestamp = contentCreatedTimestamp
            self.documentSizeInBytes = documentSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case contentModifiedTimestamp = "ContentModifiedTimestamp"
            case authenticationToken = "Authentication"
            case name = "Name"
            case contentType = "ContentType"
            case parentFolderId = "ParentFolderId"
            case contentCreatedTimestamp = "ContentCreatedTimestamp"
            case documentSizeInBytes = "DocumentSizeInBytes"
        }
    }

    public struct FolderMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Labels", required: false, type: .list), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "LatestVersionSize", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// List of labels on the folder.
        public let labels: [String]?
        /// The resource state of the folder.
        public let resourceState: ResourceStateType?
        /// The size of the latest version of the folder metadata.
        public let latestVersionSize: Int64?
        /// The name of the folder.
        public let name: String?
        /// The size of the folder metadata.
        public let size: Int64?
        /// The unique identifier created from the subfolders and documents of the folder.
        public let signature: String?
        /// The ID of the creator.
        public let creatorId: String?
        /// The time when the folder was updated.
        public let modifiedTimestamp: TimeStamp?
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The time when the folder was created.
        public let createdTimestamp: TimeStamp?
        /// The ID of the folder.
        public let id: String?

        public init(labels: [String]? = nil, resourceState: ResourceStateType? = nil, latestVersionSize: Int64? = nil, name: String? = nil, size: Int64? = nil, signature: String? = nil, creatorId: String? = nil, modifiedTimestamp: TimeStamp? = nil, parentFolderId: String? = nil, createdTimestamp: TimeStamp? = nil, id: String? = nil) {
            self.labels = labels
            self.resourceState = resourceState
            self.latestVersionSize = latestVersionSize
            self.name = name
            self.size = size
            self.signature = signature
            self.creatorId = creatorId
            self.modifiedTimestamp = modifiedTimestamp
            self.parentFolderId = parentFolderId
            self.createdTimestamp = createdTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "Labels"
            case resourceState = "ResourceState"
            case latestVersionSize = "LatestVersionSize"
            case name = "Name"
            case size = "Size"
            case signature = "Signature"
            case creatorId = "CreatorId"
            case modifiedTimestamp = "ModifiedTimestamp"
            case parentFolderId = "ParentFolderId"
            case createdTimestamp = "CreatedTimestamp"
            case id = "Id"
        }
    }

    public struct DescribeActivitiesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "UserActivities", required: false, type: .list)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// The list of activities for the specified user and time period.
        public let userActivities: [Activity]?

        public init(marker: String? = nil, userActivities: [Activity]? = nil) {
            self.marker = marker
            self.userActivities = userActivities
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case userActivities = "UserActivities"
        }
    }

    public struct DocumentVersionMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Source", required: false, type: .map), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "Thumbnail", required: false, type: .map), 
            AWSShapeMember(label: "ContentCreatedTimestamp", required: false, type: .timestamp)
        ]
        /// The time stamp when the content of the document was modified.
        public let contentModifiedTimestamp: TimeStamp?
        /// The signature of the document.
        public let signature: String?
        /// The time stamp when the document was last uploaded.
        public let modifiedTimestamp: TimeStamp?
        /// The source of the document.
        public let source: [DocumentSourceType: String]?
        /// The time stamp when the document was first uploaded.
        public let createdTimestamp: TimeStamp?
        /// The ID of the version.
        public let id: String?
        /// The status of the document.
        public let status: DocumentStatusType?
        /// The name of the version.
        public let name: String?
        /// The size of the document, in bytes.
        public let size: Int64?
        /// The content type of the document.
        public let contentType: String?
        /// The ID of the creator.
        public let creatorId: String?
        /// The thumbnail of the document.
        public let thumbnail: [DocumentThumbnailType: String]?
        /// The time stamp when the content of the document was originally created.
        public let contentCreatedTimestamp: TimeStamp?

        public init(contentModifiedTimestamp: TimeStamp? = nil, signature: String? = nil, modifiedTimestamp: TimeStamp? = nil, source: [DocumentSourceType: String]? = nil, createdTimestamp: TimeStamp? = nil, id: String? = nil, status: DocumentStatusType? = nil, name: String? = nil, size: Int64? = nil, contentType: String? = nil, creatorId: String? = nil, thumbnail: [DocumentThumbnailType: String]? = nil, contentCreatedTimestamp: TimeStamp? = nil) {
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.signature = signature
            self.modifiedTimestamp = modifiedTimestamp
            self.source = source
            self.createdTimestamp = createdTimestamp
            self.id = id
            self.status = status
            self.name = name
            self.size = size
            self.contentType = contentType
            self.creatorId = creatorId
            self.thumbnail = thumbnail
            self.contentCreatedTimestamp = contentCreatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case contentModifiedTimestamp = "ContentModifiedTimestamp"
            case signature = "Signature"
            case modifiedTimestamp = "ModifiedTimestamp"
            case source = "Source"
            case createdTimestamp = "CreatedTimestamp"
            case id = "Id"
            case status = "Status"
            case name = "Name"
            case size = "Size"
            case contentType = "ContentType"
            case creatorId = "CreatorId"
            case thumbnail = "Thumbnail"
            case contentCreatedTimestamp = "ContentCreatedTimestamp"
        }
    }

    public struct UserStorageMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageRule", required: false, type: .structure), 
            AWSShapeMember(label: "StorageUtilizedInBytes", required: false, type: .long)
        ]
        /// The storage for a user.
        public let storageRule: StorageRuleType?
        /// The amount of storage utilized, in bytes.
        public let storageUtilizedInBytes: Int64?

        public init(storageRule: StorageRuleType? = nil, storageUtilizedInBytes: Int64? = nil) {
            self.storageRule = storageRule
            self.storageUtilizedInBytes = storageUtilizedInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case storageRule = "StorageRule"
            case storageUtilizedInBytes = "StorageUtilizedInBytes"
        }
    }

    public struct UserMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The email address of the user.
        public let emailAddress: String?
        /// The surname of the user.
        public let surname: String?
        /// The username of the user.
        public let username: String?
        /// The given name of the user before a rename operation.
        public let givenName: String?
        /// The ID of the user.
        public let id: String?

        public init(emailAddress: String? = nil, surname: String? = nil, username: String? = nil, givenName: String? = nil, id: String? = nil) {
            self.emailAddress = emailAddress
            self.surname = surname
            self.username = username
            self.givenName = givenName
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "EmailAddress"
            case surname = "Surname"
            case username = "Username"
            case givenName = "GivenName"
            case id = "Id"
        }
    }

    public struct GetDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// Set this to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String

        public init(includeCustomMetadata: Bool? = nil, authenticationToken: String? = nil, documentId: String) {
            self.includeCustomMetadata = includeCustomMetadata
            self.authenticationToken = authenticationToken
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case includeCustomMetadata = "includeCustomMetadata"
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
        }
    }

    public struct GetFolderPathResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .structure)
        ]
        /// The path information.
        public let path: ResourcePath?

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case group = "GROUP"
        case invite = "INVITE"
        case anonymous = "ANONYMOUS"
        case organization = "ORGANIZATION"
        public var description: String { return self.rawValue }
    }

    public struct GetFolderResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The metadata of the folder.
        public let metadata: FolderMetadata?
        /// The custom metadata on the folder.
        public let customMetadata: [String: String]?

        public init(metadata: FolderMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public struct CreateCustomMetadataResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeRootFoldersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String
        /// The maximum number of items to return.
        public let limit: Int32?

        public init(marker: String? = nil, authenticationToken: String, limit: Int32? = nil) {
            self.marker = marker
            self.authenticationToken = authenticationToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case authenticationToken = "Authentication"
            case limit = "limit"
        }
    }

    public enum DocumentSourceType: String, CustomStringConvertible, Codable {
        case original = "ORIGINAL"
        case with_comments = "WITH_COMMENTS"
        public var description: String { return self.rawValue }
    }

    public enum DocumentVersionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case folder = "FOLDER"
        case document = "DOCUMENT"
        public var description: String { return self.rawValue }
    }

    public struct Activity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginalParent", required: false, type: .structure), 
            AWSShapeMember(label: "CommentMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "TimeStamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Participants", required: false, type: .structure), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The original parent of the resource. This is an optional field and is filled for move activities.
        public let originalParent: ResourceMetadata?
        /// Metadata of the commenting activity. This is an optional field and is filled for commenting activities.
        public let commentMetadata: CommentMetadata?
        /// The metadata of the resource involved in the user action.
        public let resourceMetadata: ResourceMetadata?
        /// The user who performed the action.
        public let initiator: UserMetadata?
        /// The timestamp when the action was performed.
        public let timeStamp: TimeStamp?
        /// The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.
        public let participants: Participants?
        /// The ID of the organization.
        public let organizationId: String?
        /// The activity type.
        public let `type`: ActivityType?

        public init(originalParent: ResourceMetadata? = nil, commentMetadata: CommentMetadata? = nil, resourceMetadata: ResourceMetadata? = nil, initiator: UserMetadata? = nil, timeStamp: TimeStamp? = nil, participants: Participants? = nil, organizationId: String? = nil, type: ActivityType? = nil) {
            self.originalParent = originalParent
            self.commentMetadata = commentMetadata
            self.resourceMetadata = resourceMetadata
            self.initiator = initiator
            self.timeStamp = timeStamp
            self.participants = participants
            self.organizationId = organizationId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case originalParent = "OriginalParent"
            case commentMetadata = "CommentMetadata"
            case resourceMetadata = "ResourceMetadata"
            case initiator = "Initiator"
            case timeStamp = "TimeStamp"
            case participants = "Participants"
            case organizationId = "OrganizationId"
            case `type` = "Type"
        }
    }

    public struct CreateUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "Surname", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "StorageRule", required: false, type: .structure)
        ]
        /// The email address of the user.
        public let emailAddress: String?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The given name of the user.
        public let givenName: String
        /// The login name of the user.
        public let username: String
        /// The surname of the user.
        public let surname: String
        /// The ID of the organization.
        public let organizationId: String?
        /// The password of the user.
        public let password: String
        /// The amount of storage for the user.
        public let storageRule: StorageRuleType?

        public init(emailAddress: String? = nil, timeZoneId: String? = nil, authenticationToken: String? = nil, givenName: String, username: String, surname: String, organizationId: String? = nil, password: String, storageRule: StorageRuleType? = nil) {
            self.emailAddress = emailAddress
            self.timeZoneId = timeZoneId
            self.authenticationToken = authenticationToken
            self.givenName = givenName
            self.username = username
            self.surname = surname
            self.organizationId = organizationId
            self.password = password
            self.storageRule = storageRule
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "EmailAddress"
            case timeZoneId = "TimeZoneId"
            case authenticationToken = "Authentication"
            case givenName = "GivenName"
            case username = "Username"
            case surname = "Surname"
            case organizationId = "OrganizationId"
            case password = "Password"
            case storageRule = "StorageRule"
        }
    }

    public struct ActivateUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct GetFolderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// Set to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(includeCustomMetadata: Bool? = nil, authenticationToken: String? = nil, folderId: String) {
            self.includeCustomMetadata = includeCustomMetadata
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case includeCustomMetadata = "includeCustomMetadata"
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public struct ResourceMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "OriginalName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The parent ID of the resource before a rename operation.
        public let parentId: String?
        /// The original name of the resource prior to a rename operation.
        public let originalName: String?
        /// The name of the resource.
        public let name: String?
        /// The version ID of the resource. This is an optional field and is filled for action on document version.
        public let versionId: String?
        /// The owner of the resource.
        public let owner: UserMetadata?
        /// The type of resource.
        public let `type`: ResourceType?
        /// The ID of the resource.
        public let id: String?

        public init(parentId: String? = nil, originalName: String? = nil, name: String? = nil, versionId: String? = nil, owner: UserMetadata? = nil, type: ResourceType? = nil, id: String? = nil) {
            self.parentId = parentId
            self.originalName = originalName
            self.name = name
            self.versionId = versionId
            self.owner = owner
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case parentId = "ParentId"
            case originalName = "OriginalName"
            case name = "Name"
            case versionId = "VersionId"
            case owner = "Owner"
            case `type` = "Type"
            case id = "Id"
        }
    }

    public struct GetDocumentResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The metadata details of the document.
        public let metadata: DocumentMetadata?
        /// The custom metadata on the document.
        public let customMetadata: [String: String]?

        public init(metadata: DocumentMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public struct DescribeCommentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// The ID of the document version.
        public let versionId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The ID of the document.
        public let documentId: String

        public init(versionId: String, authenticationToken: String? = nil, limit: Int32? = nil, marker: String? = nil, documentId: String) {
            self.versionId = versionId
            self.authenticationToken = authenticationToken
            self.limit = limit
            self.marker = marker
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case authenticationToken = "Authentication"
            case limit = "limit"
            case marker = "marker"
            case documentId = "DocumentId"
        }
    }

    public enum OrderType: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct AddResourcePermissionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Principals", required: true, type: .list)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The users, groups, or organization being granted permission.
        public let principals: [SharePrincipal]

        public init(resourceId: String, authenticationToken: String? = nil, principals: [SharePrincipal]) {
            self.resourceId = resourceId
            self.authenticationToken = authenticationToken
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case authenticationToken = "Authentication"
            case principals = "Principals"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

    public struct Comment: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Contributor", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "CommentId", required: true, type: .string), 
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "Visibility", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "RecipientId", required: false, type: .string)
        ]
        /// The details of the user who made the comment.
        public let contributor: User?
        /// The status of the comment.
        public let status: CommentStatusType?
        /// The ID of the parent comment.
        public let parentId: String?
        /// The ID of the comment.
        public let commentId: String
        /// The ID of the root comment in the thread.
        public let threadId: String?
        /// The text of the comment.
        public let text: String?
        /// The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.
        public let visibility: CommentVisibilityType?
        /// The time that the comment was created.
        public let createdTimestamp: TimeStamp?
        /// If the comment is a reply to another user's comment, this field contains the user ID of the user being replied to.
        public let recipientId: String?

        public init(contributor: User? = nil, status: CommentStatusType? = nil, parentId: String? = nil, commentId: String, threadId: String? = nil, text: String? = nil, visibility: CommentVisibilityType? = nil, createdTimestamp: TimeStamp? = nil, recipientId: String? = nil) {
            self.contributor = contributor
            self.status = status
            self.parentId = parentId
            self.commentId = commentId
            self.threadId = threadId
            self.text = text
            self.visibility = visibility
            self.createdTimestamp = createdTimestamp
            self.recipientId = recipientId
        }

        private enum CodingKeys: String, CodingKey {
            case contributor = "Contributor"
            case status = "Status"
            case parentId = "ParentId"
            case commentId = "CommentId"
            case threadId = "ThreadId"
            case text = "Text"
            case visibility = "Visibility"
            case createdTimestamp = "CreatedTimestamp"
            case recipientId = "RecipientId"
        }
    }

    public struct CreateNotificationSubscriptionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscription", required: false, type: .structure)
        ]
        /// The subscription.
        public let subscription: Subscription?

        public init(subscription: Subscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "Subscription"
        }
    }

    public struct UploadMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadUrl", required: false, type: .string), 
            AWSShapeMember(label: "SignedHeaders", required: false, type: .map)
        ]
        /// The URL of the upload.
        public let uploadUrl: String?
        /// The signed headers.
        public let signedHeaders: [String: String]?

        public init(uploadUrl: String? = nil, signedHeaders: [String: String]? = nil) {
            self.uploadUrl = uploadUrl
            self.signedHeaders = signedHeaders
        }

        private enum CodingKeys: String, CodingKey {
            case uploadUrl = "UploadUrl"
            case signedHeaders = "SignedHeaders"
        }
    }

    public struct UpdateFolderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The ID of the folder.
        public let folderId: String
        /// The resource state of the folder. Note that only ACTIVE and RECYCLED are accepted values from the API.
        public let resourceState: ResourceStateType?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The name of the folder.
        public let name: String?

        public init(parentFolderId: String? = nil, folderId: String, resourceState: ResourceStateType? = nil, authenticationToken: String? = nil, name: String? = nil) {
            self.parentFolderId = parentFolderId
            self.folderId = folderId
            self.resourceState = resourceState
            self.authenticationToken = authenticationToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case parentFolderId = "ParentFolderId"
            case folderId = "FolderId"
            case resourceState = "ResourceState"
            case authenticationToken = "Authentication"
            case name = "Name"
        }
    }

    public struct DescribeNotificationSubscriptionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The ID of the organization.
        public let organizationId: String
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The maximum number of items to return with this call.
        public let limit: Int32?

        public init(organizationId: String, marker: String? = nil, limit: Int32? = nil) {
            self.organizationId = organizationId
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case marker = "marker"
            case limit = "limit"
        }
    }

    public enum LocaleType: String, CustomStringConvertible, Codable {
        case en = "en"
        case fr = "fr"
        case ko = "ko"
        case de = "de"
        case es = "es"
        case ja = "ja"
        case ru = "ru"
        case zh_cn = "zh_CN"
        case zh_tw = "zh_TW"
        case pt_br = "pt_BR"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public struct CreateCustomMetadataRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionid"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "CustomMetadata", required: true, type: .map)
        ]
        /// The ID of the version, if the custom metadata is being added to a document version.
        public let versionId: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// Custom metadata in the form of name-value pairs.
        public let customMetadata: [String: String]

        public init(versionId: String? = nil, authenticationToken: String? = nil, resourceId: String, customMetadata: [String: String]) {
            self.versionId = versionId
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionid"
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case customMetadata = "CustomMetadata"
        }
    }

    public struct Participants: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// The list of users.
        public let users: [UserMetadata]?
        /// The list of user groups.
        public let groups: [GroupMetadata]?

        public init(users: [UserMetadata]? = nil, groups: [GroupMetadata]? = nil) {
            self.users = users
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case groups = "Groups"
        }
    }

    public struct RemoveAllResourcePermissionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(resourceId: String, authenticationToken: String? = nil) {
            self.resourceId = resourceId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case authenticationToken = "Authentication"
        }
    }

    public struct UpdateUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Locale", required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "StorageRule", required: false, type: .structure)
        ]
        /// The locale of the user.
        public let locale: LocaleType?
        /// The ID of the user.
        public let userId: String
        /// The given name of the user.
        public let givenName: String?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The surname of the user.
        public let surname: String?
        /// The type of the user.
        public let `type`: UserType?
        /// The amount of storage for the user.
        public let storageRule: StorageRuleType?

        public init(locale: LocaleType? = nil, userId: String, givenName: String? = nil, timeZoneId: String? = nil, authenticationToken: String? = nil, surname: String? = nil, type: UserType? = nil, storageRule: StorageRuleType? = nil) {
            self.locale = locale
            self.userId = userId
            self.givenName = givenName
            self.timeZoneId = timeZoneId
            self.authenticationToken = authenticationToken
            self.surname = surname
            self.`type` = `type`
            self.storageRule = storageRule
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "Locale"
            case userId = "UserId"
            case givenName = "GivenName"
            case timeZoneId = "TimeZoneId"
            case authenticationToken = "Authentication"
            case surname = "Surname"
            case `type` = "Type"
            case storageRule = "StorageRule"
        }
    }

    public enum CommentVisibilityType: String, CustomStringConvertible, Codable {
        case `public` = "PUBLIC"
        case `private` = "PRIVATE"
        public var description: String { return self.rawValue }
    }

    public struct GetDocumentPathResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .structure)
        ]
        /// The path information.
        public let path: ResourcePath?

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct DeleteFolderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(authenticationToken: String? = nil, folderId: String) {
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public struct DeleteCustomMetadataRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Keys", location: .querystring(locationName: "keys"), required: false, type: .list), 
            AWSShapeMember(label: "DeleteAll", location: .querystring(locationName: "deleteAll"), required: false, type: .boolean)
        ]
        /// The ID of the version, if the custom metadata is being deleted from a document version.
        public let versionId: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource, either a document or folder.
        public let resourceId: String
        /// List of properties to remove.
        public let keys: [String]?
        /// Flag to indicate removal of all custom metadata properties from the specified resource.
        public let deleteAll: Bool?

        public init(versionId: String? = nil, authenticationToken: String? = nil, resourceId: String, keys: [String]? = nil, deleteAll: Bool? = nil) {
            self.versionId = versionId
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.keys = keys
            self.deleteAll = deleteAll
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case keys = "keys"
            case deleteAll = "deleteAll"
        }
    }

    public struct GetCurrentUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// Metadata of the user.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct CreateFolderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentFolderId", required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ID of the parent folder.
        public let parentFolderId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The name of the new folder.
        public let name: String?

        public init(parentFolderId: String, authenticationToken: String? = nil, name: String? = nil) {
            self.parentFolderId = parentFolderId
            self.authenticationToken = authenticationToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case parentFolderId = "ParentFolderId"
            case authenticationToken = "Authentication"
            case name = "Name"
        }
    }

    public struct DeleteLabelsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Labels", location: .querystring(locationName: "labels"), required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "DeleteAll", location: .querystring(locationName: "deleteAll"), required: false, type: .boolean)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// List of labels to delete from the resource.
        public let labels: [String]?
        /// The ID of the resource.
        public let resourceId: String
        /// Flag to request removal of all labels from the specified resource.
        public let deleteAll: Bool?

        public init(authenticationToken: String? = nil, labels: [String]? = nil, resourceId: String, deleteAll: Bool? = nil) {
            self.authenticationToken = authenticationToken
            self.labels = labels
            self.resourceId = resourceId
            self.deleteAll = deleteAll
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case labels = "labels"
            case resourceId = "ResourceId"
            case deleteAll = "deleteAll"
        }
    }

    public enum ResourceStateType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case restoring = "RESTORING"
        case recycling = "RECYCLING"
        case recycled = "RECYCLED"
        public var description: String { return self.rawValue }
    }

    public struct DocumentMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Labels", required: false, type: .list), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// List of labels on the document.
        public let labels: [String]?
        /// The resource state.
        public let resourceState: ResourceStateType?
        /// The ID of the creator.
        public let creatorId: String?
        /// The time when the document was updated.
        public let modifiedTimestamp: TimeStamp?
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The latest version of the document.
        public let latestVersionMetadata: DocumentVersionMetadata?
        /// The time when the document was created.
        public let createdTimestamp: TimeStamp?
        /// The ID of the document.
        public let id: String?

        public init(labels: [String]? = nil, resourceState: ResourceStateType? = nil, creatorId: String? = nil, modifiedTimestamp: TimeStamp? = nil, parentFolderId: String? = nil, latestVersionMetadata: DocumentVersionMetadata? = nil, createdTimestamp: TimeStamp? = nil, id: String? = nil) {
            self.labels = labels
            self.resourceState = resourceState
            self.creatorId = creatorId
            self.modifiedTimestamp = modifiedTimestamp
            self.parentFolderId = parentFolderId
            self.latestVersionMetadata = latestVersionMetadata
            self.createdTimestamp = createdTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "Labels"
            case resourceState = "ResourceState"
            case creatorId = "CreatorId"
            case modifiedTimestamp = "ModifiedTimestamp"
            case parentFolderId = "ParentFolderId"
            case latestVersionMetadata = "LatestVersionMetadata"
            case createdTimestamp = "CreatedTimestamp"
            case id = "Id"
        }
    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct DescribeResourcePermissionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call)
        public let marker: String?
        /// The ID of the resource.
        public let resourceId: String

        public init(authenticationToken: String? = nil, limit: Int32? = nil, marker: String? = nil, resourceId: String) {
            self.authenticationToken = authenticationToken
            self.limit = limit
            self.marker = marker
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case limit = "limit"
            case marker = "marker"
            case resourceId = "ResourceId"
        }
    }

    public enum UserStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    public enum RoleType: String, CustomStringConvertible, Codable {
        case viewer = "VIEWER"
        case contributor = "CONTRIBUTOR"
        case owner = "OWNER"
        case coowner = "COOWNER"
        public var description: String { return self.rawValue }
    }

    public struct Principal: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Roles", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The type of resource.
        public let `type`: PrincipalType?
        /// The permission information for the resource.
        public let roles: [PermissionInfo]?
        /// The ID of the resource.
        public let id: String?

        public init(type: PrincipalType? = nil, roles: [PermissionInfo]? = nil, id: String? = nil) {
            self.`type` = `type`
            self.roles = roles
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case roles = "Roles"
            case id = "Id"
        }
    }

    public struct GroupMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the group.
        public let name: String?
        /// The ID of the user group.
        public let id: String?

        public init(name: String? = nil, id: String? = nil) {
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
        }
    }

    public struct DescribeNotificationSubscriptionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The subscriptions.
        public let subscriptions: [Subscription]?

        public init(marker: String? = nil, subscriptions: [Subscription]? = nil) {
            self.marker = marker
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case subscriptions = "Subscriptions"
        }
    }

    public enum UserFilterType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case active_pending = "ACTIVE_PENDING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDocumentVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// The version ID of the document.
        public let versionId: String
        /// The status of the version.
        public let versionStatus: DocumentVersionStatus?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String

        public init(versionId: String, versionStatus: DocumentVersionStatus? = nil, authenticationToken: String? = nil, documentId: String) {
            self.versionId = versionId
            self.versionStatus = versionStatus
            self.authenticationToken = authenticationToken
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case versionStatus = "VersionStatus"
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
        }
    }

    public enum ShareStatusType: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case failure = "FAILURE"
        public var description: String { return self.rawValue }
    }

    public enum FolderContentType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case document = "DOCUMENT"
        case folder = "FOLDER"
        public var description: String { return self.rawValue }
    }

    public struct GetDocumentPathRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// A comma-separated list of values. Specify NAME to include the names of the parent folders.
        public let fields: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The maximum number of levels in the hierarchy to return.
        public let limit: Int32?
        /// This value is not supported.
        public let marker: String?
        /// The ID of the document.
        public let documentId: String

        public init(fields: String? = nil, authenticationToken: String? = nil, limit: Int32? = nil, marker: String? = nil, documentId: String) {
            self.fields = fields
            self.authenticationToken = authenticationToken
            self.limit = limit
            self.marker = marker
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case fields = "fields"
            case authenticationToken = "Authentication"
            case limit = "limit"
            case marker = "marker"
            case documentId = "DocumentId"
        }
    }

    public struct RemoveResourcePermissionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "PrincipalId", location: .uri(locationName: "PrincipalId"), required: true, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The principal type of the resource.
        public let principalType: PrincipalType?
        /// The principal ID of the resource.
        public let principalId: String
        /// The ID of the resource.
        public let resourceId: String

        public init(authenticationToken: String? = nil, principalType: PrincipalType? = nil, principalId: String, resourceId: String) {
            self.authenticationToken = authenticationToken
            self.principalType = principalType
            self.principalId = principalId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case principalType = "type"
            case principalId = "PrincipalId"
            case resourceId = "ResourceId"
        }
    }

    public struct CreateCommentResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .structure)
        ]
        /// The comment that has been created.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
        }
    }

    public struct CreateUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct DeleteCommentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "CommentId", location: .uri(locationName: "CommentId"), required: true, type: .string)
        ]
        /// The ID of the document version.
        public let versionId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String
        /// The ID of the comment.
        public let commentId: String

        public init(versionId: String, authenticationToken: String? = nil, documentId: String, commentId: String) {
            self.versionId = versionId
            self.authenticationToken = authenticationToken
            self.documentId = documentId
            self.commentId = commentId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
            case commentId = "CommentId"
        }
    }

    public enum ResourceSortType: String, CustomStringConvertible, Codable {
        case date = "DATE"
        case name = "NAME"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDocumentVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersions", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The document versions.
        public let documentVersions: [DocumentVersionMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(documentVersions: [DocumentVersionMetadata]? = nil, marker: String? = nil) {
            self.documentVersions = documentVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersions = "DocumentVersions"
            case marker = "Marker"
        }
    }

    public struct User: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "RecycleBinFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "Locale", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "Storage", required: false, type: .structure), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "RootFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The email address of the user.
        public let emailAddress: String?
        /// The ID of the recycle bin folder.
        public let recycleBinFolderId: String?
        /// The login name of the user.
        public let username: String?
        /// The time when the user was modified.
        public let modifiedTimestamp: TimeStamp?
        /// The ID of the organization.
        public let organizationId: String?
        /// The time when the user was created.
        public let createdTimestamp: TimeStamp?
        /// The ID of the user.
        public let id: String?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The locale of the user.
        public let locale: LocaleType?
        /// The status of the user.
        public let status: UserStatusType?
        /// The given name of the user.
        public let givenName: String?
        /// The storage for the user.
        public let storage: UserStorageMetadata?
        /// The surname of the user.
        public let surname: String?
        /// The ID of the root folder.
        public let rootFolderId: String?
        /// The type of user.
        public let `type`: UserType?

        public init(emailAddress: String? = nil, recycleBinFolderId: String? = nil, username: String? = nil, modifiedTimestamp: TimeStamp? = nil, organizationId: String? = nil, createdTimestamp: TimeStamp? = nil, id: String? = nil, timeZoneId: String? = nil, locale: LocaleType? = nil, status: UserStatusType? = nil, givenName: String? = nil, storage: UserStorageMetadata? = nil, surname: String? = nil, rootFolderId: String? = nil, type: UserType? = nil) {
            self.emailAddress = emailAddress
            self.recycleBinFolderId = recycleBinFolderId
            self.username = username
            self.modifiedTimestamp = modifiedTimestamp
            self.organizationId = organizationId
            self.createdTimestamp = createdTimestamp
            self.id = id
            self.timeZoneId = timeZoneId
            self.locale = locale
            self.status = status
            self.givenName = givenName
            self.storage = storage
            self.surname = surname
            self.rootFolderId = rootFolderId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "EmailAddress"
            case recycleBinFolderId = "RecycleBinFolderId"
            case username = "Username"
            case modifiedTimestamp = "ModifiedTimestamp"
            case organizationId = "OrganizationId"
            case createdTimestamp = "CreatedTimestamp"
            case id = "Id"
            case timeZoneId = "TimeZoneId"
            case locale = "Locale"
            case status = "Status"
            case givenName = "GivenName"
            case storage = "Storage"
            case surname = "Surname"
            case rootFolderId = "RootFolderId"
            case `type` = "Type"
        }
    }

    public struct StorageRuleType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageType", required: false, type: .enum), 
            AWSShapeMember(label: "StorageAllocatedInBytes", required: false, type: .long)
        ]
        /// The type of storage.
        public let storageType: StorageType?
        /// The amount of storage allocated, in bytes.
        public let storageAllocatedInBytes: Int64?

        public init(storageType: StorageType? = nil, storageAllocatedInBytes: Int64? = nil) {
            self.storageType = storageType
            self.storageAllocatedInBytes = storageAllocatedInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case storageType = "StorageType"
            case storageAllocatedInBytes = "StorageAllocatedInBytes"
        }
    }

    public struct SharePrincipal: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: true, type: .enum), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The role of the recipient.
        public let role: RoleType
        /// The type of the recipient.
        public let `type`: PrincipalType
        /// The ID of the recipient.
        public let id: String

        public init(role: RoleType, type: PrincipalType, id: String) {
            self.role = role
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case `type` = "Type"
            case id = "Id"
        }
    }

    public enum UserType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case admin = "ADMIN"
        public var description: String { return self.rawValue }
    }

    public struct CreateFolderResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure)
        ]
        /// The metadata of the folder.
        public let metadata: FolderMetadata?

        public init(metadata: FolderMetadata? = nil) {
            self.metadata = metadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
        }
    }

    public struct DeactivateUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

    public struct GetFolderPathRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// A comma-separated list of values. Specify "NAME" to include the names of the parent folders.
        public let fields: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String
        /// The maximum number of levels in the hierarchy to return.
        public let limit: Int32?
        /// This value is not supported.
        public let marker: String?

        public init(fields: String? = nil, authenticationToken: String? = nil, folderId: String, limit: Int32? = nil, marker: String? = nil) {
            self.fields = fields
            self.authenticationToken = authenticationToken
            self.folderId = folderId
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case fields = "fields"
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
            case limit = "limit"
            case marker = "marker"
        }
    }

    public struct ResourcePath: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Components", required: false, type: .list)
        ]
        /// The components of the resource path.
        public let components: [ResourcePathComponent]?

        public init(components: [ResourcePathComponent]? = nil) {
            self.components = components
        }

        private enum CodingKeys: String, CodingKey {
            case components = "Components"
        }
    }

    public enum SubscriptionProtocolType: String, CustomStringConvertible, Codable {
        case https = "HTTPS"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFolderContentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(authenticationToken: String? = nil, folderId: String) {
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public struct DeleteCustomMetadataResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeUsersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserIds", location: .querystring(locationName: "userIds"), required: false, type: .string), 
            AWSShapeMember(label: "Sort", location: .querystring(locationName: "sort"), required: false, type: .enum), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Query", location: .querystring(locationName: "query"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string), 
            AWSShapeMember(label: "Order", location: .querystring(locationName: "order"), required: false, type: .enum), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .enum)
        ]
        /// A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.
        public let fields: String?
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The IDs of the users.
        public let userIds: String?
        /// The sorting criteria.
        public let sort: UserSortType?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// A query to filter users by user name.
        public let query: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The ID of the organization.
        public let organizationId: String?
        /// The order for the results.
        public let order: OrderType?
        /// The state of the users. Specify "ALL" to include inactive users.
        public let include: UserFilterType?

        public init(fields: String? = nil, authenticationToken: String? = nil, userIds: String? = nil, sort: UserSortType? = nil, marker: String? = nil, query: String? = nil, limit: Int32? = nil, organizationId: String? = nil, order: OrderType? = nil, include: UserFilterType? = nil) {
            self.fields = fields
            self.authenticationToken = authenticationToken
            self.userIds = userIds
            self.sort = sort
            self.marker = marker
            self.query = query
            self.limit = limit
            self.organizationId = organizationId
            self.order = order
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case fields = "fields"
            case authenticationToken = "Authentication"
            case userIds = "userIds"
            case sort = "sort"
            case marker = "marker"
            case query = "query"
            case limit = "limit"
            case organizationId = "organizationId"
            case order = "order"
            case include = "include"
        }
    }

    public struct InitiateDocumentVersionUploadResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "UploadMetadata", required: false, type: .structure)
        ]
        /// The document metadata.
        public let metadata: DocumentMetadata?
        /// The upload metadata.
        public let uploadMetadata: UploadMetadata?

        public init(metadata: DocumentMetadata? = nil, uploadMetadata: UploadMetadata? = nil) {
            self.metadata = metadata
            self.uploadMetadata = uploadMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case uploadMetadata = "UploadMetadata"
        }
    }

    public struct DescribeFolderContentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Sort", location: .querystring(locationName: "sort"), required: false, type: .enum), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Order", location: .querystring(locationName: "order"), required: false, type: .enum), 
            AWSShapeMember(label: "Type", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The sorting criteria.
        public let sort: ResourceSortType?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The ID of the folder.
        public let folderId: String
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The order for the contents of the folder.
        public let order: OrderType?
        /// The type of items.
        public let `type`: FolderContentType?
        /// The contents to include. Specify "INITIALIZED" to include initialized documents.
        public let include: String?

        public init(authenticationToken: String? = nil, sort: ResourceSortType? = nil, marker: String? = nil, folderId: String, limit: Int32? = nil, order: OrderType? = nil, type: FolderContentType? = nil, include: String? = nil) {
            self.authenticationToken = authenticationToken
            self.sort = sort
            self.marker = marker
            self.folderId = folderId
            self.limit = limit
            self.order = order
            self.`type` = `type`
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case sort = "sort"
            case marker = "marker"
            case folderId = "FolderId"
            case limit = "limit"
            case order = "order"
            case `type` = "type"
            case include = "include"
        }
    }

    public enum UserSortType: String, CustomStringConvertible, Codable {
        case user_name = "USER_NAME"
        case full_name = "FULL_NAME"
        case storage_limit = "STORAGE_LIMIT"
        case user_status = "USER_STATUS"
        case storage_used = "STORAGE_USED"
        public var description: String { return self.rawValue }
    }

    public struct AbortDocumentVersionUploadRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// The ID of the version.
        public let versionId: String
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String

        public init(versionId: String, authenticationToken: String? = nil, documentId: String) {
            self.versionId = versionId
            self.authenticationToken = authenticationToken
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
        }
    }

    public struct GetDocumentVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The version metadata.
        public let metadata: DocumentVersionMetadata?
        /// The custom metadata on the document version.
        public let customMetadata: [String: String]?

        public init(metadata: DocumentVersionMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public struct DeleteNotificationSubscriptionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionId", location: .uri(locationName: "SubscriptionId"), required: true, type: .string)
        ]
        /// The ID of the organization.
        public let organizationId: String
        /// The ID of the subscription.
        public let subscriptionId: String

        public init(organizationId: String, subscriptionId: String) {
            self.organizationId = organizationId
            self.subscriptionId = subscriptionId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case subscriptionId = "SubscriptionId"
        }
    }

    public struct DeleteLabelsResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeCommentsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comments", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of comments for the specified document version.
        public let comments: [Comment]?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?

        public init(comments: [Comment]? = nil, marker: String? = nil) {
            self.comments = comments
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case comments = "Comments"
            case marker = "Marker"
        }
    }

    public enum StorageType: String, CustomStringConvertible, Codable {
        case unlimited = "UNLIMITED"
        case quota = "QUOTA"
        public var description: String { return self.rawValue }
    }

    public struct GetCurrentUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token.
        public let authenticationToken: String

        public init(authenticationToken: String) {
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
        }
    }

    public struct DescribeRootFoldersResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Folders", required: false, type: .list)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// The user's special folders.
        public let folders: [FolderMetadata]?

        public init(marker: String? = nil, folders: [FolderMetadata]? = nil) {
            self.marker = marker
            self.folders = folders
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case folders = "Folders"
        }
    }

    public struct ActivateUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. This field should not be set when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

}