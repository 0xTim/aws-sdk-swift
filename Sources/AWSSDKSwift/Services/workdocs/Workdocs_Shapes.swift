// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Workdocs {

    public struct DescribeDocumentVersionsRequest: Serializable, Initializable {
        /// Specify "SOURCE" to include initialized versions and a URL for the source document.
        var fields: String? = nil
        /// The maximum number of versions to return with this call.
        var limit: Int32? = nil
        /// The marker for the next set of results. (You received this marker from a previous call.)
        var marker: String? = nil
        /// The ID of the document.
        var documentId: String = ""
        /// A comma-separated list of values. Specify "INITIALIZED" to include incomplete versions.
        var include: String? = nil

        public init() {}

        public init(fields: String? = nil, limit: Int32? = nil, marker: String? = nil, documentId: String, include: String? = nil) {
            self.fields = fields
            self.limit = limit
            self.marker = marker
            self.documentId = documentId
            self.include = include
        }

    }

    public struct CreateNotificationSubscriptionRequest: Serializable, Initializable {
        /// The ID of the organization.
        var organizationId: String = ""
        /// The notification type.
        var subscriptionType: String = ""
        /// The protocol to use. The supported value is https, which delivers JSON-encoded messasges using HTTPS POST.
        var `protocol`: String = ""
        /// The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with "https://".
        var endpoint: String = ""

        public init() {}

        public init(organizationId: String, subscriptionType: String, protocol: String, endpoint: String) {
            self.organizationId = organizationId
            self.subscriptionType = subscriptionType
            self.`protocol` = `protocol`
            self.endpoint = endpoint
        }

    }

    public struct ShareResult: Serializable, Initializable {
        /// The role.
        var role: String? = nil
        /// The status.
        var status: String? = nil
        /// The ID of the principal.
        var principalId: String? = nil
        /// The status message.
        var statusMessage: String? = nil
        /// The ID of the resource that was shared.
        var shareId: String? = nil

        public init() {}

        public init(role: String? = nil, status: String? = nil, principalId: String? = nil, statusMessage: String? = nil, shareId: String? = nil) {
            self.role = role
            self.status = status
            self.principalId = principalId
            self.statusMessage = statusMessage
            self.shareId = shareId
        }

    }

    public struct GetDocumentVersionRequest: Serializable, Initializable {
        /// A comma-separated list of values. Specify "SOURCE" to include a URL for the source document.
        var fields: String? = nil
        /// The version ID of the document.
        var versionId: String = ""
        /// The ID of the document.
        var documentId: String = ""

        public init() {}

        public init(fields: String? = nil, versionId: String, documentId: String) {
            self.fields = fields
            self.versionId = versionId
            self.documentId = documentId
        }

    }

    public struct PermissionInfo: Serializable, Initializable {
        /// The type of permissions.
        var type: String? = nil
        /// The role of the user.
        var role: String? = nil

        public init() {}

        public init(type: String? = nil, role: String? = nil) {
            self.type = type
            self.role = role
        }

    }

    public struct UpdateUserResponse: Serializable, Initializable {
        /// The user information.
        var user: User? = nil

        public init() {}

        public init(user: User? = nil) {
            self.user = user
        }

    }

    public struct DescribeUsersResponse: Serializable, Initializable {
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        var marker: String? = nil
        /// The users.
        var users: [User]? = nil
        /// The total number of users included in the results.
        var totalNumberOfUsers: Int64? = nil

        public init() {}

        public init(marker: String? = nil, users: [User]? = nil, totalNumberOfUsers: Int64? = nil) {
            self.marker = marker
            self.users = users
            self.totalNumberOfUsers = totalNumberOfUsers
        }

    }

    public struct Subscription: Serializable, Initializable {
        /// The ID of the subscription.
        var subscriptionId: String? = nil
        /// The endpoint of the subscription.
        var endPoint: String? = nil
        /// The protocol of the subscription.
        var `protocol`: String? = nil

        public init() {}

        public init(subscriptionId: String? = nil, endPoint: String? = nil, protocol: String? = nil) {
            self.subscriptionId = subscriptionId
            self.endPoint = endPoint
            self.`protocol` = `protocol`
        }

    }

    public struct DescribeFolderContentsResponse: Serializable, Initializable {
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        var marker: String? = nil
        /// The documents in the specified folder.
        var documents: [DocumentMetadata]? = nil
        /// The sub-folders in the specified folder.
        var folders: [FolderMetadata]? = nil

        public init() {}

        public init(marker: String? = nil, documents: [DocumentMetadata]? = nil, folders: [FolderMetadata]? = nil) {
            self.marker = marker
            self.documents = documents
            self.folders = folders
        }

    }

    public struct ResourcePathComponent: Serializable, Initializable {
        /// The name of the resource path.
        var name: String? = nil
        /// The ID of the resource path.
        var id: String? = nil

        public init() {}

        public init(name: String? = nil, id: String? = nil) {
            self.name = name
            self.id = id
        }

    }

    public struct DescribeResourcePermissionsResponse: Serializable, Initializable {
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        var marker: String? = nil
        /// The principals.
        var principals: [Principal]? = nil

        public init() {}

        public init(marker: String? = nil, principals: [Principal]? = nil) {
            self.marker = marker
            self.principals = principals
        }

    }

    public struct DeleteDocumentRequest: Serializable, Initializable {
        /// The ID of the document.
        var documentId: String = ""

        public init() {}

        public init(documentId: String) {
            self.documentId = documentId
        }

    }

    public struct UpdateDocumentRequest: Serializable, Initializable {
        /// The ID of the parent folder.
        var parentFolderId: String? = nil
        /// The resource state of the document. Note that only ACTIVE and RECYCLED are supported.
        var resourceState: String? = nil
        /// The ID of the document.
        var documentId: String = ""
        /// The name of the document.
        var name: String? = nil

        public init() {}

        public init(parentFolderId: String? = nil, resourceState: String? = nil, documentId: String, name: String? = nil) {
            self.parentFolderId = parentFolderId
            self.resourceState = resourceState
            self.documentId = documentId
            self.name = name
        }

    }

    public struct GetDocumentRequest: Serializable, Initializable {
        /// The ID of the document object.
        var documentId: String = ""

        public init() {}

        public init(documentId: String) {
            self.documentId = documentId
        }

    }

    public struct InitiateDocumentVersionUploadRequest: Serializable, Initializable {
        /// The ID of the document.
        var id: String? = nil
        /// The time stamp when the content of the document was modified.
        var contentModifiedTimestamp: Date? = nil
        /// The name of the document.
        var name: String? = nil
        /// The content type of the document.
        var contentType: String? = nil
        /// The ID of the parent folder.
        var parentFolderId: String = ""
        /// The time stamp when the content of the document was originally created.
        var contentCreatedTimestamp: Date? = nil
        /// The size of the document, in bytes.
        var documentSizeInBytes: Int64? = nil

        public init() {}

        public init(id: String? = nil, contentModifiedTimestamp: Date? = nil, name: String? = nil, contentType: String? = nil, parentFolderId: String, contentCreatedTimestamp: Date? = nil, documentSizeInBytes: Int64? = nil) {
            self.id = id
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.name = name
            self.contentType = contentType
            self.parentFolderId = parentFolderId
            self.contentCreatedTimestamp = contentCreatedTimestamp
            self.documentSizeInBytes = documentSizeInBytes
        }

    }

    public struct AddResourcePermissionsResponse: Serializable, Initializable {
        /// The share results.
        var shareResults: [ShareResult]? = nil

        public init() {}

        public init(shareResults: [ShareResult]? = nil) {
            self.shareResults = shareResults
        }

    }

    public struct FolderMetadata: Serializable, Initializable {
        /// The resource state of the folder.
        var resourceState: String? = nil
        /// The unique identifier created from the subfolders and documents of the folder.
        var signature: String? = nil
        /// The name of the folder.
        var name: String? = nil
        /// The ID of the creator.
        var creatorId: String? = nil
        /// The time when the folder was updated.
        var modifiedTimestamp: Date? = nil
        /// The ID of the parent folder.
        var parentFolderId: String? = nil
        /// The time when the folder was created.
        var createdTimestamp: Date? = nil
        /// The ID of the folder.
        var id: String? = nil

        public init() {}

        public init(resourceState: String? = nil, signature: String? = nil, name: String? = nil, creatorId: String? = nil, modifiedTimestamp: Date? = nil, parentFolderId: String? = nil, createdTimestamp: Date? = nil, id: String? = nil) {
            self.resourceState = resourceState
            self.signature = signature
            self.name = name
            self.creatorId = creatorId
            self.modifiedTimestamp = modifiedTimestamp
            self.parentFolderId = parentFolderId
            self.createdTimestamp = createdTimestamp
            self.id = id
        }

    }

    public struct DocumentVersionMetadata: Serializable, Initializable {
        /// The time stamp when the content of the document was modified.
        var contentModifiedTimestamp: Date? = nil
        /// The signature of the document.
        var signature: String? = nil
        /// The time stamp when the document was last uploaded.
        var modifiedTimestamp: Date? = nil
        /// The source of the document.
        var source: [String: String]? = nil
        /// The time stamp when the document was first uploaded.
        var createdTimestamp: Date? = nil
        /// The ID of the version.
        var id: String? = nil
        /// The status of the document.
        var status: String? = nil
        /// The name of the version.
        var name: String? = nil
        /// The size of the document, in bytes.
        var size: Int64? = nil
        /// The content type of the document.
        var contentType: String? = nil
        /// The ID of the creator.
        var creatorId: String? = nil
        /// The thumbnail of the document.
        var thumbnail: [String: String]? = nil
        /// The time stamp when the content of the document was originally created.
        var contentCreatedTimestamp: Date? = nil

        public init() {}

        public init(contentModifiedTimestamp: Date? = nil, signature: String? = nil, modifiedTimestamp: Date? = nil, source: [String: String]? = nil, createdTimestamp: Date? = nil, id: String? = nil, status: String? = nil, name: String? = nil, size: Int64? = nil, contentType: String? = nil, creatorId: String? = nil, thumbnail: [String: String]? = nil, contentCreatedTimestamp: Date? = nil) {
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.signature = signature
            self.modifiedTimestamp = modifiedTimestamp
            self.source = source
            self.createdTimestamp = createdTimestamp
            self.id = id
            self.status = status
            self.name = name
            self.size = size
            self.contentType = contentType
            self.creatorId = creatorId
            self.thumbnail = thumbnail
            self.contentCreatedTimestamp = contentCreatedTimestamp
        }

    }

    public struct UserStorageMetadata: Serializable, Initializable {
        /// The storage for a user.
        var storageRule: StorageRuleType? = nil
        /// The amount of storage utilized, in bytes.
        var storageUtilizedInBytes: Int64? = nil

        public init() {}

        public init(storageRule: StorageRuleType? = nil, storageUtilizedInBytes: Int64? = nil) {
            self.storageRule = storageRule
            self.storageUtilizedInBytes = storageUtilizedInBytes
        }

    }

    public struct GetFolderPathResponse: Serializable, Initializable {
        /// The path information.
        var path: ResourcePath? = nil

        public init() {}

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

    }

    public struct GetFolderResponse: Serializable, Initializable {
        /// The metadata of the folder.
        var metadata: FolderMetadata? = nil

        public init() {}

        public init(metadata: FolderMetadata? = nil) {
            self.metadata = metadata
        }

    }

    public struct CreateUserRequest: Serializable, Initializable {
        /// The time zone ID of the user.
        var timeZoneId: String? = nil
        /// The given name of the user.
        var givenName: String = ""
        /// The login name of the user.
        var username: String = ""
        /// The surname of the user.
        var surname: String = ""
        /// The ID of the organization.
        var organizationId: String? = nil
        /// The password of the user.
        var password: String = ""
        /// The amount of storage for the user.
        var storageRule: StorageRuleType? = nil

        public init() {}

        public init(timeZoneId: String? = nil, givenName: String, username: String, surname: String, organizationId: String? = nil, password: String, storageRule: StorageRuleType? = nil) {
            self.timeZoneId = timeZoneId
            self.givenName = givenName
            self.username = username
            self.surname = surname
            self.organizationId = organizationId
            self.password = password
            self.storageRule = storageRule
        }

    }

    public struct ActivateUserResponse: Serializable, Initializable {
        /// The user information.
        var user: User? = nil

        public init() {}

        public init(user: User? = nil) {
            self.user = user
        }

    }

    public struct GetFolderRequest: Serializable, Initializable {
        /// The ID of the folder.
        var folderId: String = ""

        public init() {}

        public init(folderId: String) {
            self.folderId = folderId
        }

    }

    public struct GetDocumentResponse: Serializable, Initializable {
        /// The document object.
        var metadata: DocumentMetadata? = nil

        public init() {}

        public init(metadata: DocumentMetadata? = nil) {
            self.metadata = metadata
        }

    }

    public struct AddResourcePermissionsRequest: Serializable, Initializable {
        /// The ID of the resource.
        var resourceId: String = ""
        /// The users, groups, or organization being granted permission.
        var principals: [SharePrincipal] = []

        public init() {}

        public init(resourceId: String, principals: [SharePrincipal]) {
            self.resourceId = resourceId
            self.principals = principals
        }

    }

    public struct DeleteUserRequest: Serializable, Initializable {
        /// The ID of the user.
        var userId: String = ""

        public init() {}

        public init(userId: String) {
            self.userId = userId
        }

    }

    public struct UploadMetadata: Serializable, Initializable {
        /// The URL of the upload.
        var uploadUrl: String? = nil
        /// The signed headers.
        var signedHeaders: [String: String]? = nil

        public init() {}

        public init(uploadUrl: String? = nil, signedHeaders: [String: String]? = nil) {
            self.uploadUrl = uploadUrl
            self.signedHeaders = signedHeaders
        }

    }

    public struct CreateNotificationSubscriptionResponse: Serializable, Initializable {
        /// The subscription.
        var subscription: Subscription? = nil

        public init() {}

        public init(subscription: Subscription? = nil) {
            self.subscription = subscription
        }

    }

    public struct UpdateFolderRequest: Serializable, Initializable {
        /// The ID of the parent folder.
        var parentFolderId: String? = nil
        /// The ID of the folder.
        var folderId: String = ""
        /// The resource state of the folder. Note that only ACTIVE and RECYCLED are accepted values from the API.
        var resourceState: String? = nil
        /// The name of the folder.
        var name: String? = nil

        public init() {}

        public init(parentFolderId: String? = nil, folderId: String, resourceState: String? = nil, name: String? = nil) {
            self.parentFolderId = parentFolderId
            self.folderId = folderId
            self.resourceState = resourceState
            self.name = name
        }

    }

    public struct DescribeNotificationSubscriptionsRequest: Serializable, Initializable {
        /// The ID of the organization.
        var organizationId: String = ""
        /// The marker for the next set of results. (You received this marker from a previous call.)
        var marker: String? = nil
        /// The maximum number of items to return with this call.
        var limit: Int32? = nil

        public init() {}

        public init(organizationId: String, marker: String? = nil, limit: Int32? = nil) {
            self.organizationId = organizationId
            self.marker = marker
            self.limit = limit
        }

    }

    public struct RemoveAllResourcePermissionsRequest: Serializable, Initializable {
        /// The ID of the resource.
        var resourceId: String = ""

        public init() {}

        public init(resourceId: String) {
            self.resourceId = resourceId
        }

    }

    public struct GetDocumentPathResponse: Serializable, Initializable {
        /// The path information.
        var path: ResourcePath? = nil

        public init() {}

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

    }

    public struct UpdateUserRequest: Serializable, Initializable {
        /// The locale of the user.
        var locale: String? = nil
        /// The ID of the user.
        var userId: String = ""
        /// The given name of the user.
        var givenName: String? = nil
        /// The time zone ID of the user.
        var timeZoneId: String? = nil
        /// The surname of the user.
        var surname: String? = nil
        /// The type of the user.
        var type: String? = nil
        /// The amount of storage for the user.
        var storageRule: StorageRuleType? = nil

        public init() {}

        public init(locale: String? = nil, userId: String, givenName: String? = nil, timeZoneId: String? = nil, surname: String? = nil, type: String? = nil, storageRule: StorageRuleType? = nil) {
            self.locale = locale
            self.userId = userId
            self.givenName = givenName
            self.timeZoneId = timeZoneId
            self.surname = surname
            self.type = type
            self.storageRule = storageRule
        }

    }

    public struct DeleteFolderRequest: Serializable, Initializable {
        /// The ID of the folder.
        var folderId: String = ""

        public init() {}

        public init(folderId: String) {
            self.folderId = folderId
        }

    }

    public struct CreateFolderRequest: Serializable, Initializable {
        /// The name of the new folder.
        var name: String? = nil
        /// The ID of the parent folder.
        var parentFolderId: String = ""

        public init() {}

        public init(name: String? = nil, parentFolderId: String) {
            self.name = name
            self.parentFolderId = parentFolderId
        }

    }

    public struct DocumentMetadata: Serializable, Initializable {
        /// The resource state.
        var resourceState: String? = nil
        /// The ID of the creator.
        var creatorId: String? = nil
        /// The time when the document was updated.
        var modifiedTimestamp: Date? = nil
        /// The ID of the parent folder.
        var parentFolderId: String? = nil
        /// The latest version of the document.
        var latestVersionMetadata: DocumentVersionMetadata? = nil
        /// The time when the document was created.
        var createdTimestamp: Date? = nil
        /// The ID of the document.
        var id: String? = nil

        public init() {}

        public init(resourceState: String? = nil, creatorId: String? = nil, modifiedTimestamp: Date? = nil, parentFolderId: String? = nil, latestVersionMetadata: DocumentVersionMetadata? = nil, createdTimestamp: Date? = nil, id: String? = nil) {
            self.resourceState = resourceState
            self.creatorId = creatorId
            self.modifiedTimestamp = modifiedTimestamp
            self.parentFolderId = parentFolderId
            self.latestVersionMetadata = latestVersionMetadata
            self.createdTimestamp = createdTimestamp
            self.id = id
        }

    }

    public struct DescribeResourcePermissionsRequest: Serializable, Initializable {
        /// The ID of the resource.
        var resourceId: String = ""
        /// The marker for the next set of results. (You received this marker from a previous call)
        var marker: String? = nil
        /// The maximum number of items to return with this call.
        var limit: Int32? = nil

        public init() {}

        public init(resourceId: String, marker: String? = nil, limit: Int32? = nil) {
            self.resourceId = resourceId
            self.marker = marker
            self.limit = limit
        }

    }

    public struct Principal: Serializable, Initializable {
        /// The type of resource.
        var type: String? = nil
        /// The permission information for the resource.
        var roles: [PermissionInfo]? = nil
        /// The ID of the resource.
        var id: String? = nil

        public init() {}

        public init(type: String? = nil, roles: [PermissionInfo]? = nil, id: String? = nil) {
            self.type = type
            self.roles = roles
            self.id = id
        }

    }

    public struct DescribeNotificationSubscriptionsResponse: Serializable, Initializable {
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        var marker: String? = nil
        /// The subscriptions.
        var subscriptions: [Subscription]? = nil

        public init() {}

        public init(marker: String? = nil, subscriptions: [Subscription]? = nil) {
            self.marker = marker
            self.subscriptions = subscriptions
        }

    }

    public struct UpdateDocumentVersionRequest: Serializable, Initializable {
        /// The status of the version.
        var versionStatus: String? = nil
        /// The version ID of the document.
        var versionId: String = ""
        /// The ID of the document.
        var documentId: String = ""

        public init() {}

        public init(versionStatus: String? = nil, versionId: String, documentId: String) {
            self.versionStatus = versionStatus
            self.versionId = versionId
            self.documentId = documentId
        }

    }

    public struct GetDocumentPathRequest: Serializable, Initializable {
        /// A comma-separated list of values. Specify "NAME" to include the names of the parent folders.
        var fields: String? = nil
        /// The ID of the document.
        var documentId: String = ""
        /// This value is not supported.
        var marker: String? = nil
        /// The maximum number of levels in the hierarchy to return.
        var limit: Int32? = nil

        public init() {}

        public init(fields: String? = nil, documentId: String, marker: String? = nil, limit: Int32? = nil) {
            self.fields = fields
            self.documentId = documentId
            self.marker = marker
            self.limit = limit
        }

    }

    public struct RemoveResourcePermissionRequest: Serializable, Initializable {
        /// The ID of the resource.
        var resourceId: String = ""
        /// The principal type of the resource.
        var principalType: String? = nil
        /// The principal ID of the resource.
        var principalId: String = ""

        public init() {}

        public init(resourceId: String, principalType: String? = nil, principalId: String) {
            self.resourceId = resourceId
            self.principalType = principalType
            self.principalId = principalId
        }

    }

    public struct CreateUserResponse: Serializable, Initializable {
        /// The user information.
        var user: User? = nil

        public init() {}

        public init(user: User? = nil) {
            self.user = user
        }

    }

    public struct DescribeDocumentVersionsResponse: Serializable, Initializable {
        /// The document versions.
        var documentVersions: [DocumentVersionMetadata]? = nil
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        var marker: String? = nil

        public init() {}

        public init(documentVersions: [DocumentVersionMetadata]? = nil, marker: String? = nil) {
            self.documentVersions = documentVersions
            self.marker = marker
        }

    }

    public struct User: Serializable, Initializable {
        /// The email address of the user.
        var emailAddress: String? = nil
        /// The ID of the recycle bin folder.
        var recycleBinFolderId: String? = nil
        /// The login name of the user.
        var username: String? = nil
        /// The time when the user was modified.
        var modifiedTimestamp: Date? = nil
        /// The ID of the organization.
        var organizationId: String? = nil
        /// The time when the user was created.
        var createdTimestamp: Date? = nil
        /// The ID of the user.
        var id: String? = nil
        /// The time zone ID of the user.
        var timeZoneId: String? = nil
        /// The locale of the user.
        var locale: String? = nil
        /// The status of the user.
        var status: String? = nil
        /// The given name of the user.
        var givenName: String? = nil
        /// The storage for the user.
        var storage: UserStorageMetadata? = nil
        /// The surname of the user.
        var surname: String? = nil
        /// The ID of the root folder.
        var rootFolderId: String? = nil
        /// The type of user.
        var type: String? = nil

        public init() {}

        public init(emailAddress: String? = nil, recycleBinFolderId: String? = nil, username: String? = nil, modifiedTimestamp: Date? = nil, organizationId: String? = nil, createdTimestamp: Date? = nil, id: String? = nil, timeZoneId: String? = nil, locale: String? = nil, status: String? = nil, givenName: String? = nil, storage: UserStorageMetadata? = nil, surname: String? = nil, rootFolderId: String? = nil, type: String? = nil) {
            self.emailAddress = emailAddress
            self.recycleBinFolderId = recycleBinFolderId
            self.username = username
            self.modifiedTimestamp = modifiedTimestamp
            self.organizationId = organizationId
            self.createdTimestamp = createdTimestamp
            self.id = id
            self.timeZoneId = timeZoneId
            self.locale = locale
            self.status = status
            self.givenName = givenName
            self.storage = storage
            self.surname = surname
            self.rootFolderId = rootFolderId
            self.type = type
        }

    }

    public struct StorageRuleType: Serializable, Initializable {
        /// The type of storage.
        var storageType: String? = nil
        /// The amount of storage allocated, in bytes.
        var storageAllocatedInBytes: Int64? = nil

        public init() {}

        public init(storageType: String? = nil, storageAllocatedInBytes: Int64? = nil) {
            self.storageType = storageType
            self.storageAllocatedInBytes = storageAllocatedInBytes
        }

    }

    public struct CreateFolderResponse: Serializable, Initializable {
        /// The metadata of the folder.
        var metadata: FolderMetadata? = nil

        public init() {}

        public init(metadata: FolderMetadata? = nil) {
            self.metadata = metadata
        }

    }

    public struct SharePrincipal: Serializable, Initializable {
        /// The role of the recipient.
        var role: String = ""
        /// The type of the recipient.
        var type: String = ""
        /// The ID of the recipient.
        var id: String = ""

        public init() {}

        public init(role: String, type: String, id: String) {
            self.role = role
            self.type = type
            self.id = id
        }

    }

    public struct GetFolderPathRequest: Serializable, Initializable {
        /// A comma-separated list of values. Specify "NAME" to include the names of the parent folders.
        var fields: String? = nil
        /// The ID of the folder.
        var folderId: String = ""
        /// The maximum number of levels in the hierarchy to return.
        var limit: Int32? = nil
        /// This value is not supported.
        var marker: String? = nil

        public init() {}

        public init(fields: String? = nil, folderId: String, limit: Int32? = nil, marker: String? = nil) {
            self.fields = fields
            self.folderId = folderId
            self.limit = limit
            self.marker = marker
        }

    }

    public struct DeactivateUserRequest: Serializable, Initializable {
        /// The ID of the user.
        var userId: String = ""

        public init() {}

        public init(userId: String) {
            self.userId = userId
        }

    }

    public struct ResourcePath: Serializable, Initializable {
        /// The components of the resource path.
        var components: [ResourcePathComponent]? = nil

        public init() {}

        public init(components: [ResourcePathComponent]? = nil) {
            self.components = components
        }

    }

    public struct DeleteFolderContentsRequest: Serializable, Initializable {
        /// The ID of the folder.
        var folderId: String = ""

        public init() {}

        public init(folderId: String) {
            self.folderId = folderId
        }

    }

    public struct DescribeUsersRequest: Serializable, Initializable {
        /// A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.
        var fields: String? = nil
        /// The IDs of the users.
        var userIds: String? = nil
        /// The sorting criteria.
        var sort: String? = nil
        /// The marker for the next set of results. (You received this marker from a previous call.)
        var marker: String? = nil
        /// A query to filter users by user name.
        var query: String? = nil
        /// The maximum number of items to return.
        var limit: Int32? = nil
        /// The ID of the organization.
        var organizationId: String? = nil
        /// The order for the results.
        var order: String? = nil
        /// The state of the users. Specify "ALL" to include inactive users.
        var include: String? = nil

        public init() {}

        public init(fields: String? = nil, userIds: String? = nil, sort: String? = nil, marker: String? = nil, query: String? = nil, limit: Int32? = nil, organizationId: String? = nil, order: String? = nil, include: String? = nil) {
            self.fields = fields
            self.userIds = userIds
            self.sort = sort
            self.marker = marker
            self.query = query
            self.limit = limit
            self.organizationId = organizationId
            self.order = order
            self.include = include
        }

    }

    public struct InitiateDocumentVersionUploadResponse: Serializable, Initializable {
        /// The document metadata.
        var metadata: DocumentMetadata? = nil
        /// The upload metadata.
        var uploadMetadata: UploadMetadata? = nil

        public init() {}

        public init(metadata: DocumentMetadata? = nil, uploadMetadata: UploadMetadata? = nil) {
            self.metadata = metadata
            self.uploadMetadata = uploadMetadata
        }

    }

    public struct DescribeFolderContentsRequest: Serializable, Initializable {
        /// The sorting criteria.
        var sort: String? = nil
        /// The marker for the next set of results. (You received this marker from a previous call.)
        var marker: String? = nil
        /// The ID of the folder.
        var folderId: String = ""
        /// The maximum number of items to return with this call.
        var limit: Int32? = nil
        /// The order for the contents of the folder.
        var order: String? = nil
        /// The type of items.
        var type: String? = nil
        /// The contents to include. Specify "INITIALIZED" to include initialized documents.
        var include: String? = nil

        public init() {}

        public init(sort: String? = nil, marker: String? = nil, folderId: String, limit: Int32? = nil, order: String? = nil, type: String? = nil, include: String? = nil) {
            self.sort = sort
            self.marker = marker
            self.folderId = folderId
            self.limit = limit
            self.order = order
            self.type = type
            self.include = include
        }

    }

    public struct AbortDocumentVersionUploadRequest: Serializable, Initializable {
        /// The ID of the version.
        var versionId: String = ""
        /// The ID of the document.
        var documentId: String = ""

        public init() {}

        public init(versionId: String, documentId: String) {
            self.versionId = versionId
            self.documentId = documentId
        }

    }

    public struct GetDocumentVersionResponse: Serializable, Initializable {
        /// The version metadata.
        var metadata: DocumentVersionMetadata? = nil

        public init() {}

        public init(metadata: DocumentVersionMetadata? = nil) {
            self.metadata = metadata
        }

    }

    public struct DeleteNotificationSubscriptionRequest: Serializable, Initializable {
        /// The ID of the organization.
        var organizationId: String = ""
        /// The ID of the subscription.
        var subscriptionId: String = ""

        public init() {}

        public init(organizationId: String, subscriptionId: String) {
            self.organizationId = organizationId
            self.subscriptionId = subscriptionId
        }

    }

    public struct ActivateUserRequest: Serializable, Initializable {
        /// The ID of the user.
        var userId: String = ""

        public init() {}

        public init(userId: String) {
            self.userId = userId
        }

    }

}