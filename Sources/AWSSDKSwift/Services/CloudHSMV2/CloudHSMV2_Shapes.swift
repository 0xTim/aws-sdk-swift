// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudHSMV2 {

    public struct Hsm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "EniId", required: false, type: .string), 
            AWSShapeMember(label: "HsmId", required: true, type: .string), 
            AWSShapeMember(label: "EniIp", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "StateMessage", required: false, type: .string)
        ]
        /// The HSM's state.
        public let state: HsmState?
        /// The Availability Zone that contains the HSM.
        public let availabilityZone: String?
        /// The identifier (ID) of the HSM's elastic network interface (ENI).
        public let eniId: String?
        /// The HSM's identifier (ID).
        public let hsmId: String
        /// The IP address of the HSM's elastic network interface (ENI).
        public let eniIp: String?
        /// The identifier (ID) of the cluster that contains the HSM.
        public let clusterId: String?
        /// The subnet that contains the HSM's elastic network interface (ENI).
        public let subnetId: String?
        /// A description of the HSM's state.
        public let stateMessage: String?

        public init(state: HsmState? = nil, availabilityZone: String? = nil, eniId: String? = nil, hsmId: String, eniIp: String? = nil, clusterId: String? = nil, subnetId: String? = nil, stateMessage: String? = nil) {
            self.state = state
            self.availabilityZone = availabilityZone
            self.eniId = eniId
            self.hsmId = hsmId
            self.eniIp = eniIp
            self.clusterId = clusterId
            self.subnetId = subnetId
            self.stateMessage = stateMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case availabilityZone = "AvailabilityZone"
            case eniId = "EniId"
            case hsmId = "HsmId"
            case eniIp = "EniIp"
            case clusterId = "ClusterId"
            case subnetId = "SubnetId"
            case stateMessage = "StateMessage"
        }
    }

    public struct CreateHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The Availability Zone where you are creating the HSM. To find the cluster's Availability Zones, use DescribeClusters.
        public let availabilityZone: String
        /// The HSM's IP address. If you specify an IP address, use an available address from the subnet that maps to the Availability Zone where you are creating the HSM. If you don't specify an IP address, one is chosen for you from that subnet.
        public let ipAddress: String?
        /// The identifier (ID) of the HSM's cluster. To find the cluster ID, use DescribeClusters.
        public let clusterId: String

        public init(availabilityZone: String, ipAddress: String? = nil, clusterId: String) {
            self.availabilityZone = availabilityZone
            self.ipAddress = ipAddress
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case ipAddress = "IpAddress"
            case clusterId = "ClusterId"
        }
    }

    public struct DeleteClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The identifier (ID) of the cluster that you are deleting. To find the cluster ID, use DescribeClusters.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct Cluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetMapping", required: false, type: .map), 
            AWSShapeMember(label: "BackupPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "SourceBackupId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateMessage", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "Hsms", required: false, type: .list), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "Certificates", required: false, type: .structure), 
            AWSShapeMember(label: "HsmType", required: false, type: .string), 
            AWSShapeMember(label: "PreCoPassword", required: false, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "SecurityGroup", required: false, type: .string)
        ]
        /// A map of the cluster's subnets and their corresponding Availability Zones.
        public let subnetMapping: [String: String]?
        /// The cluster's backup policy.
        public let backupPolicy: BackupPolicy?
        /// The identifier (ID) of the backup used to create the cluster. This value exists only when the cluster was created from a backup.
        public let sourceBackupId: String?
        /// The cluster's state.
        public let state: ClusterState?
        /// A description of the cluster's state.
        public let stateMessage: String?
        /// The identifier (ID) of the virtual private cloud (VPC) that contains the cluster.
        public let vpcId: String?
        /// Contains information about the HSMs in the cluster.
        public let hsms: [Hsm]?
        /// The cluster's identifier (ID).
        public let clusterId: String?
        /// Contains one or more certificates or a certificate signing request (CSR).
        public let certificates: Certificates?
        /// The type of HSM that the cluster contains.
        public let hsmType: String?
        /// The default password for the cluster's Pre-Crypto Officer (PRECO) user.
        public let preCoPassword: String?
        /// The date and time when the cluster was created.
        public let createTimestamp: TimeStamp?
        /// The identifier (ID) of the cluster's security group.
        public let securityGroup: String?

        public init(subnetMapping: [String: String]? = nil, backupPolicy: BackupPolicy? = nil, sourceBackupId: String? = nil, state: ClusterState? = nil, stateMessage: String? = nil, vpcId: String? = nil, hsms: [Hsm]? = nil, clusterId: String? = nil, certificates: Certificates? = nil, hsmType: String? = nil, preCoPassword: String? = nil, createTimestamp: TimeStamp? = nil, securityGroup: String? = nil) {
            self.subnetMapping = subnetMapping
            self.backupPolicy = backupPolicy
            self.sourceBackupId = sourceBackupId
            self.state = state
            self.stateMessage = stateMessage
            self.vpcId = vpcId
            self.hsms = hsms
            self.clusterId = clusterId
            self.certificates = certificates
            self.hsmType = hsmType
            self.preCoPassword = preCoPassword
            self.createTimestamp = createTimestamp
            self.securityGroup = securityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case subnetMapping = "SubnetMapping"
            case backupPolicy = "BackupPolicy"
            case sourceBackupId = "SourceBackupId"
            case state = "State"
            case stateMessage = "StateMessage"
            case vpcId = "VpcId"
            case hsms = "Hsms"
            case clusterId = "ClusterId"
            case certificates = "Certificates"
            case hsmType = "HsmType"
            case preCoPassword = "PreCoPassword"
            case createTimestamp = "CreateTimestamp"
            case securityGroup = "SecurityGroup"
        }
    }

    public struct CopyBackupToRegionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationBackup", required: false, type: .structure)
        ]
        public let destinationBackup: DestinationBackup?

        public init(destinationBackup: DestinationBackup? = nil) {
            self.destinationBackup = destinationBackup
        }

        private enum CodingKeys: String, CodingKey {
            case destinationBackup = "DestinationBackup"
        }
    }

    public struct DeleteClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// Information about the cluster that was deleted.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// An opaque string that indicates that the response contains only a subset of tags. Use this value in a subsequent ListTags request to get more tags.
        public let nextToken: String?
        /// A list of tags.
        public let tagList: [Tag]

        public init(nextToken: String? = nil, tagList: [Tag]) {
            self.nextToken = nextToken
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tagList = "TagList"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The key of the tag.
        public let key: String
        /// The value of the tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DescribeBackupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Backups", required: false, type: .list)
        ]
        /// An opaque string that indicates that the response contains only a subset of backups. Use this value in a subsequent DescribeBackups request to get more backups.
        public let nextToken: String?
        /// A list of backups.
        public let backups: [Backup]?

        public init(nextToken: String? = nil, backups: [Backup]? = nil) {
            self.nextToken = nextToken
            self.backups = backups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case backups = "Backups"
        }
    }

    public struct InitializeClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateMessage", required: false, type: .string)
        ]
        /// The cluster's state.
        public let state: ClusterState?
        /// A description of the cluster's state.
        public let stateMessage: String?

        public init(state: ClusterState? = nil, stateMessage: String? = nil) {
            self.state = state
            self.stateMessage = stateMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateMessage = "StateMessage"
        }
    }

    public enum BackupState: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case ready = "READY"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct Certificates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsHardwareCertificate", required: false, type: .string), 
            AWSShapeMember(label: "ManufacturerHardwareCertificate", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCsr", required: false, type: .string), 
            AWSShapeMember(label: "HsmCertificate", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCertificate", required: false, type: .string)
        ]
        /// The HSM hardware certificate issued (signed) by AWS CloudHSM.
        public let awsHardwareCertificate: String?
        /// The HSM hardware certificate issued (signed) by the hardware manufacturer.
        public let manufacturerHardwareCertificate: String?
        /// The cluster's certificate signing request (CSR). The CSR exists only when the cluster's state is UNINITIALIZED.
        public let clusterCsr: String?
        /// The HSM certificate issued (signed) by the HSM hardware.
        public let hsmCertificate: String?
        /// The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.
        public let clusterCertificate: String?

        public init(awsHardwareCertificate: String? = nil, manufacturerHardwareCertificate: String? = nil, clusterCsr: String? = nil, hsmCertificate: String? = nil, clusterCertificate: String? = nil) {
            self.awsHardwareCertificate = awsHardwareCertificate
            self.manufacturerHardwareCertificate = manufacturerHardwareCertificate
            self.clusterCsr = clusterCsr
            self.hsmCertificate = hsmCertificate
            self.clusterCertificate = clusterCertificate
        }

        private enum CodingKeys: String, CodingKey {
            case awsHardwareCertificate = "AwsHardwareCertificate"
            case manufacturerHardwareCertificate = "ManufacturerHardwareCertificate"
            case clusterCsr = "ClusterCsr"
            case hsmCertificate = "HsmCertificate"
            case clusterCertificate = "ClusterCertificate"
        }
    }

    public enum HsmState: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case active = "ACTIVE"
        case degraded = "DEGRADED"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct CreateClusterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// Information about the cluster that was created.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct DescribeBackupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "SortAscending", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The NextToken value that you received in the previous response. Use this value to get more backups.
        public let nextToken: String?
        /// One or more filters to limit the items returned in the response. Use the backupIds filter to return only the specified backups. Specify backups by their backup identifier (ID). Use the clusterIds filter to return only the backups for the specified clusters. Specify clusters by their cluster identifier (ID). Use the states filter to return only backups that match the specified state.
        public let filters: [String: [String]]?
        public let sortAscending: Bool?
        /// The maximum number of backups to return in the response. When there are more backups than the number you specify, the response contains a NextToken value.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [String: [String]]? = nil, sortAscending: Bool? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortAscending = sortAscending
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortAscending = "SortAscending"
            case maxResults = "MaxResults"
        }
    }

    public struct DestinationBackup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceRegion", required: false, type: .string), 
            AWSShapeMember(label: "SourceBackup", required: false, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceCluster", required: false, type: .string)
        ]
        public let sourceRegion: String?
        public let sourceBackup: String?
        public let createTimestamp: TimeStamp?
        public let sourceCluster: String?

        public init(sourceRegion: String? = nil, sourceBackup: String? = nil, createTimestamp: TimeStamp? = nil, sourceCluster: String? = nil) {
            self.sourceRegion = sourceRegion
            self.sourceBackup = sourceBackup
            self.createTimestamp = createTimestamp
            self.sourceCluster = sourceCluster
        }

        private enum CodingKeys: String, CodingKey {
            case sourceRegion = "SourceRegion"
            case sourceBackup = "SourceBackup"
            case createTimestamp = "CreateTimestamp"
            case sourceCluster = "SourceCluster"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// The NextToken value that you received in the previous response. Use this value to get more tags.
        public let nextToken: String?
        /// The maximum number of tags to return in the response. When there are more tags than the number you specify, the response contains a NextToken value.
        public let maxResults: Int32?
        /// The cluster identifier (ID) for the cluster whose tags you are getting. To find the cluster ID, use DescribeClusters.
        public let resourceId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, resourceId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case resourceId = "ResourceId"
        }
    }

    public enum ClusterState: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case uninitialized = "UNINITIALIZED"
        case initializeInProgress = "INITIALIZE_IN_PROGRESS"
        case initialized = "INITIALIZED"
        case active = "ACTIVE"
        case updateInProgress = "UPDATE_IN_PROGRESS"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case deleted = "DELETED"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct CreateHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hsm", required: false, type: .structure)
        ]
        /// Information about the HSM that was created.
        public let hsm: Hsm?

        public init(hsm: Hsm? = nil) {
            self.hsm = hsm
        }

        private enum CodingKeys: String, CodingKey {
            case hsm = "Hsm"
        }
    }

    public struct InitializeClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustAnchor", required: true, type: .string), 
            AWSShapeMember(label: "SignedCert", required: true, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The issuing certificate of the issuing certificate authority (CA) that issued (signed) the cluster certificate. This can be a root (self-signed) certificate or a certificate chain that begins with the certificate that issued the cluster certificate and ends with a root certificate. The certificate or certificate chain must be in PEM format and can contain a maximum of 5000 characters.
        public let trustAnchor: String
        /// The cluster certificate issued (signed) by your issuing certificate authority (CA). The certificate must be in PEM format and can contain a maximum of 5000 characters.
        public let signedCert: String
        /// The identifier (ID) of the cluster that you are claiming. To find the cluster ID, use DescribeClusters.
        public let clusterId: String

        public init(trustAnchor: String, signedCert: String, clusterId: String) {
            self.trustAnchor = trustAnchor
            self.signedCert = signedCert
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case trustAnchor = "TrustAnchor"
            case signedCert = "SignedCert"
            case clusterId = "ClusterId"
        }
    }

    public struct DeleteHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EniIp", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "EniId", required: false, type: .string), 
            AWSShapeMember(label: "HsmId", required: false, type: .string)
        ]
        /// The IP address of the elastic network interface (ENI) of the HSM that you are deleting.
        public let eniIp: String?
        /// The identifier (ID) of the cluster that contains the HSM that you are deleting.
        public let clusterId: String
        /// The identifier (ID) of the elastic network interface (ENI) of the HSM that you are deleting.
        public let eniId: String?
        /// The identifier (ID) of the HSM that you are deleting.
        public let hsmId: String?

        public init(eniIp: String? = nil, clusterId: String, eniId: String? = nil, hsmId: String? = nil) {
            self.eniIp = eniIp
            self.clusterId = clusterId
            self.eniId = eniId
            self.hsmId = hsmId
        }

        private enum CodingKeys: String, CodingKey {
            case eniIp = "EniIp"
            case clusterId = "ClusterId"
            case eniId = "EniId"
            case hsmId = "HsmId"
        }
    }

    public struct DeleteHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmId", required: false, type: .string)
        ]
        /// The identifier (ID) of the HSM that was deleted.
        public let hsmId: String?

        public init(hsmId: String? = nil) {
            self.hsmId = hsmId
        }

        private enum CodingKeys: String, CodingKey {
            case hsmId = "HsmId"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: true, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// A list of one or more tags.
        public let tagList: [Tag]
        /// The cluster identifier (ID) for the cluster that you are tagging. To find the cluster ID, use DescribeClusters.
        public let resourceId: String

        public init(tagList: [Tag], resourceId: String) {
            self.tagList = tagList
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
            case resourceId = "ResourceId"
        }
    }

    public struct CopyBackupToRegionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BackupId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationRegion", required: true, type: .string)
        ]
        public let backupId: String
        public let destinationRegion: String

        public init(backupId: String, destinationRegion: String) {
            self.backupId = backupId
            self.destinationRegion = destinationRegion
        }

        private enum CodingKeys: String, CodingKey {
            case backupId = "BackupId"
            case destinationRegion = "DestinationRegion"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeyList", required: true, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// A list of one or more tag keys for the tags that you are removing. Specify only the tag keys, not the tag values.
        public let tagKeyList: [String]
        /// The cluster identifier (ID) for the cluster whose tags you are removing. To find the cluster ID, use DescribeClusters.
        public let resourceId: String

        public init(tagKeyList: [String], resourceId: String) {
            self.tagKeyList = tagKeyList
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeyList = "TagKeyList"
            case resourceId = "ResourceId"
        }
    }

    public enum BackupPolicy: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeClustersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters to limit the items returned in the response. Use the clusterIds filter to return only the specified clusters. Specify clusters by their cluster identifier (ID). Use the vpcIds filter to return only the clusters in the specified virtual private clouds (VPCs). Specify VPCs by their VPC identifier (ID). Use the states filter to return only clusters that match the specified state.
        public let filters: [String: [String]]?
        /// The NextToken value that you received in the previous response. Use this value to get more clusters.
        public let nextToken: String?
        /// The maximum number of clusters to return in the response. When there are more clusters than the number you specify, the response contains a NextToken value.
        public let maxResults: Int32?

        public init(filters: [String: [String]]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct Backup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BackupState", required: false, type: .enum), 
            AWSShapeMember(label: "CopyTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "BackupId", required: true, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceBackup", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "SourceCluster", required: false, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: false, type: .string)
        ]
        /// The state of the backup.
        public let backupState: BackupState?
        public let copyTimestamp: TimeStamp?
        /// The identifier (ID) of the backup.
        public let backupId: String
        /// The date and time when the backup was created.
        public let createTimestamp: TimeStamp?
        public let sourceBackup: String?
        /// The identifier (ID) of the cluster that was backed up.
        public let clusterId: String?
        public let sourceCluster: String?
        public let sourceRegion: String?

        public init(backupState: BackupState? = nil, copyTimestamp: TimeStamp? = nil, backupId: String, createTimestamp: TimeStamp? = nil, sourceBackup: String? = nil, clusterId: String? = nil, sourceCluster: String? = nil, sourceRegion: String? = nil) {
            self.backupState = backupState
            self.copyTimestamp = copyTimestamp
            self.backupId = backupId
            self.createTimestamp = createTimestamp
            self.sourceBackup = sourceBackup
            self.clusterId = clusterId
            self.sourceCluster = sourceCluster
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case backupState = "BackupState"
            case copyTimestamp = "CopyTimestamp"
            case backupId = "BackupId"
            case createTimestamp = "CreateTimestamp"
            case sourceBackup = "SourceBackup"
            case clusterId = "ClusterId"
            case sourceCluster = "SourceCluster"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct DescribeClustersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Clusters", required: false, type: .list)
        ]
        /// An opaque string that indicates that the response contains only a subset of clusters. Use this value in a subsequent DescribeClusters request to get more clusters.
        public let nextToken: String?
        /// A list of clusters.
        public let clusters: [Cluster]?

        public init(nextToken: String? = nil, clusters: [Cluster]? = nil) {
            self.nextToken = nextToken
            self.clusters = clusters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case clusters = "Clusters"
        }
    }

    public struct CreateClusterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmType", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "SourceBackupId", required: false, type: .string)
        ]
        /// The type of HSM to use in the cluster. Currently the only allowed value is hsm1.medium.
        public let hsmType: String
        /// The identifiers (IDs) of the subnets where you are creating the cluster. You must specify at least one subnet. If you specify multiple subnets, they must meet the following criteria:   All subnets must be in the same virtual private cloud (VPC).   You can specify only one subnet per Availability Zone.  
        public let subnetIds: [String]
        /// The identifier (ID) of the cluster backup to restore. Use this value to restore the cluster from a backup instead of creating a new cluster. To find the backup ID, use DescribeBackups.
        public let sourceBackupId: String?

        public init(hsmType: String, subnetIds: [String], sourceBackupId: String? = nil) {
            self.hsmType = hsmType
            self.subnetIds = subnetIds
            self.sourceBackupId = sourceBackupId
        }

        private enum CodingKeys: String, CodingKey {
            case hsmType = "HsmType"
            case subnetIds = "SubnetIds"
            case sourceBackupId = "SourceBackupId"
        }
    }

}