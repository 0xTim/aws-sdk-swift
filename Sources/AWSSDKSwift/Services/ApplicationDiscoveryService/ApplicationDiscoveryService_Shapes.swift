// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ApplicationDiscoveryService {

    public struct NeighborConnectionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionsCount", required: true, type: .long), 
            AWSShapeMember(label: "transportProtocol", required: false, type: .string), 
            AWSShapeMember(label: "destinationServerId", required: true, type: .string), 
            AWSShapeMember(label: "sourceServerId", required: true, type: .string), 
            AWSShapeMember(label: "destinationPort", required: false, type: .integer)
        ]
        /// The number of open network connections with the neighboring server.
        public let connectionsCount: Int64
        /// The network protocol used for the connection.
        public let transportProtocol: String?
        /// The ID of the server that accepted the network connection.
        public let destinationServerId: String
        /// The ID of the server that opened the network connection.
        public let sourceServerId: String
        /// The destination network port for the connection.
        public let destinationPort: Int32?

        public init(connectionsCount: Int64, transportProtocol: String? = nil, destinationServerId: String, sourceServerId: String, destinationPort: Int32? = nil) {
            self.connectionsCount = connectionsCount
            self.transportProtocol = transportProtocol
            self.destinationServerId = destinationServerId
            self.sourceServerId = sourceServerId
            self.destinationPort = destinationPort
        }

        private enum CodingKeys: String, CodingKey {
            case connectionsCount = "connectionsCount"
            case transportProtocol = "transportProtocol"
            case destinationServerId = "destinationServerId"
            case sourceServerId = "sourceServerId"
            case destinationPort = "destinationPort"
        }
    }

    public struct ConfigurationTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationType", required: false, type: .enum), 
            AWSShapeMember(label: "timeOfCreation", required: false, type: .timestamp), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "configurationId", required: false, type: .string)
        ]
        /// A type of IT asset to tag.
        public let configurationType: ConfigurationItemType?
        /// The time the configuration tag was created in Coordinated Universal Time (UTC).
        public let timeOfCreation: TimeStamp?
        /// A value on which to filter. For example key = serverType and value = web server.
        public let value: String?
        /// A type of tag on which to filter. For example, serverType.
        public let key: String?
        /// The configuration ID for the item to tag. You can specify a list of keys and values.
        public let configurationId: String?

        public init(configurationType: ConfigurationItemType? = nil, timeOfCreation: TimeStamp? = nil, value: String? = nil, key: String? = nil, configurationId: String? = nil) {
            self.configurationType = configurationType
            self.timeOfCreation = timeOfCreation
            self.value = value
            self.key = key
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationType = "configurationType"
            case timeOfCreation = "timeOfCreation"
            case value = "value"
            case key = "key"
            case configurationId = "configurationId"
        }
    }

    public enum ExportDataFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case graphml = "GRAPHML"
        public var description: String { return self.rawValue }
    }

    public struct ListServerNeighborsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "portInformationNeeded", required: false, type: .boolean), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "neighborConfigurationIds", required: false, type: .list), 
            AWSShapeMember(label: "configurationId", required: true, type: .string)
        ]
        /// Token to retrieve the next set of results. For example, if you previously specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public let nextToken: String?
        /// Flag to indicate if port and protocol information is needed as part of the response.
        public let portInformationNeeded: Bool?
        /// Maximum number of results to return in a single page of output.
        public let maxResults: Int32?
        /// List of configuration IDs to test for one-hop-away.
        public let neighborConfigurationIds: [String]?
        /// Configuration ID of the server for which neighbors are being listed.
        public let configurationId: String

        public init(nextToken: String? = nil, portInformationNeeded: Bool? = nil, maxResults: Int32? = nil, neighborConfigurationIds: [String]? = nil, configurationId: String) {
            self.nextToken = nextToken
            self.portInformationNeeded = portInformationNeeded
            self.maxResults = maxResults
            self.neighborConfigurationIds = neighborConfigurationIds
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case portInformationNeeded = "portInformationNeeded"
            case maxResults = "maxResults"
            case neighborConfigurationIds = "neighborConfigurationIds"
            case configurationId = "configurationId"
        }
    }

    public struct AssociateConfigurationItemsToApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationIds", required: true, type: .list), 
            AWSShapeMember(label: "applicationConfigurationId", required: true, type: .string)
        ]
        /// The ID of each configuration item to be associated with an application.
        public let configurationIds: [String]
        /// The configuration ID of an application with which items are to be associated.
        public let applicationConfigurationId: String

        public init(configurationIds: [String], applicationConfigurationId: String) {
            self.configurationIds = configurationIds
            self.applicationConfigurationId = applicationConfigurationId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationIds = "configurationIds"
            case applicationConfigurationId = "applicationConfigurationId"
        }
    }

    public enum OrderString: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public struct UpdateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationId", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// Configuration ID of the application to be updated.
        public let configurationId: String
        /// New description of the application to be updated.
        public let description: String?
        /// New name of the application to be updated.
        public let name: String?

        public init(configurationId: String, description: String? = nil, name: String? = nil) {
            self.configurationId = configurationId
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case configurationId = "configurationId"
            case description = "description"
            case name = "name"
        }
    }

    public struct DeleteTagsResponse: AWSShape {

    }

    public struct DescribeAgentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "agentIds", required: false, type: .list), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// Token to retrieve the next set of results. For example, if you previously specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public let nextToken: String?
        /// The total number of agents/Connectors to return in a single page of output. The maximum value is 100.
        public let maxResults: Int32?
        /// The agent or the Connector IDs for which you want information. If you specify no IDs, the system returns information about all agents/Connectors associated with your AWS user account.
        public let agentIds: [String]?
        /// You can filter the request using various logical operators and a key-value format. For example:   {"key": "collectionStatus", "value": "STARTED"} 
        public let filters: [Filter]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, agentIds: [String]? = nil, filters: [Filter]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.agentIds = agentIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case agentIds = "agentIds"
            case filters = "filters"
        }
    }

    public struct OrderByElement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fieldName", required: true, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum)
        ]
        /// The field on which to order.
        public let fieldName: String
        /// Ordering direction.
        public let sortOrder: OrderString?

        public init(fieldName: String, sortOrder: OrderString? = nil) {
            self.fieldName = fieldName
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case fieldName = "fieldName"
            case sortOrder = "sortOrder"
        }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "values", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// Values for the tag filter.
        public let values: [String]
        /// A name of the tag filter.
        public let name: String

        public init(values: [String], name: String) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "values"
            case name = "name"
        }
    }

    public struct StopDataCollectionByAgentIdsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentsConfigurationStatus", required: false, type: .list)
        ]
        /// Information about the agents or connector that were instructed to stop collecting data. Information includes the agent/connector ID, a description of the operation performed, and whether the agent/connector configuration was updated.
        public let agentsConfigurationStatus: [AgentConfigurationStatus]?

        public init(agentsConfigurationStatus: [AgentConfigurationStatus]? = nil) {
            self.agentsConfigurationStatus = agentsConfigurationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case agentsConfigurationStatus = "agentsConfigurationStatus"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// Description of the application to be created.
        public let description: String?
        /// Name of the application to be created.
        public let name: String

        public init(description: String? = nil, name: String) {
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
        }
    }

    public struct DeleteApplicationsResponse: AWSShape {

    }

    public struct DescribeExportTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exportsInfo", required: false, type: .list)
        ]
        /// The nextToken value to include in a future DescribeExportTasks request. When the results of a DescribeExportTasks request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Contains one or more sets of export request details. When the status of a request is SUCCEEDED, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
        public let exportsInfo: [ExportInfo]?

        public init(nextToken: String? = nil, exportsInfo: [ExportInfo]? = nil) {
            self.nextToken = nextToken
            self.exportsInfo = exportsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exportsInfo = "exportsInfo"
        }
    }

    public struct DescribeConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// One or more configuration IDs.
        public let configurationIds: [String]

        public init(configurationIds: [String]) {
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case configurationIds = "configurationIds"
        }
    }

    public struct CustomerAgentInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "totalAgents", required: true, type: .integer), 
            AWSShapeMember(label: "shutdownAgents", required: true, type: .integer), 
            AWSShapeMember(label: "healthyAgents", required: true, type: .integer), 
            AWSShapeMember(label: "blackListedAgents", required: true, type: .integer), 
            AWSShapeMember(label: "unhealthyAgents", required: true, type: .integer), 
            AWSShapeMember(label: "activeAgents", required: true, type: .integer), 
            AWSShapeMember(label: "unknownAgents", required: true, type: .integer)
        ]
        /// Total number of discovery agents.
        public let totalAgents: Int32
        /// Number of discovery agents with status SHUTDOWN.
        public let shutdownAgents: Int32
        /// Number of healthy discovery agents
        public let healthyAgents: Int32
        /// Number of blacklisted discovery agents.
        public let blackListedAgents: Int32
        /// Number of unhealthy discovery agents.
        public let unhealthyAgents: Int32
        /// Number of active discovery agents.
        public let activeAgents: Int32
        /// Number of unknown discovery agents.
        public let unknownAgents: Int32

        public init(totalAgents: Int32, shutdownAgents: Int32, healthyAgents: Int32, blackListedAgents: Int32, unhealthyAgents: Int32, activeAgents: Int32, unknownAgents: Int32) {
            self.totalAgents = totalAgents
            self.shutdownAgents = shutdownAgents
            self.healthyAgents = healthyAgents
            self.blackListedAgents = blackListedAgents
            self.unhealthyAgents = unhealthyAgents
            self.activeAgents = activeAgents
            self.unknownAgents = unknownAgents
        }

        private enum CodingKeys: String, CodingKey {
            case totalAgents = "totalAgents"
            case shutdownAgents = "shutdownAgents"
            case healthyAgents = "healthyAgents"
            case blackListedAgents = "blackListedAgents"
            case unhealthyAgents = "unhealthyAgents"
            case activeAgents = "activeAgents"
            case unknownAgents = "unknownAgents"
        }
    }

    public struct CustomerConnectorInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blackListedConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "shutdownConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "unknownConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "totalConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "unhealthyConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "healthyConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "activeConnectors", required: true, type: .integer)
        ]
        /// Number of blacklisted discovery connectors.
        public let blackListedConnectors: Int32
        /// Number of discovery connectors with status SHUTDOWN,
        public let shutdownConnectors: Int32
        /// Number of unknown discovery connectors.
        public let unknownConnectors: Int32
        /// Total number of discovery connectors.
        public let totalConnectors: Int32
        /// Number of unhealthy discovery connectors.
        public let unhealthyConnectors: Int32
        /// Number of healthy discovery connectors.
        public let healthyConnectors: Int32
        /// Number of active discovery connectors.
        public let activeConnectors: Int32

        public init(blackListedConnectors: Int32, shutdownConnectors: Int32, unknownConnectors: Int32, totalConnectors: Int32, unhealthyConnectors: Int32, healthyConnectors: Int32, activeConnectors: Int32) {
            self.blackListedConnectors = blackListedConnectors
            self.shutdownConnectors = shutdownConnectors
            self.unknownConnectors = unknownConnectors
            self.totalConnectors = totalConnectors
            self.unhealthyConnectors = unhealthyConnectors
            self.healthyConnectors = healthyConnectors
            self.activeConnectors = activeConnectors
        }

        private enum CodingKeys: String, CodingKey {
            case blackListedConnectors = "blackListedConnectors"
            case shutdownConnectors = "shutdownConnectors"
            case unknownConnectors = "unknownConnectors"
            case totalConnectors = "totalConnectors"
            case unhealthyConnectors = "unhealthyConnectors"
            case healthyConnectors = "healthyConnectors"
            case activeConnectors = "activeConnectors"
        }
    }

    public struct StartExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportDataFormat", required: false, type: .list), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// The file format for the returned export data. Default value is CSV. Note: The GRAPHML option has been deprecated. 
        public let exportDataFormat: [ExportDataFormat]?
        /// The end timestamp for exported data from the single Application Discovery Agent selected in the filters. If no value is specified, exported data includes the most recent data collected by the agent.
        public let endTime: TimeStamp?
        /// The start timestamp for exported data from the single Application Discovery Agent selected in the filters. If no value is specified, data is exported starting from the first data collected by the agent.
        public let startTime: TimeStamp?
        /// If a filter is present, it selects the single agentId of the Application Discovery Agent for which data is exported. The agentId can be found in the results of the DescribeAgents API or CLI. If no filter is present, startTime and endTime are ignored and exported data includes both Agentless Discovery Connector data and summary data from Application Discovery agents. 
        public let filters: [ExportFilter]?

        public init(exportDataFormat: [ExportDataFormat]? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, filters: [ExportFilter]? = nil) {
            self.exportDataFormat = exportDataFormat
            self.endTime = endTime
            self.startTime = startTime
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case exportDataFormat = "exportDataFormat"
            case endTime = "endTime"
            case startTime = "startTime"
            case filters = "filters"
        }
    }

    public struct ExportConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportId", required: false, type: .string)
        ]
        /// A unique identifier that you can use to query the export status.
        public let exportId: String?

        public init(exportId: String? = nil) {
            self.exportId = exportId
        }

        private enum CodingKeys: String, CodingKey {
            case exportId = "exportId"
        }
    }

    public struct ListConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationType", required: true, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "orderBy", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// A valid configuration identified by Application Discovery Service. 
        public let configurationType: ConfigurationItemType
        /// Token to retrieve the next set of results. For example, if a previous call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public let nextToken: String?
        /// Certain filter criteria return output that can be sorted in ascending or descending order. For a list of output characteristics for each filter, see Using the ListConfigurations Action.
        public let orderBy: [OrderByElement]?
        /// The total number of items to return. The maximum value is 100.
        public let maxResults: Int32?
        /// You can filter the request using various logical operators and a key-value format. For example:   {"key": "serverType", "value": "webServer"}  For a complete list of filter options and guidance about using them with this action, see Querying Discovered Configuration Items. 
        public let filters: [Filter]?

        public init(configurationType: ConfigurationItemType, nextToken: String? = nil, orderBy: [OrderByElement]? = nil, maxResults: Int32? = nil, filters: [Filter]? = nil) {
            self.configurationType = configurationType
            self.nextToken = nextToken
            self.orderBy = orderBy
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case configurationType = "configurationType"
            case nextToken = "nextToken"
            case orderBy = "orderBy"
            case maxResults = "maxResults"
            case filters = "filters"
        }
    }

    public struct DescribeConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurations", required: false, type: .list)
        ]
        /// A key in the response map. The value is an array of data.
        public let configurations: [[String: String]]?

        public init(configurations: [[String: String]]? = nil) {
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "configurations"
        }
    }

    public struct StartDataCollectionByAgentIdsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentsConfigurationStatus", required: false, type: .list)
        ]
        /// Information about agents or the connector that were instructed to start collecting data. Information includes the agent/connector ID, a description of the operation performed, and whether the agent/connector configuration was updated.
        public let agentsConfigurationStatus: [AgentConfigurationStatus]?

        public init(agentsConfigurationStatus: [AgentConfigurationStatus]? = nil) {
            self.agentsConfigurationStatus = agentsConfigurationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case agentsConfigurationStatus = "agentsConfigurationStatus"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "condition", required: true, type: .string), 
            AWSShapeMember(label: "values", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// A conditional operator. The following operators are valid: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS. If you specify multiple filters, the system utilizes all filters as though concatenated by AND. If you specify multiple values for a particular filter, the system differentiates the values using OR. Calling either DescribeConfigurations or ListConfigurations returns attributes of matching configuration items.
        public let condition: String
        /// A string value on which to filter. For example, if you choose the destinationServer.osVersion filter name, you could specify Ubuntu for the value.
        public let values: [String]
        /// The name of the filter.
        public let name: String

        public init(condition: String, values: [String], name: String) {
            self.condition = condition
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "condition"
            case values = "values"
            case name = "name"
        }
    }

    public enum AgentStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case running = "RUNNING"
        case unknown = "UNKNOWN"
        case blacklisted = "BLACKLISTED"
        case shutdown = "SHUTDOWN"
        public var description: String { return self.rawValue }
    }

    public struct AgentConfigurationStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operationSucceeded", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "agentId", required: false, type: .string)
        ]
        /// Information about the status of the StartDataCollection and StopDataCollection operations. The system has recorded the data collection operation. The agent/connector receives this command the next time it polls for a new command. 
        public let operationSucceeded: Bool?
        /// A description of the operation performed.
        public let description: String?
        /// The agent/connector ID.
        public let agentId: String?

        public init(operationSucceeded: Bool? = nil, description: String? = nil, agentId: String? = nil) {
            self.operationSucceeded = operationSucceeded
            self.description = description
            self.agentId = agentId
        }

        private enum CodingKeys: String, CodingKey {
            case operationSucceeded = "operationSucceeded"
            case description = "description"
            case agentId = "agentId"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {

    }

    public struct DescribeTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Depending on the input, this is a list of configuration items tagged with a specific tag, or a list of tags for a specific configuration item.
        public let tags: [ConfigurationTag]?
        /// The call returns a token. Use this token to get the next set of results.
        public let nextToken: String?

        public init(tags: [ConfigurationTag]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case nextToken = "nextToken"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The type of tag on which to filter.
        public let key: String
        /// A value for a tag key on which to filter.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DescribeExportConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportIds", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// A unique identifier that you can use to query the export status.
        public let exportIds: [String]?
        /// A token to get the next set of results. For example, if you specify 100 IDs for DescribeExportConfigurationsRequest$exportIds but set DescribeExportConfigurationsRequest$maxResults to 10, you get results in a set of 10. Use the token in the query to get the next set of 10.
        public let nextToken: String?
        /// The maximum number of results that you want to display as a part of the query.
        public let maxResults: Int32?

        public init(exportIds: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.exportIds = exportIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case exportIds = "exportIds"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Tags that you want to delete from one or more configuration items. Specify the tags that you want to delete in a key-value format. For example:  {"key": "serverType", "value": "webServer"} 
        public let tags: [Tag]?
        /// A list of configuration items with tags that you want to delete.
        public let configurationIds: [String]

        public init(tags: [Tag]? = nil, configurationIds: [String]) {
            self.tags = tags
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case configurationIds = "configurationIds"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Tags that you want to associate with one or more configuration items. Specify the tags that you want to create in a key-value format. For example:  {"key": "serverType", "value": "webServer"} 
        public let tags: [Tag]
        /// A list of configuration items that you want to tag.
        public let configurationIds: [String]

        public init(tags: [Tag], configurationIds: [String]) {
            self.tags = tags
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case configurationIds = "configurationIds"
        }
    }

    public enum ExportStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case succeeded = "SUCCEEDED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateConfigurationItemsFromApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationIds", required: true, type: .list), 
            AWSShapeMember(label: "applicationConfigurationId", required: true, type: .string)
        ]
        /// Configuration ID of each item to be disassociated from an application.
        public let configurationIds: [String]
        /// Configuration ID of an application from which each item is disassociated.
        public let applicationConfigurationId: String

        public init(configurationIds: [String], applicationConfigurationId: String) {
            self.configurationIds = configurationIds
            self.applicationConfigurationId = applicationConfigurationId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationIds = "configurationIds"
            case applicationConfigurationId = "applicationConfigurationId"
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exportIds", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// The nextToken value returned from a previous paginated DescribeExportTasks request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// One or more unique identifiers used to query the status of an export request.
        public let exportIds: [String]?
        /// The maximum number of volume results returned by DescribeExportTasks in paginated output. When this parameter is used, DescribeExportTasks only returns maxResults results in a single page along with a nextToken response element.
        public let maxResults: Int32?
        /// One or more filters.    AgentId - ID of the agent whose collected data will be exported  
        public let filters: [ExportFilter]?

        public init(nextToken: String? = nil, exportIds: [String]? = nil, maxResults: Int32? = nil, filters: [ExportFilter]? = nil) {
            self.nextToken = nextToken
            self.exportIds = exportIds
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exportIds = "exportIds"
            case maxResults = "maxResults"
            case filters = "filters"
        }
    }

    public enum ConfigurationItemType: String, CustomStringConvertible, Codable {
        case server = "SERVER"
        case process = "PROCESS"
        case connection = "CONNECTION"
        case application = "APPLICATION"
        public var description: String { return self.rawValue }
    }

    public struct AgentInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentNetworkInfoList", required: false, type: .list), 
            AWSShapeMember(label: "agentId", required: false, type: .string), 
            AWSShapeMember(label: "hostName", required: false, type: .string), 
            AWSShapeMember(label: "lastHealthPingTime", required: false, type: .string), 
            AWSShapeMember(label: "health", required: false, type: .enum), 
            AWSShapeMember(label: "collectionStatus", required: false, type: .string), 
            AWSShapeMember(label: "agentType", required: false, type: .string), 
            AWSShapeMember(label: "connectorId", required: false, type: .string), 
            AWSShapeMember(label: "registeredTime", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// Network details about the host where the agent or connector resides.
        public let agentNetworkInfoList: [AgentNetworkInfo]?
        /// The agent or connector ID.
        public let agentId: String?
        /// The name of the host where the agent or connector resides. The host can be a server or virtual machine.
        public let hostName: String?
        /// Time since agent or connector health was reported.
        public let lastHealthPingTime: String?
        /// The health of the agent or connector.
        public let health: AgentStatus?
        /// Status of the collection process for an agent or connector.
        public let collectionStatus: String?
        /// Type of agent.
        public let agentType: String?
        /// The ID of the connector.
        public let connectorId: String?
        /// Agent's first registration timestamp in UTC.
        public let registeredTime: String?
        /// The agent or connector version.
        public let version: String?

        public init(agentNetworkInfoList: [AgentNetworkInfo]? = nil, agentId: String? = nil, hostName: String? = nil, lastHealthPingTime: String? = nil, health: AgentStatus? = nil, collectionStatus: String? = nil, agentType: String? = nil, connectorId: String? = nil, registeredTime: String? = nil, version: String? = nil) {
            self.agentNetworkInfoList = agentNetworkInfoList
            self.agentId = agentId
            self.hostName = hostName
            self.lastHealthPingTime = lastHealthPingTime
            self.health = health
            self.collectionStatus = collectionStatus
            self.agentType = agentType
            self.connectorId = connectorId
            self.registeredTime = registeredTime
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case agentNetworkInfoList = "agentNetworkInfoList"
            case agentId = "agentId"
            case hostName = "hostName"
            case lastHealthPingTime = "lastHealthPingTime"
            case health = "health"
            case collectionStatus = "collectionStatus"
            case agentType = "agentType"
            case connectorId = "connectorId"
            case registeredTime = "registeredTime"
            case version = "version"
        }
    }

    public struct ExportInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationsDownloadUrl", required: false, type: .string), 
            AWSShapeMember(label: "requestedEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "exportStatus", required: true, type: .enum), 
            AWSShapeMember(label: "requestedStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "exportRequestTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "isTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "exportId", required: true, type: .string), 
            AWSShapeMember(label: "statusMessage", required: true, type: .string)
        ]
        /// A URL for an Amazon S3 bucket where you can review the exported data. The URL is displayed only if the export succeeded.
        public let configurationsDownloadUrl: String?
        /// The endTime used in the StartExportTask request. If no endTime was requested, this result does not appear in ExportInfo.
        public let requestedEndTime: TimeStamp?
        /// The status of the data export job.
        public let exportStatus: ExportStatus
        /// The value of startTime parameter in the StartExportTask request. If no startTime was requested, this result does not appear in ExportInfo.
        public let requestedStartTime: TimeStamp?
        /// The time that the data export was initiated.
        public let exportRequestTime: TimeStamp
        /// If true, the export of agent information exceeded the size limit for a single export and the exported data is incomplete for the requested time range. To address this, select a smaller time range for the export by using startDate and endDate.
        public let isTruncated: Bool?
        /// A unique identifier used to query an export.
        public let exportId: String
        /// A status message provided for API callers.
        public let statusMessage: String

        public init(configurationsDownloadUrl: String? = nil, requestedEndTime: TimeStamp? = nil, exportStatus: ExportStatus, requestedStartTime: TimeStamp? = nil, exportRequestTime: TimeStamp, isTruncated: Bool? = nil, exportId: String, statusMessage: String) {
            self.configurationsDownloadUrl = configurationsDownloadUrl
            self.requestedEndTime = requestedEndTime
            self.exportStatus = exportStatus
            self.requestedStartTime = requestedStartTime
            self.exportRequestTime = exportRequestTime
            self.isTruncated = isTruncated
            self.exportId = exportId
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case configurationsDownloadUrl = "configurationsDownloadUrl"
            case requestedEndTime = "requestedEndTime"
            case exportStatus = "exportStatus"
            case requestedStartTime = "requestedStartTime"
            case exportRequestTime = "exportRequestTime"
            case isTruncated = "isTruncated"
            case exportId = "exportId"
            case statusMessage = "statusMessage"
        }
    }

    public struct CreateTagsResponse: AWSShape {

    }

    public struct ExportFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "condition", required: true, type: .string), 
            AWSShapeMember(label: "values", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// Supported condition: EQUALS 
        public let condition: String
        /// A single agentId for a Discovery Agent. An agentId can be found using the DescribeAgents action. Typically an ADS agentId is in the form o-0123456789abcdef0.
        public let values: [String]
        /// A single ExportFilter name. Supported filters: agentId.
        public let name: String

        public init(condition: String, values: [String], name: String) {
            self.condition = condition
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "condition"
            case values = "values"
            case name = "name"
        }
    }

    public struct StartDataCollectionByAgentIdsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentIds", required: true, type: .list)
        ]
        /// The IDs of the agents or connectors from which to start collecting data. If you send a request to an agent/connector ID that you do not have permission to contact, according to your AWS account, the service does not throw an exception. Instead, it returns the error in the Description field. If you send a request to multiple agents/connectors and you do not have permission to contact some of those agents/connectors, the system does not throw an exception. Instead, the system shows Failed in the Description field.
        public let agentIds: [String]

        public init(agentIds: [String]) {
            self.agentIds = agentIds
        }

        private enum CodingKeys: String, CodingKey {
            case agentIds = "agentIds"
        }
    }

    public struct AssociateConfigurationItemsToApplicationResponse: AWSShape {

    }

    public struct DeleteApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Configuration ID of an application to be deleted.
        public let configurationIds: [String]

        public init(configurationIds: [String]) {
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case configurationIds = "configurationIds"
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationId", required: false, type: .string)
        ]
        /// Configuration ID of an application to be created.
        public let configurationId: String?

        public init(configurationId: String? = nil) {
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationId = "configurationId"
        }
    }

    public struct AgentNetworkInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "macAddress", required: false, type: .string)
        ]
        /// The IP address for the host where the agent/connector resides.
        public let ipAddress: String?
        /// The MAC address for the host where the agent/connector resides.
        public let macAddress: String?

        public init(ipAddress: String? = nil, macAddress: String? = nil) {
            self.ipAddress = ipAddress
            self.macAddress = macAddress
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddress = "ipAddress"
            case macAddress = "macAddress"
        }
    }

    public struct StartExportTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportId", required: false, type: .string)
        ]
        /// A unique identifier used to query the status of an export request.
        public let exportId: String?

        public init(exportId: String? = nil) {
            self.exportId = exportId
        }

        private enum CodingKeys: String, CodingKey {
            case exportId = "exportId"
        }
    }

    public struct ListConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurations", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Returns configuration details, including the configuration ID, attribute names, and attribute values.
        public let configurations: [[String: String]]?
        /// Token to retrieve the next set of results. For example, if your call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public let nextToken: String?

        public init(configurations: [[String: String]]? = nil, nextToken: String? = nil) {
            self.configurations = configurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "configurations"
            case nextToken = "nextToken"
        }
    }

    public struct GetDiscoverySummaryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "servers", required: false, type: .long), 
            AWSShapeMember(label: "agentSummary", required: false, type: .structure), 
            AWSShapeMember(label: "connectorSummary", required: false, type: .structure), 
            AWSShapeMember(label: "serversMappedtoTags", required: false, type: .long), 
            AWSShapeMember(label: "applications", required: false, type: .long), 
            AWSShapeMember(label: "serversMappedToApplications", required: false, type: .long)
        ]
        /// The number of servers discovered.
        public let servers: Int64?
        /// Details about discovered agents, including agent status and health.
        public let agentSummary: CustomerAgentInfo?
        /// Details about discovered connectors, including connector status and health.
        public let connectorSummary: CustomerConnectorInfo?
        /// The number of servers mapped to tags.
        public let serversMappedtoTags: Int64?
        /// The number of applications discovered.
        public let applications: Int64?
        /// The number of servers mapped to applications.
        public let serversMappedToApplications: Int64?

        public init(servers: Int64? = nil, agentSummary: CustomerAgentInfo? = nil, connectorSummary: CustomerConnectorInfo? = nil, serversMappedtoTags: Int64? = nil, applications: Int64? = nil, serversMappedToApplications: Int64? = nil) {
            self.servers = servers
            self.agentSummary = agentSummary
            self.connectorSummary = connectorSummary
            self.serversMappedtoTags = serversMappedtoTags
            self.applications = applications
            self.serversMappedToApplications = serversMappedToApplications
        }

        private enum CodingKeys: String, CodingKey {
            case servers = "servers"
            case agentSummary = "agentSummary"
            case connectorSummary = "connectorSummary"
            case serversMappedtoTags = "serversMappedtoTags"
            case applications = "applications"
            case serversMappedToApplications = "serversMappedToApplications"
        }
    }

    public struct GetDiscoverySummaryRequest: AWSShape {

    }

    public struct StopDataCollectionByAgentIdsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentIds", required: true, type: .list)
        ]
        /// The IDs of the agents or connectors from which to stop collecting data.
        public let agentIds: [String]

        public init(agentIds: [String]) {
            self.agentIds = agentIds
        }

        private enum CodingKeys: String, CodingKey {
            case agentIds = "agentIds"
        }
    }

    public struct DescribeAgentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentsInfo", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.
        public let agentsInfo: [AgentInfo]?
        /// Token to retrieve the next set of results. For example, if you specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public let nextToken: String?

        public init(agentsInfo: [AgentInfo]? = nil, nextToken: String? = nil) {
            self.agentsInfo = agentsInfo
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentsInfo = "agentsInfo"
            case nextToken = "nextToken"
        }
    }

    public struct ListServerNeighborsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "neighbors", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "knownDependencyCount", required: false, type: .long)
        ]
        /// List of distinct servers that are one hop away from the given server.
        public let neighbors: [NeighborConnectionDetail]
        /// Token to retrieve the next set of results. For example, if you specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public let nextToken: String?
        /// Count of distinct servers that are one hop away from the given server.
        public let knownDependencyCount: Int64?

        public init(neighbors: [NeighborConnectionDetail], nextToken: String? = nil, knownDependencyCount: Int64? = nil) {
            self.neighbors = neighbors
            self.nextToken = nextToken
            self.knownDependencyCount = knownDependencyCount
        }

        private enum CodingKeys: String, CodingKey {
            case neighbors = "neighbors"
            case nextToken = "nextToken"
            case knownDependencyCount = "knownDependencyCount"
        }
    }

    public struct DescribeExportConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exportsInfo", required: false, type: .list)
        ]
        /// A token to get the next set of results. For example, if you specify 100 IDs for DescribeExportConfigurationsRequest$exportIds but set DescribeExportConfigurationsRequest$maxResults to 10, you get results in a set of 10. Use the token in the query to get the next set of 10.
        public let nextToken: String?
        /// Returns export details. When the status is complete, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
        public let exportsInfo: [ExportInfo]?

        public init(nextToken: String? = nil, exportsInfo: [ExportInfo]? = nil) {
            self.nextToken = nextToken
            self.exportsInfo = exportsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exportsInfo = "exportsInfo"
        }
    }

    public struct DisassociateConfigurationItemsFromApplicationResponse: AWSShape {

    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// The total number of items to return in a single page of output. The maximum value is 100.
        public let maxResults: Int32?
        /// A token to start the list. Use this token to get the next set of results.
        public let nextToken: String?
        /// You can filter the list using a key-value format. You can separate these items by using logical operators. Allowed filters include tagKey, tagValue, and configurationId. 
        public let filters: [TagFilter]?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filters: [TagFilter]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case filters = "filters"
        }
    }

}