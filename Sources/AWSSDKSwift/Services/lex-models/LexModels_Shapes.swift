// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension LexModels {

    public struct GetBotVersionsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "bots", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of BotMetadata objects, one for each numbered version of the bot plus one for the $LATEST version.
        public let bots: [BotMetadata]?
        /// A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. 
        public let nextToken: String?

        public init(bots: [BotMetadata]? = nil, nextToken: String? = nil) {
            self.bots = bots
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case bots = "bots"
            case nextToken = "nextToken"
        }
    }

    public struct CreateBotVersionResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "clarificationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "idleSessionTTLInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "abortStatement", required: false, type: .structure), 
            AWSShapeMember(label: "locale", required: false, type: .enum), 
            AWSShapeMember(label: "childDirected", required: false, type: .boolean), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "voiceId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "failureReason", required: false, type: .string)
        ]
        /// The name of the bot.
        public let name: String?
        /// The date when the bot version was created.
        public let createdDate: TimeStamp?
        /// The message that Amazon Lex uses when it doesn't understand the user's request. For more information, see . 
        public let clarificationPrompt: Prompt?
        /// A description of the bot.
        public let description: String?
        /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see .
        public let idleSessionTTLInSeconds: Int32?
        /// Checksum identifying the version of the bot that was created.
        public let checksum: String?
        /// The date when the $LATEST version of this bot was updated. 
        public let lastUpdatedDate: TimeStamp?
        /// The message that Amazon Lex uses to abort a conversation. For more information, see .
        public let abortStatement: Statement?
        ///  Specifies the target locale for the bot. 
        public let locale: Locale?
        /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the Amazon Lex FAQ. 
        public let childDirected: Bool?
        ///  When you send a request to create or update a bot, Amazon Lex sets the status response element to BUILDING. After Amazon Lex builds the bot, it sets status to READY. If Amazon Lex can't build the bot, it sets status to FAILED. Amazon Lex returns the reason for the failure in the failureReason response element. 
        public let status: Status?
        /// The Amazon Polly voice ID that Amazon Lex uses for voice interactions with the user.
        public let voiceId: String?
        /// The version of the bot. 
        public let version: String?
        /// An array of Intent objects. For more information, see .
        public let intents: [Intent]?
        /// If status is FAILED, Amazon Lex provides the reason that it failed to build the bot.
        public let failureReason: String?

        public init(name: String? = nil, createdDate: TimeStamp? = nil, clarificationPrompt: Prompt? = nil, description: String? = nil, idleSessionTTLInSeconds: Int32? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, abortStatement: Statement? = nil, locale: Locale? = nil, childDirected: Bool? = nil, status: Status? = nil, voiceId: String? = nil, version: String? = nil, intents: [Intent]? = nil, failureReason: String? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.clarificationPrompt = clarificationPrompt
            self.description = description
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.abortStatement = abortStatement
            self.locale = locale
            self.childDirected = childDirected
            self.status = status
            self.voiceId = voiceId
            self.version = version
            self.intents = intents
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case createdDate = "createdDate"
            case clarificationPrompt = "clarificationPrompt"
            case description = "description"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case abortStatement = "abortStatement"
            case locale = "locale"
            case childDirected = "childDirected"
            case status = "status"
            case voiceId = "voiceId"
            case version = "version"
            case intents = "intents"
            case failureReason = "failureReason"
        }
    }

    public struct GetSlotTypeResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "enumerationValues", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp)
        ]
        /// The name of the slot type.
        public let name: String?
        /// The date that the slot type was created.
        public let createdDate: TimeStamp?
        /// A list of EnumerationValue objects that defines the values that the slot type can take.
        public let enumerationValues: [EnumerationValue]?
        /// The version of the slot type.
        public let version: String?
        /// Checksum of the $LATEST version of the slot type.
        public let checksum: String?
        /// A description of the slot type.
        public let description: String?
        /// The date that the slot type was updated. When you create a resource, the creation date and last update date are the same.
        public let lastUpdatedDate: TimeStamp?

        public init(name: String? = nil, createdDate: TimeStamp? = nil, enumerationValues: [EnumerationValue]? = nil, version: String? = nil, checksum: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.enumerationValues = enumerationValues
            self.version = version
            self.checksum = checksum
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case createdDate = "createdDate"
            case enumerationValues = "enumerationValues"
            case version = "version"
            case checksum = "checksum"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
        }
    }

    public struct FulfillmentActivity: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "codeHook", required: false, type: .structure)
        ]
        ///  How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application. 
        public let `type`: FulfillmentActivityType
        ///  A description of the Lambda function that is run to fulfill the intent. 
        public let codeHook: CodeHook?

        public init(type: FulfillmentActivityType, codeHook: CodeHook? = nil) {
            self.`type` = `type`
            self.codeHook = codeHook
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case codeHook = "codeHook"
        }
    }

    public struct GetSlotTypesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nameContains", location: .querystring(locationName: "nameContains"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of slot types to return in the response. The default is 10.
        public let maxResults: Int32?
        /// Substring to match in slot type names. A slot type will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
        public let nameContains: String?
        /// A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch next page of slot types, specify the pagination token in the next request.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nameContains: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nameContains = "nameContains"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteIntentVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        /// The name of the intent.
        public let name: String
        /// The version of the intent to delete. You cannot delete the $LATEST version of the intent. To delete the $LATEST version, use the operation.
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct GetIntentResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "fulfillmentActivity", required: false, type: .structure), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "followUpPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "dialogCodeHook", required: false, type: .structure), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "confirmationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "sampleUtterances", required: false, type: .list), 
            AWSShapeMember(label: "rejectionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "conclusionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "parentIntentSignature", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "slots", required: false, type: .list)
        ]
        /// The name of the intent.
        public let name: String?
        /// Describes how the intent is fulfilled. For more information, see . 
        public let fulfillmentActivity: FulfillmentActivity?
        /// The date that the intent was created.
        public let createdDate: TimeStamp?
        /// If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see .
        public let followUpPrompt: FollowUpPrompt?
        /// A description of the intent.
        public let description: String?
        /// If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see . 
        public let dialogCodeHook: CodeHook?
        /// Checksum of the intent.
        public let checksum: String?
        /// The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same. 
        public let lastUpdatedDate: TimeStamp?
        /// If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see . 
        public let confirmationPrompt: Prompt?
        /// An array of sample utterances configured for the intent.
        public let sampleUtterances: [String]?
        /// If the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled. 
        public let rejectionStatement: Statement?
        /// After the Lambda function specified in the fulfillmentActivity element fulfills the intent, Amazon Lex conveys this statement to the user.
        public let conclusionStatement: Statement?
        /// A unique identifier for a built-in intent.
        public let parentIntentSignature: String?
        /// The version of the intent.
        public let version: String?
        /// An array of intent slots configured for the intent.
        public let slots: [Slot]?

        public init(name: String? = nil, fulfillmentActivity: FulfillmentActivity? = nil, createdDate: TimeStamp? = nil, followUpPrompt: FollowUpPrompt? = nil, description: String? = nil, dialogCodeHook: CodeHook? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, confirmationPrompt: Prompt? = nil, sampleUtterances: [String]? = nil, rejectionStatement: Statement? = nil, conclusionStatement: Statement? = nil, parentIntentSignature: String? = nil, version: String? = nil, slots: [Slot]? = nil) {
            self.name = name
            self.fulfillmentActivity = fulfillmentActivity
            self.createdDate = createdDate
            self.followUpPrompt = followUpPrompt
            self.description = description
            self.dialogCodeHook = dialogCodeHook
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.confirmationPrompt = confirmationPrompt
            self.sampleUtterances = sampleUtterances
            self.rejectionStatement = rejectionStatement
            self.conclusionStatement = conclusionStatement
            self.parentIntentSignature = parentIntentSignature
            self.version = version
            self.slots = slots
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case fulfillmentActivity = "fulfillmentActivity"
            case createdDate = "createdDate"
            case followUpPrompt = "followUpPrompt"
            case description = "description"
            case dialogCodeHook = "dialogCodeHook"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case confirmationPrompt = "confirmationPrompt"
            case sampleUtterances = "sampleUtterances"
            case rejectionStatement = "rejectionStatement"
            case conclusionStatement = "conclusionStatement"
            case parentIntentSignature = "parentIntentSignature"
            case version = "version"
            case slots = "slots"
        }
    }

    public struct DeleteSlotTypeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string)
        ]
        /// The name of the slot type. The name is case sensitive. 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct BotMetadata: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp)
        ]
        /// A description of the bot.
        public let description: String?
        /// The status of the bot.
        public let status: Status?
        /// The version of the bot. For a new bot, the version is always $LATEST.
        public let version: String?
        /// The name of the bot. 
        public let name: String?
        /// The date that the bot was updated. When you create a bot, the creation date and last updated date are the same. 
        public let lastUpdatedDate: TimeStamp?
        /// The date that the bot was created.
        public let createdDate: TimeStamp?

        public init(description: String? = nil, status: Status? = nil, version: String? = nil, name: String? = nil, lastUpdatedDate: TimeStamp? = nil, createdDate: TimeStamp? = nil) {
            self.description = description
            self.status = status
            self.version = version
            self.name = name
            self.lastUpdatedDate = lastUpdatedDate
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case status = "status"
            case version = "version"
            case name = "name"
            case lastUpdatedDate = "lastUpdatedDate"
            case createdDate = "createdDate"
        }
    }

    public struct GetBuiltinIntentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "signature", location: .uri(locationName: "signature"), required: true, type: .string)
        ]
        /// The unique identifier for a built-in intent. To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit.
        public let signature: String

        public init(signature: String) {
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case signature = "signature"
        }
    }

    public struct Slot: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "slotTypeVersion", required: false, type: .string), 
            AWSShapeMember(label: "slotConstraint", required: true, type: .enum), 
            AWSShapeMember(label: "slotType", required: false, type: .string), 
            AWSShapeMember(label: "sampleUtterances", required: false, type: .list), 
            AWSShapeMember(label: "priority", required: false, type: .integer), 
            AWSShapeMember(label: "valueElicitationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "responseCard", required: false, type: .string)
        ]
        /// The name of the slot.
        public let name: String
        /// A description of the slot.
        public let description: String?
        /// The version of the slot type.
        public let slotTypeVersion: String?
        /// Specifies whether the slot is required or optional. 
        public let slotConstraint: SlotConstraint
        /// The type of the slot, either a custom slot type that you defined or one of the built-in slot types.
        public let slotType: String?
        ///  If you know a specific pattern with which users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances. 
        public let sampleUtterances: [String]?
        ///  Directs Lex the order in which to elicit this slot value from the user. For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits values is arbitrary.
        public let priority: Int32?
        /// The prompt that Amazon Lex uses to elicit the slot value from the user.
        public let valueElicitationPrompt: Prompt?
        ///  A set of possible responses for the slot type used by text-based clients. A user chooses an option from the response card, instead of using text to reply. 
        public let responseCard: String?

        public init(name: String, description: String? = nil, slotTypeVersion: String? = nil, slotConstraint: SlotConstraint, slotType: String? = nil, sampleUtterances: [String]? = nil, priority: Int32? = nil, valueElicitationPrompt: Prompt? = nil, responseCard: String? = nil) {
            self.name = name
            self.description = description
            self.slotTypeVersion = slotTypeVersion
            self.slotConstraint = slotConstraint
            self.slotType = slotType
            self.sampleUtterances = sampleUtterances
            self.priority = priority
            self.valueElicitationPrompt = valueElicitationPrompt
            self.responseCard = responseCard
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case description = "description"
            case slotTypeVersion = "slotTypeVersion"
            case slotConstraint = "slotConstraint"
            case slotType = "slotType"
            case sampleUtterances = "sampleUtterances"
            case priority = "priority"
            case valueElicitationPrompt = "valueElicitationPrompt"
            case responseCard = "responseCard"
        }
    }

    public struct GetUtterancesViewResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "utterances", required: false, type: .list), 
            AWSShapeMember(label: "botName", required: false, type: .string)
        ]
        /// An array of objects, each containing a list of objects describing the utterances that were processed by your bot. The response contains a maximum of 100 UtteranceData objects for each version.
        public let utterances: [UtteranceList]?
        /// The name of the bot for which utterance information was returned.
        public let botName: String?

        public init(utterances: [UtteranceList]? = nil, botName: String? = nil) {
            self.utterances = utterances
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case utterances = "utterances"
            case botName = "botName"
        }
    }

    public struct GetIntentsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of Intent objects. For more information, see .
        public let intents: [IntentMetadata]?
        /// If the response is truncated, the response includes a pagination token that you can specify in your next request to fetch the next page of intents. 
        public let nextToken: String?

        public init(intents: [IntentMetadata]? = nil, nextToken: String? = nil) {
            self.intents = intents
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case intents = "intents"
            case nextToken = "nextToken"
        }
    }

    public struct Message: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "content", required: true, type: .string), 
            AWSShapeMember(label: "contentType", required: true, type: .enum)
        ]
        /// The text of the message.
        public let content: String
        /// The content type of the message string.
        public let contentType: ContentType

        public init(content: String, contentType: ContentType) {
            self.content = content
            self.contentType = contentType
        }

        private enum CodingKeys: String, CodingKey {
            case content = "content"
            case contentType = "contentType"
        }
    }

    public struct GetIntentVersionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The name of the intent for which versions should be returned.
        public let name: String
        /// A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. 
        public let nextToken: String?
        /// The maximum number of intent versions to return in the response. The default is 10.
        public let maxResults: Int32?

        public init(name: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.name = name
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct GetSlotTypeVersionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The name of the slot type for which versions should be returned.
        public let name: String
        /// A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. 
        public let nextToken: String?
        /// The maximum number of slot type versions to return in the response. The default is 10.
        public let maxResults: Int32?

        public init(name: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.name = name
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct CodeHook: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "uri", required: true, type: .string), 
            AWSShapeMember(label: "messageVersion", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Lambda function.
        public let uri: String
        /// The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see using-lambda.
        public let messageVersion: String

        public init(uri: String, messageVersion: String) {
            self.uri = uri
            self.messageVersion = messageVersion
        }

        private enum CodingKeys: String, CodingKey {
            case uri = "uri"
            case messageVersion = "messageVersion"
        }
    }

    public struct BuiltinSlotTypeMetadata: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportedLocales", required: false, type: .list), 
            AWSShapeMember(label: "signature", required: false, type: .string)
        ]
        /// A list of target locales for the slot. 
        public let supportedLocales: [Locale]?
        /// A unique identifier for the built-in slot type. To find the signature for a slot type, see Slot Type Reference in the Alexa Skills Kit.
        public let signature: String?

        public init(supportedLocales: [Locale]? = nil, signature: String? = nil) {
            self.supportedLocales = supportedLocales
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case supportedLocales = "supportedLocales"
            case signature = "signature"
        }
    }

    public struct GetBotVersionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The name of the bot for which versions should be returned.
        public let name: String
        /// A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. 
        public let nextToken: String?
        /// The maximum number of bot versions to return in the response. The default is 10.
        public let maxResults: Int32?

        public init(name: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.name = name
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct EnumerationValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The value of the slot type.
        public let value: String

        public init(value: String) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct GetBuiltinIntentsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "signatureContains", location: .querystring(locationName: "signatureContains"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "locale", location: .querystring(locationName: "locale"), required: false, type: .enum)
        ]
        /// Substring to match in built-in intent signatures. An intent will be returned if any part of its signature matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit.
        public let signatureContains: String?
        /// The maximum number of intents to return in the response. The default is 10.
        public let maxResults: Int32?
        /// A pagination token that fetches the next page of intents. If this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, use the pagination token in the next request.
        public let nextToken: String?
        /// A list of locales that the intent supports.
        public let locale: Locale?

        public init(signatureContains: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, locale: Locale? = nil) {
            self.signatureContains = signatureContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case signatureContains = "signatureContains"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case locale = "locale"
        }
    }

    public struct GetUtterancesViewRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "botVersions", location: .querystring(locationName: "bot_versions"), required: true, type: .list), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botname"), required: true, type: .string), 
            AWSShapeMember(label: "statusType", location: .querystring(locationName: "status_type"), required: true, type: .enum)
        ]
        /// An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.
        public let botVersions: [String]
        /// The name of the bot for which utterance information should be returned.
        public let botName: String
        /// To return utterances that were recognized and handled, useDetected. To return utterances that were not recognized, use Missed.
        public let statusType: StatusType

        public init(botVersions: [String], botName: String, statusType: StatusType) {
            self.botVersions = botVersions
            self.botName = botName
            self.statusType = statusType
        }

        private enum CodingKeys: String, CodingKey {
            case botVersions = "bot_versions"
            case botName = "botname"
            case statusType = "status_type"
        }
    }

    public struct GetBuiltinIntentResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportedLocales", required: false, type: .list), 
            AWSShapeMember(label: "slots", required: false, type: .list), 
            AWSShapeMember(label: "signature", required: false, type: .string)
        ]
        /// A list of locales that the intent supports.
        public let supportedLocales: [Locale]?
        /// An array of BuiltinIntentSlot objects, one entry for each slot type in the intent.
        public let slots: [BuiltinIntentSlot]?
        /// The unique identifier for a built-in intent.
        public let signature: String?

        public init(supportedLocales: [Locale]? = nil, slots: [BuiltinIntentSlot]? = nil, signature: String? = nil) {
            self.supportedLocales = supportedLocales
            self.slots = slots
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case supportedLocales = "supportedLocales"
            case slots = "slots"
            case signature = "signature"
        }
    }

    public struct GetBotAliasRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// The name of the bot alias. The name is case sensitive.
        public let name: String
        /// The name of the bot.
        public let botName: String

        public init(name: String, botName: String) {
            self.name = name
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botName = "botName"
        }
    }

    public enum ProcessBehavior: String, CustomStringConvertible, Codable {
        case save = "SAVE"
        case build = "BUILD"
        public var description: String { return self.rawValue }
    }

    public struct BuiltinIntentMetadata: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportedLocales", required: false, type: .list), 
            AWSShapeMember(label: "signature", required: false, type: .string)
        ]
        /// A list of identifiers for the locales that the intent supports.
        public let supportedLocales: [Locale]?
        /// A unique identifier for the built-in intent. To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit.
        public let signature: String?

        public init(supportedLocales: [Locale]? = nil, signature: String? = nil) {
            self.supportedLocales = supportedLocales
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case supportedLocales = "supportedLocales"
            case signature = "signature"
        }
    }

    public struct BotAliasMetadata: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "botVersion", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "botName", required: false, type: .string)
        ]
        /// The name of the bot alias.
        public let name: String?
        /// The version of the Amazon Lex bot to which the alias points.
        public let botVersion: String?
        /// The date that the bot alias was created.
        public let createdDate: TimeStamp?
        /// A description of the bot alias.
        public let description: String?
        /// Checksum of the bot alias.
        public let checksum: String?
        /// The date that the bot alias was updated. When you create a resource, the creation date and last updated date are the same.
        public let lastUpdatedDate: TimeStamp?
        /// The name of the bot to which the alias points.
        public let botName: String?

        public init(name: String? = nil, botVersion: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, botName: String? = nil) {
            self.name = name
            self.botVersion = botVersion
            self.createdDate = createdDate
            self.description = description
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botVersion = "botVersion"
            case createdDate = "createdDate"
            case description = "description"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case botName = "botName"
        }
    }

    public struct GetSlotTypesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "slotTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of objects, one for each slot type, that provides information such as the name of the slot type, the version, and a description.
        public let slotTypes: [SlotTypeMetadata]?
        /// If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of slot types.
        public let nextToken: String?

        public init(slotTypes: [SlotTypeMetadata]? = nil, nextToken: String? = nil) {
            self.slotTypes = slotTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case slotTypes = "slotTypes"
            case nextToken = "nextToken"
        }
    }

    public struct PutIntentResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "fulfillmentActivity", required: false, type: .structure), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "followUpPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "dialogCodeHook", required: false, type: .structure), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "confirmationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "sampleUtterances", required: false, type: .list), 
            AWSShapeMember(label: "rejectionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "conclusionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "parentIntentSignature", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "slots", required: false, type: .list)
        ]
        /// The name of the intent.
        public let name: String?
        /// If defined in the intent, Amazon Lex invokes this Lambda function to fulfill the intent after the user provides all of the information required by the intent.
        public let fulfillmentActivity: FulfillmentActivity?
        /// The date that the intent was created.
        public let createdDate: TimeStamp?
        /// If defined in the intent, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled.
        public let followUpPrompt: FollowUpPrompt?
        /// A description of the intent.
        public let description: String?
        /// If defined in the intent, Amazon Lex invokes this Lambda function for each user input.
        public let dialogCodeHook: CodeHook?
        /// Checksum of the $LATESTversion of the intent created or updated.
        public let checksum: String?
        /// The date that the intent was updated. When you create a resource, the creation date and last update dates are the same.
        public let lastUpdatedDate: TimeStamp?
        /// If defined in the intent, Amazon Lex prompts the user to confirm the intent before fulfilling it.
        public let confirmationPrompt: Prompt?
        ///  An array of sample utterances that are configured for the intent. 
        public let sampleUtterances: [String]?
        /// If the user answers "no" to the question defined in confirmationPrompt Amazon Lex responds with this statement to acknowledge that the intent was canceled. 
        public let rejectionStatement: Statement?
        /// After the Lambda function specified in thefulfillmentActivityintent fulfills the intent, Amazon Lex conveys this statement to the user.
        public let conclusionStatement: Statement?
        /// A unique identifier for the built-in intent that this intent is based on.
        public let parentIntentSignature: String?
        /// The version of the intent. For a new intent, the version is always $LATEST.
        public let version: String?
        /// An array of intent slots that are configured for the intent.
        public let slots: [Slot]?

        public init(name: String? = nil, fulfillmentActivity: FulfillmentActivity? = nil, createdDate: TimeStamp? = nil, followUpPrompt: FollowUpPrompt? = nil, description: String? = nil, dialogCodeHook: CodeHook? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, confirmationPrompt: Prompt? = nil, sampleUtterances: [String]? = nil, rejectionStatement: Statement? = nil, conclusionStatement: Statement? = nil, parentIntentSignature: String? = nil, version: String? = nil, slots: [Slot]? = nil) {
            self.name = name
            self.fulfillmentActivity = fulfillmentActivity
            self.createdDate = createdDate
            self.followUpPrompt = followUpPrompt
            self.description = description
            self.dialogCodeHook = dialogCodeHook
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.confirmationPrompt = confirmationPrompt
            self.sampleUtterances = sampleUtterances
            self.rejectionStatement = rejectionStatement
            self.conclusionStatement = conclusionStatement
            self.parentIntentSignature = parentIntentSignature
            self.version = version
            self.slots = slots
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case fulfillmentActivity = "fulfillmentActivity"
            case createdDate = "createdDate"
            case followUpPrompt = "followUpPrompt"
            case description = "description"
            case dialogCodeHook = "dialogCodeHook"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case confirmationPrompt = "confirmationPrompt"
            case sampleUtterances = "sampleUtterances"
            case rejectionStatement = "rejectionStatement"
            case conclusionStatement = "conclusionStatement"
            case parentIntentSignature = "parentIntentSignature"
            case version = "version"
            case slots = "slots"
        }
    }

    public struct GetBotChannelAssociationResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "botAlias", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "botConfiguration", required: false, type: .map), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "botName", required: false, type: .string)
        ]
        /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
        public let botAlias: String?
        /// The name of the association between the bot and the channel.
        public let name: String?
        /// Provides information that the messaging platform needs to communicate with the Amazon Lex bot.
        public let botConfiguration: [String: String]?
        /// The date that the association between the bot and the channel was created.
        public let createdDate: TimeStamp?
        /// A description of the association between the bot and the channel.
        public let description: String?
        /// The type of the messaging platform.
        public let `type`: ChannelType?
        /// The name of the Amazon Lex bot.
        public let botName: String?

        public init(botAlias: String? = nil, name: String? = nil, botConfiguration: [String: String]? = nil, createdDate: TimeStamp? = nil, description: String? = nil, type: ChannelType? = nil, botName: String? = nil) {
            self.botAlias = botAlias
            self.name = name
            self.botConfiguration = botConfiguration
            self.createdDate = createdDate
            self.description = description
            self.`type` = `type`
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "botAlias"
            case name = "name"
            case botConfiguration = "botConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case `type` = "type"
            case botName = "botName"
        }
    }

    public struct GetBotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "versionOrAlias", location: .uri(locationName: "versionoralias"), required: true, type: .string)
        ]
        /// The name of the bot. The name is case sensitive. 
        public let name: String
        /// The version or alias of the bot.
        public let versionOrAlias: String

        public init(name: String, versionOrAlias: String) {
            self.name = name
            self.versionOrAlias = versionOrAlias
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case versionOrAlias = "versionoralias"
        }
    }

    public struct CreateSlotTypeVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string)
        ]
        /// The name of the slot type that you want to create a new version for. The name is case sensitive. 
        public let name: String
        /// Checksum for the $LATEST version of the slot type that you want to publish. If you specify a checksum and the $LATEST version of the slot type has a different checksum, Amazon Lex returns a PreconditionFailedException exception and doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.
        public let checksum: String?

        public init(name: String, checksum: String? = nil) {
            self.name = name
            self.checksum = checksum
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case checksum = "checksum"
        }
    }

    public enum ChannelType: String, CustomStringConvertible, Codable {
        case facebook = "Facebook"
        case slack = "Slack"
        case twilioSms = "Twilio-Sms"
        public var description: String { return self.rawValue }
    }

    public struct DeleteSlotTypeVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        /// The name of the slot type.
        public let name: String
        /// The version of the slot type to delete. You cannot delete the $LATEST version of the slot type. To delete the $LATEST version, use the operation.
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct GetBotChannelAssociationsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "botChannelAssociations", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of objects, one for each association, that provides information about the Amazon Lex bot and its association with the channel. 
        public let botChannelAssociations: [BotChannelAssociation]?
        /// A pagination token that fetches the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request. 
        public let nextToken: String?

        public init(botChannelAssociations: [BotChannelAssociation]? = nil, nextToken: String? = nil) {
            self.botChannelAssociations = botChannelAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case botChannelAssociations = "botChannelAssociations"
            case nextToken = "nextToken"
        }
    }

    public struct GetBotAliasesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nameContains", location: .querystring(locationName: "nameContains"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// The maximum number of aliases to return in the response. The default is 50. . 
        public let maxResults: Int32?
        /// Substring to match in bot alias names. An alias will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
        public let nameContains: String?
        /// A pagination token for fetching the next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request. 
        public let nextToken: String?
        /// The name of the bot.
        public let botName: String

        public init(maxResults: Int32? = nil, nameContains: String? = nil, nextToken: String? = nil, botName: String) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nameContains = "nameContains"
            case nextToken = "nextToken"
            case botName = "botName"
        }
    }

    public struct GetIntentVersionsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of IntentMetadata objects, one for each numbered version of the intent plus one for the $LATEST version.
        public let intents: [IntentMetadata]?
        /// A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. 
        public let nextToken: String?

        public init(intents: [IntentMetadata]? = nil, nextToken: String? = nil) {
            self.intents = intents
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case intents = "intents"
            case nextToken = "nextToken"
        }
    }

    public struct IntentMetadata: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp)
        ]
        /// A description of the intent.
        public let description: String?
        /// The version of the intent.
        public let version: String?
        /// The name of the intent.
        public let name: String?
        /// The date that the intent was updated. When you create an intent, the creation date and last updated date are the same.
        public let lastUpdatedDate: TimeStamp?
        /// The date that the intent was created.
        public let createdDate: TimeStamp?

        public init(description: String? = nil, version: String? = nil, name: String? = nil, lastUpdatedDate: TimeStamp? = nil, createdDate: TimeStamp? = nil) {
            self.description = description
            self.version = version
            self.name = name
            self.lastUpdatedDate = lastUpdatedDate
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case version = "version"
            case name = "name"
            case lastUpdatedDate = "lastUpdatedDate"
            case createdDate = "createdDate"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case detected = "Detected"
        case missed = "Missed"
        public var description: String { return self.rawValue }
    }

    public struct GetBotResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "clarificationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "idleSessionTTLInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "abortStatement", required: false, type: .structure), 
            AWSShapeMember(label: "locale", required: false, type: .enum), 
            AWSShapeMember(label: "childDirected", required: false, type: .boolean), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "voiceId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "failureReason", required: false, type: .string)
        ]
        /// The name of the bot.
        public let name: String?
        /// The date that the bot was created.
        public let createdDate: TimeStamp?
        /// The message Amazon Lex uses when it doesn't understand the user's request. For more information, see . 
        public let clarificationPrompt: Prompt?
        /// A description of the bot.
        public let description: String?
        /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see .
        public let idleSessionTTLInSeconds: Int32?
        /// Checksum of the bot used to identify a specific revision of the bot's $LATEST version.
        public let checksum: String?
        /// The date that the bot was updated. When you create a resource, the creation date and last updated date are the same. 
        public let lastUpdatedDate: TimeStamp?
        /// The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see .
        public let abortStatement: Statement?
        ///  The target locale for the bot. 
        public let locale: Locale?
        /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the Amazon Lex FAQ. 
        public let childDirected: Bool?
        /// The status of the bot. If the bot is ready to run, the status is READY. If there was a problem with building the bot, the status is FAILED and the failureReason explains why the bot did not build. If the bot was saved but not built, the status is NOT BUILT.
        public let status: Status?
        /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see .
        public let voiceId: String?
        /// The version of the bot. For a new bot, the version is always $LATEST.
        public let version: String?
        /// An array of intent objects. For more information, see .
        public let intents: [Intent]?
        /// If status is FAILED, Amazon Lex explains why it failed to build the bot.
        public let failureReason: String?

        public init(name: String? = nil, createdDate: TimeStamp? = nil, clarificationPrompt: Prompt? = nil, description: String? = nil, idleSessionTTLInSeconds: Int32? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, abortStatement: Statement? = nil, locale: Locale? = nil, childDirected: Bool? = nil, status: Status? = nil, voiceId: String? = nil, version: String? = nil, intents: [Intent]? = nil, failureReason: String? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.clarificationPrompt = clarificationPrompt
            self.description = description
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.abortStatement = abortStatement
            self.locale = locale
            self.childDirected = childDirected
            self.status = status
            self.voiceId = voiceId
            self.version = version
            self.intents = intents
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case createdDate = "createdDate"
            case clarificationPrompt = "clarificationPrompt"
            case description = "description"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case abortStatement = "abortStatement"
            case locale = "locale"
            case childDirected = "childDirected"
            case status = "status"
            case voiceId = "voiceId"
            case version = "version"
            case intents = "intents"
            case failureReason = "failureReason"
        }
    }

    public struct DeleteUtterancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "userId", location: .uri(locationName: "userId"), required: true, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        ///  The unique identifier for the user that made the utterances. This is the user ID that was sent in the or operation request that contained the utterance.
        public let userId: String
        /// The name of the bot that stored the utterances.
        public let botName: String

        public init(userId: String, botName: String) {
            self.userId = userId
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "userId"
            case botName = "botName"
        }
    }

    public struct GetBotAliasResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "botVersion", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "botName", required: false, type: .string)
        ]
        /// The name of the bot alias.
        public let name: String?
        /// The version of the bot that the alias points to.
        public let botVersion: String?
        /// The date that the bot alias was created.
        public let createdDate: TimeStamp?
        /// A description of the bot alias.
        public let description: String?
        /// Checksum of the bot alias.
        public let checksum: String?
        /// The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
        public let lastUpdatedDate: TimeStamp?
        /// The name of the bot that the alias points to.
        public let botName: String?

        public init(name: String? = nil, botVersion: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, botName: String? = nil) {
            self.name = name
            self.botVersion = botVersion
            self.createdDate = createdDate
            self.description = description
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botVersion = "botVersion"
            case createdDate = "createdDate"
            case description = "description"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case botName = "botName"
        }
    }

    public struct CreateSlotTypeVersionResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "enumerationValues", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp)
        ]
        /// The name of the slot type.
        public let name: String?
        /// The date that the slot type was created.
        public let createdDate: TimeStamp?
        /// A list of EnumerationValue objects that defines the values that the slot type can take.
        public let enumerationValues: [EnumerationValue]?
        /// The version assigned to the new slot type version. 
        public let version: String?
        /// Checksum of the $LATEST version of the slot type.
        public let checksum: String?
        /// A description of the slot type.
        public let description: String?
        /// The date that the slot type was updated. When you create a resource, the creation date and last update date are the same.
        public let lastUpdatedDate: TimeStamp?

        public init(name: String? = nil, createdDate: TimeStamp? = nil, enumerationValues: [EnumerationValue]? = nil, version: String? = nil, checksum: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.enumerationValues = enumerationValues
            self.version = version
            self.checksum = checksum
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case createdDate = "createdDate"
            case enumerationValues = "enumerationValues"
            case version = "version"
            case checksum = "checksum"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
        }
    }

    public enum FulfillmentActivityType: String, CustomStringConvertible, Codable {
        case returnintent = "ReturnIntent"
        case codehook = "CodeHook"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBotVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        /// The name of the bot.
        public let name: String
        /// The version of the bot to delete. You cannot delete the $LATEST version of the bot. To delete the $LATEST version, use the operation.
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public enum ReferenceType: String, CustomStringConvertible, Codable {
        case intent = "Intent"
        case bot = "Bot"
        case botalias = "BotAlias"
        case botchannel = "BotChannel"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBotAliasRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// The name of the alias to delete. The name is case sensitive. 
        public let name: String
        /// The name of the bot that the alias points to.
        public let botName: String

        public init(name: String, botName: String) {
            self.name = name
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botName = "botName"
        }
    }

    public struct GetBotsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "bots", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of botMetadata objects, with one entry for each bot. 
        public let bots: [BotMetadata]?
        /// If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of bots. 
        public let nextToken: String?

        public init(bots: [BotMetadata]? = nil, nextToken: String? = nil) {
            self.bots = bots
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case bots = "bots"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteIntentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string)
        ]
        /// The name of the intent. The name is case sensitive. 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct GetIntentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        /// The name of the intent. The name is case sensitive. 
        public let name: String
        /// The version of the intent.
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public enum SlotConstraint: String, CustomStringConvertible, Codable {
        case required = "Required"
        case optional = "Optional"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string)
        ]
        /// The name of the bot. The name is case sensitive. 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct CreateIntentVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string)
        ]
        /// The name of the intent that you want to create a new version of. The name is case sensitive. 
        public let name: String
        /// Checksum of the $LATEST version of the intent that should be used to create the new version. If you specify a checksum and the $LATEST version of the intent has a different checksum, Amazon Lex returns a PreconditionFailedException exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.
        public let checksum: String?

        public init(name: String, checksum: String? = nil) {
            self.name = name
            self.checksum = checksum
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case checksum = "checksum"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case building = "BUILDING"
        case ready = "READY"
        case failed = "FAILED"
        case notBuilt = "NOT_BUILT"
        public var description: String { return self.rawValue }
    }

    public enum Locale: String, CustomStringConvertible, Codable {
        case enUs = "en-US"
        public var description: String { return self.rawValue }
    }

    public struct PutBotAliasRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "botVersion", required: true, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// A description of the alias.
        public let description: String?
        /// The name of the alias. The name is not case sensitive.
        public let name: String
        /// Identifies a specific revision of the $LATEST version. When you create a new bot alias, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a bot alias, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
        public let checksum: String?
        /// The version of the bot.
        public let botVersion: String
        /// The name of the bot.
        public let botName: String

        public init(description: String? = nil, name: String, checksum: String? = nil, botVersion: String, botName: String) {
            self.description = description
            self.name = name
            self.checksum = checksum
            self.botVersion = botVersion
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case checksum = "checksum"
            case botVersion = "botVersion"
            case botName = "botName"
        }
    }

    public struct PutIntentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "rejectionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "fulfillmentActivity", required: false, type: .structure), 
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "conclusionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "dialogCodeHook", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "parentIntentSignature", required: false, type: .string), 
            AWSShapeMember(label: "followUpPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "confirmationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "slots", required: false, type: .list), 
            AWSShapeMember(label: "sampleUtterances", required: false, type: .list)
        ]
        /// When the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled.   You must provide both the rejectionStatement and the confirmationPrompt, or neither. 
        public let rejectionStatement: Statement?
        ///  Describes how the intent is fulfilled. For example, after a user provides all of the information for a pizza order, fulfillmentActivity defines how the bot places an order with a local pizza store.   You might configure Amazon Lex to return all of the intent information to the client application, or direct it to invoke a Lambda function that can process the intent (for example, place an order with a pizzeria). 
        public let fulfillmentActivity: FulfillmentActivity?
        /// The name of the intent. The name is not case sensitive.  The name can't match a built-in intent name, or a built-in intent name with "AMAZON." removed. For example, because there is a built-in intent called AMAZON.HelpIntent, you can't create a custom intent called HelpIntent. For a list of built-in intents, see Standard Built-in Intents in the Alexa Skills Kit.
        public let name: String
        ///  The statement that you want Amazon Lex to convey to the user after the intent is successfully fulfilled by the Lambda function.  This element is relevant only if you provide a Lambda function in the fulfillmentActivity. If you return the intent to the client application, you can't specify this element.  The followUpPrompt and conclusionStatement are mutually exclusive. You can specify only one. 
        public let conclusionStatement: Statement?
        ///  Specifies a Lambda function to invoke for each user input. You can invoke this Lambda function to personalize user interaction.  For example, suppose your bot determines that the user is John. Your Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, GlutenIntolerant, to true. You might find John's phone number and set the corresponding session attribute. 
        public let dialogCodeHook: CodeHook?
        /// A description of the intent.
        public let description: String?
        /// A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit.
        public let parentIntentSignature: String?
        /// A user prompt for additional activity after an intent is fulfilled. For example, after the OrderPizza intent is fulfilled (your Lambda function placed an order with a pizzeria), you might prompt the user to find if they want to order a drink (assuming that you have defined an OrderDrink intent in your bot).  The followUpPrompt and conclusionStatement are mutually exclusive. You can specify only one. For example, your bot may not solicit both the following:   Follow up prompt - "$session.FirstName, your pizza order has been placed. Would you like to order a drink or a dessert?"   Conclusion statement - "$session.FirstName, your pizza order has been placed."  
        public let followUpPrompt: FollowUpPrompt?
        /// Identifies a specific revision of the $LATEST version. When you create a new intent, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a intent, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
        public let checksum: String?
        /// Prompts the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.   You you must provide both the rejectionStatement and the confirmationPrompt, or neither. 
        public let confirmationPrompt: Prompt?
        /// An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see &lt;xref linkend="how-it-works"/&gt;. 
        public let slots: [Slot]?
        /// An array of utterances (strings) that a user might say to signal the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".  In each utterance, a slot name is enclosed in curly braces. 
        public let sampleUtterances: [String]?

        public init(rejectionStatement: Statement? = nil, fulfillmentActivity: FulfillmentActivity? = nil, name: String, conclusionStatement: Statement? = nil, dialogCodeHook: CodeHook? = nil, description: String? = nil, parentIntentSignature: String? = nil, followUpPrompt: FollowUpPrompt? = nil, checksum: String? = nil, confirmationPrompt: Prompt? = nil, slots: [Slot]? = nil, sampleUtterances: [String]? = nil) {
            self.rejectionStatement = rejectionStatement
            self.fulfillmentActivity = fulfillmentActivity
            self.name = name
            self.conclusionStatement = conclusionStatement
            self.dialogCodeHook = dialogCodeHook
            self.description = description
            self.parentIntentSignature = parentIntentSignature
            self.followUpPrompt = followUpPrompt
            self.checksum = checksum
            self.confirmationPrompt = confirmationPrompt
            self.slots = slots
            self.sampleUtterances = sampleUtterances
        }

        private enum CodingKeys: String, CodingKey {
            case rejectionStatement = "rejectionStatement"
            case fulfillmentActivity = "fulfillmentActivity"
            case name = "name"
            case conclusionStatement = "conclusionStatement"
            case dialogCodeHook = "dialogCodeHook"
            case description = "description"
            case parentIntentSignature = "parentIntentSignature"
            case followUpPrompt = "followUpPrompt"
            case checksum = "checksum"
            case confirmationPrompt = "confirmationPrompt"
            case slots = "slots"
            case sampleUtterances = "sampleUtterances"
        }
    }

    public struct GetBuiltinSlotTypesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "slotTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of BuiltInSlotTypeMetadata objects, one entry for each slot type returned.
        public let slotTypes: [BuiltinSlotTypeMetadata]?
        /// If the response is truncated, the response includes a pagination token that you can use in your next request to fetch the next page of slot types.
        public let nextToken: String?

        public init(slotTypes: [BuiltinSlotTypeMetadata]? = nil, nextToken: String? = nil) {
            self.slotTypes = slotTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case slotTypes = "slotTypes"
            case nextToken = "nextToken"
        }
    }

    public struct Intent: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "intentName", required: true, type: .string), 
            AWSShapeMember(label: "intentVersion", required: true, type: .string)
        ]
        /// The name of the intent.
        public let intentName: String
        /// The version of the intent.
        public let intentVersion: String

        public init(intentName: String, intentVersion: String) {
            self.intentName = intentName
            self.intentVersion = intentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case intentName = "intentName"
            case intentVersion = "intentVersion"
        }
    }

    public struct DeleteBotChannelAssociationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "aliasName"), required: true, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// The name of the association. The name is case sensitive. 
        public let name: String
        /// An alias that points to the specific version of the Amazon Lex bot to which this association is being made.
        public let botAlias: String
        /// The name of the Amazon Lex bot.
        public let botName: String

        public init(name: String, botAlias: String, botName: String) {
            self.name = name
            self.botAlias = botAlias
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botAlias = "aliasName"
            case botName = "botName"
        }
    }

    public struct CreateBotVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string)
        ]
        /// The name of the bot that you want to create a new version of. The name is case sensitive. 
        public let name: String
        /// Identifies a specific revision of the $LATEST version of the bot. If you specify a checksum and the $LATEST version of the bot has a different checksum, a PreconditionFailedException exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.
        public let checksum: String?

        public init(name: String, checksum: String? = nil) {
            self.name = name
            self.checksum = checksum
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case checksum = "checksum"
        }
    }

    public struct PutBotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "childDirected", required: true, type: .boolean), 
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "processBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "idleSessionTTLInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "clarificationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "voiceId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "abortStatement", required: false, type: .structure), 
            AWSShapeMember(label: "locale", required: true, type: .enum)
        ]
        /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the Amazon Lex FAQ. 
        public let childDirected: Bool
        /// The name of the bot. The name is not case sensitive. 
        public let name: String
        /// If you set the processBehavior element to Build, Amazon Lex builds the bot so that it can be run. If you set the element to SaveAmazon Lex saves the bot, but doesn't build it.  If you don't specify this value, the default value is Save.
        public let processBehavior: ProcessBehavior?
        /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over. If you don't include the idleSessionTTLInSeconds element in a PutBot operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot. The default is 300 seconds (5 minutes).
        public let idleSessionTTLInSeconds: Int32?
        /// When Amazon Lex doesn't understand the user's intent, it uses one of these messages to get clarification. For example, "Sorry, I didn't understand. Please repeat." Amazon Lex repeats the clarification prompt the number of times specified in maxAttempts. If Amazon Lex still can't understand, it sends the message specified in abortStatement. 
        public let clarificationPrompt: Prompt?
        /// The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see Voice in the Amazon Polly Developer Guide.
        public let voiceId: String?
        /// A description of the bot.
        public let description: String?
        /// Identifies a specific revision of the $LATEST version. When you create a new bot, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a bot, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
        public let checksum: String?
        /// An array of Intent objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see how-it-works.
        public let intents: [Intent]?
        /// When Amazon Lex can't understand the user's input in context, it tries to elicit the information a few times. After that, Amazon Lex sends the message defined in abortStatement to the user, and then aborts the conversation. To set the number of retries, use the valueElicitationPrompt field for the slot type.  For example, in a pizza ordering bot, Amazon Lex might ask a user "What type of crust would you like?" If the user's response is not one of the expected responses (for example, "thin crust, "deep dish," etc.), Amazon Lex tries to elicit a correct response a few more times.  For example, in a pizza ordering application, OrderPizza might be one of the intents. This intent might require the CrustType slot. You specify the valueElicitationPrompt field when you create the CrustType slot.
        public let abortStatement: Statement?
        ///  Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot.  The default is en-US.
        public let locale: Locale

        public init(childDirected: Bool, name: String, processBehavior: ProcessBehavior? = nil, idleSessionTTLInSeconds: Int32? = nil, clarificationPrompt: Prompt? = nil, voiceId: String? = nil, description: String? = nil, checksum: String? = nil, intents: [Intent]? = nil, abortStatement: Statement? = nil, locale: Locale) {
            self.childDirected = childDirected
            self.name = name
            self.processBehavior = processBehavior
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.clarificationPrompt = clarificationPrompt
            self.voiceId = voiceId
            self.description = description
            self.checksum = checksum
            self.intents = intents
            self.abortStatement = abortStatement
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case childDirected = "childDirected"
            case name = "name"
            case processBehavior = "processBehavior"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case clarificationPrompt = "clarificationPrompt"
            case voiceId = "voiceId"
            case description = "description"
            case checksum = "checksum"
            case intents = "intents"
            case abortStatement = "abortStatement"
            case locale = "locale"
        }
    }

    public struct PutSlotTypeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "enumerationValues", required: false, type: .list)
        ]
        /// A description of the slot type.
        public let description: String?
        /// The name of the slot type. The name is not case sensitive.  The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called AMAZON.DATE, you can't create a custom slot type called DATE. For a list of built-in slot types, see Slot Type Reference in the Alexa Skills Kit.
        public let name: String
        /// Identifies a specific revision of the $LATEST version. When you create a new slot type, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a slot type, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
        public let checksum: String?
        /// A list of EnumerationValue objects that defines the values that the slot type can take.
        public let enumerationValues: [EnumerationValue]?

        public init(description: String? = nil, name: String, checksum: String? = nil, enumerationValues: [EnumerationValue]? = nil) {
            self.description = description
            self.name = name
            self.checksum = checksum
            self.enumerationValues = enumerationValues
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case checksum = "checksum"
            case enumerationValues = "enumerationValues"
        }
    }

    public struct CreateIntentVersionResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "fulfillmentActivity", required: false, type: .structure), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "followUpPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "dialogCodeHook", required: false, type: .structure), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "confirmationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "sampleUtterances", required: false, type: .list), 
            AWSShapeMember(label: "rejectionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "conclusionStatement", required: false, type: .structure), 
            AWSShapeMember(label: "parentIntentSignature", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "slots", required: false, type: .list)
        ]
        /// The name of the intent.
        public let name: String?
        ///  Describes how the intent is fulfilled. 
        public let fulfillmentActivity: FulfillmentActivity?
        /// The date that the intent was created.
        public let createdDate: TimeStamp?
        /// If defined, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. 
        public let followUpPrompt: FollowUpPrompt?
        /// A description of the intent.
        public let description: String?
        /// If defined, Amazon Lex invokes this Lambda function for each user input.
        public let dialogCodeHook: CodeHook?
        /// Checksum of the intent version created.
        public let checksum: String?
        /// The date that the intent was updated. 
        public let lastUpdatedDate: TimeStamp?
        /// If defined, the prompt that Amazon Lex uses to confirm the user's intent before fulfilling it. 
        public let confirmationPrompt: Prompt?
        /// An array of sample utterances configured for the intent. 
        public let sampleUtterances: [String]?
        /// If the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled. 
        public let rejectionStatement: Statement?
        /// After the Lambda function specified in the fulfillmentActivity field fulfills the intent, Amazon Lex conveys this statement to the user. 
        public let conclusionStatement: Statement?
        /// A unique identifier for a built-in intent.
        public let parentIntentSignature: String?
        /// The version number assigned to the new version of the intent.
        public let version: String?
        /// An array of slot types that defines the information required to fulfill the intent.
        public let slots: [Slot]?

        public init(name: String? = nil, fulfillmentActivity: FulfillmentActivity? = nil, createdDate: TimeStamp? = nil, followUpPrompt: FollowUpPrompt? = nil, description: String? = nil, dialogCodeHook: CodeHook? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, confirmationPrompt: Prompt? = nil, sampleUtterances: [String]? = nil, rejectionStatement: Statement? = nil, conclusionStatement: Statement? = nil, parentIntentSignature: String? = nil, version: String? = nil, slots: [Slot]? = nil) {
            self.name = name
            self.fulfillmentActivity = fulfillmentActivity
            self.createdDate = createdDate
            self.followUpPrompt = followUpPrompt
            self.description = description
            self.dialogCodeHook = dialogCodeHook
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.confirmationPrompt = confirmationPrompt
            self.sampleUtterances = sampleUtterances
            self.rejectionStatement = rejectionStatement
            self.conclusionStatement = conclusionStatement
            self.parentIntentSignature = parentIntentSignature
            self.version = version
            self.slots = slots
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case fulfillmentActivity = "fulfillmentActivity"
            case createdDate = "createdDate"
            case followUpPrompt = "followUpPrompt"
            case description = "description"
            case dialogCodeHook = "dialogCodeHook"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case confirmationPrompt = "confirmationPrompt"
            case sampleUtterances = "sampleUtterances"
            case rejectionStatement = "rejectionStatement"
            case conclusionStatement = "conclusionStatement"
            case parentIntentSignature = "parentIntentSignature"
            case version = "version"
            case slots = "slots"
        }
    }

    public struct FollowUpPrompt: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "rejectionStatement", required: true, type: .structure), 
            AWSShapeMember(label: "prompt", required: true, type: .structure)
        ]
        /// If the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled. 
        public let rejectionStatement: Statement
        /// Obtains information from the user. 
        public let prompt: Prompt

        public init(rejectionStatement: Statement, prompt: Prompt) {
            self.rejectionStatement = rejectionStatement
            self.prompt = prompt
        }

        private enum CodingKeys: String, CodingKey {
            case rejectionStatement = "rejectionStatement"
            case prompt = "prompt"
        }
    }

    public struct GetBotAliasesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "BotAliases", required: false, type: .list)
        ]
        /// A pagination token for fetching next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request. 
        public let nextToken: String?
        /// An array of BotAliasMetadata objects, each describing a bot alias.
        public let botAliases: [BotAliasMetadata]?

        public init(nextToken: String? = nil, botAliases: [BotAliasMetadata]? = nil) {
            self.nextToken = nextToken
            self.botAliases = botAliases
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case botAliases = "BotAliases"
        }
    }

    public struct UtteranceList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "utterances", required: false, type: .list), 
            AWSShapeMember(label: "botVersion", required: false, type: .string)
        ]
        /// One or more objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.
        public let utterances: [UtteranceData]?
        /// The version of the bot that processed the list.
        public let botVersion: String?

        public init(utterances: [UtteranceData]? = nil, botVersion: String? = nil) {
            self.utterances = utterances
            self.botVersion = botVersion
        }

        private enum CodingKeys: String, CodingKey {
            case utterances = "utterances"
            case botVersion = "botVersion"
        }
    }

    public struct UtteranceData: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "firstUtteredDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastUtteredDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "utteranceString", required: false, type: .string), 
            AWSShapeMember(label: "distinctUsers", required: false, type: .integer), 
            AWSShapeMember(label: "count", required: false, type: .integer)
        ]
        /// The date that the utterance was first recorded.
        public let firstUtteredDate: TimeStamp?
        /// The date that the utterance was last recorded.
        public let lastUtteredDate: TimeStamp?
        /// The text that was entered by the user or the text representation of an audio clip.
        public let utteranceString: String?
        /// The total number of individuals that used the utterance.
        public let distinctUsers: Int32?
        /// The number of times that the utterance was processed.
        public let count: Int32?

        public init(firstUtteredDate: TimeStamp? = nil, lastUtteredDate: TimeStamp? = nil, utteranceString: String? = nil, distinctUsers: Int32? = nil, count: Int32? = nil) {
            self.firstUtteredDate = firstUtteredDate
            self.lastUtteredDate = lastUtteredDate
            self.utteranceString = utteranceString
            self.distinctUsers = distinctUsers
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case firstUtteredDate = "firstUtteredDate"
            case lastUtteredDate = "lastUtteredDate"
            case utteranceString = "utteranceString"
            case distinctUsers = "distinctUsers"
            case count = "count"
        }
    }

    public enum ContentType: String, CustomStringConvertible, Codable {
        case plaintext = "PlainText"
        case ssml = "SSML"
        public var description: String { return self.rawValue }
    }

    public struct GetBotsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nameContains", location: .querystring(locationName: "nameContains"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of bots to return in the response that the request will return. The default is 10.
        public let maxResults: Int32?
        /// Substring to match in bot names. A bot will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
        public let nameContains: String?
        /// A pagination token that fetches the next page of bots. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of bots, specify the pagination token in the next request. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nameContains: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nameContains = "nameContains"
            case nextToken = "nextToken"
        }
    }

    public struct SlotTypeMetadata: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp)
        ]
        /// A description of the slot type.
        public let description: String?
        /// The version of the slot type.
        public let version: String?
        /// The name of the slot type.
        public let name: String?
        /// The date that the slot type was updated. When you create a resource, the creation date and last updated date are the same. 
        public let lastUpdatedDate: TimeStamp?
        /// The date that the slot type was created.
        public let createdDate: TimeStamp?

        public init(description: String? = nil, version: String? = nil, name: String? = nil, lastUpdatedDate: TimeStamp? = nil, createdDate: TimeStamp? = nil) {
            self.description = description
            self.version = version
            self.name = name
            self.lastUpdatedDate = lastUpdatedDate
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case version = "version"
            case name = "name"
            case lastUpdatedDate = "lastUpdatedDate"
            case createdDate = "createdDate"
        }
    }

    public struct GetIntentsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nameContains", location: .querystring(locationName: "nameContains"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of intents to return in the response. The default is 10.
        public let maxResults: Int32?
        /// Substring to match in intent names. An intent will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
        public let nameContains: String?
        /// A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nameContains: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nameContains = "nameContains"
            case nextToken = "nextToken"
        }
    }

    public struct Prompt: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxAttempts", required: true, type: .integer), 
            AWSShapeMember(label: "responseCard", required: false, type: .string), 
            AWSShapeMember(label: "messages", required: true, type: .list)
        ]
        /// The number of times to prompt the user for information.
        public let maxAttempts: Int32
        /// A response card. Amazon Lex uses this prompt at runtime, in the PostText API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see ex-resp-card. 
        public let responseCard: String?
        /// An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        public let messages: [Message]

        public init(maxAttempts: Int32, responseCard: String? = nil, messages: [Message]) {
            self.maxAttempts = maxAttempts
            self.responseCard = responseCard
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case maxAttempts = "maxAttempts"
            case responseCard = "responseCard"
            case messages = "messages"
        }
    }

    public struct PutSlotTypeResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "enumerationValues", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp)
        ]
        /// The name of the slot type.
        public let name: String?
        /// The date that the slot type was created.
        public let createdDate: TimeStamp?
        /// A list of EnumerationValue objects that defines the values that the slot type can take.
        public let enumerationValues: [EnumerationValue]?
        /// The version of the slot type. For a new slot type, the version is always $LATEST. 
        public let version: String?
        /// Checksum of the $LATEST version of the slot type.
        public let checksum: String?
        /// A description of the slot type.
        public let description: String?
        /// The date that the slot type was updated. When you create a slot type, the creation date and last update date are the same.
        public let lastUpdatedDate: TimeStamp?

        public init(name: String? = nil, createdDate: TimeStamp? = nil, enumerationValues: [EnumerationValue]? = nil, version: String? = nil, checksum: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.enumerationValues = enumerationValues
            self.version = version
            self.checksum = checksum
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case createdDate = "createdDate"
            case enumerationValues = "enumerationValues"
            case version = "version"
            case checksum = "checksum"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
        }
    }

    public struct ResourceReference: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The name of the resource that is using the resource that you are trying to delete.
        public let name: String?
        /// The version of the resource that is using the resource that you are trying to delete.
        public let version: String?

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct PutBotAliasResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "botVersion", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "botName", required: false, type: .string)
        ]
        /// The name of the alias.
        public let name: String?
        /// The version of the bot that the alias points to.
        public let botVersion: String?
        /// The date that the bot alias was created.
        public let createdDate: TimeStamp?
        /// A description of the alias.
        public let description: String?
        /// The checksum for the current version of the alias.
        public let checksum: String?
        /// The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
        public let lastUpdatedDate: TimeStamp?
        /// The name of the bot that the alias points to.
        public let botName: String?

        public init(name: String? = nil, botVersion: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, botName: String? = nil) {
            self.name = name
            self.botVersion = botVersion
            self.createdDate = createdDate
            self.description = description
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botVersion = "botVersion"
            case createdDate = "createdDate"
            case description = "description"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case botName = "botName"
        }
    }

    public struct GetBuiltinIntentsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of builtinIntentMetadata objects, one for each intent in the response.
        public let intents: [BuiltinIntentMetadata]?
        /// A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request.
        public let nextToken: String?

        public init(intents: [BuiltinIntentMetadata]? = nil, nextToken: String? = nil) {
            self.intents = intents
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case intents = "intents"
            case nextToken = "nextToken"
        }
    }

    public struct GetBotChannelAssociationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "aliasName"), required: true, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// The name of the association between the bot and the channel. The name is case sensitive. 
        public let name: String
        /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
        public let botAlias: String
        /// The name of the Amazon Lex bot.
        public let botName: String

        public init(name: String, botAlias: String, botName: String) {
            self.name = name
            self.botAlias = botAlias
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case botAlias = "aliasName"
            case botName = "botName"
        }
    }

    public struct GetSlotTypeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        /// The name of the slot type. The name is case sensitive. 
        public let name: String
        /// The version of the slot type. 
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct BotChannelAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "botAlias", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "botConfiguration", required: false, type: .map), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "botName", required: false, type: .string)
        ]
        /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made. 
        public let botAlias: String?
        /// The name of the association between the bot and the channel. 
        public let name: String?
        /// Provides information necessary to communicate with the messaging platform. 
        public let botConfiguration: [String: String]?
        /// The date that the association between the Amazon Lex bot and the channel was created. 
        public let createdDate: TimeStamp?
        /// A text description of the association you are creating. 
        public let description: String?
        /// Specifies the type of association by indicating the type of channel being established between the Amazon Lex bot and the external messaging platform.
        public let `type`: ChannelType?
        /// The name of the Amazon Lex bot to which this association is being made.   Currently, Amazon Lex supports associations with Facebook and Slack, and Twilio. 
        public let botName: String?

        public init(botAlias: String? = nil, name: String? = nil, botConfiguration: [String: String]? = nil, createdDate: TimeStamp? = nil, description: String? = nil, type: ChannelType? = nil, botName: String? = nil) {
            self.botAlias = botAlias
            self.name = name
            self.botConfiguration = botConfiguration
            self.createdDate = createdDate
            self.description = description
            self.`type` = `type`
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "botAlias"
            case name = "name"
            case botConfiguration = "botConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case `type` = "type"
            case botName = "botName"
        }
    }

    public struct GetBuiltinSlotTypesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "signatureContains", location: .querystring(locationName: "signatureContains"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "locale", location: .querystring(locationName: "locale"), required: false, type: .enum)
        ]
        /// Substring to match in built-in slot type signatures. A slot type will be returned if any part of its signature matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
        public let signatureContains: String?
        /// The maximum number of slot types to return in the response. The default is 10.
        public let maxResults: Int32?
        /// A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of slot types, specify the pagination token in the next request.
        public let nextToken: String?
        /// A list of locales that the slot type supports.
        public let locale: Locale?

        public init(signatureContains: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, locale: Locale? = nil) {
            self.signatureContains = signatureContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case signatureContains = "signatureContains"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case locale = "locale"
        }
    }

    public struct Statement: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseCard", required: false, type: .string), 
            AWSShapeMember(label: "messages", required: true, type: .list)
        ]
        ///  At runtime, if the client is using the API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card. 
        public let responseCard: String?
        /// A collection of message objects.
        public let messages: [Message]

        public init(responseCard: String? = nil, messages: [Message]) {
            self.responseCard = responseCard
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case responseCard = "responseCard"
            case messages = "messages"
        }
    }

    public struct GetBotChannelAssociationsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "aliasName"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nameContains", location: .querystring(locationName: "nameContains"), required: false, type: .string), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName"), required: true, type: .string)
        ]
        /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
        public let botAlias: String
        /// A pagination token for fetching the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request. 
        public let nextToken: String?
        /// The maximum number of associations to return in the response. The default is 50. 
        public let maxResults: Int32?
        /// Substring to match in channel association names. An association will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot channel associations, use a hyphen ("-") as the nameContains parameter.
        public let nameContains: String?
        /// The name of the Amazon Lex bot in the association.
        public let botName: String

        public init(botAlias: String, nextToken: String? = nil, maxResults: Int32? = nil, nameContains: String? = nil, botName: String) {
            self.botAlias = botAlias
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.botName = botName
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "aliasName"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case nameContains = "nameContains"
            case botName = "botName"
        }
    }

    public struct BuiltinIntentSlot: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// A list of the slots defined for the intent.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct GetSlotTypeVersionsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "slotTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of SlotTypeMetadata objects, one for each numbered version of the slot type plus one for the $LATEST version.
        public let slotTypes: [SlotTypeMetadata]?
        /// A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request. 
        public let nextToken: String?

        public init(slotTypes: [SlotTypeMetadata]? = nil, nextToken: String? = nil) {
            self.slotTypes = slotTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case slotTypes = "slotTypes"
            case nextToken = "nextToken"
        }
    }

    public struct PutBotResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "clarificationPrompt", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "idleSessionTTLInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "checksum", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "abortStatement", required: false, type: .structure), 
            AWSShapeMember(label: "locale", required: false, type: .enum), 
            AWSShapeMember(label: "childDirected", required: false, type: .boolean), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "voiceId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "intents", required: false, type: .list), 
            AWSShapeMember(label: "failureReason", required: false, type: .string)
        ]
        /// The name of the bot.
        public let name: String?
        /// The date that the bot was created.
        public let createdDate: TimeStamp?
        ///  The prompts that Amazon Lex uses when it doesn't understand the user's intent. For more information, see . 
        public let clarificationPrompt: Prompt?
        /// A description of the bot.
        public let description: String?
        /// The maximum length of time that Amazon Lex retains the data gathered in a conversation. For more information, see .
        public let idleSessionTTLInSeconds: Int32?
        /// Checksum of the bot that you created.
        public let checksum: String?
        /// The date that the bot was updated. When you create a resource, the creation date and last updated date are the same.
        public let lastUpdatedDate: TimeStamp?
        /// The message that Amazon Lex uses to abort a conversation. For more information, see .
        public let abortStatement: Statement?
        ///  The target locale for the bot. 
        public let locale: Locale?
        /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the Amazon Lex FAQ. 
        public let childDirected: Bool?
        ///  When you send a request to create a bot with processBehavior set to BUILD, Amazon Lex sets the status response element to BUILDING. After Amazon Lex builds the bot, it sets status to READY. If Amazon Lex can't build the bot, Amazon Lex sets status to FAILED. Amazon Lex returns the reason for the failure in the failureReason response element.  When you set processBehaviorto SAVE, Amazon Lex sets the status code to NOT BUILT.
        public let status: Status?
        /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see .
        public let voiceId: String?
        /// The version of the bot. For a new bot, the version is always $LATEST.
        public let version: String?
        /// An array of Intent objects. For more information, see .
        public let intents: [Intent]?
        /// If status is FAILED, Amazon Lex provides the reason that it failed to build the bot.
        public let failureReason: String?

        public init(name: String? = nil, createdDate: TimeStamp? = nil, clarificationPrompt: Prompt? = nil, description: String? = nil, idleSessionTTLInSeconds: Int32? = nil, checksum: String? = nil, lastUpdatedDate: TimeStamp? = nil, abortStatement: Statement? = nil, locale: Locale? = nil, childDirected: Bool? = nil, status: Status? = nil, voiceId: String? = nil, version: String? = nil, intents: [Intent]? = nil, failureReason: String? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.clarificationPrompt = clarificationPrompt
            self.description = description
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.checksum = checksum
            self.lastUpdatedDate = lastUpdatedDate
            self.abortStatement = abortStatement
            self.locale = locale
            self.childDirected = childDirected
            self.status = status
            self.voiceId = voiceId
            self.version = version
            self.intents = intents
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case createdDate = "createdDate"
            case clarificationPrompt = "clarificationPrompt"
            case description = "description"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case checksum = "checksum"
            case lastUpdatedDate = "lastUpdatedDate"
            case abortStatement = "abortStatement"
            case locale = "locale"
            case childDirected = "childDirected"
            case status = "status"
            case voiceId = "voiceId"
            case version = "version"
            case intents = "intents"
            case failureReason = "failureReason"
        }
    }

}