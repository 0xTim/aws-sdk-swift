// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Machinelearning {

    public struct CreateBatchPredictionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied name or description of the BatchPrediction. BatchPredictionName can only use the UTF-8 character set.
        public var batchPredictionName: String? = nil
        /// A user-supplied ID that uniquely identifies the BatchPrediction.
        public var batchPredictionId: String = ""
        /// The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the s3 key portion of the outputURI field: ':', '//', '/./', '/../'. Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the Amazon Machine Learning Developer Guide.
        public var outputUri: String = ""
        /// The ID of the DataSource that points to the group of observations to predict.
        public var batchPredictionDataSourceId: String = ""
        /// The ID of the MLModel that will generate predictions for the group of observations. 
        public var mLModelId: String = ""

        public init() {}

        public init(batchPredictionName: String? = nil, batchPredictionId: String, outputUri: String, batchPredictionDataSourceId: String, mLModelId: String) {
            self.batchPredictionName = batchPredictionName
            self.batchPredictionId = batchPredictionId
            self.outputUri = outputUri
            self.batchPredictionDataSourceId = batchPredictionDataSourceId
            self.mLModelId = mLModelId
        }

    }

    public struct CreateDataSourceFromRedshiftInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the DataSource.
        public var dataSourceId: String = ""
        /// A user-supplied name or description of the DataSource. 
        public var dataSourceName: String? = nil
        /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
        public var computeStatistics: Bool? = nil
        /// The data specification of an Amazon Redshift DataSource:  DatabaseInformation -   DatabaseName - The name of the Amazon Redshift database.    ClusterIdentifier - The unique ID for the Amazon Redshift cluster.  DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database. SelectSqlQuery - The query that is used to retrieve the observation data for the Datasource. S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the SelectSqlQuery query is stored in this location. DataSchemaUri - The Amazon S3 location of the DataSchema. DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.   DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the DataSource.  Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"   
        public var dataSpec: RedshiftDataSpec = RedshiftDataSpec()
        /// A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:    A security group to allow Amazon ML to execute the SelectSqlQuery query on an Amazon Redshift cluster An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the S3StagingLocation  
        public var roleARN: String = ""

        public init() {}

        public init(dataSourceId: String, dataSourceName: String? = nil, computeStatistics: Bool? = nil, dataSpec: RedshiftDataSpec, roleARN: String) {
            self.dataSourceId = dataSourceId
            self.dataSourceName = dataSourceName
            self.computeStatistics = computeStatistics
            self.dataSpec = dataSpec
            self.roleARN = roleARN
        }

    }

    public struct CreateDataSourceFromS3Output: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the DataSource. This value should be identical to the value of the DataSourceID in the request. 
        public var dataSourceId: String? = nil

        public init() {}

        public init(dataSourceId: String? = nil) {
            self.dataSourceId = dataSourceId
        }

    }

    public struct S3DataSpec: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The location of the data file(s) used by a DataSource. The URI specifies a data file or an Amazon Simple Storage Service (Amazon S3) directory or bucket containing data files.
        public var dataLocationS3: String = ""
        ///  A JSON string that represents the schema for an Amazon S3 DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. You must provide either the DataSchema or the DataSchemaLocationS3. Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0",  "recordAnnotationFieldName": "F1",  "recordWeightFieldName": "F2",  "targetFieldName": "F3",  "dataFormat": "CSV",  "dataFileContainsHeader": true,  "attributes": [  { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],  "excludedVariableNames": [ "F6" ] }  
        public var dataSchema: String? = nil
        /// Describes the schema location in Amazon S3. You must provide either the DataSchema or the DataSchemaLocationS3.
        public var dataSchemaLocationS3: String? = nil
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:  percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource. percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource. complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}  strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}  
        public var dataRearrangement: String? = nil

        public init() {}

        public init(dataLocationS3: String, dataSchema: String? = nil, dataSchemaLocationS3: String? = nil, dataRearrangement: String? = nil) {
            self.dataLocationS3 = dataLocationS3
            self.dataSchema = dataSchema
            self.dataSchemaLocationS3 = dataSchemaLocationS3
            self.dataRearrangement = dataRearrangement
        }

    }

    public struct DescribeDataSourcesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An ID of the next page in the paginated results that indicates at least one more page follows.
        public var nextToken: String? = nil
        /// A list of DataSource that meet the search criteria. 
        public var results: [DataSource]? = nil

        public init() {}

        public init(nextToken: String? = nil, results: [DataSource]? = nil) {
            self.nextToken = nextToken
            self.results = results
        }

    }

    public struct DeleteBatchPredictionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the BatchPrediction. This value should be identical to the value of the BatchPredictionID in the request.
        public var batchPredictionId: String? = nil

        public init() {}

        public init(batchPredictionId: String? = nil) {
            self.batchPredictionId = batchPredictionId
        }

    }

    public struct GetMLModelInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the MLModel at creation.
        public var mLModelId: String = ""
        /// Specifies whether the GetMLModel operation should return Recipe. If true, Recipe is returned. If false, Recipe is not returned.
        public var verbose: Bool? = nil

        public init() {}

        public init(mLModelId: String, verbose: Bool? = nil) {
            self.mLModelId = mLModelId
            self.verbose = verbose
        }

    }

    public struct RedshiftMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The SQL query that is specified during CreateDataSourceFromRedshift. Returns only if Verbose is true in GetDataSourceInput. 
        public var selectSqlQuery: String? = nil
        public var databaseUserName: String? = nil
        public var redshiftDatabase: RedshiftDatabase? = nil

        public init() {}

        public init(selectSqlQuery: String? = nil, databaseUserName: String? = nil, redshiftDatabase: RedshiftDatabase? = nil) {
            self.selectSqlQuery = selectSqlQuery
            self.databaseUserName = databaseUserName
            self.redshiftDatabase = redshiftDatabase
        }

    }

    public struct RDSDatabase: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of an RDS DB instance.
        public var instanceIdentifier: String = ""
        public var databaseName: String = ""

        public init() {}

        public init(instanceIdentifier: String, databaseName: String) {
            self.instanceIdentifier = instanceIdentifier
            self.databaseName = databaseName
        }

    }

    public struct DescribeMLModelsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the next page in the paginated results that indicates at least one more page follows.
        public var nextToken: String? = nil
        /// A list of MLModel that meet the search criteria.
        public var results: [MLModel]? = nil

        public init() {}

        public init(nextToken: String? = nil, results: [MLModel]? = nil) {
            self.nextToken = nextToken
            self.results = results
        }

    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An optional string, typically used to describe or define the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
        public var value: String? = nil
        /// A unique identifier for the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
        public var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct UpdateMLModelInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the MLModel during creation.
        public var mLModelId: String = ""
        /// The ScoreThreshold used in binary classification MLModel that marks the boundary between a positive prediction and a negative prediction. Output values greater than or equal to the ScoreThreshold receive a positive result from the MLModel, such as true. Output values less than the ScoreThreshold receive a negative response from the MLModel, such as false.
        public var scoreThreshold: Float? = nil
        /// A user-supplied name or description of the MLModel.
        public var mLModelName: String? = nil

        public init() {}

        public init(mLModelId: String, scoreThreshold: Float? = nil, mLModelName: String? = nil) {
            self.mLModelId = mLModelId
            self.scoreThreshold = scoreThreshold
            self.mLModelName = mLModelName
        }

    }

    public struct DeleteBatchPredictionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the BatchPrediction.
        public var batchPredictionId: String = ""

        public init() {}

        public init(batchPredictionId: String) {
            self.batchPredictionId = batchPredictionId
        }

    }

    public struct CreateEvaluationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied name or description of the Evaluation.
        public var evaluationName: String? = nil
        /// A user-supplied ID that uniquely identifies the Evaluation.
        public var evaluationId: String = ""
        /// The ID of the MLModel to evaluate. The schema used in creating the MLModel must match the schema of the DataSource used in the Evaluation.
        public var mLModelId: String = ""
        /// The ID of the DataSource for the evaluation. The schema of the DataSource must match the schema used to create the MLModel.
        public var evaluationDataSourceId: String = ""

        public init() {}

        public init(evaluationName: String? = nil, evaluationId: String, mLModelId: String, evaluationDataSourceId: String) {
            self.evaluationName = evaluationName
            self.evaluationId = evaluationId
            self.mLModelId = mLModelId
            self.evaluationDataSourceId = evaluationDataSourceId
        }

    }

    public struct RealtimeEndpointInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The maximum processing rate for the real-time endpoint for MLModel, measured in incoming requests per second.
        public var peakRequestsPerSecond: Int32? = nil
        /// The URI that specifies where to send real-time prediction requests for the MLModel. Note The application must wait until the real-time endpoint is ready before using this URI. 
        public var endpointUrl: String? = nil
        /// The time that the request to create the real-time endpoint for the MLModel was received. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        ///  The current status of the real-time endpoint for the MLModel. This element can have one of the following values:    NONE - Endpoint does not exist or was previously deleted.  READY - Endpoint is ready to be used for real-time predictions.  UPDATING - Updating/creating the endpoint.  
        public var endpointStatus: String? = nil

        public init() {}

        public init(peakRequestsPerSecond: Int32? = nil, endpointUrl: String? = nil, createdAt: Date? = nil, endpointStatus: String? = nil) {
            self.peakRequestsPerSecond = peakRequestsPerSecond
            self.endpointUrl = endpointUrl
            self.createdAt = createdAt
            self.endpointStatus = endpointStatus
        }

    }

    public struct DescribeBatchPredictionsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the next page in the paginated results that indicates at least one more page follows.
        public var nextToken: String? = nil
        /// A list of BatchPrediction objects that meet the search criteria. 
        public var results: [BatchPrediction]? = nil

        public init() {}

        public init(nextToken: String? = nil, results: [BatchPrediction]? = nil) {
            self.nextToken = nextToken
            self.results = results
        }

    }

    public struct GetDataSourceOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The total size of observations in the data files.
        public var dataSizeInBytes: Int64? = nil
        /// The user-supplied description of the most recent details about creating the DataSource.
        public var message: String? = nil
        /// The number of data files referenced by the DataSource.
        public var numberOfFiles: Int64? = nil
        /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        /// The schema used by all of the data files of this DataSource. Note This parameter is provided as part of the verbose format.
        public var dataSourceSchema: String? = nil
        public var roleARN: String? = nil
        public var rDSMetadata: RDSMetadata? = nil
        /// The epoch time when Amazon Machine Learning marked the DataSource as COMPLETED or FAILED. FinishedAt is only available when the DataSource is in the COMPLETED or FAILED state.
        public var finishedAt: Date? = nil
        /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the DataSource, normalized and scaled on computation resources. ComputeTime is only available if the DataSource is in the COMPLETED state and the ComputeStatistics is set to true.
        public var computeTime: Int64? = nil
        /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
        public var dataRearrangement: String? = nil
        /// The time of the most recent edit to the DataSource. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The ID assigned to the DataSource at creation. This value should be identical to the value of the DataSourceId in the request.
        public var dataSourceId: String? = nil
        /// The time that the DataSource was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var dataLocationS3: String? = nil
        /// The current status of the DataSource. This element can have one of the following values:   PENDING - Amazon ML submitted a request to create a DataSource.  INPROGRESS - The creation process is underway.  FAILED - The request to create a DataSource did not run to completion. It is not usable.  COMPLETED - The creation process completed successfully.  DELETED - The DataSource is marked as deleted. It is not usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the DataSource.
        public var name: String? = nil
        public var redshiftMetadata: RedshiftMetadata? = nil
        /// A link to the file containing logs of CreateDataSourceFrom* operations.
        public var logUri: String? = nil
        /// The epoch time when Amazon Machine Learning marked the DataSource as INPROGRESS. StartedAt isn't available if the DataSource is in the PENDING state.
        public var startedAt: Date? = nil
        ///  The parameter is true if statistics need to be generated from the observation data. 
        public var computeStatistics: Bool? = nil

        public init() {}

        public init(dataSizeInBytes: Int64? = nil, message: String? = nil, numberOfFiles: Int64? = nil, createdByIamUser: String? = nil, dataSourceSchema: String? = nil, roleARN: String? = nil, rDSMetadata: RDSMetadata? = nil, finishedAt: Date? = nil, computeTime: Int64? = nil, dataRearrangement: String? = nil, lastUpdatedAt: Date? = nil, dataSourceId: String? = nil, createdAt: Date? = nil, dataLocationS3: String? = nil, status: String? = nil, name: String? = nil, redshiftMetadata: RedshiftMetadata? = nil, logUri: String? = nil, startedAt: Date? = nil, computeStatistics: Bool? = nil) {
            self.dataSizeInBytes = dataSizeInBytes
            self.message = message
            self.numberOfFiles = numberOfFiles
            self.createdByIamUser = createdByIamUser
            self.dataSourceSchema = dataSourceSchema
            self.roleARN = roleARN
            self.rDSMetadata = rDSMetadata
            self.finishedAt = finishedAt
            self.computeTime = computeTime
            self.dataRearrangement = dataRearrangement
            self.lastUpdatedAt = lastUpdatedAt
            self.dataSourceId = dataSourceId
            self.createdAt = createdAt
            self.dataLocationS3 = dataLocationS3
            self.status = status
            self.name = name
            self.redshiftMetadata = redshiftMetadata
            self.logUri = logUri
            self.startedAt = startedAt
            self.computeStatistics = computeStatistics
        }

    }

    public struct PredictInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique identifier of the MLModel.
        public var mLModelId: String = ""
        public var predictEndpoint: String = ""
        public var record: [String: String] = [:]

        public init() {}

        public init(mLModelId: String, predictEndpoint: String, record: [String: String]) {
            self.mLModelId = mLModelId
            self.predictEndpoint = predictEndpoint
            self.record = record
        }

    }

    public struct DeleteRealtimeEndpointOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
        public var mLModelId: String? = nil
        /// The endpoint information of the MLModel 
        public var realtimeEndpointInfo: RealtimeEndpointInfo? = nil

        public init() {}

        public init(mLModelId: String? = nil, realtimeEndpointInfo: RealtimeEndpointInfo? = nil) {
            self.mLModelId = mLModelId
            self.realtimeEndpointInfo = realtimeEndpointInfo
        }

    }

    public struct DescribeEvaluationsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the next page in the paginated results that indicates at least one more page follows.
        public var nextToken: String? = nil
        /// A list of Evaluation that meet the search criteria. 
        public var results: [Evaluation]? = nil

        public init() {}

        public init(nextToken: String? = nil, results: [Evaluation]? = nil) {
            self.nextToken = nextToken
            self.results = results
        }

    }

    public struct RDSDataSpec: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon S3 location of the DataSchema. 
        public var dataSchemaUri: String? = nil
        /// The AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon RDS database.
        public var databaseCredentials: RDSDatabaseCredentials = RDSDatabaseCredentials()
        /// The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in this location.
        public var s3StagingLocation: String = ""
        /// The role (DataPipelineDefaultResourceRole) assumed by an Amazon Elastic Compute Cloud (Amazon EC2) instance to carry out the copy operation from Amazon RDS to an Amazon S3 task. For more information, see Role templates for data pipelines.
        public var resourceRole: String = ""
        /// Describes the DatabaseName and InstanceIdentifier of an Amazon RDS database.
        public var databaseInformation: RDSDatabase = RDSDatabase()
        /// A JSON string that represents the schema for an Amazon RDS DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. A DataSchema is not required if you specify a DataSchemaUri Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0",  "recordAnnotationFieldName": "F1",  "recordWeightFieldName": "F2",  "targetFieldName": "F3",  "dataFormat": "CSV",  "dataFileContainsHeader": true,  "attributes": [  { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],  "excludedVariableNames": [ "F6" ] }  
        public var dataSchema: String? = nil
        /// The subnet ID to be used to access a VPC-based RDS DB instance. This attribute is used by Data Pipeline to carry out the copy task from Amazon RDS to Amazon S3.
        public var subnetId: String = ""
        /// The security group IDs to be used to access a VPC-based RDS DB instance. Ensure that there are appropriate ingress rules set up to allow access to the RDS DB instance. This attribute is used by Data Pipeline to carry out the copy operation from Amazon RDS to an Amazon S3 task.
        public var securityGroupIds: [String] = []
        /// The query that is used to retrieve the observation data for the DataSource.
        public var selectSqlQuery: String = ""
        /// The role (DataPipelineDefaultRole) assumed by AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see Role templates for data pipelines.
        public var serviceRole: String = ""
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:  percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource. percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource. complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}  strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}  
        public var dataRearrangement: String? = nil

        public init() {}

        public init(dataSchemaUri: String? = nil, databaseCredentials: RDSDatabaseCredentials, s3StagingLocation: String, resourceRole: String, databaseInformation: RDSDatabase, dataSchema: String? = nil, subnetId: String, securityGroupIds: [String], selectSqlQuery: String, serviceRole: String, dataRearrangement: String? = nil) {
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.s3StagingLocation = s3StagingLocation
            self.resourceRole = resourceRole
            self.databaseInformation = databaseInformation
            self.dataSchema = dataSchema
            self.subnetId = subnetId
            self.securityGroupIds = securityGroupIds
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
            self.dataRearrangement = dataRearrangement
        }

    }

    public struct Prediction: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var details: [String: String]? = nil
        public var predictedScores: [String: Float]? = nil
        /// The prediction label for either a BINARY or MULTICLASS MLModel.
        public var predictedLabel: String? = nil
        /// The prediction value for REGRESSION MLModel.
        public var predictedValue: Float? = nil

        public init() {}

        public init(details: [String: String]? = nil, predictedScores: [String: Float]? = nil, predictedLabel: String? = nil, predictedValue: Float? = nil) {
            self.details = details
            self.predictedScores = predictedScores
            self.predictedLabel = predictedLabel
            self.predictedValue = predictedValue
        }

    }

    public struct DeleteMLModelInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the MLModel.
        public var mLModelId: String = ""

        public init() {}

        public init(mLModelId: String) {
            self.mLModelId = mLModelId
        }

    }

    public struct GetBatchPredictionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An ID assigned to the BatchPrediction at creation.
        public var batchPredictionId: String = ""

        public init() {}

        public init(batchPredictionId: String) {
            self.batchPredictionId = batchPredictionId
        }

    }

    public struct CreateDataSourceFromRDSInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the DataSource. Typically, an Amazon Resource Number (ARN) becomes the ID for a DataSource.
        public var dataSourceId: String = ""
        /// The data specification of an Amazon RDS DataSource:  DatabaseInformation -   DatabaseName - The name of the Amazon RDS database.  InstanceIdentifier  - A unique identifier for the Amazon RDS database instance.   DatabaseCredentials - AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon RDS database. ResourceRole - A role (DataPipelineDefaultResourceRole) assumed by an EC2 instance to carry out the copy task from Amazon RDS to Amazon Simple Storage Service (Amazon S3). For more information, see Role templates for data pipelines. ServiceRole - A role (DataPipelineDefaultRole) assumed by the AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see Role templates for data pipelines. SecurityInfo - The security information to use to access an RDS DB instance. You need to set up appropriate ingress rules for the security entity IDs provided to allow access to the Amazon RDS instance. Specify a [SubnetId, SecurityGroupIds] pair for a VPC-based RDS DB instance. SelectSqlQuery - A query that is used to retrieve the observation data for the Datasource. S3StagingLocation - The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in this location. DataSchemaUri - The Amazon S3 location of the DataSchema. DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.   DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the Datasource.    Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"   
        public var rDSData: RDSDataSpec = RDSDataSpec()
        /// A user-supplied name or description of the DataSource.
        public var dataSourceName: String? = nil
        /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training. 
        public var computeStatistics: Bool? = nil
        /// The role that Amazon ML assumes on behalf of the user to create and activate a data pipeline in the user's account and copy data using the SelectSqlQuery query from Amazon RDS to Amazon S3.  
        public var roleARN: String = ""

        public init() {}

        public init(dataSourceId: String, rDSData: RDSDataSpec, dataSourceName: String? = nil, computeStatistics: Bool? = nil, roleARN: String) {
            self.dataSourceId = dataSourceId
            self.rDSData = rDSData
            self.dataSourceName = dataSourceName
            self.computeStatistics = computeStatistics
            self.roleARN = roleARN
        }

    }

    public struct RedshiftDataSpec: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Describes the schema location for an Amazon Redshift DataSource.
        public var dataSchemaUri: String? = nil
        /// Describes AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon Redshift database.
        public var databaseCredentials: RedshiftDatabaseCredentials = RedshiftDatabaseCredentials()
        /// Describes an Amazon S3 location to store the result set of the SelectSqlQuery query.
        public var s3StagingLocation: String = ""
        /// Describes the DatabaseName and ClusterIdentifier for an Amazon Redshift DataSource.
        public var databaseInformation: RedshiftDatabase = RedshiftDatabase()
        /// A JSON string that represents the schema for an Amazon Redshift DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. A DataSchema is not required if you specify a DataSchemaUri. Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0",  "recordAnnotationFieldName": "F1",  "recordWeightFieldName": "F2",  "targetFieldName": "F3",  "dataFormat": "CSV",  "dataFileContainsHeader": true,  "attributes": [  { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],  "excludedVariableNames": [ "F6" ] } 
        public var dataSchema: String? = nil
        /// Describes the SQL Query to execute on an Amazon Redshift database for an Amazon Redshift DataSource.
        public var selectSqlQuery: String = ""
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:  percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource. percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource. complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}  strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}  
        public var dataRearrangement: String? = nil

        public init() {}

        public init(dataSchemaUri: String? = nil, databaseCredentials: RedshiftDatabaseCredentials, s3StagingLocation: String, databaseInformation: RedshiftDatabase, dataSchema: String? = nil, selectSqlQuery: String, dataRearrangement: String? = nil) {
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.s3StagingLocation = s3StagingLocation
            self.databaseInformation = databaseInformation
            self.dataSchema = dataSchema
            self.selectSqlQuery = selectSqlQuery
            self.dataRearrangement = dataRearrangement
        }

    }

    public struct Evaluation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Measurements of how well the MLModel performed, using observations referenced by the DataSource. One of the following metrics is returned, based on the type of the MLModel:    BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.    RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.   MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.     For more information about performance metrics, please see the Amazon Machine Learning Developer Guide. 
        public var performanceMetrics: PerformanceMetrics? = nil
        /// The ID that is assigned to the Evaluation at creation.
        public var evaluationId: String? = nil
        /// A description of the most recent details about evaluating the MLModel.
        public var message: String? = nil
        /// The ID of the MLModel that is the focus of the evaluation.
        public var mLModelId: String? = nil
        /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        public var computeTime: Int64? = nil
        public var finishedAt: Date? = nil
        /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The location and name of the data in Amazon Simple Storage Server (Amazon S3) that is used in the evaluation.
        public var inputDataLocationS3: String? = nil
        /// The time that the Evaluation was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The status of the evaluation. This element can have one of the following values:   PENDING - Amazon Machine Learning (Amazon ML) submitted a request to evaluate an MLModel.  INPROGRESS - The evaluation is underway.  FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.  COMPLETED - The evaluation process completed successfully.  DELETED - The Evaluation is marked as deleted. It is not usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the Evaluation. 
        public var name: String? = nil
        public var startedAt: Date? = nil
        /// The ID of the DataSource that is used to evaluate the MLModel.
        public var evaluationDataSourceId: String? = nil

        public init() {}

        public init(performanceMetrics: PerformanceMetrics? = nil, evaluationId: String? = nil, message: String? = nil, mLModelId: String? = nil, createdByIamUser: String? = nil, computeTime: Int64? = nil, finishedAt: Date? = nil, lastUpdatedAt: Date? = nil, inputDataLocationS3: String? = nil, createdAt: Date? = nil, status: String? = nil, name: String? = nil, startedAt: Date? = nil, evaluationDataSourceId: String? = nil) {
            self.performanceMetrics = performanceMetrics
            self.evaluationId = evaluationId
            self.message = message
            self.mLModelId = mLModelId
            self.createdByIamUser = createdByIamUser
            self.computeTime = computeTime
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.createdAt = createdAt
            self.status = status
            self.name = name
            self.startedAt = startedAt
            self.evaluationDataSourceId = evaluationDataSourceId
        }

    }

    public struct CreateDataSourceFromRedshiftOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the DataSourceID in the request. 
        public var dataSourceId: String? = nil

        public init() {}

        public init(dataSourceId: String? = nil) {
            self.dataSourceId = dataSourceId
        }

    }

    public struct RDSMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The SQL query that is supplied during CreateDataSourceFromRDS. Returns only if Verbose is true in GetDataSourceInput. 
        public var selectSqlQuery: String? = nil
        /// The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.
        public var dataPipelineId: String? = nil
        /// The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see Role templates for data pipelines.
        public var resourceRole: String? = nil
        /// The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see Role templates for data pipelines.
        public var serviceRole: String? = nil
        /// The database details required to connect to an Amazon RDS.
        public var database: RDSDatabase? = nil
        public var databaseUserName: String? = nil

        public init() {}

        public init(selectSqlQuery: String? = nil, dataPipelineId: String? = nil, resourceRole: String? = nil, serviceRole: String? = nil, database: RDSDatabase? = nil, databaseUserName: String? = nil) {
            self.selectSqlQuery = selectSqlQuery
            self.dataPipelineId = dataPipelineId
            self.resourceRole = resourceRole
            self.serviceRole = serviceRole
            self.database = database
            self.databaseUserName = databaseUserName
        }

    }

    public struct DescribeTagsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the tagged ML object.
        public var resourceId: String? = nil
        /// A list of tags associated with the ML object.
        public var tags: [Tag]? = nil
        /// The type of the tagged ML object.
        public var resourceType: String? = nil

        public init() {}

        public init(resourceId: String? = nil, tags: [Tag]? = nil, resourceType: String? = nil) {
            self.resourceId = resourceId
            self.tags = tags
            self.resourceType = resourceType
        }

    }

    public struct CreateEvaluationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user-supplied ID that uniquely identifies the Evaluation. This value should be identical to the value of the EvaluationId in the request.
        public var evaluationId: String? = nil

        public init() {}

        public init(evaluationId: String? = nil) {
            self.evaluationId = evaluationId
        }

    }

    public struct AddTagsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the ML object that was tagged.
        public var resourceId: String? = nil
        /// The type of the ML object that was tagged.
        public var resourceType: String? = nil

        public init() {}

        public init(resourceId: String? = nil, resourceType: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

    }

    public struct DeleteDataSourceInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the DataSource.
        public var dataSourceId: String = ""

        public init() {}

        public init(dataSourceId: String) {
            self.dataSourceId = dataSourceId
        }

    }

    public struct UpdateDataSourceInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the DataSource during creation.
        public var dataSourceId: String = ""
        /// A new user-supplied name or description of the DataSource that will replace the current description. 
        public var dataSourceName: String = ""

        public init() {}

        public init(dataSourceId: String, dataSourceName: String) {
            self.dataSourceId = dataSourceId
            self.dataSourceName = dataSourceName
        }

    }

    public struct GetBatchPredictionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A description of the most recent details about processing the batch prediction request.
        public var message: String? = nil
        /// The ID of the MLModel that generated predictions for the BatchPrediction request.
        public var mLModelId: String? = nil
        /// The number of invalid records that Amazon Machine Learning saw while processing the BatchPrediction.
        public var invalidRecordCount: Int64? = nil
        /// The AWS user account that invoked the BatchPrediction. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        /// The number of total records that Amazon Machine Learning saw while processing the BatchPrediction.
        public var totalRecordCount: Int64? = nil
        /// An ID assigned to the BatchPrediction at creation. This value should be identical to the value of the BatchPredictionID in the request.
        public var batchPredictionId: String? = nil
        /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the BatchPrediction, normalized and scaled on computation resources. ComputeTime is only available if the BatchPrediction is in the COMPLETED state.
        public var computeTime: Int64? = nil
        /// The epoch time when Amazon Machine Learning marked the BatchPrediction as COMPLETED or FAILED. FinishedAt is only available when the BatchPrediction is in the COMPLETED or FAILED state.
        public var finishedAt: Date? = nil
        /// The time of the most recent edit to BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: String? = nil
        /// The time when the BatchPrediction was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The status of the BatchPrediction, which can be one of the following values:   PENDING - Amazon Machine Learning (Amazon ML) submitted a request to generate batch predictions.  INPROGRESS - The batch predictions are in progress.  FAILED - The request to perform a batch prediction did not run to completion. It is not usable.  COMPLETED - The batch prediction process completed successfully.  DELETED - The BatchPrediction is marked as deleted. It is not usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the BatchPrediction.
        public var name: String? = nil
        /// A link to the file that contains logs of the CreateBatchPrediction operation.
        public var logUri: String? = nil
        /// The epoch time when Amazon Machine Learning marked the BatchPrediction as INPROGRESS. StartedAt isn't available if the BatchPrediction is in the PENDING state.
        public var startedAt: Date? = nil
        /// The location of an Amazon S3 bucket or directory to receive the operation results.
        public var outputUri: String? = nil
        /// The ID of the DataSource that was used to create the BatchPrediction. 
        public var batchPredictionDataSourceId: String? = nil

        public init() {}

        public init(message: String? = nil, mLModelId: String? = nil, invalidRecordCount: Int64? = nil, createdByIamUser: String? = nil, totalRecordCount: Int64? = nil, batchPredictionId: String? = nil, computeTime: Int64? = nil, finishedAt: Date? = nil, lastUpdatedAt: Date? = nil, inputDataLocationS3: String? = nil, createdAt: Date? = nil, status: String? = nil, name: String? = nil, logUri: String? = nil, startedAt: Date? = nil, outputUri: String? = nil, batchPredictionDataSourceId: String? = nil) {
            self.message = message
            self.mLModelId = mLModelId
            self.invalidRecordCount = invalidRecordCount
            self.createdByIamUser = createdByIamUser
            self.totalRecordCount = totalRecordCount
            self.batchPredictionId = batchPredictionId
            self.computeTime = computeTime
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.createdAt = createdAt
            self.status = status
            self.name = name
            self.logUri = logUri
            self.startedAt = startedAt
            self.outputUri = outputUri
            self.batchPredictionDataSourceId = batchPredictionDataSourceId
        }

    }

    public struct UpdateBatchPredictionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A new user-supplied name or description of the BatchPrediction.
        public var batchPredictionName: String = ""
        /// The ID assigned to the BatchPrediction during creation.
        public var batchPredictionId: String = ""

        public init() {}

        public init(batchPredictionName: String, batchPredictionId: String) {
            self.batchPredictionName = batchPredictionName
            self.batchPredictionId = batchPredictionId
        }

    }

    public struct RedshiftDatabaseCredentials: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var password: String = ""
        public var username: String = ""

        public init() {}

        public init(password: String, username: String) {
            self.password = password
            self.username = username
        }

    }

    public struct UpdateEvaluationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the Evaluation during creation. This value should be identical to the value of the Evaluation in the request.
        public var evaluationId: String? = nil

        public init() {}

        public init(evaluationId: String? = nil) {
            self.evaluationId = evaluationId
        }

    }

    public struct UpdateEvaluationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A new user-supplied name or description of the Evaluation that will replace the current content. 
        public var evaluationName: String = ""
        /// The ID assigned to the Evaluation during creation.
        public var evaluationId: String = ""

        public init() {}

        public init(evaluationName: String, evaluationId: String) {
            self.evaluationName = evaluationName
            self.evaluationId = evaluationId
        }

    }

    public struct CreateBatchPredictionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the BatchPrediction. This value is identical to the value of the BatchPredictionId in the request.
        public var batchPredictionId: String? = nil

        public init() {}

        public init(batchPredictionId: String? = nil) {
            self.batchPredictionId = batchPredictionId
        }

    }

    public struct DescribeEvaluationsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The not equal to operator. The Evaluation results will have FilterVariable values not equal to the value specified with NE.
        public var nE: String? = nil
        /// The equal to operator. The Evaluation results will have FilterVariable values that exactly match the value specified with EQ.
        public var eQ: String? = nil
        /// The greater than operator. The Evaluation results will have FilterVariable values that are greater than the value specified with GT.
        public var gT: String? = nil
        /// Use one of the following variable to filter a list of Evaluation objects:   CreatedAt - Sets the search criteria to the Evaluation creation date.  Status - Sets the search criteria to the Evaluation status.  Name - Sets the search criteria to the contents of Evaluation   Name.  IAMUser - Sets the search criteria to the user account that invoked an Evaluation.  MLModelId - Sets the search criteria to the MLModel that was evaluated.  DataSourceId - Sets the search criteria to the DataSource used in Evaluation.  DataUri - Sets the search criteria to the data file(s) used in Evaluation. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory. 
        public var filterVariable: String? = nil
        /// A string that is found at the beginning of a variable, such as Name or Id. For example, an Evaluation could have the Name 2014-09-09-HolidayGiftMailer. To search for this Evaluation, select Name for the FilterVariable and any of the following strings for the Prefix:   2014-09 2014-09-09 2014-09-09-Holiday 
        public var prefix: String? = nil
        /// The less than operator. The Evaluation results will have FilterVariable values that are less than the value specified with LT.
        public var lT: String? = nil
        /// The less than or equal to operator. The Evaluation results will have FilterVariable values that are less than or equal to the value specified with LE.
        public var lE: String? = nil
        /// A two-value parameter that determines the sequence of the resulting list of Evaluation.   asc - Arranges the list in ascending order (A-Z, 0-9).  dsc - Arranges the list in descending order (Z-A, 9-0).  Results are sorted by FilterVariable.
        public var sortOrder: String? = nil
        ///  The maximum number of Evaluation to include in the result.
        public var limit: Int32? = nil
        /// The ID of the page in the paginated results.
        public var nextToken: String? = nil
        /// The greater than or equal to operator. The Evaluation results will have FilterVariable values that are greater than or equal to the value specified with GE. 
        public var gE: String? = nil

        public init() {}

        public init(nE: String? = nil, eQ: String? = nil, gT: String? = nil, filterVariable: String? = nil, prefix: String? = nil, lT: String? = nil, lE: String? = nil, sortOrder: String? = nil, limit: Int32? = nil, nextToken: String? = nil, gE: String? = nil) {
            self.nE = nE
            self.eQ = eQ
            self.gT = gT
            self.filterVariable = filterVariable
            self.prefix = prefix
            self.lT = lT
            self.lE = lE
            self.sortOrder = sortOrder
            self.limit = limit
            self.nextToken = nextToken
            self.gE = gE
        }

    }

    public struct CreateMLModelOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request. 
        public var mLModelId: String? = nil

        public init() {}

        public init(mLModelId: String? = nil) {
            self.mLModelId = mLModelId
        }

    }

    public struct RedshiftDatabase: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var clusterIdentifier: String = ""
        public var databaseName: String = ""

        public init() {}

        public init(clusterIdentifier: String, databaseName: String) {
            self.clusterIdentifier = clusterIdentifier
            self.databaseName = databaseName
        }

    }

    public struct UpdateMLModelOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the MLModel during creation. This value should be identical to the value of the MLModelID in the request.
        public var mLModelId: String? = nil

        public init() {}

        public init(mLModelId: String? = nil) {
            self.mLModelId = mLModelId
        }

    }

    public struct BatchPrediction: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A description of the most recent details about processing the batch prediction request.
        public var message: String? = nil
        /// The ID of the MLModel that generated predictions for the BatchPrediction request.
        public var mLModelId: String? = nil
        public var invalidRecordCount: Int64? = nil
        /// The AWS user account that invoked the BatchPrediction. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        public var totalRecordCount: Int64? = nil
        /// The ID assigned to the BatchPrediction at creation. This value should be identical to the value of the BatchPredictionID in the request. 
        public var batchPredictionId: String? = nil
        public var computeTime: Int64? = nil
        public var finishedAt: Date? = nil
        /// The time of the most recent edit to the BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: String? = nil
        /// The time that the BatchPrediction was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The status of the BatchPrediction. This element can have one of the following values:   PENDING - Amazon Machine Learning (Amazon ML) submitted a request to generate predictions for a batch of observations.  INPROGRESS - The process is underway.  FAILED - The request to perform a batch prediction did not run to completion. It is not usable.  COMPLETED - The batch prediction process completed successfully.  DELETED - The BatchPrediction is marked as deleted. It is not usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the BatchPrediction.
        public var name: String? = nil
        public var startedAt: Date? = nil
        /// The location of an Amazon S3 bucket or directory to receive the operation results. The following substrings are not allowed in the s3 key portion of the outputURI field: ':', '//', '/./', '/../'.
        public var outputUri: String? = nil
        /// The ID of the DataSource that points to the group of observations to predict.
        public var batchPredictionDataSourceId: String? = nil

        public init() {}

        public init(message: String? = nil, mLModelId: String? = nil, invalidRecordCount: Int64? = nil, createdByIamUser: String? = nil, totalRecordCount: Int64? = nil, batchPredictionId: String? = nil, computeTime: Int64? = nil, finishedAt: Date? = nil, lastUpdatedAt: Date? = nil, inputDataLocationS3: String? = nil, createdAt: Date? = nil, status: String? = nil, name: String? = nil, startedAt: Date? = nil, outputUri: String? = nil, batchPredictionDataSourceId: String? = nil) {
            self.message = message
            self.mLModelId = mLModelId
            self.invalidRecordCount = invalidRecordCount
            self.createdByIamUser = createdByIamUser
            self.totalRecordCount = totalRecordCount
            self.batchPredictionId = batchPredictionId
            self.computeTime = computeTime
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.createdAt = createdAt
            self.status = status
            self.name = name
            self.startedAt = startedAt
            self.outputUri = outputUri
            self.batchPredictionDataSourceId = batchPredictionDataSourceId
        }

    }

    public struct CreateDataSourceFromS3Input: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied identifier that uniquely identifies the DataSource. 
        public var dataSourceId: String = ""
        /// A user-supplied name or description of the DataSource. 
        public var dataSourceName: String? = nil
        /// The data specification of a DataSource:  DataLocationS3 - The Amazon S3 location of the observation data. DataSchemaLocationS3 - The Amazon S3 location of the DataSchema. DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.   DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the Datasource.   Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"   
        public var dataSpec: S3DataSpec = S3DataSpec()
        /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
        public var computeStatistics: Bool? = nil

        public init() {}

        public init(dataSourceId: String, dataSourceName: String? = nil, dataSpec: S3DataSpec, computeStatistics: Bool? = nil) {
            self.dataSourceId = dataSourceId
            self.dataSourceName = dataSourceName
            self.dataSpec = dataSpec
            self.computeStatistics = computeStatistics
        }

    }

    public struct GetEvaluationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Evaluation to retrieve. The evaluation of each MLModel is recorded and cataloged. The ID provides the means to access the information. 
        public var evaluationId: String = ""

        public init() {}

        public init(evaluationId: String) {
            self.evaluationId = evaluationId
        }

    }

    public struct RDSDatabaseCredentials: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var password: String = ""
        public var username: String = ""

        public init() {}

        public init(password: String, username: String) {
            self.password = password
            self.username = username
        }

    }

    public struct DeleteRealtimeEndpointInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the MLModel during creation.
        public var mLModelId: String = ""

        public init() {}

        public init(mLModelId: String) {
            self.mLModelId = mLModelId
        }

    }

    public struct CreateRealtimeEndpointInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the MLModel during creation.
        public var mLModelId: String = ""

        public init() {}

        public init(mLModelId: String) {
            self.mLModelId = mLModelId
        }

    }

    public struct DeleteDataSourceOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the DataSource. This value should be identical to the value of the DataSourceID in the request.
        public var dataSourceId: String? = nil

        public init() {}

        public init(dataSourceId: String? = nil) {
            self.dataSourceId = dataSourceId
        }

    }

    public struct GetMLModelOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time of the most recent edit to the ScoreThreshold. The time is expressed in epoch time.
        public var scoreThresholdLastUpdatedAt: Date? = nil
        /// The ID of the training DataSource.
        public var trainingDataSourceId: String? = nil
        /// A description of the most recent details about accessing the MLModel.
        public var message: String? = nil
        /// The MLModel ID, which is same as the MLModelId in the request.
        public var mLModelId: String? = nil
        /// The recipe to use when training the MLModel. The Recipe provides detailed information about the observation data to use during training, and manipulations to perform on the observation data during training. Note This parameter is provided as part of the verbose format.
        public var recipe: String? = nil
        /// The current endpoint of the MLModel
        public var endpointInfo: RealtimeEndpointInfo? = nil
        /// The AWS user account from which the MLModel was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        /// The schema used by all of the data files referenced by the DataSource. Note This parameter is provided as part of the verbose format.
        public var schema: String? = nil
        /// Identifies the MLModel category. The following are the available types:   REGRESSION -- Produces a numeric result. For example, "What price should a house be listed at?" BINARY -- Produces one of two possible results. For example, "Is this an e-commerce website?" MULTICLASS -- Produces one of several possible results. For example, "Is this a HIGH, LOW or MEDIUM risk trade?" 
        public var mLModelType: String? = nil
        /// The epoch time when Amazon Machine Learning marked the MLModel as COMPLETED or FAILED. FinishedAt is only available when the MLModel is in the COMPLETED or FAILED state.
        public var finishedAt: Date? = nil
        /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the MLModel, normalized and scaled on computation resources. ComputeTime is only available if the MLModel is in the COMPLETED state.
        public var computeTime: Int64? = nil
        /// The time of the most recent edit to the MLModel. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The current status of the MLModel. This element can have one of the following values:   PENDING - Amazon Machine Learning (Amazon ML) submitted a request to describe a MLModel.  INPROGRESS - The request is processing.  FAILED - The request did not run to completion. The ML model isn't usable.  COMPLETED - The request completed successfully.  DELETED - The MLModel is marked as deleted. It isn't usable. 
        public var status: String? = nil
        /// The time that the MLModel was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: String? = nil
        /// A user-supplied name or description of the MLModel.
        public var name: String? = nil
        /// The scoring threshold is used in binary classification MLModel models. It marks the boundary between a positive prediction and a negative prediction. Output values greater than or equal to the threshold receive a positive result from the MLModel, such as true. Output values less than the threshold receive a negative response from the MLModel, such as false.
        public var scoreThreshold: Float? = nil
        public var sizeInBytes: Int64? = nil
        /// A link to the file that contains logs of the CreateMLModel operation.
        public var logUri: String? = nil
        /// The epoch time when Amazon Machine Learning marked the MLModel as INPROGRESS. StartedAt isn't available if the MLModel is in the PENDING state.
        public var startedAt: Date? = nil
        /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:    sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance.  The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.  sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10. sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none. We strongly recommend that you shuffle your data.  sgd.l1RegularizationAmount - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.   sgd.l2RegularizationAmount - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.  
        public var trainingParameters: [String: String]? = nil

        public init() {}

        public init(scoreThresholdLastUpdatedAt: Date? = nil, trainingDataSourceId: String? = nil, message: String? = nil, mLModelId: String? = nil, recipe: String? = nil, endpointInfo: RealtimeEndpointInfo? = nil, createdByIamUser: String? = nil, schema: String? = nil, mLModelType: String? = nil, finishedAt: Date? = nil, computeTime: Int64? = nil, lastUpdatedAt: Date? = nil, status: String? = nil, createdAt: Date? = nil, inputDataLocationS3: String? = nil, name: String? = nil, scoreThreshold: Float? = nil, sizeInBytes: Int64? = nil, logUri: String? = nil, startedAt: Date? = nil, trainingParameters: [String: String]? = nil) {
            self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
            self.trainingDataSourceId = trainingDataSourceId
            self.message = message
            self.mLModelId = mLModelId
            self.recipe = recipe
            self.endpointInfo = endpointInfo
            self.createdByIamUser = createdByIamUser
            self.schema = schema
            self.mLModelType = mLModelType
            self.finishedAt = finishedAt
            self.computeTime = computeTime
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.createdAt = createdAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.name = name
            self.scoreThreshold = scoreThreshold
            self.sizeInBytes = sizeInBytes
            self.logUri = logUri
            self.startedAt = startedAt
            self.trainingParameters = trainingParameters
        }

    }

    public struct UpdateDataSourceOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the DataSource during creation. This value should be identical to the value of the DataSourceID in the request.
        public var dataSourceId: String? = nil

        public init() {}

        public init(dataSourceId: String? = nil) {
            self.dataSourceId = dataSourceId
        }

    }

    public struct DescribeTagsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the ML object. For example, exampleModelId. 
        public var resourceId: String = ""
        /// The type of the ML object.
        public var resourceType: String = ""

        public init() {}

        public init(resourceId: String, resourceType: String) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

    }

    public struct DeleteEvaluationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the Evaluation to delete.
        public var evaluationId: String = ""

        public init() {}

        public init(evaluationId: String) {
            self.evaluationId = evaluationId
        }

    }

    public struct MLModel: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The algorithm used to train the MLModel. The following algorithm is supported:   SGD -- Stochastic gradient descent. The goal of SGD is to minimize the gradient of the loss function.  
        public var algorithm: String? = nil
        /// The time of the most recent edit to the ScoreThreshold. The time is expressed in epoch time.
        public var scoreThresholdLastUpdatedAt: Date? = nil
        /// A description of the most recent details about accessing the MLModel.
        public var message: String? = nil
        /// The ID assigned to the MLModel at creation.
        public var mLModelId: String? = nil
        /// The ID of the training DataSource. The CreateMLModel operation uses the TrainingDataSourceId.
        public var trainingDataSourceId: String? = nil
        /// Identifies the MLModel category. The following are the available types:   REGRESSION - Produces a numeric result. For example, "What price should a house be listed at?"  BINARY - Produces one of two possible results. For example, "Is this a child-friendly web site?".  MULTICLASS - Produces one of several possible results. For example, "Is this a HIGH-, LOW-, or MEDIUM-risk trade?". 
        public var mLModelType: String? = nil
        /// The AWS user account from which the MLModel was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        /// The current endpoint of the MLModel.
        public var endpointInfo: RealtimeEndpointInfo? = nil
        public var computeTime: Int64? = nil
        public var finishedAt: Date? = nil
        /// The time of the most recent edit to the MLModel. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: String? = nil
        /// The time that the MLModel was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The current status of an MLModel. This element can have one of the following values:    PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create an MLModel.  INPROGRESS - The creation process is underway.  FAILED - The request to create an MLModel didn't run to completion. The model isn't usable.  COMPLETED - The creation process completed successfully.  DELETED - The MLModel is marked as deleted. It isn't usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the MLModel.
        public var name: String? = nil
        public var scoreThreshold: Float? = nil
        public var sizeInBytes: Int64? = nil
        public var startedAt: Date? = nil
        /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:    sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance.  The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.  sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10. sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none.  sgd.l1RegularizationAmount - The coefficient regularization L1 norm, which controls overfitting the data by penalizing large coefficients. This parameter tends to drive coefficients to zero, resulting in sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.   sgd.l2RegularizationAmount - The coefficient regularization L2 norm, which controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.  
        public var trainingParameters: [String: String]? = nil

        public init() {}

        public init(algorithm: String? = nil, scoreThresholdLastUpdatedAt: Date? = nil, message: String? = nil, mLModelId: String? = nil, trainingDataSourceId: String? = nil, mLModelType: String? = nil, createdByIamUser: String? = nil, endpointInfo: RealtimeEndpointInfo? = nil, computeTime: Int64? = nil, finishedAt: Date? = nil, lastUpdatedAt: Date? = nil, inputDataLocationS3: String? = nil, createdAt: Date? = nil, status: String? = nil, name: String? = nil, scoreThreshold: Float? = nil, sizeInBytes: Int64? = nil, startedAt: Date? = nil, trainingParameters: [String: String]? = nil) {
            self.algorithm = algorithm
            self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
            self.message = message
            self.mLModelId = mLModelId
            self.trainingDataSourceId = trainingDataSourceId
            self.mLModelType = mLModelType
            self.createdByIamUser = createdByIamUser
            self.endpointInfo = endpointInfo
            self.computeTime = computeTime
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.createdAt = createdAt
            self.status = status
            self.name = name
            self.scoreThreshold = scoreThreshold
            self.sizeInBytes = sizeInBytes
            self.startedAt = startedAt
            self.trainingParameters = trainingParameters
        }

    }

    public struct DataSource: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The total number of observations contained in the data files that the DataSource references.
        public var dataSizeInBytes: Int64? = nil
        /// A description of the most recent details about creating the DataSource.
        public var message: String? = nil
        /// The number of data files referenced by the DataSource.
        public var numberOfFiles: Int64? = nil
        /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        public var roleARN: String? = nil
        public var rDSMetadata: RDSMetadata? = nil
        public var computeTime: Int64? = nil
        public var finishedAt: Date? = nil
        /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
        public var dataRearrangement: String? = nil
        /// The time of the most recent edit to the BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The ID that is assigned to the DataSource during creation.
        public var dataSourceId: String? = nil
        /// The time that the DataSource was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The location and name of the data in Amazon Simple Storage Service (Amazon S3) that is used by a DataSource.
        public var dataLocationS3: String? = nil
        /// The current status of the DataSource. This element can have one of the following values:   PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create a DataSource. INPROGRESS - The creation process is underway. FAILED - The request to create a DataSource did not run to completion. It is not usable. COMPLETED - The creation process completed successfully. DELETED - The DataSource is marked as deleted. It is not usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the DataSource.
        public var name: String? = nil
        public var redshiftMetadata: RedshiftMetadata? = nil
        public var startedAt: Date? = nil
        ///  The parameter is true if statistics need to be generated from the observation data. 
        public var computeStatistics: Bool? = nil

        public init() {}

        public init(dataSizeInBytes: Int64? = nil, message: String? = nil, numberOfFiles: Int64? = nil, createdByIamUser: String? = nil, roleARN: String? = nil, rDSMetadata: RDSMetadata? = nil, computeTime: Int64? = nil, finishedAt: Date? = nil, dataRearrangement: String? = nil, lastUpdatedAt: Date? = nil, dataSourceId: String? = nil, createdAt: Date? = nil, dataLocationS3: String? = nil, status: String? = nil, name: String? = nil, redshiftMetadata: RedshiftMetadata? = nil, startedAt: Date? = nil, computeStatistics: Bool? = nil) {
            self.dataSizeInBytes = dataSizeInBytes
            self.message = message
            self.numberOfFiles = numberOfFiles
            self.createdByIamUser = createdByIamUser
            self.roleARN = roleARN
            self.rDSMetadata = rDSMetadata
            self.computeTime = computeTime
            self.finishedAt = finishedAt
            self.dataRearrangement = dataRearrangement
            self.lastUpdatedAt = lastUpdatedAt
            self.dataSourceId = dataSourceId
            self.createdAt = createdAt
            self.dataLocationS3 = dataLocationS3
            self.status = status
            self.name = name
            self.redshiftMetadata = redshiftMetadata
            self.startedAt = startedAt
            self.computeStatistics = computeStatistics
        }

    }

    public struct PredictOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var prediction: Prediction? = nil

        public init() {}

        public init(prediction: Prediction? = nil) {
            self.prediction = prediction
        }

    }

    public struct PerformanceMetrics: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var properties: [String: String]? = nil

        public init() {}

        public init(properties: [String: String]? = nil) {
            self.properties = properties
        }

    }

    public struct DescribeMLModelsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The not equal to operator. The MLModel results will have FilterVariable values not equal to the value specified with NE.
        public var nE: String? = nil
        /// The equal to operator. The MLModel results will have FilterVariable values that exactly match the value specified with EQ.
        public var eQ: String? = nil
        /// The greater than operator. The MLModel results will have FilterVariable values that are greater than the value specified with GT.
        public var gT: String? = nil
        /// Use one of the following variables to filter a list of MLModel:   CreatedAt - Sets the search criteria to MLModel creation date.  Status - Sets the search criteria to MLModel status.  Name - Sets the search criteria to the contents of MLModel  Name.  IAMUser - Sets the search criteria to the user account that invoked the MLModel creation.  TrainingDataSourceId - Sets the search criteria to the DataSource used to train one or more MLModel.  RealtimeEndpointStatus - Sets the search criteria to the MLModel real-time endpoint status.  MLModelType - Sets the search criteria to MLModel type: binary, regression, or multi-class.  Algorithm - Sets the search criteria to the algorithm that the MLModel uses.  TrainingDataURI - Sets the search criteria to the data file(s) used in training a MLModel. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory. 
        public var filterVariable: String? = nil
        /// A string that is found at the beginning of a variable, such as Name or Id. For example, an MLModel could have the Name 2014-09-09-HolidayGiftMailer. To search for this MLModel, select Name for the FilterVariable and any of the following strings for the Prefix:   2014-09 2014-09-09 2014-09-09-Holiday 
        public var prefix: String? = nil
        /// The less than operator. The MLModel results will have FilterVariable values that are less than the value specified with LT.
        public var lT: String? = nil
        /// The less than or equal to operator. The MLModel results will have FilterVariable values that are less than or equal to the value specified with LE.
        public var lE: String? = nil
        /// A two-value parameter that determines the sequence of the resulting list of MLModel.   asc - Arranges the list in ascending order (A-Z, 0-9).  dsc - Arranges the list in descending order (Z-A, 9-0).  Results are sorted by FilterVariable.
        public var sortOrder: String? = nil
        /// The number of pages of information to include in the result. The range of acceptable values is 1 through 100. The default value is 100.
        public var limit: Int32? = nil
        /// The ID of the page in the paginated results.
        public var nextToken: String? = nil
        /// The greater than or equal to operator. The MLModel results will have FilterVariable values that are greater than or equal to the value specified with GE. 
        public var gE: String? = nil

        public init() {}

        public init(nE: String? = nil, eQ: String? = nil, gT: String? = nil, filterVariable: String? = nil, prefix: String? = nil, lT: String? = nil, lE: String? = nil, sortOrder: String? = nil, limit: Int32? = nil, nextToken: String? = nil, gE: String? = nil) {
            self.nE = nE
            self.eQ = eQ
            self.gT = gT
            self.filterVariable = filterVariable
            self.prefix = prefix
            self.lT = lT
            self.lE = lE
            self.sortOrder = sortOrder
            self.limit = limit
            self.nextToken = nextToken
            self.gE = gE
        }

    }

    public struct DeleteTagsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the tagged ML object. For example, exampleModelId.
        public var resourceId: String = ""
        /// The type of the tagged ML object.
        public var resourceType: String = ""
        /// One or more tags to delete.
        public var tagKeys: [String] = []

        public init() {}

        public init(resourceId: String, resourceType: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.tagKeys = tagKeys
        }

    }

    public struct GetEvaluationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Measurements of how well the MLModel performed using observations referenced by the DataSource. One of the following metric is returned based on the type of the MLModel:    BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.    RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.   MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.     For more information about performance metrics, please see the Amazon Machine Learning Developer Guide. 
        public var performanceMetrics: PerformanceMetrics? = nil
        /// The evaluation ID which is same as the EvaluationId in the request.
        public var evaluationId: String? = nil
        /// A description of the most recent details about evaluating the MLModel.
        public var message: String? = nil
        /// The ID of the MLModel that was the focus of the evaluation.
        public var mLModelId: String? = nil
        /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: String? = nil
        /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the Evaluation, normalized and scaled on computation resources. ComputeTime is only available if the Evaluation is in the COMPLETED state.
        public var computeTime: Int64? = nil
        /// The epoch time when Amazon Machine Learning marked the Evaluation as COMPLETED or FAILED. FinishedAt is only available when the Evaluation is in the COMPLETED or FAILED state.
        public var finishedAt: Date? = nil
        /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
        public var lastUpdatedAt: Date? = nil
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: String? = nil
        /// The time that the Evaluation was created. The time is expressed in epoch time.
        public var createdAt: Date? = nil
        /// The status of the evaluation. This element can have one of the following values:   PENDING - Amazon Machine Language (Amazon ML) submitted a request to evaluate an MLModel.  INPROGRESS - The evaluation is underway.  FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.  COMPLETED - The evaluation process completed successfully.  DELETED - The Evaluation is marked as deleted. It is not usable. 
        public var status: String? = nil
        /// A user-supplied name or description of the Evaluation. 
        public var name: String? = nil
        /// A link to the file that contains logs of the CreateEvaluation operation.
        public var logUri: String? = nil
        /// The epoch time when Amazon Machine Learning marked the Evaluation as INPROGRESS. StartedAt isn't available if the Evaluation is in the PENDING state.
        public var startedAt: Date? = nil
        /// The DataSource used for this evaluation.
        public var evaluationDataSourceId: String? = nil

        public init() {}

        public init(performanceMetrics: PerformanceMetrics? = nil, evaluationId: String? = nil, message: String? = nil, mLModelId: String? = nil, createdByIamUser: String? = nil, computeTime: Int64? = nil, finishedAt: Date? = nil, lastUpdatedAt: Date? = nil, inputDataLocationS3: String? = nil, createdAt: Date? = nil, status: String? = nil, name: String? = nil, logUri: String? = nil, startedAt: Date? = nil, evaluationDataSourceId: String? = nil) {
            self.performanceMetrics = performanceMetrics
            self.evaluationId = evaluationId
            self.message = message
            self.mLModelId = mLModelId
            self.createdByIamUser = createdByIamUser
            self.computeTime = computeTime
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.createdAt = createdAt
            self.status = status
            self.name = name
            self.logUri = logUri
            self.startedAt = startedAt
            self.evaluationDataSourceId = evaluationDataSourceId
        }

    }

    public struct AddTagsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the ML object to tag. For example, exampleModelId.
        public var resourceId: String = ""
        /// The key-value pairs to use to create tags. If you specify a key without specifying a value, Amazon ML creates a tag with the specified key and a value of null.
        public var tags: [Tag] = []
        /// The type of the ML object to tag. 
        public var resourceType: String = ""

        public init() {}

        public init(resourceId: String, tags: [Tag], resourceType: String) {
            self.resourceId = resourceId
            self.tags = tags
            self.resourceType = resourceType
        }

    }

    public struct DeleteMLModelOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelID in the request.
        public var mLModelId: String? = nil

        public init() {}

        public init(mLModelId: String? = nil) {
            self.mLModelId = mLModelId
        }

    }

    public struct CreateDataSourceFromRDSOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the DataSourceID in the request. 
        public var dataSourceId: String? = nil

        public init() {}

        public init(dataSourceId: String? = nil) {
            self.dataSourceId = dataSourceId
        }

    }

    public struct UpdateBatchPredictionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the BatchPrediction during creation. This value should be identical to the value of the BatchPredictionId in the request.
        public var batchPredictionId: String? = nil

        public init() {}

        public init(batchPredictionId: String? = nil) {
            self.batchPredictionId = batchPredictionId
        }

    }

    public struct CreateRealtimeEndpointOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
        public var mLModelId: String? = nil
        /// The endpoint information of the MLModel 
        public var realtimeEndpointInfo: RealtimeEndpointInfo? = nil

        public init() {}

        public init(mLModelId: String? = nil, realtimeEndpointInfo: RealtimeEndpointInfo? = nil) {
            self.mLModelId = mLModelId
            self.realtimeEndpointInfo = realtimeEndpointInfo
        }

    }

    public struct CreateMLModelInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Simple Storage Service (Amazon S3) location and file name that contains the MLModel recipe. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
        public var recipeUri: String? = nil
        /// The DataSource that points to the training data.
        public var trainingDataSourceId: String = ""
        /// A user-supplied ID that uniquely identifies the MLModel.
        public var mLModelId: String = ""
        /// The data recipe for creating the MLModel. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
        public var recipe: String? = nil
        /// The category of supervised learning that this MLModel will address. Choose from the following types:  Choose REGRESSION if the MLModel will be used to predict a numeric value. Choose BINARY if the MLModel result has two possible values. Choose MULTICLASS if the MLModel result has a limited number of values.    For more information, see the Amazon Machine Learning Developer Guide.
        public var mLModelType: String = ""
        /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:    sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance.  The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.  sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.  sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none. We strongly recommend that you shuffle your data.   sgd.l1RegularizationAmount - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.   sgd.l2RegularizationAmount - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.  
        public var parameters: [String: String]? = nil
        /// A user-supplied name or description of the MLModel.
        public var mLModelName: String? = nil

        public init() {}

        public init(recipeUri: String? = nil, trainingDataSourceId: String, mLModelId: String, recipe: String? = nil, mLModelType: String, parameters: [String: String]? = nil, mLModelName: String? = nil) {
            self.recipeUri = recipeUri
            self.trainingDataSourceId = trainingDataSourceId
            self.mLModelId = mLModelId
            self.recipe = recipe
            self.mLModelType = mLModelType
            self.parameters = parameters
            self.mLModelName = mLModelName
        }

    }

    public struct DescribeBatchPredictionsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The not equal to operator. The BatchPrediction results will have FilterVariable values not equal to the value specified with NE.
        public var nE: String? = nil
        /// The equal to operator. The BatchPrediction results will have FilterVariable values that exactly match the value specified with EQ.
        public var eQ: String? = nil
        /// The greater than operator. The BatchPrediction results will have FilterVariable values that are greater than the value specified with GT.
        public var gT: String? = nil
        /// Use one of the following variables to filter a list of BatchPrediction:   CreatedAt - Sets the search criteria to the BatchPrediction creation date.  Status - Sets the search criteria to the BatchPrediction status.  Name - Sets the search criteria to the contents of the BatchPrediction  Name.  IAMUser - Sets the search criteria to the user account that invoked the BatchPrediction creation.  MLModelId - Sets the search criteria to the MLModel used in the BatchPrediction.  DataSourceId - Sets the search criteria to the DataSource used in the BatchPrediction.  DataURI - Sets the search criteria to the data file(s) used in the BatchPrediction. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory. 
        public var filterVariable: String? = nil
        /// A string that is found at the beginning of a variable, such as Name or Id. For example, a Batch Prediction operation could have the Name 2014-09-09-HolidayGiftMailer. To search for this BatchPrediction, select Name for the FilterVariable and any of the following strings for the Prefix:   2014-09 2014-09-09 2014-09-09-Holiday 
        public var prefix: String? = nil
        /// The less than operator. The BatchPrediction results will have FilterVariable values that are less than the value specified with LT.
        public var lT: String? = nil
        /// The less than or equal to operator. The BatchPrediction results will have FilterVariable values that are less than or equal to the value specified with LE.
        public var lE: String? = nil
        /// A two-value parameter that determines the sequence of the resulting list of MLModels.   asc - Arranges the list in ascending order (A-Z, 0-9).  dsc - Arranges the list in descending order (Z-A, 9-0).  Results are sorted by FilterVariable.
        public var sortOrder: String? = nil
        /// The number of pages of information to include in the result. The range of acceptable values is 1 through 100. The default value is 100.
        public var limit: Int32? = nil
        /// An ID of the page in the paginated results.
        public var nextToken: String? = nil
        /// The greater than or equal to operator. The BatchPrediction results will have FilterVariable values that are greater than or equal to the value specified with GE. 
        public var gE: String? = nil

        public init() {}

        public init(nE: String? = nil, eQ: String? = nil, gT: String? = nil, filterVariable: String? = nil, prefix: String? = nil, lT: String? = nil, lE: String? = nil, sortOrder: String? = nil, limit: Int32? = nil, nextToken: String? = nil, gE: String? = nil) {
            self.nE = nE
            self.eQ = eQ
            self.gT = gT
            self.filterVariable = filterVariable
            self.prefix = prefix
            self.lT = lT
            self.lE = lE
            self.sortOrder = sortOrder
            self.limit = limit
            self.nextToken = nextToken
            self.gE = gE
        }

    }

    public struct DescribeDataSourcesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The not equal to operator. The DataSource results will have FilterVariable values not equal to the value specified with NE.
        public var nE: String? = nil
        /// The equal to operator. The DataSource results will have FilterVariable values that exactly match the value specified with EQ.
        public var eQ: String? = nil
        /// The greater than operator. The DataSource results will have FilterVariable values that are greater than the value specified with GT.
        public var gT: String? = nil
        /// Use one of the following variables to filter a list of DataSource:   CreatedAt - Sets the search criteria to DataSource creation dates.  Status - Sets the search criteria to DataSource statuses.  Name - Sets the search criteria to the contents of DataSource   Name.  DataUri - Sets the search criteria to the URI of data files used to create the DataSource. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.  IAMUser - Sets the search criteria to the user account that invoked the DataSource creation. 
        public var filterVariable: String? = nil
        /// A string that is found at the beginning of a variable, such as Name or Id. For example, a DataSource could have the Name 2014-09-09-HolidayGiftMailer. To search for this DataSource, select Name for the FilterVariable and any of the following strings for the Prefix:   2014-09 2014-09-09 2014-09-09-Holiday 
        public var prefix: String? = nil
        /// The less than operator. The DataSource results will have FilterVariable values that are less than the value specified with LT.
        public var lT: String? = nil
        /// The less than or equal to operator. The DataSource results will have FilterVariable values that are less than or equal to the value specified with LE.
        public var lE: String? = nil
        /// A two-value parameter that determines the sequence of the resulting list of DataSource.   asc - Arranges the list in ascending order (A-Z, 0-9).  dsc - Arranges the list in descending order (Z-A, 9-0).  Results are sorted by FilterVariable.
        public var sortOrder: String? = nil
        ///  The maximum number of DataSource to include in the result.
        public var limit: Int32? = nil
        /// The ID of the page in the paginated results.
        public var nextToken: String? = nil
        /// The greater than or equal to operator. The DataSource results will have FilterVariable values that are greater than or equal to the value specified with GE. 
        public var gE: String? = nil

        public init() {}

        public init(nE: String? = nil, eQ: String? = nil, gT: String? = nil, filterVariable: String? = nil, prefix: String? = nil, lT: String? = nil, lE: String? = nil, sortOrder: String? = nil, limit: Int32? = nil, nextToken: String? = nil, gE: String? = nil) {
            self.nE = nE
            self.eQ = eQ
            self.gT = gT
            self.filterVariable = filterVariable
            self.prefix = prefix
            self.lT = lT
            self.lE = lE
            self.sortOrder = sortOrder
            self.limit = limit
            self.nextToken = nextToken
            self.gE = gE
        }

    }

    public struct DeleteTagsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the ML object from which tags were deleted.
        public var resourceId: String? = nil
        /// The type of the ML object from which tags were deleted.
        public var resourceType: String? = nil

        public init() {}

        public init(resourceId: String? = nil, resourceType: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

    }

    public struct GetDataSourceInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the DataSource at creation.
        public var dataSourceId: String = ""
        /// Specifies whether the GetDataSource operation should return DataSourceSchema. If true, DataSourceSchema is returned. If false, DataSourceSchema is not returned.
        public var verbose: Bool? = nil

        public init() {}

        public init(dataSourceId: String, verbose: Bool? = nil) {
            self.dataSourceId = dataSourceId
            self.verbose = verbose
        }

    }

    public struct DeleteEvaluationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-supplied ID that uniquely identifies the Evaluation. This value should be identical to the value of the EvaluationId in the request.
        public var evaluationId: String? = nil

        public init() {}

        public init(evaluationId: String? = nil) {
            self.evaluationId = evaluationId
        }

    }

}