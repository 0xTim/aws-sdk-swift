// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Shield {

    public struct AttackProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "TopContributors", required: false, type: .list), 
            AWSShapeMember(label: "AttackLayer", required: false, type: .enum), 
            AWSShapeMember(label: "Total", required: false, type: .long), 
            AWSShapeMember(label: "AttackPropertyIdentifier", required: false, type: .enum)
        ]
        /// The unit of the Value of the contributions.
        public let unit: Unit?
        /// The array of Contributor objects that includes the top five contributors to an attack. 
        public let topContributors: [Contributor]?
        /// The type of DDoS event that was observed. NETWORK indicates layer 3 and layer 4 events and APPLICATION indicates layer 7 events.
        public let attackLayer: AttackLayer?
        /// The total contributions made to this attack by all contributors, not just the five listed in the TopContributors list.
        public let total: Int64?
        /// Defines the DDoS attack property information that is provided.
        public let attackPropertyIdentifier: AttackPropertyIdentifier?

        public init(unit: Unit? = nil, topContributors: [Contributor]? = nil, attackLayer: AttackLayer? = nil, total: Int64? = nil, attackPropertyIdentifier: AttackPropertyIdentifier? = nil) {
            self.unit = unit
            self.topContributors = topContributors
            self.attackLayer = attackLayer
            self.total = total
            self.attackPropertyIdentifier = attackPropertyIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case topContributors = "TopContributors"
            case attackLayer = "AttackLayer"
            case total = "Total"
            case attackPropertyIdentifier = "AttackPropertyIdentifier"
        }
    }

    public enum SubResourceType: String, CustomStringConvertible, Codable {
        case ip = "IP"
        case url = "URL"
        public var description: String { return self.rawValue }
    }

    public struct Protection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The ARN (Amazon Resource Name) of the AWS resource that is protected.
        public let resourceArn: String?
        /// The friendly name of the protection. For example, My CloudFront distributions.
        public let name: String?
        /// The unique identifier (ID) of the protection.
        public let id: String?

        public init(resourceArn: String? = nil, name: String? = nil, id: String? = nil) {
            self.resourceArn = resourceArn
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct DeleteSubscriptionRequest: AWSShape {

    }

    public struct AttackSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "AttackVectors", required: false, type: .list), 
            AWSShapeMember(label: "AttackId", required: false, type: .string)
        ]
        /// The start time of the attack, in Unix time in seconds. For more information see timestamp.
        public let startTime: TimeStamp?
        /// The end time of the attack, in Unix time in seconds. For more information see timestamp.
        public let endTime: TimeStamp?
        /// The ARN (Amazon Resource Name) of the resource that was attacked.
        public let resourceArn: String?
        /// The list of attacks for a specified time period.
        public let attackVectors: [AttackVectorDescription]?
        /// The unique identifier (ID) of the attack.
        public let attackId: String?

        public init(startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, resourceArn: String? = nil, attackVectors: [AttackVectorDescription]? = nil, attackId: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.resourceArn = resourceArn
            self.attackVectors = attackVectors
            self.attackId = attackId
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case resourceArn = "ResourceArn"
            case attackVectors = "AttackVectors"
            case attackId = "AttackId"
        }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TimeCommitmentInSeconds", required: false, type: .long)
        ]
        /// The start time of the subscription, in Unix time in seconds. For more information see timestamp.
        public let startTime: TimeStamp?
        /// The length, in seconds, of the AWS Shield Advanced subscription for the account.
        public let timeCommitmentInSeconds: Int64?

        public init(startTime: TimeStamp? = nil, timeCommitmentInSeconds: Int64? = nil) {
            self.startTime = startTime
            self.timeCommitmentInSeconds = timeCommitmentInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case timeCommitmentInSeconds = "TimeCommitmentInSeconds"
        }
    }

    public enum AttackLayer: String, CustomStringConvertible, Codable {
        case network = "NETWORK"
        case application = "APPLICATION"
        public var description: String { return self.rawValue }
    }

    public struct AttackDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Mitigations", required: false, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubResources", required: false, type: .list), 
            AWSShapeMember(label: "AttackCounters", required: false, type: .list), 
            AWSShapeMember(label: "AttackId", required: false, type: .string), 
            AWSShapeMember(label: "AttackProperties", required: false, type: .list)
        ]
        /// The time the attack started, in Unix time in seconds. For more information see timestamp.
        public let startTime: TimeStamp?
        /// List of mitigation actions taken for the attack.
        public let mitigations: [Mitigation]?
        /// The ARN (Amazon Resource Name) of the resource that was attacked.
        public let resourceArn: String?
        /// The time the attack ended, in Unix time in seconds. For more information see timestamp.
        public let endTime: TimeStamp?
        /// If applicable, additional detail about the resource being attacked, for example, IP address or URL.
        public let subResources: [SubResourceSummary]?
        /// List of counters that describe the attack for the specified time period.
        public let attackCounters: [SummarizedCounter]?
        /// The unique identifier (ID) of the attack.
        public let attackId: String?
        /// The array of AttackProperty objects.
        public let attackProperties: [AttackProperty]?

        public init(startTime: TimeStamp? = nil, mitigations: [Mitigation]? = nil, resourceArn: String? = nil, endTime: TimeStamp? = nil, subResources: [SubResourceSummary]? = nil, attackCounters: [SummarizedCounter]? = nil, attackId: String? = nil, attackProperties: [AttackProperty]? = nil) {
            self.startTime = startTime
            self.mitigations = mitigations
            self.resourceArn = resourceArn
            self.endTime = endTime
            self.subResources = subResources
            self.attackCounters = attackCounters
            self.attackId = attackId
            self.attackProperties = attackProperties
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case mitigations = "Mitigations"
            case resourceArn = "ResourceArn"
            case endTime = "EndTime"
            case subResources = "SubResources"
            case attackCounters = "AttackCounters"
            case attackId = "AttackId"
            case attackProperties = "AttackProperties"
        }
    }

    public struct GetSubscriptionStateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionState", required: true, type: .enum)
        ]
        /// The status of the subscription.
        public let subscriptionState: SubscriptionState

        public init(subscriptionState: SubscriptionState) {
            self.subscriptionState = subscriptionState
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionState = "SubscriptionState"
        }
    }

    public struct ListAttacksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttackSummaries", required: false, type: .list)
        ]
        /// The token returned by a previous call to indicate that there is more data available. If not null, more results are available. Pass this value for the NextMarker parameter in a subsequent call to ListAttacks to retrieve the next set of items.
        public let nextToken: String?
        /// The attack information for the specified time range.
        public let attackSummaries: [AttackSummary]?

        public init(nextToken: String? = nil, attackSummaries: [AttackSummary]? = nil) {
            self.nextToken = nextToken
            self.attackSummaries = attackSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attackSummaries = "AttackSummaries"
        }
    }

    public struct DescribeAttackResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attack", required: false, type: .structure)
        ]
        /// The attack that is described.
        public let attack: AttackDetail?

        public init(attack: AttackDetail? = nil) {
            self.attack = attack
        }

        private enum CodingKeys: String, CodingKey {
            case attack = "Attack"
        }
    }

    public struct ListProtectionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Protections", required: false, type: .list)
        ]
        /// If you specify a value for MaxResults and you have more Protections than the value of MaxResults, AWS Shield Advanced returns a NextToken value in the response that allows you to list another group of Protections. For the second and subsequent ListProtections requests, specify the value of NextToken from the previous response to get information about another batch of Protections.
        public let nextToken: String?
        /// The array of enabled Protection objects.
        public let protections: [Protection]?

        public init(nextToken: String? = nil, protections: [Protection]? = nil) {
            self.nextToken = nextToken
            self.protections = protections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case protections = "Protections"
        }
    }

    public struct SummarizedCounter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "Average", required: false, type: .double), 
            AWSShapeMember(label: "N", required: false, type: .integer), 
            AWSShapeMember(label: "Max", required: false, type: .double), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Sum", required: false, type: .double)
        ]
        /// The unit of the counters.
        public let unit: String?
        /// The average value of the counter for a specified time period.
        public let average: Double?
        /// The number of counters for a specified time period.
        public let n: Int32?
        /// The maximum value of the counter for a specified time period.
        public let max: Double?
        /// The counter name.
        public let name: String?
        /// The total of counter values for a specified time period.
        public let sum: Double?

        public init(unit: String? = nil, average: Double? = nil, n: Int32? = nil, max: Double? = nil, name: String? = nil, sum: Double? = nil) {
            self.unit = unit
            self.average = average
            self.n = n
            self.max = max
            self.name = name
            self.sum = sum
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case average = "Average"
            case n = "N"
            case max = "Max"
            case name = "Name"
            case sum = "Sum"
        }
    }

    public struct Contributor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The contribution of this contributor expressed in Protection units. For example 10,000.
        public let value: Int64?
        /// The name of the contributor. This is dependent on the AttackPropertyIdentifier. For example, if the AttackPropertyIdentifier is SOURCE_COUNTRY, the Name could be United States.
        public let name: String?

        public init(value: Int64? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct CreateProtectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// Friendly name for the Protection you are creating.
        public let name: String
        /// The ARN (Amazon Resource Name) of the resource to be protected. The ARN should be in one of the following formats:   For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id     For an Elastic Load Balancer (Classic Load Balancer): arn:aws:elasticloadbalancing:region:account-id:loadbalancer/load-balancer-name     For AWS CloudFront distribution: arn:aws:cloudfront::account-id:distribution/distribution-id     For Amazon Route 53: arn:aws:route53::account-id:hostedzone/hosted-zone-id     For an Elastic IP address: arn:aws:ec2:region:account-id:eip-allocation/allocation-id    
        public let resourceArn: String

        public init(name: String, resourceArn: String) {
            self.name = name
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetSubscriptionStateRequest: AWSShape {

    }

    public struct DescribeAttackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttackId", required: true, type: .string)
        ]
        /// The unique identifier (ID) for the attack that to be described.
        public let attackId: String

        public init(attackId: String) {
            self.attackId = attackId
        }

        private enum CodingKeys: String, CodingKey {
            case attackId = "AttackId"
        }
    }

    public struct DescribeProtectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protection", required: false, type: .structure)
        ]
        /// The Protection object that is described.
        public let protection: Protection?

        public init(protection: Protection? = nil) {
            self.protection = protection
        }

        private enum CodingKeys: String, CodingKey {
            case protection = "Protection"
        }
    }

    public struct DescribeProtectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionId", required: true, type: .string)
        ]
        /// The unique identifier (ID) for the Protection object that is described.
        public let protectionId: String

        public init(protectionId: String) {
            self.protectionId = protectionId
        }

        private enum CodingKeys: String, CodingKey {
            case protectionId = "ProtectionId"
        }
    }

    public struct DeleteProtectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionId", required: true, type: .string)
        ]
        /// The unique identifier (ID) for the Protection object to be deleted.
        public let protectionId: String

        public init(protectionId: String) {
            self.protectionId = protectionId
        }

        private enum CodingKeys: String, CodingKey {
            case protectionId = "ProtectionId"
        }
    }

    public struct DeleteSubscriptionResponse: AWSShape {

    }

    public struct TimeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ToExclusive", required: false, type: .timestamp), 
            AWSShapeMember(label: "FromInclusive", required: false, type: .timestamp)
        ]
        /// The end time, in Unix time in seconds. For more information see timestamp.
        public let toExclusive: TimeStamp?
        /// The start time, in Unix time in seconds. For more information see timestamp.
        public let fromInclusive: TimeStamp?

        public init(toExclusive: TimeStamp? = nil, fromInclusive: TimeStamp? = nil) {
            self.toExclusive = toExclusive
            self.fromInclusive = fromInclusive
        }

        private enum CodingKeys: String, CodingKey {
            case toExclusive = "ToExclusive"
            case fromInclusive = "FromInclusive"
        }
    }

    public struct CreateSubscriptionResponse: AWSShape {

    }

    public struct CreateProtectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionId", required: false, type: .string)
        ]
        /// The unique identifier (ID) for the Protection object that is created.
        public let protectionId: String?

        public init(protectionId: String? = nil) {
            self.protectionId = protectionId
        }

        private enum CodingKeys: String, CodingKey {
            case protectionId = "ProtectionId"
        }
    }

    public struct SummarizedAttackVector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VectorCounters", required: false, type: .list), 
            AWSShapeMember(label: "VectorType", required: true, type: .string)
        ]
        /// The list of counters that describe the details of the attack.
        public let vectorCounters: [SummarizedCounter]?
        /// The attack type, for example, SNMP reflection or SYN flood.
        public let vectorType: String

        public init(vectorCounters: [SummarizedCounter]? = nil, vectorType: String) {
            self.vectorCounters = vectorCounters
            self.vectorType = vectorType
        }

        private enum CodingKeys: String, CodingKey {
            case vectorCounters = "VectorCounters"
            case vectorType = "VectorType"
        }
    }

    public struct Mitigation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MitigationName", required: false, type: .string)
        ]
        /// The name of the mitigation taken for this attack.
        public let mitigationName: String?

        public init(mitigationName: String? = nil) {
            self.mitigationName = mitigationName
        }

        private enum CodingKeys: String, CodingKey {
            case mitigationName = "MitigationName"
        }
    }

    public struct DescribeSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscription", required: false, type: .structure)
        ]
        /// The AWS Shield Advanced subscription details for an account.
        public let subscription: Subscription?

        public init(subscription: Subscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "Subscription"
        }
    }

    public struct CreateSubscriptionRequest: AWSShape {

    }

    public struct ListAttacksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceArns", required: false, type: .list), 
            AWSShapeMember(label: "EndTime", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The start of the time period for the attacks. This is a timestamp type. The sample request above indicates a number type because the default used by WAF is Unix time in seconds. However any valid timestamp format is allowed. 
        public let startTime: TimeRange?
        /// The ARN (Amazon Resource Name) of the resource that was attacked. If this is left blank, all applicable resources for this account will be included.
        public let resourceArns: [String]?
        /// The end of the time period for the attacks. This is a timestamp type. The sample request above indicates a number type because the default used by WAF is Unix time in seconds. However any valid timestamp format is allowed. 
        public let endTime: TimeRange?
        /// The ListAttacksRequest.NextMarker value from a previous call to ListAttacksRequest. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of AttackSummary objects to be returned. If this is left blank, the first 20 results will be returned.
        public let maxResults: Int32?

        public init(startTime: TimeRange? = nil, resourceArns: [String]? = nil, endTime: TimeRange? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.startTime = startTime
            self.resourceArns = resourceArns
            self.endTime = endTime
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case resourceArns = "ResourceArns"
            case endTime = "EndTime"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AttackVectorDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VectorType", required: true, type: .string)
        ]
        /// The attack type. Valid values:   UDP_TRAFFIC   UDP_FRAGMENT   GENERIC_UDP_REFLECTION   DNS_REFLECTION   NTP_REFLECTION   CHARGEN_REFLECTION   SSDP_REFLECTION   PORT_MAPPER   RIP_REFLECTION   SNMP_REFLECTION   MSSQL_REFLECTION   NET_BIOS_REFLECTION   SYN_FLOOD   ACK_FLOOD   REQUEST_FLOOD  
        public let vectorType: String

        public init(vectorType: String) {
            self.vectorType = vectorType
        }

        private enum CodingKeys: String, CodingKey {
            case vectorType = "VectorType"
        }
    }

    public enum AttackPropertyIdentifier: String, CustomStringConvertible, Codable {
        case destinationUrl = "DESTINATION_URL"
        case referrer = "REFERRER"
        case sourceAsn = "SOURCE_ASN"
        case sourceCountry = "SOURCE_COUNTRY"
        case sourceIpAddress = "SOURCE_IP_ADDRESS"
        case sourceUserAgent = "SOURCE_USER_AGENT"
        public var description: String { return self.rawValue }
    }

    public enum Unit: String, CustomStringConvertible, Codable {
        case bits = "BITS"
        case bytes = "BYTES"
        case packets = "PACKETS"
        case requests = "REQUESTS"
        public var description: String { return self.rawValue }
    }

    public struct SubResourceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Counters", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "AttackVectors", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The counters that describe the details of the attack.
        public let counters: [SummarizedCounter]?
        /// The SubResource type.
        public let `type`: SubResourceType?
        /// The list of attack types and associated counters.
        public let attackVectors: [SummarizedAttackVector]?
        /// The unique identifier (ID) of the SubResource.
        public let id: String?

        public init(counters: [SummarizedCounter]? = nil, type: SubResourceType? = nil, attackVectors: [SummarizedAttackVector]? = nil, id: String? = nil) {
            self.counters = counters
            self.`type` = `type`
            self.attackVectors = attackVectors
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case counters = "Counters"
            case `type` = "Type"
            case attackVectors = "AttackVectors"
            case id = "Id"
        }
    }

    public struct ListProtectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ListProtectionsRequest.NextToken value from a previous call to ListProtections. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of Protection objects to be returned. If this is left blank the first 20 results will be returned.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum SubscriptionState: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSubscriptionRequest: AWSShape {

    }

    public struct DeleteProtectionResponse: AWSShape {

    }

}