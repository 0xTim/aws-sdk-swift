// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Elasticloadbalancingv2 {

    public struct ModifyTargetGroupAttributesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the attributes.
        public let attributes: [TargetGroupAttribute]?

        public init(attributes: [TargetGroupAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct Rule: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .string), 
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean), 
            AWSShapeMember(label: "RuleArn", required: false, type: .string), 
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "Conditions", required: false, type: .list)
        ]
        /// The priority.
        public let priority: String?
        /// Indicates whether this is the default rule.
        public let isDefault: Bool?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String?
        /// The actions.
        public let actions: [Action]?
        /// The conditions.
        public let conditions: [RuleCondition]?

        public init(priority: String? = nil, isDefault: Bool? = nil, ruleArn: String? = nil, actions: [Action]? = nil, conditions: [RuleCondition]? = nil) {
            self.priority = priority
            self.isDefault = isDefault
            self.ruleArn = ruleArn
            self.actions = actions
            self.conditions = conditions
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case isDefault = "IsDefault"
            case ruleArn = "RuleArn"
            case actions = "Actions"
            case conditions = "Conditions"
        }
    }

    public struct Action: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The type of action.
        public let `type`: ActionTypeEnum
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(type: ActionTypeEnum, targetGroupArn: String) {
            self.`type` = `type`
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct DeleteListenerInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(listenerArn: String) {
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArn = "ListenerArn"
        }
    }

    public struct DescribeTargetGroupAttributesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targetGroupArn: String) {
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct ModifyLoadBalancerAttributesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The load balancer attributes.
        public let attributes: [LoadBalancerAttribute]

        public init(loadBalancerArn: String, attributes: [LoadBalancerAttribute]) {
            self.loadBalancerArn = loadBalancerArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case attributes = "Attributes"
        }
    }

    public struct RegisterTargetsOutput: AWSShape {
        /// The key for the payload

    }

    public struct CreateListenerInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "DefaultActions", required: true, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: true, type: .integer)
        ]
        /// The protocol for connections from clients to the load balancer.
        public let `protocol`: ProtocolEnum
        /// The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        public let sslPolicy: String?
        /// The SSL server certificate. You must provide exactly one certificate if the protocol is HTTPS.
        public let certificates: [Certificate]?
        /// The default action for the listener.
        public let defaultActions: [Action]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The port on which the load balancer is listening.
        public let port: Int32

        public init(protocol: ProtocolEnum, sslPolicy: String? = nil, certificates: [Certificate]? = nil, defaultActions: [Action], loadBalancerArn: String, port: Int32) {
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
            self.certificates = certificates
            self.defaultActions = defaultActions
            self.loadBalancerArn = loadBalancerArn
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case sslPolicy = "SslPolicy"
            case certificates = "Certificates"
            case defaultActions = "DefaultActions"
            case loadBalancerArn = "LoadBalancerArn"
            case port = "Port"
        }
    }

    public enum TargetHealthReasonEnum: String, CustomStringConvertible, Codable {
        case elb_registrationinprogress = "Elb.RegistrationInProgress"
        case elb_initialhealthchecking = "Elb.InitialHealthChecking"
        case target_responsecodemismatch = "Target.ResponseCodeMismatch"
        case target_timeout = "Target.Timeout"
        case target_failedhealthchecks = "Target.FailedHealthChecks"
        case target_notregistered = "Target.NotRegistered"
        case target_notinuse = "Target.NotInUse"
        case target_deregistrationinprogress = "Target.DeregistrationInProgress"
        case target_invalidstate = "Target.InvalidState"
        case elb_internalerror = "Elb.InternalError"
        public var description: String { return self.rawValue }
    }

    public struct DescribeLoadBalancersOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?
        /// Information about the load balancers.
        public let loadBalancers: [LoadBalancer]?

        public init(nextMarker: String? = nil, loadBalancers: [LoadBalancer]? = nil) {
            self.nextMarker = nextMarker
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case loadBalancers = "LoadBalancers"
        }
    }

    public struct LoadBalancerState: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// A description of the state.
        public let reason: String?
        /// The state code. The initial state of the load balancer is provisioning. After the load balancer is fully set up and ready to route traffic, its state is active. If the load balancer could not be set up, its state is failed.
        public let code: LoadBalancerStateEnum?

        public init(reason: String? = nil, code: LoadBalancerStateEnum? = nil) {
            self.reason = reason
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case code = "Code"
        }
    }

    public struct TargetGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerArns", required: false, type: .list), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String?
        /// The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
        public let loadBalancerArns: [String]?
        /// The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public let healthCheckIntervalSeconds: Int32?
        /// The amount of time, in seconds, during which no response means a failed health check.
        public let healthCheckTimeoutSeconds: Int32?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public let unhealthyThresholdCount: Int32?
        /// The name of the target group.
        public let targetGroupName: String?
        /// The protocol to use to connect with the target.
        public let healthCheckProtocol: ProtocolEnum?
        /// The ID of the VPC for the targets.
        public let vpcId: String?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public let healthyThresholdCount: Int32?
        /// The protocol to use for routing traffic to the targets.
        public let `protocol`: ProtocolEnum?
        /// The destination for the health check request.
        public let healthCheckPath: String?
        /// The port to use to connect with the target.
        public let healthCheckPort: String?
        /// The port on which the targets are listening.
        public let port: Int32?

        public init(targetGroupArn: String? = nil, loadBalancerArns: [String]? = nil, matcher: Matcher? = nil, healthCheckIntervalSeconds: Int32? = nil, healthCheckTimeoutSeconds: Int32? = nil, unhealthyThresholdCount: Int32? = nil, targetGroupName: String? = nil, healthCheckProtocol: ProtocolEnum? = nil, vpcId: String? = nil, healthyThresholdCount: Int32? = nil, protocol: ProtocolEnum? = nil, healthCheckPath: String? = nil, healthCheckPort: String? = nil, port: Int32? = nil) {
            self.targetGroupArn = targetGroupArn
            self.loadBalancerArns = loadBalancerArns
            self.matcher = matcher
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.targetGroupName = targetGroupName
            self.healthCheckProtocol = healthCheckProtocol
            self.vpcId = vpcId
            self.healthyThresholdCount = healthyThresholdCount
            self.`protocol` = `protocol`
            self.healthCheckPath = healthCheckPath
            self.healthCheckPort = healthCheckPort
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case loadBalancerArns = "LoadBalancerArns"
            case matcher = "Matcher"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case targetGroupName = "TargetGroupName"
            case healthCheckProtocol = "HealthCheckProtocol"
            case vpcId = "VpcId"
            case healthyThresholdCount = "HealthyThresholdCount"
            case `protocol` = "Protocol"
            case healthCheckPath = "HealthCheckPath"
            case healthCheckPort = "HealthCheckPort"
            case port = "Port"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String?
        /// The key of the tag.
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct TagDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// Information about the tags.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct DescribeAccountLimitsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?

        public init(marker: String? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case pageSize = "PageSize"
        }
    }

    public enum TargetHealthStateEnum: String, CustomStringConvertible, Codable {
        case initial = "initial"
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        case unused = "unused"
        case draining = "draining"
        public var description: String { return self.rawValue }
    }

    public struct CreateListenerOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// Information about the listener.
        public let listeners: [Listener]?

        public init(listeners: [Listener]? = nil) {
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
        }
    }

    public struct SetIpAddressTypeOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum)
        ]
        /// The IP address type.
        public let ipAddressType: IpAddressType?

        public init(ipAddressType: IpAddressType? = nil) {
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddressType = "IpAddressType"
        }
    }

    public struct DescribeRulesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the rules.
        public let rules: [Rule]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(rules: [Rule]? = nil, nextMarker: String? = nil) {
            self.rules = rules
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case nextMarker = "NextMarker"
        }
    }

    public struct CreateRuleOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rule.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct AddTagsOutput: AWSShape {
        /// The key for the payload

    }

    public struct RulePriorityPair: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "RuleArn", required: false, type: .string)
        ]
        /// The rule priority.
        public let priority: Int32?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String?

        public init(priority: Int32? = nil, ruleArn: String? = nil) {
            self.priority = priority
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case ruleArn = "RuleArn"
        }
    }

    public struct ModifyRuleOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rule.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct DescribeSSLPoliciesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SslPolicies", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the policies.
        public let sslPolicies: [SslPolicy]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(sslPolicies: [SslPolicy]? = nil, nextMarker: String? = nil) {
            self.sslPolicies = sslPolicies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case sslPolicies = "SslPolicies"
            case nextMarker = "NextMarker"
        }
    }

    public struct SslPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SslProtocols", required: false, type: .list), 
            AWSShapeMember(label: "Ciphers", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The protocols.
        public let sslProtocols: [String]?
        /// The ciphers.
        public let ciphers: [Cipher]?
        /// The name of the policy.
        public let name: String?

        public init(sslProtocols: [String]? = nil, ciphers: [Cipher]? = nil, name: String? = nil) {
            self.sslProtocols = sslProtocols
            self.ciphers = ciphers
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case sslProtocols = "SslProtocols"
            case ciphers = "Ciphers"
            case name = "Name"
        }
    }

    public struct ModifyLoadBalancerAttributesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the load balancer attributes.
        public let attributes: [LoadBalancerAttribute]?

        public init(attributes: [LoadBalancerAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct LoadBalancer: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum), 
            AWSShapeMember(label: "CanonicalHostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "DNSName", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "Scheme", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// The Availability Zones for the load balancer.
        public let availabilityZones: [AvailabilityZone]?
        /// The IDs of the security groups for the load balancer.
        public let securityGroups: [String]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The ID of the VPC for the load balancer.
        public let vpcId: String?
        /// The state of the load balancer.
        public let state: LoadBalancerState?
        /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
        public let ipAddressType: IpAddressType?
        /// The ID of the Amazon Route 53 hosted zone associated with the load balancer.
        public let canonicalHostedZoneId: String?
        /// The public DNS name of the load balancer.
        public let dNSName: String?
        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the Internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.
        public let scheme: LoadBalancerSchemeEnum?
        /// The type of load balancer.
        public let `type`: LoadBalancerTypeEnum?
        /// The date and time the load balancer was created.
        public let createdTime: TimeStamp?

        public init(availabilityZones: [AvailabilityZone]? = nil, securityGroups: [String]? = nil, loadBalancerArn: String? = nil, vpcId: String? = nil, state: LoadBalancerState? = nil, ipAddressType: IpAddressType? = nil, canonicalHostedZoneId: String? = nil, dNSName: String? = nil, loadBalancerName: String? = nil, scheme: LoadBalancerSchemeEnum? = nil, type: LoadBalancerTypeEnum? = nil, createdTime: TimeStamp? = nil) {
            self.availabilityZones = availabilityZones
            self.securityGroups = securityGroups
            self.loadBalancerArn = loadBalancerArn
            self.vpcId = vpcId
            self.state = state
            self.ipAddressType = ipAddressType
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.dNSName = dNSName
            self.loadBalancerName = loadBalancerName
            self.scheme = scheme
            self.`type` = `type`
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case securityGroups = "SecurityGroups"
            case loadBalancerArn = "LoadBalancerArn"
            case vpcId = "VpcId"
            case state = "State"
            case ipAddressType = "IpAddressType"
            case canonicalHostedZoneId = "CanonicalHostedZoneId"
            case dNSName = "DNSName"
            case loadBalancerName = "LoadBalancerName"
            case scheme = "Scheme"
            case `type` = "Type"
            case createdTime = "CreatedTime"
        }
    }

    public struct SetSecurityGroupsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list)
        ]
        /// The IDs of the security groups associated with the load balancer.
        public let securityGroupIds: [String]?

        public init(securityGroupIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    public struct DescribeTargetGroupsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupArns", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupArns: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The names of the target groups.
        public let names: [String]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?

        public init(pageSize: Int32? = nil, targetGroupArns: [String]? = nil, marker: String? = nil, names: [String]? = nil, loadBalancerArn: String? = nil) {
            self.pageSize = pageSize
            self.targetGroupArns = targetGroupArns
            self.marker = marker
            self.names = names
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case targetGroupArns = "TargetGroupArns"
            case marker = "Marker"
            case names = "Names"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct DescribeTargetGroupsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the target groups.
        public let targetGroups: [TargetGroup]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(targetGroups: [TargetGroup]? = nil, nextMarker: String? = nil) {
            self.targetGroups = targetGroups
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
            case nextMarker = "NextMarker"
        }
    }

    public struct CreateRuleInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: true, type: .integer), 
            AWSShapeMember(label: "Actions", required: true, type: .list), 
            AWSShapeMember(label: "Conditions", required: true, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The priority for the rule. A listener can't have multiple rules with the same priority.
        public let priority: Int32
        /// An action. Each action has the type forward and specifies a target group.
        public let actions: [Action]
        /// A condition. Each condition specifies a field name and a single value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern. A path pattern is case sensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let conditions: [RuleCondition]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(priority: Int32, actions: [Action], conditions: [RuleCondition], listenerArn: String) {
            self.priority = priority
            self.actions = actions
            self.conditions = conditions
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case actions = "Actions"
            case conditions = "Conditions"
            case listenerArn = "ListenerArn"
        }
    }

    public struct SetSubnetsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", required: true, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The IDs of the subnets. You must specify at least two subnets. You can add only one subnet per Availability Zone.
        public let subnets: [String]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(subnets: [String], loadBalancerArn: String) {
            self.subnets = subnets
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "Subnets"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct DeleteRuleOutput: AWSShape {
        /// The key for the payload

    }

    public struct DescribeTargetHealthInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The targets.
        public let targets: [TargetDescription]?
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targets: [TargetDescription]? = nil, targetGroupArn: String) {
            self.targets = targets
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct TargetGroupAttribute: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.    deregistration_delay.timeout_seconds - The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.    stickiness.enabled - Indicates whether sticky sessions are enabled. The value is true or false.    stickiness.type - The type of sticky sessions. The possible value is lb_cookie.    stickiness.lb_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).  
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeleteRuleInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String

        public init(ruleArn: String) {
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "RuleArn"
        }
    }

    public struct DescribeTagsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list)
        ]
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
        }
    }

    public enum LoadBalancerTypeEnum: String, CustomStringConvertible, Codable {
        case application = "application"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTargetGroupAttributesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the target group attributes
        public let attributes: [TargetGroupAttribute]?

        public init(attributes: [TargetGroupAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct RemoveTagsOutput: AWSShape {
        /// The key for the payload

    }

    public struct ModifyRuleInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "Conditions", required: false, type: .list), 
            AWSShapeMember(label: "RuleArn", required: true, type: .string)
        ]
        /// The actions.
        public let actions: [Action]?
        /// The conditions.
        public let conditions: [RuleCondition]?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String

        public init(actions: [Action]? = nil, conditions: [RuleCondition]? = nil, ruleArn: String) {
            self.actions = actions
            self.conditions = conditions
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case conditions = "Conditions"
            case ruleArn = "RuleArn"
        }
    }

    public struct TargetDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The port on which the target is listening.
        public let port: Int32?
        /// The ID of the target.
        public let id: String

        public init(port: Int32? = nil, id: String) {
            self.port = port
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case id = "Id"
        }
    }

    public enum ActionTypeEnum: String, CustomStringConvertible, Codable {
        case forward = "forward"
        public var description: String { return self.rawValue }
    }

    public struct DescribeListenersOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the listeners.
        public let listeners: [Listener]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(listeners: [Listener]? = nil, nextMarker: String? = nil) {
            self.listeners = listeners
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
            case nextMarker = "NextMarker"
        }
    }

    public struct DescribeRulesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "RuleArns", required: false, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Names (ARN) of the rules.
        public let ruleArns: [String]?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String?

        public init(pageSize: Int32? = nil, marker: String? = nil, ruleArns: [String]? = nil, listenerArn: String? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.ruleArns = ruleArns
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case marker = "Marker"
            case ruleArns = "RuleArns"
            case listenerArn = "ListenerArn"
        }
    }

    public struct ModifyListenerOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// Information about the modified listeners.
        public let listeners: [Listener]?

        public init(listeners: [Listener]? = nil) {
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
        }
    }

    public struct SetSubnetsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list)
        ]
        /// Information about the subnet and Availability Zone.
        public let availabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
        }
    }

    public struct DescribeAccountLimitsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limits", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the limits.
        public let limits: [Limit]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(limits: [Limit]? = nil, nextMarker: String? = nil) {
            self.limits = limits
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "Limits"
            case nextMarker = "NextMarker"
        }
    }

    public struct DeleteTargetGroupOutput: AWSShape {
        /// The key for the payload

    }

    public struct ModifyTargetGroupOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// Information about the target group.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
        }
    }

    public struct RemoveTagsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArns: [String]
        /// The tag keys for the tags to remove.
        public let tagKeys: [String]

        public init(resourceArns: [String], tagKeys: [String]) {
            self.resourceArns = resourceArns
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
            case tagKeys = "TagKeys"
        }
    }

    public enum LoadBalancerSchemeEnum: String, CustomStringConvertible, Codable {
        case internet_facing = "internet-facing"
        case `internal` = "internal"
        public var description: String { return self.rawValue }
    }

    public struct TargetHealthDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetHealth", required: false, type: .structure), 
            AWSShapeMember(label: "Target", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string)
        ]
        /// The health information for the target.
        public let targetHealth: TargetHealth?
        /// The description of the target.
        public let target: TargetDescription?
        /// The port to use to connect with the target.
        public let healthCheckPort: String?

        public init(targetHealth: TargetHealth? = nil, target: TargetDescription? = nil, healthCheckPort: String? = nil) {
            self.targetHealth = targetHealth
            self.target = target
            self.healthCheckPort = healthCheckPort
        }

        private enum CodingKeys: String, CodingKey {
            case targetHealth = "TargetHealth"
            case target = "Target"
            case healthCheckPort = "HealthCheckPort"
        }
    }

    public struct DeleteLoadBalancerOutput: AWSShape {
        /// The key for the payload

    }

    public struct ModifyTargetGroupAttributesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The attributes.
        public let attributes: [TargetGroupAttribute]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(attributes: [TargetGroupAttribute], targetGroupArn: String) {
            self.attributes = attributes
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct RuleCondition: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Field", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The name of the field. The possible values are host-header and path-pattern.
        public let field: String?
        /// The condition value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern (for example, /img/*). A path pattern is case sensitive, can be up to 128 characters in length, and can contain any of the following characters. Note that you can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let values: [String]?

        public init(field: String? = nil, values: [String]? = nil) {
            self.field = field
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case field = "Field"
            case values = "Values"
        }
    }

    public struct Listener: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "DefaultActions", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The SSL server certificate. You must provide a certificate if the protocol is HTTPS.
        public let certificates: [Certificate]?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String?
        /// The protocol for connections from clients to the load balancer.
        public let `protocol`: ProtocolEnum?
        /// The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        public let sslPolicy: String?
        /// The default actions for the listener.
        public let defaultActions: [Action]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The port on which the load balancer is listening.
        public let port: Int32?

        public init(certificates: [Certificate]? = nil, listenerArn: String? = nil, protocol: ProtocolEnum? = nil, sslPolicy: String? = nil, defaultActions: [Action]? = nil, loadBalancerArn: String? = nil, port: Int32? = nil) {
            self.certificates = certificates
            self.listenerArn = listenerArn
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
            self.defaultActions = defaultActions
            self.loadBalancerArn = loadBalancerArn
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case listenerArn = "ListenerArn"
            case `protocol` = "Protocol"
            case sslPolicy = "SslPolicy"
            case defaultActions = "DefaultActions"
            case loadBalancerArn = "LoadBalancerArn"
            case port = "Port"
        }
    }

    public struct ModifyTargetGroupInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer)
        ]
        /// The protocol to use to connect with the target.
        public let healthCheckProtocol: ProtocolEnum?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public let healthyThresholdCount: Int32?
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String
        /// The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public let healthCheckIntervalSeconds: Int32?
        /// The amount of time, in seconds, during which no response means a failed health check.
        public let healthCheckTimeoutSeconds: Int32?
        /// The port to use to connect with the target.
        public let healthCheckPort: String?
        /// The ping path that is the destination for the health check request.
        public let healthCheckPath: String?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public let unhealthyThresholdCount: Int32?

        public init(healthCheckProtocol: ProtocolEnum? = nil, healthyThresholdCount: Int32? = nil, targetGroupArn: String, matcher: Matcher? = nil, healthCheckIntervalSeconds: Int32? = nil, healthCheckTimeoutSeconds: Int32? = nil, healthCheckPort: String? = nil, healthCheckPath: String? = nil, unhealthyThresholdCount: Int32? = nil) {
            self.healthCheckProtocol = healthCheckProtocol
            self.healthyThresholdCount = healthyThresholdCount
            self.targetGroupArn = targetGroupArn
            self.matcher = matcher
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.healthCheckPort = healthCheckPort
            self.healthCheckPath = healthCheckPath
            self.unhealthyThresholdCount = unhealthyThresholdCount
        }

        private enum CodingKeys: String, CodingKey {
            case healthCheckProtocol = "HealthCheckProtocol"
            case healthyThresholdCount = "HealthyThresholdCount"
            case targetGroupArn = "TargetGroupArn"
            case matcher = "Matcher"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case healthCheckPort = "HealthCheckPort"
            case healthCheckPath = "HealthCheckPath"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
        }
    }

    public struct CreateLoadBalancerInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", required: true, type: .list), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Scheme", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum)
        ]
        /// The IDs of the subnets to attach to the load balancer. You can specify only one subnet per Availability Zone. You must specify subnets from at least two Availability Zones.
        public let subnets: [String]
        /// The IDs of the security groups to assign to the load balancer.
        public let securityGroups: [String]?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the Internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer.
        public let scheme: LoadBalancerSchemeEnum?
        /// One or more tags to assign to the load balancer.
        public let tags: [Tag]?
        /// The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
        public let name: String
        /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
        public let ipAddressType: IpAddressType?

        public init(subnets: [String], securityGroups: [String]? = nil, scheme: LoadBalancerSchemeEnum? = nil, tags: [Tag]? = nil, name: String, ipAddressType: IpAddressType? = nil) {
            self.subnets = subnets
            self.securityGroups = securityGroups
            self.scheme = scheme
            self.tags = tags
            self.name = name
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "Subnets"
            case securityGroups = "SecurityGroups"
            case scheme = "Scheme"
            case tags = "Tags"
            case name = "Name"
            case ipAddressType = "IpAddressType"
        }
    }

    public struct DeregisterTargetsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
        public let targets: [TargetDescription]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targets: [TargetDescription], targetGroupArn: String) {
            self.targets = targets
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct SetSecurityGroupsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroups", required: true, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The IDs of the security groups.
        public let securityGroups: [String]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(securityGroups: [String], loadBalancerArn: String) {
            self.securityGroups = securityGroups
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroups = "SecurityGroups"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct LoadBalancerAttribute: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.    access_logs.s3.enabled - Indicates whether access logs stored in Amazon S3 are enabled. The value is true or false.    access_logs.s3.bucket - The name of the S3 bucket for the access logs. This attribute is required if access logs in Amazon S3 are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permission to write to the bucket.    access_logs.s3.prefix - The prefix for the location in the S3 bucket. If you don't specify a prefix, the access logs are stored in the root of the bucket.    deletion_protection.enabled - Indicates whether deletion protection is enabled. The value is true or false.    idle_timeout.timeout_seconds - The idle timeout value, in seconds. The valid range is 1-3600. The default is 60 seconds.  
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeLoadBalancerAttributesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct DescribeTagsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagDescriptions", required: false, type: .list)
        ]
        /// Information about the tags.
        public let tagDescriptions: [TagDescription]?

        public init(tagDescriptions: [TagDescription]? = nil) {
            self.tagDescriptions = tagDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case tagDescriptions = "TagDescriptions"
        }
    }

    public struct DescribeListenersInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ListenerArns", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Names (ARN) of the listeners.
        public let listenerArns: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?

        public init(pageSize: Int32? = nil, listenerArns: [String]? = nil, marker: String? = nil, loadBalancerArn: String? = nil) {
            self.pageSize = pageSize
            self.listenerArns = listenerArns
            self.marker = marker
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case listenerArns = "ListenerArns"
            case marker = "Marker"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct DeleteListenerOutput: AWSShape {
        /// The key for the payload

    }

    public struct CreateTargetGroupOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// Information about the target group.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
        }
    }

    public struct Certificate: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the certificate.
        public let certificateArn: String?

        public init(certificateArn: String? = nil) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public struct AvailabilityZone: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZoneName", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string)
        ]
        /// The name of the Availability Zone.
        public let zoneName: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(zoneName: String? = nil, subnetId: String? = nil) {
            self.zoneName = zoneName
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case zoneName = "ZoneName"
            case subnetId = "SubnetId"
        }
    }

    public struct RegisterTargetsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The targets. The default port for a target is the port for the target group. You can specify a port override. If a target is already registered, you can register it again using a different port.
        public let targets: [TargetDescription]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targets: [TargetDescription], targetGroupArn: String) {
            self.targets = targets
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct DeleteTargetGroupInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targetGroupArn: String) {
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct TargetHealth: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .enum), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The reason code. If the target state is healthy, a reason code is not provided. If the target state is initial, the reason code can be one of the following values:    Elb.RegistrationInProgress - The target is in the process of being registered with the load balancer.    Elb.InitialHealthChecking - The load balancer is still sending the target the minimum number of health checks required to determine its health status.   If the target state is unhealthy, the reason code can be one of the following values:    Target.ResponseCodeMismatch - The health checks did not return an expected HTTP code.    Target.Timeout - The health check requests timed out.    Target.FailedHealthChecks - The health checks failed because the connection to the target timed out, the target response was malformed, or the target failed the health check for an unknown reason.    Elb.InternalError - The health checks failed due to an internal error.   If the target state is unused, the reason code can be one of the following values:    Target.NotRegistered - The target is not registered with the target group.    Target.NotInUse - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.    Target.InvalidState - The target is in the stopped or terminated state.   If the target state is draining, the reason code can be the following value:    Target.DeregistrationInProgress - The target is in the process of being deregistered and the deregistration delay period has not expired.  
        public let reason: TargetHealthReasonEnum?
        /// The state of the target.
        public let state: TargetHealthStateEnum?
        /// A description of the target health that provides additional details. If the state is healthy, a description is not provided.
        public let description: String?

        public init(reason: TargetHealthReasonEnum? = nil, state: TargetHealthStateEnum? = nil, description: String? = nil) {
            self.reason = reason
            self.state = state
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case state = "State"
            case description = "Description"
        }
    }

    public enum IpAddressType: String, CustomStringConvertible, Codable {
        case ipv4 = "ipv4"
        case dualstack = "dualstack"
        public var description: String { return self.rawValue }
    }

    public struct ModifyListenerInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "DefaultActions", required: false, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The protocol for connections from clients to the load balancer.
        public let `protocol`: ProtocolEnum?
        /// The security policy that defines which protocols and ciphers are supported. For more information, see Security Policies in the Application Load Balancers Guide.
        public let sslPolicy: String?
        /// The SSL server certificate.
        public let certificates: [Certificate]?
        /// The default actions.
        public let defaultActions: [Action]?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String
        /// The port for connections from clients to the load balancer.
        public let port: Int32?

        public init(protocol: ProtocolEnum? = nil, sslPolicy: String? = nil, certificates: [Certificate]? = nil, defaultActions: [Action]? = nil, listenerArn: String, port: Int32? = nil) {
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
            self.certificates = certificates
            self.defaultActions = defaultActions
            self.listenerArn = listenerArn
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case sslPolicy = "SslPolicy"
            case certificates = "Certificates"
            case defaultActions = "DefaultActions"
            case listenerArn = "ListenerArn"
            case port = "Port"
        }
    }

    public struct Cipher: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The priority of the cipher.
        public let priority: Int32?
        /// The name of the cipher.
        public let name: String?

        public init(priority: Int32? = nil, name: String? = nil) {
            self.priority = priority
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case name = "Name"
        }
    }

    public struct SetRulePrioritiesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RulePriorities", required: true, type: .list)
        ]
        /// The rule priorities.
        public let rulePriorities: [RulePriorityPair]

        public init(rulePriorities: [RulePriorityPair]) {
            self.rulePriorities = rulePriorities
        }

        private enum CodingKeys: String, CodingKey {
            case rulePriorities = "RulePriorities"
        }
    }

    public struct Matcher: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpCode", required: true, type: .string)
        ]
        /// The HTTP codes. You can specify values between 200 and 499. The default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").
        public let httpCode: String

        public init(httpCode: String) {
            self.httpCode = httpCode
        }

        private enum CodingKeys: String, CodingKey {
            case httpCode = "HttpCode"
        }
    }

    public struct DescribeSSLPoliciesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Names", required: false, type: .list)
        ]
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The names of the policies.
        public let names: [String]?

        public init(marker: String? = nil, pageSize: Int32? = nil, names: [String]? = nil) {
            self.marker = marker
            self.pageSize = pageSize
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case pageSize = "PageSize"
            case names = "Names"
        }
    }

    public struct Limit: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Max", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The maximum value of the limit.
        public let max: String?
        /// The name of the limit. The possible values are:   application-load-balancers   listeners-per-application-load-balancer   rules-per-application-load-balancer   target-groups   targets-per-application-load-balancer  
        public let name: String?

        public init(max: String? = nil, name: String? = nil) {
            self.max = max
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case name = "Name"
        }
    }

    public struct DescribeLoadBalancerAttributesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the load balancer attributes.
        public let attributes: [LoadBalancerAttribute]?

        public init(attributes: [LoadBalancerAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public enum ProtocolEnum: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case https = "HTTPS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeLoadBalancersInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "LoadBalancerArns", required: false, type: .list), 
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
        public let loadBalancerArns: [String]?
        /// The names of the load balancers.
        public let names: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(pageSize: Int32? = nil, loadBalancerArns: [String]? = nil, names: [String]? = nil, marker: String? = nil) {
            self.pageSize = pageSize
            self.loadBalancerArns = loadBalancerArns
            self.names = names
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case loadBalancerArns = "LoadBalancerArns"
            case names = "Names"
            case marker = "Marker"
        }
    }

    public struct SetRulePrioritiesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rules.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct DeregisterTargetsOutput: AWSShape {
        /// The key for the payload

    }

    public struct AddTagsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArns: [String]
        /// The tags. Each resource can have a maximum of 10 tags.
        public let tags: [Tag]

        public init(resourceArns: [String], tags: [Tag]) {
            self.resourceArns = resourceArns
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
            case tags = "Tags"
        }
    }

    public struct DescribeTargetHealthOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetHealthDescriptions", required: false, type: .list)
        ]
        /// Information about the health of the targets.
        public let targetHealthDescriptions: [TargetHealthDescription]?

        public init(targetHealthDescriptions: [TargetHealthDescription]? = nil) {
            self.targetHealthDescriptions = targetHealthDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case targetHealthDescriptions = "TargetHealthDescriptions"
        }
    }

    public struct SetIpAddressTypeInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "IpAddressType", required: true, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IP address type. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
        public let ipAddressType: IpAddressType

        public init(loadBalancerArn: String, ipAddressType: IpAddressType) {
            self.loadBalancerArn = loadBalancerArn
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case ipAddressType = "IpAddressType"
        }
    }

    public struct CreateTargetGroupInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Port", required: true, type: .integer)
        ]
        /// The number of consecutive health check failures required before considering a target unhealthy. The default is 2.
        public let unhealthyThresholdCount: Int32?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy. The default is 5.
        public let healthyThresholdCount: Int32?
        /// The identifier of the virtual private cloud (VPC).
        public let vpcId: String
        /// The protocol the load balancer uses when performing health checks on targets. The default is the HTTP protocol.
        public let healthCheckProtocol: ProtocolEnum?
        /// The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
        public let name: String
        /// The protocol to use for routing traffic to the targets.
        public let `protocol`: ProtocolEnum
        /// The HTTP codes to use when checking for a successful response from a target. The default is 200.
        public let matcher: Matcher?
        /// The approximate amount of time, in seconds, between health checks of an individual target. The default is 30 seconds.
        public let healthCheckIntervalSeconds: Int32?
        /// The ping path that is the destination on the targets for health checks. The default is /.
        public let healthCheckPath: String?
        /// The port the load balancer uses when performing health checks on targets. The default is traffic-port, which indicates the port on which each target receives traffic from the load balancer.
        public let healthCheckPort: String?
        /// The amount of time, in seconds, during which no response from a target means a failed health check. The default is 5 seconds.
        public let healthCheckTimeoutSeconds: Int32?
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target.
        public let port: Int32

        public init(unhealthyThresholdCount: Int32? = nil, healthyThresholdCount: Int32? = nil, vpcId: String, healthCheckProtocol: ProtocolEnum? = nil, name: String, protocol: ProtocolEnum, matcher: Matcher? = nil, healthCheckIntervalSeconds: Int32? = nil, healthCheckPath: String? = nil, healthCheckPort: String? = nil, healthCheckTimeoutSeconds: Int32? = nil, port: Int32) {
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.healthyThresholdCount = healthyThresholdCount
            self.vpcId = vpcId
            self.healthCheckProtocol = healthCheckProtocol
            self.name = name
            self.`protocol` = `protocol`
            self.matcher = matcher
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckPath = healthCheckPath
            self.healthCheckPort = healthCheckPort
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case healthyThresholdCount = "HealthyThresholdCount"
            case vpcId = "VpcId"
            case healthCheckProtocol = "HealthCheckProtocol"
            case name = "Name"
            case `protocol` = "Protocol"
            case matcher = "Matcher"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthCheckPath = "HealthCheckPath"
            case healthCheckPort = "HealthCheckPort"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case port = "Port"
        }
    }

    public enum LoadBalancerStateEnum: String, CustomStringConvertible, Codable {
        case active = "active"
        case provisioning = "provisioning"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct DeleteLoadBalancerInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct CreateLoadBalancerOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        /// Information about the load balancer.
        public let loadBalancers: [LoadBalancer]?

        public init(loadBalancers: [LoadBalancer]? = nil) {
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "LoadBalancers"
        }
    }

}