// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTJobsDataPlane {

    public struct StartNextPendingJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "stepTimeoutInMinutes", required: false, type: .long), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map)
        ]
        /// The name of the thing associated with the device.
        public let thingName: String
        /// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by calling UpdateJobExecution, setting the status to IN_PROGRESS and specifying a new timeout value in field stepTimeoutInMinutes) the job execution status will be automatically set to TIMED_OUT. Note that setting this timeout has no effect on that job execution timeout which may have been specified when the job was created (CreateJob using field timeoutConfig).
        public let stepTimeoutInMinutes: Int64?
        /// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
        public let statusDetails: [String: String]?

        public init(thingName: String, stepTimeoutInMinutes: Int64? = nil, statusDetails: [String: String]? = nil) {
            self.thingName = thingName
            self.stepTimeoutInMinutes = stepTimeoutInMinutes
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case stepTimeoutInMinutes = "stepTimeoutInMinutes"
            case statusDetails = "statusDetails"
        }
    }

    public struct JobExecutionState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map)
        ]
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public let status: JobExecutionStatus?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: [String: String]?

        public init(status: JobExecutionStatus? = nil, versionNumber: Int64? = nil, statusDetails: [String: String]? = nil) {
            self.status = status
            self.versionNumber = versionNumber
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case versionNumber = "versionNumber"
            case statusDetails = "statusDetails"
        }
    }

    public struct StartNextPendingJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// A JobExecution object.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct UpdateJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stepTimeoutInMinutes", required: false, type: .long), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "includeJobExecutionState", required: false, type: .boolean), 
            AWSShapeMember(label: "includeJobDocument", required: false, type: .boolean), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]
        /// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling UpdateJobExecution, setting the status to IN_PROGRESS and specifying a new timeout value in this field) the job execution status will be automatically set to TIMED_OUT. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (CreateJob using field timeoutConfig).
        public let stepTimeoutInMinutes: Int64?
        /// Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
        public let expectedVersion: Int64?
        /// The name of the thing associated with the device.
        public let thingName: String
        /// Optional. A number that identifies a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
        public let includeJobExecutionState: Bool?
        /// Optional. When set to true, the response contains the job document. The default is false.
        public let includeJobDocument: Bool?
        /// The unique identifier assigned to this job when it was created.
        public let jobId: String
        ///  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
        public let statusDetails: [String: String]?
        /// The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
        public let status: JobExecutionStatus

        public init(stepTimeoutInMinutes: Int64? = nil, expectedVersion: Int64? = nil, thingName: String, executionNumber: Int64? = nil, includeJobExecutionState: Bool? = nil, includeJobDocument: Bool? = nil, jobId: String, statusDetails: [String: String]? = nil, status: JobExecutionStatus) {
            self.stepTimeoutInMinutes = stepTimeoutInMinutes
            self.expectedVersion = expectedVersion
            self.thingName = thingName
            self.executionNumber = executionNumber
            self.includeJobExecutionState = includeJobExecutionState
            self.includeJobDocument = includeJobDocument
            self.jobId = jobId
            self.statusDetails = statusDetails
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case stepTimeoutInMinutes = "stepTimeoutInMinutes"
            case expectedVersion = "expectedVersion"
            case thingName = "thingName"
            case executionNumber = "executionNumber"
            case includeJobExecutionState = "includeJobExecutionState"
            case includeJobDocument = "includeJobDocument"
            case jobId = "jobId"
            case statusDetails = "statusDetails"
            case status = "status"
        }
    }

    public struct JobExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "approximateSecondsBeforeTimedOut", required: false, type: .long), 
            AWSShapeMember(label: "startedAt", required: false, type: .long), 
            AWSShapeMember(label: "queuedAt", required: false, type: .long), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .long), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "jobDocument", required: false, type: .string)
        ]
        /// The name of the thing that is executing the job.
        public let thingName: String?
        /// A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.
        public let executionNumber: Int64?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// The estimated number of seconds that remain before the job execution status will be changed to TIMED_OUT.
        public let approximateSecondsBeforeTimedOut: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was started.
        public let startedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public let queuedAt: Int64?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: [String: String]?
        /// The time, in milliseconds since the epoch, when the job execution was last updated. 
        public let lastUpdatedAt: Int64?
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public let status: JobExecutionStatus?
        /// The content of the job document.
        public let jobDocument: String?

        public init(thingName: String? = nil, executionNumber: Int64? = nil, versionNumber: Int64? = nil, jobId: String? = nil, approximateSecondsBeforeTimedOut: Int64? = nil, startedAt: Int64? = nil, queuedAt: Int64? = nil, statusDetails: [String: String]? = nil, lastUpdatedAt: Int64? = nil, status: JobExecutionStatus? = nil, jobDocument: String? = nil) {
            self.thingName = thingName
            self.executionNumber = executionNumber
            self.versionNumber = versionNumber
            self.jobId = jobId
            self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
            self.startedAt = startedAt
            self.queuedAt = queuedAt
            self.statusDetails = statusDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.jobDocument = jobDocument
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case executionNumber = "executionNumber"
            case versionNumber = "versionNumber"
            case jobId = "jobId"
            case approximateSecondsBeforeTimedOut = "approximateSecondsBeforeTimedOut"
            case startedAt = "startedAt"
            case queuedAt = "queuedAt"
            case statusDetails = "statusDetails"
            case lastUpdatedAt = "lastUpdatedAt"
            case status = "status"
            case jobDocument = "jobDocument"
        }
    }

    public struct DescribeJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// Contains data about a job execution.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct UpdateJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobDocument", required: false, type: .string), 
            AWSShapeMember(label: "executionState", required: false, type: .structure)
        ]
        /// The contents of the Job Documents.
        public let jobDocument: String?
        /// A JobExecutionState object.
        public let executionState: JobExecutionState?

        public init(jobDocument: String? = nil, executionState: JobExecutionState? = nil) {
            self.jobDocument = jobDocument
            self.executionState = executionState
        }

        private enum CodingKeys: String, CodingKey {
            case jobDocument = "jobDocument"
            case executionState = "executionState"
        }
    }

    public struct GetPendingJobExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing that is executing the job.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct DescribeJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionNumber", location: .querystring(locationName: "executionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "includeJobDocument", location: .querystring(locationName: "includeJobDocument"), required: false, type: .boolean), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.
        public let executionNumber: Int64?
        /// The unique identifier assigned to this job when it was created.
        public let jobId: String
        /// Optional. When set to true, the response contains the job document. The default is false.
        public let includeJobDocument: Bool?
        /// The thing name associated with the device the job execution is running on.
        public let thingName: String

        public init(executionNumber: Int64? = nil, jobId: String, includeJobDocument: Bool? = nil, thingName: String) {
            self.executionNumber = executionNumber
            self.jobId = jobId
            self.includeJobDocument = includeJobDocument
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case executionNumber = "executionNumber"
            case jobId = "jobId"
            case includeJobDocument = "includeJobDocument"
            case thingName = "thingName"
        }
    }

    public struct JobExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .long), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "startedAt", required: false, type: .long), 
            AWSShapeMember(label: "queuedAt", required: false, type: .long)
        ]
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: Int64?
        /// A number that identifies a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.
        public let versionNumber: Int64?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public let queuedAt: Int64?

        public init(lastUpdatedAt: Int64? = nil, executionNumber: Int64? = nil, versionNumber: Int64? = nil, jobId: String? = nil, startedAt: Int64? = nil, queuedAt: Int64? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.executionNumber = executionNumber
            self.versionNumber = versionNumber
            self.jobId = jobId
            self.startedAt = startedAt
            self.queuedAt = queuedAt
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case executionNumber = "executionNumber"
            case versionNumber = "versionNumber"
            case jobId = "jobId"
            case startedAt = "startedAt"
            case queuedAt = "queuedAt"
        }
    }

    public struct GetPendingJobExecutionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queuedJobs", required: false, type: .list), 
            AWSShapeMember(label: "inProgressJobs", required: false, type: .list)
        ]
        /// A list of JobExecutionSummary objects with status QUEUED.
        public let queuedJobs: [JobExecutionSummary]?
        /// A list of JobExecutionSummary objects with status IN_PROGRESS.
        public let inProgressJobs: [JobExecutionSummary]?

        public init(queuedJobs: [JobExecutionSummary]? = nil, inProgressJobs: [JobExecutionSummary]? = nil) {
            self.queuedJobs = queuedJobs
            self.inProgressJobs = inProgressJobs
        }

        private enum CodingKeys: String, CodingKey {
            case queuedJobs = "queuedJobs"
            case inProgressJobs = "inProgressJobs"
        }
    }

    public enum JobExecutionStatus: String, CustomStringConvertible, Codable {
        case queued = "QUEUED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case timedOut = "TIMED_OUT"
        case rejected = "REJECTED"
        case removed = "REMOVED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

}