// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Discovery {

    public struct DisassociateConfigurationItemsFromApplicationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Configuration ID of an application from which each item will be disassociated.
        public var applicationConfigurationId: String = ""
        /// Configuration ID of each item be be disassociated from an application.
        public var configurationIds: [String] = []

        public init() {}

        public init(applicationConfigurationId: String, configurationIds: [String]) {
            self.applicationConfigurationId = applicationConfigurationId
            self.configurationIds = configurationIds
        }

    }

    public struct DescribeTagsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Depending on the input, this is a list of configuration items tagged with a specific tag, or a list of tags for a specific configuration item.
        public var tags: [ConfigurationTag]? = nil
        /// The call returns a token. Use this token to get the next set of results.
        public var nextToken: String? = nil

        public init() {}

        public init(tags: [ConfigurationTag]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

    }

    public struct CreateTagsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Tags that you want to associate with one or more configuration items. Specify the tags that you want to create in a key-value format. For example:  {"key": "serverType", "value": "webServer"} 
        public var tags: [Tag] = []
        /// A list of configuration items that you want to tag.
        public var configurationIds: [String] = []

        public init() {}

        public init(tags: [Tag], configurationIds: [String]) {
            self.tags = tags
            self.configurationIds = configurationIds
        }

    }

    public struct DeleteTagsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct UpdateApplicationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ListConfigurationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A valid configuration identified by the Discovery Service. 
        public var configurationType: String = ""
        /// The total number of items to return. The maximum value is 100.
        public var maxResults: Int32? = nil
        /// Token to retrieve the next set of results. For example, if a previous call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public var nextToken: String? = nil
        /// You can filter the request using various logical operators and a key-value format. For example:   {"key": "serverType", "value": "webServer"}  For a complete list of filter options and guidance about using them with this action, see Querying Discovered Configuration Items. 
        public var filters: [Filter]? = nil
        /// Certain filter criteria return output that can be sorted in ascending or descending order. For a list of output characteristics for each filter, see Querying Discovered Configuration Items.
        public var orderBy: [OrderByElement]? = nil

        public init() {}

        public init(configurationType: String, maxResults: Int32? = nil, nextToken: String? = nil, filters: [Filter]? = nil, orderBy: [OrderByElement]? = nil) {
            self.configurationType = configurationType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filters = filters
            self.orderBy = orderBy
        }

    }

    public struct OrderByElement: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Field to order on.
        public var fieldName: String = ""
        /// Ordering direction.
        public var sortOrder: String? = nil

        public init() {}

        public init(fieldName: String, sortOrder: String? = nil) {
            self.fieldName = fieldName
            self.sortOrder = sortOrder
        }

    }

    public struct AgentInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The health of the agent or connector.
        public var health: String? = nil
        /// Network details about the host where the agent or connector resides.
        public var agentNetworkInfoList: [AgentNetworkInfo]? = nil
        /// Time since agent or connector health was reported.
        public var lastHealthPingTime: String? = nil
        /// Type of agent.
        public var agentType: String? = nil
        /// Status of the collection process for an agent or connector.
        public var collectionStatus: String? = nil
        /// The agent or connector version.
        public var version: String? = nil
        /// The ID of the connector.
        public var connectorId: String? = nil
        /// The agent or connector ID.
        public var agentId: String? = nil
        /// Agent's first registration time stamp in UTC.
        public var registeredTime: String? = nil
        /// The name of the host where the agent or connector resides. The host can be a server or virtual machine.
        public var hostName: String? = nil

        public init() {}

        public init(health: String? = nil, agentNetworkInfoList: [AgentNetworkInfo]? = nil, lastHealthPingTime: String? = nil, agentType: String? = nil, collectionStatus: String? = nil, version: String? = nil, connectorId: String? = nil, agentId: String? = nil, registeredTime: String? = nil, hostName: String? = nil) {
            self.health = health
            self.agentNetworkInfoList = agentNetworkInfoList
            self.lastHealthPingTime = lastHealthPingTime
            self.agentType = agentType
            self.collectionStatus = collectionStatus
            self.version = version
            self.connectorId = connectorId
            self.agentId = agentId
            self.registeredTime = registeredTime
            self.hostName = hostName
        }

    }

    public struct GetDiscoverySummaryResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Number of servers mapped to tags.
        public var serversMappedtoTags: Int64? = nil
        /// Number of applications discovered.
        public var applications: Int64? = nil
        /// Details about discovered connectors, including connector status and health.
        public var connectorSummary: CustomerConnectorInfo? = nil
        /// Details about discovered agents, including agent status and health.
        public var agentSummary: CustomerAgentInfo? = nil
        /// Number of servers discovered.
        public var servers: Int64? = nil
        /// Number of servers mapped to applications.
        public var serversMappedToApplications: Int64? = nil

        public init() {}

        public init(serversMappedtoTags: Int64? = nil, applications: Int64? = nil, connectorSummary: CustomerConnectorInfo? = nil, agentSummary: CustomerAgentInfo? = nil, servers: Int64? = nil, serversMappedToApplications: Int64? = nil) {
            self.serversMappedtoTags = serversMappedtoTags
            self.applications = applications
            self.connectorSummary = connectorSummary
            self.agentSummary = agentSummary
            self.servers = servers
            self.serversMappedToApplications = serversMappedToApplications
        }

    }

    public struct DescribeExportConfigurationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique identifier that you can use to query the export status.
        public var exportIds: [String]? = nil
        /// A token to get the next set of results. For example, if you specified 100 IDs for DescribeExportConfigurationsRequest$exportIds but set DescribeExportConfigurationsRequest$maxResults to 10, you will get results in a set of 10. Use the token in the query to get the next set of 10.
        public var nextToken: String? = nil
        /// The maximum number of results that you want to display as a part of the query.
        public var maxResults: Int32? = nil

        public init() {}

        public init(exportIds: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.exportIds = exportIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ConfigurationTag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the configuration tag was created in Coordinated Universal Time (UTC).
        public var timeOfCreation: Date? = nil
        /// A type of IT asset that you want to tag.
        public var configurationType: String? = nil
        /// A value to filter on. For example key = serverType and value = web server.
        public var value: String? = nil
        /// A type of tag to filter on. For example, serverType.
        public var key: String? = nil
        /// The configuration ID for the item you want to tag. You can specify a list of keys and values.
        public var configurationId: String? = nil

        public init() {}

        public init(timeOfCreation: Date? = nil, configurationType: String? = nil, value: String? = nil, key: String? = nil, configurationId: String? = nil) {
            self.timeOfCreation = timeOfCreation
            self.configurationType = configurationType
            self.value = value
            self.key = key
            self.configurationId = configurationId
        }

    }

    public struct ListConfigurationsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Returns configuration details, including the configuration ID, attribute names, and attribute values.
        public var configurations: [[String: String]]? = nil
        /// Token to retrieve the next set of results. For example, if your call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public var nextToken: String? = nil

        public init() {}

        public init(configurations: [[String: String]]? = nil, nextToken: String? = nil) {
            self.configurations = configurations
            self.nextToken = nextToken
        }

    }

    public struct AgentConfigurationStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A description of the operation performed.
        public var description: String? = nil
        /// The agent/Connector ID.
        public var agentId: String? = nil
        /// Information about the status of the StartDataCollection and StopDataCollection operations. The system has recorded the data collection operation. The agent/Connector receives this command the next time it polls for a new command. 
        public var operationSucceeded: Bool? = nil

        public init() {}

        public init(description: String? = nil, agentId: String? = nil, operationSucceeded: Bool? = nil) {
            self.description = description
            self.agentId = agentId
            self.operationSucceeded = operationSucceeded
        }

    }

    public struct DeleteApplicationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Configuration ID of an application to be deleted.
        public var configurationIds: [String] = []

        public init() {}

        public init(configurationIds: [String]) {
            self.configurationIds = configurationIds
        }

    }

    public struct CustomerConnectorInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Number of unhealthy discovery connectors.
        public var unhealthyConnectors: Int32 = 0
        /// Number of healthy discovery connectors.
        public var healthyConnectors: Int32 = 0
        /// Number of active discovery connectors.
        public var activeConnectors: Int32 = 0
        /// Total number of discovery connectors.
        public var totalConnectors: Int32 = 0
        /// Number of discovery connectors with status SHUTDOWN,
        public var shutdownConnectors: Int32 = 0
        /// Number of unknown discovery connectors.
        public var unknownConnectors: Int32 = 0
        /// Number of blacklisted discovery connectors.
        public var blackListedConnectors: Int32 = 0

        public init() {}

        public init(unhealthyConnectors: Int32, healthyConnectors: Int32, activeConnectors: Int32, totalConnectors: Int32, shutdownConnectors: Int32, unknownConnectors: Int32, blackListedConnectors: Int32) {
            self.unhealthyConnectors = unhealthyConnectors
            self.healthyConnectors = healthyConnectors
            self.activeConnectors = activeConnectors
            self.totalConnectors = totalConnectors
            self.shutdownConnectors = shutdownConnectors
            self.unknownConnectors = unknownConnectors
            self.blackListedConnectors = blackListedConnectors
        }

    }

    public struct NeighborConnectionDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// ID of the server that accepted the networker connection.
        public var destinationServerId: String = ""
        /// Network protocol used for the connection.
        public var transportProtocol: String? = nil
        /// Number of open network connections with the neighboring server.
        public var connectionsCount: Int64 = 0
        /// Destination network port for the connection.
        public var destinationPort: Int32? = nil
        /// ID of server that opened the network connection.
        public var sourceServerId: String = ""

        public init() {}

        public init(destinationServerId: String, transportProtocol: String? = nil, connectionsCount: Int64, destinationPort: Int32? = nil, sourceServerId: String) {
            self.destinationServerId = destinationServerId
            self.transportProtocol = transportProtocol
            self.connectionsCount = connectionsCount
            self.destinationPort = destinationPort
            self.sourceServerId = sourceServerId
        }

    }

    public struct StopDataCollectionByAgentIdsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The IDs of the agents or Connectors that you want to stop collecting data.
        public var agentIds: [String] = []

        public init() {}

        public init(agentIds: [String]) {
            self.agentIds = agentIds
        }

    }

    public struct DescribeTagsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// You can filter the list using a key-value format. You can separate these items by using logical operators. Allowed filters include tagKey, tagValue, and configurationId.  For a complete list of filter options and guidance about using them with this action, see Managing AWS Application Discovery Service Agents and the AWS Application Discovery Connector .
        public var filters: [TagFilter]? = nil
        /// The total number of items to return in a single page of output. The maximum value is 100.
        public var maxResults: Int32? = nil
        /// A token to start the list. Use this token to get the next set of results.
        public var nextToken: String? = nil

        public init() {}

        public init(filters: [TagFilter]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

    }

    public struct DeleteTagsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Tags that you want to delete from one or more configuration items. Specify the tags that you want to delete in a key-value format. For example:  {"key": "serverType", "value": "webServer"} 
        public var tags: [Tag]? = nil
        /// A list of configuration items with tags that you want to delete.
        public var configurationIds: [String] = []

        public init() {}

        public init(tags: [Tag]? = nil, configurationIds: [String]) {
            self.tags = tags
            self.configurationIds = configurationIds
        }

    }

    public struct DescribeConfigurationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// One or more configuration IDs.
        public var configurationIds: [String] = []

        public init() {}

        public init(configurationIds: [String]) {
            self.configurationIds = configurationIds
        }

    }

    public struct ListServerNeighborsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// List of distinct servers that are one hop away from the given server.
        public var neighbors: [NeighborConnectionDetail] = []
        /// Token to retrieve the next set of results. For example, if you specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public var nextToken: String? = nil
        /// Count of distinct servers that are one hop away from the given server.
        public var knownDependencyCount: Int64? = nil

        public init() {}

        public init(neighbors: [NeighborConnectionDetail], nextToken: String? = nil, knownDependencyCount: Int64? = nil) {
            self.neighbors = neighbors
            self.nextToken = nextToken
            self.knownDependencyCount = knownDependencyCount
        }

    }

    public struct AssociateConfigurationItemsToApplicationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeExportConfigurationsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token to get the next set of results. For example, if you specified 100 IDs for DescribeExportConfigurationsRequest$exportIds but set DescribeExportConfigurationsRequest$maxResults to 10, you will get results in a set of 10. Use the token in the query to get the next set of 10.
        public var nextToken: String? = nil
        /// Returns export details. When the status is complete, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
        public var exportsInfo: [ExportInfo]? = nil

        public init() {}

        public init(nextToken: String? = nil, exportsInfo: [ExportInfo]? = nil) {
            self.nextToken = nextToken
            self.exportsInfo = exportsInfo
        }

    }

    public struct StopDataCollectionByAgentIdsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about agents or the Connector that were instructed to stop collecting data. Information includes the agent/Connector ID, a description of the operation performed, and whether or not the agent/Connector configuration was updated.
        public var agentsConfigurationStatus: [AgentConfigurationStatus]? = nil

        public init() {}

        public init(agentsConfigurationStatus: [AgentConfigurationStatus]? = nil) {
            self.agentsConfigurationStatus = agentsConfigurationStatus
        }

    }

    public struct StartDataCollectionByAgentIdsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about agents or the Connector that were instructed to start collecting data. Information includes the agent/Connector ID, a description of the operation performed, and whether or not the agent/Connector configuration was updated.
        public var agentsConfigurationStatus: [AgentConfigurationStatus]? = nil

        public init() {}

        public init(agentsConfigurationStatus: [AgentConfigurationStatus]? = nil) {
            self.agentsConfigurationStatus = agentsConfigurationStatus
        }

    }

    public struct CreateApplicationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Configuration ID of an application to be created.
        public var configurationId: String? = nil

        public init() {}

        public init(configurationId: String? = nil) {
            self.configurationId = configurationId
        }

    }

    public struct TagFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A name of a tag filter.
        public var name: String = ""
        /// Values of a tag filter.
        public var values: [String] = []

        public init() {}

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

    }

    public struct AssociateConfigurationItemsToApplicationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The configuration ID of an application with which items are to be associated.
        public var applicationConfigurationId: String = ""
        /// The ID of each configuration item to be associated with an application.
        public var configurationIds: [String] = []

        public init() {}

        public init(applicationConfigurationId: String, configurationIds: [String]) {
            self.applicationConfigurationId = applicationConfigurationId
            self.configurationIds = configurationIds
        }

    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A type of tag to filter on.
        public var key: String = ""
        /// A value for a tag key to filter on.
        public var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

    }

    public struct DeleteApplicationsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ExportInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique identifier that you can use to query the export.
        public var exportId: String = ""
        /// The status of the configuration data export. The status can succeed, fail, or be in-progress.
        public var exportStatus: String = ""
        /// A URL for an Amazon S3 bucket where you can review the configuration data. The URL is displayed only if the export succeeded.
        public var configurationsDownloadUrl: String? = nil
        /// Helpful status messages for API callers. For example: Too many exports in the last 6 hours. Export in progress. Export was successful.
        public var statusMessage: String = ""
        /// The time the configuration data export was initiated.
        public var exportRequestTime: Date = Date()

        public init() {}

        public init(exportId: String, exportStatus: String, configurationsDownloadUrl: String? = nil, statusMessage: String, exportRequestTime: Date) {
            self.exportId = exportId
            self.exportStatus = exportStatus
            self.configurationsDownloadUrl = configurationsDownloadUrl
            self.statusMessage = statusMessage
            self.exportRequestTime = exportRequestTime
        }

    }

    public struct DescribeAgentsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.
        public var agentsInfo: [AgentInfo]? = nil
        /// Token to retrieve the next set of results. For example, if you specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public var nextToken: String? = nil

        public init() {}

        public init(agentsInfo: [AgentInfo]? = nil, nextToken: String? = nil) {
            self.agentsInfo = agentsInfo
            self.nextToken = nextToken
        }

    }

    public struct GetDiscoverySummaryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeConfigurationsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A key in the response map. The value is an array of data.
        public var configurations: [[String: String]]? = nil

        public init() {}

        public init(configurations: [[String: String]]? = nil) {
            self.configurations = configurations
        }

    }

    public struct DescribeAgentsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The total number of agents/Connectors to return in a single page of output. The maximum value is 100.
        public var maxResults: Int32? = nil
        /// Token to retrieve the next set of results. For example, if you previously specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public var nextToken: String? = nil
        /// You can filter the request using various logical operators and a key-value format. For example:   {"key": "collectionStatus", "value": "STARTED"}  For a complete list of filter options and guidance about using them with this action, see Managing AWS Application Discovery Service Agents and the AWS Application Discovery Connector .
        public var filters: [Filter]? = nil
        /// The agent or the Connector IDs for which you want information. If you specify no IDs, the system returns information about all agents/Connectors associated with your AWS user account.
        public var agentIds: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filters: [Filter]? = nil, agentIds: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filters = filters
            self.agentIds = agentIds
        }

    }

    public struct ExportConfigurationsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique identifier that you can use to query the export status.
        public var exportId: String? = nil

        public init() {}

        public init(exportId: String? = nil) {
            self.exportId = exportId
        }

    }

    public struct CreateApplicationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Description of the application to be created.
        public var description: String? = nil
        /// Name of the application to be created.
        public var name: String = ""

        public init() {}

        public init(description: String? = nil, name: String) {
            self.description = description
            self.name = name
        }

    }

    public struct DisassociateConfigurationItemsFromApplicationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CustomerAgentInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Number of unhealthy discovery agents.
        public var unhealthyAgents: Int32 = 0
        /// Number of blacklisted discovery agents.
        public var blackListedAgents: Int32 = 0
        /// Total number of discovery agents.
        public var totalAgents: Int32 = 0
        /// Number of unknown discovery agents.
        public var unknownAgents: Int32 = 0
        /// Number of healthy discovery agents
        public var healthyAgents: Int32 = 0
        /// Number of active discovery agents.
        public var activeAgents: Int32 = 0
        /// Number of discovery agents with status SHUTDOWN.
        public var shutdownAgents: Int32 = 0

        public init() {}

        public init(unhealthyAgents: Int32, blackListedAgents: Int32, totalAgents: Int32, unknownAgents: Int32, healthyAgents: Int32, activeAgents: Int32, shutdownAgents: Int32) {
            self.unhealthyAgents = unhealthyAgents
            self.blackListedAgents = blackListedAgents
            self.totalAgents = totalAgents
            self.unknownAgents = unknownAgents
            self.healthyAgents = healthyAgents
            self.activeAgents = activeAgents
            self.shutdownAgents = shutdownAgents
        }

    }

    public struct StartDataCollectionByAgentIdsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The IDs of the agents or Connectors that you want to start collecting data. If you send a request to an agent/Connector ID that you do not have permission to contact, according to your AWS account, the service does not throw an exception. Instead, it returns the error in the Description field. If you send a request to multiple agents/Connectors and you do not have permission to contact some of those agents/Connectors, the system does not throw an exception. Instead, the system shows Failed in the Description field.
        public var agentIds: [String] = []

        public init() {}

        public init(agentIds: [String]) {
            self.agentIds = agentIds
        }

    }

    public struct ListServerNeighborsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Maximum number of results to return in a single page of output.
        public var maxResults: Int32? = nil
        /// Flag to indicate if port and protocol information is needed as part of the response.
        public var portInformationNeeded: Bool? = nil
        /// Token to retrieve the next set of results. For example, if you previously specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public var nextToken: String? = nil
        /// List of configuration IDs to test for one-hop-away.
        public var neighborConfigurationIds: [String]? = nil
        /// Configuration ID of the server for which neighbors are being listed.
        public var configurationId: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, portInformationNeeded: Bool? = nil, nextToken: String? = nil, neighborConfigurationIds: [String]? = nil, configurationId: String) {
            self.maxResults = maxResults
            self.portInformationNeeded = portInformationNeeded
            self.nextToken = nextToken
            self.neighborConfigurationIds = neighborConfigurationIds
            self.configurationId = configurationId
        }

    }

    public struct UpdateApplicationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// New description of the application to be updated.
        public var description: String? = nil
        /// New name of the application to be updated.
        public var name: String? = nil
        /// Configuration ID of the application to be updated.
        public var configurationId: String = ""

        public init() {}

        public init(description: String? = nil, name: String? = nil, configurationId: String) {
            self.description = description
            self.name = name
            self.configurationId = configurationId
        }

    }

    public struct Filter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter.
        public var name: String = ""
        /// A string value that you want to filter on. For example, if you choose the destinationServer.osVersion filter name, you could specify Ubuntu for the value.
        public var values: [String] = []
        /// A conditional operator. The following operators are valid: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS. If you specify multiple filters, the system utilizes all filters as though concatenated by AND. If you specify multiple values for a particular filter, the system differentiates the values using OR. Calling either DescribeConfigurations or ListConfigurations returns attributes of matching configuration items.
        public var condition: String = ""

        public init() {}

        public init(name: String, values: [String], condition: String) {
            self.name = name
            self.values = values
            self.condition = condition
        }

    }

    public struct AgentNetworkInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The MAC address for the host where the agent/Connector resides.
        public var macAddress: String? = nil
        /// The IP address for the host where the agent/Connector resides.
        public var ipAddress: String? = nil

        public init() {}

        public init(macAddress: String? = nil, ipAddress: String? = nil) {
            self.macAddress = macAddress
            self.ipAddress = ipAddress
        }

    }

    public struct CreateTagsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

}