// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Discovery {

    public struct DisassociateConfigurationItemsFromApplicationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationConfigurationId", required: true, type: .string), 
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Configuration ID of an application from which each item is disassociated.
        public let applicationConfigurationId: String
        /// Configuration ID of each item to be disassociated from an application.
        public let configurationIds: [String]

        public init(applicationConfigurationId: String, configurationIds: [String]) {
            self.applicationConfigurationId = applicationConfigurationId
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case applicationConfigurationId = "applicationConfigurationId"
            case configurationIds = "configurationIds"
        }
    }

    public struct DescribeTagsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Depending on the input, this is a list of configuration items tagged with a specific tag, or a list of tags for a specific configuration item.
        public let tags: ConfigurationTagSet?
        /// The call returns a token. Use this token to get the next set of results.
        public let nextToken: String?

        public init(tags: ConfigurationTagSet? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case nextToken = "nextToken"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .structure), 
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Tags that you want to associate with one or more configuration items. Specify the tags that you want to create in a key-value format. For example:  {"key": "serverType", "value": "webServer"} 
        public let tags: TagSet
        /// A list of configuration items that you want to tag.
        public let configurationIds: [String]

        public init(tags: TagSet, configurationIds: [String]) {
            self.tags = tags
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case configurationIds = "configurationIds"
        }
    }

    public struct DeleteTagsResponse: AWSShape {
        /// The key for the payload

    }

    public struct FilterValues: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {
        /// The key for the payload

    }

    public struct TagSet: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Tag]?

        public init(item: [Tag]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct OrderByElement: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "fieldName", required: true, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum)
        ]
        /// The field on which to order.
        public let fieldName: String
        /// Ordering direction.
        public let sortOrder: OrderString?

        public init(fieldName: String, sortOrder: OrderString? = nil) {
            self.fieldName = fieldName
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case fieldName = "fieldName"
            case sortOrder = "sortOrder"
        }
    }

    public struct AgentInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "health", required: false, type: .enum), 
            AWSShapeMember(label: "agentNetworkInfoList", required: false, type: .list), 
            AWSShapeMember(label: "lastHealthPingTime", required: false, type: .string), 
            AWSShapeMember(label: "agentType", required: false, type: .string), 
            AWSShapeMember(label: "collectionStatus", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "connectorId", required: false, type: .string), 
            AWSShapeMember(label: "agentId", required: false, type: .string), 
            AWSShapeMember(label: "registeredTime", required: false, type: .string), 
            AWSShapeMember(label: "hostName", required: false, type: .string)
        ]
        /// The health of the agent or connector.
        public let health: AgentStatus?
        /// Network details about the host where the agent or connector resides.
        public let agentNetworkInfoList: [AgentNetworkInfo]?
        /// Time since agent or connector health was reported.
        public let lastHealthPingTime: String?
        /// Type of agent.
        public let agentType: String?
        /// Status of the collection process for an agent or connector.
        public let collectionStatus: String?
        /// The agent or connector version.
        public let version: String?
        /// The ID of the connector.
        public let connectorId: String?
        /// The agent or connector ID.
        public let agentId: String?
        /// Agent's first registration timestamp in UTC.
        public let registeredTime: String?
        /// The name of the host where the agent or connector resides. The host can be a server or virtual machine.
        public let hostName: String?

        public init(health: AgentStatus? = nil, agentNetworkInfoList: [AgentNetworkInfo]? = nil, lastHealthPingTime: String? = nil, agentType: String? = nil, collectionStatus: String? = nil, version: String? = nil, connectorId: String? = nil, agentId: String? = nil, registeredTime: String? = nil, hostName: String? = nil) {
            self.health = health
            self.agentNetworkInfoList = agentNetworkInfoList
            self.lastHealthPingTime = lastHealthPingTime
            self.agentType = agentType
            self.collectionStatus = collectionStatus
            self.version = version
            self.connectorId = connectorId
            self.agentId = agentId
            self.registeredTime = registeredTime
            self.hostName = hostName
        }

        private enum CodingKeys: String, CodingKey {
            case health = "health"
            case agentNetworkInfoList = "agentNetworkInfoList"
            case lastHealthPingTime = "lastHealthPingTime"
            case agentType = "agentType"
            case collectionStatus = "collectionStatus"
            case version = "version"
            case connectorId = "connectorId"
            case agentId = "agentId"
            case registeredTime = "registeredTime"
            case hostName = "hostName"
        }
    }

    public struct GetDiscoverySummaryResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "serversMappedtoTags", required: false, type: .long), 
            AWSShapeMember(label: "applications", required: false, type: .long), 
            AWSShapeMember(label: "connectorSummary", required: false, type: .structure), 
            AWSShapeMember(label: "agentSummary", required: false, type: .structure), 
            AWSShapeMember(label: "servers", required: false, type: .long), 
            AWSShapeMember(label: "serversMappedToApplications", required: false, type: .long)
        ]
        /// The number of servers mapped to tags.
        public let serversMappedtoTags: Int64?
        /// The number of applications discovered.
        public let applications: Int64?
        /// Details about discovered connectors, including connector status and health.
        public let connectorSummary: CustomerConnectorInfo?
        /// Details about discovered agents, including agent status and health.
        public let agentSummary: CustomerAgentInfo?
        /// The number of servers discovered.
        public let servers: Int64?
        /// The number of servers mapped to applications.
        public let serversMappedToApplications: Int64?

        public init(serversMappedtoTags: Int64? = nil, applications: Int64? = nil, connectorSummary: CustomerConnectorInfo? = nil, agentSummary: CustomerAgentInfo? = nil, servers: Int64? = nil, serversMappedToApplications: Int64? = nil) {
            self.serversMappedtoTags = serversMappedtoTags
            self.applications = applications
            self.connectorSummary = connectorSummary
            self.agentSummary = agentSummary
            self.servers = servers
            self.serversMappedToApplications = serversMappedToApplications
        }

        private enum CodingKeys: String, CodingKey {
            case serversMappedtoTags = "serversMappedtoTags"
            case applications = "applications"
            case connectorSummary = "connectorSummary"
            case agentSummary = "agentSummary"
            case servers = "servers"
            case serversMappedToApplications = "serversMappedToApplications"
        }
    }

    public struct ConfigurationTag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeOfCreation", required: false, type: .timestamp), 
            AWSShapeMember(label: "configurationType", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "configurationId", required: false, type: .string)
        ]
        /// The time the configuration tag was created in Coordinated Universal Time (UTC).
        public let timeOfCreation: TimeStamp?
        /// A type of IT asset to tag.
        public let configurationType: ConfigurationItemType?
        /// A value on which to filter. For example key = serverType and value = web server.
        public let value: String?
        /// A type of tag on which to filter. For example, serverType.
        public let key: String?
        /// The configuration ID for the item to tag. You can specify a list of keys and values.
        public let configurationId: String?

        public init(timeOfCreation: TimeStamp? = nil, configurationType: ConfigurationItemType? = nil, value: String? = nil, key: String? = nil, configurationId: String? = nil) {
            self.timeOfCreation = timeOfCreation
            self.configurationType = configurationType
            self.value = value
            self.key = key
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case timeOfCreation = "timeOfCreation"
            case configurationType = "configurationType"
            case value = "value"
            case key = "key"
            case configurationId = "configurationId"
        }
    }

    public struct ListConfigurationsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurations", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Returns configuration details, including the configuration ID, attribute names, and attribute values.
        public let configurations: [[String: String]]?
        /// Token to retrieve the next set of results. For example, if your call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public let nextToken: String?

        public init(configurations: [[String: String]]? = nil, nextToken: String? = nil) {
            self.configurations = configurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "configurations"
            case nextToken = "nextToken"
        }
    }

    public struct NeighborConnectionDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationServerId", required: true, type: .string), 
            AWSShapeMember(label: "transportProtocol", required: false, type: .string), 
            AWSShapeMember(label: "connectionsCount", required: true, type: .long), 
            AWSShapeMember(label: "destinationPort", required: false, type: .integer), 
            AWSShapeMember(label: "sourceServerId", required: true, type: .string)
        ]
        /// The ID of the server that accepted the network connection.
        public let destinationServerId: String
        /// The network protocol used for the connection.
        public let transportProtocol: String?
        /// The number of open network connections with the neighboring server.
        public let connectionsCount: Int64
        /// The destination network port for the connection.
        public let destinationPort: Int32?
        /// The ID of the server that opened the network connection.
        public let sourceServerId: String

        public init(destinationServerId: String, transportProtocol: String? = nil, connectionsCount: Int64, destinationPort: Int32? = nil, sourceServerId: String) {
            self.destinationServerId = destinationServerId
            self.transportProtocol = transportProtocol
            self.connectionsCount = connectionsCount
            self.destinationPort = destinationPort
            self.sourceServerId = sourceServerId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationServerId = "destinationServerId"
            case transportProtocol = "transportProtocol"
            case connectionsCount = "connectionsCount"
            case destinationPort = "destinationPort"
            case sourceServerId = "sourceServerId"
        }
    }

    public enum ConfigurationItemType: String, CustomStringConvertible, Codable {
        case server = "SERVER"
        case process = "PROCESS"
        case connection = "CONNECTION"
        case application = "APPLICATION"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTagsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// You can filter the list using a key-value format. You can separate these items by using logical operators. Allowed filters include tagKey, tagValue, and configurationId. 
        public let filters: [TagFilter]?
        /// The total number of items to return in a single page of output. The maximum value is 100.
        public let maxResults: Int32?
        /// A token to start the list. Use this token to get the next set of results.
        public let nextToken: String?

        public init(filters: [TagFilter]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListServerNeighborsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "neighbors", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "knownDependencyCount", required: false, type: .long)
        ]
        /// List of distinct servers that are one hop away from the given server.
        public let neighbors: [NeighborConnectionDetail]
        /// Token to retrieve the next set of results. For example, if you specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public let nextToken: String?
        /// Count of distinct servers that are one hop away from the given server.
        public let knownDependencyCount: Int64?

        public init(neighbors: [NeighborConnectionDetail], nextToken: String? = nil, knownDependencyCount: Int64? = nil) {
            self.neighbors = neighbors
            self.nextToken = nextToken
            self.knownDependencyCount = knownDependencyCount
        }

        private enum CodingKeys: String, CodingKey {
            case neighbors = "neighbors"
            case nextToken = "nextToken"
            case knownDependencyCount = "knownDependencyCount"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The type of tag on which to filter.
        public let key: String
        /// A value for a tag key on which to filter.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationId", required: false, type: .string)
        ]
        /// Configuration ID of an application to be created.
        public let configurationId: String?

        public init(configurationId: String? = nil) {
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationId = "configurationId"
        }
    }

    public struct TagFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "values", required: true, type: .structure)
        ]
        /// A name of the tag filter.
        public let name: String
        /// Values for the tag filter.
        public let values: FilterValues

        public init(name: String, values: FilterValues) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case values = "values"
        }
    }

    public struct AssociateConfigurationItemsToApplicationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationConfigurationId", required: true, type: .string), 
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// The configuration ID of an application with which items are to be associated.
        public let applicationConfigurationId: String
        /// The ID of each configuration item to be associated with an application.
        public let configurationIds: [String]

        public init(applicationConfigurationId: String, configurationIds: [String]) {
            self.applicationConfigurationId = applicationConfigurationId
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case applicationConfigurationId = "applicationConfigurationId"
            case configurationIds = "configurationIds"
        }
    }

    public struct StartExportTaskResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportId", required: false, type: .string)
        ]
        ///  A unique identifier used to query the status of an export request.
        public let exportId: String?

        public init(exportId: String? = nil) {
            self.exportId = exportId
        }

        private enum CodingKeys: String, CodingKey {
            case exportId = "exportId"
        }
    }

    public struct ConfigurationTagSet: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ConfigurationTag]?

        public init(item: [ConfigurationTag]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ExportConfigurationsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportId", required: false, type: .string)
        ]
        /// A unique identifier that you can use to query the export status.
        public let exportId: String?

        public init(exportId: String? = nil) {
            self.exportId = exportId
        }

        private enum CodingKeys: String, CodingKey {
            case exportId = "exportId"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// Description of the application to be created.
        public let description: String?
        /// Name of the application to be created.
        public let name: String

        public init(description: String? = nil, name: String) {
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportIds", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// One or more unique identifiers used to query the status of an export request.
        public let exportIds: [String]?
        /// The nextToken value returned from a previous paginated DescribeExportTasks request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The maximum number of volume results returned by DescribeExportTasks in paginated output. When this parameter is used, DescribeExportTasks only returns maxResults results in a single page along with a nextToken response element.
        public let maxResults: Int32?

        public init(exportIds: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.exportIds = exportIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case exportIds = "exportIds"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListServerNeighborsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "portInformationNeeded", required: false, type: .boolean), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "neighborConfigurationIds", required: false, type: .list), 
            AWSShapeMember(label: "configurationId", required: true, type: .string)
        ]
        /// Maximum number of results to return in a single page of output.
        public let maxResults: Int32?
        /// Flag to indicate if port and protocol information is needed as part of the response.
        public let portInformationNeeded: Bool?
        /// Token to retrieve the next set of results. For example, if you previously specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public let nextToken: String?
        /// List of configuration IDs to test for one-hop-away.
        public let neighborConfigurationIds: [String]?
        /// Configuration ID of the server for which neighbors are being listed.
        public let configurationId: String

        public init(maxResults: Int32? = nil, portInformationNeeded: Bool? = nil, nextToken: String? = nil, neighborConfigurationIds: [String]? = nil, configurationId: String) {
            self.maxResults = maxResults
            self.portInformationNeeded = portInformationNeeded
            self.nextToken = nextToken
            self.neighborConfigurationIds = neighborConfigurationIds
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case portInformationNeeded = "portInformationNeeded"
            case nextToken = "nextToken"
            case neighborConfigurationIds = "neighborConfigurationIds"
            case configurationId = "configurationId"
        }
    }

    public enum ExportDataFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case graphml = "GRAPHML"
        public var description: String { return self.rawValue }
    }

    public struct ListConfigurationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationType", required: true, type: .enum), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "orderBy", required: false, type: .list)
        ]
        /// A valid configuration identified by Application Discovery Service. 
        public let configurationType: ConfigurationItemType
        /// The total number of items to return. The maximum value is 100.
        public let maxResults: Int32?
        /// Token to retrieve the next set of results. For example, if a previous call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public let nextToken: String?
        /// You can filter the request using various logical operators and a key-value format. For example:   {"key": "serverType", "value": "webServer"}  For a complete list of filter options and guidance about using them with this action, see Querying Discovered Configuration Items. 
        public let filters: [Filter]?
        /// Certain filter criteria return output that can be sorted in ascending or descending order. For a list of output characteristics for each filter, see Using the ListConfigurations Action.
        public let orderBy: [OrderByElement]?

        public init(configurationType: ConfigurationItemType, maxResults: Int32? = nil, nextToken: String? = nil, filters: [Filter]? = nil, orderBy: [OrderByElement]? = nil) {
            self.configurationType = configurationType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filters = filters
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case configurationType = "configurationType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case filters = "filters"
            case orderBy = "orderBy"
        }
    }

    public enum ExportStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case succeeded = "SUCCEEDED"
        case in_progress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeExportTasksResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exportsInfo", required: false, type: .list)
        ]
        /// The nextToken value to include in a future DescribeExportTasks request. When the results of a DescribeExportTasks request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Contains one or more sets of export request details. When the status of a request is SUCCEEDED, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
        public let exportsInfo: [ExportInfo]?

        public init(nextToken: String? = nil, exportsInfo: [ExportInfo]? = nil) {
            self.nextToken = nextToken
            self.exportsInfo = exportsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exportsInfo = "exportsInfo"
        }
    }

    public struct DescribeExportConfigurationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportIds", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// A unique identifier that you can use to query the export status.
        public let exportIds: [String]?
        /// A token to get the next set of results. For example, if you specify 100 IDs for DescribeExportConfigurationsRequest$exportIds but set DescribeExportConfigurationsRequest$maxResults to 10, you get results in a set of 10. Use the token in the query to get the next set of 10.
        public let nextToken: String?
        /// The maximum number of results that you want to display as a part of the query.
        public let maxResults: Int32?

        public init(exportIds: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.exportIds = exportIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case exportIds = "exportIds"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteApplicationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Configuration ID of an application to be deleted.
        public let configurationIds: [String]

        public init(configurationIds: [String]) {
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case configurationIds = "configurationIds"
        }
    }

    public struct AgentConfigurationStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "agentId", required: false, type: .string), 
            AWSShapeMember(label: "operationSucceeded", required: false, type: .boolean)
        ]
        /// A description of the operation performed.
        public let description: String?
        /// The agent/connector ID.
        public let agentId: String?
        /// Information about the status of the StartDataCollection and StopDataCollection operations. The system has recorded the data collection operation. The agent/connector receives this command the next time it polls for a new command. 
        public let operationSucceeded: Bool?

        public init(description: String? = nil, agentId: String? = nil, operationSucceeded: Bool? = nil) {
            self.description = description
            self.agentId = agentId
            self.operationSucceeded = operationSucceeded
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case agentId = "agentId"
            case operationSucceeded = "operationSucceeded"
        }
    }

    public struct CustomerConnectorInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "unhealthyConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "healthyConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "activeConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "totalConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "shutdownConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "unknownConnectors", required: true, type: .integer), 
            AWSShapeMember(label: "blackListedConnectors", required: true, type: .integer)
        ]
        /// Number of unhealthy discovery connectors.
        public let unhealthyConnectors: Int32
        /// Number of healthy discovery connectors.
        public let healthyConnectors: Int32
        /// Number of active discovery connectors.
        public let activeConnectors: Int32
        /// Total number of discovery connectors.
        public let totalConnectors: Int32
        /// Number of discovery connectors with status SHUTDOWN,
        public let shutdownConnectors: Int32
        /// Number of unknown discovery connectors.
        public let unknownConnectors: Int32
        /// Number of blacklisted discovery connectors.
        public let blackListedConnectors: Int32

        public init(unhealthyConnectors: Int32, healthyConnectors: Int32, activeConnectors: Int32, totalConnectors: Int32, shutdownConnectors: Int32, unknownConnectors: Int32, blackListedConnectors: Int32) {
            self.unhealthyConnectors = unhealthyConnectors
            self.healthyConnectors = healthyConnectors
            self.activeConnectors = activeConnectors
            self.totalConnectors = totalConnectors
            self.shutdownConnectors = shutdownConnectors
            self.unknownConnectors = unknownConnectors
            self.blackListedConnectors = blackListedConnectors
        }

        private enum CodingKeys: String, CodingKey {
            case unhealthyConnectors = "unhealthyConnectors"
            case healthyConnectors = "healthyConnectors"
            case activeConnectors = "activeConnectors"
            case totalConnectors = "totalConnectors"
            case shutdownConnectors = "shutdownConnectors"
            case unknownConnectors = "unknownConnectors"
            case blackListedConnectors = "blackListedConnectors"
        }
    }

    public struct StopDataCollectionByAgentIdsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentIds", required: true, type: .list)
        ]
        /// The IDs of the agents or connectors from which to stop collecting data.
        public let agentIds: [String]

        public init(agentIds: [String]) {
            self.agentIds = agentIds
        }

        private enum CodingKeys: String, CodingKey {
            case agentIds = "agentIds"
        }
    }

    public struct DeleteTagsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .structure), 
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// Tags that you want to delete from one or more configuration items. Specify the tags that you want to delete in a key-value format. For example:  {"key": "serverType", "value": "webServer"} 
        public let tags: TagSet?
        /// A list of configuration items with tags that you want to delete.
        public let configurationIds: [String]

        public init(tags: TagSet? = nil, configurationIds: [String]) {
            self.tags = tags
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case configurationIds = "configurationIds"
        }
    }

    public struct DescribeConfigurationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationIds", required: true, type: .list)
        ]
        /// One or more configuration IDs.
        public let configurationIds: [String]

        public init(configurationIds: [String]) {
            self.configurationIds = configurationIds
        }

        private enum CodingKeys: String, CodingKey {
            case configurationIds = "configurationIds"
        }
    }

    public enum AgentStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case running = "RUNNING"
        case unknown = "UNKNOWN"
        case blacklisted = "BLACKLISTED"
        case shutdown = "SHUTDOWN"
        public var description: String { return self.rawValue }
    }

    public struct StartExportTaskRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportDataFormat", required: false, type: .list)
        ]
        /// The file format for the returned export data. Default value is CSV.
        public let exportDataFormat: [ExportDataFormat]?

        public init(exportDataFormat: [ExportDataFormat]? = nil) {
            self.exportDataFormat = exportDataFormat
        }

        private enum CodingKeys: String, CodingKey {
            case exportDataFormat = "exportDataFormat"
        }
    }

    public struct AssociateConfigurationItemsToApplicationResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeExportConfigurationsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exportsInfo", required: false, type: .list)
        ]
        /// A token to get the next set of results. For example, if you specify 100 IDs for DescribeExportConfigurationsRequest$exportIds but set DescribeExportConfigurationsRequest$maxResults to 10, you get results in a set of 10. Use the token in the query to get the next set of 10.
        public let nextToken: String?
        /// Returns export details. When the status is complete, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.
        public let exportsInfo: [ExportInfo]?

        public init(nextToken: String? = nil, exportsInfo: [ExportInfo]? = nil) {
            self.nextToken = nextToken
            self.exportsInfo = exportsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exportsInfo = "exportsInfo"
        }
    }

    public struct StopDataCollectionByAgentIdsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentsConfigurationStatus", required: false, type: .list)
        ]
        /// Information about the agents or connector that were instructed to stop collecting data. Information includes the agent/connector ID, a description of the operation performed, and whether the agent/connector configuration was updated.
        public let agentsConfigurationStatus: [AgentConfigurationStatus]?

        public init(agentsConfigurationStatus: [AgentConfigurationStatus]? = nil) {
            self.agentsConfigurationStatus = agentsConfigurationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case agentsConfigurationStatus = "agentsConfigurationStatus"
        }
    }

    public struct StartDataCollectionByAgentIdsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentsConfigurationStatus", required: false, type: .list)
        ]
        /// Information about agents or the connector that were instructed to start collecting data. Information includes the agent/connector ID, a description of the operation performed, and whether the agent/connector configuration was updated.
        public let agentsConfigurationStatus: [AgentConfigurationStatus]?

        public init(agentsConfigurationStatus: [AgentConfigurationStatus]? = nil) {
            self.agentsConfigurationStatus = agentsConfigurationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case agentsConfigurationStatus = "agentsConfigurationStatus"
        }
    }

    public enum OrderString: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public struct DeleteApplicationsResponse: AWSShape {
        /// The key for the payload

    }

    public struct ExportInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "exportId", required: true, type: .string), 
            AWSShapeMember(label: "exportStatus", required: true, type: .enum), 
            AWSShapeMember(label: "configurationsDownloadUrl", required: false, type: .string), 
            AWSShapeMember(label: "statusMessage", required: true, type: .string), 
            AWSShapeMember(label: "exportRequestTime", required: true, type: .timestamp)
        ]
        /// A unique identifier that you can use to query the export.
        public let exportId: String
        /// The status of the configuration data export. The status can succeed, fail, or be in-progress.
        public let exportStatus: ExportStatus
        /// A URL for an Amazon S3 bucket where you can review the configuration data. The URL is displayed only if the export succeeded.
        public let configurationsDownloadUrl: String?
        /// Helpful status messages for API callers. For example: Too many exports in the last 6 hours. Export in progress. Export was successful.
        public let statusMessage: String
        /// The time that the configuration data export was initiated.
        public let exportRequestTime: TimeStamp

        public init(exportId: String, exportStatus: ExportStatus, configurationsDownloadUrl: String? = nil, statusMessage: String, exportRequestTime: TimeStamp) {
            self.exportId = exportId
            self.exportStatus = exportStatus
            self.configurationsDownloadUrl = configurationsDownloadUrl
            self.statusMessage = statusMessage
            self.exportRequestTime = exportRequestTime
        }

        private enum CodingKeys: String, CodingKey {
            case exportId = "exportId"
            case exportStatus = "exportStatus"
            case configurationsDownloadUrl = "configurationsDownloadUrl"
            case statusMessage = "statusMessage"
            case exportRequestTime = "exportRequestTime"
        }
    }

    public struct DescribeAgentsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentsInfo", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Lists agents or the Connector by ID or lists all agents/Connectors associated with your user account if you did not specify an agent/Connector ID. The output includes agent/Connector IDs, IP addresses, media access control (MAC) addresses, agent/Connector health, host name where the agent/Connector resides, and the version number of each agent/Connector.
        public let agentsInfo: [AgentInfo]?
        /// Token to retrieve the next set of results. For example, if you specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with this token. Use this token in the next query to retrieve the next set of 10.
        public let nextToken: String?

        public init(agentsInfo: [AgentInfo]? = nil, nextToken: String? = nil) {
            self.agentsInfo = agentsInfo
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentsInfo = "agentsInfo"
            case nextToken = "nextToken"
        }
    }

    public struct GetDiscoverySummaryRequest: AWSShape {
        /// The key for the payload

    }

    public struct DescribeConfigurationsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurations", required: false, type: .list)
        ]
        /// A key in the response map. The value is an array of data.
        public let configurations: [[String: String]]?

        public init(configurations: [[String: String]]? = nil) {
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "configurations"
        }
    }

    public struct DescribeAgentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "agentIds", required: false, type: .list)
        ]
        /// The total number of agents/Connectors to return in a single page of output. The maximum value is 100.
        public let maxResults: Int32?
        /// Token to retrieve the next set of results. For example, if you previously specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
        public let nextToken: String?
        /// You can filter the request using various logical operators and a key-value format. For example:   {"key": "collectionStatus", "value": "STARTED"} 
        public let filters: [Filter]?
        /// The agent or the Connector IDs for which you want information. If you specify no IDs, the system returns information about all agents/Connectors associated with your AWS user account.
        public let agentIds: [String]?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filters: [Filter]? = nil, agentIds: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filters = filters
            self.agentIds = agentIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case filters = "filters"
            case agentIds = "agentIds"
        }
    }

    public struct DisassociateConfigurationItemsFromApplicationResponse: AWSShape {
        /// The key for the payload

    }

    public struct CustomerAgentInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "unhealthyAgents", required: true, type: .integer), 
            AWSShapeMember(label: "blackListedAgents", required: true, type: .integer), 
            AWSShapeMember(label: "totalAgents", required: true, type: .integer), 
            AWSShapeMember(label: "unknownAgents", required: true, type: .integer), 
            AWSShapeMember(label: "healthyAgents", required: true, type: .integer), 
            AWSShapeMember(label: "activeAgents", required: true, type: .integer), 
            AWSShapeMember(label: "shutdownAgents", required: true, type: .integer)
        ]
        /// Number of unhealthy discovery agents.
        public let unhealthyAgents: Int32
        /// Number of blacklisted discovery agents.
        public let blackListedAgents: Int32
        /// Total number of discovery agents.
        public let totalAgents: Int32
        /// Number of unknown discovery agents.
        public let unknownAgents: Int32
        /// Number of healthy discovery agents
        public let healthyAgents: Int32
        /// Number of active discovery agents.
        public let activeAgents: Int32
        /// Number of discovery agents with status SHUTDOWN.
        public let shutdownAgents: Int32

        public init(unhealthyAgents: Int32, blackListedAgents: Int32, totalAgents: Int32, unknownAgents: Int32, healthyAgents: Int32, activeAgents: Int32, shutdownAgents: Int32) {
            self.unhealthyAgents = unhealthyAgents
            self.blackListedAgents = blackListedAgents
            self.totalAgents = totalAgents
            self.unknownAgents = unknownAgents
            self.healthyAgents = healthyAgents
            self.activeAgents = activeAgents
            self.shutdownAgents = shutdownAgents
        }

        private enum CodingKeys: String, CodingKey {
            case unhealthyAgents = "unhealthyAgents"
            case blackListedAgents = "blackListedAgents"
            case totalAgents = "totalAgents"
            case unknownAgents = "unknownAgents"
            case healthyAgents = "healthyAgents"
            case activeAgents = "activeAgents"
            case shutdownAgents = "shutdownAgents"
        }
    }

    public struct StartDataCollectionByAgentIdsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentIds", required: true, type: .list)
        ]
        /// The IDs of the agents or connectors from which to start collecting data. If you send a request to an agent/connector ID that you do not have permission to contact, according to your AWS account, the service does not throw an exception. Instead, it returns the error in the Description field. If you send a request to multiple agents/connectors and you do not have permission to contact some of those agents/connectors, the system does not throw an exception. Instead, the system shows Failed in the Description field.
        public let agentIds: [String]

        public init(agentIds: [String]) {
            self.agentIds = agentIds
        }

        private enum CodingKeys: String, CodingKey {
            case agentIds = "agentIds"
        }
    }

    public struct UpdateApplicationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "configurationId", required: true, type: .string)
        ]
        /// New description of the application to be updated.
        public let description: String?
        /// New name of the application to be updated.
        public let name: String?
        /// Configuration ID of the application to be updated.
        public let configurationId: String

        public init(description: String? = nil, name: String? = nil, configurationId: String) {
            self.description = description
            self.name = name
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case configurationId = "configurationId"
        }
    }

    public struct Filter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "values", required: true, type: .structure), 
            AWSShapeMember(label: "condition", required: true, type: .string)
        ]
        /// The name of the filter.
        public let name: String
        /// A string value on which to filter. For example, if you choose the destinationServer.osVersion filter name, you could specify Ubuntu for the value.
        public let values: FilterValues
        /// A conditional operator. The following operators are valid: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS. If you specify multiple filters, the system utilizes all filters as though concatenated by AND. If you specify multiple values for a particular filter, the system differentiates the values using OR. Calling either DescribeConfigurations or ListConfigurations returns attributes of matching configuration items.
        public let condition: String

        public init(name: String, values: FilterValues, condition: String) {
            self.name = name
            self.values = values
            self.condition = condition
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case values = "values"
            case condition = "condition"
        }
    }

    public struct AgentNetworkInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "macAddress", required: false, type: .string), 
            AWSShapeMember(label: "ipAddress", required: false, type: .string)
        ]
        /// The MAC address for the host where the agent/connector resides.
        public let macAddress: String?
        /// The IP address for the host where the agent/connector resides.
        public let ipAddress: String?

        public init(macAddress: String? = nil, ipAddress: String? = nil) {
            self.macAddress = macAddress
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case macAddress = "macAddress"
            case ipAddress = "ipAddress"
        }
    }

    public struct CreateTagsResponse: AWSShape {
        /// The key for the payload

    }

}