// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension ApplicationAutoscaling {

    public struct DescribeScalingActivitiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "ScalingActivities", required: false, type: .list)
        ]
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// A list of scaling activity objects.
        public let scalingActivities: [ScalingActivity]?

        public init(nextToken: String? = nil, scalingActivities: [ScalingActivity]? = nil) {
            self.nextToken = nextToken
            self.scalingActivities = scalingActivities
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let scalingActivities = dictionary["ScalingActivities"] as? [[String: Any]] {
                self.scalingActivities = try scalingActivities.map({ try ScalingActivity(dictionary: $0) })
            } else { 
                self.scalingActivities = nil
            }
        }
    }

    public struct DescribeScalableTargetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ScalableTargets", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        /// The list of scalable targets that matches the request parameters.
        public let scalableTargets: [ScalableTarget]?
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?

        public init(scalableTargets: [ScalableTarget]? = nil, nextToken: String? = nil) {
            self.scalableTargets = scalableTargets
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let scalableTargets = dictionary["ScalableTargets"] as? [[String: Any]] {
                self.scalableTargets = try scalableTargets.map({ try ScalableTarget(dictionary: $0) })
            } else { 
                self.scalableTargets = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum MetricType: String, CustomStringConvertible {
        case dynamodbreadcapacityutilization = "DynamoDBReadCapacityUtilization"
        case dynamodbwritecapacityutilization = "DynamoDBWriteCapacityUtilization"
        public var description: String { return self.rawValue }
    }

    public enum MetricAggregationType: String, CustomStringConvertible {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public struct MetricDimension: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Value", required: true, type: .string), 
            AWSShapeProperty(label: "Name", required: true, type: .string)
        ]
        /// The value of the dimension.
        public let value: String
        /// The name of the dimension.
        public let name: String

        public init(value: String, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct RegisterScalableTargetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ScalingPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "StepScalingPolicyConfiguration", required: false, type: .structure), 
            AWSShapeProperty(label: "TargetTrackingScalingPolicyConfiguration", required: false, type: .structure), 
            AWSShapeProperty(label: "PolicyType", required: true, type: .enum), 
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "PolicyARN", required: true, type: .string), 
            AWSShapeProperty(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "Alarms", required: false, type: .list), 
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "PolicyName", required: true, type: .string)
        ]
        /// A step scaling policy.
        public let stepScalingPolicyConfiguration: StepScalingPolicyConfiguration?
        /// A target tracking policy.
        public let targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration?
        /// The scaling policy type.
        public let policyType: PolicyType
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The Amazon Resource Name (ARN) of the scaling policy.
        public let policyARN: String
        /// The Unix timestamp for when the scaling policy was created.
        public let creationTime: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The CloudWatch alarms associated with the scaling policy.
        public let alarms: [Alarm]?
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// The name of the scaling policy.
        public let policyName: String

        public init(stepScalingPolicyConfiguration: StepScalingPolicyConfiguration? = nil, targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration? = nil, policyType: PolicyType, serviceNamespace: ServiceNamespace, policyARN: String, creationTime: String, scalableDimension: ScalableDimension, alarms: [Alarm]? = nil, resourceId: String, policyName: String) {
            self.stepScalingPolicyConfiguration = stepScalingPolicyConfiguration
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
            self.policyType = policyType
            self.serviceNamespace = serviceNamespace
            self.policyARN = policyARN
            self.creationTime = creationTime
            self.scalableDimension = scalableDimension
            self.alarms = alarms
            self.resourceId = resourceId
            self.policyName = policyName
        }

        public init(dictionary: [String: Any]) throws {
            if let stepScalingPolicyConfiguration = dictionary["StepScalingPolicyConfiguration"] as? [String: Any] { self.stepScalingPolicyConfiguration = try ApplicationAutoscaling.StepScalingPolicyConfiguration(dictionary: stepScalingPolicyConfiguration) } else { self.stepScalingPolicyConfiguration = nil }
            if let targetTrackingScalingPolicyConfiguration = dictionary["TargetTrackingScalingPolicyConfiguration"] as? [String: Any] { self.targetTrackingScalingPolicyConfiguration = try ApplicationAutoscaling.TargetTrackingScalingPolicyConfiguration(dictionary: targetTrackingScalingPolicyConfiguration) } else { self.targetTrackingScalingPolicyConfiguration = nil }
            guard let rawPolicyType = dictionary["PolicyType"] as? String, let policyType = PolicyType(rawValue: rawPolicyType) else { throw InitializableError.missingRequiredParam("PolicyType") }
            self.policyType = policyType
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            guard let policyARN = dictionary["PolicyARN"] as? String else { throw InitializableError.missingRequiredParam("PolicyARN") }
            self.policyARN = policyARN
            guard let creationTime = dictionary["CreationTime"] as? String else { throw InitializableError.missingRequiredParam("CreationTime") }
            self.creationTime = creationTime
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            if let alarms = dictionary["Alarms"] as? [[String: Any]] {
                self.alarms = try alarms.map({ try Alarm(dictionary: $0) })
            } else { 
                self.alarms = nil
            }
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum AdjustmentType: String, CustomStringConvertible {
        case changeincapacity = "ChangeInCapacity"
        case percentchangeincapacity = "PercentChangeInCapacity"
        case exactcapacity = "ExactCapacity"
        public var description: String { return self.rawValue }
    }

    public struct DeleteScalingPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "PolicyName", required: true, type: .string), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum)
        ]
        /// The name of the scaling policy.
        public let policyName: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace

        public init(policyName: String, scalableDimension: ScalableDimension, resourceId: String, serviceNamespace: ServiceNamespace) {
            self.policyName = policyName
            self.scalableDimension = scalableDimension
            self.resourceId = resourceId
            self.serviceNamespace = serviceNamespace
        }

        public init(dictionary: [String: Any]) throws {
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
        }
    }

    public enum ScalableDimension: String, CustomStringConvertible {
        case ecs_service_desiredcount = "ecs:service:DesiredCount"
        case ec2_spot_fleet_request_targetcapacity = "ec2:spot-fleet-request:TargetCapacity"
        case elasticmapreduce_instancegroup_instancecount = "elasticmapreduce:instancegroup:InstanceCount"
        case appstream_fleet_desiredcapacity = "appstream:fleet:DesiredCapacity"
        case dynamodb_table_readcapacityunits = "dynamodb:table:ReadCapacityUnits"
        case dynamodb_table_writecapacityunits = "dynamodb:table:WriteCapacityUnits"
        case dynamodb_index_readcapacityunits = "dynamodb:index:ReadCapacityUnits"
        case dynamodb_index_writecapacityunits = "dynamodb:index:WriteCapacityUnits"
        public var description: String { return self.rawValue }
    }

    public struct PutScalingPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "PolicyName", required: true, type: .string), 
            AWSShapeProperty(label: "TargetTrackingScalingPolicyConfiguration", required: false, type: .structure), 
            AWSShapeProperty(label: "PolicyType", required: false, type: .enum), 
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "StepScalingPolicyConfiguration", required: false, type: .structure)
        ]
        /// The name of the scaling policy.
        public let policyName: String
        /// A target tracking policy. This parameter is required if you are creating a new policy and the policy type is TargetTrackingScaling.
        public let targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration?
        /// The policy type. If you are creating a new policy, this parameter is required. If you are updating a policy, this parameter is not required. For DynamoDB, only TargetTrackingScaling is supported. For any other service, only StepScaling is supported.
        public let policyType: PolicyType?
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// A step scaling policy. This parameter is required if you are creating a policy and the policy type is StepScaling.
        public let stepScalingPolicyConfiguration: StepScalingPolicyConfiguration?

        public init(policyName: String, targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration? = nil, policyType: PolicyType? = nil, serviceNamespace: ServiceNamespace, scalableDimension: ScalableDimension, resourceId: String, stepScalingPolicyConfiguration: StepScalingPolicyConfiguration? = nil) {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
            self.policyType = policyType
            self.serviceNamespace = serviceNamespace
            self.scalableDimension = scalableDimension
            self.resourceId = resourceId
            self.stepScalingPolicyConfiguration = stepScalingPolicyConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
            if let targetTrackingScalingPolicyConfiguration = dictionary["TargetTrackingScalingPolicyConfiguration"] as? [String: Any] { self.targetTrackingScalingPolicyConfiguration = try ApplicationAutoscaling.TargetTrackingScalingPolicyConfiguration(dictionary: targetTrackingScalingPolicyConfiguration) } else { self.targetTrackingScalingPolicyConfiguration = nil }
            if let policyType = dictionary["PolicyType"] as? String { self.policyType = PolicyType(rawValue: policyType) } else { self.policyType = nil }
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            if let stepScalingPolicyConfiguration = dictionary["StepScalingPolicyConfiguration"] as? [String: Any] { self.stepScalingPolicyConfiguration = try ApplicationAutoscaling.StepScalingPolicyConfiguration(dictionary: stepScalingPolicyConfiguration) } else { self.stepScalingPolicyConfiguration = nil }
        }
    }

    public struct ScalableTarget: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "RoleARN", required: true, type: .string), 
            AWSShapeProperty(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "MaxCapacity", required: true, type: .integer), 
            AWSShapeProperty(label: "MinCapacity", required: true, type: .integer)
        ]
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf.
        public let roleARN: String
        /// The Unix timestamp for when the scalable target was created.
        public let creationTime: String
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// The maximum value to scale to in response to a scale out event.
        public let maxCapacity: Int32
        /// The minimum value to scale to in response to a scale in event.
        public let minCapacity: Int32

        public init(serviceNamespace: ServiceNamespace, roleARN: String, creationTime: String, scalableDimension: ScalableDimension, resourceId: String, maxCapacity: Int32, minCapacity: Int32) {
            self.serviceNamespace = serviceNamespace
            self.roleARN = roleARN
            self.creationTime = creationTime
            self.scalableDimension = scalableDimension
            self.resourceId = resourceId
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            guard let creationTime = dictionary["CreationTime"] as? String else { throw InitializableError.missingRequiredParam("CreationTime") }
            self.creationTime = creationTime
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let maxCapacity = dictionary["MaxCapacity"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxCapacity") }
            self.maxCapacity = maxCapacity
            guard let minCapacity = dictionary["MinCapacity"] as? Int32 else { throw InitializableError.missingRequiredParam("MinCapacity") }
            self.minCapacity = minCapacity
        }
    }

    public struct DeregisterScalableTargetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum)
        ]
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace

        public init(resourceId: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace) {
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
        }
    }

    public enum ServiceNamespace: String, CustomStringConvertible {
        case ecs = "ecs"
        case elasticmapreduce = "elasticmapreduce"
        case ec2 = "ec2"
        case appstream = "appstream"
        case dynamodb = "dynamodb"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPoliciesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "ScalingPolicies", required: false, type: .list)
        ]
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// A list of scaling policy objects.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let scalingPolicies = dictionary["ScalingPolicies"] as? [[String: Any]] {
                self.scalingPolicies = try scalingPolicies.map({ try ScalingPolicy(dictionary: $0) })
            } else { 
                self.scalingPolicies = nil
            }
        }
    }

    public struct CustomizedMetricSpecification: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "MetricName", required: true, type: .string), 
            AWSShapeProperty(label: "Namespace", required: true, type: .string), 
            AWSShapeProperty(label: "Unit", required: false, type: .string), 
            AWSShapeProperty(label: "Dimensions", required: false, type: .list), 
            AWSShapeProperty(label: "Statistic", required: true, type: .enum)
        ]
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The unit of the metric.
        public let unit: String?
        /// The dimensions of the metric.
        public let dimensions: [MetricDimension]?
        /// The statistic of the metric.
        public let statistic: MetricStatistic

        public init(metricName: String, namespace: String, unit: String? = nil, dimensions: [MetricDimension]? = nil, statistic: MetricStatistic) {
            self.metricName = metricName
            self.namespace = namespace
            self.unit = unit
            self.dimensions = dimensions
            self.statistic = statistic
        }

        public init(dictionary: [String: Any]) throws {
            guard let metricName = dictionary["MetricName"] as? String else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            guard let namespace = dictionary["Namespace"] as? String else { throw InitializableError.missingRequiredParam("Namespace") }
            self.namespace = namespace
            self.unit = dictionary["Unit"] as? String
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try MetricDimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            guard let rawStatistic = dictionary["Statistic"] as? String, let statistic = MetricStatistic(rawValue: rawStatistic) else { throw InitializableError.missingRequiredParam("Statistic") }
            self.statistic = statistic
        }
    }

    public struct DescribeScalableTargetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "ResourceIds", required: false, type: .list), 
            AWSShapeProperty(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", required: false, type: .integer)
        ]
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceIds: [String]?
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of scalable target results. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int32?

        public init(serviceNamespace: ServiceNamespace, resourceIds: [String]? = nil, scalableDimension: ScalableDimension? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.serviceNamespace = serviceNamespace
            self.resourceIds = resourceIds
            self.scalableDimension = scalableDimension
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            self.resourceIds = dictionary["ResourceIds"] as? [String]
            if let scalableDimension = dictionary["ScalableDimension"] as? String { self.scalableDimension = ScalableDimension(rawValue: scalableDimension) } else { self.scalableDimension = nil }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct StepAdjustment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ScalingAdjustment", required: true, type: .integer), 
            AWSShapeProperty(label: "MetricIntervalUpperBound", required: false, type: .double), 
            AWSShapeProperty(label: "MetricIntervalLowerBound", required: false, type: .double)
        ]
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current scalable dimension while a negative number removes from the current scalable dimension.
        public let scalingAdjustment: Int32
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public let metricIntervalUpperBound: Double?
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public let metricIntervalLowerBound: Double?

        public init(scalingAdjustment: Int32, metricIntervalUpperBound: Double? = nil, metricIntervalLowerBound: Double? = nil) {
            self.scalingAdjustment = scalingAdjustment
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.metricIntervalLowerBound = metricIntervalLowerBound
        }

        public init(dictionary: [String: Any]) throws {
            guard let scalingAdjustment = dictionary["ScalingAdjustment"] as? Int32 else { throw InitializableError.missingRequiredParam("ScalingAdjustment") }
            self.scalingAdjustment = scalingAdjustment
            self.metricIntervalUpperBound = dictionary["MetricIntervalUpperBound"] as? Double
            self.metricIntervalLowerBound = dictionary["MetricIntervalLowerBound"] as? Double
        }
    }

    public struct DeleteScalingPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum ScalingActivityStatusCode: String, CustomStringConvertible {
        case pending = "Pending"
        case inprogress = "InProgress"
        case successful = "Successful"
        case overridden = "Overridden"
        case unfulfilled = "Unfulfilled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct PredefinedMetricSpecification: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "PredefinedMetricType", required: true, type: .enum), 
            AWSShapeProperty(label: "ResourceLabel", required: false, type: .string)
        ]
        /// The metric type.
        public let predefinedMetricType: MetricType
        /// Reserved for future use.
        public let resourceLabel: String?

        public init(predefinedMetricType: MetricType, resourceLabel: String? = nil) {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawPredefinedMetricType = dictionary["PredefinedMetricType"] as? String, let predefinedMetricType = MetricType(rawValue: rawPredefinedMetricType) else { throw InitializableError.missingRequiredParam("PredefinedMetricType") }
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = dictionary["ResourceLabel"] as? String
        }
    }

    public struct TargetTrackingScalingPolicyConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ScaleOutCooldown", required: false, type: .integer), 
            AWSShapeProperty(label: "ScaleInCooldown", required: false, type: .integer), 
            AWSShapeProperty(label: "PredefinedMetricSpecification", required: false, type: .structure), 
            AWSShapeProperty(label: "TargetValue", required: true, type: .double), 
            AWSShapeProperty(label: "CustomizedMetricSpecification", required: false, type: .structure)
        ]
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. The intention is to continuously (but not excessively) scale out.
        public let scaleOutCooldown: Int32?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. The intention is to scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, Application Auto Scaling scales out your scalable target immediately.
        public let scaleInCooldown: Int32?
        /// A predefined metric.
        public let predefinedMetricSpecification: PredefinedMetricSpecification?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        public let targetValue: Double
        /// Reserved for future use.
        public let customizedMetricSpecification: CustomizedMetricSpecification?

        public init(scaleOutCooldown: Int32? = nil, scaleInCooldown: Int32? = nil, predefinedMetricSpecification: PredefinedMetricSpecification? = nil, targetValue: Double, customizedMetricSpecification: CustomizedMetricSpecification? = nil) {
            self.scaleOutCooldown = scaleOutCooldown
            self.scaleInCooldown = scaleInCooldown
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.targetValue = targetValue
            self.customizedMetricSpecification = customizedMetricSpecification
        }

        public init(dictionary: [String: Any]) throws {
            self.scaleOutCooldown = dictionary["ScaleOutCooldown"] as? Int32
            self.scaleInCooldown = dictionary["ScaleInCooldown"] as? Int32
            if let predefinedMetricSpecification = dictionary["PredefinedMetricSpecification"] as? [String: Any] { self.predefinedMetricSpecification = try ApplicationAutoscaling.PredefinedMetricSpecification(dictionary: predefinedMetricSpecification) } else { self.predefinedMetricSpecification = nil }
            guard let targetValue = dictionary["TargetValue"] as? Double else { throw InitializableError.missingRequiredParam("TargetValue") }
            self.targetValue = targetValue
            if let customizedMetricSpecification = dictionary["CustomizedMetricSpecification"] as? [String: Any] { self.customizedMetricSpecification = try ApplicationAutoscaling.CustomizedMetricSpecification(dictionary: customizedMetricSpecification) } else { self.customizedMetricSpecification = nil }
        }
    }

    public struct Alarm: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AlarmName", required: true, type: .string), 
            AWSShapeProperty(label: "AlarmARN", required: true, type: .string)
        ]
        /// The name of the alarm.
        public let alarmName: String
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmARN: String

        public init(alarmName: String, alarmARN: String) {
            self.alarmName = alarmName
            self.alarmARN = alarmARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let alarmName = dictionary["AlarmName"] as? String else { throw InitializableError.missingRequiredParam("AlarmName") }
            self.alarmName = alarmName
            guard let alarmARN = dictionary["AlarmARN"] as? String else { throw InitializableError.missingRequiredParam("AlarmARN") }
            self.alarmARN = alarmARN
        }
    }

    public struct StepScalingPolicyConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "MetricAggregationType", required: false, type: .enum), 
            AWSShapeProperty(label: "Cooldown", required: false, type: .integer), 
            AWSShapeProperty(label: "MinAdjustmentMagnitude", required: false, type: .integer), 
            AWSShapeProperty(label: "StepAdjustments", required: false, type: .list), 
            AWSShapeProperty(label: "AdjustmentType", required: false, type: .enum)
        ]
        /// The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average.
        public let metricAggregationType: MetricAggregationType?
        /// The amount of time, in seconds, after a scaling activity completes where previous trigger-related scaling activities can influence future scaling events. For scale out policies, while the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. The intention is to continuously (but not excessively) scale out. For example, an alarm triggers a step scaling policy to scale out an Amazon ECS service by 2 tasks, the scaling activity completes successfully, and a cooldown period of 5 minutes starts. During the Cooldown period, if the alarm triggers the same policy again but at a more aggressive step adjustment to scale out the service by 3 tasks, the 2 tasks that were added in the previous scale out event are considered part of that capacity and only 1 additional task is added to the desired count. For scale in policies, the cooldown period is used to block subsequent scale in requests until it has expired. The intention is to scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, Application Auto Scaling scales out your scalable target immediately.
        public let cooldown: Int32?
        /// The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
        public let minAdjustmentMagnitude: Int32?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public let stepAdjustments: [StepAdjustment]?
        /// The adjustment type, which specifies how the ScalingAdjustment parameter in a StepAdjustment is interpreted.
        public let adjustmentType: AdjustmentType?

        public init(metricAggregationType: MetricAggregationType? = nil, cooldown: Int32? = nil, minAdjustmentMagnitude: Int32? = nil, stepAdjustments: [StepAdjustment]? = nil, adjustmentType: AdjustmentType? = nil) {
            self.metricAggregationType = metricAggregationType
            self.cooldown = cooldown
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.stepAdjustments = stepAdjustments
            self.adjustmentType = adjustmentType
        }

        public init(dictionary: [String: Any]) throws {
            if let metricAggregationType = dictionary["MetricAggregationType"] as? String { self.metricAggregationType = MetricAggregationType(rawValue: metricAggregationType) } else { self.metricAggregationType = nil }
            self.cooldown = dictionary["Cooldown"] as? Int32
            self.minAdjustmentMagnitude = dictionary["MinAdjustmentMagnitude"] as? Int32
            if let stepAdjustments = dictionary["StepAdjustments"] as? [[String: Any]] {
                self.stepAdjustments = try stepAdjustments.map({ try StepAdjustment(dictionary: $0) })
            } else { 
                self.stepAdjustments = nil
            }
            if let adjustmentType = dictionary["AdjustmentType"] as? String { self.adjustmentType = AdjustmentType(rawValue: adjustmentType) } else { self.adjustmentType = nil }
        }
    }

    public struct DescribeScalingActivitiesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeProperty(label: "ResourceId", required: false, type: .string), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", required: false, type: .integer)
        ]
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension?
        /// The identifier of the resource associated with the scaling activity. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of scalable target results. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int32?

        public init(serviceNamespace: ServiceNamespace, scalableDimension: ScalableDimension? = nil, resourceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.serviceNamespace = serviceNamespace
            self.scalableDimension = scalableDimension
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            if let scalableDimension = dictionary["ScalableDimension"] as? String { self.scalableDimension = ScalableDimension(rawValue: scalableDimension) } else { self.scalableDimension = nil }
            self.resourceId = dictionary["ResourceId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public enum PolicyType: String, CustomStringConvertible {
        case stepscaling = "StepScaling"
        case targettrackingscaling = "TargetTrackingScaling"
        public var description: String { return self.rawValue }
    }

    public struct PutScalingPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Alarms", required: false, type: .list), 
            AWSShapeProperty(label: "PolicyARN", required: true, type: .string)
        ]
        /// The CloudWatch alarms created for the target tracking policy.
        public let alarms: [Alarm]?
        /// The Amazon Resource Name (ARN) of the resulting scaling policy.
        public let policyARN: String

        public init(alarms: [Alarm]? = nil, policyARN: String) {
            self.alarms = alarms
            self.policyARN = policyARN
        }

        public init(dictionary: [String: Any]) throws {
            if let alarms = dictionary["Alarms"] as? [[String: Any]] {
                self.alarms = try alarms.map({ try Alarm(dictionary: $0) })
            } else { 
                self.alarms = nil
            }
            guard let policyARN = dictionary["PolicyARN"] as? String else { throw InitializableError.missingRequiredParam("PolicyARN") }
            self.policyARN = policyARN
        }
    }

    public struct DescribeScalingPoliciesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeProperty(label: "PolicyNames", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "ResourceId", required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", required: false, type: .integer)
        ]
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension?
        /// The names of the scaling policies to describe.
        public let policyNames: [String]?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String?
        /// The maximum number of scalable target results. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int32?

        public init(serviceNamespace: ServiceNamespace, scalableDimension: ScalableDimension? = nil, policyNames: [String]? = nil, nextToken: String? = nil, resourceId: String? = nil, maxResults: Int32? = nil) {
            self.serviceNamespace = serviceNamespace
            self.scalableDimension = scalableDimension
            self.policyNames = policyNames
            self.nextToken = nextToken
            self.resourceId = resourceId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            if let scalableDimension = dictionary["ScalableDimension"] as? String { self.scalableDimension = ScalableDimension(rawValue: scalableDimension) } else { self.scalableDimension = nil }
            self.policyNames = dictionary["PolicyNames"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            self.resourceId = dictionary["ResourceId"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct RegisterScalableTargetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "RoleARN", required: false, type: .string), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "MaxCapacity", required: false, type: .integer), 
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "MinCapacity", required: false, type: .integer), 
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum)
        ]
        /// The ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf. This parameter is required when you register a scalable target and optional when you update one.
        public let roleARN: String?
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The maximum value to scale to in response to a scale out event. This parameter is required if you are registering a scalable target and optional if you are updating one.
        public let maxCapacity: Int32?
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// The minimum value to scale to in response to a scale in event. This parameter is required if you are registering a scalable target and optional if you are updating one.
        public let minCapacity: Int32?
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace

        public init(roleARN: String? = nil, scalableDimension: ScalableDimension, maxCapacity: Int32? = nil, resourceId: String, minCapacity: Int32? = nil, serviceNamespace: ServiceNamespace) {
            self.roleARN = roleARN
            self.scalableDimension = scalableDimension
            self.maxCapacity = maxCapacity
            self.resourceId = resourceId
            self.minCapacity = minCapacity
            self.serviceNamespace = serviceNamespace
        }

        public init(dictionary: [String: Any]) throws {
            self.roleARN = dictionary["RoleARN"] as? String
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            self.maxCapacity = dictionary["MaxCapacity"] as? Int32
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            self.minCapacity = dictionary["MinCapacity"] as? Int32
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
        }
    }

    public struct DeregisterScalableTargetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ScalingActivity: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeProperty(label: "Details", required: false, type: .string), 
            AWSShapeProperty(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeProperty(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeProperty(label: "StatusCode", required: true, type: .enum), 
            AWSShapeProperty(label: "Cause", required: true, type: .string), 
            AWSShapeProperty(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeProperty(label: "ActivityId", required: true, type: .string), 
            AWSShapeProperty(label: "StatusMessage", required: false, type: .string), 
            AWSShapeProperty(label: "ResourceId", required: true, type: .string), 
            AWSShapeProperty(label: "Description", required: true, type: .string)
        ]
        /// The Unix timestamp for when the scaling activity began.
        public let startTime: String
        /// The details about the scaling activity.
        public let details: String?
        /// The namespace of the AWS service. For more information, see AWS Service Namespaces in the Amazon Web Services General Reference.
        public let serviceNamespace: ServiceNamespace
        /// The Unix timestamp for when the scaling activity ended.
        public let endTime: String?
        /// Indicates the status of the scaling activity.
        public let statusCode: ScalingActivityStatusCode
        /// A simple description of what caused the scaling activity to happen.
        public let cause: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.  
        public let scalableDimension: ScalableDimension
        /// The unique identifier of the scaling activity.
        public let activityId: String
        /// A simple message about the current status of the scaling activity.
        public let statusMessage: String?
        /// The identifier of the resource associated with the scaling activity. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.  
        public let resourceId: String
        /// A simple description of what action the scaling activity intends to accomplish.
        public let description: String

        public init(startTime: String, details: String? = nil, serviceNamespace: ServiceNamespace, endTime: String? = nil, statusCode: ScalingActivityStatusCode, cause: String, scalableDimension: ScalableDimension, activityId: String, statusMessage: String? = nil, resourceId: String, description: String) {
            self.startTime = startTime
            self.details = details
            self.serviceNamespace = serviceNamespace
            self.endTime = endTime
            self.statusCode = statusCode
            self.cause = cause
            self.scalableDimension = scalableDimension
            self.activityId = activityId
            self.statusMessage = statusMessage
            self.resourceId = resourceId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let startTime = dictionary["StartTime"] as? String else { throw InitializableError.missingRequiredParam("StartTime") }
            self.startTime = startTime
            self.details = dictionary["Details"] as? String
            guard let rawServiceNamespace = dictionary["ServiceNamespace"] as? String, let serviceNamespace = ServiceNamespace(rawValue: rawServiceNamespace) else { throw InitializableError.missingRequiredParam("ServiceNamespace") }
            self.serviceNamespace = serviceNamespace
            self.endTime = dictionary["EndTime"] as? String
            guard let rawStatusCode = dictionary["StatusCode"] as? String, let statusCode = ScalingActivityStatusCode(rawValue: rawStatusCode) else { throw InitializableError.missingRequiredParam("StatusCode") }
            self.statusCode = statusCode
            guard let cause = dictionary["Cause"] as? String else { throw InitializableError.missingRequiredParam("Cause") }
            self.cause = cause
            guard let rawScalableDimension = dictionary["ScalableDimension"] as? String, let scalableDimension = ScalableDimension(rawValue: rawScalableDimension) else { throw InitializableError.missingRequiredParam("ScalableDimension") }
            self.scalableDimension = scalableDimension
            guard let activityId = dictionary["ActivityId"] as? String else { throw InitializableError.missingRequiredParam("ActivityId") }
            self.activityId = activityId
            self.statusMessage = dictionary["StatusMessage"] as? String
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

}