// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CodeDeploy {

    public struct GetDeploymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentInfo", required: false, type: .structure)
        ]
        /// Information about the deployment.
        public let deploymentInfo: DeploymentInfo?

        public init(deploymentInfo: DeploymentInfo? = nil) {
            self.deploymentInfo = deploymentInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentInfo = "deploymentInfo"
        }
    }

    public struct GreenFleetProvisioningOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", required: false, type: .enum)
        ]
        /// The method used to add instances to a replacement environment.   DISCOVER_EXISTING: Use instances that already exist or will be created manually.   COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.  
        public let action: GreenFleetProvisioningAction?

        public init(action: GreenFleetProvisioningAction? = nil) {
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
        }
    }

    public struct GetDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        ///  The unique ID of a deployment associated with the applicable IAM user or AWS account. 
        public let deploymentId: String

        public init(deploymentId: String) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct ListOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "registrationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "tagFilters", required: false, type: .list)
        ]
        /// An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
        public let nextToken: String?
        /// The registration status of the on-premises instances:   Deregistered: Include deregistered on-premises instances in the resulting list.   Registered: Include registered on-premises instances in the resulting list.  
        public let registrationStatus: RegistrationStatus?
        /// The on-premises instance tags that will be used to restrict the corresponding on-premises instance names returned.
        public let tagFilters: [TagFilter]?

        public init(nextToken: String? = nil, registrationStatus: RegistrationStatus? = nil, tagFilters: [TagFilter]? = nil) {
            self.nextToken = nextToken
            self.registrationStatus = registrationStatus
            self.tagFilters = tagFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case registrationStatus = "registrationStatus"
            case tagFilters = "tagFilters"
        }
    }

    public struct TrafficRoutingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeBasedLinear", required: false, type: .structure), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "timeBasedCanary", required: false, type: .structure)
        ]
        /// A configuration that shifts traffic from one version of a Lambda function to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions are specified in the deployment's AppSpec file.
        public let timeBasedLinear: TimeBasedLinear?
        /// The type of traffic shifting (TimeBasedCanary or TimeBasedLinear) used by a deployment configuration .
        public let `type`: TrafficRoutingType?
        /// A configuration that shifts traffic from one version of a Lambda function to another in two increments. The original and target Lambda function versions are specified in the deployment's AppSpec file.
        public let timeBasedCanary: TimeBasedCanary?

        public init(timeBasedLinear: TimeBasedLinear? = nil, type: TrafficRoutingType? = nil, timeBasedCanary: TimeBasedCanary? = nil) {
            self.timeBasedLinear = timeBasedLinear
            self.`type` = `type`
            self.timeBasedCanary = timeBasedCanary
        }

        private enum CodingKeys: String, CodingKey {
            case timeBasedLinear = "timeBasedLinear"
            case `type` = "type"
            case timeBasedCanary = "timeBasedCanary"
        }
    }

    public struct GetDeploymentConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigInfo", required: false, type: .structure)
        ]
        /// Information about the deployment configuration.
        public let deploymentConfigInfo: DeploymentConfigInfo?

        public init(deploymentConfigInfo: DeploymentConfigInfo? = nil) {
            self.deploymentConfigInfo = deploymentConfigInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigInfo = "deploymentConfigInfo"
        }
    }

    public struct GetDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case applicationName = "applicationName"
        }
    }

    public struct ECSTaskSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "identifer", required: false, type: .string), 
            AWSShapeMember(label: "desiredCount", required: false, type: .long), 
            AWSShapeMember(label: "taskSetLabel", required: false, type: .enum), 
            AWSShapeMember(label: "targetGroup", required: false, type: .structure), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "pendingCount", required: false, type: .long), 
            AWSShapeMember(label: "runningCount", required: false, type: .long), 
            AWSShapeMember(label: "trafficWeight", required: false, type: .double)
        ]
        ///  A unique ID of an ECSTaskSet. 
        public let identifer: String?
        ///  The number of tasks in a task set. During a deployment that uses the Amazon ECS compute type, CodeDeploy asks Amazon ECS to create a new task set and uses this value to determine how many tasks to create. After the updated task set is created, CodeDeploy shifts traffic to the new task set. 
        public let desiredCount: Int64?
        ///  A label that identifies whether the ECS task set is an original target (BLUE) or a replacement target (GREEN). 
        public let taskSetLabel: TargetLabel?
        ///  The target group associated with the task set. The target group is used by AWS CodeDeploy to manage traffic to a task set. 
        public let targetGroup: TargetGroupInfo?
        ///  The status of the task set. There are three valid task set statuses:     PRIMARY - indicates the task set is serving production traffic.     ACTIVE - indicates the task set is not serving production traffic.     DRAINING - indicates the tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group.   
        public let status: String?
        ///  The number of tasks in the task set that are in the PENDING status during an Amazon ECS deployment. A task in the PENDING state is preparing to enter the RUNNING state. A task set enters the PENDING status when it launches for the first time, or when it is restarted after being in the STOPPED state. 
        public let pendingCount: Int64?
        ///  The number of tasks in the task set that are in the RUNNING status during an Amazon ECS deployment. A task in the RUNNING state is running and ready for use. 
        public let runningCount: Int64?
        ///  The percentage of traffic served by this task set. 
        public let trafficWeight: Double?

        public init(identifer: String? = nil, desiredCount: Int64? = nil, taskSetLabel: TargetLabel? = nil, targetGroup: TargetGroupInfo? = nil, status: String? = nil, pendingCount: Int64? = nil, runningCount: Int64? = nil, trafficWeight: Double? = nil) {
            self.identifer = identifer
            self.desiredCount = desiredCount
            self.taskSetLabel = taskSetLabel
            self.targetGroup = targetGroup
            self.status = status
            self.pendingCount = pendingCount
            self.runningCount = runningCount
            self.trafficWeight = trafficWeight
        }

        private enum CodingKeys: String, CodingKey {
            case identifer = "identifer"
            case desiredCount = "desiredCount"
            case taskSetLabel = "taskSetLabel"
            case targetGroup = "targetGroup"
            case status = "status"
            case pendingCount = "pendingCount"
            case runningCount = "runningCount"
            case trafficWeight = "trafficWeight"
        }
    }

    public struct DeploymentConfigInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "trafficRoutingConfig", required: false, type: .structure), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "minimumHealthyHosts", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentConfigId", required: false, type: .string), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum)
        ]
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// The configuration specifying how the deployment traffic will be routed. Only deployments with a Lambda compute platform can specify this.
        public let trafficRoutingConfig: TrafficRoutingConfig?
        /// The time at which the deployment configuration was created.
        public let createTime: TimeStamp?
        /// Information about the number or percentage of minimum healthy instance.
        public let minimumHealthyHosts: MinimumHealthyHosts?
        /// The deployment configuration ID.
        public let deploymentConfigId: String?
        /// The destination platform type for the deployment (Lambda or Server).
        public let computePlatform: ComputePlatform?

        public init(deploymentConfigName: String? = nil, trafficRoutingConfig: TrafficRoutingConfig? = nil, createTime: TimeStamp? = nil, minimumHealthyHosts: MinimumHealthyHosts? = nil, deploymentConfigId: String? = nil, computePlatform: ComputePlatform? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.trafficRoutingConfig = trafficRoutingConfig
            self.createTime = createTime
            self.minimumHealthyHosts = minimumHealthyHosts
            self.deploymentConfigId = deploymentConfigId
            self.computePlatform = computePlatform
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
            case trafficRoutingConfig = "trafficRoutingConfig"
            case createTime = "createTime"
            case minimumHealthyHosts = "minimumHealthyHosts"
            case deploymentConfigId = "deploymentConfigId"
            case computePlatform = "computePlatform"
        }
    }

    public struct LambdaTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "lifecycleEvents", required: false, type: .list), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "targetId", required: false, type: .string), 
            AWSShapeMember(label: "targetArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        ///  The date and time when the target Lambda function was updated by a deployment. 
        public let lastUpdatedAt: TimeStamp?
        ///  The lifecycle events of the deployment to this target Lambda function. 
        public let lifecycleEvents: [LifecycleEvent]?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        ///  The unique ID of a deployment target that has a type of lambdaTarget. 
        public let targetId: String?
        ///  The ARN of the target. 
        public let targetArn: String?
        ///  The status an AWS Lambda deployment's target Lambda function. 
        public let status: TargetStatus?

        public init(lastUpdatedAt: TimeStamp? = nil, lifecycleEvents: [LifecycleEvent]? = nil, deploymentId: String? = nil, targetId: String? = nil, targetArn: String? = nil, status: TargetStatus? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.deploymentId = deploymentId
            self.targetId = targetId
            self.targetArn = targetArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case lifecycleEvents = "lifecycleEvents"
            case deploymentId = "deploymentId"
            case targetId = "targetId"
            case targetArn = "targetArn"
            case status = "status"
        }
    }

    public enum ListStateFilterAction: String, CustomStringConvertible, Codable {
        case include = "include"
        case exclude = "exclude"
        case ignore = "ignore"
        public var description: String { return self.rawValue }
    }

    public enum TargetFilterName: String, CustomStringConvertible, Codable {
        case targetstatus = "TargetStatus"
        case serverinstancelabel = "ServerInstanceLabel"
        public var description: String { return self.rawValue }
    }

    public struct ListDeploymentsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deployments", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
        public let nextToken: String?
        /// A list of deployment IDs.
        public let deployments: [String]?

        public init(nextToken: String? = nil, deployments: [String]? = nil) {
            self.nextToken = nextToken
            self.deployments = deployments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case deployments = "deployments"
        }
    }

    public struct TargetGroupInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes. 
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct BatchGetDeploymentInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instancesSummary", required: false, type: .list), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// Information about the instance.
        public let instancesSummary: [InstanceSummary]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(instancesSummary: [InstanceSummary]? = nil, errorMessage: String? = nil) {
            self.instancesSummary = instancesSummary
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case instancesSummary = "instancesSummary"
            case errorMessage = "errorMessage"
        }
    }

    public struct CreateApplicationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationId", required: false, type: .string)
        ]
        /// A unique application ID.
        public let applicationId: String?

        public init(applicationId: String? = nil) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "applicationId"
        }
    }

    public struct ListOnPremisesInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "instanceNames", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
        public let nextToken: String?
        /// The list of matching on-premises instance names.
        public let instanceNames: [String]?

        public init(nextToken: String? = nil, instanceNames: [String]? = nil) {
            self.nextToken = nextToken
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case instanceNames = "instanceNames"
        }
    }

    public struct SkipWaitTimeForInstanceTerminationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        ///  The unique ID of a blue/green deployment for which you want to skip the instance termination wait time. 
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct ContinueDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentWaitType", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        ///  The status of the deployment's waiting period. READY_WAIT indicates the deployment is ready to start shifting traffic. TERMINATION_WAIT indicates the traffic is shifted, but the original target is not terminated. 
        public let deploymentWaitType: DeploymentWaitType?
        ///  The unique ID of a blue/green deployment for which you want to start rerouting traffic to the replacement environment. 
        public let deploymentId: String?

        public init(deploymentWaitType: DeploymentWaitType? = nil, deploymentId: String? = nil) {
            self.deploymentWaitType = deploymentWaitType
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentWaitType = "deploymentWaitType"
            case deploymentId = "deploymentId"
        }
    }

    public enum DeploymentTargetType: String, CustomStringConvertible, Codable {
        case instancetarget = "InstanceTarget"
        case lambdatarget = "LambdaTarget"
        case ecstarget = "ECSTarget"
        public var description: String { return self.rawValue }
    }

    public struct TimeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "end", required: false, type: .timestamp), 
            AWSShapeMember(label: "start", required: false, type: .timestamp)
        ]
        /// The end time of the time range.  Specify null to leave the end time open-ended. 
        public let end: TimeStamp?
        /// The start time of the time range.  Specify null to leave the start time open-ended. 
        public let start: TimeStamp?

        public init(end: TimeStamp? = nil, start: TimeStamp? = nil) {
            self.end = end
            self.start = start
        }

        private enum CodingKeys: String, CodingKey {
            case end = "end"
            case start = "start"
        }
    }

    public struct GetApplicationRevisionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revision", required: true, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// Information about the application revision to get, including type and location.
        public let revision: RevisionLocation
        /// The name of the application that corresponds to the revision.
        public let applicationName: String

        public init(revision: RevisionLocation, applicationName: String) {
            self.revision = revision
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revision = "revision"
            case applicationName = "applicationName"
        }
    }

    public struct UpdateApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// The new name to give the application.
        public let newApplicationName: String?
        /// The current name of the application you want to change.
        public let applicationName: String?

        public init(newApplicationName: String? = nil, applicationName: String? = nil) {
            self.newApplicationName = newApplicationName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case newApplicationName = "newApplicationName"
            case applicationName = "applicationName"
        }
    }

    public struct InstanceInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "instanceArn", required: false, type: .string), 
            AWSShapeMember(label: "deregisterTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "instanceName", required: false, type: .string), 
            AWSShapeMember(label: "iamSessionArn", required: false, type: .string), 
            AWSShapeMember(label: "iamUserArn", required: false, type: .string), 
            AWSShapeMember(label: "registerTime", required: false, type: .timestamp)
        ]
        /// The tags currently associated with the on-premises instance.
        public let tags: [Tag]?
        /// The ARN of the on-premises instance.
        public let instanceArn: String?
        /// If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
        public let deregisterTime: TimeStamp?
        /// The name of the on-premises instance.
        public let instanceName: String?
        /// The ARN of the IAM session associated with the on-premises instance.
        public let iamSessionArn: String?
        /// The IAM user ARN associated with the on-premises instance.
        public let iamUserArn: String?
        /// The time at which the on-premises instance was registered.
        public let registerTime: TimeStamp?

        public init(tags: [Tag]? = nil, instanceArn: String? = nil, deregisterTime: TimeStamp? = nil, instanceName: String? = nil, iamSessionArn: String? = nil, iamUserArn: String? = nil, registerTime: TimeStamp? = nil) {
            self.tags = tags
            self.instanceArn = instanceArn
            self.deregisterTime = deregisterTime
            self.instanceName = instanceName
            self.iamSessionArn = iamSessionArn
            self.iamUserArn = iamUserArn
            self.registerTime = registerTime
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case instanceArn = "instanceArn"
            case deregisterTime = "deregisterTime"
            case instanceName = "instanceName"
            case iamSessionArn = "iamSessionArn"
            case iamUserArn = "iamUserArn"
            case registerTime = "registerTime"
        }
    }

    public struct BatchGetApplicationRevisionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revisions", required: false, type: .list), 
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// Additional information about the revisions, including the type and location.
        public let revisions: [RevisionInfo]?
        /// The name of the application that corresponds to the revisions.
        public let applicationName: String?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(revisions: [RevisionInfo]? = nil, applicationName: String? = nil, errorMessage: String? = nil) {
            self.revisions = revisions
            self.applicationName = applicationName
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case revisions = "revisions"
            case applicationName = "applicationName"
            case errorMessage = "errorMessage"
        }
    }

    public struct TriggerConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "triggerEvents", required: false, type: .list), 
            AWSShapeMember(label: "triggerTargetArn", required: false, type: .string), 
            AWSShapeMember(label: "triggerName", required: false, type: .string)
        ]
        /// The event type or types for which notifications are triggered.
        public let triggerEvents: [TriggerEventType]?
        /// The ARN of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        public let triggerTargetArn: String?
        /// The name of the notification trigger.
        public let triggerName: String?

        public init(triggerEvents: [TriggerEventType]? = nil, triggerTargetArn: String? = nil, triggerName: String? = nil) {
            self.triggerEvents = triggerEvents
            self.triggerTargetArn = triggerTargetArn
            self.triggerName = triggerName
        }

        private enum CodingKeys: String, CodingKey {
            case triggerEvents = "triggerEvents"
            case triggerTargetArn = "triggerTargetArn"
            case triggerName = "triggerName"
        }
    }

    public struct GitHubLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "repository", required: false, type: .string)
        ]
        /// The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
        public let commitId: String?
        /// The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision.  Specified as account/repository.
        public let repository: String?

        public init(commitId: String? = nil, repository: String? = nil) {
            self.commitId = commitId
            self.repository = repository
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case repository = "repository"
        }
    }

    public struct ECSTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetId", required: false, type: .string), 
            AWSShapeMember(label: "targetArn", required: false, type: .string), 
            AWSShapeMember(label: "taskSetsInfo", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "lifecycleEvents", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        ///  The unique ID of a deployment target that has a type of ecsTarget. 
        public let targetId: String?
        ///  The ARN of the target. 
        public let targetArn: String?
        ///  The ECSTaskSet objects associated with the ECS target. 
        public let taskSetsInfo: [ECSTaskSet]?
        ///  The date and time when the target Amazon ECS application was updated by a deployment. 
        public let lastUpdatedAt: TimeStamp?
        ///  The lifecycle events of the deployment to this target Amazon ECS application. 
        public let lifecycleEvents: [LifecycleEvent]?
        ///  The status an Amazon ECS deployment's target ECS application. 
        public let status: TargetStatus?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?

        public init(targetId: String? = nil, targetArn: String? = nil, taskSetsInfo: [ECSTaskSet]? = nil, lastUpdatedAt: TimeStamp? = nil, lifecycleEvents: [LifecycleEvent]? = nil, status: TargetStatus? = nil, deploymentId: String? = nil) {
            self.targetId = targetId
            self.targetArn = targetArn
            self.taskSetsInfo = taskSetsInfo
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case targetId = "targetId"
            case targetArn = "targetArn"
            case taskSetsInfo = "taskSetsInfo"
            case lastUpdatedAt = "lastUpdatedAt"
            case lifecycleEvents = "lifecycleEvents"
            case status = "status"
            case deploymentId = "deploymentId"
        }
    }

    public struct DeleteGitHubAccountTokenOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tokenName", required: false, type: .string)
        ]
        /// The name of the GitHub account connection that was deleted.
        public let tokenName: String?

        public init(tokenName: String? = nil) {
            self.tokenName = tokenName
        }

        private enum CodingKeys: String, CodingKey {
            case tokenName = "tokenName"
        }
    }

    public struct BatchGetDeploymentGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupsInfo", required: false, type: .list), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// Information about the deployment groups.
        public let deploymentGroupsInfo: [DeploymentGroupInfo]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(deploymentGroupsInfo: [DeploymentGroupInfo]? = nil, errorMessage: String? = nil) {
            self.deploymentGroupsInfo = deploymentGroupsInfo
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupsInfo = "deploymentGroupsInfo"
            case errorMessage = "errorMessage"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bundleType", required: false, type: .enum), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "bucket", required: false, type: .string), 
            AWSShapeMember(label: "eTag", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The file type of the application revision. Must be one of the following:   tar: A tar archive file.   tgz: A compressed tar archive file.   zip: A zip archive file.  
        public let bundleType: BundleType?
        /// The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        public let key: String?
        /// The name of the Amazon S3 bucket where the application revision is stored.
        public let bucket: String?
        /// The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision. If the ETag is not specified as an input parameter, ETag validation of the object will be skipped.
        public let eTag: String?
        /// A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision. If the version is not specified, the system will use the most recent version by default.
        public let version: String?

        public init(bundleType: BundleType? = nil, key: String? = nil, bucket: String? = nil, eTag: String? = nil, version: String? = nil) {
            self.bundleType = bundleType
            self.key = key
            self.bucket = bucket
            self.eTag = eTag
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case bundleType = "bundleType"
            case key = "key"
            case bucket = "bucket"
            case eTag = "eTag"
            case version = "version"
        }
    }

    public enum DeploymentReadyAction: String, CustomStringConvertible, Codable {
        case continueDeployment = "CONTINUE_DEPLOYMENT"
        case stopDeployment = "STOP_DEPLOYMENT"
        public var description: String { return self.rawValue }
    }

    public struct DeploymentStyle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentOption", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentType", required: false, type: .enum)
        ]
        /// Indicates whether to route deployment traffic behind a load balancer.
        public let deploymentOption: DeploymentOption?
        /// Indicates whether to run an in-place deployment or a blue/green deployment.
        public let deploymentType: DeploymentType?

        public init(deploymentOption: DeploymentOption? = nil, deploymentType: DeploymentType? = nil) {
            self.deploymentOption = deploymentOption
            self.deploymentType = deploymentType
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentOption = "deploymentOption"
            case deploymentType = "deploymentType"
        }
    }

    public struct BatchGetDeploymentsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentsInfo", required: false, type: .list)
        ]
        ///  Information about the deployments. 
        public let deploymentsInfo: [DeploymentInfo]?

        public init(deploymentsInfo: [DeploymentInfo]? = nil) {
            self.deploymentsInfo = deploymentsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentsInfo = "deploymentsInfo"
        }
    }

    public enum GreenFleetProvisioningAction: String, CustomStringConvertible, Codable {
        case discoverExisting = "DISCOVER_EXISTING"
        case copyAutoScalingGroup = "COPY_AUTO_SCALING_GROUP"
        public var description: String { return self.rawValue }
    }

    public enum EC2TagFilterType: String, CustomStringConvertible, Codable {
        case keyOnly = "KEY_ONLY"
        case valueOnly = "VALUE_ONLY"
        case keyAndValue = "KEY_AND_VALUE"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationsInfo", required: false, type: .list)
        ]
        /// Information about the applications.
        public let applicationsInfo: [ApplicationInfo]?

        public init(applicationsInfo: [ApplicationInfo]? = nil) {
            self.applicationsInfo = applicationsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case applicationsInfo = "applicationsInfo"
        }
    }

    public struct CreateDeploymentConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: true, type: .string), 
            AWSShapeMember(label: "trafficRoutingConfig", required: false, type: .structure), 
            AWSShapeMember(label: "minimumHealthyHosts", required: false, type: .structure), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum)
        ]
        /// The name of the deployment configuration to create.
        public let deploymentConfigName: String
        /// The configuration that specifies how the deployment traffic will be routed.
        public let trafficRoutingConfig: TrafficRoutingConfig?
        /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:   HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.   FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.   The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
        public let minimumHealthyHosts: MinimumHealthyHosts?
        /// The destination platform type for the deployment (Lambda or Server&gt;).
        public let computePlatform: ComputePlatform?

        public init(deploymentConfigName: String, trafficRoutingConfig: TrafficRoutingConfig? = nil, minimumHealthyHosts: MinimumHealthyHosts? = nil, computePlatform: ComputePlatform? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.trafficRoutingConfig = trafficRoutingConfig
            self.minimumHealthyHosts = minimumHealthyHosts
            self.computePlatform = computePlatform
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
            case trafficRoutingConfig = "trafficRoutingConfig"
            case minimumHealthyHosts = "minimumHealthyHosts"
            case computePlatform = "computePlatform"
        }
    }

    public struct DeleteDeploymentConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: true, type: .string)
        ]
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        public let deploymentConfigName: String

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
        }
    }

    public struct ListDeploymentsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "createTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "includeOnlyStatuses", required: false, type: .list)
        ]
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String?
        /// An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
        public let nextToken: String?
        /// A time range (start and end) for returning a subset of the list of deployments.
        public let createTimeRange: TimeRange?
        /// A subset of deployments to list by status:   Created: Include created deployments in the resulting list.   Queued: Include queued deployments in the resulting list.   In Progress: Include in-progress deployments in the resulting list.   Succeeded: Include successful deployments in the resulting list.   Failed: Include failed deployments in the resulting list.   Stopped: Include stopped deployments in the resulting list.  
        public let includeOnlyStatuses: [DeploymentStatus]?

        public init(deploymentGroupName: String? = nil, applicationName: String? = nil, nextToken: String? = nil, createTimeRange: TimeRange? = nil, includeOnlyStatuses: [DeploymentStatus]? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
            self.nextToken = nextToken
            self.createTimeRange = createTimeRange
            self.includeOnlyStatuses = includeOnlyStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case applicationName = "applicationName"
            case nextToken = "nextToken"
            case createTimeRange = "createTimeRange"
            case includeOnlyStatuses = "includeOnlyStatuses"
        }
    }

    public enum AutoRollbackEvent: String, CustomStringConvertible, Codable {
        case deploymentFailure = "DEPLOYMENT_FAILURE"
        case deploymentStopOnAlarm = "DEPLOYMENT_STOP_ON_ALARM"
        case deploymentStopOnRequest = "DEPLOYMENT_STOP_ON_REQUEST"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigId", required: false, type: .string)
        ]
        /// A unique deployment configuration ID.
        public let deploymentConfigId: String?

        public init(deploymentConfigId: String? = nil) {
            self.deploymentConfigId = deploymentConfigId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigId = "deploymentConfigId"
        }
    }

    public enum DeploymentType: String, CustomStringConvertible, Codable {
        case inPlace = "IN_PLACE"
        case blueGreen = "BLUE_GREEN"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revision", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "fileExistsBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "targetInstances", required: false, type: .structure), 
            AWSShapeMember(label: "ignoreApplicationStopFailures", required: false, type: .boolean), 
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "updateOutdatedInstancesOnly", required: false, type: .boolean)
        ]
        ///  The type and location of the revision to deploy. 
        public let revision: RevisionLocation?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String
        /// Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment. The fileExistsBehavior parameter takes any of the following values:   DISALLOW: The deployment fails. This is also the default behavior if no option is specified.   OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.   RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.  
        public let fileExistsBehavior: FileExistsBehavior?
        /// A comment about the deployment.
        public let description: String?
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account. If not specified, the value configured in the deployment group will be used as the default. If the deployment group does not have a deployment configuration associated with it, then CodeDeployDefault.OneAtATime will be used by default.
        public let deploymentConfigName: String?
        /// Configuration information for an automatic rollback that is added when a deployment is created.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        ///  Information about the instances that will belong to the replacement environment in a blue/green deployment. 
        public let targetInstances: TargetInstances?
        ///  If set to true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event.   If set to false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to fail to an instance, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed. 
        public let ignoreApplicationStopFailures: Bool?
        /// The name of the deployment group.
        public let deploymentGroupName: String?
        ///  Indicates whether to deploy to all instances or only to instances that are not running the latest application revision. 
        public let updateOutdatedInstancesOnly: Bool?

        public init(revision: RevisionLocation? = nil, applicationName: String, fileExistsBehavior: FileExistsBehavior? = nil, description: String? = nil, deploymentConfigName: String? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, targetInstances: TargetInstances? = nil, ignoreApplicationStopFailures: Bool? = nil, deploymentGroupName: String? = nil, updateOutdatedInstancesOnly: Bool? = nil) {
            self.revision = revision
            self.applicationName = applicationName
            self.fileExistsBehavior = fileExistsBehavior
            self.description = description
            self.deploymentConfigName = deploymentConfigName
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.targetInstances = targetInstances
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.deploymentGroupName = deploymentGroupName
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
        }

        private enum CodingKeys: String, CodingKey {
            case revision = "revision"
            case applicationName = "applicationName"
            case fileExistsBehavior = "fileExistsBehavior"
            case description = "description"
            case deploymentConfigName = "deploymentConfigName"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case targetInstances = "targetInstances"
            case ignoreApplicationStopFailures = "ignoreApplicationStopFailures"
            case deploymentGroupName = "deploymentGroupName"
            case updateOutdatedInstancesOnly = "updateOutdatedInstancesOnly"
        }
    }

    public struct InstanceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "lifecycleEvents", required: false, type: .list), 
            AWSShapeMember(label: "instanceId", required: false, type: .string), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "instanceType", required: false, type: .enum), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// A timestamp indicating when the instance information was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// A list of lifecycle events for this instance.
        public let lifecycleEvents: [LifecycleEvent]?
        /// The instance ID.
        public let instanceId: String?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        /// Information about which environment an instance belongs to in a blue/green deployment.   BLUE: The instance is part of the original environment.   GREEN: The instance is part of the replacement environment.  
        public let instanceType: InstanceType?
        /// The deployment status for this instance:   Pending: The deployment is pending for this instance.   In Progress: The deployment is in progress for this instance.   Succeeded: The deployment has succeeded for this instance.   Failed: The deployment has failed for this instance.   Skipped: The deployment has been skipped for this instance.   Unknown: The deployment status is unknown for this instance.  
        public let status: InstanceStatus?

        public init(lastUpdatedAt: TimeStamp? = nil, lifecycleEvents: [LifecycleEvent]? = nil, instanceId: String? = nil, deploymentId: String? = nil, instanceType: InstanceType? = nil, status: InstanceStatus? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.instanceId = instanceId
            self.deploymentId = deploymentId
            self.instanceType = instanceType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case lifecycleEvents = "lifecycleEvents"
            case instanceId = "instanceId"
            case deploymentId = "deploymentId"
            case instanceType = "instanceType"
            case status = "status"
        }
    }

    public struct BatchGetApplicationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationNames", required: true, type: .list)
        ]
        /// A list of application names separated by spaces.
        public let applicationNames: [String]

        public init(applicationNames: [String]) {
            self.applicationNames = applicationNames
        }

        private enum CodingKeys: String, CodingKey {
            case applicationNames = "applicationNames"
        }
    }

    public struct LastDeploymentInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// A timestamp indicating when the most recent deployment to the deployment group started.
        public let createTime: TimeStamp?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        /// A timestamp indicating when the most recent deployment to the deployment group completed.
        public let endTime: TimeStamp?
        /// The status of the most recent deployment.
        public let status: DeploymentStatus?

        public init(createTime: TimeStamp? = nil, deploymentId: String? = nil, endTime: TimeStamp? = nil, status: DeploymentStatus? = nil) {
            self.createTime = createTime
            self.deploymentId = deploymentId
            self.endTime = endTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "createTime"
            case deploymentId = "deploymentId"
            case endTime = "endTime"
            case status = "status"
        }
    }

    public struct ELBInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// For blue/green deployments, the name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public enum InstanceStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public struct DeploymentTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentTargetType", required: false, type: .enum), 
            AWSShapeMember(label: "lambdaTarget", required: false, type: .structure), 
            AWSShapeMember(label: "ecsTarget", required: false, type: .structure), 
            AWSShapeMember(label: "instanceTarget", required: false, type: .structure)
        ]
        ///  The deployment type which is specific to the deployment's compute platform. 
        public let deploymentTargetType: DeploymentTargetType?
        ///  Information about the target for a deployment that uses the AWS Lambda compute platform. 
        public let lambdaTarget: LambdaTarget?
        ///  Information about the target for a deployment that uses the Amazon ECS compute platform. 
        public let ecsTarget: ECSTarget?
        ///  Information about the target for a deployment that uses the EC2/On-premises compute platform. 
        public let instanceTarget: InstanceTarget?

        public init(deploymentTargetType: DeploymentTargetType? = nil, lambdaTarget: LambdaTarget? = nil, ecsTarget: ECSTarget? = nil, instanceTarget: InstanceTarget? = nil) {
            self.deploymentTargetType = deploymentTargetType
            self.lambdaTarget = lambdaTarget
            self.ecsTarget = ecsTarget
            self.instanceTarget = instanceTarget
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentTargetType = "deploymentTargetType"
            case lambdaTarget = "lambdaTarget"
            case ecsTarget = "ecsTarget"
            case instanceTarget = "instanceTarget"
        }
    }

    public struct EC2TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The tag filter key.
        public let key: String?
        /// The tag filter value.
        public let value: String?
        /// The tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        public let `type`: EC2TagFilterType?

        public init(key: String? = nil, value: String? = nil, type: EC2TagFilterType? = nil) {
            self.key = key
            self.value = value
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case `type` = "Type"
        }
    }

    public struct PutLifecycleEventHookExecutionStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lifecycleEventHookExecutionId", required: false, type: .string)
        ]
        /// The execution ID of the lifecycle event hook. A hook is specified in the hooks section of the deployment's AppSpec file.
        public let lifecycleEventHookExecutionId: String?

        public init(lifecycleEventHookExecutionId: String? = nil) {
            self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleEventHookExecutionId = "lifecycleEventHookExecutionId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ListDeploymentTargetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "targetIds", required: false, type: .list)
        ]
        ///  If a large amount of information is returned, a token identifier will also be returned. It can be used in a subsequent ListDeploymentTargets call to return the next set of deployment targets in the list. 
        public let nextToken: String?
        ///  The unique IDs of deployment targets. 
        public let targetIds: [String]?

        public init(nextToken: String? = nil, targetIds: [String]? = nil) {
            self.nextToken = nextToken
            self.targetIds = targetIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case targetIds = "targetIds"
        }
    }

    public struct ListDeploymentInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "instancesList", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
        public let nextToken: String?
        /// A list of instance IDs.
        public let instancesList: [String]?

        public init(nextToken: String? = nil, instancesList: [String]? = nil) {
            self.nextToken = nextToken
            self.instancesList = instancesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case instancesList = "instancesList"
        }
    }

    public struct LifecycleEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lifecycleEventName", required: false, type: .string), 
            AWSShapeMember(label: "diagnostics", required: false, type: .structure), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
        public let lifecycleEventName: String?
        /// Diagnostic information about the deployment lifecycle event.
        public let diagnostics: Diagnostics?
        /// A timestamp indicating when the deployment lifecycle event ended.
        public let endTime: TimeStamp?
        /// A timestamp indicating when the deployment lifecycle event started.
        public let startTime: TimeStamp?
        /// The deployment lifecycle event status:   Pending: The deployment lifecycle event is pending.   InProgress: The deployment lifecycle event is in progress.   Succeeded: The deployment lifecycle event ran successfully.   Failed: The deployment lifecycle event has failed.   Skipped: The deployment lifecycle event has been skipped.   Unknown: The deployment lifecycle event is unknown.  
        public let status: LifecycleEventStatus?

        public init(lifecycleEventName: String? = nil, diagnostics: Diagnostics? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, status: LifecycleEventStatus? = nil) {
            self.lifecycleEventName = lifecycleEventName
            self.diagnostics = diagnostics
            self.endTime = endTime
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleEventName = "lifecycleEventName"
            case diagnostics = "diagnostics"
            case endTime = "endTime"
            case startTime = "startTime"
            case status = "status"
        }
    }

    public enum MinimumHealthyHostsType: String, CustomStringConvertible, Codable {
        case hostCount = "HOST_COUNT"
        case fleetPercent = "FLEET_PERCENT"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The names of the on-premises instances about which to get information.
        public let instanceNames: [String]

        public init(instanceNames: [String]) {
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
        }
    }

    public struct GetDeploymentInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceId", required: true, type: .string), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        ///  The unique ID of an instance in the deployment group. 
        public let instanceId: String
        ///  The unique ID of a deployment. 
        public let deploymentId: String

        public init(instanceId: String, deploymentId: String) {
            self.instanceId = instanceId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case deploymentId = "deploymentId"
        }
    }

    public struct ListApplicationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "applications", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications, will also be returned. in the list.
        public let nextToken: String?
        /// A list of application names.
        public let applications: [String]?

        public init(nextToken: String? = nil, applications: [String]? = nil) {
            self.nextToken = nextToken
            self.applications = applications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case applications = "applications"
        }
    }

    public struct BatchGetDeploymentTargetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "targetIds", required: false, type: .list)
        ]
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        ///  The unique IDs of the deployment targets. The compute platform of the deployment determines the type of the targets and their formats.     For deployments that use the EC2/On-premises compute platform, the target IDs are EC2 or on-premises instances IDs and their target type is instanceTarget.     For deployments that use the AWS Lambda compute platform, the target IDs are the names of Lambda functions and their target type is instanceTarget.     For deployments that use the Amazon ECS compute platform, the target IDs are pairs of Amazon ECS clusters and services specified using the format &lt;clustername&gt;:&lt;servicename&gt;. Their target type is ecsTarget.   
        public let targetIds: [String]?

        public init(deploymentId: String? = nil, targetIds: [String]? = nil) {
            self.deploymentId = deploymentId
            self.targetIds = targetIds
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case targetIds = "targetIds"
        }
    }

    public struct ListGitHubAccountTokenNamesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An identifier returned from the previous ListGitHubAccountTokenNames call. It can be used to return the next set of names in the list. 
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct StopDeploymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]
        /// The status of the stop deployment operation:   Pending: The stop operation is pending.   Succeeded: The stop operation was successful.  
        public let status: StopStatus?
        /// An accompanying status message.
        public let statusMessage: String?

        public init(status: StopStatus? = nil, statusMessage: String? = nil) {
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case statusMessage = "statusMessage"
        }
    }

    public struct DeploymentReadyOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "waitTimeInMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "actionOnTimeout", required: false, type: .enum)
        ]
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout
        public let waitTimeInMinutes: Int32?
        /// Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.   CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.   STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using ContinueDeployment. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.  
        public let actionOnTimeout: DeploymentReadyAction?

        public init(waitTimeInMinutes: Int32? = nil, actionOnTimeout: DeploymentReadyAction? = nil) {
            self.waitTimeInMinutes = waitTimeInMinutes
            self.actionOnTimeout = actionOnTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case waitTimeInMinutes = "waitTimeInMinutes"
            case actionOnTimeout = "actionOnTimeout"
        }
    }

    public struct DeploymentAlreadyStartedException: AWSShape {

    }

    public struct AlarmConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "alarms", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ignorePollAlarmFailure", required: false, type: .boolean)
        ]
        /// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
        public let alarms: [Alarm]?
        /// Indicates whether the alarm configuration is enabled.
        public let enabled: Bool?
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.   true: The deployment will proceed even if alarm status information can't be retrieved from Amazon CloudWatch.   false: The deployment will stop if alarm status information can't be retrieved from Amazon CloudWatch.  
        public let ignorePollAlarmFailure: Bool?

        public init(alarms: [Alarm]? = nil, enabled: Bool? = nil, ignorePollAlarmFailure: Bool? = nil) {
            self.alarms = alarms
            self.enabled = enabled
            self.ignorePollAlarmFailure = ignorePollAlarmFailure
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "alarms"
            case enabled = "enabled"
            case ignorePollAlarmFailure = "ignorePollAlarmFailure"
        }
    }

    public enum DeploymentCreator: String, CustomStringConvertible, Codable {
        case user = "user"
        case autoscaling = "autoscaling"
        case codedeployrollback = "codeDeployRollback"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ascending"
        case descending = "descending"
        public var description: String { return self.rawValue }
    }

    public enum InstanceAction: String, CustomStringConvertible, Codable {
        case terminate = "TERMINATE"
        case keepAlive = "KEEP_ALIVE"
        public var description: String { return self.rawValue }
    }

    public struct GetOnPremisesInstanceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceInfo", required: false, type: .structure)
        ]
        ///  Information about the on-premises instance. 
        public let instanceInfo: InstanceInfo?

        public init(instanceInfo: InstanceInfo? = nil) {
            self.instanceInfo = instanceInfo
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInfo = "instanceInfo"
        }
    }

    public struct UpdateDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "newDeploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "alarmConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "ecsServices", required: false, type: .list), 
            AWSShapeMember(label: "currentDeploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "triggerConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesInstanceTagFilters", required: false, type: .list), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "ec2TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesTagSet", required: false, type: .structure), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string)
        ]
        /// A replacement ARN for the service role, if you want to change it.
        public let serviceRoleArn: String?
        /// The new name of the deployment group, if you want to change it.
        public let newDeploymentGroupName: String?
        /// Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        ///  The target ECS services in the deployment group. This only applies to deployment groups that use the Amazon ECS compute platform. A target ECS service is specified as an Amazon ECS cluster and service name pair using the format &lt;clustername&gt;:&lt;servicename&gt;. 
        public let ecsServices: [ECSService]?
        /// The current name of the deployment group.
        public let currentDeploymentGroupName: String
        /// Information about triggers to change when the deployment group is updated. For examples, see Modify Triggers in an AWS CodeDeploy Deployment Group in the AWS CodeDeploy User Guide.
        public let triggerConfigurations: [TriggerConfig]?
        /// The application name corresponding to the deployment group to update.
        public let applicationName: String
        /// Information about groups of tags applied to on-premises instances. The deployment group will include only EC2 instances identified by all the tag groups.
        public let ec2TagSet: EC2TagSet?
        /// The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// Information about the load balancer used in a deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// Information about an on-premises instance tag set. The deployment group will include only on-premises instances identified by all the tag groups.
        public let onPremisesTagSet: OnPremisesTagSet?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.
        public let autoScalingGroups: [String]?
        /// The replacement deployment configuration name to use, if you want to change it.
        public let deploymentConfigName: String?

        public init(serviceRoleArn: String? = nil, newDeploymentGroupName: String? = nil, alarmConfiguration: AlarmConfiguration? = nil, deploymentStyle: DeploymentStyle? = nil, ecsServices: [ECSService]? = nil, currentDeploymentGroupName: String, triggerConfigurations: [TriggerConfig]? = nil, applicationName: String, ec2TagSet: EC2TagSet? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, onPremisesTagSet: OnPremisesTagSet? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.newDeploymentGroupName = newDeploymentGroupName
            self.alarmConfiguration = alarmConfiguration
            self.deploymentStyle = deploymentStyle
            self.ecsServices = ecsServices
            self.currentDeploymentGroupName = currentDeploymentGroupName
            self.triggerConfigurations = triggerConfigurations
            self.applicationName = applicationName
            self.ec2TagSet = ec2TagSet
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.loadBalancerInfo = loadBalancerInfo
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.onPremisesTagSet = onPremisesTagSet
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRoleArn = "serviceRoleArn"
            case newDeploymentGroupName = "newDeploymentGroupName"
            case alarmConfiguration = "alarmConfiguration"
            case deploymentStyle = "deploymentStyle"
            case ecsServices = "ecsServices"
            case currentDeploymentGroupName = "currentDeploymentGroupName"
            case triggerConfigurations = "triggerConfigurations"
            case applicationName = "applicationName"
            case ec2TagSet = "ec2TagSet"
            case onPremisesInstanceTagFilters = "onPremisesInstanceTagFilters"
            case loadBalancerInfo = "loadBalancerInfo"
            case ec2TagFilters = "ec2TagFilters"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case onPremisesTagSet = "onPremisesTagSet"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case autoScalingGroups = "autoScalingGroups"
            case deploymentConfigName = "deploymentConfigName"
        }
    }

    public struct RegisterApplicationRevisionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "revision", required: true, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// A comment about the revision.
        public let description: String?
        /// Information about the application revision to register, including type and location.
        public let revision: RevisionLocation
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(description: String? = nil, revision: RevisionLocation, applicationName: String) {
            self.description = description
            self.revision = revision
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case revision = "revision"
            case applicationName = "applicationName"
        }
    }

    public struct DeploymentGroupInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "alarmConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "ecsServices", required: false, type: .list), 
            AWSShapeMember(label: "triggerConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "deploymentGroupId", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesInstanceTagFilters", required: false, type: .list), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ec2TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "onPremisesTagSet", required: false, type: .structure), 
            AWSShapeMember(label: "lastAttemptedDeployment", required: false, type: .structure), 
            AWSShapeMember(label: "targetRevision", required: false, type: .structure), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "lastSuccessfulDeployment", required: false, type: .structure)
        ]
        /// A service role ARN.
        public let serviceRoleArn: String?
        /// The deployment group name.
        public let deploymentGroupName: String?
        /// A list of alarms associated with the deployment group.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        ///  The target ECS services in the deployment group. This only applies to deployment groups that use the Amazon ECS compute platform. A target ECS service is specified as an Amazon ECS cluster and service name pair using the format &lt;clustername&gt;:&lt;servicename&gt;. 
        public let ecsServices: [ECSService]?
        /// Information about triggers associated with the deployment group.
        public let triggerConfigurations: [TriggerConfig]?
        /// The deployment group ID.
        public let deploymentGroupId: String?
        /// The application name.
        public let applicationName: String?
        /// Information about groups of tags applied to an EC2 instance. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
        public let ec2TagSet: EC2TagSet?
        /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// Information about the load balancer to use in a deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// Information about the automatic rollback configuration associated with the deployment group.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        public let onPremisesTagSet: OnPremisesTagSet?
        /// Information about the most recent attempted deployment to the deployment group.
        public let lastAttemptedDeployment: LastDeploymentInfo?
        /// Information about the deployment group's target revision, including type and location.
        public let targetRevision: RevisionLocation?
        /// The destination platform type for the deployment group (Lambda or Server).
        public let computePlatform: ComputePlatform?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// A list of associated Auto Scaling groups.
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about the most recent successful deployment to the deployment group.
        public let lastSuccessfulDeployment: LastDeploymentInfo?

        public init(serviceRoleArn: String? = nil, deploymentGroupName: String? = nil, alarmConfiguration: AlarmConfiguration? = nil, deploymentStyle: DeploymentStyle? = nil, ecsServices: [ECSService]? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentGroupId: String? = nil, applicationName: String? = nil, ec2TagSet: EC2TagSet? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, ec2TagFilters: [EC2TagFilter]? = nil, onPremisesTagSet: OnPremisesTagSet? = nil, lastAttemptedDeployment: LastDeploymentInfo? = nil, targetRevision: RevisionLocation? = nil, computePlatform: ComputePlatform? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, autoScalingGroups: [AutoScalingGroup]? = nil, deploymentConfigName: String? = nil, lastSuccessfulDeployment: LastDeploymentInfo? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.deploymentGroupName = deploymentGroupName
            self.alarmConfiguration = alarmConfiguration
            self.deploymentStyle = deploymentStyle
            self.ecsServices = ecsServices
            self.triggerConfigurations = triggerConfigurations
            self.deploymentGroupId = deploymentGroupId
            self.applicationName = applicationName
            self.ec2TagSet = ec2TagSet
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.loadBalancerInfo = loadBalancerInfo
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.ec2TagFilters = ec2TagFilters
            self.onPremisesTagSet = onPremisesTagSet
            self.lastAttemptedDeployment = lastAttemptedDeployment
            self.targetRevision = targetRevision
            self.computePlatform = computePlatform
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.lastSuccessfulDeployment = lastSuccessfulDeployment
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRoleArn = "serviceRoleArn"
            case deploymentGroupName = "deploymentGroupName"
            case alarmConfiguration = "alarmConfiguration"
            case deploymentStyle = "deploymentStyle"
            case ecsServices = "ecsServices"
            case triggerConfigurations = "triggerConfigurations"
            case deploymentGroupId = "deploymentGroupId"
            case applicationName = "applicationName"
            case ec2TagSet = "ec2TagSet"
            case onPremisesInstanceTagFilters = "onPremisesInstanceTagFilters"
            case loadBalancerInfo = "loadBalancerInfo"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case ec2TagFilters = "ec2TagFilters"
            case onPremisesTagSet = "onPremisesTagSet"
            case lastAttemptedDeployment = "lastAttemptedDeployment"
            case targetRevision = "targetRevision"
            case computePlatform = "computePlatform"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case autoScalingGroups = "autoScalingGroups"
            case deploymentConfigName = "deploymentConfigName"
            case lastSuccessfulDeployment = "lastSuccessfulDeployment"
        }
    }

    public struct RevisionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "genericRevisionInfo", required: false, type: .structure), 
            AWSShapeMember(label: "revisionLocation", required: false, type: .structure)
        ]
        /// Information about an application revision, including usage details and associated deployment groups.
        public let genericRevisionInfo: GenericRevisionInfo?
        /// Information about the location and type of an application revision.
        public let revisionLocation: RevisionLocation?

        public init(genericRevisionInfo: GenericRevisionInfo? = nil, revisionLocation: RevisionLocation? = nil) {
            self.genericRevisionInfo = genericRevisionInfo
            self.revisionLocation = revisionLocation
        }

        private enum CodingKeys: String, CodingKey {
            case genericRevisionInfo = "genericRevisionInfo"
            case revisionLocation = "revisionLocation"
        }
    }

    public enum DeploymentOption: String, CustomStringConvertible, Codable {
        case withTrafficControl = "WITH_TRAFFIC_CONTROL"
        case withoutTrafficControl = "WITHOUT_TRAFFIC_CONTROL"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case applicationName = "applicationName"
        }
    }

    public struct LoadBalancerInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "elbInfoList", required: false, type: .list), 
            AWSShapeMember(label: "targetGroupPairInfoList", required: false, type: .list), 
            AWSShapeMember(label: "targetGroupInfoList", required: false, type: .list)
        ]
        /// An array containing information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.   Adding more than one load balancer to the array is not supported.  
        public let elbInfoList: [ELBInfo]?
        ///  The target group pair information. This is an array of TargeGroupPairInfo objects with a maximum size of one. 
        public let targetGroupPairInfoList: [TargetGroupPairInfo]?
        /// An array containing information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.   Adding more than one target group to the array is not supported.  
        public let targetGroupInfoList: [TargetGroupInfo]?

        public init(elbInfoList: [ELBInfo]? = nil, targetGroupPairInfoList: [TargetGroupPairInfo]? = nil, targetGroupInfoList: [TargetGroupInfo]? = nil) {
            self.elbInfoList = elbInfoList
            self.targetGroupPairInfoList = targetGroupPairInfoList
            self.targetGroupInfoList = targetGroupInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case elbInfoList = "elbInfoList"
            case targetGroupPairInfoList = "targetGroupPairInfoList"
            case targetGroupInfoList = "targetGroupInfoList"
        }
    }

    public struct ApplicationInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "applicationId", required: false, type: .string), 
            AWSShapeMember(label: "gitHubAccountName", required: false, type: .string), 
            AWSShapeMember(label: "linkedToGitHub", required: false, type: .boolean), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum)
        ]
        /// The application name.
        public let applicationName: String?
        /// The time at which the application was created.
        public let createTime: TimeStamp?
        /// The application ID.
        public let applicationId: String?
        /// The name for a connection to a GitHub account.
        public let gitHubAccountName: String?
        /// True if the user has authenticated with GitHub for the specified application; otherwise, false.
        public let linkedToGitHub: Bool?
        /// The destination platform type for deployment of the application (Lambda or Server).
        public let computePlatform: ComputePlatform?

        public init(applicationName: String? = nil, createTime: TimeStamp? = nil, applicationId: String? = nil, gitHubAccountName: String? = nil, linkedToGitHub: Bool? = nil, computePlatform: ComputePlatform? = nil) {
            self.applicationName = applicationName
            self.createTime = createTime
            self.applicationId = applicationId
            self.gitHubAccountName = gitHubAccountName
            self.linkedToGitHub = linkedToGitHub
            self.computePlatform = computePlatform
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
            case createTime = "createTime"
            case applicationId = "applicationId"
            case gitHubAccountName = "gitHubAccountName"
            case linkedToGitHub = "linkedToGitHub"
            case computePlatform = "computePlatform"
        }
    }

    public enum DeploymentWaitType: String, CustomStringConvertible, Codable {
        case readyWait = "READY_WAIT"
        case terminationWait = "TERMINATION_WAIT"
        public var description: String { return self.rawValue }
    }

    public struct RevisionLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "string", required: false, type: .structure), 
            AWSShapeMember(label: "gitHubLocation", required: false, type: .structure), 
            AWSShapeMember(label: "revisionType", required: false, type: .enum), 
            AWSShapeMember(label: "appSpecContent", required: false, type: .structure), 
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// Information about the location of an AWS Lambda deployment revision stored as a RawString.
        public let string: RawString?
        /// Information about the location of application artifacts stored in GitHub.
        public let gitHubLocation: GitHubLocation?
        /// The type of application revision:   S3: An application revision stored in Amazon S3.   GitHub: An application revision stored in GitHub (EC2/On-premises deployments only)   String: A YAML-formatted or JSON-formatted string (AWS Lambda deployments only)  
        public let revisionType: RevisionLocationType?
        ///  The content of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. 
        public let appSpecContent: AppSpecContent?
        /// Information about the location of a revision stored in Amazon S3. 
        public let s3Location: S3Location?

        public init(string: RawString? = nil, gitHubLocation: GitHubLocation? = nil, revisionType: RevisionLocationType? = nil, appSpecContent: AppSpecContent? = nil, s3Location: S3Location? = nil) {
            self.string = string
            self.gitHubLocation = gitHubLocation
            self.revisionType = revisionType
            self.appSpecContent = appSpecContent
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case string = "string"
            case gitHubLocation = "gitHubLocation"
            case revisionType = "revisionType"
            case appSpecContent = "appSpecContent"
            case s3Location = "s3Location"
        }
    }

    public struct TargetGroupPairInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetGroups", required: false, type: .list), 
            AWSShapeMember(label: "testTrafficRoute", required: false, type: .structure), 
            AWSShapeMember(label: "prodTrafficRoute", required: false, type: .structure)
        ]
        ///  One pair of target groups. One is associated with the original task set. The second target is associated with the task set that serves traffic after the deployment completes. 
        public let targetGroups: [TargetGroupInfo]?
        ///  An optional path used by a load balancer to route test traffic after an Amazon ECS deployment. Validation can happen while test traffic is served during a deployment. 
        public let testTrafficRoute: TrafficRoute?
        ///  The path used by a load balancer to route production traffic when an Amazon ECS deployment is complete. 
        public let prodTrafficRoute: TrafficRoute?

        public init(targetGroups: [TargetGroupInfo]? = nil, testTrafficRoute: TrafficRoute? = nil, prodTrafficRoute: TrafficRoute? = nil) {
            self.targetGroups = targetGroups
            self.testTrafficRoute = testTrafficRoute
            self.prodTrafficRoute = prodTrafficRoute
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "targetGroups"
            case testTrafficRoute = "testTrafficRoute"
            case prodTrafficRoute = "prodTrafficRoute"
        }
    }

    public struct CreateDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupId", required: false, type: .string)
        ]
        /// A unique deployment group ID.
        public let deploymentGroupId: String?

        public init(deploymentGroupId: String? = nil) {
            self.deploymentGroupId = deploymentGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupId = "deploymentGroupId"
        }
    }

    public struct TrafficRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "listenerArns", required: false, type: .list)
        ]
        ///  The ARN of one listener. The listener identifies the route between a target group and a load balancer. This is an array of strings with a maximum size of one. 
        public let listenerArns: [String]?

        public init(listenerArns: [String]? = nil) {
            self.listenerArns = listenerArns
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArns = "listenerArns"
        }
    }

    public struct GetDeploymentTargetOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentTarget", required: false, type: .structure)
        ]
        ///  A deployment target that contains information about a deployment such as its status, lifecyle events, and when it was updated last. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (instanceTarget, lambdaTarget, or ecsTarget). 
        public let deploymentTarget: DeploymentTarget?

        public init(deploymentTarget: DeploymentTarget? = nil) {
            self.deploymentTarget = deploymentTarget
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentTarget = "deploymentTarget"
        }
    }

    public struct StopDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoRollbackEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        ///  Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision. 
        public let autoRollbackEnabled: Bool?
        ///  The unique ID of a deployment. 
        public let deploymentId: String

        public init(autoRollbackEnabled: Bool? = nil, deploymentId: String) {
            self.autoRollbackEnabled = autoRollbackEnabled
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case autoRollbackEnabled = "autoRollbackEnabled"
            case deploymentId = "deploymentId"
        }
    }

    public struct ListDeploymentConfigsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfigsList", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
        public let nextToken: String?
        /// A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
        public let deploymentConfigsList: [String]?

        public init(nextToken: String? = nil, deploymentConfigsList: [String]? = nil) {
            self.nextToken = nextToken
            self.deploymentConfigsList = deploymentConfigsList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case deploymentConfigsList = "deploymentConfigsList"
        }
    }

    public enum TagFilterType: String, CustomStringConvertible, Codable {
        case keyOnly = "KEY_ONLY"
        case valueOnly = "VALUE_ONLY"
        case keyAndValue = "KEY_AND_VALUE"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        ///  The unique ID of a deployment. 
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The on-premises instance tag filter key.
        public let key: String?
        /// The on-premises instance tag filter value.
        public let value: String?
        /// The on-premises instance tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        public let `type`: TagFilterType?

        public init(key: String? = nil, value: String? = nil, type: TagFilterType? = nil) {
            self.key = key
            self.value = value
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case `type` = "Type"
        }
    }

    public enum TargetLabel: String, CustomStringConvertible, Codable {
        case blue = "Blue"
        case green = "Green"
        public var description: String { return self.rawValue }
    }

    public struct AutoScalingGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hook", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// An Auto Scaling lifecycle event hook name.
        public let hook: String?
        /// The Auto Scaling group name.
        public let name: String?

        public init(hook: String? = nil, name: String? = nil) {
            self.hook = hook
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case hook = "hook"
            case name = "name"
        }
    }

    public enum RevisionLocationType: String, CustomStringConvertible, Codable {
        case s3 = "S3"
        case github = "GitHub"
        case string = "String"
        case appspeccontent = "AppSpecContent"
        public var description: String { return self.rawValue }
    }

    public enum StopStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hooksNotCleanedUp", required: false, type: .list)
        ]
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account.
        public let hooksNotCleanedUp: [AutoScalingGroup]?

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

        private enum CodingKeys: String, CodingKey {
            case hooksNotCleanedUp = "hooksNotCleanedUp"
        }
    }

    public struct DeploymentOverview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InProgress", required: false, type: .long), 
            AWSShapeMember(label: "Skipped", required: false, type: .long), 
            AWSShapeMember(label: "Failed", required: false, type: .long), 
            AWSShapeMember(label: "Ready", required: false, type: .long), 
            AWSShapeMember(label: "Succeeded", required: false, type: .long), 
            AWSShapeMember(label: "Pending", required: false, type: .long)
        ]
        /// The number of instances in which the deployment is in progress.
        public let inProgress: Int64?
        /// The number of instances in the deployment in a skipped state.
        public let skipped: Int64?
        /// The number of instances in the deployment in a failed state.
        public let failed: Int64?
        /// The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
        public let ready: Int64?
        /// The number of instances in the deployment to which revisions have been successfully deployed.
        public let succeeded: Int64?
        /// The number of instances in the deployment in a pending state.
        public let pending: Int64?

        public init(inProgress: Int64? = nil, skipped: Int64? = nil, failed: Int64? = nil, ready: Int64? = nil, succeeded: Int64? = nil, pending: Int64? = nil) {
            self.inProgress = inProgress
            self.skipped = skipped
            self.failed = failed
            self.ready = ready
            self.succeeded = succeeded
            self.pending = pending
        }

        private enum CodingKeys: String, CodingKey {
            case inProgress = "InProgress"
            case skipped = "Skipped"
            case failed = "Failed"
            case ready = "Ready"
            case succeeded = "Succeeded"
            case pending = "Pending"
        }
    }

    public struct BatchGetDeploymentInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceIds", required: true, type: .list), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        /// The unique IDs of instances of the deployment.
        public let instanceIds: [String]
        ///  The unique ID of a deployment. 
        public let deploymentId: String

        public init(instanceIds: [String], deploymentId: String) {
            self.instanceIds = instanceIds
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "instanceIds"
            case deploymentId = "deploymentId"
        }
    }

    public struct ECSService: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clusterName", required: false, type: .string), 
            AWSShapeMember(label: "serviceName", required: false, type: .string)
        ]
        ///  The name of the cluster that the ECS service is associated with. 
        public let clusterName: String?
        ///  The name of the target ECS service. 
        public let serviceName: String?

        public init(clusterName: String? = nil, serviceName: String? = nil) {
            self.clusterName = clusterName
            self.serviceName = serviceName
        }

        private enum CodingKeys: String, CodingKey {
            case clusterName = "clusterName"
            case serviceName = "serviceName"
        }
    }

    public struct InvalidTargetException: AWSShape {

    }

    public struct AutoRollbackConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean)
        ]
        /// The event type or types that trigger a rollback.
        public let events: [AutoRollbackEvent]?
        /// Indicates whether a defined automatic rollback configuration is currently enabled.
        public let enabled: Bool?

        public init(events: [AutoRollbackEvent]? = nil, enabled: Bool? = nil) {
            self.events = events
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
            case enabled = "enabled"
        }
    }

    public enum ComputePlatform: String, CustomStringConvertible, Codable {
        case server = "Server"
        case lambda = "Lambda"
        case ecs = "ECS"
        public var description: String { return self.rawValue }
    }

    public struct BlueGreenDeploymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "greenFleetProvisioningOption", required: false, type: .structure), 
            AWSShapeMember(label: "terminateBlueInstancesOnDeploymentSuccess", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentReadyOption", required: false, type: .structure)
        ]
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment.
        public let greenFleetProvisioningOption: GreenFleetProvisioningOption?
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment.
        public let terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption?
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        public let deploymentReadyOption: DeploymentReadyOption?

        public init(greenFleetProvisioningOption: GreenFleetProvisioningOption? = nil, terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption? = nil, deploymentReadyOption: DeploymentReadyOption? = nil) {
            self.greenFleetProvisioningOption = greenFleetProvisioningOption
            self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
            self.deploymentReadyOption = deploymentReadyOption
        }

        private enum CodingKeys: String, CodingKey {
            case greenFleetProvisioningOption = "greenFleetProvisioningOption"
            case terminateBlueInstancesOnDeploymentSuccess = "terminateBlueInstancesOnDeploymentSuccess"
            case deploymentReadyOption = "deploymentReadyOption"
        }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case blue = "Blue"
        case green = "Green"
        public var description: String { return self.rawValue }
    }

    public struct ListApplicationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct MinimumHealthyHosts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: false, type: .integer), 
            AWSShapeMember(label: "type", required: false, type: .enum)
        ]
        /// The minimum healthy instance value.
        public let value: Int32?
        /// The minimum healthy instance type:   HOST_COUNT: The minimum number of healthy instance as an absolute value.   FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.   In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment will be successful if six or more instances are deployed to successfully; otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment will be successful if four or more instance are deployed to successfully; otherwise, the deployment fails.  In a call to the get deployment configuration operation, CodeDeployDefault.OneAtATime will return a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy will try to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment still succeeds.  For more information, see AWS CodeDeploy Instance Health in the AWS CodeDeploy User Guide.
        public let `type`: MinimumHealthyHostsType?

        public init(value: Int32? = nil, type: MinimumHealthyHostsType? = nil) {
            self.value = value
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
            case `type` = "type"
        }
    }

    public struct GetDeploymentConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: true, type: .string)
        ]
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        public let deploymentConfigName: String

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
        }
    }

    public struct PutLifecycleEventHookExecutionStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "lifecycleEventHookExecutionId", required: false, type: .string)
        ]
        /// The result of a Lambda function that validates a deployment lifecycle event (Succeeded or Failed).
        public let status: LifecycleEventStatus?
        ///  The unique ID of a deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event. 
        public let deploymentId: String?
        ///  The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is specified in the hooks section of the AppSpec file. 
        public let lifecycleEventHookExecutionId: String?

        public init(status: LifecycleEventStatus? = nil, deploymentId: String? = nil, lifecycleEventHookExecutionId: String? = nil) {
            self.status = status
            self.deploymentId = deploymentId
            self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case deploymentId = "deploymentId"
            case lifecycleEventHookExecutionId = "lifecycleEventHookExecutionId"
        }
    }

    public struct GetApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
        }
    }

    public enum TriggerEventType: String, CustomStringConvertible, Codable {
        case deploymentstart = "DeploymentStart"
        case deploymentsuccess = "DeploymentSuccess"
        case deploymentfailure = "DeploymentFailure"
        case deploymentstop = "DeploymentStop"
        case deploymentrollback = "DeploymentRollback"
        case deploymentready = "DeploymentReady"
        case instancestart = "InstanceStart"
        case instancesuccess = "InstanceSuccess"
        case instancefailure = "InstanceFailure"
        case instanceready = "InstanceReady"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serviceRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "deploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "alarmConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "ecsServices", required: false, type: .list), 
            AWSShapeMember(label: "triggerConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesInstanceTagFilters", required: false, type: .list), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "ec2TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesTagSet", required: false, type: .structure), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string)
        ]
        /// A service role ARN that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
        public let serviceRoleArn: String
        /// The name of a new deployment group for the specified application.
        public let deploymentGroupName: String
        /// Information to add about Amazon CloudWatch alarms when the deployment group is created.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        ///  The target ECS services in the deployment group. This only applies to deployment groups that use the Amazon ECS compute platform. A target ECS service is specified as an Amazon ECS cluster and service name pair using the format &lt;clustername&gt;:&lt;servicename&gt;. 
        public let ecsServices: [ECSService]?
        /// Information about triggers to create when the deployment group is created. For examples, see Create a Trigger for an AWS CodeDeploy Event in the AWS CodeDeploy User Guide.
        public let triggerConfigurations: [TriggerConfig]?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String
        /// Information about groups of tags applied to EC2 instances. The deployment group will include only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
        public let ec2TagSet: EC2TagSet?
        /// The on-premises instance tags on which to filter. The deployment group will include on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// Information about the load balancer used in a deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// The Amazon EC2 tags on which to filter. The deployment group will include EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Configuration information for an automatic rollback that is added when a deployment group is created.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// Information about groups of tags applied to on-premises instances. The deployment group will include only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        public let onPremisesTagSet: OnPremisesTagSet?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// A list of associated Auto Scaling groups.
        public let autoScalingGroups: [String]?
        /// If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or the deployment group. For more information about the predefined deployment configurations in AWS CodeDeploy, see Working with Deployment Groups in AWS CodeDeploy in the AWS CodeDeploy User Guide.
        public let deploymentConfigName: String?

        public init(serviceRoleArn: String, deploymentGroupName: String, alarmConfiguration: AlarmConfiguration? = nil, deploymentStyle: DeploymentStyle? = nil, ecsServices: [ECSService]? = nil, triggerConfigurations: [TriggerConfig]? = nil, applicationName: String, ec2TagSet: EC2TagSet? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, onPremisesTagSet: OnPremisesTagSet? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.deploymentGroupName = deploymentGroupName
            self.alarmConfiguration = alarmConfiguration
            self.deploymentStyle = deploymentStyle
            self.ecsServices = ecsServices
            self.triggerConfigurations = triggerConfigurations
            self.applicationName = applicationName
            self.ec2TagSet = ec2TagSet
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.loadBalancerInfo = loadBalancerInfo
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.onPremisesTagSet = onPremisesTagSet
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRoleArn = "serviceRoleArn"
            case deploymentGroupName = "deploymentGroupName"
            case alarmConfiguration = "alarmConfiguration"
            case deploymentStyle = "deploymentStyle"
            case ecsServices = "ecsServices"
            case triggerConfigurations = "triggerConfigurations"
            case applicationName = "applicationName"
            case ec2TagSet = "ec2TagSet"
            case onPremisesInstanceTagFilters = "onPremisesInstanceTagFilters"
            case loadBalancerInfo = "loadBalancerInfo"
            case ec2TagFilters = "ec2TagFilters"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case onPremisesTagSet = "onPremisesTagSet"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case autoScalingGroups = "autoScalingGroups"
            case deploymentConfigName = "deploymentConfigName"
        }
    }

    public struct GetApplicationRevisionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revision", required: false, type: .structure), 
            AWSShapeMember(label: "revisionInfo", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// Additional information about the revision, including type and location.
        public let revision: RevisionLocation?
        /// General information about the revision.
        public let revisionInfo: GenericRevisionInfo?
        /// The name of the application that corresponds to the revision.
        public let applicationName: String?

        public init(revision: RevisionLocation? = nil, revisionInfo: GenericRevisionInfo? = nil, applicationName: String? = nil) {
            self.revision = revision
            self.revisionInfo = revisionInfo
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revision = "revision"
            case revisionInfo = "revisionInfo"
            case applicationName = "applicationName"
        }
    }

    public struct ListApplicationRevisionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "revisions", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier will also be returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
        public let nextToken: String?
        /// A list of locations that contain the matching revisions.
        public let revisions: [RevisionLocation]?

        public init(nextToken: String? = nil, revisions: [RevisionLocation]? = nil) {
            self.nextToken = nextToken
            self.revisions = revisions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case revisions = "revisions"
        }
    }

    public struct InvalidInstanceIdException: AWSShape {

    }

    public struct RegisterOnPremisesInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "iamUserArn", required: false, type: .string), 
            AWSShapeMember(label: "iamSessionArn", required: false, type: .string)
        ]
        /// The name of the on-premises instance to register.
        public let instanceName: String
        /// The ARN of the IAM user to associate with the on-premises instance.
        public let iamUserArn: String?
        /// The ARN of the IAM session to associate with the on-premises instance.
        public let iamSessionArn: String?

        public init(instanceName: String, iamUserArn: String? = nil, iamSessionArn: String? = nil) {
            self.instanceName = instanceName
            self.iamUserArn = iamUserArn
            self.iamSessionArn = iamSessionArn
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case iamUserArn = "iamUserArn"
            case iamSessionArn = "iamSessionArn"
        }
    }

    public struct TargetInstances: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "tagFilters", required: false, type: .list)
        ]
        /// The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        public let autoScalingGroups: [String]?
        /// Information about the groups of EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as tagFilters.
        public let ec2TagSet: EC2TagSet?
        /// The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as ec2TagSet.
        public let tagFilters: [EC2TagFilter]?

        public init(autoScalingGroups: [String]? = nil, ec2TagSet: EC2TagSet? = nil, tagFilters: [EC2TagFilter]? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.ec2TagSet = ec2TagSet
            self.tagFilters = tagFilters
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroups = "autoScalingGroups"
            case ec2TagSet = "ec2TagSet"
            case tagFilters = "tagFilters"
        }
    }

    public struct GetDeploymentTargetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "targetId", required: false, type: .string)
        ]
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        ///  The unique ID of a deployment target. 
        public let targetId: String?

        public init(deploymentId: String? = nil, targetId: String? = nil) {
            self.deploymentId = deploymentId
            self.targetId = targetId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case targetId = "targetId"
        }
    }

    public struct RemoveTagsFromOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The tag key-value pairs to remove from the on-premises instances.
        public let tags: [Tag]
        /// The names of the on-premises instances from which to remove tags.
        public let instanceNames: [String]

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case instanceNames = "instanceNames"
        }
    }

    public struct OnPremisesTagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "onPremisesTagSetList", required: false, type: .list)
        ]
        /// A list containing other lists of on-premises instance tag groups. In order for an instance to be included in the deployment group, it must be identified by all the tag groups in the list.
        public let onPremisesTagSetList: [[TagFilter]]?

        public init(onPremisesTagSetList: [[TagFilter]]? = nil) {
            self.onPremisesTagSetList = onPremisesTagSetList
        }

        private enum CodingKeys: String, CodingKey {
            case onPremisesTagSetList = "onPremisesTagSetList"
        }
    }

    public struct DeleteDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hooksNotCleanedUp", required: false, type: .list)
        ]
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
        public let hooksNotCleanedUp: [AutoScalingGroup]?

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

        private enum CodingKeys: String, CodingKey {
            case hooksNotCleanedUp = "hooksNotCleanedUp"
        }
    }

    public struct DeleteApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
        }
    }

    public struct ListGitHubAccountTokenNamesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "tokenNameList", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent ListGitHubAccountTokenNames call to return the next set of names in the list. 
        public let nextToken: String?
        /// A list of names of connections to GitHub accounts.
        public let tokenNameList: [String]?

        public init(nextToken: String? = nil, tokenNameList: [String]? = nil) {
            self.nextToken = nextToken
            self.tokenNameList = tokenNameList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tokenNameList = "tokenNameList"
        }
    }

    public struct RawString: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sha256", required: false, type: .string), 
            AWSShapeMember(label: "content", required: false, type: .string)
        ]
        /// The SHA256 hash value of the revision content.
        public let sha256: String?
        /// The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events.
        public let content: String?

        public init(sha256: String? = nil, content: String? = nil) {
            self.sha256 = sha256
            self.content = content
        }

        private enum CodingKeys: String, CodingKey {
            case sha256 = "sha256"
            case content = "content"
        }
    }

    public struct GetApplicationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: false, type: .structure)
        ]
        /// Information about the application.
        public let application: ApplicationInfo?

        public init(application: ApplicationInfo? = nil) {
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
        }
    }

    public struct TimeBasedCanary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "canaryInterval", required: false, type: .integer), 
            AWSShapeMember(label: "canaryPercentage", required: false, type: .integer)
        ]
        /// The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.
        public let canaryInterval: Int32?
        /// The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.
        public let canaryPercentage: Int32?

        public init(canaryInterval: Int32? = nil, canaryPercentage: Int32? = nil) {
            self.canaryInterval = canaryInterval
            self.canaryPercentage = canaryPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case canaryInterval = "canaryInterval"
            case canaryPercentage = "canaryPercentage"
        }
    }

    public struct Alarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct GenericRevisionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUsedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "deploymentGroups", required: false, type: .list), 
            AWSShapeMember(label: "firstUsedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "registerTime", required: false, type: .timestamp)
        ]
        /// When the revision was last used by AWS CodeDeploy.
        public let lastUsedTime: TimeStamp?
        /// A comment about the revision.
        public let description: String?
        /// The deployment groups for which this is the current target revision.
        public let deploymentGroups: [String]?
        /// When the revision was first used by AWS CodeDeploy.
        public let firstUsedTime: TimeStamp?
        /// When the revision was registered with AWS CodeDeploy.
        public let registerTime: TimeStamp?

        public init(lastUsedTime: TimeStamp? = nil, description: String? = nil, deploymentGroups: [String]? = nil, firstUsedTime: TimeStamp? = nil, registerTime: TimeStamp? = nil) {
            self.lastUsedTime = lastUsedTime
            self.description = description
            self.deploymentGroups = deploymentGroups
            self.firstUsedTime = firstUsedTime
            self.registerTime = registerTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastUsedTime = "lastUsedTime"
            case description = "description"
            case deploymentGroups = "deploymentGroups"
            case firstUsedTime = "firstUsedTime"
            case registerTime = "registerTime"
        }
    }

    public struct ListDeploymentTargetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "targetFilters", required: false, type: .map)
        ]
        ///  A token identifier returned from the previous ListDeploymentTargets call. It can be used to return the next set of deployment targets in the list. 
        public let nextToken: String?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        ///  A key used to filter the returned targets. 
        public let targetFilters: [TargetFilterName: [String]]?

        public init(nextToken: String? = nil, deploymentId: String? = nil, targetFilters: [TargetFilterName: [String]]? = nil) {
            self.nextToken = nextToken
            self.deploymentId = deploymentId
            self.targetFilters = targetFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case deploymentId = "deploymentId"
            case targetFilters = "targetFilters"
        }
    }

    public struct TimeBasedLinear: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "linearPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "linearInterval", required: false, type: .integer)
        ]
        /// The percentage of traffic that is shifted at the start of each increment of a TimeBasedLinear deployment.
        public let linearPercentage: Int32?
        /// The number of minutes between each incremental traffic shift of a TimeBasedLinear deployment.
        public let linearInterval: Int32?

        public init(linearPercentage: Int32? = nil, linearInterval: Int32? = nil) {
            self.linearPercentage = linearPercentage
            self.linearInterval = linearInterval
        }

        private enum CodingKeys: String, CodingKey {
            case linearPercentage = "linearPercentage"
            case linearInterval = "linearInterval"
        }
    }

    public enum RegistrationStatus: String, CustomStringConvertible, Codable {
        case registered = "Registered"
        case deregistered = "Deregistered"
        public var description: String { return self.rawValue }
    }

    public struct DeleteGitHubAccountTokenInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tokenName", required: false, type: .string)
        ]
        /// The name of the GitHub account connection to delete.
        public let tokenName: String?

        public init(tokenName: String? = nil) {
            self.tokenName = tokenName
        }

        private enum CodingKeys: String, CodingKey {
            case tokenName = "tokenName"
        }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case deploymentGroupMissing = "DEPLOYMENT_GROUP_MISSING"
        case applicationMissing = "APPLICATION_MISSING"
        case revisionMissing = "REVISION_MISSING"
        case iamRoleMissing = "IAM_ROLE_MISSING"
        case iamRolePermissions = "IAM_ROLE_PERMISSIONS"
        case noEc2Subscription = "NO_EC2_SUBSCRIPTION"
        case overMaxInstances = "OVER_MAX_INSTANCES"
        case noInstances = "NO_INSTANCES"
        case timeout = "TIMEOUT"
        case healthConstraintsInvalid = "HEALTH_CONSTRAINTS_INVALID"
        case healthConstraints = "HEALTH_CONSTRAINTS"
        case internalError = "INTERNAL_ERROR"
        case throttled = "THROTTLED"
        case alarmActive = "ALARM_ACTIVE"
        case agentIssue = "AGENT_ISSUE"
        case autoScalingIamRolePermissions = "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
        case autoScalingConfiguration = "AUTO_SCALING_CONFIGURATION"
        case manualStop = "MANUAL_STOP"
        case missingBlueGreenDeploymentConfiguration = "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
        case missingElbInformation = "MISSING_ELB_INFORMATION"
        case missingGithubToken = "MISSING_GITHUB_TOKEN"
        case elasticLoadBalancingInvalid = "ELASTIC_LOAD_BALANCING_INVALID"
        case elbInvalidInstance = "ELB_INVALID_INSTANCE"
        case invalidLambdaConfiguration = "INVALID_LAMBDA_CONFIGURATION"
        case invalidLambdaFunction = "INVALID_LAMBDA_FUNCTION"
        case hookExecutionFailure = "HOOK_EXECUTION_FAILURE"
        case autoscalingValidationError = "AUTOSCALING_VALIDATION_ERROR"
        case invalidEcsService = "INVALID_ECS_SERVICE"
        case ecsUpdateError = "ECS_UPDATE_ERROR"
        case invalidRevision = "INVALID_REVISION"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetOnPremisesInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceInfos", required: false, type: .list)
        ]
        /// Information about the on-premises instances.
        public let instanceInfos: [InstanceInfo]?

        public init(instanceInfos: [InstanceInfo]? = nil) {
            self.instanceInfos = instanceInfos
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInfos = "instanceInfos"
        }
    }

    public struct GetOnPremisesInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        ///  The name of the on-premises instance about which to get information. 
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct DeploymentInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "deploymentOverview", required: false, type: .structure), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "instanceTerminationWaitTimeStarted", required: false, type: .boolean), 
            AWSShapeMember(label: "completeTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "creator", required: false, type: .enum), 
            AWSShapeMember(label: "previousRevision", required: false, type: .structure), 
            AWSShapeMember(label: "revision", required: false, type: .structure), 
            AWSShapeMember(label: "rollbackInfo", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentStatusMessages", required: false, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "targetInstances", required: false, type: .structure), 
            AWSShapeMember(label: "additionalDeploymentStatusInfo", required: false, type: .string), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "ignoreApplicationStopFailures", required: false, type: .boolean), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "fileExistsBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "errorInformation", required: false, type: .structure), 
            AWSShapeMember(label: "updateOutdatedInstancesOnly", required: false, type: .boolean)
        ]
        /// The application name.
        public let applicationName: String?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        ///  The deployment group name. 
        public let deploymentGroupName: String?
        /// A summary of the deployment status of the instances in the deployment.
        public let deploymentOverview: DeploymentOverview?
        /// The current state of the deployment as a whole.
        public let status: DeploymentStatus?
        ///  The destination platform type for the deployment (Lambda or Server). 
        public let computePlatform: ComputePlatform?
        /// Information about the automatic rollback configuration associated with the deployment.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// A timestamp indicating when the deployment was deployed to the deployment group. In some cases, the reported value of the start time may be later than the complete time. This is due to differences in the clock settings of back-end servers that participate in the deployment process.
        public let startTime: TimeStamp?
        /// Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified; otherwise, 'true' as soon as the termination wait period starts.
        public let instanceTerminationWaitTimeStarted: Bool?
        /// A timestamp indicating when the deployment was complete.
        public let completeTime: TimeStamp?
        /// The means by which the deployment was created:   user: A user created the deployment.   autoscaling: Auto Scaling created the deployment.   codeDeployRollback: A rollback process created the deployment.  
        public let creator: DeploymentCreator?
        /// Information about the application revision that was deployed to the deployment group before the most recent successful deployment.
        public let previousRevision: RevisionLocation?
        /// Information about the location of stored application artifacts and the service from which to retrieve them.
        public let revision: RevisionLocation?
        /// Information about a deployment rollback.
        public let rollbackInfo: RollbackInfo?
        /// Messages that contain information about the status of a deployment.
        public let deploymentStatusMessages: [String]?
        /// A comment about the deployment.
        public let description: String?
        /// Information about the load balancer used in the deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// Information about the instances that belong to the replacement environment in a blue/green deployment.
        public let targetInstances: TargetInstances?
        /// Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
        public let additionalDeploymentStatusInfo: String?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?
        /// If true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        public let ignoreApplicationStopFailures: Bool?
        /// Information about blue/green deployment options for this deployment.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.   DISALLOW: The deployment fails. This is also the default behavior if no option is specified.   OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.   RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.  
        public let fileExistsBehavior: FileExistsBehavior?
        ///  The deployment configuration name. 
        public let deploymentConfigName: String?
        /// A timestamp indicating when the deployment was created.
        public let createTime: TimeStamp?
        /// Information about any error associated with this deployment.
        public let errorInformation: ErrorInformation?
        /// Indicates whether only instances that are not running the latest application revision are to be deployed to.
        public let updateOutdatedInstancesOnly: Bool?

        public init(applicationName: String? = nil, deploymentStyle: DeploymentStyle? = nil, deploymentGroupName: String? = nil, deploymentOverview: DeploymentOverview? = nil, status: DeploymentStatus? = nil, computePlatform: ComputePlatform? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, startTime: TimeStamp? = nil, instanceTerminationWaitTimeStarted: Bool? = nil, completeTime: TimeStamp? = nil, creator: DeploymentCreator? = nil, previousRevision: RevisionLocation? = nil, revision: RevisionLocation? = nil, rollbackInfo: RollbackInfo? = nil, deploymentStatusMessages: [String]? = nil, description: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, targetInstances: TargetInstances? = nil, additionalDeploymentStatusInfo: String? = nil, deploymentId: String? = nil, ignoreApplicationStopFailures: Bool? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, fileExistsBehavior: FileExistsBehavior? = nil, deploymentConfigName: String? = nil, createTime: TimeStamp? = nil, errorInformation: ErrorInformation? = nil, updateOutdatedInstancesOnly: Bool? = nil) {
            self.applicationName = applicationName
            self.deploymentStyle = deploymentStyle
            self.deploymentGroupName = deploymentGroupName
            self.deploymentOverview = deploymentOverview
            self.status = status
            self.computePlatform = computePlatform
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.startTime = startTime
            self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
            self.completeTime = completeTime
            self.creator = creator
            self.previousRevision = previousRevision
            self.revision = revision
            self.rollbackInfo = rollbackInfo
            self.deploymentStatusMessages = deploymentStatusMessages
            self.description = description
            self.loadBalancerInfo = loadBalancerInfo
            self.targetInstances = targetInstances
            self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
            self.deploymentId = deploymentId
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.fileExistsBehavior = fileExistsBehavior
            self.deploymentConfigName = deploymentConfigName
            self.createTime = createTime
            self.errorInformation = errorInformation
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
            case deploymentStyle = "deploymentStyle"
            case deploymentGroupName = "deploymentGroupName"
            case deploymentOverview = "deploymentOverview"
            case status = "status"
            case computePlatform = "computePlatform"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case startTime = "startTime"
            case instanceTerminationWaitTimeStarted = "instanceTerminationWaitTimeStarted"
            case completeTime = "completeTime"
            case creator = "creator"
            case previousRevision = "previousRevision"
            case revision = "revision"
            case rollbackInfo = "rollbackInfo"
            case deploymentStatusMessages = "deploymentStatusMessages"
            case description = "description"
            case loadBalancerInfo = "loadBalancerInfo"
            case targetInstances = "targetInstances"
            case additionalDeploymentStatusInfo = "additionalDeploymentStatusInfo"
            case deploymentId = "deploymentId"
            case ignoreApplicationStopFailures = "ignoreApplicationStopFailures"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case fileExistsBehavior = "fileExistsBehavior"
            case deploymentConfigName = "deploymentConfigName"
            case createTime = "createTime"
            case errorInformation = "errorInformation"
            case updateOutdatedInstancesOnly = "updateOutdatedInstancesOnly"
        }
    }

    public struct BlueInstanceTerminationOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", required: false, type: .enum), 
            AWSShapeMember(label: "terminationWaitTimeInMinutes", required: false, type: .integer)
        ]
        /// The action to take on instances in the original environment after a successful blue/green deployment.   TERMINATE: Instances are terminated after a specified wait time.   KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.  
        public let action: InstanceAction?
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment. The maximum setting is 2880 minutes (2 days).
        public let terminationWaitTimeInMinutes: Int32?

        public init(action: InstanceAction? = nil, terminationWaitTimeInMinutes: Int32? = nil) {
            self.action = action
            self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case terminationWaitTimeInMinutes = "terminationWaitTimeInMinutes"
        }
    }

    public struct InstanceTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetId", required: false, type: .string), 
            AWSShapeMember(label: "targetArn", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "lifecycleEvents", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "instanceLabel", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        ///  The unique ID of a deployment target that has a type of instanceTarget. 
        public let targetId: String?
        ///  The ARN of the target. 
        public let targetArn: String?
        ///  The date and time when the target instance was updated by a deployment. 
        public let lastUpdatedAt: TimeStamp?
        ///  The lifecycle events of the deployment to this target instance. 
        public let lifecycleEvents: [LifecycleEvent]?
        ///  The status an EC2/On-premises deployment's target instance. 
        public let status: TargetStatus?
        ///  A label that identifies whether the instance is an original target (BLUE) or a replacement target (GREEN). 
        public let instanceLabel: TargetLabel?
        ///  The unique ID of a deployment. 
        public let deploymentId: String?

        public init(targetId: String? = nil, targetArn: String? = nil, lastUpdatedAt: TimeStamp? = nil, lifecycleEvents: [LifecycleEvent]? = nil, status: TargetStatus? = nil, instanceLabel: TargetLabel? = nil, deploymentId: String? = nil) {
            self.targetId = targetId
            self.targetArn = targetArn
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.instanceLabel = instanceLabel
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case targetId = "targetId"
            case targetArn = "targetArn"
            case lastUpdatedAt = "lastUpdatedAt"
            case lifecycleEvents = "lifecycleEvents"
            case status = "status"
            case instanceLabel = "instanceLabel"
            case deploymentId = "deploymentId"
        }
    }

    public struct ListDeploymentGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
        public let nextToken: String?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(nextToken: String? = nil, applicationName: String) {
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case applicationName = "applicationName"
        }
    }

    public struct CreateApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum)
        ]
        /// The name of the application. This name must be unique with the applicable IAM user or AWS account.
        public let applicationName: String
        ///  The destination platform type for the deployment (Lambda or Server).
        public let computePlatform: ComputePlatform?

        public init(applicationName: String, computePlatform: ComputePlatform? = nil) {
            self.applicationName = applicationName
            self.computePlatform = computePlatform
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
            case computePlatform = "computePlatform"
        }
    }

    public struct EC2TagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ec2TagSetList", required: false, type: .list)
        ]
        /// A list containing other lists of EC2 instance tag groups. In order for an instance to be included in the deployment group, it must be identified by all the tag groups in the list.
        public let ec2TagSetList: [[EC2TagFilter]]?

        public init(ec2TagSetList: [[EC2TagFilter]]? = nil) {
            self.ec2TagSetList = ec2TagSetList
        }

        private enum CodingKeys: String, CodingKey {
            case ec2TagSetList = "ec2TagSetList"
        }
    }

    public struct BatchGetApplicationRevisionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revisions", required: true, type: .list), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// Information to get about the application revisions, including type and location.
        public let revisions: [RevisionLocation]
        /// The name of an AWS CodeDeploy application about which to get revision information.
        public let applicationName: String

        public init(revisions: [RevisionLocation], applicationName: String) {
            self.revisions = revisions
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revisions = "revisions"
            case applicationName = "applicationName"
        }
    }

    public enum BundleType: String, CustomStringConvertible, Codable {
        case tar = "tar"
        case tgz = "tgz"
        case zip = "zip"
        case yaml = "YAML"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct RollbackInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rollbackMessage", required: false, type: .string), 
            AWSShapeMember(label: "rollbackTriggeringDeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "rollbackDeploymentId", required: false, type: .string)
        ]
        /// Information describing the status of a deployment rollback; for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded. 
        public let rollbackMessage: String?
        /// The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        public let rollbackTriggeringDeploymentId: String?
        /// The ID of the deployment rollback.
        public let rollbackDeploymentId: String?

        public init(rollbackMessage: String? = nil, rollbackTriggeringDeploymentId: String? = nil, rollbackDeploymentId: String? = nil) {
            self.rollbackMessage = rollbackMessage
            self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
            self.rollbackDeploymentId = rollbackDeploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case rollbackMessage = "rollbackMessage"
            case rollbackTriggeringDeploymentId = "rollbackTriggeringDeploymentId"
            case rollbackDeploymentId = "rollbackDeploymentId"
        }
    }

    public struct AddTagsToOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The tag key-value pairs to add to the on-premises instances. Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.
        public let tags: [Tag]
        /// The names of the on-premises instances to which to add tags.
        public let instanceNames: [String]

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case instanceNames = "instanceNames"
        }
    }

    public struct AppSpecContent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sha256", required: false, type: .string), 
            AWSShapeMember(label: "content", required: false, type: .string)
        ]
        ///  The SHA256 hash value of the revision content. 
        public let sha256: String?
        ///  The YAML-formatted or JSON-formatted revision string.   For an AWS Lambda deployment the content includes a Lambda function name, the alias for its original version, and the alias for its replacement version. The deployment shifts traffic from the original version of the Lambda function to the replacement version.   For an Amazon ECS deployment the content includes the task name, information about the load balancer that serves traffic to the container, and more.   For both types of deployments, the content can specify Lambda functions that run at specified hooks, such as BeforeInstall, during a deployment. 
        public let content: String?

        public init(sha256: String? = nil, content: String? = nil) {
            self.sha256 = sha256
            self.content = content
        }

        private enum CodingKeys: String, CodingKey {
            case sha256 = "sha256"
            case content = "content"
        }
    }

    public enum LifecycleEventStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public enum TargetStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public enum TrafficRoutingType: String, CustomStringConvertible, Codable {
        case timebasedcanary = "TimeBasedCanary"
        case timebasedlinear = "TimeBasedLinear"
        case allatonce = "AllAtOnce"
        public var description: String { return self.rawValue }
    }

    public struct ListDeploymentInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceTypeFilter", required: false, type: .list), 
            AWSShapeMember(label: "instanceStatusFilter", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        /// The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
        public let instanceTypeFilter: [InstanceType]?
        /// A subset of instances to list by status:   Pending: Include those instance with pending deployments.   InProgress: Include those instance where deployments are still in progress.   Succeeded: Include those instances with successful deployments.   Failed: Include those instance with failed deployments.   Skipped: Include those instance with skipped deployments.   Unknown: Include those instance with deployments in an unknown state.  
        public let instanceStatusFilter: [InstanceStatus]?
        /// An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
        public let nextToken: String?
        ///  The unique ID of a deployment. 
        public let deploymentId: String

        public init(instanceTypeFilter: [InstanceType]? = nil, instanceStatusFilter: [InstanceStatus]? = nil, nextToken: String? = nil, deploymentId: String) {
            self.instanceTypeFilter = instanceTypeFilter
            self.instanceStatusFilter = instanceStatusFilter
            self.nextToken = nextToken
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypeFilter = "instanceTypeFilter"
            case instanceStatusFilter = "instanceStatusFilter"
            case nextToken = "nextToken"
            case deploymentId = "deploymentId"
        }
    }

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case created = "Created"
        case queued = "Queued"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case stopped = "Stopped"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public struct GetDeploymentInstanceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSummary", required: false, type: .structure)
        ]
        ///  Information about the instance. 
        public let instanceSummary: InstanceSummary?

        public init(instanceSummary: InstanceSummary? = nil) {
            self.instanceSummary = instanceSummary
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSummary = "instanceSummary"
        }
    }

    public struct Diagnostics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "errorCode", required: false, type: .enum), 
            AWSShapeMember(label: "logTail", required: false, type: .string), 
            AWSShapeMember(label: "scriptName", required: false, type: .string)
        ]
        /// The message associated with the error.
        public let message: String?
        /// The associated error code:   Success: The specified script ran.   ScriptMissing: The specified script was not found in the specified location.   ScriptNotExecutable: The specified script is not a recognized executable file type.   ScriptTimedOut: The specified script did not finish running in the specified time period.   ScriptFailed: The specified script failed to run as expected.   UnknownError: The specified script did not run for an unknown reason.  
        public let errorCode: LifecycleErrorCode?
        /// The last portion of the diagnostic log. If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.
        public let logTail: String?
        /// The name of the script.
        public let scriptName: String?

        public init(message: String? = nil, errorCode: LifecycleErrorCode? = nil, logTail: String? = nil, scriptName: String? = nil) {
            self.message = message
            self.errorCode = errorCode
            self.logTail = logTail
            self.scriptName = scriptName
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case errorCode = "errorCode"
            case logTail = "logTail"
            case scriptName = "scriptName"
        }
    }

    public enum LifecycleErrorCode: String, CustomStringConvertible, Codable {
        case success = "Success"
        case scriptmissing = "ScriptMissing"
        case scriptnotexecutable = "ScriptNotExecutable"
        case scripttimedout = "ScriptTimedOut"
        case scriptfailed = "ScriptFailed"
        case unknownerror = "UnknownError"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetDeploymentGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupNames", required: true, type: .list), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The deployment groups' names.
        public let deploymentGroupNames: [String]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupNames: [String], applicationName: String) {
            self.deploymentGroupNames = deploymentGroupNames
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupNames = "deploymentGroupNames"
            case applicationName = "applicationName"
        }
    }

    public struct DeregisterOnPremisesInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the on-premises instance to deregister.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct BatchGetDeploymentsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentIds", required: true, type: .list)
        ]
        ///  A list of deployment IDs, separated by spaces. 
        public let deploymentIds: [String]

        public init(deploymentIds: [String]) {
            self.deploymentIds = deploymentIds
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentIds = "deploymentIds"
        }
    }

    public enum ApplicationRevisionSortBy: String, CustomStringConvertible, Codable {
        case registertime = "registerTime"
        case firstusedtime = "firstUsedTime"
        case lastusedtime = "lastUsedTime"
        public var description: String { return self.rawValue }
    }

    public enum FileExistsBehavior: String, CustomStringConvertible, Codable {
        case disallow = "DISALLOW"
        case overwrite = "OVERWRITE"
        case retain = "RETAIN"
        public var description: String { return self.rawValue }
    }

    public struct ListDeploymentConfigsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An identifier returned from the previous ListDeploymentConfigs call. It can be used to return the next set of deployment configurations in the list. 
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct BatchGetDeploymentTargetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentTargets", required: false, type: .list)
        ]
        ///  A list of target objects for a deployment. Each target object contains details about the target, such as its status and lifecycle events. The type of the target objects depends on the deployment' compute platform.     EC2/On-premises - Each target object is an EC2 or on-premises instance.     AWS Lambda - The target object is a specific version of an AWS Lambda function.     Amazon ECS - The target object is an Amazon ECS service.   
        public let deploymentTargets: [DeploymentTarget]?

        public init(deploymentTargets: [DeploymentTarget]? = nil) {
            self.deploymentTargets = deploymentTargets
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentTargets = "deploymentTargets"
        }
    }

    public struct ListDeploymentGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroups", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// A list of corresponding deployment group names.
        public let deploymentGroups: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
        public let nextToken: String?
        /// The application name.
        public let applicationName: String?

        public init(deploymentGroups: [String]? = nil, nextToken: String? = nil, applicationName: String? = nil) {
            self.deploymentGroups = deploymentGroups
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroups = "deploymentGroups"
            case nextToken = "nextToken"
            case applicationName = "applicationName"
        }
    }

    public struct ListApplicationRevisionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "sortBy", required: false, type: .enum), 
            AWSShapeMember(label: "s3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "s3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "deployed", required: false, type: .enum)
        ]
        ///  The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account. 
        public let applicationName: String
        ///  The order in which to sort the list results:    ascending: ascending order.   descending: descending order.   If not specified, the results will be sorted in ascending order. If set to null, the results will be sorted in an arbitrary order.
        public let sortOrder: SortOrder?
        /// The column name to use to sort the list results:   registerTime: Sort by the time the revisions were registered with AWS CodeDeploy.   firstUsedTime: Sort by the time the revisions were first used in a deployment.   lastUsedTime: Sort by the time the revisions were last used in a deployment.    If not specified or set to null, the results will be returned in an arbitrary order. 
        public let sortBy: ApplicationRevisionSortBy?
        ///  A key prefix for the set of Amazon S3 objects to limit the search for revisions. 
        public let s3KeyPrefix: String?
        /// An identifier returned from the previous ListApplicationRevisions call. It can be used to return the next set of applications in the list.
        public let nextToken: String?
        ///  An Amazon S3 bucket name to limit the search for revisions.   If set to null, all of the user's buckets are searched. 
        public let s3Bucket: String?
        ///  Whether to list revisions based on whether the revision is the target revision of an deployment group:    include: List revisions that are target revisions of a deployment group.   exclude: Do not list revisions that are target revisions of a deployment group.   ignore: List all revisions.  
        public let deployed: ListStateFilterAction?

        public init(applicationName: String, sortOrder: SortOrder? = nil, sortBy: ApplicationRevisionSortBy? = nil, s3KeyPrefix: String? = nil, nextToken: String? = nil, s3Bucket: String? = nil, deployed: ListStateFilterAction? = nil) {
            self.applicationName = applicationName
            self.sortOrder = sortOrder
            self.sortBy = sortBy
            self.s3KeyPrefix = s3KeyPrefix
            self.nextToken = nextToken
            self.s3Bucket = s3Bucket
            self.deployed = deployed
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
            case sortOrder = "sortOrder"
            case sortBy = "sortBy"
            case s3KeyPrefix = "s3KeyPrefix"
            case nextToken = "nextToken"
            case s3Bucket = "s3Bucket"
            case deployed = "deployed"
        }
    }

    public struct ErrorInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "code", required: false, type: .enum)
        ]
        /// An accompanying error message.
        public let message: String?
        /// For information about additional error codes, see Error Codes for AWS CodeDeploy in the AWS CodeDeploy User Guide. The error code:   APPLICATION_MISSING: The application was missing. This error code will most likely be raised if the application is deleted after the deployment is created but before it is started.   DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code will most likely be raised if the deployment group is deleted after the deployment is created but before it is started.   HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.   HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.   IAM_ROLE_MISSING: The service role cannot be accessed.   IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.   INTERNAL_ERROR: There was an internal error.   NO_EC2_SUBSCRIPTION: The calling account is not subscribed to the Amazon EC2 service.   NO_INSTANCES: No instance were specified, or no instance can be found.   OVER_MAX_INSTANCES: The maximum number of instance was exceeded.   THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.   TIMEOUT: The deployment has timed out.   REVISION_MISSING: The revision ID was missing. This error code will most likely be raised if the revision is deleted after the deployment is created but before it is started.  
        public let code: ErrorCode?

        public init(message: String? = nil, code: ErrorCode? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case code = "code"
        }
    }

    public struct GetDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupInfo", required: false, type: .structure)
        ]
        /// Information about the deployment group.
        public let deploymentGroupInfo: DeploymentGroupInfo?

        public init(deploymentGroupInfo: DeploymentGroupInfo? = nil) {
            self.deploymentGroupInfo = deploymentGroupInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupInfo = "deploymentGroupInfo"
        }
    }

}