// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for Config
public enum ConfigError: AWSErrorType {
    case noSuchDeliveryChannelException(message: String?)
    case invalidParameterValueException(message: String?)
    case invalidNextTokenException(message: String?)
    case maxNumberOfDeliveryChannelsExceededException(message: String?)
    case noAvailableConfigurationRecorderException(message: String?)
    case invalidDeliveryChannelNameException(message: String?)
    case noSuchBucketException(message: String?)
    case invalidS3KeyPrefixException(message: String?)
    case invalidSNSTopicARNException(message: String?)
    case insufficientDeliveryPolicyException(message: String?)
    case noSuchConfigRuleException(message: String?)
    case lastDeliveryChannelDeleteFailedException(message: String?)
    case noRunningConfigurationRecorderException(message: String?)
    case validationException(message: String?)
    case invalidTimeRangeException(message: String?)
    case invalidLimitException(message: String?)
    case resourceNotDiscoveredException(message: String?)
    case maxNumberOfConfigurationRecordersExceededException(message: String?)
    case invalidConfigurationRecorderNameException(message: String?)
    case invalidRoleException(message: String?)
    case invalidRecordingGroupException(message: String?)
    case noSuchConfigurationRecorderException(message: String?)
    case maxNumberOfConfigRulesExceededException(message: String?)
    case resourceInUseException(message: String?)
    case insufficientPermissionsException(message: String?)
    case noAvailableDeliveryChannelException(message: String?)
    case invalidResultTokenException(message: String?)
    case limitExceededException(message: String?)
}

extension ConfigError {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.index(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "NoSuchDeliveryChannelException":
            self = .noSuchDeliveryChannelException(message: message)
        case "InvalidParameterValueException":
            self = .invalidParameterValueException(message: message)
        case "InvalidNextTokenException":
            self = .invalidNextTokenException(message: message)
        case "MaxNumberOfDeliveryChannelsExceededException":
            self = .maxNumberOfDeliveryChannelsExceededException(message: message)
        case "NoAvailableConfigurationRecorderException":
            self = .noAvailableConfigurationRecorderException(message: message)
        case "InvalidDeliveryChannelNameException":
            self = .invalidDeliveryChannelNameException(message: message)
        case "NoSuchBucketException":
            self = .noSuchBucketException(message: message)
        case "InvalidS3KeyPrefixException":
            self = .invalidS3KeyPrefixException(message: message)
        case "InvalidSNSTopicARNException":
            self = .invalidSNSTopicARNException(message: message)
        case "InsufficientDeliveryPolicyException":
            self = .insufficientDeliveryPolicyException(message: message)
        case "NoSuchConfigRuleException":
            self = .noSuchConfigRuleException(message: message)
        case "LastDeliveryChannelDeleteFailedException":
            self = .lastDeliveryChannelDeleteFailedException(message: message)
        case "NoRunningConfigurationRecorderException":
            self = .noRunningConfigurationRecorderException(message: message)
        case "ValidationException":
            self = .validationException(message: message)
        case "InvalidTimeRangeException":
            self = .invalidTimeRangeException(message: message)
        case "InvalidLimitException":
            self = .invalidLimitException(message: message)
        case "ResourceNotDiscoveredException":
            self = .resourceNotDiscoveredException(message: message)
        case "MaxNumberOfConfigurationRecordersExceededException":
            self = .maxNumberOfConfigurationRecordersExceededException(message: message)
        case "InvalidConfigurationRecorderNameException":
            self = .invalidConfigurationRecorderNameException(message: message)
        case "InvalidRoleException":
            self = .invalidRoleException(message: message)
        case "InvalidRecordingGroupException":
            self = .invalidRecordingGroupException(message: message)
        case "NoSuchConfigurationRecorderException":
            self = .noSuchConfigurationRecorderException(message: message)
        case "MaxNumberOfConfigRulesExceededException":
            self = .maxNumberOfConfigRulesExceededException(message: message)
        case "ResourceInUseException":
            self = .resourceInUseException(message: message)
        case "InsufficientPermissionsException":
            self = .insufficientPermissionsException(message: message)
        case "NoAvailableDeliveryChannelException":
            self = .noAvailableDeliveryChannelException(message: message)
        case "InvalidResultTokenException":
            self = .invalidResultTokenException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        default:
            return nil
        }
    }
}