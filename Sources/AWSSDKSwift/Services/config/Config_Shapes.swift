// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Config {

    public struct ConfigStreamDeliveryInfo: Serializable, Initializable {
        /// The error message from the last attempted delivery.
        var lastErrorMessage: String? = nil
        /// The error code from the last attempted delivery.
        var lastErrorCode: String? = nil
        /// Status of the last attempted delivery.  Note Providing an SNS topic on a DeliveryChannel for AWS Config is optional. If the SNS delivery is turned off, the last status will be Not_Applicable.
        var lastStatus: String? = nil
        /// The time from the last status change.
        var lastStatusChangeTime: Date? = nil

        public init() {}

        public init(lastErrorMessage: String? = nil, lastErrorCode: String? = nil, lastStatus: String? = nil, lastStatusChangeTime: Date? = nil) {
            self.lastErrorMessage = lastErrorMessage
            self.lastErrorCode = lastErrorCode
            self.lastStatus = lastStatus
            self.lastStatusChangeTime = lastStatusChangeTime
        }

    }

    public struct GetComplianceDetailsByConfigRuleResponse: Serializable, Initializable {
        /// Indicates whether the AWS resource complies with the specified AWS Config rule.
        var evaluationResults: [EvaluationResult]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(evaluationResults: [EvaluationResult]? = nil, nextToken: String? = nil) {
            self.evaluationResults = evaluationResults
            self.nextToken = nextToken
        }

    }

    public struct GetComplianceDetailsByResourceResponse: Serializable, Initializable {
        /// Indicates whether the specified AWS resource complies each AWS Config rule.
        var evaluationResults: [EvaluationResult]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(evaluationResults: [EvaluationResult]? = nil, nextToken: String? = nil) {
            self.evaluationResults = evaluationResults
            self.nextToken = nextToken
        }

    }

    public struct Source: Serializable, Initializable {
        /// Indicates whether AWS or the customer owns and manages the AWS Config rule.
        var owner: String = ""
        /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources.
        var sourceDetails: [SourceDetail]? = nil
        /// For AWS Config managed rules, a predefined identifier from a list. For example, IAM_PASSWORD_POLICY is a managed rule. To reference a managed rule, see Using AWS Managed Config Rules. For custom rules, the identifier is the Amazon Resource Name (ARN) of the rule's AWS Lambda function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name.
        var sourceIdentifier: String = ""

        public init() {}

        public init(owner: String, sourceDetails: [SourceDetail]? = nil, sourceIdentifier: String) {
            self.owner = owner
            self.sourceDetails = sourceDetails
            self.sourceIdentifier = sourceIdentifier
        }

    }

    public struct DeleteConfigRuleRequest: Serializable, Initializable {
        /// The name of the AWS Config rule that you want to delete.
        var configRuleName: String = ""

        public init() {}

        public init(configRuleName: String) {
            self.configRuleName = configRuleName
        }

    }

    public struct SourceDetail: Serializable, Initializable {
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:    ConfigurationItemChangeNotification - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.    OversizedConfigurationItemChangeNotification - Triggers an evaluation when AWS Config delivers an oversized configuration item. AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.    ScheduledNotification - Triggers a periodic evaluation at the frequency specified for MaximumExecutionFrequency.    ConfigurationSnapshotDeliveryCompleted - Triggers a periodic evaluation when AWS Config delivers a configuration snapshot.   If you want your custom rule to be triggered by configuration changes, specify both ConfigurationItemChangeNotification and OversizedConfigurationItemChangeNotification. 
        var messageType: String? = nil
        /// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWS resources.
        var eventSource: String? = nil
        /// The frequency that you want AWS Config to run evaluations for a rule that is triggered periodically. If you specify a value for MaximumExecutionFrequency, then MessageType must use the ScheduledNotification value.
        var maximumExecutionFrequency: String? = nil

        public init() {}

        public init(messageType: String? = nil, eventSource: String? = nil, maximumExecutionFrequency: String? = nil) {
            self.messageType = messageType
            self.eventSource = eventSource
            self.maximumExecutionFrequency = maximumExecutionFrequency
        }

    }

    public struct ConfigExportDeliveryInfo: Serializable, Initializable {
        /// The error message from the last attempted delivery.
        var lastErrorMessage: String? = nil
        /// The time of the last attempted delivery.
        var lastAttemptTime: Date? = nil
        /// The time of the last successful delivery.
        var lastSuccessfulTime: Date? = nil
        /// The error code from the last attempted delivery.
        var lastErrorCode: String? = nil
        /// Status of the last attempted delivery.
        var lastStatus: String? = nil
        /// The time that the next delivery occurs.
        var nextDeliveryTime: Date? = nil

        public init() {}

        public init(lastErrorMessage: String? = nil, lastAttemptTime: Date? = nil, lastSuccessfulTime: Date? = nil, lastErrorCode: String? = nil, lastStatus: String? = nil, nextDeliveryTime: Date? = nil) {
            self.lastErrorMessage = lastErrorMessage
            self.lastAttemptTime = lastAttemptTime
            self.lastSuccessfulTime = lastSuccessfulTime
            self.lastErrorCode = lastErrorCode
            self.lastStatus = lastStatus
            self.nextDeliveryTime = nextDeliveryTime
        }

    }

    public struct DescribeConfigurationRecordersResponse: Serializable, Initializable {
        /// A list that contains the descriptions of the specified configuration recorders.
        var configurationRecorders: [ConfigurationRecorder]? = nil

        public init() {}

        public init(configurationRecorders: [ConfigurationRecorder]? = nil) {
            self.configurationRecorders = configurationRecorders
        }

    }

    public struct DescribeConfigurationRecordersRequest: Serializable, Initializable {
        /// A list of configuration recorder names.
        var configurationRecorderNames: [String]? = nil

        public init() {}

        public init(configurationRecorderNames: [String]? = nil) {
            self.configurationRecorderNames = configurationRecorderNames
        }

    }

    public struct ResourceIdentifier: Serializable, Initializable {
        /// The type of resource.
        var resourceType: String? = nil
        /// The ID of the resource (for example., sg-xxxxxx).
        var resourceId: String? = nil
        /// The custom name of the resource (if available).
        var resourceName: String? = nil
        /// The time that the resource was deleted.
        var resourceDeletionTime: Date? = nil

        public init() {}

        public init(resourceType: String? = nil, resourceId: String? = nil, resourceName: String? = nil, resourceDeletionTime: Date? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceDeletionTime = resourceDeletionTime
        }

    }

    public struct DeliveryChannel: Serializable, Initializable {
        /// The prefix for the specified Amazon S3 bucket.
        var s3KeyPrefix: String? = nil
        /// The name of the delivery channel. By default, AWS Config assigns the name "default" when creating the delivery channel. To change the delivery channel name, you must use the DeleteDeliveryChannel action to delete your current delivery channel, and then you must use the PutDeliveryChannel command to create a delivery channel that has the desired name.
        var name: String? = nil
        var configSnapshotDeliveryProperties: ConfigSnapshotDeliveryProperties? = nil
        /// The name of the Amazon S3 bucket to which AWS Config delivers configuration snapshots and configuration history files. If you specify a bucket that belongs to another AWS account, that bucket must have policies that grant access permissions to AWS Config. For more information, see Permissions for the Amazon S3 Bucket in the AWS Config Developer Guide.
        var s3BucketName: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which AWS Config sends notifications about configuration changes. If you choose a topic from another account, the topic must have policies that grant access permissions to AWS Config. For more information, see Permissions for the Amazon SNS Topic in the AWS Config Developer Guide.
        var snsTopicARN: String? = nil

        public init() {}

        public init(s3KeyPrefix: String? = nil, name: String? = nil, configSnapshotDeliveryProperties: ConfigSnapshotDeliveryProperties? = nil, s3BucketName: String? = nil, snsTopicARN: String? = nil) {
            self.s3KeyPrefix = s3KeyPrefix
            self.name = name
            self.configSnapshotDeliveryProperties = configSnapshotDeliveryProperties
            self.s3BucketName = s3BucketName
            self.snsTopicARN = snsTopicARN
        }

    }

    public struct PutConfigRuleRequest: Serializable, Initializable {
        var configRule: ConfigRule = ConfigRule()

        public init() {}

        public init(configRule: ConfigRule) {
            self.configRule = configRule
        }

    }

    public struct DescribeDeliveryChannelsResponse: Serializable, Initializable {
        /// A list that contains the descriptions of the specified delivery channel.
        var deliveryChannels: [DeliveryChannel]? = nil

        public init() {}

        public init(deliveryChannels: [DeliveryChannel]? = nil) {
            self.deliveryChannels = deliveryChannels
        }

    }

    public struct DescribeConfigRuleEvaluationStatusResponse: Serializable, Initializable {
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// Status information about your AWS managed Config rules.
        var configRulesEvaluationStatus: [ConfigRuleEvaluationStatus]? = nil

        public init() {}

        public init(nextToken: String? = nil, configRulesEvaluationStatus: [ConfigRuleEvaluationStatus]? = nil) {
            self.nextToken = nextToken
            self.configRulesEvaluationStatus = configRulesEvaluationStatus
        }

    }

    public struct DescribeComplianceByResourceResponse: Serializable, Initializable {
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// Indicates whether the specified AWS resource complies with all of the AWS Config rules that evaluate it.
        var complianceByResources: [ComplianceByResource]? = nil

        public init() {}

        public init(nextToken: String? = nil, complianceByResources: [ComplianceByResource]? = nil) {
            self.nextToken = nextToken
            self.complianceByResources = complianceByResources
        }

    }

    public struct DescribeConfigRulesRequest: Serializable, Initializable {
        /// The names of the AWS Config rules for which you want details. If you do not specify any names, AWS Config returns details for all your rules.
        var configRuleNames: [String]? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil, nextToken: String? = nil) {
            self.configRuleNames = configRuleNames
            self.nextToken = nextToken
        }

    }

    public struct DeliverConfigSnapshotResponse: Serializable, Initializable {
        /// The ID of the snapshot that is being created.
        var configSnapshotId: String? = nil

        public init() {}

        public init(configSnapshotId: String? = nil) {
            self.configSnapshotId = configSnapshotId
        }

    }

    public struct ListDiscoveredResourcesRequest: Serializable, Initializable {
        /// Specifies whether AWS Config includes deleted resources in the results. By default, deleted resources are not included.
        var includeDeletedResources: Bool? = nil
        /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// The type of resources that you want AWS Config to list in the response.
        var resourceType: String = ""
        /// The IDs of only those resources that you want AWS Config to list in the response. If you do not specify this parameter, AWS Config lists all resources of the specified type that it has discovered.
        var resourceIds: [String]? = nil
        /// The maximum number of resource identifiers returned on each page. The default is 100. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        var limit: Int32? = nil
        /// The custom name of only those resources that you want AWS Config to list in the response. If you do not specify this parameter, AWS Config lists all resources of the specified type that it has discovered.
        var resourceName: String? = nil

        public init() {}

        public init(includeDeletedResources: Bool? = nil, nextToken: String? = nil, resourceType: String, resourceIds: [String]? = nil, limit: Int32? = nil, resourceName: String? = nil) {
            self.includeDeletedResources = includeDeletedResources
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.resourceIds = resourceIds
            self.limit = limit
            self.resourceName = resourceName
        }

    }

    public struct DeliverConfigSnapshotRequest: Serializable, Initializable {
        /// The name of the delivery channel through which the snapshot is delivered.
        var deliveryChannelName: String = ""

        public init() {}

        public init(deliveryChannelName: String) {
            self.deliveryChannelName = deliveryChannelName
        }

    }

    public struct DescribeDeliveryChannelsRequest: Serializable, Initializable {
        /// A list of delivery channel names.
        var deliveryChannelNames: [String]? = nil

        public init() {}

        public init(deliveryChannelNames: [String]? = nil) {
            self.deliveryChannelNames = deliveryChannelNames
        }

    }

    public struct GetComplianceSummaryByResourceTypeResponse: Serializable, Initializable {
        /// The number of resources that are compliant and the number that are noncompliant. If one or more resource types were provided with the request, the numbers are returned for each resource type. The maximum number returned is 100.
        var complianceSummariesByResourceType: [ComplianceSummaryByResourceType]? = nil

        public init() {}

        public init(complianceSummariesByResourceType: [ComplianceSummaryByResourceType]? = nil) {
            self.complianceSummariesByResourceType = complianceSummariesByResourceType
        }

    }

    public struct DeleteEvaluationResultsRequest: Serializable, Initializable {
        /// The name of the Config rule for which you want to delete the evaluation results.
        var configRuleName: String = ""

        public init() {}

        public init(configRuleName: String) {
            self.configRuleName = configRuleName
        }

    }

    public struct ConfigurationItem: Serializable, Initializable {
        /// An identifier that indicates the ordering of the configuration items of a resource.
        var configurationStateId: String? = nil
        /// The type of AWS resource.
        var resourceType: String? = nil
        /// The custom name of the resource, if available.
        var resourceName: String? = nil
        /// A list of CloudTrail event IDs. A populated field indicates that the current configuration was initiated by the events recorded in the CloudTrail log. For more information about CloudTrail, see What is AWS CloudTrail?. An empty field indicates that the current configuration was not initiated by any event.
        var relatedEvents: [String]? = nil
        /// A mapping of key value tags associated with the resource.
        var tags: [String: String]? = nil
        /// The ID of the resource (for example., sg-xxxxxx).
        var resourceId: String? = nil
        /// The description of the resource configuration.
        var configuration: String? = nil
        /// The configuration item status.
        var configurationItemStatus: String? = nil
        /// The Availability Zone associated with the resource.
        var availabilityZone: String? = nil
        /// A list of related AWS resources.
        var relationships: [Relationship]? = nil
        /// The Amazon Resource Name (ARN) of the resource.
        var arn: String? = nil
        /// The time when the configuration recording was initiated.
        var configurationItemCaptureTime: Date? = nil
        /// The version number of the resource configuration.
        var version: String? = nil
        /// The 12 digit AWS account ID associated with the resource.
        var accountId: String? = nil
        /// The time stamp when the resource was created.
        var resourceCreationTime: Date? = nil
        /// Configuration attributes that AWS Config returns for certain resource types to supplement the information returned for the configuration parameter.
        var supplementaryConfiguration: [String: String]? = nil
        /// The region where the resource resides.
        var awsRegion: String? = nil
        /// Unique MD5 hash that represents the configuration item's state. You can use MD5 hash to compare the states of two or more configuration items that are associated with the same resource.
        var configurationItemMD5Hash: String? = nil

        public init() {}

        public init(configurationStateId: String? = nil, resourceType: String? = nil, resourceName: String? = nil, relatedEvents: [String]? = nil, tags: [String: String]? = nil, resourceId: String? = nil, configuration: String? = nil, configurationItemStatus: String? = nil, availabilityZone: String? = nil, relationships: [Relationship]? = nil, arn: String? = nil, configurationItemCaptureTime: Date? = nil, version: String? = nil, accountId: String? = nil, resourceCreationTime: Date? = nil, supplementaryConfiguration: [String: String]? = nil, awsRegion: String? = nil, configurationItemMD5Hash: String? = nil) {
            self.configurationStateId = configurationStateId
            self.resourceType = resourceType
            self.resourceName = resourceName
            self.relatedEvents = relatedEvents
            self.tags = tags
            self.resourceId = resourceId
            self.configuration = configuration
            self.configurationItemStatus = configurationItemStatus
            self.availabilityZone = availabilityZone
            self.relationships = relationships
            self.arn = arn
            self.configurationItemCaptureTime = configurationItemCaptureTime
            self.version = version
            self.accountId = accountId
            self.resourceCreationTime = resourceCreationTime
            self.supplementaryConfiguration = supplementaryConfiguration
            self.awsRegion = awsRegion
            self.configurationItemMD5Hash = configurationItemMD5Hash
        }

    }

    public struct PutConfigurationRecorderRequest: Serializable, Initializable {
        /// The configuration recorder object that records each configuration change made to the resources.
        var configurationRecorder: ConfigurationRecorder = ConfigurationRecorder()

        public init() {}

        public init(configurationRecorder: ConfigurationRecorder) {
            self.configurationRecorder = configurationRecorder
        }

    }

    public struct EvaluationResultIdentifier: Serializable, Initializable {
        /// The time of the event that triggered the evaluation of your AWS resources. The time can indicate when AWS Config delivered a configuration item change notification, or it can indicate when AWS Config delivered the configuration snapshot, depending on which event triggered the evaluation.
        var orderingTimestamp: Date? = nil
        /// Identifies an AWS Config rule used to evaluate an AWS resource, and provides the type and ID of the evaluated resource.
        var evaluationResultQualifier: EvaluationResultQualifier? = nil

        public init() {}

        public init(orderingTimestamp: Date? = nil, evaluationResultQualifier: EvaluationResultQualifier? = nil) {
            self.orderingTimestamp = orderingTimestamp
            self.evaluationResultQualifier = evaluationResultQualifier
        }

    }

    public struct RecordingGroup: Serializable, Initializable {
        /// Specifies whether AWS Config records configuration changes for every supported type of regional resource. If you set this option to true, when AWS Config adds support for a new type of regional resource, it automatically starts recording resources of that type. If you set this option to true, you cannot enumerate a list of resourceTypes.
        var allSupported: Bool? = nil
        /// Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records. Before you can set this option to true, you must set the allSupported option to true. If you set this option to true, when AWS Config adds support for a new type of global resource, it automatically starts recording resources of that type. The configuration details for any global resource are the same in all regions. To prevent duplicate configuration items, you should consider customizing AWS Config in only one region to record global resources.
        var includeGlobalResourceTypes: Bool? = nil
        /// A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail). Before you can set this option to true, you must set the allSupported option to false. If you set this option to true, when AWS Config adds support for a new type of resource, it will not record resources of that type unless you manually add that type to your recording group. For a list of valid resourceTypes values, see the resourceType Value column in Supported AWS Resource Types.
        var resourceTypes: [String]? = nil

        public init() {}

        public init(allSupported: Bool? = nil, includeGlobalResourceTypes: Bool? = nil, resourceTypes: [String]? = nil) {
            self.allSupported = allSupported
            self.includeGlobalResourceTypes = includeGlobalResourceTypes
            self.resourceTypes = resourceTypes
        }

    }

    public struct GetComplianceDetailsByConfigRuleRequest: Serializable, Initializable {
        /// The name of the AWS Config rule for which you want compliance information.
        var configRuleName: String = ""
        /// The maximum number of evaluation results returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        var limit: Int32? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE.
        var complianceTypes: [String]? = nil

        public init() {}

        public init(configRuleName: String, limit: Int32? = nil, nextToken: String? = nil, complianceTypes: [String]? = nil) {
            self.configRuleName = configRuleName
            self.limit = limit
            self.nextToken = nextToken
            self.complianceTypes = complianceTypes
        }

    }

    public struct ComplianceSummaryByResourceType: Serializable, Initializable {
        /// The number of AWS resources that are compliant or noncompliant, up to a maximum of 100 for each compliance.
        var complianceSummary: ComplianceSummary? = nil
        /// The type of AWS resource.
        var resourceType: String? = nil

        public init() {}

        public init(complianceSummary: ComplianceSummary? = nil, resourceType: String? = nil) {
            self.complianceSummary = complianceSummary
            self.resourceType = resourceType
        }

    }

    public struct PutDeliveryChannelRequest: Serializable, Initializable {
        /// The configuration delivery channel object that delivers the configuration information to an Amazon S3 bucket, and to an Amazon SNS topic.
        var deliveryChannel: DeliveryChannel = DeliveryChannel()

        public init() {}

        public init(deliveryChannel: DeliveryChannel) {
            self.deliveryChannel = deliveryChannel
        }

    }

    public struct Evaluation: Serializable, Initializable {
        /// Indicates whether the AWS resource complies with the AWS Config rule that it was evaluated against. For the Evaluation data type, AWS Config supports only the COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE values. AWS Config does not support the INSUFFICIENT_DATA value for this data type. Similarly, AWS Config does not accept INSUFFICIENT_DATA as the value for ComplianceType from a PutEvaluations request. For example, an AWS Lambda function for a custom Config rule cannot pass an INSUFFICIENT_DATA value to AWS Config.
        var complianceType: String = ""
        /// The ID of the AWS resource that was evaluated.
        var complianceResourceId: String = ""
        /// The type of AWS resource that was evaluated.
        var complianceResourceType: String = ""
        /// The time of the event in AWS Config that triggered the evaluation. For event-based evaluations, the time indicates when AWS Config created the configuration item that triggered the evaluation. For periodic evaluations, the time indicates when AWS Config triggered the evaluation at the frequency that you specified (for example, every 24 hours).
        var orderingTimestamp: Date = Date()
        /// Supplementary information about how the evaluation determined the compliance.
        var annotation: String? = nil

        public init() {}

        public init(complianceType: String, complianceResourceId: String, complianceResourceType: String, orderingTimestamp: Date, annotation: String? = nil) {
            self.complianceType = complianceType
            self.complianceResourceId = complianceResourceId
            self.complianceResourceType = complianceResourceType
            self.orderingTimestamp = orderingTimestamp
            self.annotation = annotation
        }

    }

    public struct StopConfigurationRecorderRequest: Serializable, Initializable {
        /// The name of the recorder object that records each configuration change made to the resources.
        var configurationRecorderName: String = ""

        public init() {}

        public init(configurationRecorderName: String) {
            self.configurationRecorderName = configurationRecorderName
        }

    }

    public struct ConfigRule: Serializable, Initializable {
        /// The name that you assign to the AWS Config rule. The name is required if you are adding a new rule.
        var configRuleName: String? = nil
        /// Indicates whether the AWS Config rule is active or is currently being deleted by AWS Config. It can also indicate the evaluation status for the Config rule. AWS Config sets the state of the rule to EVALUATING temporarily after you use the StartConfigRulesEvaluation request to evaluate your resources against the Config rule. AWS Config sets the state of the rule to DELETING_RESULTS temporarily after you use the DeleteEvaluationResults request to delete the current evaluation results for the Config rule. AWS Config sets the state of a rule to DELETING temporarily after you use the DeleteConfigRule request to delete the rule. After AWS Config deletes the rule, the rule and all of its evaluations are erased and are no longer available.
        var configRuleState: String? = nil
        /// The ID of the AWS Config rule.
        var configRuleId: String? = nil
        /// A string in JSON format that is passed to the AWS Config rule Lambda function.
        var inputParameters: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS Config rule.
        var configRuleArn: String? = nil
        /// Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
        var source: Source = Source()
        /// Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
        var scope: Scope? = nil
        /// The maximum frequency with which AWS Config runs evaluations for a rule. You can specify a value for MaximumExecutionFrequency when:   You are using an AWS managed rule that is triggered at a periodic frequency.   Your custom rule is triggered when AWS Config delivers the configuration snapshot.   For more information, see ConfigSnapshotDeliveryProperties.
        var maximumExecutionFrequency: String? = nil
        /// The description that you provide for the AWS Config rule.
        var description: String? = nil

        public init() {}

        public init(configRuleName: String? = nil, configRuleState: String? = nil, configRuleId: String? = nil, inputParameters: String? = nil, configRuleArn: String? = nil, source: Source, scope: Scope? = nil, maximumExecutionFrequency: String? = nil, description: String? = nil) {
            self.configRuleName = configRuleName
            self.configRuleState = configRuleState
            self.configRuleId = configRuleId
            self.inputParameters = inputParameters
            self.configRuleArn = configRuleArn
            self.source = source
            self.scope = scope
            self.maximumExecutionFrequency = maximumExecutionFrequency
            self.description = description
        }

    }

    public struct EvaluationResultQualifier: Serializable, Initializable {
        /// The ID of the evaluated AWS resource.
        var resourceId: String? = nil
        /// The type of AWS resource that was evaluated.
        var resourceType: String? = nil
        /// The name of the AWS Config rule that was used in the evaluation.
        var configRuleName: String? = nil

        public init() {}

        public init(resourceId: String? = nil, resourceType: String? = nil, configRuleName: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.configRuleName = configRuleName
        }

    }

    public struct DescribeConfigurationRecorderStatusResponse: Serializable, Initializable {
        /// A list that contains status of the specified recorders.
        var configurationRecordersStatus: [ConfigurationRecorderStatus]? = nil

        public init() {}

        public init(configurationRecordersStatus: [ConfigurationRecorderStatus]? = nil) {
            self.configurationRecordersStatus = configurationRecordersStatus
        }

    }

    public struct ComplianceSummary: Serializable, Initializable {
        /// The time that AWS Config created the compliance summary.
        var complianceSummaryTimestamp: Date? = nil
        /// The number of AWS Config rules or AWS resources that are noncompliant, up to a maximum of 25 for rules and 100 for resources.
        var nonCompliantResourceCount: ComplianceContributorCount? = nil
        /// The number of AWS Config rules or AWS resources that are compliant, up to a maximum of 25 for rules and 100 for resources.
        var compliantResourceCount: ComplianceContributorCount? = nil

        public init() {}

        public init(complianceSummaryTimestamp: Date? = nil, nonCompliantResourceCount: ComplianceContributorCount? = nil, compliantResourceCount: ComplianceContributorCount? = nil) {
            self.complianceSummaryTimestamp = complianceSummaryTimestamp
            self.nonCompliantResourceCount = nonCompliantResourceCount
            self.compliantResourceCount = compliantResourceCount
        }

    }

    public struct Scope: Serializable, Initializable {
        /// The resource types of only those AWS resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for ComplianceResourceId.
        var complianceResourceTypes: [String]? = nil
        /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for ComplianceResourceTypes.
        var complianceResourceId: String? = nil
        /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule. If you specify a value for TagValue, you must also specify a value for TagKey.
        var tagValue: String? = nil
        /// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
        var tagKey: String? = nil

        public init() {}

        public init(complianceResourceTypes: [String]? = nil, complianceResourceId: String? = nil, tagValue: String? = nil, tagKey: String? = nil) {
            self.complianceResourceTypes = complianceResourceTypes
            self.complianceResourceId = complianceResourceId
            self.tagValue = tagValue
            self.tagKey = tagKey
        }

    }

    public struct ConfigRuleEvaluationStatus: Serializable, Initializable {
        /// The time that AWS Config last failed to evaluate your AWS resources against the rule.
        var lastFailedEvaluationTime: Date? = nil
        /// Indicates whether AWS Config has evaluated your resources against the rule at least once.    true - AWS Config has evaluated your AWS resources against the rule at least once.    false - AWS Config has not once finished evaluating your AWS resources against the rule.  
        var firstEvaluationStarted: Bool? = nil
        /// The time that AWS Config last successfully evaluated your AWS resources against the rule.
        var lastSuccessfulEvaluationTime: Date? = nil
        /// The name of the AWS Config rule.
        var configRuleName: String? = nil
        /// The time that you first activated the AWS Config rule.
        var firstActivatedTime: Date? = nil
        /// The ID of the AWS Config rule.
        var configRuleId: String? = nil
        /// The time that AWS Config last successfully invoked the AWS Config rule to evaluate your AWS resources.
        var lastSuccessfulInvocationTime: Date? = nil
        /// The Amazon Resource Name (ARN) of the AWS Config rule.
        var configRuleArn: String? = nil
        /// The error code that AWS Config returned when the rule last failed.
        var lastErrorCode: String? = nil
        /// The error message that AWS Config returned when the rule last failed.
        var lastErrorMessage: String? = nil
        /// The time that AWS Config last failed to invoke the AWS Config rule to evaluate your AWS resources.
        var lastFailedInvocationTime: Date? = nil

        public init() {}

        public init(lastFailedEvaluationTime: Date? = nil, firstEvaluationStarted: Bool? = nil, lastSuccessfulEvaluationTime: Date? = nil, configRuleName: String? = nil, firstActivatedTime: Date? = nil, configRuleId: String? = nil, lastSuccessfulInvocationTime: Date? = nil, configRuleArn: String? = nil, lastErrorCode: String? = nil, lastErrorMessage: String? = nil, lastFailedInvocationTime: Date? = nil) {
            self.lastFailedEvaluationTime = lastFailedEvaluationTime
            self.firstEvaluationStarted = firstEvaluationStarted
            self.lastSuccessfulEvaluationTime = lastSuccessfulEvaluationTime
            self.configRuleName = configRuleName
            self.firstActivatedTime = firstActivatedTime
            self.configRuleId = configRuleId
            self.lastSuccessfulInvocationTime = lastSuccessfulInvocationTime
            self.configRuleArn = configRuleArn
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastFailedInvocationTime = lastFailedInvocationTime
        }

    }

    public struct GetComplianceSummaryByConfigRuleResponse: Serializable, Initializable {
        /// The number of AWS Config rules that are compliant and the number that are noncompliant, up to a maximum of 25 for each.
        var complianceSummary: ComplianceSummary? = nil

        public init() {}

        public init(complianceSummary: ComplianceSummary? = nil) {
            self.complianceSummary = complianceSummary
        }

    }

    public struct GetComplianceSummaryByResourceTypeRequest: Serializable, Initializable {
        /// Specify one or more resource types to get the number of resources that are compliant and the number that are noncompliant for each resource type. For this request, you can specify an AWS resource type such as AWS::EC2::Instance, and you can specify that the resource type is an AWS account by specifying AWS::::Account.
        var resourceTypes: [String]? = nil

        public init() {}

        public init(resourceTypes: [String]? = nil) {
            self.resourceTypes = resourceTypes
        }

    }

    public struct DescribeComplianceByConfigRuleRequest: Serializable, Initializable {
        /// Specify one or more AWS Config rule names to filter the results by rule.
        var configRuleNames: [String]? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA.
        var complianceTypes: [String]? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil, nextToken: String? = nil, complianceTypes: [String]? = nil) {
            self.configRuleNames = configRuleNames
            self.nextToken = nextToken
            self.complianceTypes = complianceTypes
        }

    }

    public struct GetComplianceDetailsByResourceRequest: Serializable, Initializable {
        /// The ID of the AWS resource for which you want compliance information.
        var resourceId: String = ""
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// The type of the AWS resource for which you want compliance information.
        var resourceType: String = ""
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE.
        var complianceTypes: [String]? = nil

        public init() {}

        public init(resourceId: String, nextToken: String? = nil, resourceType: String, complianceTypes: [String]? = nil) {
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.complianceTypes = complianceTypes
        }

    }

    public struct ComplianceByResource: Serializable, Initializable {
        /// Indicates whether the AWS resource complies with all of the AWS Config rules that evaluated it.
        var compliance: Compliance? = nil
        /// The ID of the AWS resource that was evaluated.
        var resourceId: String? = nil
        /// The type of the AWS resource that was evaluated.
        var resourceType: String? = nil

        public init() {}

        public init(compliance: Compliance? = nil, resourceId: String? = nil, resourceType: String? = nil) {
            self.compliance = compliance
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

    }

    public struct DescribeComplianceByConfigRuleResponse: Serializable, Initializable {
        /// Indicates whether each of the specified AWS Config rules is compliant.
        var complianceByConfigRules: [ComplianceByConfigRule]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(complianceByConfigRules: [ComplianceByConfigRule]? = nil, nextToken: String? = nil) {
            self.complianceByConfigRules = complianceByConfigRules
            self.nextToken = nextToken
        }

    }

    public struct DescribeConfigRuleEvaluationStatusRequest: Serializable, Initializable {
        /// The name of the AWS managed Config rules for which you want status information. If you do not specify any names, AWS Config returns status information for all AWS managed Config rules that you use.
        var configRuleNames: [String]? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// The number of rule evaluation results that you want returned. This parameter is required if the rule limit for your account is more than the default of 50 rules. For more information about requesting a rule limit increase, see AWS Config Limits in the AWS General Reference Guide.
        var limit: Int32? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.configRuleNames = configRuleNames
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct DeliveryChannelStatus: Serializable, Initializable {
        /// The name of the delivery channel.
        var name: String? = nil
        /// A list containing the status of the delivery of the configuration stream notification to the specified Amazon SNS topic.
        var configStreamDeliveryInfo: ConfigStreamDeliveryInfo? = nil
        /// A list that contains the status of the delivery of the configuration history to the specified Amazon S3 bucket.
        var configHistoryDeliveryInfo: ConfigExportDeliveryInfo? = nil
        /// A list containing the status of the delivery of the snapshot to the specified Amazon S3 bucket.
        var configSnapshotDeliveryInfo: ConfigExportDeliveryInfo? = nil

        public init() {}

        public init(name: String? = nil, configStreamDeliveryInfo: ConfigStreamDeliveryInfo? = nil, configHistoryDeliveryInfo: ConfigExportDeliveryInfo? = nil, configSnapshotDeliveryInfo: ConfigExportDeliveryInfo? = nil) {
            self.name = name
            self.configStreamDeliveryInfo = configStreamDeliveryInfo
            self.configHistoryDeliveryInfo = configHistoryDeliveryInfo
            self.configSnapshotDeliveryInfo = configSnapshotDeliveryInfo
        }

    }

    public struct StartConfigRulesEvaluationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ComplianceByConfigRule: Serializable, Initializable {
        /// Indicates whether the AWS Config rule is compliant.
        var compliance: Compliance? = nil
        /// The name of the AWS Config rule.
        var configRuleName: String? = nil

        public init() {}

        public init(compliance: Compliance? = nil, configRuleName: String? = nil) {
            self.compliance = compliance
            self.configRuleName = configRuleName
        }

    }

    public struct GetResourceConfigHistoryResponse: Serializable, Initializable {
        /// A list that contains the configuration history of one or more resources.
        var configurationItems: [ConfigurationItem]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(configurationItems: [ConfigurationItem]? = nil, nextToken: String? = nil) {
            self.configurationItems = configurationItems
            self.nextToken = nextToken
        }

    }

    public struct ComplianceContributorCount: Serializable, Initializable {
        /// The number of AWS resources or AWS Config rules responsible for the current compliance of the item.
        var cappedCount: Int32? = nil
        /// Indicates whether the maximum count is reached.
        var capExceeded: Bool? = nil

        public init() {}

        public init(cappedCount: Int32? = nil, capExceeded: Bool? = nil) {
            self.cappedCount = cappedCount
            self.capExceeded = capExceeded
        }

    }

    public struct DeleteConfigurationRecorderRequest: Serializable, Initializable {
        /// The name of the configuration recorder to be deleted. You can retrieve the name of your configuration recorder by using the DescribeConfigurationRecorders action.
        var configurationRecorderName: String = ""

        public init() {}

        public init(configurationRecorderName: String) {
            self.configurationRecorderName = configurationRecorderName
        }

    }

    public struct GetResourceConfigHistoryRequest: Serializable, Initializable {
        /// The time stamp that indicates a later time. If not specified, current time is taken.
        var laterTime: Date? = nil
        /// The maximum number of configuration items returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        var limit: Int32? = nil
        /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// The resource type.
        var resourceType: String = ""
        /// The chronological order for configuration items listed. By default the results are listed in reverse chronological order.
        var chronologicalOrder: String? = nil
        /// The time stamp that indicates an earlier time. If not specified, the action returns paginated results that contain configuration items that start from when the first configuration item was recorded.
        var earlierTime: Date? = nil
        /// The ID of the resource (for example., sg-xxxxxx).
        var resourceId: String = ""

        public init() {}

        public init(laterTime: Date? = nil, limit: Int32? = nil, nextToken: String? = nil, resourceType: String, chronologicalOrder: String? = nil, earlierTime: Date? = nil, resourceId: String) {
            self.laterTime = laterTime
            self.limit = limit
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.chronologicalOrder = chronologicalOrder
            self.earlierTime = earlierTime
            self.resourceId = resourceId
        }

    }

    public struct Relationship: Serializable, Initializable {
        /// The resource type of the related resource.
        var resourceType: String? = nil
        /// The ID of the related resource (for example, sg-xxxxxx).
        var resourceId: String? = nil
        /// The custom name of the related resource, if available.
        var resourceName: String? = nil
        /// The type of relationship with the related resource.
        var relationshipName: String? = nil

        public init() {}

        public init(resourceType: String? = nil, resourceId: String? = nil, resourceName: String? = nil, relationshipName: String? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.relationshipName = relationshipName
        }

    }

    public struct Compliance: Serializable, Initializable {
        /// The number of AWS resources or AWS Config rules that cause a result of NON_COMPLIANT, up to a maximum number.
        var complianceContributorCount: ComplianceContributorCount? = nil
        /// Indicates whether an AWS resource or AWS Config rule is compliant. A resource is compliant if it complies with all of the AWS Config rules that evaluate it, and it is noncompliant if it does not comply with one or more of these rules. A rule is compliant if all of the resources that the rule evaluates comply with it, and it is noncompliant if any of these resources do not comply. AWS Config returns the INSUFFICIENT_DATA value when no evaluation results are available for the AWS resource or Config rule. For the Compliance data type, AWS Config supports only COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA values. AWS Config does not support the NOT_APPLICABLE value for the Compliance data type.
        var complianceType: String? = nil

        public init() {}

        public init(complianceContributorCount: ComplianceContributorCount? = nil, complianceType: String? = nil) {
            self.complianceContributorCount = complianceContributorCount
            self.complianceType = complianceType
        }

    }

    public struct DescribeConfigurationRecorderStatusRequest: Serializable, Initializable {
        /// The name(s) of the configuration recorder. If the name is not specified, the action returns the current status of all the configuration recorders associated with the account.
        var configurationRecorderNames: [String]? = nil

        public init() {}

        public init(configurationRecorderNames: [String]? = nil) {
            self.configurationRecorderNames = configurationRecorderNames
        }

    }

    public struct ConfigSnapshotDeliveryProperties: Serializable, Initializable {
        /// The frequency with which AWS Config delivers configuration snapshots.
        var deliveryFrequency: String? = nil

        public init() {}

        public init(deliveryFrequency: String? = nil) {
            self.deliveryFrequency = deliveryFrequency
        }

    }

    public struct ListDiscoveredResourcesResponse: Serializable, Initializable {
        /// The details that identify a resource that is discovered by AWS Config, including the resource type, ID, and (if available) the custom resource name.
        var resourceIdentifiers: [ResourceIdentifier]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(resourceIdentifiers: [ResourceIdentifier]? = nil, nextToken: String? = nil) {
            self.resourceIdentifiers = resourceIdentifiers
            self.nextToken = nextToken
        }

    }

    public struct DeleteEvaluationResultsResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeConfigRulesResponse: Serializable, Initializable {
        /// The details about your AWS Config rules.
        var configRules: [ConfigRule]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(configRules: [ConfigRule]? = nil, nextToken: String? = nil) {
            self.configRules = configRules
            self.nextToken = nextToken
        }

    }

    public struct EvaluationResult: Serializable, Initializable {
        /// Uniquely identifies the evaluation result.
        var evaluationResultIdentifier: EvaluationResultIdentifier? = nil
        /// The time when the AWS Config rule evaluated the AWS resource.
        var configRuleInvokedTime: Date? = nil
        /// The time when AWS Config recorded the evaluation result.
        var resultRecordedTime: Date? = nil
        /// Indicates whether the AWS resource complies with the AWS Config rule that evaluated it. For the EvaluationResult data type, AWS Config supports only the COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE values. AWS Config does not support the INSUFFICIENT_DATA value for the EvaluationResult data type.
        var complianceType: String? = nil
        /// An encrypted token that associates an evaluation with an AWS Config rule. The token identifies the rule, the AWS resource being evaluated, and the event that triggered the evaluation.
        var resultToken: String? = nil
        /// Supplementary information about how the evaluation determined the compliance.
        var annotation: String? = nil

        public init() {}

        public init(evaluationResultIdentifier: EvaluationResultIdentifier? = nil, configRuleInvokedTime: Date? = nil, resultRecordedTime: Date? = nil, complianceType: String? = nil, resultToken: String? = nil, annotation: String? = nil) {
            self.evaluationResultIdentifier = evaluationResultIdentifier
            self.configRuleInvokedTime = configRuleInvokedTime
            self.resultRecordedTime = resultRecordedTime
            self.complianceType = complianceType
            self.resultToken = resultToken
            self.annotation = annotation
        }

    }

    public struct DescribeComplianceByResourceRequest: Serializable, Initializable {
        /// The maximum number of evaluation results returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        var limit: Int32? = nil
        /// The ID of the AWS resource for which you want compliance information. You can specify only one resource ID. If you specify a resource ID, you must also specify a type for ResourceType.
        var resourceId: String? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        var nextToken: String? = nil
        /// The types of AWS resources for which you want compliance information; for example, AWS::EC2::Instance. For this action, you can specify that the resource type is an AWS account by specifying AWS::::Account.
        var resourceType: String? = nil
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA.
        var complianceTypes: [String]? = nil

        public init() {}

        public init(limit: Int32? = nil, resourceId: String? = nil, nextToken: String? = nil, resourceType: String? = nil, complianceTypes: [String]? = nil) {
            self.limit = limit
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.complianceTypes = complianceTypes
        }

    }

    public struct DescribeDeliveryChannelStatusResponse: Serializable, Initializable {
        /// A list that contains the status of a specified delivery channel.
        var deliveryChannelsStatus: [DeliveryChannelStatus]? = nil

        public init() {}

        public init(deliveryChannelsStatus: [DeliveryChannelStatus]? = nil) {
            self.deliveryChannelsStatus = deliveryChannelsStatus
        }

    }

    public struct PutEvaluationsResponse: Serializable, Initializable {
        /// Requests that failed because of a client or server error.
        var failedEvaluations: [Evaluation]? = nil

        public init() {}

        public init(failedEvaluations: [Evaluation]? = nil) {
            self.failedEvaluations = failedEvaluations
        }

    }

    public struct StartConfigRulesEvaluationRequest: Serializable, Initializable {
        /// The list of names of Config rules that you want to run evaluations for.
        var configRuleNames: [String]? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil) {
            self.configRuleNames = configRuleNames
        }

    }

    public struct StartConfigurationRecorderRequest: Serializable, Initializable {
        /// The name of the recorder object that records each configuration change made to the resources.
        var configurationRecorderName: String = ""

        public init() {}

        public init(configurationRecorderName: String) {
            self.configurationRecorderName = configurationRecorderName
        }

    }

    public struct DeleteDeliveryChannelRequest: Serializable, Initializable {
        /// The name of the delivery channel to delete.
        var deliveryChannelName: String = ""

        public init() {}

        public init(deliveryChannelName: String) {
            self.deliveryChannelName = deliveryChannelName
        }

    }

    public struct DescribeDeliveryChannelStatusRequest: Serializable, Initializable {
        /// A list of delivery channel names.
        var deliveryChannelNames: [String]? = nil

        public init() {}

        public init(deliveryChannelNames: [String]? = nil) {
            self.deliveryChannelNames = deliveryChannelNames
        }

    }

    public struct ConfigurationRecorderStatus: Serializable, Initializable {
        /// The name of the configuration recorder.
        var name: String? = nil
        /// The time when the status was last changed.
        var lastStatusChangeTime: Date? = nil
        /// The time the recorder was last stopped.
        var lastStopTime: Date? = nil
        /// Specifies whether the recorder is currently recording or not.
        var recording: Bool? = nil
        /// The error code indicating that the recording failed.
        var lastErrorCode: String? = nil
        /// The last (previous) status of the recorder.
        var lastStatus: String? = nil
        /// The time the recorder was last started.
        var lastStartTime: Date? = nil
        /// The message indicating that the recording failed due to an error.
        var lastErrorMessage: String? = nil

        public init() {}

        public init(name: String? = nil, lastStatusChangeTime: Date? = nil, lastStopTime: Date? = nil, recording: Bool? = nil, lastErrorCode: String? = nil, lastStatus: String? = nil, lastStartTime: Date? = nil, lastErrorMessage: String? = nil) {
            self.name = name
            self.lastStatusChangeTime = lastStatusChangeTime
            self.lastStopTime = lastStopTime
            self.recording = recording
            self.lastErrorCode = lastErrorCode
            self.lastStatus = lastStatus
            self.lastStartTime = lastStartTime
            self.lastErrorMessage = lastErrorMessage
        }

    }

    public struct ConfigurationRecorder: Serializable, Initializable {
        /// The name of the recorder. By default, AWS Config automatically assigns the name "default" when creating the configuration recorder. You cannot change the assigned name.
        var name: String? = nil
        /// Specifies the types of AWS resource for which AWS Config records configuration changes.
        var recordingGroup: RecordingGroup? = nil
        /// Amazon Resource Name (ARN) of the IAM role used to describe the AWS resources associated with the account.
        var roleARN: String? = nil

        public init() {}

        public init(name: String? = nil, recordingGroup: RecordingGroup? = nil, roleARN: String? = nil) {
            self.name = name
            self.recordingGroup = recordingGroup
            self.roleARN = roleARN
        }

    }

    public struct PutEvaluationsRequest: Serializable, Initializable {
        /// The assessments that the AWS Lambda function performs. Each evaluation identifies an AWS resource and indicates whether it complies with the AWS Config rule that invokes the AWS Lambda function.
        var evaluations: [Evaluation]? = nil
        /// An encrypted token that associates an evaluation with an AWS Config rule. Identifies the rule and the event that triggered the evaluation
        var resultToken: String = ""
        /// Use this parameter to specify a test run for PutEvaluations. You can verify whether your AWS Lambda function will deliver evaluation results to AWS Config. No updates occur to your existing evaluations, and evaluation results are not sent to AWS Config.  When TestMode is true, PutEvaluations doesn't require a valid value for the ResultToken parameter, but the value cannot be null. 
        var testMode: Bool? = nil

        public init() {}

        public init(evaluations: [Evaluation]? = nil, resultToken: String, testMode: Bool? = nil) {
            self.evaluations = evaluations
            self.resultToken = resultToken
            self.testMode = testMode
        }

    }

}