// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Config {

    public struct ConfigStreamDeliveryInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The error message from the last attempted delivery.
        public var lastErrorMessage: String? = nil
        /// The error code from the last attempted delivery.
        public var lastErrorCode: String? = nil
        /// Status of the last attempted delivery.  Note Providing an SNS topic on a DeliveryChannel for AWS Config is optional. If the SNS delivery is turned off, the last status will be Not_Applicable.
        public var lastStatus: String? = nil
        /// The time from the last status change.
        public var lastStatusChangeTime: Date? = nil

        public init() {}

        public init(lastErrorMessage: String? = nil, lastErrorCode: String? = nil, lastStatus: String? = nil, lastStatusChangeTime: Date? = nil) {
            self.lastErrorMessage = lastErrorMessage
            self.lastErrorCode = lastErrorCode
            self.lastStatus = lastStatus
            self.lastStatusChangeTime = lastStatusChangeTime
        }

        public init(dictionary: [String: Any]) throws {
            self.lastErrorMessage = dictionary["lastErrorMessage"] as? String
            self.lastErrorCode = dictionary["lastErrorCode"] as? String
            self.lastStatus = dictionary["lastStatus"] as? String
            self.lastStatusChangeTime = dictionary["lastStatusChangeTime"] as? Date
        }
    }

    public struct GetComplianceDetailsByConfigRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the AWS resource complies with the specified AWS Config rule.
        public var evaluationResults: [EvaluationResult]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(evaluationResults: [EvaluationResult]? = nil, nextToken: String? = nil) {
            self.evaluationResults = evaluationResults
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let evaluationResults = dictionary["EvaluationResults"] as? [[String: Any]] {
                self.evaluationResults = try evaluationResults.map({ try EvaluationResult(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetComplianceDetailsByResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the specified AWS resource complies each AWS Config rule.
        public var evaluationResults: [EvaluationResult]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(evaluationResults: [EvaluationResult]? = nil, nextToken: String? = nil) {
            self.evaluationResults = evaluationResults
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let evaluationResults = dictionary["EvaluationResults"] as? [[String: Any]] {
                self.evaluationResults = try evaluationResults.map({ try EvaluationResult(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct Source: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether AWS or the customer owns and manages the AWS Config rule.
        public var owner: String = ""
        /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources.
        public var sourceDetails: [SourceDetail]? = nil
        /// For AWS Config managed rules, a predefined identifier from a list. For example, IAM_PASSWORD_POLICY is a managed rule. To reference a managed rule, see Using AWS Managed Config Rules. For custom rules, the identifier is the Amazon Resource Name (ARN) of the rule's AWS Lambda function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name.
        public var sourceIdentifier: String = ""

        public init() {}

        public init(owner: String, sourceDetails: [SourceDetail]? = nil, sourceIdentifier: String) {
            self.owner = owner
            self.sourceDetails = sourceDetails
            self.sourceIdentifier = sourceIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let owner = dictionary["Owner"] as? String else { throw InitializableError.missingRequiredParam("Owner") }
            self.owner = owner
            if let sourceDetails = dictionary["SourceDetails"] as? [[String: Any]] {
                self.sourceDetails = try sourceDetails.map({ try SourceDetail(dictionary: $0) })
            }
            guard let sourceIdentifier = dictionary["SourceIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SourceIdentifier") }
            self.sourceIdentifier = sourceIdentifier
        }
    }

    public struct DeleteConfigRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the AWS Config rule that you want to delete.
        public var configRuleName: String = ""

        public init() {}

        public init(configRuleName: String) {
            self.configRuleName = configRuleName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configRuleName = dictionary["ConfigRuleName"] as? String else { throw InitializableError.missingRequiredParam("ConfigRuleName") }
            self.configRuleName = configRuleName
        }
    }

    public struct ConfigExportDeliveryInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The error message from the last attempted delivery.
        public var lastErrorMessage: String? = nil
        /// The time of the last attempted delivery.
        public var lastAttemptTime: Date? = nil
        /// The time of the last successful delivery.
        public var lastSuccessfulTime: Date? = nil
        /// The error code from the last attempted delivery.
        public var lastErrorCode: String? = nil
        /// Status of the last attempted delivery.
        public var lastStatus: String? = nil
        /// The time that the next delivery occurs.
        public var nextDeliveryTime: Date? = nil

        public init() {}

        public init(lastErrorMessage: String? = nil, lastAttemptTime: Date? = nil, lastSuccessfulTime: Date? = nil, lastErrorCode: String? = nil, lastStatus: String? = nil, nextDeliveryTime: Date? = nil) {
            self.lastErrorMessage = lastErrorMessage
            self.lastAttemptTime = lastAttemptTime
            self.lastSuccessfulTime = lastSuccessfulTime
            self.lastErrorCode = lastErrorCode
            self.lastStatus = lastStatus
            self.nextDeliveryTime = nextDeliveryTime
        }

        public init(dictionary: [String: Any]) throws {
            self.lastErrorMessage = dictionary["lastErrorMessage"] as? String
            self.lastAttemptTime = dictionary["lastAttemptTime"] as? Date
            self.lastSuccessfulTime = dictionary["lastSuccessfulTime"] as? Date
            self.lastErrorCode = dictionary["lastErrorCode"] as? String
            self.lastStatus = dictionary["lastStatus"] as? String
            self.nextDeliveryTime = dictionary["nextDeliveryTime"] as? Date
        }
    }

    public struct SourceDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:    ConfigurationItemChangeNotification - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.    OversizedConfigurationItemChangeNotification - Triggers an evaluation when AWS Config delivers an oversized configuration item. AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.    ScheduledNotification - Triggers a periodic evaluation at the frequency specified for MaximumExecutionFrequency.    ConfigurationSnapshotDeliveryCompleted - Triggers a periodic evaluation when AWS Config delivers a configuration snapshot.   If you want your custom rule to be triggered by configuration changes, specify both ConfigurationItemChangeNotification and OversizedConfigurationItemChangeNotification. 
        public var messageType: String? = nil
        /// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWS resources.
        public var eventSource: String? = nil
        /// The frequency that you want AWS Config to run evaluations for a rule that is triggered periodically. If you specify a value for MaximumExecutionFrequency, then MessageType must use the ScheduledNotification value.
        public var maximumExecutionFrequency: String? = nil

        public init() {}

        public init(messageType: String? = nil, eventSource: String? = nil, maximumExecutionFrequency: String? = nil) {
            self.messageType = messageType
            self.eventSource = eventSource
            self.maximumExecutionFrequency = maximumExecutionFrequency
        }

        public init(dictionary: [String: Any]) throws {
            self.messageType = dictionary["MessageType"] as? String
            self.eventSource = dictionary["EventSource"] as? String
            self.maximumExecutionFrequency = dictionary["MaximumExecutionFrequency"] as? String
        }
    }

    public struct DescribeConfigurationRecordersResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains the descriptions of the specified configuration recorders.
        public var configurationRecorders: [ConfigurationRecorder]? = nil

        public init() {}

        public init(configurationRecorders: [ConfigurationRecorder]? = nil) {
            self.configurationRecorders = configurationRecorders
        }

        public init(dictionary: [String: Any]) throws {
            if let configurationRecorders = dictionary["ConfigurationRecorders"] as? [[String: Any]] {
                self.configurationRecorders = try configurationRecorders.map({ try ConfigurationRecorder(dictionary: $0) })
            }
        }
    }

    public struct DescribeConfigurationRecordersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of configuration recorder names.
        public var configurationRecorderNames: [String]? = nil

        public init() {}

        public init(configurationRecorderNames: [String]? = nil) {
            self.configurationRecorderNames = configurationRecorderNames
        }

        public init(dictionary: [String: Any]) throws {
            if let configurationRecorderNames = dictionary["ConfigurationRecorderNames"] as? [String] {
                self.configurationRecorderNames = configurationRecorderNames
            }
        }
    }

    public struct ResourceIdentifier: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of resource.
        public var resourceType: String? = nil
        /// The ID of the resource (for example., sg-xxxxxx).
        public var resourceId: String? = nil
        /// The custom name of the resource (if available).
        public var resourceName: String? = nil
        /// The time that the resource was deleted.
        public var resourceDeletionTime: Date? = nil

        public init() {}

        public init(resourceType: String? = nil, resourceId: String? = nil, resourceName: String? = nil, resourceDeletionTime: Date? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceDeletionTime = resourceDeletionTime
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceType = dictionary["resourceType"] as? String
            self.resourceId = dictionary["resourceId"] as? String
            self.resourceName = dictionary["resourceName"] as? String
            self.resourceDeletionTime = dictionary["resourceDeletionTime"] as? Date
        }
    }

    public struct DeliveryChannel: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The prefix for the specified Amazon S3 bucket.
        public var s3KeyPrefix: String? = nil
        /// The name of the delivery channel. By default, AWS Config assigns the name "default" when creating the delivery channel. To change the delivery channel name, you must use the DeleteDeliveryChannel action to delete your current delivery channel, and then you must use the PutDeliveryChannel command to create a delivery channel that has the desired name.
        public var name: String? = nil
        public var configSnapshotDeliveryProperties: ConfigSnapshotDeliveryProperties? = nil
        /// The name of the Amazon S3 bucket to which AWS Config delivers configuration snapshots and configuration history files. If you specify a bucket that belongs to another AWS account, that bucket must have policies that grant access permissions to AWS Config. For more information, see Permissions for the Amazon S3 Bucket in the AWS Config Developer Guide.
        public var s3BucketName: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which AWS Config sends notifications about configuration changes. If you choose a topic from another account, the topic must have policies that grant access permissions to AWS Config. For more information, see Permissions for the Amazon SNS Topic in the AWS Config Developer Guide.
        public var snsTopicARN: String? = nil

        public init() {}

        public init(s3KeyPrefix: String? = nil, name: String? = nil, configSnapshotDeliveryProperties: ConfigSnapshotDeliveryProperties? = nil, s3BucketName: String? = nil, snsTopicARN: String? = nil) {
            self.s3KeyPrefix = s3KeyPrefix
            self.name = name
            self.configSnapshotDeliveryProperties = configSnapshotDeliveryProperties
            self.s3BucketName = s3BucketName
            self.snsTopicARN = snsTopicARN
        }

        public init(dictionary: [String: Any]) throws {
            self.s3KeyPrefix = dictionary["s3KeyPrefix"] as? String
            self.name = dictionary["name"] as? String
            if let configSnapshotDeliveryProperties = dictionary["configSnapshotDeliveryProperties"] as? [String: Any] { self.configSnapshotDeliveryProperties = try Config.ConfigSnapshotDeliveryProperties(dictionary: configSnapshotDeliveryProperties) }
            self.s3BucketName = dictionary["s3BucketName"] as? String
            self.snsTopicARN = dictionary["snsTopicARN"] as? String
        }
    }

    public struct PutConfigRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var configRule: ConfigRule = ConfigRule()

        public init() {}

        public init(configRule: ConfigRule) {
            self.configRule = configRule
        }

        public init(dictionary: [String: Any]) throws {
            guard let configRule = dictionary["ConfigRule"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ConfigRule") }
            self.configRule = try Config.ConfigRule(dictionary: configRule)
        }
    }

    public struct DescribeDeliveryChannelsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains the descriptions of the specified delivery channel.
        public var deliveryChannels: [DeliveryChannel]? = nil

        public init() {}

        public init(deliveryChannels: [DeliveryChannel]? = nil) {
            self.deliveryChannels = deliveryChannels
        }

        public init(dictionary: [String: Any]) throws {
            if let deliveryChannels = dictionary["DeliveryChannels"] as? [[String: Any]] {
                self.deliveryChannels = try deliveryChannels.map({ try DeliveryChannel(dictionary: $0) })
            }
        }
    }

    public struct DescribeConfigRuleEvaluationStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// Status information about your AWS managed Config rules.
        public var configRulesEvaluationStatus: [ConfigRuleEvaluationStatus]? = nil

        public init() {}

        public init(nextToken: String? = nil, configRulesEvaluationStatus: [ConfigRuleEvaluationStatus]? = nil) {
            self.nextToken = nextToken
            self.configRulesEvaluationStatus = configRulesEvaluationStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let configRulesEvaluationStatus = dictionary["ConfigRulesEvaluationStatus"] as? [[String: Any]] {
                self.configRulesEvaluationStatus = try configRulesEvaluationStatus.map({ try ConfigRuleEvaluationStatus(dictionary: $0) })
            }
        }
    }

    public struct DescribeComplianceByResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// Indicates whether the specified AWS resource complies with all of the AWS Config rules that evaluate it.
        public var complianceByResources: [ComplianceByResource]? = nil

        public init() {}

        public init(nextToken: String? = nil, complianceByResources: [ComplianceByResource]? = nil) {
            self.nextToken = nextToken
            self.complianceByResources = complianceByResources
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let complianceByResources = dictionary["ComplianceByResources"] as? [[String: Any]] {
                self.complianceByResources = try complianceByResources.map({ try ComplianceByResource(dictionary: $0) })
            }
        }
    }

    public struct DescribeConfigRulesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the AWS Config rules for which you want details. If you do not specify any names, AWS Config returns details for all your rules.
        public var configRuleNames: [String]? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil, nextToken: String? = nil) {
            self.configRuleNames = configRuleNames
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let configRuleNames = dictionary["ConfigRuleNames"] as? [String] {
                self.configRuleNames = configRuleNames
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeliverConfigSnapshotResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the snapshot that is being created.
        public var configSnapshotId: String? = nil

        public init() {}

        public init(configSnapshotId: String? = nil) {
            self.configSnapshotId = configSnapshotId
        }

        public init(dictionary: [String: Any]) throws {
            self.configSnapshotId = dictionary["configSnapshotId"] as? String
        }
    }

    public struct ListDiscoveredResourcesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether AWS Config includes deleted resources in the results. By default, deleted resources are not included.
        public var includeDeletedResources: Bool? = nil
        /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// The type of resources that you want AWS Config to list in the response.
        public var resourceType: String = ""
        /// The IDs of only those resources that you want AWS Config to list in the response. If you do not specify this parameter, AWS Config lists all resources of the specified type that it has discovered.
        public var resourceIds: [String]? = nil
        /// The maximum number of resource identifiers returned on each page. The default is 100. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        public var limit: Int32? = nil
        /// The custom name of only those resources that you want AWS Config to list in the response. If you do not specify this parameter, AWS Config lists all resources of the specified type that it has discovered.
        public var resourceName: String? = nil

        public init() {}

        public init(includeDeletedResources: Bool? = nil, nextToken: String? = nil, resourceType: String, resourceIds: [String]? = nil, limit: Int32? = nil, resourceName: String? = nil) {
            self.includeDeletedResources = includeDeletedResources
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.resourceIds = resourceIds
            self.limit = limit
            self.resourceName = resourceName
        }

        public init(dictionary: [String: Any]) throws {
            self.includeDeletedResources = dictionary["includeDeletedResources"] as? Bool
            self.nextToken = dictionary["nextToken"] as? String
            guard let resourceType = dictionary["resourceType"] as? String else { throw InitializableError.missingRequiredParam("resourceType") }
            self.resourceType = resourceType
            if let resourceIds = dictionary["resourceIds"] as? [String] {
                self.resourceIds = resourceIds
            }
            self.limit = dictionary["limit"] as? Int32
            self.resourceName = dictionary["resourceName"] as? String
        }
    }

    public struct DeliverConfigSnapshotRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the delivery channel through which the snapshot is delivered.
        public var deliveryChannelName: String = ""

        public init() {}

        public init(deliveryChannelName: String) {
            self.deliveryChannelName = deliveryChannelName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deliveryChannelName = dictionary["deliveryChannelName"] as? String else { throw InitializableError.missingRequiredParam("deliveryChannelName") }
            self.deliveryChannelName = deliveryChannelName
        }
    }

    public struct DescribeDeliveryChannelsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of delivery channel names.
        public var deliveryChannelNames: [String]? = nil

        public init() {}

        public init(deliveryChannelNames: [String]? = nil) {
            self.deliveryChannelNames = deliveryChannelNames
        }

        public init(dictionary: [String: Any]) throws {
            if let deliveryChannelNames = dictionary["DeliveryChannelNames"] as? [String] {
                self.deliveryChannelNames = deliveryChannelNames
            }
        }
    }

    public struct GetComplianceSummaryByResourceTypeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of resources that are compliant and the number that are noncompliant. If one or more resource types were provided with the request, the numbers are returned for each resource type. The maximum number returned is 100.
        public var complianceSummariesByResourceType: [ComplianceSummaryByResourceType]? = nil

        public init() {}

        public init(complianceSummariesByResourceType: [ComplianceSummaryByResourceType]? = nil) {
            self.complianceSummariesByResourceType = complianceSummariesByResourceType
        }

        public init(dictionary: [String: Any]) throws {
            if let complianceSummariesByResourceType = dictionary["ComplianceSummariesByResourceType"] as? [[String: Any]] {
                self.complianceSummariesByResourceType = try complianceSummariesByResourceType.map({ try ComplianceSummaryByResourceType(dictionary: $0) })
            }
        }
    }

    public struct DeleteEvaluationResultsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the Config rule for which you want to delete the evaluation results.
        public var configRuleName: String = ""

        public init() {}

        public init(configRuleName: String) {
            self.configRuleName = configRuleName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configRuleName = dictionary["ConfigRuleName"] as? String else { throw InitializableError.missingRequiredParam("ConfigRuleName") }
            self.configRuleName = configRuleName
        }
    }

    public struct ConfigurationItem: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier that indicates the ordering of the configuration items of a resource.
        public var configurationStateId: String? = nil
        /// The type of AWS resource.
        public var resourceType: String? = nil
        /// The custom name of the resource, if available.
        public var resourceName: String? = nil
        /// A list of CloudTrail event IDs. A populated field indicates that the current configuration was initiated by the events recorded in the CloudTrail log. For more information about CloudTrail, see What is AWS CloudTrail?. An empty field indicates that the current configuration was not initiated by any event.
        public var relatedEvents: [String]? = nil
        /// A mapping of key value tags associated with the resource.
        public var tags: [String: String]? = nil
        /// The ID of the resource (for example., sg-xxxxxx).
        public var resourceId: String? = nil
        /// The description of the resource configuration.
        public var configuration: String? = nil
        /// A list of related AWS resources.
        public var relationships: [Relationship]? = nil
        /// The Availability Zone associated with the resource.
        public var availabilityZone: String? = nil
        /// The Amazon Resource Name (ARN) of the resource.
        public var arn: String? = nil
        /// The configuration item status.
        public var configurationItemStatus: String? = nil
        /// The time when the configuration recording was initiated.
        public var configurationItemCaptureTime: Date? = nil
        /// The version number of the resource configuration.
        public var version: String? = nil
        /// The 12 digit AWS account ID associated with the resource.
        public var accountId: String? = nil
        /// The time stamp when the resource was created.
        public var resourceCreationTime: Date? = nil
        /// Configuration attributes that AWS Config returns for certain resource types to supplement the information returned for the configuration parameter.
        public var supplementaryConfiguration: [String: String]? = nil
        /// The region where the resource resides.
        public var awsRegion: String? = nil
        /// Unique MD5 hash that represents the configuration item's state. You can use MD5 hash to compare the states of two or more configuration items that are associated with the same resource.
        public var configurationItemMD5Hash: String? = nil

        public init() {}

        public init(configurationStateId: String? = nil, resourceType: String? = nil, resourceName: String? = nil, relatedEvents: [String]? = nil, tags: [String: String]? = nil, resourceId: String? = nil, configuration: String? = nil, relationships: [Relationship]? = nil, availabilityZone: String? = nil, arn: String? = nil, configurationItemStatus: String? = nil, configurationItemCaptureTime: Date? = nil, version: String? = nil, accountId: String? = nil, resourceCreationTime: Date? = nil, supplementaryConfiguration: [String: String]? = nil, awsRegion: String? = nil, configurationItemMD5Hash: String? = nil) {
            self.configurationStateId = configurationStateId
            self.resourceType = resourceType
            self.resourceName = resourceName
            self.relatedEvents = relatedEvents
            self.tags = tags
            self.resourceId = resourceId
            self.configuration = configuration
            self.relationships = relationships
            self.availabilityZone = availabilityZone
            self.arn = arn
            self.configurationItemStatus = configurationItemStatus
            self.configurationItemCaptureTime = configurationItemCaptureTime
            self.version = version
            self.accountId = accountId
            self.resourceCreationTime = resourceCreationTime
            self.supplementaryConfiguration = supplementaryConfiguration
            self.awsRegion = awsRegion
            self.configurationItemMD5Hash = configurationItemMD5Hash
        }

        public init(dictionary: [String: Any]) throws {
            self.configurationStateId = dictionary["configurationStateId"] as? String
            self.resourceType = dictionary["resourceType"] as? String
            self.resourceName = dictionary["resourceName"] as? String
            if let relatedEvents = dictionary["relatedEvents"] as? [String] {
                self.relatedEvents = relatedEvents
            }
            if let tags = dictionary["tags"] as? [String: String] {
                self.tags = tags
            }
            self.resourceId = dictionary["resourceId"] as? String
            self.configuration = dictionary["configuration"] as? String
            if let relationships = dictionary["relationships"] as? [[String: Any]] {
                self.relationships = try relationships.map({ try Relationship(dictionary: $0) })
            }
            self.availabilityZone = dictionary["availabilityZone"] as? String
            self.arn = dictionary["arn"] as? String
            self.configurationItemStatus = dictionary["configurationItemStatus"] as? String
            self.configurationItemCaptureTime = dictionary["configurationItemCaptureTime"] as? Date
            self.version = dictionary["version"] as? String
            self.accountId = dictionary["accountId"] as? String
            self.resourceCreationTime = dictionary["resourceCreationTime"] as? Date
            if let supplementaryConfiguration = dictionary["supplementaryConfiguration"] as? [String: String] {
                self.supplementaryConfiguration = supplementaryConfiguration
            }
            self.awsRegion = dictionary["awsRegion"] as? String
            self.configurationItemMD5Hash = dictionary["configurationItemMD5Hash"] as? String
        }
    }

    public struct PutConfigurationRecorderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The configuration recorder object that records each configuration change made to the resources.
        public var configurationRecorder: ConfigurationRecorder = ConfigurationRecorder()

        public init() {}

        public init(configurationRecorder: ConfigurationRecorder) {
            self.configurationRecorder = configurationRecorder
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationRecorder = dictionary["ConfigurationRecorder"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ConfigurationRecorder") }
            self.configurationRecorder = try Config.ConfigurationRecorder(dictionary: configurationRecorder)
        }
    }

    public struct EvaluationResultIdentifier: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time of the event that triggered the evaluation of your AWS resources. The time can indicate when AWS Config delivered a configuration item change notification, or it can indicate when AWS Config delivered the configuration snapshot, depending on which event triggered the evaluation.
        public var orderingTimestamp: Date? = nil
        /// Identifies an AWS Config rule used to evaluate an AWS resource, and provides the type and ID of the evaluated resource.
        public var evaluationResultQualifier: EvaluationResultQualifier? = nil

        public init() {}

        public init(orderingTimestamp: Date? = nil, evaluationResultQualifier: EvaluationResultQualifier? = nil) {
            self.orderingTimestamp = orderingTimestamp
            self.evaluationResultQualifier = evaluationResultQualifier
        }

        public init(dictionary: [String: Any]) throws {
            self.orderingTimestamp = dictionary["OrderingTimestamp"] as? Date
            if let evaluationResultQualifier = dictionary["EvaluationResultQualifier"] as? [String: Any] { self.evaluationResultQualifier = try Config.EvaluationResultQualifier(dictionary: evaluationResultQualifier) }
        }
    }

    public struct RecordingGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether AWS Config records configuration changes for every supported type of regional resource. If you set this option to true, when AWS Config adds support for a new type of regional resource, it automatically starts recording resources of that type. If you set this option to true, you cannot enumerate a list of resourceTypes.
        public var allSupported: Bool? = nil
        /// Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records. Before you can set this option to true, you must set the allSupported option to true. If you set this option to true, when AWS Config adds support for a new type of global resource, it automatically starts recording resources of that type. The configuration details for any global resource are the same in all regions. To prevent duplicate configuration items, you should consider customizing AWS Config in only one region to record global resources.
        public var includeGlobalResourceTypes: Bool? = nil
        /// A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail). Before you can set this option to true, you must set the allSupported option to false. If you set this option to true, when AWS Config adds support for a new type of resource, it will not record resources of that type unless you manually add that type to your recording group. For a list of valid resourceTypes values, see the resourceType Value column in Supported AWS Resource Types.
        public var resourceTypes: [String]? = nil

        public init() {}

        public init(allSupported: Bool? = nil, includeGlobalResourceTypes: Bool? = nil, resourceTypes: [String]? = nil) {
            self.allSupported = allSupported
            self.includeGlobalResourceTypes = includeGlobalResourceTypes
            self.resourceTypes = resourceTypes
        }

        public init(dictionary: [String: Any]) throws {
            self.allSupported = dictionary["allSupported"] as? Bool
            self.includeGlobalResourceTypes = dictionary["includeGlobalResourceTypes"] as? Bool
            if let resourceTypes = dictionary["resourceTypes"] as? [String] {
                self.resourceTypes = resourceTypes
            }
        }
    }

    public struct GetComplianceDetailsByConfigRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the AWS Config rule for which you want compliance information.
        public var configRuleName: String = ""
        /// The maximum number of evaluation results returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        public var limit: Int32? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE.
        public var complianceTypes: [String]? = nil

        public init() {}

        public init(configRuleName: String, limit: Int32? = nil, nextToken: String? = nil, complianceTypes: [String]? = nil) {
            self.configRuleName = configRuleName
            self.limit = limit
            self.nextToken = nextToken
            self.complianceTypes = complianceTypes
        }

        public init(dictionary: [String: Any]) throws {
            guard let configRuleName = dictionary["ConfigRuleName"] as? String else { throw InitializableError.missingRequiredParam("ConfigRuleName") }
            self.configRuleName = configRuleName
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            if let complianceTypes = dictionary["ComplianceTypes"] as? [String] {
                self.complianceTypes = complianceTypes
            }
        }
    }

    public struct ComplianceSummaryByResourceType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of AWS resources that are compliant or noncompliant, up to a maximum of 100 for each compliance.
        public var complianceSummary: ComplianceSummary? = nil
        /// The type of AWS resource.
        public var resourceType: String? = nil

        public init() {}

        public init(complianceSummary: ComplianceSummary? = nil, resourceType: String? = nil) {
            self.complianceSummary = complianceSummary
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            if let complianceSummary = dictionary["ComplianceSummary"] as? [String: Any] { self.complianceSummary = try Config.ComplianceSummary(dictionary: complianceSummary) }
            self.resourceType = dictionary["ResourceType"] as? String
        }
    }

    public struct PutDeliveryChannelRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The configuration delivery channel object that delivers the configuration information to an Amazon S3 bucket, and to an Amazon SNS topic.
        public var deliveryChannel: DeliveryChannel = DeliveryChannel()

        public init() {}

        public init(deliveryChannel: DeliveryChannel) {
            self.deliveryChannel = deliveryChannel
        }

        public init(dictionary: [String: Any]) throws {
            guard let deliveryChannel = dictionary["DeliveryChannel"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DeliveryChannel") }
            self.deliveryChannel = try Config.DeliveryChannel(dictionary: deliveryChannel)
        }
    }

    public struct Evaluation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the AWS resource complies with the AWS Config rule that it was evaluated against. For the Evaluation data type, AWS Config supports only the COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE values. AWS Config does not support the INSUFFICIENT_DATA value for this data type. Similarly, AWS Config does not accept INSUFFICIENT_DATA as the value for ComplianceType from a PutEvaluations request. For example, an AWS Lambda function for a custom Config rule cannot pass an INSUFFICIENT_DATA value to AWS Config.
        public var complianceType: String = ""
        /// The type of AWS resource that was evaluated.
        public var complianceResourceType: String = ""
        /// The ID of the AWS resource that was evaluated.
        public var complianceResourceId: String = ""
        /// The time of the event in AWS Config that triggered the evaluation. For event-based evaluations, the time indicates when AWS Config created the configuration item that triggered the evaluation. For periodic evaluations, the time indicates when AWS Config triggered the evaluation at the frequency that you specified (for example, every 24 hours).
        public var orderingTimestamp: Date = Date()
        /// Supplementary information about how the evaluation determined the compliance.
        public var annotation: String? = nil

        public init() {}

        public init(complianceType: String, complianceResourceType: String, complianceResourceId: String, orderingTimestamp: Date, annotation: String? = nil) {
            self.complianceType = complianceType
            self.complianceResourceType = complianceResourceType
            self.complianceResourceId = complianceResourceId
            self.orderingTimestamp = orderingTimestamp
            self.annotation = annotation
        }

        public init(dictionary: [String: Any]) throws {
            guard let complianceType = dictionary["ComplianceType"] as? String else { throw InitializableError.missingRequiredParam("ComplianceType") }
            self.complianceType = complianceType
            guard let complianceResourceType = dictionary["ComplianceResourceType"] as? String else { throw InitializableError.missingRequiredParam("ComplianceResourceType") }
            self.complianceResourceType = complianceResourceType
            guard let complianceResourceId = dictionary["ComplianceResourceId"] as? String else { throw InitializableError.missingRequiredParam("ComplianceResourceId") }
            self.complianceResourceId = complianceResourceId
            guard let orderingTimestamp = dictionary["OrderingTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("OrderingTimestamp") }
            self.orderingTimestamp = orderingTimestamp
            self.annotation = dictionary["Annotation"] as? String
        }
    }

    public struct StopConfigurationRecorderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the recorder object that records each configuration change made to the resources.
        public var configurationRecorderName: String = ""

        public init() {}

        public init(configurationRecorderName: String) {
            self.configurationRecorderName = configurationRecorderName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationRecorderName = dictionary["ConfigurationRecorderName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationRecorderName") }
            self.configurationRecorderName = configurationRecorderName
        }
    }

    public struct ConfigRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the AWS Config rule is active or is currently being deleted by AWS Config. It can also indicate the evaluation status for the Config rule. AWS Config sets the state of the rule to EVALUATING temporarily after you use the StartConfigRulesEvaluation request to evaluate your resources against the Config rule. AWS Config sets the state of the rule to DELETING_RESULTS temporarily after you use the DeleteEvaluationResults request to delete the current evaluation results for the Config rule. AWS Config sets the state of a rule to DELETING temporarily after you use the DeleteConfigRule request to delete the rule. After AWS Config deletes the rule, the rule and all of its evaluations are erased and are no longer available.
        public var configRuleState: String? = nil
        /// The name that you assign to the AWS Config rule. The name is required if you are adding a new rule.
        public var configRuleName: String? = nil
        /// A string in JSON format that is passed to the AWS Config rule Lambda function.
        public var inputParameters: String? = nil
        /// The ID of the AWS Config rule.
        public var configRuleId: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS Config rule.
        public var configRuleArn: String? = nil
        /// Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
        public var source: Source = Source()
        /// Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
        public var scope: Scope? = nil
        /// The maximum frequency with which AWS Config runs evaluations for a rule. You can specify a value for MaximumExecutionFrequency when:   You are using an AWS managed rule that is triggered at a periodic frequency.   Your custom rule is triggered when AWS Config delivers the configuration snapshot.   For more information, see ConfigSnapshotDeliveryProperties.
        public var maximumExecutionFrequency: String? = nil
        /// The description that you provide for the AWS Config rule.
        public var description: String? = nil

        public init() {}

        public init(configRuleState: String? = nil, configRuleName: String? = nil, inputParameters: String? = nil, configRuleId: String? = nil, configRuleArn: String? = nil, source: Source, scope: Scope? = nil, maximumExecutionFrequency: String? = nil, description: String? = nil) {
            self.configRuleState = configRuleState
            self.configRuleName = configRuleName
            self.inputParameters = inputParameters
            self.configRuleId = configRuleId
            self.configRuleArn = configRuleArn
            self.source = source
            self.scope = scope
            self.maximumExecutionFrequency = maximumExecutionFrequency
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.configRuleState = dictionary["ConfigRuleState"] as? String
            self.configRuleName = dictionary["ConfigRuleName"] as? String
            self.inputParameters = dictionary["InputParameters"] as? String
            self.configRuleId = dictionary["ConfigRuleId"] as? String
            self.configRuleArn = dictionary["ConfigRuleArn"] as? String
            guard let source = dictionary["Source"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Source") }
            self.source = try Config.Source(dictionary: source)
            if let scope = dictionary["Scope"] as? [String: Any] { self.scope = try Config.Scope(dictionary: scope) }
            self.maximumExecutionFrequency = dictionary["MaximumExecutionFrequency"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct EvaluationResultQualifier: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the evaluated AWS resource.
        public var resourceId: String? = nil
        /// The type of AWS resource that was evaluated.
        public var resourceType: String? = nil
        /// The name of the AWS Config rule that was used in the evaluation.
        public var configRuleName: String? = nil

        public init() {}

        public init(resourceId: String? = nil, resourceType: String? = nil, configRuleName: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.configRuleName = configRuleName
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceId = dictionary["ResourceId"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            self.configRuleName = dictionary["ConfigRuleName"] as? String
        }
    }

    public struct DescribeConfigurationRecorderStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains status of the specified recorders.
        public var configurationRecordersStatus: [ConfigurationRecorderStatus]? = nil

        public init() {}

        public init(configurationRecordersStatus: [ConfigurationRecorderStatus]? = nil) {
            self.configurationRecordersStatus = configurationRecordersStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let configurationRecordersStatus = dictionary["ConfigurationRecordersStatus"] as? [[String: Any]] {
                self.configurationRecordersStatus = try configurationRecordersStatus.map({ try ConfigurationRecorderStatus(dictionary: $0) })
            }
        }
    }

    public struct ComplianceSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time that AWS Config created the compliance summary.
        public var complianceSummaryTimestamp: Date? = nil
        /// The number of AWS Config rules or AWS resources that are noncompliant, up to a maximum of 25 for rules and 100 for resources.
        public var nonCompliantResourceCount: ComplianceContributorCount? = nil
        /// The number of AWS Config rules or AWS resources that are compliant, up to a maximum of 25 for rules and 100 for resources.
        public var compliantResourceCount: ComplianceContributorCount? = nil

        public init() {}

        public init(complianceSummaryTimestamp: Date? = nil, nonCompliantResourceCount: ComplianceContributorCount? = nil, compliantResourceCount: ComplianceContributorCount? = nil) {
            self.complianceSummaryTimestamp = complianceSummaryTimestamp
            self.nonCompliantResourceCount = nonCompliantResourceCount
            self.compliantResourceCount = compliantResourceCount
        }

        public init(dictionary: [String: Any]) throws {
            self.complianceSummaryTimestamp = dictionary["ComplianceSummaryTimestamp"] as? Date
            if let nonCompliantResourceCount = dictionary["NonCompliantResourceCount"] as? [String: Any] { self.nonCompliantResourceCount = try Config.ComplianceContributorCount(dictionary: nonCompliantResourceCount) }
            if let compliantResourceCount = dictionary["CompliantResourceCount"] as? [String: Any] { self.compliantResourceCount = try Config.ComplianceContributorCount(dictionary: compliantResourceCount) }
        }
    }

    public struct Scope: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The resource types of only those AWS resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for ComplianceResourceId.
        public var complianceResourceTypes: [String]? = nil
        /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for ComplianceResourceTypes.
        public var complianceResourceId: String? = nil
        /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule. If you specify a value for TagValue, you must also specify a value for TagKey.
        public var tagValue: String? = nil
        /// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
        public var tagKey: String? = nil

        public init() {}

        public init(complianceResourceTypes: [String]? = nil, complianceResourceId: String? = nil, tagValue: String? = nil, tagKey: String? = nil) {
            self.complianceResourceTypes = complianceResourceTypes
            self.complianceResourceId = complianceResourceId
            self.tagValue = tagValue
            self.tagKey = tagKey
        }

        public init(dictionary: [String: Any]) throws {
            if let complianceResourceTypes = dictionary["ComplianceResourceTypes"] as? [String] {
                self.complianceResourceTypes = complianceResourceTypes
            }
            self.complianceResourceId = dictionary["ComplianceResourceId"] as? String
            self.tagValue = dictionary["TagValue"] as? String
            self.tagKey = dictionary["TagKey"] as? String
        }
    }

    public struct ConfigRuleEvaluationStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time that AWS Config last failed to evaluate your AWS resources against the rule.
        public var lastFailedEvaluationTime: Date? = nil
        /// Indicates whether AWS Config has evaluated your resources against the rule at least once.    true - AWS Config has evaluated your AWS resources against the rule at least once.    false - AWS Config has not once finished evaluating your AWS resources against the rule.  
        public var firstEvaluationStarted: Bool? = nil
        /// The time that AWS Config last successfully evaluated your AWS resources against the rule.
        public var lastSuccessfulEvaluationTime: Date? = nil
        /// The name of the AWS Config rule.
        public var configRuleName: String? = nil
        /// The time that you first activated the AWS Config rule.
        public var firstActivatedTime: Date? = nil
        /// The ID of the AWS Config rule.
        public var configRuleId: String? = nil
        /// The time that AWS Config last successfully invoked the AWS Config rule to evaluate your AWS resources.
        public var lastSuccessfulInvocationTime: Date? = nil
        /// The Amazon Resource Name (ARN) of the AWS Config rule.
        public var configRuleArn: String? = nil
        /// The error code that AWS Config returned when the rule last failed.
        public var lastErrorCode: String? = nil
        /// The error message that AWS Config returned when the rule last failed.
        public var lastErrorMessage: String? = nil
        /// The time that AWS Config last failed to invoke the AWS Config rule to evaluate your AWS resources.
        public var lastFailedInvocationTime: Date? = nil

        public init() {}

        public init(lastFailedEvaluationTime: Date? = nil, firstEvaluationStarted: Bool? = nil, lastSuccessfulEvaluationTime: Date? = nil, configRuleName: String? = nil, firstActivatedTime: Date? = nil, configRuleId: String? = nil, lastSuccessfulInvocationTime: Date? = nil, configRuleArn: String? = nil, lastErrorCode: String? = nil, lastErrorMessage: String? = nil, lastFailedInvocationTime: Date? = nil) {
            self.lastFailedEvaluationTime = lastFailedEvaluationTime
            self.firstEvaluationStarted = firstEvaluationStarted
            self.lastSuccessfulEvaluationTime = lastSuccessfulEvaluationTime
            self.configRuleName = configRuleName
            self.firstActivatedTime = firstActivatedTime
            self.configRuleId = configRuleId
            self.lastSuccessfulInvocationTime = lastSuccessfulInvocationTime
            self.configRuleArn = configRuleArn
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastFailedInvocationTime = lastFailedInvocationTime
        }

        public init(dictionary: [String: Any]) throws {
            self.lastFailedEvaluationTime = dictionary["LastFailedEvaluationTime"] as? Date
            self.firstEvaluationStarted = dictionary["FirstEvaluationStarted"] as? Bool
            self.lastSuccessfulEvaluationTime = dictionary["LastSuccessfulEvaluationTime"] as? Date
            self.configRuleName = dictionary["ConfigRuleName"] as? String
            self.firstActivatedTime = dictionary["FirstActivatedTime"] as? Date
            self.configRuleId = dictionary["ConfigRuleId"] as? String
            self.lastSuccessfulInvocationTime = dictionary["LastSuccessfulInvocationTime"] as? Date
            self.configRuleArn = dictionary["ConfigRuleArn"] as? String
            self.lastErrorCode = dictionary["LastErrorCode"] as? String
            self.lastErrorMessage = dictionary["LastErrorMessage"] as? String
            self.lastFailedInvocationTime = dictionary["LastFailedInvocationTime"] as? Date
        }
    }

    public struct GetComplianceSummaryByConfigRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of AWS Config rules that are compliant and the number that are noncompliant, up to a maximum of 25 for each.
        public var complianceSummary: ComplianceSummary? = nil

        public init() {}

        public init(complianceSummary: ComplianceSummary? = nil) {
            self.complianceSummary = complianceSummary
        }

        public init(dictionary: [String: Any]) throws {
            if let complianceSummary = dictionary["ComplianceSummary"] as? [String: Any] { self.complianceSummary = try Config.ComplianceSummary(dictionary: complianceSummary) }
        }
    }

    public struct GetComplianceSummaryByResourceTypeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specify one or more resource types to get the number of resources that are compliant and the number that are noncompliant for each resource type. For this request, you can specify an AWS resource type such as AWS::EC2::Instance, and you can specify that the resource type is an AWS account by specifying AWS::::Account.
        public var resourceTypes: [String]? = nil

        public init() {}

        public init(resourceTypes: [String]? = nil) {
            self.resourceTypes = resourceTypes
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceTypes = dictionary["ResourceTypes"] as? [String] {
                self.resourceTypes = resourceTypes
            }
        }
    }

    public struct DescribeComplianceByConfigRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specify one or more AWS Config rule names to filter the results by rule.
        public var configRuleNames: [String]? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA.
        public var complianceTypes: [String]? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil, nextToken: String? = nil, complianceTypes: [String]? = nil) {
            self.configRuleNames = configRuleNames
            self.nextToken = nextToken
            self.complianceTypes = complianceTypes
        }

        public init(dictionary: [String: Any]) throws {
            if let configRuleNames = dictionary["ConfigRuleNames"] as? [String] {
                self.configRuleNames = configRuleNames
            }
            self.nextToken = dictionary["NextToken"] as? String
            if let complianceTypes = dictionary["ComplianceTypes"] as? [String] {
                self.complianceTypes = complianceTypes
            }
        }
    }

    public struct GetComplianceDetailsByResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the AWS resource for which you want compliance information.
        public var resourceId: String = ""
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// The type of the AWS resource for which you want compliance information.
        public var resourceType: String = ""
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE.
        public var complianceTypes: [String]? = nil

        public init() {}

        public init(resourceId: String, nextToken: String? = nil, resourceType: String, complianceTypes: [String]? = nil) {
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.complianceTypes = complianceTypes
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            self.nextToken = dictionary["NextToken"] as? String
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
            if let complianceTypes = dictionary["ComplianceTypes"] as? [String] {
                self.complianceTypes = complianceTypes
            }
        }
    }

    public struct ComplianceByResource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the AWS resource complies with all of the AWS Config rules that evaluated it.
        public var compliance: Compliance? = nil
        /// The ID of the AWS resource that was evaluated.
        public var resourceId: String? = nil
        /// The type of the AWS resource that was evaluated.
        public var resourceType: String? = nil

        public init() {}

        public init(compliance: Compliance? = nil, resourceId: String? = nil, resourceType: String? = nil) {
            self.compliance = compliance
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            if let compliance = dictionary["Compliance"] as? [String: Any] { self.compliance = try Config.Compliance(dictionary: compliance) }
            self.resourceId = dictionary["ResourceId"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
        }
    }

    public struct DescribeComplianceByConfigRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether each of the specified AWS Config rules is compliant.
        public var complianceByConfigRules: [ComplianceByConfigRule]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(complianceByConfigRules: [ComplianceByConfigRule]? = nil, nextToken: String? = nil) {
            self.complianceByConfigRules = complianceByConfigRules
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let complianceByConfigRules = dictionary["ComplianceByConfigRules"] as? [[String: Any]] {
                self.complianceByConfigRules = try complianceByConfigRules.map({ try ComplianceByConfigRule(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeConfigRuleEvaluationStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the AWS managed Config rules for which you want status information. If you do not specify any names, AWS Config returns status information for all AWS managed Config rules that you use.
        public var configRuleNames: [String]? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// The number of rule evaluation results that you want returned. This parameter is required if the rule limit for your account is more than the default of 50 rules. For more information about requesting a rule limit increase, see AWS Config Limits in the AWS General Reference Guide.
        public var limit: Int32? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.configRuleNames = configRuleNames
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            if let configRuleNames = dictionary["ConfigRuleNames"] as? [String] {
                self.configRuleNames = configRuleNames
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct DeliveryChannelStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the delivery channel.
        public var name: String? = nil
        /// A list containing the status of the delivery of the configuration stream notification to the specified Amazon SNS topic.
        public var configStreamDeliveryInfo: ConfigStreamDeliveryInfo? = nil
        /// A list that contains the status of the delivery of the configuration history to the specified Amazon S3 bucket.
        public var configHistoryDeliveryInfo: ConfigExportDeliveryInfo? = nil
        /// A list containing the status of the delivery of the snapshot to the specified Amazon S3 bucket.
        public var configSnapshotDeliveryInfo: ConfigExportDeliveryInfo? = nil

        public init() {}

        public init(name: String? = nil, configStreamDeliveryInfo: ConfigStreamDeliveryInfo? = nil, configHistoryDeliveryInfo: ConfigExportDeliveryInfo? = nil, configSnapshotDeliveryInfo: ConfigExportDeliveryInfo? = nil) {
            self.name = name
            self.configStreamDeliveryInfo = configStreamDeliveryInfo
            self.configHistoryDeliveryInfo = configHistoryDeliveryInfo
            self.configSnapshotDeliveryInfo = configSnapshotDeliveryInfo
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            if let configStreamDeliveryInfo = dictionary["configStreamDeliveryInfo"] as? [String: Any] { self.configStreamDeliveryInfo = try Config.ConfigStreamDeliveryInfo(dictionary: configStreamDeliveryInfo) }
            if let configHistoryDeliveryInfo = dictionary["configHistoryDeliveryInfo"] as? [String: Any] { self.configHistoryDeliveryInfo = try Config.ConfigExportDeliveryInfo(dictionary: configHistoryDeliveryInfo) }
            if let configSnapshotDeliveryInfo = dictionary["configSnapshotDeliveryInfo"] as? [String: Any] { self.configSnapshotDeliveryInfo = try Config.ConfigExportDeliveryInfo(dictionary: configSnapshotDeliveryInfo) }
        }
    }

    public struct StartConfigRulesEvaluationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ComplianceByConfigRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the AWS Config rule is compliant.
        public var compliance: Compliance? = nil
        /// The name of the AWS Config rule.
        public var configRuleName: String? = nil

        public init() {}

        public init(compliance: Compliance? = nil, configRuleName: String? = nil) {
            self.compliance = compliance
            self.configRuleName = configRuleName
        }

        public init(dictionary: [String: Any]) throws {
            if let compliance = dictionary["Compliance"] as? [String: Any] { self.compliance = try Config.Compliance(dictionary: compliance) }
            self.configRuleName = dictionary["ConfigRuleName"] as? String
        }
    }

    public struct GetResourceConfigHistoryResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains the configuration history of one or more resources.
        public var configurationItems: [ConfigurationItem]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(configurationItems: [ConfigurationItem]? = nil, nextToken: String? = nil) {
            self.configurationItems = configurationItems
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let configurationItems = dictionary["configurationItems"] as? [[String: Any]] {
                self.configurationItems = try configurationItems.map({ try ConfigurationItem(dictionary: $0) })
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct ComplianceContributorCount: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of AWS resources or AWS Config rules responsible for the current compliance of the item.
        public var cappedCount: Int32? = nil
        /// Indicates whether the maximum count is reached.
        public var capExceeded: Bool? = nil

        public init() {}

        public init(cappedCount: Int32? = nil, capExceeded: Bool? = nil) {
            self.cappedCount = cappedCount
            self.capExceeded = capExceeded
        }

        public init(dictionary: [String: Any]) throws {
            self.cappedCount = dictionary["CappedCount"] as? Int32
            self.capExceeded = dictionary["CapExceeded"] as? Bool
        }
    }

    public struct DeleteConfigurationRecorderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration recorder to be deleted. You can retrieve the name of your configuration recorder by using the DescribeConfigurationRecorders action.
        public var configurationRecorderName: String = ""

        public init() {}

        public init(configurationRecorderName: String) {
            self.configurationRecorderName = configurationRecorderName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationRecorderName = dictionary["ConfigurationRecorderName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationRecorderName") }
            self.configurationRecorderName = configurationRecorderName
        }
    }

    public struct GetResourceConfigHistoryRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time stamp that indicates a later time. If not specified, current time is taken.
        public var laterTime: Date? = nil
        /// The maximum number of configuration items returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        public var limit: Int32? = nil
        /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// The resource type.
        public var resourceType: String = ""
        /// The chronological order for configuration items listed. By default the results are listed in reverse chronological order.
        public var chronologicalOrder: String? = nil
        /// The time stamp that indicates an earlier time. If not specified, the action returns paginated results that contain configuration items that start from when the first configuration item was recorded.
        public var earlierTime: Date? = nil
        /// The ID of the resource (for example., sg-xxxxxx).
        public var resourceId: String = ""

        public init() {}

        public init(laterTime: Date? = nil, limit: Int32? = nil, nextToken: String? = nil, resourceType: String, chronologicalOrder: String? = nil, earlierTime: Date? = nil, resourceId: String) {
            self.laterTime = laterTime
            self.limit = limit
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.chronologicalOrder = chronologicalOrder
            self.earlierTime = earlierTime
            self.resourceId = resourceId
        }

        public init(dictionary: [String: Any]) throws {
            self.laterTime = dictionary["laterTime"] as? Date
            self.limit = dictionary["limit"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
            guard let resourceType = dictionary["resourceType"] as? String else { throw InitializableError.missingRequiredParam("resourceType") }
            self.resourceType = resourceType
            self.chronologicalOrder = dictionary["chronologicalOrder"] as? String
            self.earlierTime = dictionary["earlierTime"] as? Date
            guard let resourceId = dictionary["resourceId"] as? String else { throw InitializableError.missingRequiredParam("resourceId") }
            self.resourceId = resourceId
        }
    }

    public struct Relationship: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The resource type of the related resource.
        public var resourceType: String? = nil
        /// The ID of the related resource (for example, sg-xxxxxx).
        public var resourceId: String? = nil
        /// The custom name of the related resource, if available.
        public var resourceName: String? = nil
        /// The type of relationship with the related resource.
        public var relationshipName: String? = nil

        public init() {}

        public init(resourceType: String? = nil, resourceId: String? = nil, resourceName: String? = nil, relationshipName: String? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.relationshipName = relationshipName
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceType = dictionary["resourceType"] as? String
            self.resourceId = dictionary["resourceId"] as? String
            self.resourceName = dictionary["resourceName"] as? String
            self.relationshipName = dictionary["relationshipName"] as? String
        }
    }

    public struct Compliance: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of AWS resources or AWS Config rules that cause a result of NON_COMPLIANT, up to a maximum number.
        public var complianceContributorCount: ComplianceContributorCount? = nil
        /// Indicates whether an AWS resource or AWS Config rule is compliant. A resource is compliant if it complies with all of the AWS Config rules that evaluate it, and it is noncompliant if it does not comply with one or more of these rules. A rule is compliant if all of the resources that the rule evaluates comply with it, and it is noncompliant if any of these resources do not comply. AWS Config returns the INSUFFICIENT_DATA value when no evaluation results are available for the AWS resource or Config rule. For the Compliance data type, AWS Config supports only COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA values. AWS Config does not support the NOT_APPLICABLE value for the Compliance data type.
        public var complianceType: String? = nil

        public init() {}

        public init(complianceContributorCount: ComplianceContributorCount? = nil, complianceType: String? = nil) {
            self.complianceContributorCount = complianceContributorCount
            self.complianceType = complianceType
        }

        public init(dictionary: [String: Any]) throws {
            if let complianceContributorCount = dictionary["ComplianceContributorCount"] as? [String: Any] { self.complianceContributorCount = try Config.ComplianceContributorCount(dictionary: complianceContributorCount) }
            self.complianceType = dictionary["ComplianceType"] as? String
        }
    }

    public struct DescribeConfigurationRecorderStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name(s) of the configuration recorder. If the name is not specified, the action returns the current status of all the configuration recorders associated with the account.
        public var configurationRecorderNames: [String]? = nil

        public init() {}

        public init(configurationRecorderNames: [String]? = nil) {
            self.configurationRecorderNames = configurationRecorderNames
        }

        public init(dictionary: [String: Any]) throws {
            if let configurationRecorderNames = dictionary["ConfigurationRecorderNames"] as? [String] {
                self.configurationRecorderNames = configurationRecorderNames
            }
        }
    }

    public struct ConfigSnapshotDeliveryProperties: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The frequency with which AWS Config delivers configuration snapshots.
        public var deliveryFrequency: String? = nil

        public init() {}

        public init(deliveryFrequency: String? = nil) {
            self.deliveryFrequency = deliveryFrequency
        }

        public init(dictionary: [String: Any]) throws {
            self.deliveryFrequency = dictionary["deliveryFrequency"] as? String
        }
    }

    public struct ListDiscoveredResourcesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details that identify a resource that is discovered by AWS Config, including the resource type, ID, and (if available) the custom resource name.
        public var resourceIdentifiers: [ResourceIdentifier]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(resourceIdentifiers: [ResourceIdentifier]? = nil, nextToken: String? = nil) {
            self.resourceIdentifiers = resourceIdentifiers
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceIdentifiers = dictionary["resourceIdentifiers"] as? [[String: Any]] {
                self.resourceIdentifiers = try resourceIdentifiers.map({ try ResourceIdentifier(dictionary: $0) })
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DeleteEvaluationResultsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeConfigRulesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details about your AWS Config rules.
        public var configRules: [ConfigRule]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public var nextToken: String? = nil

        public init() {}

        public init(configRules: [ConfigRule]? = nil, nextToken: String? = nil) {
            self.configRules = configRules
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let configRules = dictionary["ConfigRules"] as? [[String: Any]] {
                self.configRules = try configRules.map({ try ConfigRule(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct EvaluationResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Uniquely identifies the evaluation result.
        public var evaluationResultIdentifier: EvaluationResultIdentifier? = nil
        /// The time when the AWS Config rule evaluated the AWS resource.
        public var configRuleInvokedTime: Date? = nil
        /// The time when AWS Config recorded the evaluation result.
        public var resultRecordedTime: Date? = nil
        /// Indicates whether the AWS resource complies with the AWS Config rule that evaluated it. For the EvaluationResult data type, AWS Config supports only the COMPLIANT, NON_COMPLIANT, and NOT_APPLICABLE values. AWS Config does not support the INSUFFICIENT_DATA value for the EvaluationResult data type.
        public var complianceType: String? = nil
        /// An encrypted token that associates an evaluation with an AWS Config rule. The token identifies the rule, the AWS resource being evaluated, and the event that triggered the evaluation.
        public var resultToken: String? = nil
        /// Supplementary information about how the evaluation determined the compliance.
        public var annotation: String? = nil

        public init() {}

        public init(evaluationResultIdentifier: EvaluationResultIdentifier? = nil, configRuleInvokedTime: Date? = nil, resultRecordedTime: Date? = nil, complianceType: String? = nil, resultToken: String? = nil, annotation: String? = nil) {
            self.evaluationResultIdentifier = evaluationResultIdentifier
            self.configRuleInvokedTime = configRuleInvokedTime
            self.resultRecordedTime = resultRecordedTime
            self.complianceType = complianceType
            self.resultToken = resultToken
            self.annotation = annotation
        }

        public init(dictionary: [String: Any]) throws {
            if let evaluationResultIdentifier = dictionary["EvaluationResultIdentifier"] as? [String: Any] { self.evaluationResultIdentifier = try Config.EvaluationResultIdentifier(dictionary: evaluationResultIdentifier) }
            self.configRuleInvokedTime = dictionary["ConfigRuleInvokedTime"] as? Date
            self.resultRecordedTime = dictionary["ResultRecordedTime"] as? Date
            self.complianceType = dictionary["ComplianceType"] as? String
            self.resultToken = dictionary["ResultToken"] as? String
            self.annotation = dictionary["Annotation"] as? String
        }
    }

    public struct DescribeComplianceByResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of evaluation results returned on each page. The default is 10. You cannot specify a limit greater than 100. If you specify 0, AWS Config uses the default.
        public var limit: Int32? = nil
        /// The ID of the AWS resource for which you want compliance information. You can specify only one resource ID. If you specify a resource ID, you must also specify a type for ResourceType.
        public var resourceId: String? = nil
        /// The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
        public var nextToken: String? = nil
        /// The types of AWS resources for which you want compliance information; for example, AWS::EC2::Instance. For this action, you can specify that the resource type is an AWS account by specifying AWS::::Account.
        public var resourceType: String? = nil
        /// Filters the results by compliance. The allowed values are COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA.
        public var complianceTypes: [String]? = nil

        public init() {}

        public init(limit: Int32? = nil, resourceId: String? = nil, nextToken: String? = nil, resourceType: String? = nil, complianceTypes: [String]? = nil) {
            self.limit = limit
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.complianceTypes = complianceTypes
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            self.resourceId = dictionary["ResourceId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            if let complianceTypes = dictionary["ComplianceTypes"] as? [String] {
                self.complianceTypes = complianceTypes
            }
        }
    }

    public struct DescribeDeliveryChannelStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains the status of a specified delivery channel.
        public var deliveryChannelsStatus: [DeliveryChannelStatus]? = nil

        public init() {}

        public init(deliveryChannelsStatus: [DeliveryChannelStatus]? = nil) {
            self.deliveryChannelsStatus = deliveryChannelsStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let deliveryChannelsStatus = dictionary["DeliveryChannelsStatus"] as? [[String: Any]] {
                self.deliveryChannelsStatus = try deliveryChannelsStatus.map({ try DeliveryChannelStatus(dictionary: $0) })
            }
        }
    }

    public struct PutEvaluationsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Requests that failed because of a client or server error.
        public var failedEvaluations: [Evaluation]? = nil

        public init() {}

        public init(failedEvaluations: [Evaluation]? = nil) {
            self.failedEvaluations = failedEvaluations
        }

        public init(dictionary: [String: Any]) throws {
            if let failedEvaluations = dictionary["FailedEvaluations"] as? [[String: Any]] {
                self.failedEvaluations = try failedEvaluations.map({ try Evaluation(dictionary: $0) })
            }
        }
    }

    public struct StartConfigRulesEvaluationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of names of Config rules that you want to run evaluations for.
        public var configRuleNames: [String]? = nil

        public init() {}

        public init(configRuleNames: [String]? = nil) {
            self.configRuleNames = configRuleNames
        }

        public init(dictionary: [String: Any]) throws {
            if let configRuleNames = dictionary["ConfigRuleNames"] as? [String] {
                self.configRuleNames = configRuleNames
            }
        }
    }

    public struct StartConfigurationRecorderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the recorder object that records each configuration change made to the resources.
        public var configurationRecorderName: String = ""

        public init() {}

        public init(configurationRecorderName: String) {
            self.configurationRecorderName = configurationRecorderName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationRecorderName = dictionary["ConfigurationRecorderName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationRecorderName") }
            self.configurationRecorderName = configurationRecorderName
        }
    }

    public struct DeleteDeliveryChannelRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the delivery channel to delete.
        public var deliveryChannelName: String = ""

        public init() {}

        public init(deliveryChannelName: String) {
            self.deliveryChannelName = deliveryChannelName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deliveryChannelName = dictionary["DeliveryChannelName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryChannelName") }
            self.deliveryChannelName = deliveryChannelName
        }
    }

    public struct DescribeDeliveryChannelStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of delivery channel names.
        public var deliveryChannelNames: [String]? = nil

        public init() {}

        public init(deliveryChannelNames: [String]? = nil) {
            self.deliveryChannelNames = deliveryChannelNames
        }

        public init(dictionary: [String: Any]) throws {
            if let deliveryChannelNames = dictionary["DeliveryChannelNames"] as? [String] {
                self.deliveryChannelNames = deliveryChannelNames
            }
        }
    }

    public struct ConfigurationRecorderStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration recorder.
        public var name: String? = nil
        /// The time when the status was last changed.
        public var lastStatusChangeTime: Date? = nil
        /// The time the recorder was last stopped.
        public var lastStopTime: Date? = nil
        /// Specifies whether the recorder is currently recording or not.
        public var recording: Bool? = nil
        /// The error code indicating that the recording failed.
        public var lastErrorCode: String? = nil
        /// The last (previous) status of the recorder.
        public var lastStatus: String? = nil
        /// The time the recorder was last started.
        public var lastStartTime: Date? = nil
        /// The message indicating that the recording failed due to an error.
        public var lastErrorMessage: String? = nil

        public init() {}

        public init(name: String? = nil, lastStatusChangeTime: Date? = nil, lastStopTime: Date? = nil, recording: Bool? = nil, lastErrorCode: String? = nil, lastStatus: String? = nil, lastStartTime: Date? = nil, lastErrorMessage: String? = nil) {
            self.name = name
            self.lastStatusChangeTime = lastStatusChangeTime
            self.lastStopTime = lastStopTime
            self.recording = recording
            self.lastErrorCode = lastErrorCode
            self.lastStatus = lastStatus
            self.lastStartTime = lastStartTime
            self.lastErrorMessage = lastErrorMessage
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            self.lastStatusChangeTime = dictionary["lastStatusChangeTime"] as? Date
            self.lastStopTime = dictionary["lastStopTime"] as? Date
            self.recording = dictionary["recording"] as? Bool
            self.lastErrorCode = dictionary["lastErrorCode"] as? String
            self.lastStatus = dictionary["lastStatus"] as? String
            self.lastStartTime = dictionary["lastStartTime"] as? Date
            self.lastErrorMessage = dictionary["lastErrorMessage"] as? String
        }
    }

    public struct ConfigurationRecorder: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the recorder. By default, AWS Config automatically assigns the name "default" when creating the configuration recorder. You cannot change the assigned name.
        public var name: String? = nil
        /// Specifies the types of AWS resource for which AWS Config records configuration changes.
        public var recordingGroup: RecordingGroup? = nil
        /// Amazon Resource Name (ARN) of the IAM role used to describe the AWS resources associated with the account.
        public var roleARN: String? = nil

        public init() {}

        public init(name: String? = nil, recordingGroup: RecordingGroup? = nil, roleARN: String? = nil) {
            self.name = name
            self.recordingGroup = recordingGroup
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            if let recordingGroup = dictionary["recordingGroup"] as? [String: Any] { self.recordingGroup = try Config.RecordingGroup(dictionary: recordingGroup) }
            self.roleARN = dictionary["roleARN"] as? String
        }
    }

    public struct PutEvaluationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The assessments that the AWS Lambda function performs. Each evaluation identifies an AWS resource and indicates whether it complies with the AWS Config rule that invokes the AWS Lambda function.
        public var evaluations: [Evaluation]? = nil
        /// An encrypted token that associates an evaluation with an AWS Config rule. Identifies the rule and the event that triggered the evaluation
        public var resultToken: String = ""
        /// Use this parameter to specify a test run for PutEvaluations. You can verify whether your AWS Lambda function will deliver evaluation results to AWS Config. No updates occur to your existing evaluations, and evaluation results are not sent to AWS Config.  When TestMode is true, PutEvaluations doesn't require a valid value for the ResultToken parameter, but the value cannot be null. 
        public var testMode: Bool? = nil

        public init() {}

        public init(evaluations: [Evaluation]? = nil, resultToken: String, testMode: Bool? = nil) {
            self.evaluations = evaluations
            self.resultToken = resultToken
            self.testMode = testMode
        }

        public init(dictionary: [String: Any]) throws {
            if let evaluations = dictionary["Evaluations"] as? [[String: Any]] {
                self.evaluations = try evaluations.map({ try Evaluation(dictionary: $0) })
            }
            guard let resultToken = dictionary["ResultToken"] as? String else { throw InitializableError.missingRequiredParam("ResultToken") }
            self.resultToken = resultToken
            self.testMode = dictionary["TestMode"] as? Bool
        }
    }

}