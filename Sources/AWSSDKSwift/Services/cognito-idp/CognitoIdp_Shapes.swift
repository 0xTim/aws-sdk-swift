// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension CognitoIdp {

    public struct DescribeUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct AdminUserGlobalSignOutResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateUserPoolRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Schema", required: false, type: .list), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "AliasAttributes", required: false, type: .list), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "PoolName", required: true, type: .string), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure)
        ]
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// A string representing the email verification subject.
        public let emailVerificationSubject: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
        public let schema: [SchemaAttributeType]?
        /// The policies associated with the new user pool.
        public let policies: UserPoolPolicyType?
        /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
        public let aliasAttributes: [AliasAttributeType]?
        /// The Lambda trigger configuration information for the new user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Specifies MFA configuration details.
        public let mfaConfiguration: UserPoolMfaType?
        /// A string used to name the user pool.
        public let poolName: String
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A string representing the SMS verification message.
        public let smsVerificationMessage: String?
        /// A string representing the email verification message.
        public let emailVerificationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// A string representing the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The attributes to be auto-verified. Possible values: email, phone_number.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, schema: [SchemaAttributeType]? = nil, policies: UserPoolPolicyType? = nil, aliasAttributes: [AliasAttributeType]? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, poolName: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsAuthenticationMessage: String? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.schema = schema
            self.policies = policies
            self.aliasAttributes = aliasAttributes
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.poolName = poolName
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolTags = "UserPoolTags"
            case emailVerificationSubject = "EmailVerificationSubject"
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case schema = "Schema"
            case policies = "Policies"
            case aliasAttributes = "AliasAttributes"
            case lambdaConfig = "LambdaConfig"
            case mfaConfiguration = "MfaConfiguration"
            case poolName = "PoolName"
            case emailConfiguration = "EmailConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case emailVerificationMessage = "EmailVerificationMessage"
            case smsConfiguration = "SmsConfiguration"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
        }
    }

    public struct AddCustomAttributesResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListUsersInGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The users returned in the request to list users.
        public let users: [UserType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(users: [UserType]? = nil, nextToken: String? = nil) {
            self.users = users
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case nextToken = "NextToken"
        }
    }

    public struct NumberAttributeConstraintsType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinValue", required: false, type: .string), 
            AWSShapeMember(label: "MaxValue", required: false, type: .string)
        ]
        /// The minimum value of an attribute that is of the number data type.
        public let minValue: String?
        /// The maximum value of an attribute that is of the number data type.
        public let maxValue: String?

        public init(minValue: String? = nil, maxValue: String? = nil) {
            self.minValue = minValue
            self.maxValue = maxValue
        }

        private enum CodingKeys: String, CodingKey {
            case minValue = "MinValue"
            case maxValue = "MaxValue"
        }
    }

    public enum VerifiedAttributeType: String, CustomStringConvertible, Codable {
        case phone_number = "phone_number"
        case email = "email"
        public var description: String { return self.rawValue }
    }

    public struct ListDevicesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The limit of the device request.
        public let limit: Int32?
        /// The pagination token for the list request.
        public let paginationToken: String?
        /// The access tokens for the request to list devices.
        public let accessToken: String

        public init(limit: Int32? = nil, paginationToken: String? = nil, accessToken: String) {
            self.limit = limit
            self.paginationToken = paginationToken
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case paginationToken = "PaginationToken"
            case accessToken = "AccessToken"
        }
    }

    public struct DeleteUserPoolRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID for the user pool you want to delete.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUserAttributeVerificationCodeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]
        /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct SignUpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "ValidationData", required: false, type: .list), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The password of the user you wish to register.
        public let password: String
        /// The validation data in the request to register a user.
        public let validationData: [AttributeType]?
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user you wish to register.
        public let username: String

        public init(userAttributes: [AttributeType]? = nil, clientId: String, password: String, validationData: [AttributeType]? = nil, secretHash: String? = nil, username: String) {
            self.userAttributes = userAttributes
            self.clientId = clientId
            self.password = password
            self.validationData = validationData
            self.secretHash = secretHash
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributes = "UserAttributes"
            case clientId = "ClientId"
            case password = "Password"
            case validationData = "ValidationData"
            case secretHash = "SecretHash"
            case username = "Username"
        }
    }

    public struct DescribeUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]
        /// The user pool client from a server response to describe the user pool client.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct AdminRespondToAuthChallengeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: true, type: .enum), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The challenge name. For more information, see AdminInitiateAuth.
        public let challengeName: ChallengeNameType
        /// The app client ID.
        public let clientId: String
        /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?
        /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:    SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).    PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).    ADMIN_NO_SRP_AUTH: PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret).     NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).    The value of the USERNAME attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the AdminInitiateAuth response includes the actual username value in the USERNAMEUSER_ID_FOR_SRP attribute, even if you specified an alias in your call to AdminInitiateAuth.
        public let challengeResponses: [String: String]?
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(challengeName: ChallengeNameType, clientId: String, session: String? = nil, challengeResponses: [String: String]? = nil, userPoolId: String) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.session = session
            self.challengeResponses = challengeResponses
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case clientId = "ClientId"
            case session = "Session"
            case challengeResponses = "ChallengeResponses"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminListGroupsForUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The username for the user.
        public let username: String
        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.username = username
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetUserSettingsResponse: AWSShape {
        /// The key for the payload

    }

    public struct ConfirmSignUpResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListUserPoolsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: true, type: .integer)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return when listing the user pools.
        public let maxResults: Int32

        public init(nextToken: String? = nil, maxResults: Int32) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A string containing the new description of the group.
        public let description: String?
        /// The new precedence value for the group. For more information about this parameter, see CreateGroup.
        public let precedence: Int32?
        /// The name of the group.
        public let groupName: String
        /// The new role ARN for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case precedence = "Precedence"
            case groupName = "GroupName"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct InitiateAuthResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The name of the challenge which you are responding to with this call. This is returned to you in the AdminInitiateAuth response if you need to pass another challenge. Valid values include the following. Note that all of these challenges require USERNAME and SECRET_HASH (if applicable) in the parameters.    SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.    PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.    CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.    DEVICE_SRP_AUTH: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.    DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.    NEW_PASSWORD_REQUIRED: For users which are required to change their passwords after successful first login. This challenge should be passed with NEW_PASSWORD and any other required attributes.  
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. These are returned to you in the InitiateAuth response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (RespondToAuthChallenge).  All challenges require USERNAME and SECRET_HASH (if applicable).
        public let challengeParameters: [String: String]?
        /// The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If the InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct DeleteUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// An array of strings representing the user attribute names you wish to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributeNames: [String]
        /// The access token used in the request to delete user attributes.
        public let accessToken: String

        public init(userAttributeNames: [String], accessToken: String) {
            self.userAttributeNames = userAttributeNames
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributeNames = "UserAttributeNames"
            case accessToken = "AccessToken"
        }
    }

    public struct StartUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The access token returned by the server response to get information about the user.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct DescribeUserPoolDomainResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainDescription", required: false, type: .structure)
        ]
        /// A domain description object containing information about the domain.
        public let domainDescription: DomainDescriptionType?

        public init(domainDescription: DomainDescriptionType? = nil) {
            self.domainDescription = domainDescription
        }

        private enum CodingKeys: String, CodingKey {
            case domainDescription = "DomainDescription"
        }
    }

    public struct DeleteUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool where you want to delete the client.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateDeviceStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceRememberedStatus", required: false, type: .enum), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The status of whether a device is remembered.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The access token.
        public let accessToken: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceRememberedStatus = "DeviceRememberedStatus"
            case accessToken = "AccessToken"
        }
    }

    public struct AdminRemoveUserFromGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The username for the user.
        public let username: String
        /// The group name.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminDeleteUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "UserAttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to delete user attributes.
        public let userPoolId: String
        /// An array of strings representing the user attribute names you wish to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributeNames: [String]
        /// The user name of the user from which you would like to delete attributes.
        public let username: String

        public init(userPoolId: String, userAttributeNames: [String], username: String) {
            self.userPoolId = userPoolId
            self.userAttributeNames = userAttributeNames
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case userAttributeNames = "UserAttributeNames"
            case username = "Username"
        }
    }

    public struct UserPoolClientDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The client name from the user pool client description.
        public let clientName: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public let userPoolId: String?

        public init(clientName: String? = nil, clientId: String? = nil, userPoolId: String? = nil) {
            self.clientName = clientName
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientName = "ClientName"
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeviceSecretVerifierConfigType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Salt", required: false, type: .string), 
            AWSShapeMember(label: "PasswordVerifier", required: false, type: .string)
        ]
        /// The salt.
        public let salt: String?
        /// The password verifier.
        public let passwordVerifier: String?

        public init(salt: String? = nil, passwordVerifier: String? = nil) {
            self.salt = salt
            self.passwordVerifier = passwordVerifier
        }

        private enum CodingKeys: String, CodingKey {
            case salt = "Salt"
            case passwordVerifier = "PasswordVerifier"
        }
    }

    public struct GetIdentityProviderByIdentifierResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public enum DomainStatusType: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct IdentityProviderType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderType", required: false, type: .enum), 
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderDetails", required: false, type: .map), 
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType?
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The date the identity provider was last modified.
        public let lastModifiedDate: Double?
        /// The date the identity provider was created.
        public let creationDate: Double?
        /// The identity provider name.
        public let providerName: String?
        /// The identity provider details, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]?
        /// A mapping of identity provider attributes to standard and custom user pool attributes.
        public let attributeMapping: [String: String]?
        /// The user pool ID.
        public let userPoolId: String?

        public init(providerType: IdentityProviderTypeType? = nil, idpIdentifiers: [String]? = nil, lastModifiedDate: Double? = nil, creationDate: Double? = nil, providerName: String? = nil, providerDetails: [String: String]? = nil, attributeMapping: [String: String]? = nil, userPoolId: String? = nil) {
            self.providerType = providerType
            self.idpIdentifiers = idpIdentifiers
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.providerName = providerName
            self.providerDetails = providerDetails
            self.attributeMapping = attributeMapping
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case providerType = "ProviderType"
            case idpIdentifiers = "IdpIdentifiers"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case providerName = "ProviderName"
            case providerDetails = "ProviderDetails"
            case attributeMapping = "AttributeMapping"
            case userPoolId = "UserPoolId"
        }
    }

    public struct RespondToAuthChallengeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The challenge name. For more information, see InitiateAuth.
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. For more information, see InitiateAuth.
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the request to respond to the authentication challenge.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If the InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct ListUserImportJobsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "UserImportJobs", required: false, type: .list)
        ]
        /// An identifier that can be used to return the next set of user import jobs in the list.
        public let paginationToken: String?
        /// The user import jobs.
        public let userImportJobs: [UserImportJobType]?

        public init(paginationToken: String? = nil, userImportJobs: [UserImportJobType]? = nil) {
            self.paginationToken = paginationToken
            self.userImportJobs = userImportJobs
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case userImportJobs = "UserImportJobs"
        }
    }

    public struct CreateUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]
        /// The user pool client that was just created.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The group objects for the groups.
        public let groups: [GroupType]?

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groups = "Groups"
        }
    }

    public struct AdminInitiateAuthRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientMetadata", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AuthParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthFlow", required: true, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
        public let clientMetadata: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow:   For USER_SRP_AUTH: USERNAME (required), SRPA (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: USERNAME (required), SECRET_HASH (required if the app client is configured with a client secret), REFRESH_TOKEN (required), DEVICE_KEY    For ADMIN_NO_SRP_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), PASSWORD (required), DEVICE_KEY    For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY   
        public let authParameters: [String: String]?
        /// The authentication flow for this call to execute. The API action will depend on this value. For example:    REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.    USER_SRP_AUTH will take in USERNAME and SRPA and return the SRP variables to be used for next challenge execution.   Valid values include:    USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.    REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.    CUSTOM_AUTH: Custom authentication flow.    ADMIN_NO_SRP_AUTH: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.  
        public let authFlow: AuthFlowType
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(clientMetadata: [String: String]? = nil, clientId: String, authParameters: [String: String]? = nil, authFlow: AuthFlowType, userPoolId: String) {
            self.clientMetadata = clientMetadata
            self.clientId = clientId
            self.authParameters = authParameters
            self.authFlow = authFlow
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientMetadata = "ClientMetadata"
            case clientId = "ClientId"
            case authParameters = "AuthParameters"
            case authFlow = "AuthFlow"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeIdentityProviderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(providerName: String, userPoolId: String) {
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateUserPoolDomainResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]
        /// The user pool client value from the response from the server when an update user pool client request is made.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct DescribeUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public enum UserImportJobStatusType: String, CustomStringConvertible, Codable {
        case created = "Created"
        case pending = "Pending"
        case inprogress = "InProgress"
        case stopping = "Stopping"
        case expired = "Expired"
        case stopped = "Stopped"
        case failed = "Failed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct UpdateIdentityProviderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "ProviderDetails", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The identity provider name.
        public let providerName: String
        /// The identity provider attribute mapping to be changed.
        public let attributeMapping: [String: String]?
        /// The identity provider details to be updated, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]?
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifiers: [String]? = nil, providerName: String, attributeMapping: [String: String]? = nil, providerDetails: [String: String]? = nil, userPoolId: String) {
            self.idpIdentifiers = idpIdentifiers
            self.providerName = providerName
            self.attributeMapping = attributeMapping
            self.providerDetails = providerDetails
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifiers = "IdpIdentifiers"
            case providerName = "ProviderName"
            case attributeMapping = "AttributeMapping"
            case providerDetails = "ProviderDetails"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The access token from a request to delete a user.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct GlobalSignOutRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The access token.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct CreateUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "ClientName", required: true, type: .string), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "GenerateSecret", required: false, type: .boolean)
        ]
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?
        /// Set to True if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// The write attributes.
        public let writeAttributes: [String]?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// The read attributes.
        public let readAttributes: [String]?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// A list of allowed callback URLs for the identity providers.
        public let callbackURLs: [String]?
        /// The user pool ID for the user pool where you want to create a user pool client.
        public let userPoolId: String
        /// The client name for the user pool client you would like to create.
        public let clientName: String
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// The default redirect URI. Must be in the CallbackURLs list.
        public let defaultRedirectURI: String?
        /// Boolean to specify whether you want to generate a secret for the user pool client being created.
        public let generateSecret: Bool?

        public init(allowedOAuthScopes: [String]? = nil, allowedOAuthFlowsUserPoolClient: Bool? = nil, writeAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, readAttributes: [String]? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, callbackURLs: [String]? = nil, userPoolId: String, clientName: String, supportedIdentityProviders: [String]? = nil, logoutURLs: [String]? = nil, allowedOAuthFlows: [OAuthFlowType]? = nil, defaultRedirectURI: String? = nil, generateSecret: Bool? = nil) {
            self.allowedOAuthScopes = allowedOAuthScopes
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.writeAttributes = writeAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.readAttributes = readAttributes
            self.explicitAuthFlows = explicitAuthFlows
            self.callbackURLs = callbackURLs
            self.userPoolId = userPoolId
            self.clientName = clientName
            self.supportedIdentityProviders = supportedIdentityProviders
            self.logoutURLs = logoutURLs
            self.allowedOAuthFlows = allowedOAuthFlows
            self.defaultRedirectURI = defaultRedirectURI
            self.generateSecret = generateSecret
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthScopes = "AllowedOAuthScopes"
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case writeAttributes = "WriteAttributes"
            case refreshTokenValidity = "RefreshTokenValidity"
            case readAttributes = "ReadAttributes"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case callbackURLs = "CallbackURLs"
            case userPoolId = "UserPoolId"
            case clientName = "ClientName"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case logoutURLs = "LogoutURLs"
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case defaultRedirectURI = "DefaultRedirectURI"
            case generateSecret = "GenerateSecret"
        }
    }

    public struct AttributeType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.
        public let name: String

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct VerifyUserAttributeResponse: AWSShape {
        /// The key for the payload

    }

    public enum AliasAttributeType: String, CustomStringConvertible, Codable {
        case phone_number = "phone_number"
        case email = "email"
        case preferred_username = "preferred_username"
        public var description: String { return self.rawValue }
    }

    public struct DomainDescriptionType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "AWSAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontDistribution", required: false, type: .string), 
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The domain status.
        public let status: DomainStatusType?
        /// The AWS account ID for the user pool owner.
        public let aWSAccountId: String?
        /// The app version.
        public let version: String?
        /// The ARN of the CloudFront distribution.
        public let cloudFrontDistribution: String?
        /// The S3 bucket where the static files for this domain are stored.
        public let s3Bucket: String?
        /// The domain string.
        public let domain: String?
        /// The user pool ID.
        public let userPoolId: String?

        public init(status: DomainStatusType? = nil, aWSAccountId: String? = nil, version: String? = nil, cloudFrontDistribution: String? = nil, s3Bucket: String? = nil, domain: String? = nil, userPoolId: String? = nil) {
            self.status = status
            self.aWSAccountId = aWSAccountId
            self.version = version
            self.cloudFrontDistribution = cloudFrontDistribution
            self.s3Bucket = s3Bucket
            self.domain = domain
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case aWSAccountId = "AWSAccountId"
            case version = "Version"
            case cloudFrontDistribution = "CloudFrontDistribution"
            case s3Bucket = "S3Bucket"
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UserPoolClientType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ClientSecret", required: false, type: .string), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list)
        ]
        /// Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// The writeable attributes.
        public let writeAttributes: [String]?
        /// The Read-only attributes.
        public let readAttributes: [String]?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// The date the user pool client was created.
        public let creationDate: Double?
        /// The client secret from the user pool request of the client type.
        public let clientSecret: String?
        /// A list of allowed callback URLs for the identity providers.
        public let callbackURLs: [String]?
        /// The user pool ID for the user pool client.
        public let userPoolId: String?
        /// The client name from the user pool request of the client type.
        public let clientName: String?
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// A list ofallowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// The date the user pool client was last modified.
        public let lastModifiedDate: Double?
        /// The default redirect URI. Must be in the CallbackURLs list.
        public let defaultRedirectURI: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?

        public init(allowedOAuthFlowsUserPoolClient: Bool? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, creationDate: Double? = nil, clientSecret: String? = nil, callbackURLs: [String]? = nil, userPoolId: String? = nil, clientName: String? = nil, supportedIdentityProviders: [String]? = nil, logoutURLs: [String]? = nil, allowedOAuthFlows: [OAuthFlowType]? = nil, lastModifiedDate: Double? = nil, defaultRedirectURI: String? = nil, clientId: String? = nil, allowedOAuthScopes: [String]? = nil) {
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.explicitAuthFlows = explicitAuthFlows
            self.creationDate = creationDate
            self.clientSecret = clientSecret
            self.callbackURLs = callbackURLs
            self.userPoolId = userPoolId
            self.clientName = clientName
            self.supportedIdentityProviders = supportedIdentityProviders
            self.logoutURLs = logoutURLs
            self.allowedOAuthFlows = allowedOAuthFlows
            self.lastModifiedDate = lastModifiedDate
            self.defaultRedirectURI = defaultRedirectURI
            self.clientId = clientId
            self.allowedOAuthScopes = allowedOAuthScopes
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case refreshTokenValidity = "RefreshTokenValidity"
            case writeAttributes = "WriteAttributes"
            case readAttributes = "ReadAttributes"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case creationDate = "CreationDate"
            case clientSecret = "ClientSecret"
            case callbackURLs = "CallbackURLs"
            case userPoolId = "UserPoolId"
            case clientName = "ClientName"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case logoutURLs = "LogoutURLs"
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case lastModifiedDate = "LastModifiedDate"
            case defaultRedirectURI = "DefaultRedirectURI"
            case clientId = "ClientId"
            case allowedOAuthScopes = "AllowedOAuthScopes"
        }
    }

    public struct CreateUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job name for the user import job.
        public let jobName: String
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job.
        public let cloudWatchLogsRoleArn: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobName: String, cloudWatchLogsRoleArn: String, userPoolId: String) {
            self.jobName = jobName
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeleteIdentityProviderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(providerName: String, userPoolId: String) {
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SchemaAttributeType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberAttributeConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "DeveloperOnlyAttribute", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AttributeDataType", required: false, type: .enum), 
            AWSShapeMember(label: "StringAttributeConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "Required", required: false, type: .boolean), 
            AWSShapeMember(label: "Mutable", required: false, type: .boolean)
        ]
        /// Specifies the constraints for an attribute of the number type.
        public let numberAttributeConstraints: NumberAttributeConstraintsType?
        /// Specifies whether the attribute type is developer only.
        public let developerOnlyAttribute: Bool?
        /// A schema attribute of the name type.
        public let name: String?
        /// The attribute data type.
        public let attributeDataType: AttributeDataType?
        /// Specifies the constraints for an attribute of the string type.
        public let stringAttributeConstraints: StringAttributeConstraintsType?
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
        public let required: Bool?
        /// Specifies whether the attribute can be changed once it has been created.
        public let mutable: Bool?

        public init(numberAttributeConstraints: NumberAttributeConstraintsType? = nil, developerOnlyAttribute: Bool? = nil, name: String? = nil, attributeDataType: AttributeDataType? = nil, stringAttributeConstraints: StringAttributeConstraintsType? = nil, required: Bool? = nil, mutable: Bool? = nil) {
            self.numberAttributeConstraints = numberAttributeConstraints
            self.developerOnlyAttribute = developerOnlyAttribute
            self.name = name
            self.attributeDataType = attributeDataType
            self.stringAttributeConstraints = stringAttributeConstraints
            self.required = required
            self.mutable = mutable
        }

        private enum CodingKeys: String, CodingKey {
            case numberAttributeConstraints = "NumberAttributeConstraints"
            case developerOnlyAttribute = "DeveloperOnlyAttribute"
            case name = "Name"
            case attributeDataType = "AttributeDataType"
            case stringAttributeConstraints = "StringAttributeConstraints"
            case required = "Required"
            case mutable = "Mutable"
        }
    }

    public struct ConfirmForgotPasswordRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ConfirmationCode", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The confirmation code sent by a user's request to retrieve a forgotten password. For more information, see ForgotPassword 
        public let confirmationCode: String
        /// The password sent by a user's request to retrieve a forgotten password.
        public let password: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user for whom you want to enter a code to retrieve a forgotten password.
        public let username: String

        public init(clientId: String, confirmationCode: String, password: String, secretHash: String? = nil, username: String) {
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.password = password
            self.secretHash = secretHash
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case confirmationCode = "ConfirmationCode"
            case password = "Password"
            case secretHash = "SecretHash"
            case username = "Username"
        }
    }

    public struct ConfirmSignUpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForceAliasCreation", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ConfirmationCode", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
        public let forceAliasCreation: Bool?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The confirmation code sent by a user's request to confirm registration.
        public let confirmationCode: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user whose registration you wish to confirm.
        public let username: String

        public init(forceAliasCreation: Bool? = nil, clientId: String, confirmationCode: String, secretHash: String? = nil, username: String) {
            self.forceAliasCreation = forceAliasCreation
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.secretHash = secretHash
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case forceAliasCreation = "ForceAliasCreation"
            case clientId = "ClientId"
            case confirmationCode = "ConfirmationCode"
            case secretHash = "SecretHash"
            case username = "Username"
        }
    }

    public struct DescribeIdentityProviderResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The identity provider that was deleted.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct GroupType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The user pool ID for the user pool.
        public let userPoolId: String?
        /// The name of the group.
        public let groupName: String?
        /// The date the group was last modified.
        public let lastModifiedDate: Double?
        /// The date the group was created.
        public let creationDate: Double?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Groups with higher Precedence values take precedence over groups with lower Precedence values or with null Precedence values. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The role ARN for the group.
        public let roleArn: String?
        /// A string containing the description of the group.
        public let description: String?

        public init(userPoolId: String? = nil, groupName: String? = nil, lastModifiedDate: Double? = nil, creationDate: Double? = nil, precedence: Int32? = nil, roleArn: String? = nil, description: String? = nil) {
            self.userPoolId = userPoolId
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case groupName = "GroupName"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case precedence = "Precedence"
            case roleArn = "RoleArn"
            case description = "Description"
        }
    }

    public enum AuthFlowType: String, CustomStringConvertible, Codable {
        case user_srp_auth = "USER_SRP_AUTH"
        case refresh_token_auth = "REFRESH_TOKEN_AUTH"
        case refresh_token = "REFRESH_TOKEN"
        case custom_auth = "CUSTOM_AUTH"
        case admin_no_srp_auth = "ADMIN_NO_SRP_AUTH"
        public var description: String { return self.rawValue }
    }

    public struct StopUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct AdminEnableUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to enable the user.
        public let userPoolId: String
        /// The user name of the user you wish to enable.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct ForgotPasswordRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user name of the user for whom you want to enter a code to reset a forgotten password.
        public let username: String

        public init(secretHash: String? = nil, clientId: String, username: String) {
            self.secretHash = secretHash
            self.clientId = clientId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case secretHash = "SecretHash"
            case clientId = "ClientId"
            case username = "Username"
        }
    }

    public struct AdminListDevicesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user name.
        public let username: String
        /// The pagination token.
        public let paginationToken: String?
        /// The limit of the devices request.
        public let limit: Int32?
        /// The user pool ID.
        public let userPoolId: String

        public init(username: String, paginationToken: String? = nil, limit: Int32? = nil, userPoolId: String) {
            self.username = username
            self.paginationToken = paginationToken
            self.limit = limit
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case paginationToken = "PaginationToken"
            case limit = "Limit"
            case userPoolId = "UserPoolId"
        }
    }

    public enum UserStatusType: String, CustomStringConvertible, Codable {
        case unconfirmed = "UNCONFIRMED"
        case confirmed = "CONFIRMED"
        case archived = "ARCHIVED"
        case compromised = "COMPROMISED"
        case unknown = "UNKNOWN"
        case reset_required = "RESET_REQUIRED"
        case force_change_password = "FORCE_CHANGE_PASSWORD"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDeviceStatusResponse: AWSShape {
        /// The key for the payload

    }

    public struct GetUserAttributeVerificationCodeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The attribute name returned by the server response to get the user attribute verification code.
        public let attributeName: String
        /// The access token returned by the server response to get the user attribute verification code.
        public let accessToken: String

        public init(attributeName: String, accessToken: String) {
            self.attributeName = attributeName
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case accessToken = "AccessToken"
        }
    }

    public struct AdminInitiateAuthResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The name of the challenge which you are responding to with this call. This is returned to you in the AdminInitiateAuth response if you need to pass another challenge.    SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.    PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.    CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.    DEVICE_SRP_AUTH: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.    DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.    ADMIN_NO_SRP_AUTH: This is returned if you need to authenticate with USERNAME and PASSWORD directly. An app client must be enabled to use this flow.    NEW_PASSWORD_REQUIRED: For users which are required to change their passwords after successful first login. This challenge should be passed with NEW_PASSWORD and any other required attributes.  
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. These are returned to you in the AdminInitiateAuth response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (AdminRespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable). The value of the USER_IF_FOR_SRP attribute will be the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to AdminInitiateAuth. This is because, in the AdminRespondToAuthChallenge API ChallengeResponses, the USERNAME attribute cannot be an alias.
        public let challengeParameters: [String: String]?
        /// The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If AdminInitiateAuth or AdminRespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next AdminRespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct AdminDeleteUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to delete the user.
        public let userPoolId: String
        /// The user name of the user you wish to delete.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct GetGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUserImportJobsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: true, type: .integer)
        ]
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String
        /// An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list.
        public let paginationToken: String?
        /// The maximum number of import jobs you want the request to return.
        public let maxResults: Int32

        public init(userPoolId: String, paginationToken: String? = nil, maxResults: Int32) {
            self.userPoolId = userPoolId
            self.paginationToken = paginationToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case paginationToken = "PaginationToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AdminResetUserPasswordRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to reset the user's password.
        public let userPoolId: String
        /// The user name of the user whose password you wish to reset.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct ChangePasswordRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreviousPassword", required: true, type: .string), 
            AWSShapeMember(label: "ProposedPassword", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The old password in the change password request.
        public let previousPassword: String
        /// The new password in the change password request.
        public let proposedPassword: String
        /// The access token in the change password request.
        public let accessToken: String

        public init(previousPassword: String, proposedPassword: String, accessToken: String) {
            self.previousPassword = previousPassword
            self.proposedPassword = proposedPassword
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case previousPassword = "PreviousPassword"
            case proposedPassword = "ProposedPassword"
            case accessToken = "AccessToken"
        }
    }

    public struct UserPoolDescriptionType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The date the user pool description was last modified.
        public let lastModifiedDate: Double?
        /// The date the user pool description was created.
        public let creationDate: Double?
        /// The user pool status in a user pool description.
        public let status: StatusType?
        /// The AWS Lambda configuration information in a user pool description.
        public let lambdaConfig: LambdaConfigType?
        /// The name in a user pool description.
        public let name: String?
        /// The ID in a user pool description.
        public let id: String?

        public init(lastModifiedDate: Double? = nil, creationDate: Double? = nil, status: StatusType? = nil, lambdaConfig: LambdaConfigType? = nil, name: String? = nil, id: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.status = status
            self.lambdaConfig = lambdaConfig
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case status = "Status"
            case lambdaConfig = "LambdaConfig"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct DeviceConfigurationType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceOnlyRememberedOnUserPrompt", required: false, type: .boolean), 
            AWSShapeMember(label: "ChallengeRequiredOnNewDevice", required: false, type: .boolean)
        ]
        /// If true, a device is only remembered on user prompt.
        public let deviceOnlyRememberedOnUserPrompt: Bool?
        /// Indicates whether a challenge is required on a new device. Only applicable to a new device.
        public let challengeRequiredOnNewDevice: Bool?

        public init(deviceOnlyRememberedOnUserPrompt: Bool? = nil, challengeRequiredOnNewDevice: Bool? = nil) {
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
        }

        private enum CodingKeys: String, CodingKey {
            case deviceOnlyRememberedOnUserPrompt = "DeviceOnlyRememberedOnUserPrompt"
            case challengeRequiredOnNewDevice = "ChallengeRequiredOnNewDevice"
        }
    }

    public struct ListUserPoolsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPools", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The user pools from the response to list users.
        public let userPools: [UserPoolDescriptionType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(userPools: [UserPoolDescriptionType]? = nil, nextToken: String? = nil) {
            self.userPools = userPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case userPools = "UserPools"
            case nextToken = "NextToken"
        }
    }

    public struct AdminGetUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "UserLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list)
        ]
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public let userStatus: UserStatusType?
        /// Indicates that the status is enabled.
        public let enabled: Bool?
        /// The user name of the user about whom you are receiving information.
        public let username: String
        /// The date the user was created.
        public let userCreateDate: Double?
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The date the user was last modified.
        public let userLastModifiedDate: Double?
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]?

        public init(userStatus: UserStatusType? = nil, enabled: Bool? = nil, username: String, userCreateDate: Double? = nil, mFAOptions: [MFAOptionType]? = nil, userLastModifiedDate: Double? = nil, userAttributes: [AttributeType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.mFAOptions = mFAOptions
            self.userLastModifiedDate = userLastModifiedDate
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case userStatus = "UserStatus"
            case enabled = "Enabled"
            case username = "Username"
            case userCreateDate = "UserCreateDate"
            case mFAOptions = "MFAOptions"
            case userLastModifiedDate = "UserLastModifiedDate"
            case userAttributes = "UserAttributes"
        }
    }

    public struct ListUsersInGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The name of the group.
        public let groupName: String
        /// The limit of the request to list users.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.groupName = groupName
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateIdentityProviderResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The newly created identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct CreateGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A string containing the description of the group.
        public let description: String?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The name of the group. Must be unique.
        public let groupName: String
        /// The role ARN for the group.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case precedence = "Precedence"
            case groupName = "GroupName"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct MessageTemplateType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailSubject", required: false, type: .string)
        ]
        /// The message template for SMS messages.
        public let sMSMessage: String?
        /// The message template for email messages.
        public let emailMessage: String?
        /// The subject line for email messages.
        public let emailSubject: String?

        public init(sMSMessage: String? = nil, emailMessage: String? = nil, emailSubject: String? = nil) {
            self.sMSMessage = sMSMessage
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
        }

        private enum CodingKeys: String, CodingKey {
            case sMSMessage = "SMSMessage"
            case emailMessage = "EmailMessage"
            case emailSubject = "EmailSubject"
        }
    }

    public struct ConfirmDeviceResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserConfirmationNecessary", required: false, type: .boolean)
        ]
        /// Indicates whether the user confirmation is necessary to confirm the device response.
        public let userConfirmationNecessary: Bool?

        public init(userConfirmationNecessary: Bool? = nil) {
            self.userConfirmationNecessary = userConfirmationNecessary
        }

        private enum CodingKeys: String, CodingKey {
            case userConfirmationNecessary = "UserConfirmationNecessary"
        }
    }

    public struct StartUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct AdminDisableUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to disable the user.
        public let userPoolId: String
        /// The user name of the user you wish to disable.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct UpdateUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// The access token for the request to update user attributes.
        public let accessToken: String

        public init(userAttributes: [AttributeType], accessToken: String) {
            self.userAttributes = userAttributes
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributes = "UserAttributes"
            case accessToken = "AccessToken"
        }
    }

    public struct MFAOptionType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryMedium", required: false, type: .enum)
        ]
        /// The attribute name of the MFA option type.
        public let attributeName: String?
        /// The delivery medium (email message or SMS message) to send the MFA code.
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case deliveryMedium = "DeliveryMedium"
        }
    }

    public struct ConfirmForgotPasswordResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeUserPoolRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The user name of the user you wish to retrieve from the get user request.
        public let username: String

        public init(userAttributes: [AttributeType], mFAOptions: [MFAOptionType]? = nil, username: String) {
            self.userAttributes = userAttributes
            self.mFAOptions = mFAOptions
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributes = "UserAttributes"
            case mFAOptions = "MFAOptions"
            case username = "Username"
        }
    }

    public struct AdminSetUserSettingsResponse: AWSShape {
        /// The key for the payload

    }

    public enum DeviceRememberedStatusType: String, CustomStringConvertible, Codable {
        case remembered = "remembered"
        case not_remembered = "not_remembered"
        public var description: String { return self.rawValue }
    }

    public struct AdminRespondToAuthChallengeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The name of the challenge. For more information, see AdminInitiateAuth.
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. For more information, see AdminInitiateAuth.
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the authentication request.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If the InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct UpdateUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list)
        ]
        /// Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// The writeable attributes of the user pool.
        public let writeAttributes: [String]?
        /// The read-only attributes of the user pool.
        public let readAttributes: [String]?
        /// Explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// A list of allowed callback URLs for the identity providers.
        public let callbackURLs: [String]?
        /// The user pool ID for the user pool where you want to update the user pool client.
        public let userPoolId: String
        /// The client name from the update user pool client request.
        public let clientName: String?
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// A list ofallowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// The default redirect URI. Must be in the CallbackURLs list.
        public let defaultRedirectURI: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?

        public init(allowedOAuthFlowsUserPoolClient: Bool? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, callbackURLs: [String]? = nil, userPoolId: String, clientName: String? = nil, supportedIdentityProviders: [String]? = nil, logoutURLs: [String]? = nil, allowedOAuthFlows: [OAuthFlowType]? = nil, defaultRedirectURI: String? = nil, clientId: String, allowedOAuthScopes: [String]? = nil) {
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.explicitAuthFlows = explicitAuthFlows
            self.callbackURLs = callbackURLs
            self.userPoolId = userPoolId
            self.clientName = clientName
            self.supportedIdentityProviders = supportedIdentityProviders
            self.logoutURLs = logoutURLs
            self.allowedOAuthFlows = allowedOAuthFlows
            self.defaultRedirectURI = defaultRedirectURI
            self.clientId = clientId
            self.allowedOAuthScopes = allowedOAuthScopes
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case refreshTokenValidity = "RefreshTokenValidity"
            case writeAttributes = "WriteAttributes"
            case readAttributes = "ReadAttributes"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case callbackURLs = "CallbackURLs"
            case userPoolId = "UserPoolId"
            case clientName = "ClientName"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case logoutURLs = "LogoutURLs"
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case defaultRedirectURI = "DefaultRedirectURI"
            case clientId = "ClientId"
            case allowedOAuthScopes = "AllowedOAuthScopes"
        }
    }

    public struct DeleteUserPoolDomainResponse: AWSShape {
        /// The key for the payload

    }

    public struct DeviceType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: false, type: .string), 
            AWSShapeMember(label: "DeviceLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeviceAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeviceLastAuthenticatedDate", required: false, type: .timestamp)
        ]
        /// The device key.
        public let deviceKey: String?
        /// The last modified date of the device.
        public let deviceLastModifiedDate: Double?
        /// The device attributes.
        public let deviceAttributes: [AttributeType]?
        /// The creation date of the device.
        public let deviceCreateDate: Double?
        /// The date in which the device was last authenticated.
        public let deviceLastAuthenticatedDate: Double?

        public init(deviceKey: String? = nil, deviceLastModifiedDate: Double? = nil, deviceAttributes: [AttributeType]? = nil, deviceCreateDate: Double? = nil, deviceLastAuthenticatedDate: Double? = nil) {
            self.deviceKey = deviceKey
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceLastModifiedDate = "DeviceLastModifiedDate"
            case deviceAttributes = "DeviceAttributes"
            case deviceCreateDate = "DeviceCreateDate"
            case deviceLastAuthenticatedDate = "DeviceLastAuthenticatedDate"
        }
    }

    public struct AdminUpdateDeviceStatusResponse: AWSShape {
        /// The key for the payload

    }

    public enum MessageActionType: String, CustomStringConvertible, Codable {
        case resend = "RESEND"
        case suppress = "SUPPRESS"
        public var description: String { return self.rawValue }
    }

    public struct AdminUpdateUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user name of the user for whom you want to update user attributes.
        public let username: String
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// The user pool ID for the user pool where you want to update user attributes.
        public let userPoolId: String

        public init(username: String, userAttributes: [AttributeType], userPoolId: String) {
            self.username = username
            self.userAttributes = userAttributes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userAttributes = "UserAttributes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SmsConfigurationType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "SnsCallerArn", required: true, type: .string)
        ]
        /// The external ID.
        public let externalId: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
        public let snsCallerArn: String

        public init(externalId: String? = nil, snsCallerArn: String) {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case snsCallerArn = "SnsCallerArn"
        }
    }

    public struct CodeDeliveryDetailsType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "Destination", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryMedium", required: false, type: .enum)
        ]
        /// The name of the attribute in the code delivery details type.
        public let attributeName: String?
        /// The destination for the code delivery details.
        public let destination: String?
        /// The delivery medium (email message or phone number).
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, destination: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.destination = destination
            self.deliveryMedium = deliveryMedium
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case destination = "Destination"
            case deliveryMedium = "DeliveryMedium"
        }
    }

    public struct GetCSVHeaderResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSVHeader", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The header information for the .csv file for the user import job.
        public let cSVHeader: [String]?
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String?

        public init(cSVHeader: [String]? = nil, userPoolId: String? = nil) {
            self.cSVHeader = cSVHeader
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case cSVHeader = "CSVHeader"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminEnableUserResponse: AWSShape {
        /// The key for the payload

    }

    public struct AdminConfirmSignUpRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for which you want to confirm user registration.
        public let userPoolId: String
        /// The user name for which you want to confirm user registration.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct ForgetDeviceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The access token for the forgotten device request.
        public let accessToken: String?

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case accessToken = "AccessToken"
        }
    }

    public struct ListUsersResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string)
        ]
        /// The users returned in the request to list users.
        public let users: [UserType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?

        public init(users: [UserType]? = nil, paginationToken: String? = nil) {
            self.users = users
            self.paginationToken = paginationToken
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case paginationToken = "PaginationToken"
        }
    }

    public struct UserPoolType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailConfigurationFailure", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "EstimatedNumberOfUsers", required: false, type: .integer), 
            AWSShapeMember(label: "AliasAttributes", required: false, type: .list), 
            AWSShapeMember(label: "SchemaAttributes", required: false, type: .list), 
            AWSShapeMember(label: "SmsConfigurationFailure", required: false, type: .string), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure)
        ]
        /// The reason why the email configuration cannot send the messages to your users.
        public let emailConfigurationFailure: String?
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// A number estimating the size of the user pool.
        public let estimatedNumberOfUsers: Int32?
        /// Specifies the attributes that are aliased in a user pool.
        public let aliasAttributes: [AliasAttributeType]?
        /// A container with the schema attributes of a user pool.
        public let schemaAttributes: [SchemaAttributeType]?
        /// The reason why the SMS configuration cannot send the messages to your users.
        public let smsConfigurationFailure: String?
        /// A container for the AWS Lambda triggers associated with a user pool.
        public let lambdaConfig: LambdaConfigType?
        /// A container for the policies associated with a user pool.
        public let policies: UserPoolPolicyType?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The date the user pool was created.
        public let creationDate: Double?
        /// The ID of the user pool.
        public let id: String?
        /// The status of a user pool.
        public let status: StatusType?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The contents of the SMS verification message.
        public let smsVerificationMessage: String?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The name of the user pool.
        public let name: String?
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// The date the user pool was last modified.
        public let lastModifiedDate: Double?
        /// Specifies the attributes that are auto-verified in a user pool.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(emailConfigurationFailure: String? = nil, userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, estimatedNumberOfUsers: Int32? = nil, aliasAttributes: [AliasAttributeType]? = nil, schemaAttributes: [SchemaAttributeType]? = nil, smsConfigurationFailure: String? = nil, lambdaConfig: LambdaConfigType? = nil, policies: UserPoolPolicyType? = nil, mfaConfiguration: UserPoolMfaType? = nil, creationDate: Double? = nil, id: String? = nil, status: StatusType? = nil, smsConfiguration: SmsConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, name: String? = nil, emailConfiguration: EmailConfigurationType? = nil, emailVerificationMessage: String? = nil, lastModifiedDate: Double? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.emailConfigurationFailure = emailConfigurationFailure
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.aliasAttributes = aliasAttributes
            self.schemaAttributes = schemaAttributes
            self.smsConfigurationFailure = smsConfigurationFailure
            self.lambdaConfig = lambdaConfig
            self.policies = policies
            self.mfaConfiguration = mfaConfiguration
            self.creationDate = creationDate
            self.id = id
            self.status = status
            self.smsConfiguration = smsConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.name = name
            self.emailConfiguration = emailConfiguration
            self.emailVerificationMessage = emailVerificationMessage
            self.lastModifiedDate = lastModifiedDate
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case emailConfigurationFailure = "EmailConfigurationFailure"
            case userPoolTags = "UserPoolTags"
            case emailVerificationSubject = "EmailVerificationSubject"
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case estimatedNumberOfUsers = "EstimatedNumberOfUsers"
            case aliasAttributes = "AliasAttributes"
            case schemaAttributes = "SchemaAttributes"
            case smsConfigurationFailure = "SmsConfigurationFailure"
            case lambdaConfig = "LambdaConfig"
            case policies = "Policies"
            case mfaConfiguration = "MfaConfiguration"
            case creationDate = "CreationDate"
            case id = "Id"
            case status = "Status"
            case smsConfiguration = "SmsConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case name = "Name"
            case emailConfiguration = "EmailConfiguration"
            case emailVerificationMessage = "EmailVerificationMessage"
            case lastModifiedDate = "LastModifiedDate"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
        }
    }

    public struct GetDeviceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The access token.
        public let accessToken: String?

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case accessToken = "AccessToken"
        }
    }

    public struct ListDevicesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// The pagination token for the list device response.
        public let paginationToken: String?
        /// The devices returned in the list devices response.
        public let devices: [DeviceType]?

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case devices = "Devices"
        }
    }

    public struct CreateUserPoolResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPool", required: false, type: .structure)
        ]
        /// A container for the user pool details.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        private enum CodingKeys: String, CodingKey {
            case userPool = "UserPool"
        }
    }

    public struct ProviderDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderType", required: false, type: .enum)
        ]
        /// The date the provider was last modified.
        public let lastModifiedDate: Double?
        /// The date the provider was added to the user pool.
        public let creationDate: Double?
        /// The identity provider name.
        public let providerName: String?
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType?

        public init(lastModifiedDate: Double? = nil, creationDate: Double? = nil, providerName: String? = nil, providerType: IdentityProviderTypeType? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.providerName = providerName
            self.providerType = providerType
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
        }
    }

    public struct ResendConfirmationCodeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]
        /// The code delivery details returned by the server in response to the request to resend the confirmation code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct AdminConfirmSignUpResponse: AWSShape {
        /// The key for the payload

    }

    public struct RespondToAuthChallengeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: true, type: .enum), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .map)
        ]
        /// The challenge name. For more information, see InitiateAuth.  ADMIN_NO_SRP_AUTH is not a valid value.
        public let challengeName: ChallengeNameType
        /// The app client ID.
        public let clientId: String
        /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?
        /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:    SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).    PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).    NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).   
        public let challengeResponses: [String: String]?

        public init(challengeName: ChallengeNameType, clientId: String, session: String? = nil, challengeResponses: [String: String]? = nil) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.session = session
            self.challengeResponses = challengeResponses
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case clientId = "ClientId"
            case session = "Session"
            case challengeResponses = "ChallengeResponses"
        }
    }

    public struct CreateUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct UpdateUserPoolResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateUserPoolRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure)
        ]
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// A container with the policies you wish to update in a user pool.
        public let policies: UserPoolPolicyType?
        /// The AWS Lambda configuration information from the request to update the user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The user pool ID for the user pool you want to update.
        public let userPoolId: String
        /// Email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A container with information about the SMS verification message.
        public let smsVerificationMessage: String?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// Device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, policies: UserPoolPolicyType? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, userPoolId: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.policies = policies
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.userPoolId = userPoolId
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolTags = "UserPoolTags"
            case emailVerificationSubject = "EmailVerificationSubject"
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case policies = "Policies"
            case lambdaConfig = "LambdaConfig"
            case mfaConfiguration = "MfaConfiguration"
            case userPoolId = "UserPoolId"
            case emailConfiguration = "EmailConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case emailVerificationMessage = "EmailVerificationMessage"
            case smsConfiguration = "SmsConfiguration"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
        }
    }

    public struct LambdaConfigType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PostAuthentication", required: false, type: .string), 
            AWSShapeMember(label: "CustomMessage", required: false, type: .string), 
            AWSShapeMember(label: "PreSignUp", required: false, type: .string), 
            AWSShapeMember(label: "VerifyAuthChallengeResponse", required: false, type: .string), 
            AWSShapeMember(label: "DefineAuthChallenge", required: false, type: .string), 
            AWSShapeMember(label: "CreateAuthChallenge", required: false, type: .string), 
            AWSShapeMember(label: "PreAuthentication", required: false, type: .string), 
            AWSShapeMember(label: "PostConfirmation", required: false, type: .string)
        ]
        /// A post-authentication AWS Lambda trigger.
        public let postAuthentication: String?
        /// A custom Message AWS Lambda trigger.
        public let customMessage: String?
        /// A pre-registration AWS Lambda trigger.
        public let preSignUp: String?
        /// Verifies the authentication challenge response.
        public let verifyAuthChallengeResponse: String?
        /// Defines the authentication challenge.
        public let defineAuthChallenge: String?
        /// Creates an authentication challenge.
        public let createAuthChallenge: String?
        /// A pre-authentication AWS Lambda trigger.
        public let preAuthentication: String?
        /// A post-confirmation AWS Lambda trigger.
        public let postConfirmation: String?

        public init(postAuthentication: String? = nil, customMessage: String? = nil, preSignUp: String? = nil, verifyAuthChallengeResponse: String? = nil, defineAuthChallenge: String? = nil, createAuthChallenge: String? = nil, preAuthentication: String? = nil, postConfirmation: String? = nil) {
            self.postAuthentication = postAuthentication
            self.customMessage = customMessage
            self.preSignUp = preSignUp
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
            self.defineAuthChallenge = defineAuthChallenge
            self.createAuthChallenge = createAuthChallenge
            self.preAuthentication = preAuthentication
            self.postConfirmation = postConfirmation
        }

        private enum CodingKeys: String, CodingKey {
            case postAuthentication = "PostAuthentication"
            case customMessage = "CustomMessage"
            case preSignUp = "PreSignUp"
            case verifyAuthChallengeResponse = "VerifyAuthChallengeResponse"
            case defineAuthChallenge = "DefineAuthChallenge"
            case createAuthChallenge = "CreateAuthChallenge"
            case preAuthentication = "PreAuthentication"
            case postConfirmation = "PostConfirmation"
        }
    }

    public enum AttributeDataType: String, CustomStringConvertible, Codable {
        case string = "String"
        case number = "Number"
        case datetime = "DateTime"
        case boolean = "Boolean"
        public var description: String { return self.rawValue }
    }

    public struct DescribeUserPoolDomainRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string)
        ]
        /// The domain string.
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    public struct ListGroupsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetUserSettingsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFAOptions", required: true, type: .list), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The access token for the set user settings request.
        public let accessToken: String

        public init(mFAOptions: [MFAOptionType], accessToken: String) {
            self.mFAOptions = mFAOptions
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case mFAOptions = "MFAOptions"
            case accessToken = "AccessToken"
        }
    }

    public struct GetIdentityProviderByIdentifierRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identity provider ID.
        public let idpIdentifier: String
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifier: String, userPoolId: String) {
            self.idpIdentifier = idpIdentifier
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifier = "IdpIdentifier"
            case userPoolId = "UserPoolId"
        }
    }

    public enum IdentityProviderTypeType: String, CustomStringConvertible, Codable {
        case saml = "SAML"
        public var description: String { return self.rawValue }
    }

    public struct AdminGetUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to get information about the user.
        public let userPoolId: String
        /// The user name of the user you wish to retrieve.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public struct AuthenticationResultType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpiresIn", required: false, type: .integer), 
            AWSShapeMember(label: "NewDeviceMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "IdToken", required: false, type: .string), 
            AWSShapeMember(label: "TokenType", required: false, type: .string), 
            AWSShapeMember(label: "RefreshToken", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The expiration period of the authentication result.
        public let expiresIn: Int32?
        /// The new device metadata from an authentication result.
        public let newDeviceMetadata: NewDeviceMetadataType?
        /// The ID token of the authentication result.
        public let idToken: String?
        /// The token type of the authentication result.
        public let tokenType: String?
        /// The refresh token of the authentication result.
        public let refreshToken: String?
        /// The access token of the authentication result.
        public let accessToken: String?

        public init(expiresIn: Int32? = nil, newDeviceMetadata: NewDeviceMetadataType? = nil, idToken: String? = nil, tokenType: String? = nil, refreshToken: String? = nil, accessToken: String? = nil) {
            self.expiresIn = expiresIn
            self.newDeviceMetadata = newDeviceMetadata
            self.idToken = idToken
            self.tokenType = tokenType
            self.refreshToken = refreshToken
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case expiresIn = "ExpiresIn"
            case newDeviceMetadata = "NewDeviceMetadata"
            case idToken = "IdToken"
            case tokenType = "TokenType"
            case refreshToken = "RefreshToken"
            case accessToken = "AccessToken"
        }
    }

    public enum OAuthFlowType: String, CustomStringConvertible, Codable {
        case code = "code"
        case implicit = "implicit"
        case client_credentials = "client_credentials"
        public var description: String { return self.rawValue }
    }

    public struct AdminCreateUserConfigType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowAdminCreateUserOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "UnusedAccountValidityDays", required: false, type: .integer), 
            AWSShapeMember(label: "InviteMessageTemplate", required: false, type: .structure)
        ]
        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public let allowAdminCreateUserOnly: Bool?
        /// The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this parameter is 7.
        public let unusedAccountValidityDays: Int32?
        /// The message template to be used for the welcome message to new users.
        public let inviteMessageTemplate: MessageTemplateType?

        public init(allowAdminCreateUserOnly: Bool? = nil, unusedAccountValidityDays: Int32? = nil, inviteMessageTemplate: MessageTemplateType? = nil) {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.unusedAccountValidityDays = unusedAccountValidityDays
            self.inviteMessageTemplate = inviteMessageTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case allowAdminCreateUserOnly = "AllowAdminCreateUserOnly"
            case unusedAccountValidityDays = "UnusedAccountValidityDays"
            case inviteMessageTemplate = "InviteMessageTemplate"
        }
    }

    public struct ListIdentityProvidersResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Providers", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of identity provider objects.
        public let providers: [ProviderDescription]
        /// A pagination token.
        public let nextToken: String?

        public init(providers: [ProviderDescription], nextToken: String? = nil) {
            self.providers = providers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case providers = "Providers"
            case nextToken = "NextToken"
        }
    }

    public struct UserPoolPolicyType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordPolicy", required: false, type: .structure)
        ]
        /// A container for information about the user pool password policy.
        public let passwordPolicy: PasswordPolicyType?

        public init(passwordPolicy: PasswordPolicyType? = nil) {
            self.passwordPolicy = passwordPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case passwordPolicy = "PasswordPolicy"
        }
    }

    public struct ForgotPasswordResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]
        /// The code delivery details returned by the server in response to the request to reset a password.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct StringAttributeConstraintsType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinLength", required: false, type: .string), 
            AWSShapeMember(label: "MaxLength", required: false, type: .string)
        ]
        /// The minimum length of an attribute value of the string type.
        public let minLength: String?
        /// The maximum length of an attribute value of the string type.
        public let maxLength: String?

        public init(minLength: String? = nil, maxLength: String? = nil) {
            self.minLength = minLength
            self.maxLength = maxLength
        }

        private enum CodingKeys: String, CodingKey {
            case minLength = "MinLength"
            case maxLength = "MaxLength"
        }
    }

    public struct CreateGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public struct GlobalSignOutResponse: AWSShape {
        /// The key for the payload

    }

    public enum ExplicitAuthFlowsType: String, CustomStringConvertible, Codable {
        case admin_no_srp_auth = "ADMIN_NO_SRP_AUTH"
        case custom_auth_flow_only = "CUSTOM_AUTH_FLOW_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum UserPoolMfaType: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case on = "ON"
        case optional = "OPTIONAL"
        public var description: String { return self.rawValue }
    }

    public struct NewDeviceMetadataType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceGroupKey", required: false, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: false, type: .string)
        ]
        /// The device group key.
        public let deviceGroupKey: String?
        /// The device key.
        public let deviceKey: String?

        public init(deviceGroupKey: String? = nil, deviceKey: String? = nil) {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }

        private enum CodingKeys: String, CodingKey {
            case deviceGroupKey = "DeviceGroupKey"
            case deviceKey = "DeviceKey"
        }
    }

    public struct DescribeUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SignUpResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure), 
            AWSShapeMember(label: "UserConfirmed", required: true, type: .boolean), 
            AWSShapeMember(label: "UserSub", required: true, type: .string)
        ]
        /// The code delivery details returned by the server response to the user registration request.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?
        /// A response from the server indicating that a user registration has been confirmed.
        public let userConfirmed: Bool
        /// The UUID of the authenticated user. This is not the same as username.
        public let userSub: String

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil, userConfirmed: Bool, userSub: String) {
            self.codeDeliveryDetails = codeDeliveryDetails
            self.userConfirmed = userConfirmed
            self.userSub = userSub
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
            case userConfirmed = "UserConfirmed"
            case userSub = "UserSub"
        }
    }

    public struct UpdateGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public struct CreateUserPoolDomainRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The domain string.
        public let domain: String
        /// The user pool ID.
        public let userPoolId: String

        public init(domain: String, userPoolId: String) {
            self.domain = domain
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public enum DeliveryMediumType: String, CustomStringConvertible, Codable {
        case sms = "SMS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct AdminResetUserPasswordResponse: AWSShape {
        /// The key for the payload

    }

    public enum ChallengeNameType: String, CustomStringConvertible, Codable {
        case sms_mfa = "SMS_MFA"
        case password_verifier = "PASSWORD_VERIFIER"
        case custom_challenge = "CUSTOM_CHALLENGE"
        case device_srp_auth = "DEVICE_SRP_AUTH"
        case device_password_verifier = "DEVICE_PASSWORD_VERIFIER"
        case admin_no_srp_auth = "ADMIN_NO_SRP_AUTH"
        case new_password_required = "NEW_PASSWORD_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public struct AdminSetUserSettingsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "MFAOptions", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to set the user's settings, such as MFA options.
        public let userPoolId: String
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The user name of the user for whom you wish to set user settings.
        public let username: String

        public init(userPoolId: String, mFAOptions: [MFAOptionType], username: String) {
            self.userPoolId = userPoolId
            self.mFAOptions = mFAOptions
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case mFAOptions = "MFAOptions"
            case username = "Username"
        }
    }

    public struct AdminDisableUserResponse: AWSShape {
        /// The key for the payload

    }

    public struct AdminDeleteUserAttributesResponse: AWSShape {
        /// The key for the payload

    }

    public struct DeleteUserPoolDomainRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The domain string.
        public let domain: String
        /// The user pool ID.
        public let userPoolId: String

        public init(domain: String, userPoolId: String) {
            self.domain = domain
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct StopUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetCSVHeaderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct ResendConfirmationCodeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user name of the user to whom you wish to resend a confirmation code.
        public let username: String

        public init(secretHash: String? = nil, clientId: String, username: String) {
            self.secretHash = secretHash
            self.clientId = clientId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case secretHash = "SecretHash"
            case clientId = "ClientId"
            case username = "Username"
        }
    }

    public struct DescribeUserPoolResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPool", required: false, type: .structure)
        ]
        /// The container of metadata returned by the server to describe the pool.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        private enum CodingKeys: String, CodingKey {
            case userPool = "UserPool"
        }
    }

    public struct AddCustomAttributesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomAttributes", required: true, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// An array of custom attributes, such as Mutable and Name.
        public let customAttributes: [SchemaAttributeType]
        /// The user pool ID for the user pool where you want to add custom attributes.
        public let userPoolId: String

        public init(customAttributes: [SchemaAttributeType], userPoolId: String) {
            self.customAttributes = customAttributes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case customAttributes = "CustomAttributes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateUserAttributesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetailsList", required: false, type: .list)
        ]
        /// The code delivery details list from the server for the request to update user attributes.
        public let codeDeliveryDetailsList: [CodeDeliveryDetailsType]?

        public init(codeDeliveryDetailsList: [CodeDeliveryDetailsType]? = nil) {
            self.codeDeliveryDetailsList = codeDeliveryDetailsList
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetailsList = "CodeDeliveryDetailsList"
        }
    }

    public struct UserImportJobType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CompletionMessage", required: false, type: .string), 
            AWSShapeMember(label: "FailedUsers", required: false, type: .long), 
            AWSShapeMember(label: "SkippedUsers", required: false, type: .long), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "ImportedUsers", required: false, type: .long)
        ]
        /// The date when the user import job was completed.
        public let completionDate: Double?
        /// The message returned when the user import job is completed.
        public let completionMessage: String?
        /// The number of users that could not be imported.
        public let failedUsers: Int64?
        /// The number of users that were skipped.
        public let skippedUsers: Int64?
        /// The date the user import job was created.
        public let creationDate: Double?
        /// The job ID for the user import job.
        public let jobId: String?
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String?
        /// The status of the user import job. One of the following:    Created - The job was created but not started.    Pending - A transition state. You have started the job, but it has not begun importing users yet.    InProgress - The job has started, and users are being imported.    Stopping - You have stopped the job, but the job has not stopped importing users yet.    Stopped - You have stopped the job, and the job has stopped importing users.    Succeeded - The job has completed successfully.    Failed - The job has stopped due to an error.    Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.  
        public let status: UserImportJobStatusType?
        /// The pre-signed URL to be used to upload the .csv file.
        public let preSignedUrl: String?
        /// The date when the user import job was started.
        public let startDate: Double?
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public let cloudWatchLogsRoleArn: String?
        /// The job name for the user import job.
        public let jobName: String?
        /// The number of users that were successfully imported.
        public let importedUsers: Int64?

        public init(completionDate: Double? = nil, completionMessage: String? = nil, failedUsers: Int64? = nil, skippedUsers: Int64? = nil, creationDate: Double? = nil, jobId: String? = nil, userPoolId: String? = nil, status: UserImportJobStatusType? = nil, preSignedUrl: String? = nil, startDate: Double? = nil, cloudWatchLogsRoleArn: String? = nil, jobName: String? = nil, importedUsers: Int64? = nil) {
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.failedUsers = failedUsers
            self.skippedUsers = skippedUsers
            self.creationDate = creationDate
            self.jobId = jobId
            self.userPoolId = userPoolId
            self.status = status
            self.preSignedUrl = preSignedUrl
            self.startDate = startDate
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.jobName = jobName
            self.importedUsers = importedUsers
        }

        private enum CodingKeys: String, CodingKey {
            case completionDate = "CompletionDate"
            case completionMessage = "CompletionMessage"
            case failedUsers = "FailedUsers"
            case skippedUsers = "SkippedUsers"
            case creationDate = "CreationDate"
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
            case status = "Status"
            case preSignedUrl = "PreSignedUrl"
            case startDate = "StartDate"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case jobName = "JobName"
            case importedUsers = "ImportedUsers"
        }
    }

    public struct AdminUpdateUserAttributesResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateIdentityProviderResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct DeleteUserAttributesResponse: AWSShape {
        /// The key for the payload

    }

    public struct ConfirmDeviceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceSecretVerifierConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The configuration of the device secret verifier.
        public let deviceSecretVerifierConfig: DeviceSecretVerifierConfigType?
        /// The device name.
        public let deviceName: String?
        /// The access token.
        public let accessToken: String

        public init(deviceKey: String, deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil, deviceName: String? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
            self.deviceName = deviceName
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceSecretVerifierConfig = "DeviceSecretVerifierConfig"
            case deviceName = "DeviceName"
            case accessToken = "AccessToken"
        }
    }

    public struct AdminCreateUserRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForceAliasCreation", required: false, type: .boolean), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "DesiredDeliveryMediums", required: false, type: .list), 
            AWSShapeMember(label: "MessageAction", required: false, type: .enum), 
            AWSShapeMember(label: "ValidationData", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "TemporaryPassword", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list)
        ]
        /// This parameter is only used if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
        public let forceAliasCreation: Bool?
        /// The user pool ID for the user pool where the user will be created.
        public let userPoolId: String
        /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". More than one value can be specified.
        public let desiredDeliveryMediums: [DeliveryMediumType]?
        /// Set to "RESEND" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to "SUPPRESS" to suppress sending the message. Only one value can be specified.
        public let messageAction: MessageActionType?
        /// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain. To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process. The user's validation data is not persisted.
        public let validationData: [AttributeType]?
        /// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
        public let username: String
        /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins. This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter.
        public let temporaryPassword: String?
        /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the Attributes tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message). For custom attributes, you must prepend the custom: prefix to the attribute name. To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. (You can also do this by calling AdminUpdateUserAttributes.)    email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.    phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.  
        public let userAttributes: [AttributeType]?

        public init(forceAliasCreation: Bool? = nil, userPoolId: String, desiredDeliveryMediums: [DeliveryMediumType]? = nil, messageAction: MessageActionType? = nil, validationData: [AttributeType]? = nil, username: String, temporaryPassword: String? = nil, userAttributes: [AttributeType]? = nil) {
            self.forceAliasCreation = forceAliasCreation
            self.userPoolId = userPoolId
            self.desiredDeliveryMediums = desiredDeliveryMediums
            self.messageAction = messageAction
            self.validationData = validationData
            self.username = username
            self.temporaryPassword = temporaryPassword
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case forceAliasCreation = "ForceAliasCreation"
            case userPoolId = "UserPoolId"
            case desiredDeliveryMediums = "DesiredDeliveryMediums"
            case messageAction = "MessageAction"
            case validationData = "ValidationData"
            case username = "Username"
            case temporaryPassword = "TemporaryPassword"
            case userAttributes = "UserAttributes"
        }
    }

    public struct AdminListGroupsForUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The groups that the user belongs to.
        public let groups: [GroupType]?

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groups = "Groups"
        }
    }

    public struct AdminListDevicesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// The pagination token.
        public let paginationToken: String?
        /// The devices in the list of devices response.
        public let devices: [DeviceType]?

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case devices = "Devices"
        }
    }

    public struct PasswordPolicyType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinimumLength", required: false, type: .integer), 
            AWSShapeMember(label: "RequireLowercase", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireSymbols", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireUppercase", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireNumbers", required: false, type: .boolean)
        ]
        /// The minimum length of the password policy that you have set. Cannot be less than 6.
        public let minimumLength: Int32?
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public let requireLowercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public let requireSymbols: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public let requireUppercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public let requireNumbers: Bool?

        public init(minimumLength: Int32? = nil, requireLowercase: Bool? = nil, requireSymbols: Bool? = nil, requireUppercase: Bool? = nil, requireNumbers: Bool? = nil) {
            self.minimumLength = minimumLength
            self.requireLowercase = requireLowercase
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.requireNumbers = requireNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case minimumLength = "MinimumLength"
            case requireLowercase = "RequireLowercase"
            case requireSymbols = "RequireSymbols"
            case requireUppercase = "RequireUppercase"
            case requireNumbers = "RequireNumbers"
        }
    }

    public struct UserType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "UserCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "UserLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list)
        ]
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public let userStatus: UserStatusType?
        /// Specifies whether the user is enabled.
        public let enabled: Bool?
        /// The user name of the user you wish to describe.
        public let username: String?
        /// The creation date of the user.
        public let userCreateDate: Double?
        /// A container with information about the user type attributes.
        public let attributes: [AttributeType]?
        /// The last modified date of the user.
        public let userLastModifiedDate: Double?
        /// The MFA options for the user.
        public let mFAOptions: [MFAOptionType]?

        public init(userStatus: UserStatusType? = nil, enabled: Bool? = nil, username: String? = nil, userCreateDate: Double? = nil, attributes: [AttributeType]? = nil, userLastModifiedDate: Double? = nil, mFAOptions: [MFAOptionType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.attributes = attributes
            self.userLastModifiedDate = userLastModifiedDate
            self.mFAOptions = mFAOptions
        }

        private enum CodingKeys: String, CodingKey {
            case userStatus = "UserStatus"
            case enabled = "Enabled"
            case username = "Username"
            case userCreateDate = "UserCreateDate"
            case attributes = "Attributes"
            case userLastModifiedDate = "UserLastModifiedDate"
            case mFAOptions = "MFAOptions"
        }
    }

    public struct ListUsersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributesToGet", required: false, type: .list), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is empty, all attributes are returned.
        public let attributesToGet: [String]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?
        /// Maximum number of users to be returned.
        public let limit: Int32?
        /// A filter string of the form "AttributeName Filter-Type "AttributeValue"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".    AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.    Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".     AttributeValue: The attribute value that must be matched for each user.   If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:    username (case-sensitive)    email     phone_number     name     given_name     family_name     preferred_username     cognito:user_status (called Enabled in the Console) (case-sensitive)    status (case-insensitive)   Custom attributes are not searchable. For more information, see Searching for Users Using the ListUsers API and Examples of Using the ListUsers API in the Amazon Cognito Developer Guide.
        public let filter: String?
        /// The user pool ID for the user pool on which the search should be performed.
        public let userPoolId: String

        public init(attributesToGet: [String]? = nil, paginationToken: String? = nil, limit: Int32? = nil, filter: String? = nil, userPoolId: String) {
            self.attributesToGet = attributesToGet
            self.paginationToken = paginationToken
            self.limit = limit
            self.filter = filter
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case paginationToken = "PaginationToken"
            case limit = "Limit"
            case filter = "Filter"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetDeviceResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .structure)
        ]
        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct AdminGetDeviceResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .structure)
        ]
        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct AdminUpdateDeviceStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceRememberedStatus", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The status indicating whether a device has been remembered or not.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceRememberedStatus = "DeviceRememberedStatus"
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct VerifyUserAttributeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "Code", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The attribute name in the request to verify user attributes.
        public let attributeName: String
        /// The verification code in the request to verify user attributes.
        public let code: String
        /// Represents the access token of the request to verify user attributes.
        public let accessToken: String

        public init(attributeName: String, code: String, accessToken: String) {
            self.attributeName = attributeName
            self.code = code
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case code = "Code"
            case accessToken = "AccessToken"
        }
    }

    public struct ChangePasswordResponse: AWSShape {
        /// The key for the payload

    }

    public struct AdminForgetDeviceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(deviceKey: String, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct ListIdentityProvidersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The user pool ID.
        public let userPoolId: String
        /// A pagination token.
        public let nextToken: String?
        /// The maximum number of identity providers to return.
        public let maxResults: Int32?

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AdminGetDeviceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(deviceKey: String, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.username = username
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct InitiateAuthRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientMetadata", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AuthParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthFlow", required: true, type: .enum)
        ]
        /// This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
        public let clientMetadata: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow:   For USER_SRP_AUTH: USERNAME (required), SRPA (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: USERNAME (required), SECRET_HASH (required if the app client is configured with a client secret), REFRESH_TOKEN (required), DEVICE_KEY    For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY   
        public let authParameters: [String: String]?
        /// The authentication flow for this call to execute. The API action will depend on this value. For example:     REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.    USER_SRP_AUTH will take in USERNAME and SRPA and return the SRP variables to be used for next challenge execution.   Valid values include:    USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.    REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.    CUSTOM_AUTH: Custom authentication flow.    ADMIN_NO_SRP_AUTH is not a valid value.
        public let authFlow: AuthFlowType

        public init(clientMetadata: [String: String]? = nil, clientId: String, authParameters: [String: String]? = nil, authFlow: AuthFlowType) {
            self.clientMetadata = clientMetadata
            self.clientId = clientId
            self.authParameters = authParameters
            self.authFlow = authFlow
        }

        private enum CodingKeys: String, CodingKey {
            case clientMetadata = "ClientMetadata"
            case clientId = "ClientId"
            case authParameters = "AuthParameters"
            case authFlow = "AuthFlow"
        }
    }

    public struct ListUserPoolClientsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The user pool ID for the user pool where you want to list user pool clients.
        public let userPoolId: String
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return when listing the user pool clients.
        public let maxResults: Int32?

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AdminAddUserToGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The username for the user.
        public let username: String
        /// The group name.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateIdentityProviderRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "ProviderType", required: true, type: .enum), 
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "ProviderDetails", required: true, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The identity provider name.
        public let providerName: String
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType
        /// A mapping of identity provider attributes to standard and custom user pool attributes.
        public let attributeMapping: [String: String]?
        /// The identity provider details, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifiers: [String]? = nil, providerName: String, providerType: IdentityProviderTypeType, attributeMapping: [String: String]? = nil, providerDetails: [String: String], userPoolId: String) {
            self.idpIdentifiers = idpIdentifiers
            self.providerName = providerName
            self.providerType = providerType
            self.attributeMapping = attributeMapping
            self.providerDetails = providerDetails
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifiers = "IdpIdentifiers"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
            case attributeMapping = "AttributeMapping"
            case providerDetails = "ProviderDetails"
            case userPoolId = "UserPoolId"
        }
    }

    public struct EmailConfigurationType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplyToEmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string)
        ]
        /// The REPLY-TO email address.
        public let replyToEmailAddress: String?
        /// The Amazon Resource Name (ARN) of the email source.
        public let sourceArn: String?

        public init(replyToEmailAddress: String? = nil, sourceArn: String? = nil) {
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case replyToEmailAddress = "ReplyToEmailAddress"
            case sourceArn = "SourceArn"
        }
    }

    public struct AdminUserGlobalSignOutRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct AdminCreateUserResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user returned in the request to create a new user.
        public let user: UserType?

        public init(user: UserType? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct ListUserPoolClientsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolClients", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool clients in the response that lists user pool clients.
        public let userPoolClients: [UserPoolClientDescription]?

        public init(nextToken: String? = nil, userPoolClients: [UserPoolClientDescription]? = nil) {
            self.nextToken = nextToken
            self.userPoolClients = userPoolClients
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case userPoolClients = "UserPoolClients"
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

}