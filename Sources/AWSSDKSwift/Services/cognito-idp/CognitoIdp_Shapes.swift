// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension CognitoIdp {

    public struct DescribeUserImportJobResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job object that represents the user import job.
        public var userImportJob: UserImportJobType? = nil

        public init() {}

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

    }

    public struct AdminUserGlobalSignOutResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CreateUserPoolRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public var userPoolTags: [String: String]? = nil
        /// A string representing the email verification subject.
        public var emailVerificationSubject: String? = nil
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: AdminCreateUserConfigType? = nil
        /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
        public var schema: [SchemaAttributeType]? = nil
        /// The policies associated with the new user pool.
        public var policies: UserPoolPolicyType? = nil
        /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
        public var aliasAttributes: [String]? = nil
        /// The Lambda trigger configuration information for the new user pool.
        public var lambdaConfig: LambdaConfigType? = nil
        /// Specifies MFA configuration details.
        public var mfaConfiguration: String? = nil
        /// A string used to name the user pool.
        public var poolName: String = ""
        /// The email configuration.
        public var emailConfiguration: EmailConfigurationType? = nil
        /// A string representing the SMS verification message.
        public var smsVerificationMessage: String? = nil
        /// A string representing the email verification message.
        public var emailVerificationMessage: String? = nil
        /// The SMS configuration.
        public var smsConfiguration: SmsConfigurationType? = nil
        /// A string representing the SMS authentication message.
        public var smsAuthenticationMessage: String? = nil
        /// The attributes to be auto-verified. Possible values: email, phone_number.
        public var autoVerifiedAttributes: [String]? = nil
        /// The device configuration.
        public var deviceConfiguration: DeviceConfigurationType? = nil

        public init() {}

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, schema: [SchemaAttributeType]? = nil, policies: UserPoolPolicyType? = nil, aliasAttributes: [String]? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: String? = nil, poolName: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsAuthenticationMessage: String? = nil, autoVerifiedAttributes: [String]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.schema = schema
            self.policies = policies
            self.aliasAttributes = aliasAttributes
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.poolName = poolName
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

    }

    public struct AddCustomAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ListUsersInGroupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The users returned in the request to list users.
        public var users: [UserType]? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil

        public init() {}

        public init(users: [UserType]? = nil, nextToken: String? = nil) {
            self.users = users
            self.nextToken = nextToken
        }

    }

    public struct NumberAttributeConstraintsType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The minimum value of an attribute that is of the number data type.
        public var minValue: String? = nil
        /// The maximum value of an attribute that is of the number data type.
        public var maxValue: String? = nil

        public init() {}

        public init(minValue: String? = nil, maxValue: String? = nil) {
            self.minValue = minValue
            self.maxValue = maxValue
        }

    }

    public struct ListDevicesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The limit of the device request.
        public var limit: Int32? = nil
        /// The pagination token for the list request.
        public var paginationToken: String? = nil
        /// The access tokens for the request to list devices.
        public var accessToken: String = ""

        public init() {}

        public init(limit: Int32? = nil, paginationToken: String? = nil, accessToken: String) {
            self.limit = limit
            self.paginationToken = paginationToken
            self.accessToken = accessToken
        }

    }

    public struct DeleteUserPoolRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool you want to delete.
        public var userPoolId: String = ""

        public init() {}

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

    }

    public struct GetUserAttributeVerificationCodeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
        public var codeDeliveryDetails: CodeDeliveryDetailsType? = nil

        public init() {}

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

    }

    public struct SignUpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of name-value pairs representing user attributes.
        public var userAttributes: [AttributeType]? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The password of the user you wish to register.
        public var password: String = ""
        /// The validation data in the request to register a user.
        public var validationData: [AttributeType]? = nil
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public var secretHash: String? = nil
        /// The user name of the user you wish to register.
        public var username: String = ""

        public init() {}

        public init(userAttributes: [AttributeType]? = nil, clientId: String, password: String, validationData: [AttributeType]? = nil, secretHash: String? = nil, username: String) {
            self.userAttributes = userAttributes
            self.clientId = clientId
            self.password = password
            self.validationData = validationData
            self.secretHash = secretHash
            self.username = username
        }

    }

    public struct DescribeUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool client from a server response to describe the user pool client.
        public var userPoolClient: UserPoolClientType? = nil

        public init() {}

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

    }

    public struct AdminRespondToAuthChallengeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the challenge.
        public var challengeName: String = ""
        /// The client ID.
        public var clientId: String = ""
        /// The session.
        public var session: String? = nil
        /// The challenge response.
        public var challengeResponses: [String: String]? = nil
        /// The ID of the Amazon Cognito user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(challengeName: String, clientId: String, session: String? = nil, challengeResponses: [String: String]? = nil, userPoolId: String) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.session = session
            self.challengeResponses = challengeResponses
            self.userPoolId = userPoolId
        }

    }

    public struct AdminListGroupsForUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The username for the user.
        public var username: String = ""
        /// The limit of the request to list groups.
        public var limit: Int32? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(username: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.username = username
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

    }

    public struct SetUserSettingsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ConfirmSignUpResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ListUserPoolsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The maximum number of results you want the request to return when listing the user pools.
        public var maxResults: Int32 = 0

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct UpdateGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A string containing the new description of the group.
        public var description: String? = nil
        /// The new precedence value for the group. For more information about this parameter, see CreateGroupRequest.
        public var precedence: Int32? = nil
        /// The name of the group.
        public var groupName: String = ""
        /// The new role ARN for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
        public var roleArn: String? = nil
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

    }

    public struct InitiateAuthResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the challenge.
        public var challengeName: String? = nil
        /// The challenge parameters.
        public var challengeParameters: [String: String]? = nil
        /// The result returned by the server in response to the request to initiate authentication.
        public var authenticationResult: AuthenticationResultType? = nil
        /// The session.
        public var session: String? = nil

        public init() {}

        public init(challengeName: String? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

    }

    public struct DeleteUserAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of strings representing the user attribute names you wish to delete.
        public var userAttributeNames: [String] = []
        /// The access token used in the request to delete user attributes.
        public var accessToken: String? = nil

        public init() {}

        public init(userAttributeNames: [String], accessToken: String? = nil) {
            self.userAttributeNames = userAttributeNames
            self.accessToken = accessToken
        }

    }

    public struct StartUserImportJobRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job ID for the user import job.
        public var jobId: String = ""
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: String = ""

        public init() {}

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

    }

    public struct GetUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The access token returned by the server response to get information about the user.
        public var accessToken: String? = nil

        public init() {}

        public init(accessToken: String? = nil) {
            self.accessToken = accessToken
        }

    }

    public struct DeleteUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The user pool ID for the user pool where you want to delete the client.
        public var userPoolId: String = ""

        public init() {}

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

    }

    public struct UpdateDeviceStatusRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The status of whether a device is remembered.
        public var deviceRememberedStatus: String? = nil
        /// The access token.
        public var accessToken: String = ""

        public init() {}

        public init(deviceKey: String, deviceRememberedStatus: String? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.accessToken = accessToken
        }

    }

    public struct AdminRemoveUserFromGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The username for the user.
        public var username: String = ""
        /// The group name.
        public var groupName: String = ""
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

    }

    public struct AdminDeleteUserAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to delete user attributes.
        public var userPoolId: String = ""
        /// An array of strings representing the user attribute names you wish to delete.
        public var userAttributeNames: [String] = []
        /// The user name of the user from which you would like to delete attributes.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, userAttributeNames: [String], username: String) {
            self.userPoolId = userPoolId
            self.userAttributeNames = userAttributeNames
            self.username = username
        }

    }

    public struct UserPoolClientDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client name from the user pool client description.
        public var clientName: String? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String? = nil
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public var userPoolId: String? = nil

        public init() {}

        public init(clientName: String? = nil, clientId: String? = nil, userPoolId: String? = nil) {
            self.clientName = clientName
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

    }

    public struct DeviceSecretVerifierConfigType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The salt.
        public var salt: String? = nil
        /// The password verifier.
        public var passwordVerifier: String? = nil

        public init() {}

        public init(salt: String? = nil, passwordVerifier: String? = nil) {
            self.salt = salt
            self.passwordVerifier = passwordVerifier
        }

    }

    public struct ListUserImportJobsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that can be used to return the next set of user import jobs in the list.
        public var paginationToken: String? = nil
        /// The user import jobs.
        public var userImportJobs: [UserImportJobType]? = nil

        public init() {}

        public init(paginationToken: String? = nil, userImportJobs: [UserImportJobType]? = nil) {
            self.paginationToken = paginationToken
            self.userImportJobs = userImportJobs
        }

    }

    public struct RespondToAuthChallengeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The challenge name.
        public var challengeName: String? = nil
        /// The challenge parameters.
        public var challengeParameters: [String: String]? = nil
        /// The result returned by the server in response to the request to respond to the authentication challenge.
        public var authenticationResult: AuthenticationResultType? = nil
        /// The session.
        public var session: String? = nil

        public init() {}

        public init(challengeName: String? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

    }

    public struct CreateUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool client that was just created.
        public var userPoolClient: UserPoolClientType? = nil

        public init() {}

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

    }

    public struct ListGroupsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The group objects for the groups.
        public var groups: [GroupType]? = nil

        public init() {}

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

    }

    public struct AdminInitiateAuthRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client app metadata.
        public var clientMetadata: [String: String]? = nil
        /// The client app ID.
        public var clientId: String = ""
        /// The authentication parameters.
        public var authParameters: [String: String]? = nil
        /// The authentication flow.
        public var authFlow: String = ""
        /// The ID of the Amazon Cognito user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(clientMetadata: [String: String]? = nil, clientId: String, authParameters: [String: String]? = nil, authFlow: String, userPoolId: String) {
            self.clientMetadata = clientMetadata
            self.clientId = clientId
            self.authParameters = authParameters
            self.authFlow = authFlow
            self.userPoolId = userPoolId
        }

    }

    public struct UpdateUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool client value from the response from the server when an update user pool client request is made.
        public var userPoolClient: UserPoolClientType? = nil

        public init() {}

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

    }

    public struct DescribeUserImportJobRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job ID for the user import job.
        public var jobId: String = ""
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: String = ""

        public init() {}

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

    }

    public struct DeleteUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The access token from a request to delete a user.
        public var accessToken: String? = nil

        public init() {}

        public init(accessToken: String? = nil) {
            self.accessToken = accessToken
        }

    }

    public struct GlobalSignOutRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The access token.
        public var accessToken: String? = nil

        public init() {}

        public init(accessToken: String? = nil) {
            self.accessToken = accessToken
        }

    }

    public struct CreateUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client name for the user pool client you would like to create.
        public var clientName: String = ""
        /// The user pool ID for the user pool where you want to create a user pool client.
        public var userPoolId: String = ""
        /// The write attributes.
        public var writeAttributes: [String]? = nil
        /// The validity of the refresh token, in days.
        public var refreshTokenValidity: Int32? = nil
        /// The read attributes.
        public var readAttributes: [String]? = nil
        /// The explicit authentication flows.
        public var explicitAuthFlows: [String]? = nil
        /// Boolean to specify whether you want to generate a secret for the user pool client being created.
        public var generateSecret: Bool? = nil

        public init() {}

        public init(clientName: String, userPoolId: String, writeAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, readAttributes: [String]? = nil, explicitAuthFlows: [String]? = nil, generateSecret: Bool? = nil) {
            self.clientName = clientName
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.readAttributes = readAttributes
            self.explicitAuthFlows = explicitAuthFlows
            self.generateSecret = generateSecret
        }

    }

    public struct AttributeType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value of the attribute.
        public var value: String? = nil
        /// The name of the attribute.
        public var name: String = ""

        public init() {}

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

    }

    public struct VerifyUserAttributeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct UserPoolClientType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client name from the user pool request of the client type.
        public var clientName: String? = nil
        /// The validity of the refresh token, in days.
        public var refreshTokenValidity: Int32? = nil
        /// The writeable attributes.
        public var writeAttributes: [String]? = nil
        /// The Read-only attributes.
        public var readAttributes: [String]? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String? = nil
        /// The creation date from the user pool request of the client type.
        public var creationDate: Date? = nil
        /// The last modified date from the user pool request of the client type.
        public var lastModifiedDate: Date? = nil
        /// The explicit authentication flows.
        public var explicitAuthFlows: [String]? = nil
        /// The client secret from the user pool request of the client type.
        public var clientSecret: String? = nil
        /// The user pool ID for the user pool client.
        public var userPoolId: String? = nil

        public init() {}

        public init(clientName: String? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, clientId: String? = nil, creationDate: Date? = nil, lastModifiedDate: Date? = nil, explicitAuthFlows: [String]? = nil, clientSecret: String? = nil, userPoolId: String? = nil) {
            self.clientName = clientName
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.clientId = clientId
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.explicitAuthFlows = explicitAuthFlows
            self.clientSecret = clientSecret
            self.userPoolId = userPoolId
        }

    }

    public struct CreateUserImportJobRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job name for the user import job.
        public var jobName: String = ""
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job.
        public var cloudWatchLogsRoleArn: String = ""
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: String = ""

        public init() {}

        public init(jobName: String, cloudWatchLogsRoleArn: String, userPoolId: String) {
            self.jobName = jobName
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.userPoolId = userPoolId
        }

    }

    public struct SchemaAttributeType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the constraints for an attribute of the number type.
        public var numberAttributeConstraints: NumberAttributeConstraintsType? = nil
        /// Specifies whether the attribute type is developer only.
        public var developerOnlyAttribute: Bool? = nil
        /// A schema attribute of the name type.
        public var name: String? = nil
        /// The attribute data type.
        public var attributeDataType: String? = nil
        /// Specifies the constraints for an attribute of the string type.
        public var stringAttributeConstraints: StringAttributeConstraintsType? = nil
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
        public var required: Bool? = nil
        /// Specifies whether the attribute can be changed once it has been created.
        public var mutable: Bool? = nil

        public init() {}

        public init(numberAttributeConstraints: NumberAttributeConstraintsType? = nil, developerOnlyAttribute: Bool? = nil, name: String? = nil, attributeDataType: String? = nil, stringAttributeConstraints: StringAttributeConstraintsType? = nil, required: Bool? = nil, mutable: Bool? = nil) {
            self.numberAttributeConstraints = numberAttributeConstraints
            self.developerOnlyAttribute = developerOnlyAttribute
            self.name = name
            self.attributeDataType = attributeDataType
            self.stringAttributeConstraints = stringAttributeConstraints
            self.required = required
            self.mutable = mutable
        }

    }

    public struct ConfirmForgotPasswordRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The confirmation code sent by a user's request to retrieve a forgotten password.
        public var confirmationCode: String = ""
        /// The password sent by sent by a user's request to retrieve a forgotten password.
        public var password: String = ""
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public var secretHash: String? = nil
        /// The user name of the user for whom you want to enter a code to retrieve a forgotten password.
        public var username: String = ""

        public init() {}

        public init(clientId: String, confirmationCode: String, password: String, secretHash: String? = nil, username: String) {
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.password = password
            self.secretHash = secretHash
            self.username = username
        }

    }

    public struct ConfirmSignUpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
        public var forceAliasCreation: Bool? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The confirmation code sent by a user's request to confirm registration.
        public var confirmationCode: String = ""
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public var secretHash: String? = nil
        /// The user name of the user whose registration you wish to confirm.
        public var username: String = ""

        public init() {}

        public init(forceAliasCreation: Bool? = nil, clientId: String, confirmationCode: String, secretHash: String? = nil, username: String) {
            self.forceAliasCreation = forceAliasCreation
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.secretHash = secretHash
            self.username = username
        }

    }

    public struct GroupType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool.
        public var userPoolId: String? = nil
        /// The name of the group.
        public var groupName: String? = nil
        /// The date the group was last modified.
        public var lastModifiedDate: Date? = nil
        /// The date the group was created.
        public var creationDate: Date? = nil
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Groups with higher Precedence values take precedence over groups with lower Precedence values or with null Precedence values. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public var precedence: Int32? = nil
        /// The role ARN for the group.
        public var roleArn: String? = nil
        /// A string containing the description of the group.
        public var description: String? = nil

        public init() {}

        public init(userPoolId: String? = nil, groupName: String? = nil, lastModifiedDate: Date? = nil, creationDate: Date? = nil, precedence: Int32? = nil, roleArn: String? = nil, description: String? = nil) {
            self.userPoolId = userPoolId
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.description = description
        }

    }

    public struct StopUserImportJobResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job object that represents the user import job.
        public var userImportJob: UserImportJobType? = nil

        public init() {}

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

    }

    public struct AdminEnableUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to enable the user.
        public var userPoolId: String = ""
        /// The user name of the user you wish to ebable.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct ForgotPasswordRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public var secretHash: String? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The user name of the user for whom you want to enter a code to reset a forgotten password.
        public var username: String = ""

        public init() {}

        public init(secretHash: String? = nil, clientId: String, username: String) {
            self.secretHash = secretHash
            self.clientId = clientId
            self.username = username
        }

    }

    public struct AdminListDevicesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user name.
        public var username: String = ""
        /// The pagination token.
        public var paginationToken: String? = nil
        /// The limit of the devices request.
        public var limit: Int32? = nil
        /// The user pool ID.
        public var userPoolId: String = ""

        public init() {}

        public init(username: String, paginationToken: String? = nil, limit: Int32? = nil, userPoolId: String) {
            self.username = username
            self.paginationToken = paginationToken
            self.limit = limit
            self.userPoolId = userPoolId
        }

    }

    public struct UpdateDeviceStatusResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct GetUserAttributeVerificationCodeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The attribute name returned by the server response to get the user attribute verification code.
        public var attributeName: String = ""
        /// The access token returned by the server response to get the user attribute verification code.
        public var accessToken: String? = nil

        public init() {}

        public init(attributeName: String, accessToken: String? = nil) {
            self.attributeName = attributeName
            self.accessToken = accessToken
        }

    }

    public struct AdminInitiateAuthResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the challenge.
        public var challengeName: String? = nil
        /// The challenge parameters.
        public var challengeParameters: [String: String]? = nil
        /// The result of the authentication response.
        public var authenticationResult: AuthenticationResultType? = nil
        /// The session.
        public var session: String? = nil

        public init() {}

        public init(challengeName: String? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

    }

    public struct AdminDeleteUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to delete the user.
        public var userPoolId: String = ""
        /// The user name of the user you wish to delete.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct GetGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the group.
        public var groupName: String = ""
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

    }

    public struct ListUserImportJobsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: String = ""
        /// An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list.
        public var paginationToken: String? = nil
        /// The maximum number of import jobs you want the request to return.
        public var maxResults: Int32 = 0

        public init() {}

        public init(userPoolId: String, paginationToken: String? = nil, maxResults: Int32) {
            self.userPoolId = userPoolId
            self.paginationToken = paginationToken
            self.maxResults = maxResults
        }

    }

    public struct AdminResetUserPasswordRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to reset the user's password.
        public var userPoolId: String = ""
        /// The user name of the user whose password you wish to reset.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct ChangePasswordRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The old password in the change password request.
        public var previousPassword: String = ""
        /// The new password in the change password request.
        public var proposedPassword: String = ""
        /// The access token in the change password request.
        public var accessToken: String? = nil

        public init() {}

        public init(previousPassword: String, proposedPassword: String, accessToken: String? = nil) {
            self.previousPassword = previousPassword
            self.proposedPassword = proposedPassword
            self.accessToken = accessToken
        }

    }

    public struct UserPoolDescriptionType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The last modified date in a user pool description.
        public var lastModifiedDate: Date? = nil
        /// The creation date in a user pool description.
        public var creationDate: Date? = nil
        /// The user pool status in a user pool description.
        public var status: String? = nil
        /// The AWS Lambda configuration information in a user pool description.
        public var lambdaConfig: LambdaConfigType? = nil
        /// The name in a user pool description.
        public var name: String? = nil
        /// The ID in a user pool description.
        public var id: String? = nil

        public init() {}

        public init(lastModifiedDate: Date? = nil, creationDate: Date? = nil, status: String? = nil, lambdaConfig: LambdaConfigType? = nil, name: String? = nil, id: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.status = status
            self.lambdaConfig = lambdaConfig
            self.name = name
            self.id = id
        }

    }

    public struct DeviceConfigurationType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If true, a device is only remembered on user prompt.
        public var deviceOnlyRememberedOnUserPrompt: Bool? = nil
        /// Indicates whether a challenge is required on a new device. Only applicable to a new device.
        public var challengeRequiredOnNewDevice: Bool? = nil

        public init() {}

        public init(deviceOnlyRememberedOnUserPrompt: Bool? = nil, challengeRequiredOnNewDevice: Bool? = nil) {
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
        }

    }

    public struct ListUserPoolsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pools from the response to list users.
        public var userPools: [UserPoolDescriptionType]? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil

        public init() {}

        public init(userPools: [UserPoolDescriptionType]? = nil, nextToken: String? = nil) {
            self.userPools = userPools
            self.nextToken = nextToken
        }

    }

    public struct AdminGetUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public var userStatus: String? = nil
        /// Indicates that the status is enabled.
        public var enabled: Bool? = nil
        /// The user name of the user about whom you are receiving information.
        public var username: String = ""
        /// The date the user was created.
        public var userCreateDate: Date? = nil
        /// Specifies the options for MFA (e.g., email or phone number).
        public var mFAOptions: [MFAOptionType]? = nil
        /// The date the user was last modified.
        public var userLastModifiedDate: Date? = nil
        /// An array of name-value pairs representing user attributes.
        public var userAttributes: [AttributeType]? = nil

        public init() {}

        public init(userStatus: String? = nil, enabled: Bool? = nil, username: String, userCreateDate: Date? = nil, mFAOptions: [MFAOptionType]? = nil, userLastModifiedDate: Date? = nil, userAttributes: [AttributeType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.mFAOptions = mFAOptions
            self.userLastModifiedDate = userLastModifiedDate
            self.userAttributes = userAttributes
        }

    }

    public struct ListUsersInGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the group.
        public var groupName: String = ""
        /// The limit of the request to list users.
        public var limit: Int32? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(groupName: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.groupName = groupName
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

    }

    public struct CreateGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A string containing the description of the group.
        public var description: String? = nil
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public var precedence: Int32? = nil
        /// The name of the group. Must be unique.
        public var groupName: String = ""
        /// The role ARN for the group.
        public var roleArn: String? = nil
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

    }

    public struct MessageTemplateType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The message template for SMS messages.
        public var sMSMessage: String? = nil
        /// The message template for email messages.
        public var emailMessage: String? = nil
        /// The subject line for email messages.
        public var emailSubject: String? = nil

        public init() {}

        public init(sMSMessage: String? = nil, emailMessage: String? = nil, emailSubject: String? = nil) {
            self.sMSMessage = sMSMessage
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
        }

    }

    public struct ConfirmDeviceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Indicates whether the user confirmation is necessary to confirm the device response.
        public var userConfirmationNecessary: Bool? = nil

        public init() {}

        public init(userConfirmationNecessary: Bool? = nil) {
            self.userConfirmationNecessary = userConfirmationNecessary
        }

    }

    public struct StartUserImportJobResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job object that represents the user import job.
        public var userImportJob: UserImportJobType? = nil

        public init() {}

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

    }

    public struct AdminDisableUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to disable the user.
        public var userPoolId: String = ""
        /// The user name of the user you wish to disable.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct UpdateUserAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of name-value pairs representing user attributes.
        public var userAttributes: [AttributeType] = []
        /// The access token for the request to update user attributes.
        public var accessToken: String? = nil

        public init() {}

        public init(userAttributes: [AttributeType], accessToken: String? = nil) {
            self.userAttributes = userAttributes
            self.accessToken = accessToken
        }

    }

    public struct MFAOptionType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The attribute name of the MFA option type.
        public var attributeName: String? = nil
        /// The delivery medium (email message or SMS message) to send the MFA code.
        public var deliveryMedium: String? = nil

        public init() {}

        public init(attributeName: String? = nil, deliveryMedium: String? = nil) {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }

    }

    public struct ConfirmForgotPasswordResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeUserPoolRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool you want to describe.
        public var userPoolId: String = ""

        public init() {}

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

    }

    public struct GetUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of name-value pairs representing user attributes.
        public var userAttributes: [AttributeType] = []
        /// Specifies the options for MFA (e.g., email or phone number).
        public var mFAOptions: [MFAOptionType]? = nil
        /// The user name of the user you wish to retrieve from the get user request.
        public var username: String = ""

        public init() {}

        public init(userAttributes: [AttributeType], mFAOptions: [MFAOptionType]? = nil, username: String) {
            self.userAttributes = userAttributes
            self.mFAOptions = mFAOptions
            self.username = username
        }

    }

    public struct AdminSetUserSettingsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AdminRespondToAuthChallengeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the challenge.
        public var challengeName: String? = nil
        /// The challenge parameters.
        public var challengeParameters: [String: String]? = nil
        /// The result returned by the server in response to the authentication request.
        public var authenticationResult: AuthenticationResultType? = nil
        /// The session.
        public var session: String? = nil

        public init() {}

        public init(challengeName: String? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

    }

    public struct UpdateUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client name from the update user pool client request.
        public var clientName: String? = nil
        /// The validity of the refresh token, in days.
        public var refreshTokenValidity: Int32? = nil
        /// The writeable attributes of the user pool.
        public var writeAttributes: [String]? = nil
        /// The read-only attributes of the user pool.
        public var readAttributes: [String]? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// Explicit authentication flows.
        public var explicitAuthFlows: [String]? = nil
        /// The user pool ID for the user pool where you want to update the user pool client.
        public var userPoolId: String = ""

        public init() {}

        public init(clientName: String? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, clientId: String, explicitAuthFlows: [String]? = nil, userPoolId: String) {
            self.clientName = clientName
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.clientId = clientId
            self.explicitAuthFlows = explicitAuthFlows
            self.userPoolId = userPoolId
        }

    }

    public struct DeviceType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String? = nil
        /// The last modified date of the device.
        public var deviceLastModifiedDate: Date? = nil
        /// The device attributes.
        public var deviceAttributes: [AttributeType]? = nil
        /// The creation date of the device.
        public var deviceCreateDate: Date? = nil
        /// The date in which the device was last authenticated.
        public var deviceLastAuthenticatedDate: Date? = nil

        public init() {}

        public init(deviceKey: String? = nil, deviceLastModifiedDate: Date? = nil, deviceAttributes: [AttributeType]? = nil, deviceCreateDate: Date? = nil, deviceLastAuthenticatedDate: Date? = nil) {
            self.deviceKey = deviceKey
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
        }

    }

    public struct AdminUpdateDeviceStatusResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AdminUpdateUserAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user name of the user for whom you want to update user attributes.
        public var username: String = ""
        /// An array of name-value pairs representing user attributes.
        public var userAttributes: [AttributeType] = []
        /// The user pool ID for the user pool where you want to update user attributes.
        public var userPoolId: String = ""

        public init() {}

        public init(username: String, userAttributes: [AttributeType], userPoolId: String) {
            self.username = username
            self.userAttributes = userAttributes
            self.userPoolId = userPoolId
        }

    }

    public struct SmsConfigurationType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The external ID.
        public var externalId: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
        public var snsCallerArn: String = ""

        public init() {}

        public init(externalId: String? = nil, snsCallerArn: String) {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
        }

    }

    public struct CodeDeliveryDetailsType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the attribute in the code delivery details type.
        public var attributeName: String? = nil
        /// The destination for the code delivery details.
        public var destination: String? = nil
        /// The delivery medium (email message or phone number).
        public var deliveryMedium: String? = nil

        public init() {}

        public init(attributeName: String? = nil, destination: String? = nil, deliveryMedium: String? = nil) {
            self.attributeName = attributeName
            self.destination = destination
            self.deliveryMedium = deliveryMedium
        }

    }

    public struct GetCSVHeaderResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The header information for the .csv file for the user import job.
        public var cSVHeader: [String]? = nil
        /// The user pool ID for the user pool that the users are to be imported into.
        public var userPoolId: String? = nil

        public init() {}

        public init(cSVHeader: [String]? = nil, userPoolId: String? = nil) {
            self.cSVHeader = cSVHeader
            self.userPoolId = userPoolId
        }

    }

    public struct AdminEnableUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AdminConfirmSignUpRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for which you want to confirm user registration.
        public var userPoolId: String = ""
        /// The user name for which you want to confirm user registration.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct ForgetDeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The access token for the forgotten device request.
        public var accessToken: String? = nil

        public init() {}

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

    }

    public struct ListUsersResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The users returned in the request to list users.
        public var users: [UserType]? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var paginationToken: String? = nil

        public init() {}

        public init(users: [UserType]? = nil, paginationToken: String? = nil) {
            self.users = users
            self.paginationToken = paginationToken
        }

    }

    public struct UserPoolType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The reason why the email configuration cannot send the messages to your users.
        public var emailConfigurationFailure: String? = nil
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public var userPoolTags: [String: String]? = nil
        /// The subject of the email verification message.
        public var emailVerificationSubject: String? = nil
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: AdminCreateUserConfigType? = nil
        /// A number estimating the size of the user pool.
        public var estimatedNumberOfUsers: Int32? = nil
        /// Specifies the attributes that are aliased in a user pool.
        public var aliasAttributes: [String]? = nil
        /// A container with the schema attributes of a user pool.
        public var schemaAttributes: [SchemaAttributeType]? = nil
        /// The reason why the SMS configuration cannot send the message(s) to your users.
        public var smsConfigurationFailure: String? = nil
        /// A container describing the AWS Lambda triggers associated with a user pool.
        public var lambdaConfig: LambdaConfigType? = nil
        /// A container describing the policies associated with a user pool.
        public var policies: UserPoolPolicyType? = nil
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public var mfaConfiguration: String? = nil
        /// The creation date of a user pool.
        public var creationDate: Date? = nil
        /// The ID of the user pool.
        public var id: String? = nil
        /// The status of a user pool.
        public var status: String? = nil
        /// The SMS configuration.
        public var smsConfiguration: SmsConfigurationType? = nil
        /// The contents of the SMS verification message.
        public var smsVerificationMessage: String? = nil
        /// The contents of the SMS authentication message.
        public var smsAuthenticationMessage: String? = nil
        /// The name of the user pool.
        public var name: String? = nil
        /// The email configuration.
        public var emailConfiguration: EmailConfigurationType? = nil
        /// The contents of the email verification message.
        public var emailVerificationMessage: String? = nil
        /// The last modified date of a user pool.
        public var lastModifiedDate: Date? = nil
        /// Specifies the attributes that are auto-verified in a user pool.
        public var autoVerifiedAttributes: [String]? = nil
        /// The device configuration.
        public var deviceConfiguration: DeviceConfigurationType? = nil

        public init() {}

        public init(emailConfigurationFailure: String? = nil, userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, estimatedNumberOfUsers: Int32? = nil, aliasAttributes: [String]? = nil, schemaAttributes: [SchemaAttributeType]? = nil, smsConfigurationFailure: String? = nil, lambdaConfig: LambdaConfigType? = nil, policies: UserPoolPolicyType? = nil, mfaConfiguration: String? = nil, creationDate: Date? = nil, id: String? = nil, status: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, name: String? = nil, emailConfiguration: EmailConfigurationType? = nil, emailVerificationMessage: String? = nil, lastModifiedDate: Date? = nil, autoVerifiedAttributes: [String]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.emailConfigurationFailure = emailConfigurationFailure
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.aliasAttributes = aliasAttributes
            self.schemaAttributes = schemaAttributes
            self.smsConfigurationFailure = smsConfigurationFailure
            self.lambdaConfig = lambdaConfig
            self.policies = policies
            self.mfaConfiguration = mfaConfiguration
            self.creationDate = creationDate
            self.id = id
            self.status = status
            self.smsConfiguration = smsConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.name = name
            self.emailConfiguration = emailConfiguration
            self.emailVerificationMessage = emailVerificationMessage
            self.lastModifiedDate = lastModifiedDate
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

    }

    public struct GetDeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The access token.
        public var accessToken: String? = nil

        public init() {}

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

    }

    public struct ListDevicesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token for the list device response.
        public var paginationToken: String? = nil
        /// The devices returned in the list devices response.
        public var devices: [DeviceType]? = nil

        public init() {}

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

    }

    public struct CreateUserPoolResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A container for the user pool details.
        public var userPool: UserPoolType? = nil

        public init() {}

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

    }

    public struct ResendConfirmationCodeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code delivery details returned by the server in response to the request to resend the confirmation code.
        public var codeDeliveryDetails: CodeDeliveryDetailsType? = nil

        public init() {}

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

    }

    public struct AdminConfirmSignUpResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CreateUserImportJobResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job object that represents the user import job.
        public var userImportJob: UserImportJobType? = nil

        public init() {}

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

    }

    public struct RespondToAuthChallengeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the challenge.
        public var challengeName: String = ""
        /// The client ID.
        public var clientId: String = ""
        /// The session.
        public var session: String? = nil
        /// The responses to the authentication challenge.
        public var challengeResponses: [String: String]? = nil

        public init() {}

        public init(challengeName: String, clientId: String, session: String? = nil, challengeResponses: [String: String]? = nil) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.session = session
            self.challengeResponses = challengeResponses
        }

    }

    public struct UpdateUserPoolResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct UpdateUserPoolRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public var userPoolTags: [String: String]? = nil
        /// The subject of the email verfication message.
        public var emailVerificationSubject: String? = nil
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: AdminCreateUserConfigType? = nil
        /// A container with the policies you wish to update in a user pool.
        public var policies: UserPoolPolicyType? = nil
        /// The AWS Lambda configuration information from the request to update the user pool.
        public var lambdaConfig: LambdaConfigType? = nil
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public var mfaConfiguration: String? = nil
        /// The user pool ID for the user pool you want to update.
        public var userPoolId: String = ""
        /// Email configuration.
        public var emailConfiguration: EmailConfigurationType? = nil
        /// A container with information about the SMS verification message.
        public var smsVerificationMessage: String? = nil
        /// The contents of the SMS authentication message.
        public var smsAuthenticationMessage: String? = nil
        /// The contents of the email verification message.
        public var emailVerificationMessage: String? = nil
        /// SMS configuration.
        public var smsConfiguration: SmsConfigurationType? = nil
        /// The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
        public var autoVerifiedAttributes: [String]? = nil
        /// Device configuration.
        public var deviceConfiguration: DeviceConfigurationType? = nil

        public init() {}

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, policies: UserPoolPolicyType? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: String? = nil, userPoolId: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, autoVerifiedAttributes: [String]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.policies = policies
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.userPoolId = userPoolId
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

    }

    public struct LambdaConfigType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A post-authentication AWS Lambda trigger.
        public var postAuthentication: String? = nil
        /// A custom Message AWS Lambda trigger.
        public var customMessage: String? = nil
        /// A pre-registration AWS Lambda trigger.
        public var preSignUp: String? = nil
        /// Verifies the authentication challenge response.
        public var verifyAuthChallengeResponse: String? = nil
        /// Defines the authentication challenge.
        public var defineAuthChallenge: String? = nil
        /// Creates an authentication challenge.
        public var createAuthChallenge: String? = nil
        /// A pre-authentication AWS Lambda trigger.
        public var preAuthentication: String? = nil
        /// A post-confirmation AWS Lambda trigger.
        public var postConfirmation: String? = nil

        public init() {}

        public init(postAuthentication: String? = nil, customMessage: String? = nil, preSignUp: String? = nil, verifyAuthChallengeResponse: String? = nil, defineAuthChallenge: String? = nil, createAuthChallenge: String? = nil, preAuthentication: String? = nil, postConfirmation: String? = nil) {
            self.postAuthentication = postAuthentication
            self.customMessage = customMessage
            self.preSignUp = preSignUp
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
            self.defineAuthChallenge = defineAuthChallenge
            self.createAuthChallenge = createAuthChallenge
            self.preAuthentication = preAuthentication
            self.postConfirmation = postConfirmation
        }

    }

    public struct ListGroupsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The limit of the request to list groups.
        public var limit: Int32? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

    }

    public struct SetUserSettingsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the options for MFA (e.g., email or phone number).
        public var mFAOptions: [MFAOptionType] = []
        /// The access token for the set user settings request.
        public var accessToken: String = ""

        public init() {}

        public init(mFAOptions: [MFAOptionType], accessToken: String) {
            self.mFAOptions = mFAOptions
            self.accessToken = accessToken
        }

    }

    public struct AdminGetUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to get information about the user.
        public var userPoolId: String = ""
        /// The user name of the user you wish to retrieve.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct GetGroupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The group object for the group.
        public var group: GroupType? = nil

        public init() {}

        public init(group: GroupType? = nil) {
            self.group = group
        }

    }

    public struct AuthenticationResultType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The expiration period of the authentication result.
        public var expiresIn: Int32? = nil
        /// The new device metadata from an authentication result.
        public var newDeviceMetadata: NewDeviceMetadataType? = nil
        /// The ID token of the authentication result.
        public var idToken: String? = nil
        /// The token type of the authentication result.
        public var tokenType: String? = nil
        /// The refresh token of the authentication result.
        public var refreshToken: String? = nil
        /// The access token of the authentication result.
        public var accessToken: String? = nil

        public init() {}

        public init(expiresIn: Int32? = nil, newDeviceMetadata: NewDeviceMetadataType? = nil, idToken: String? = nil, tokenType: String? = nil, refreshToken: String? = nil, accessToken: String? = nil) {
            self.expiresIn = expiresIn
            self.newDeviceMetadata = newDeviceMetadata
            self.idToken = idToken
            self.tokenType = tokenType
            self.refreshToken = refreshToken
            self.accessToken = accessToken
        }

    }

    public struct AdminCreateUserConfigType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public var allowAdminCreateUserOnly: Bool? = nil
        /// The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this paameter is 7.
        public var unusedAccountValidityDays: Int32? = nil
        /// The message template to be used for the welcome message to new users.
        public var inviteMessageTemplate: MessageTemplateType? = nil

        public init() {}

        public init(allowAdminCreateUserOnly: Bool? = nil, unusedAccountValidityDays: Int32? = nil, inviteMessageTemplate: MessageTemplateType? = nil) {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.unusedAccountValidityDays = unusedAccountValidityDays
            self.inviteMessageTemplate = inviteMessageTemplate
        }

    }

    public struct StringAttributeConstraintsType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The minimum length of an attribute value of the string type.
        public var minLength: String? = nil
        /// The maximum length of an attribute value of the string type.
        public var maxLength: String? = nil

        public init() {}

        public init(minLength: String? = nil, maxLength: String? = nil) {
            self.minLength = minLength
            self.maxLength = maxLength
        }

    }

    public struct UserPoolPolicyType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A container with information about the user pool password policy.
        public var passwordPolicy: PasswordPolicyType? = nil

        public init() {}

        public init(passwordPolicy: PasswordPolicyType? = nil) {
            self.passwordPolicy = passwordPolicy
        }

    }

    public struct ForgotPasswordResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code delivery details returned by the server in response to the request to reset a password.
        public var codeDeliveryDetails: CodeDeliveryDetailsType? = nil

        public init() {}

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

    }

    public struct CreateGroupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The group object for the group.
        public var group: GroupType? = nil

        public init() {}

        public init(group: GroupType? = nil) {
            self.group = group
        }

    }

    public struct GlobalSignOutResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct NewDeviceMetadataType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device group key.
        public var deviceGroupKey: String? = nil
        /// The device key.
        public var deviceKey: String? = nil

        public init() {}

        public init(deviceGroupKey: String? = nil, deviceKey: String? = nil) {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }

    }

    public struct DescribeUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The user pool ID for the user pool you want to describe.
        public var userPoolId: String = ""

        public init() {}

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

    }

    public struct SignUpResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code delivery details returned by the server response to the user registration request.
        public var codeDeliveryDetails: CodeDeliveryDetailsType? = nil
        /// A response from the server indicating that a user registration has been confirmed.
        public var userConfirmed: Bool? = nil

        public init() {}

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil, userConfirmed: Bool? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
            self.userConfirmed = userConfirmed
        }

    }

    public struct UpdateGroupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The group object for the group.
        public var group: GroupType? = nil

        public init() {}

        public init(group: GroupType? = nil) {
            self.group = group
        }

    }

    public struct AdminResetUserPasswordResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AdminSetUserSettingsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to set the user's settings, such as MFA options.
        public var userPoolId: String = ""
        /// Specifies the options for MFA (e.g., email or phone number).
        public var mFAOptions: [MFAOptionType] = []
        /// The user name of the user for whom you wish to set user settings.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, mFAOptions: [MFAOptionType], username: String) {
            self.userPoolId = userPoolId
            self.mFAOptions = mFAOptions
            self.username = username
        }

    }

    public struct AdminDisableUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AdminDeleteUserAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct StopUserImportJobRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job ID for the user import job.
        public var jobId: String = ""
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: String = ""

        public init() {}

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

    }

    public struct GetCSVHeaderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool that the users are to be imported into.
        public var userPoolId: String = ""

        public init() {}

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

    }

    public struct ResendConfirmationCodeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public var secretHash: String? = nil
        /// The ID of the client associated with the user pool.
        public var clientId: String = ""
        /// The user name of the user to whom you wish to resend a confirmation code.
        public var username: String = ""

        public init() {}

        public init(secretHash: String? = nil, clientId: String, username: String) {
            self.secretHash = secretHash
            self.clientId = clientId
            self.username = username
        }

    }

    public struct DescribeUserPoolResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The container of metadata returned by the server to describe the pool.
        public var userPool: UserPoolType? = nil

        public init() {}

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

    }

    public struct AddCustomAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of custom attributes, such as Mutable and Name.
        public var customAttributes: [SchemaAttributeType] = []
        /// The user pool ID for the user pool where you want to add custom attributes.
        public var userPoolId: String = ""

        public init() {}

        public init(customAttributes: [SchemaAttributeType], userPoolId: String) {
            self.customAttributes = customAttributes
            self.userPoolId = userPoolId
        }

    }

    public struct UpdateUserAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code delivery details list from the server for the request to update user attributes.
        public var codeDeliveryDetailsList: [CodeDeliveryDetailsType]? = nil

        public init() {}

        public init(codeDeliveryDetailsList: [CodeDeliveryDetailsType]? = nil) {
            self.codeDeliveryDetailsList = codeDeliveryDetailsList
        }

    }

    public struct UserImportJobType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date when the user imoprt job was completed.
        public var completionDate: Date? = nil
        /// The message returned when the user import job is completed.
        public var completionMessage: String? = nil
        /// The number of users that could not be imported.
        public var failedUsers: Int64? = nil
        /// The number of users that were skipped.
        public var skippedUsers: Int64? = nil
        /// The date when the user import job was created.
        public var creationDate: Date? = nil
        /// The job ID for the user import job.
        public var jobId: String? = nil
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: String? = nil
        /// The status of the user import job. One of the following:   Created - The job was created but not started.   Pending - A transition state. You have started the job, but it has not begun importing users yet.   InProgress - The job has started, and users are being imported.   Stopping - You have stopped the job, but the job has not stopped importing users yet.   Stopped - You have stopped the job, and the job has stopped importing users.   Succeeded - The job has completed successfully.   Failed - The job has stopped due to an error.   Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.  
        public var status: String? = nil
        /// The pre-signed URL to be used to upload the .csv file.
        public var preSignedUrl: String? = nil
        /// The date when the user import job was started.
        public var startDate: Date? = nil
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public var cloudWatchLogsRoleArn: String? = nil
        /// The job name for the user import job.
        public var jobName: String? = nil
        /// The number of users that were successfully imported.
        public var importedUsers: Int64? = nil

        public init() {}

        public init(completionDate: Date? = nil, completionMessage: String? = nil, failedUsers: Int64? = nil, skippedUsers: Int64? = nil, creationDate: Date? = nil, jobId: String? = nil, userPoolId: String? = nil, status: String? = nil, preSignedUrl: String? = nil, startDate: Date? = nil, cloudWatchLogsRoleArn: String? = nil, jobName: String? = nil, importedUsers: Int64? = nil) {
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.failedUsers = failedUsers
            self.skippedUsers = skippedUsers
            self.creationDate = creationDate
            self.jobId = jobId
            self.userPoolId = userPoolId
            self.status = status
            self.preSignedUrl = preSignedUrl
            self.startDate = startDate
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.jobName = jobName
            self.importedUsers = importedUsers
        }

    }

    public struct AdminUpdateUserAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DeleteUserAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ConfirmDeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The configuration of the device secret verifier.
        public var deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil
        /// The device name.
        public var deviceName: String? = nil
        /// The access token.
        public var accessToken: String = ""

        public init() {}

        public init(deviceKey: String, deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil, deviceName: String? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
            self.deviceName = deviceName
            self.accessToken = accessToken
        }

    }

    public struct AdminCreateUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This parameter is only used if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
        public var forceAliasCreation: Bool? = nil
        /// The user pool ID for the user pool where the user will be created.
        public var userPoolId: String = ""
        /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". More than one value can be specified.
        public var desiredDeliveryMediums: [String]? = nil
        /// Set to "RESEND" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to "SUPPRESS" to suppress sending the message. Only one value can be specified.
        public var messageAction: String? = nil
        /// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain. To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process. The user's validation data is not persisted.
        public var validationData: [AttributeType]? = nil
        /// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
        public var username: String = ""
        /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins. This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter.
        public var temporaryPassword: String? = nil
        /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the Attributes tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message). To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. (You cannot do this by calling other operations such as AdminUpdateUserAttributes.)    email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.    phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.  
        public var userAttributes: [AttributeType]? = nil

        public init() {}

        public init(forceAliasCreation: Bool? = nil, userPoolId: String, desiredDeliveryMediums: [String]? = nil, messageAction: String? = nil, validationData: [AttributeType]? = nil, username: String, temporaryPassword: String? = nil, userAttributes: [AttributeType]? = nil) {
            self.forceAliasCreation = forceAliasCreation
            self.userPoolId = userPoolId
            self.desiredDeliveryMediums = desiredDeliveryMediums
            self.messageAction = messageAction
            self.validationData = validationData
            self.username = username
            self.temporaryPassword = temporaryPassword
            self.userAttributes = userAttributes
        }

    }

    public struct AdminListGroupsForUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The groups that the user belongs to.
        public var groups: [GroupType]? = nil

        public init() {}

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

    }

    public struct AdminListDevicesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token.
        public var paginationToken: String? = nil
        /// The devices in the list of devices response.
        public var devices: [DeviceType]? = nil

        public init() {}

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

    }

    public struct PasswordPolicyType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The minimum length of the password policy that you have set. Cannot be less than 6.
        public var minimumLength: Int32? = nil
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public var requireLowercase: Bool? = nil
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public var requireSymbols: Bool? = nil
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public var requireUppercase: Bool? = nil
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public var requireNumbers: Bool? = nil

        public init() {}

        public init(minimumLength: Int32? = nil, requireLowercase: Bool? = nil, requireSymbols: Bool? = nil, requireUppercase: Bool? = nil, requireNumbers: Bool? = nil) {
            self.minimumLength = minimumLength
            self.requireLowercase = requireLowercase
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.requireNumbers = requireNumbers
        }

    }

    public struct UserType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public var userStatus: String? = nil
        /// Specifies whether the user is enabled.
        public var enabled: Bool? = nil
        /// The user name of the user you wish to describe.
        public var username: String? = nil
        /// The creation date of the user.
        public var userCreateDate: Date? = nil
        /// A container with information about the user type attributes.
        public var attributes: [AttributeType]? = nil
        /// The last modified date of the user.
        public var userLastModifiedDate: Date? = nil
        /// The MFA options for the user.
        public var mFAOptions: [MFAOptionType]? = nil

        public init() {}

        public init(userStatus: String? = nil, enabled: Bool? = nil, username: String? = nil, userCreateDate: Date? = nil, attributes: [AttributeType]? = nil, userLastModifiedDate: Date? = nil, mFAOptions: [MFAOptionType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.attributes = attributes
            self.userLastModifiedDate = userLastModifiedDate
            self.mFAOptions = mFAOptions
        }

    }

    public struct ListUsersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The attributes to get from the request to list users.
        public var attributesToGet: [String]? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var paginationToken: String? = nil
        /// The limit of the request to list users.
        public var limit: Int32? = nil
        /// The filter for the list users request.
        public var filter: String? = nil
        /// The user pool ID for which you want to list users.
        public var userPoolId: String = ""

        public init() {}

        public init(attributesToGet: [String]? = nil, paginationToken: String? = nil, limit: Int32? = nil, filter: String? = nil, userPoolId: String) {
            self.attributesToGet = attributesToGet
            self.paginationToken = paginationToken
            self.limit = limit
            self.filter = filter
            self.userPoolId = userPoolId
        }

    }

    public struct GetDeviceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device.
        public var device: DeviceType = DeviceType()

        public init() {}

        public init(device: DeviceType) {
            self.device = device
        }

    }

    public struct AdminGetDeviceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device.
        public var device: DeviceType = DeviceType()

        public init() {}

        public init(device: DeviceType) {
            self.device = device
        }

    }

    public struct AdminUpdateDeviceStatusRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The status indicating whether a device has been remembered or not.
        public var deviceRememberedStatus: String? = nil
        /// The user pool ID&gt;
        public var userPoolId: String = ""
        /// The user name.
        public var username: String = ""

        public init() {}

        public init(deviceKey: String, deviceRememberedStatus: String? = nil, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct VerifyUserAttributeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The attribute name in the request to verify user attributes.
        public var attributeName: String = ""
        /// The verification code in the request to verify user attributes.
        public var code: String = ""
        /// Represents the access token of the request to verify user attributes.
        public var accessToken: String? = nil

        public init() {}

        public init(attributeName: String, code: String, accessToken: String? = nil) {
            self.attributeName = attributeName
            self.code = code
            self.accessToken = accessToken
        }

    }

    public struct ChangePasswordResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AdminForgetDeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The user pool ID.
        public var userPoolId: String = ""
        /// The user name.
        public var username: String = ""

        public init() {}

        public init(deviceKey: String, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct AdminGetDeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The device key.
        public var deviceKey: String = ""
        /// The user name.
        public var username: String = ""
        /// The user pool ID.
        public var userPoolId: String = ""

        public init() {}

        public init(deviceKey: String, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.username = username
            self.userPoolId = userPoolId
        }

    }

    public struct InitiateAuthRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client app's metadata.
        public var clientMetadata: [String: String]? = nil
        /// The client ID.
        public var clientId: String = ""
        /// The authentication parameters.
        public var authParameters: [String: String]? = nil
        /// The authentication flow.
        public var authFlow: String = ""

        public init() {}

        public init(clientMetadata: [String: String]? = nil, clientId: String, authParameters: [String: String]? = nil, authFlow: String) {
            self.clientMetadata = clientMetadata
            self.clientId = clientId
            self.authParameters = authParameters
            self.authFlow = authFlow
        }

    }

    public struct ListUserPoolClientsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID for the user pool where you want to list user pool clients.
        public var userPoolId: String = ""
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The maximum number of results you want the request to return when listing the user pool clients.
        public var maxResults: Int32? = nil

        public init() {}

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct AdminAddUserToGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The username for the user.
        public var username: String = ""
        /// The group name.
        public var groupName: String = ""
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

    }

    public struct EmailConfigurationType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The REPLY-TO email address.
        public var replyToEmailAddress: String? = nil
        /// The Amazon Resource Name (ARN) of the email source.
        public var sourceArn: String? = nil

        public init() {}

        public init(replyToEmailAddress: String? = nil, sourceArn: String? = nil) {
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }

    }

    public struct AdminUserGlobalSignOutRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user pool ID.
        public var userPoolId: String = ""
        /// The user name.
        public var username: String = ""

        public init() {}

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

    }

    public struct AdminCreateUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user returned in the request to create a new user.
        public var user: UserType? = nil

        public init() {}

        public init(user: UserType? = nil) {
            self.user = user
        }

    }

    public struct ListUserPoolClientsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public var nextToken: String? = nil
        /// The user pool clients in the response that lists user pool clients.
        public var userPoolClients: [UserPoolClientDescription]? = nil

        public init() {}

        public init(nextToken: String? = nil, userPoolClients: [UserPoolClientDescription]? = nil) {
            self.nextToken = nextToken
            self.userPoolClients = userPoolClients
        }

    }

    public struct DeleteGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the group.
        public var groupName: String = ""
        /// The user pool ID for the user pool.
        public var userPoolId: String = ""

        public init() {}

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

    }

}