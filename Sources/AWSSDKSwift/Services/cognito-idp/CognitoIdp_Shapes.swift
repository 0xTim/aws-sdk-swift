// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CognitoIdp {

    public struct AdminUserGlobalSignOutResponse: AWSShape {

    }

    public struct AddCustomAttributesResponse: AWSShape {

    }

    public enum VerifiedAttributeType: String, CustomStringConvertible, Codable {
        case phoneNumber = "phone_number"
        case email = "email"
        public var description: String { return self.rawValue }
    }

    public struct ListDevicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The limit of the device request.
        public let limit: Int32?
        /// The pagination token for the list request.
        public let paginationToken: String?
        /// The access tokens for the request to list devices.
        public let accessToken: String

        public init(limit: Int32? = nil, paginationToken: String? = nil, accessToken: String) {
            self.limit = limit
            self.paginationToken = paginationToken
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case paginationToken = "PaginationToken"
            case accessToken = "AccessToken"
        }
    }

    public struct AnalyticsConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "UserDataShared", required: false, type: .boolean)
        ]
        /// The external ID.
        public let externalId: String
        /// The application ID for an Amazon Pinpoint application.
        public let applicationId: String
        /// The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
        public let roleArn: String
        /// If UserDataShared is true, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
        public let userDataShared: Bool?

        public init(externalId: String, applicationId: String, roleArn: String, userDataShared: Bool? = nil) {
            self.externalId = externalId
            self.applicationId = applicationId
            self.roleArn = roleArn
            self.userDataShared = userDataShared
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case applicationId = "ApplicationId"
            case roleArn = "RoleArn"
            case userDataShared = "UserDataShared"
        }
    }

    public struct DeleteUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID for the user pool you want to delete.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUserAttributeVerificationCodeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]
        /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct AdminRespondToAuthChallengeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .map), 
            AWSShapeMember(label: "ChallengeName", required: true, type: .enum), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let contextData: ContextDataType?
        /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?
        /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:    SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).    PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).    ADMIN_NO_SRP_AUTH: PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret).     NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).    The value of the USERNAME attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the AdminInitiateAuth response includes the actual username value in the USERNAMEUSER_ID_FOR_SRP attribute, even if you specified an alias in your call to AdminInitiateAuth.
        public let challengeResponses: [String: String]?
        /// The challenge name. For more information, see .
        public let challengeName: ChallengeNameType
        /// The app client ID.
        public let clientId: String
        /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminRespondToAuthChallenge calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(contextData: ContextDataType? = nil, session: String? = nil, challengeResponses: [String: String]? = nil, challengeName: ChallengeNameType, clientId: String, analyticsMetadata: AnalyticsMetadataType? = nil, userPoolId: String) {
            self.contextData = contextData
            self.session = session
            self.challengeResponses = challengeResponses
            self.challengeName = challengeName
            self.clientId = clientId
            self.analyticsMetadata = analyticsMetadata
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case contextData = "ContextData"
            case session = "Session"
            case challengeResponses = "ChallengeResponses"
            case challengeName = "ChallengeName"
            case clientId = "ClientId"
            case analyticsMetadata = "AnalyticsMetadata"
            case userPoolId = "UserPoolId"
        }
    }

    public struct InitiateAuthResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The name of the challenge which you are responding to with this call. This is returned to you in the AdminInitiateAuth response if you need to pass another challenge. Valid values include the following. Note that all of these challenges require USERNAME and SECRET_HASH (if applicable) in the parameters.    SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.    PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.    CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.    DEVICE_SRP_AUTH: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.    DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.    NEW_PASSWORD_REQUIRED: For users which are required to change their passwords after successful first login. This challenge should be passed with NEW_PASSWORD and any other required attributes.  
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. These are returned to you in the InitiateAuth response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (RespondToAuthChallenge).  All challenges require USERNAME and SECRET_HASH (if applicable).
        public let challengeParameters: [String: String]?
        /// The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct ConfirmSignUpResponse: AWSShape {

    }

    public struct DeleteUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// An array of strings representing the user attribute names you wish to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributeNames: [String]
        /// The access token used in the request to delete user attributes.
        public let accessToken: String

        public init(userAttributeNames: [String], accessToken: String) {
            self.userAttributeNames = userAttributeNames
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributeNames = "UserAttributeNames"
            case accessToken = "AccessToken"
        }
    }

    public struct StartUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The access token returned by the server response to get information about the user.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct DescribeUserPoolDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainDescription", required: false, type: .structure)
        ]
        /// A domain description object containing information about the domain.
        public let domainDescription: DomainDescriptionType?

        public init(domainDescription: DomainDescriptionType? = nil) {
            self.domainDescription = domainDescription
        }

        private enum CodingKeys: String, CodingKey {
            case domainDescription = "DomainDescription"
        }
    }

    public struct DeleteUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The app client ID of the app associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool where you want to delete the client.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminRemoveUserFromGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The username for the user.
        public let username: String
        /// The group name.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateDeviceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceRememberedStatus", required: false, type: .enum), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The status of whether a device is remembered.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The access token.
        public let accessToken: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceRememberedStatus = "DeviceRememberedStatus"
            case accessToken = "AccessToken"
        }
    }

    public struct RiskConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskExceptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CompromisedCredentialsRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AccountTakeoverRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The configuration to override the risk decision.
        public let riskExceptionConfiguration: RiskExceptionConfigurationType?
        /// The last modified date.
        public let lastModifiedDate: TimeStamp?
        /// The app client ID.
        public let clientId: String?
        /// The compromised credentials risk configuration object including the EventFilter and the EventAction 
        public let compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType?
        /// The account takeover risk configuration object including the NotifyConfiguration object and Actions to take in the case of an account takeover.
        public let accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType?
        /// The user pool ID.
        public let userPoolId: String?

        public init(riskExceptionConfiguration: RiskExceptionConfigurationType? = nil, lastModifiedDate: TimeStamp? = nil, clientId: String? = nil, compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType? = nil, accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType? = nil, userPoolId: String? = nil) {
            self.riskExceptionConfiguration = riskExceptionConfiguration
            self.lastModifiedDate = lastModifiedDate
            self.clientId = clientId
            self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
            self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case riskExceptionConfiguration = "RiskExceptionConfiguration"
            case lastModifiedDate = "LastModifiedDate"
            case clientId = "ClientId"
            case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
            case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UserPoolClientDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The client name from the user pool client description.
        public let clientName: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public let userPoolId: String?

        public init(clientName: String? = nil, clientId: String? = nil, userPoolId: String? = nil) {
            self.clientName = clientName
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientName = "ClientName"
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DeviceSecretVerifierConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Salt", required: false, type: .string), 
            AWSShapeMember(label: "PasswordVerifier", required: false, type: .string)
        ]
        /// The salt.
        public let salt: String?
        /// The password verifier.
        public let passwordVerifier: String?

        public init(salt: String? = nil, passwordVerifier: String? = nil) {
            self.salt = salt
            self.passwordVerifier = passwordVerifier
        }

        private enum CodingKeys: String, CodingKey {
            case salt = "Salt"
            case passwordVerifier = "PasswordVerifier"
        }
    }

    public struct RiskExceptionConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockedIPRangeList", required: false, type: .list), 
            AWSShapeMember(label: "SkippedIPRangeList", required: false, type: .list)
        ]
        /// Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.
        public let blockedIPRangeList: [String]?
        /// Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.
        public let skippedIPRangeList: [String]?

        public init(blockedIPRangeList: [String]? = nil, skippedIPRangeList: [String]? = nil) {
            self.blockedIPRangeList = blockedIPRangeList
            self.skippedIPRangeList = skippedIPRangeList
        }

        private enum CodingKeys: String, CodingKey {
            case blockedIPRangeList = "BlockedIPRangeList"
            case skippedIPRangeList = "SkippedIPRangeList"
        }
    }

    public struct ListUserImportJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "UserImportJobs", required: false, type: .list)
        ]
        /// An identifier that can be used to return the next set of user import jobs in the list.
        public let paginationToken: String?
        /// The user import jobs.
        public let userImportJobs: [UserImportJobType]?

        public init(paginationToken: String? = nil, userImportJobs: [UserImportJobType]? = nil) {
            self.paginationToken = paginationToken
            self.userImportJobs = userImportJobs
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case userImportJobs = "UserImportJobs"
        }
    }

    public struct AdminUpdateAuthEventFeedbackResponse: AWSShape {

    }

    public struct RespondToAuthChallengeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The challenge name. For more information, see .
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. For more information, see .
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the request to respond to the authentication challenge.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct CreateUserPoolClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]
        /// The user pool client that was just created.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The group objects for the groups.
        public let groups: [GroupType]?

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groups = "Groups"
        }
    }

    public struct AdminInitiateAuthRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContextData", required: false, type: .structure), 
            AWSShapeMember(label: "AuthParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthFlow", required: true, type: .enum), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "ClientMetadata", required: false, type: .map), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let contextData: ContextDataType?
        /// The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow:   For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: USERNAME (required), SECRET_HASH (required if the app client is configured with a client secret), REFRESH_TOKEN (required), DEVICE_KEY    For ADMIN_NO_SRP_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), PASSWORD (required), DEVICE_KEY    For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY   
        public let authParameters: [String: String]?
        /// The authentication flow for this call to execute. The API action will depend on this value. For example:    REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.    USER_SRP_AUTH will take in USERNAME and SRP_A and return the SRP variables to be used for next challenge execution.   Valid values include:    USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.    REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.    CUSTOM_AUTH: Custom authentication flow.    ADMIN_NO_SRP_AUTH: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.  
        public let authFlow: AuthFlowType
        /// The app client ID.
        public let clientId: String
        /// This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
        public let clientMetadata: [String: String]?
        /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminInitiateAuth calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(contextData: ContextDataType? = nil, authParameters: [String: String]? = nil, authFlow: AuthFlowType, clientId: String, clientMetadata: [String: String]? = nil, analyticsMetadata: AnalyticsMetadataType? = nil, userPoolId: String) {
            self.contextData = contextData
            self.authParameters = authParameters
            self.authFlow = authFlow
            self.clientId = clientId
            self.clientMetadata = clientMetadata
            self.analyticsMetadata = analyticsMetadata
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case contextData = "ContextData"
            case authParameters = "AuthParameters"
            case authFlow = "AuthFlow"
            case clientId = "ClientId"
            case clientMetadata = "ClientMetadata"
            case analyticsMetadata = "AnalyticsMetadata"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(providerName: String, userPoolId: String) {
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateUserPoolDomainResponse: AWSShape {

    }

    public struct UpdateUserPoolClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]
        /// The user pool client value from the response from the server when an update user pool client request is made.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct UpdateIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "ProviderDetails", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The identity provider name.
        public let providerName: String
        /// The identity provider attribute mapping to be changed.
        public let attributeMapping: [String: String]?
        /// The identity provider details to be updated, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]?
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifiers: [String]? = nil, providerName: String, attributeMapping: [String: String]? = nil, providerDetails: [String: String]? = nil, userPoolId: String) {
            self.idpIdentifiers = idpIdentifiers
            self.providerName = providerName
            self.attributeMapping = attributeMapping
            self.providerDetails = providerDetails
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifiers = "IdpIdentifiers"
            case providerName = "ProviderName"
            case attributeMapping = "AttributeMapping"
            case providerDetails = "ProviderDetails"
            case userPoolId = "UserPoolId"
        }
    }

    public struct VerifyUserAttributeResponse: AWSShape {

    }

    public enum AliasAttributeType: String, CustomStringConvertible, Codable {
        case phoneNumber = "phone_number"
        case email = "email"
        case preferredUsername = "preferred_username"
        public var description: String { return self.rawValue }
    }

    public struct AssociateSoftwareTokenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
        public let session: String?
        /// The access token.
        public let accessToken: String?

        public init(session: String? = nil, accessToken: String? = nil) {
            self.session = session
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case session = "Session"
            case accessToken = "AccessToken"
        }
    }

    public struct ResourceServerScopeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScopeName", required: true, type: .string), 
            AWSShapeMember(label: "ScopeDescription", required: true, type: .string)
        ]
        /// The name of the scope.
        public let scopeName: String
        /// A description of the scope.
        public let scopeDescription: String

        public init(scopeName: String, scopeDescription: String) {
            self.scopeName = scopeName
            self.scopeDescription = scopeDescription
        }

        private enum CodingKeys: String, CodingKey {
            case scopeName = "ScopeName"
            case scopeDescription = "ScopeDescription"
        }
    }

    public struct SetUICustomizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UICustomization", required: true, type: .structure)
        ]
        /// The UI customization information.
        public let uICustomization: UICustomizationType

        public init(uICustomization: UICustomizationType) {
            self.uICustomization = uICustomization
        }

        private enum CodingKeys: String, CodingKey {
            case uICustomization = "UICustomization"
        }
    }

    public struct UserPoolClientType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ClientSecret", required: false, type: .string), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list)
        ]
        /// Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// The writeable attributes.
        public let writeAttributes: [String]?
        /// The Read-only attributes.
        public let readAttributes: [String]?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// The date the user pool client was created.
        public let creationDate: TimeStamp?
        /// The Amazon Pinpoint analytics configuration for the user pool client.
        public let analyticsConfiguration: AnalyticsConfigurationType?
        /// The client secret from the user pool request of the client type.
        public let clientSecret: String?
        /// A list of allowed callback URLs for the identity providers.
        public let callbackURLs: [String]?
        /// The user pool ID for the user pool client.
        public let userPoolId: String?
        /// The client name from the user pool request of the client type.
        public let clientName: String?
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// The date the user pool client was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The default redirect URI. Must be in the CallbackURLs list.
        public let defaultRedirectURI: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?

        public init(allowedOAuthFlowsUserPoolClient: Bool? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, creationDate: TimeStamp? = nil, analyticsConfiguration: AnalyticsConfigurationType? = nil, clientSecret: String? = nil, callbackURLs: [String]? = nil, userPoolId: String? = nil, clientName: String? = nil, supportedIdentityProviders: [String]? = nil, logoutURLs: [String]? = nil, allowedOAuthFlows: [OAuthFlowType]? = nil, lastModifiedDate: TimeStamp? = nil, defaultRedirectURI: String? = nil, clientId: String? = nil, allowedOAuthScopes: [String]? = nil) {
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.explicitAuthFlows = explicitAuthFlows
            self.creationDate = creationDate
            self.analyticsConfiguration = analyticsConfiguration
            self.clientSecret = clientSecret
            self.callbackURLs = callbackURLs
            self.userPoolId = userPoolId
            self.clientName = clientName
            self.supportedIdentityProviders = supportedIdentityProviders
            self.logoutURLs = logoutURLs
            self.allowedOAuthFlows = allowedOAuthFlows
            self.lastModifiedDate = lastModifiedDate
            self.defaultRedirectURI = defaultRedirectURI
            self.clientId = clientId
            self.allowedOAuthScopes = allowedOAuthScopes
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case refreshTokenValidity = "RefreshTokenValidity"
            case writeAttributes = "WriteAttributes"
            case readAttributes = "ReadAttributes"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case creationDate = "CreationDate"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case clientSecret = "ClientSecret"
            case callbackURLs = "CallbackURLs"
            case userPoolId = "UserPoolId"
            case clientName = "ClientName"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case logoutURLs = "LogoutURLs"
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case lastModifiedDate = "LastModifiedDate"
            case defaultRedirectURI = "DefaultRedirectURI"
            case clientId = "ClientId"
            case allowedOAuthScopes = "AllowedOAuthScopes"
        }
    }

    public struct DeleteIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identity provider name.
        public let providerName: String
        /// The user pool ID.
        public let userPoolId: String

        public init(providerName: String, userPoolId: String) {
            self.providerName = providerName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetUserMFAPreferenceResponse: AWSShape {

    }

    public struct GroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The user pool ID for the user pool.
        public let userPoolId: String?
        /// The name of the group.
        public let groupName: String?
        /// The date the group was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The date the group was created.
        public let creationDate: TimeStamp?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Groups with higher Precedence values take precedence over groups with lower Precedence values or with null Precedence values. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The role ARN for the group.
        public let roleArn: String?
        /// A string containing the description of the group.
        public let description: String?

        public init(userPoolId: String? = nil, groupName: String? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, precedence: Int32? = nil, roleArn: String? = nil, description: String? = nil) {
            self.userPoolId = userPoolId
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case groupName = "GroupName"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case precedence = "Precedence"
            case roleArn = "RoleArn"
            case description = "Description"
        }
    }

    public enum AuthFlowType: String, CustomStringConvertible, Codable {
        case userSrpAuth = "USER_SRP_AUTH"
        case refreshTokenAuth = "REFRESH_TOKEN_AUTH"
        case refreshToken = "REFRESH_TOKEN"
        case customAuth = "CUSTOM_AUTH"
        case adminNoSrpAuth = "ADMIN_NO_SRP_AUTH"
        public var description: String { return self.rawValue }
    }

    public struct ResourceServerType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Scopes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The identifier for the resource server.
        public let identifier: String?
        /// The name of the resource server.
        public let name: String?
        /// A list of scopes that are defined for the resource server.
        public let scopes: [ResourceServerScopeType]?
        /// The user pool ID for the user pool that hosts the resource server.
        public let userPoolId: String?

        public init(identifier: String? = nil, name: String? = nil, scopes: [ResourceServerScopeType]? = nil, userPoolId: String? = nil) {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case name = "Name"
            case scopes = "Scopes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct StopUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public enum AdvancedSecurityModeType: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case audit = "AUDIT"
        case enforced = "ENFORCED"
        public var description: String { return self.rawValue }
    }

    public enum UserStatusType: String, CustomStringConvertible, Codable {
        case unconfirmed = "UNCONFIRMED"
        case confirmed = "CONFIRMED"
        case archived = "ARCHIVED"
        case compromised = "COMPROMISED"
        case unknown = "UNKNOWN"
        case resetRequired = "RESET_REQUIRED"
        case forceChangePassword = "FORCE_CHANGE_PASSWORD"
        public var description: String { return self.rawValue }
    }

    public struct VerifySoftwareTokenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The session which should be passed both ways in challenge-response calls to the service.
        public let session: String?
        /// The status of the verify software token.
        public let status: VerifySoftwareTokenResponseType?

        public init(session: String? = nil, status: VerifySoftwareTokenResponseType? = nil) {
            self.session = session
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case session = "Session"
            case status = "Status"
        }
    }

    public struct AccountTakeoverActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notify", required: true, type: .boolean), 
            AWSShapeMember(label: "EventAction", required: true, type: .enum)
        ]
        /// Flag specifying whether to send a notification.
        public let notify: Bool
        /// The event action.    BLOCK Choosing this action will block the request.    MFA_IF_CONFIGURED Throw MFA challenge if user has configured it, else allow the request.    MFA_REQUIRED Throw MFA challenge if user has configured it, else block the request.    NO_ACTION Allow the user sign-in.  
        public let eventAction: AccountTakeoverEventActionType

        public init(notify: Bool, eventAction: AccountTakeoverEventActionType) {
            self.notify = notify
            self.eventAction = eventAction
        }

        private enum CodingKeys: String, CodingKey {
            case notify = "Notify"
            case eventAction = "EventAction"
        }
    }

    public struct GetUserAttributeVerificationCodeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The attribute name returned by the server response to get the user attribute verification code.
        public let attributeName: String
        /// The access token returned by the server response to get the user attribute verification code.
        public let accessToken: String

        public init(attributeName: String, accessToken: String) {
            self.attributeName = attributeName
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case accessToken = "AccessToken"
        }
    }

    public struct UpdateDeviceStatusResponse: AWSShape {

    }

    public struct AdminInitiateAuthResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The name of the challenge which you are responding to with this call. This is returned to you in the AdminInitiateAuth response if you need to pass another challenge.    SMS_MFA: Next challenge is to supply an SMS_MFA_CODE, delivered via SMS.    PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.    CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.    DEVICE_SRP_AUTH: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.    DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.    ADMIN_NO_SRP_AUTH: This is returned if you need to authenticate with USERNAME and PASSWORD directly. An app client must be enabled to use this flow.    NEW_PASSWORD_REQUIRED: For users which are required to change their passwords after successful first login. This challenge should be passed with NEW_PASSWORD and any other required attributes.  
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. These are returned to you in the AdminInitiateAuth response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (AdminRespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable). The value of the USER_IF_FOR_SRP attribute will be the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to AdminInitiateAuth. This is because, in the AdminRespondToAuthChallenge API ChallengeResponses, the USERNAME attribute cannot be an alias.
        public let challengeParameters: [String: String]?
        /// The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If AdminInitiateAuth or AdminRespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next AdminRespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct SetRiskConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskConfiguration", required: true, type: .structure)
        ]
        /// The risk configuration.
        public let riskConfiguration: RiskConfigurationType

        public init(riskConfiguration: RiskConfigurationType) {
            self.riskConfiguration = riskConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case riskConfiguration = "RiskConfiguration"
        }
    }

    public struct NotifyEmailType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HtmlBody", required: false, type: .string), 
            AWSShapeMember(label: "Subject", required: true, type: .string), 
            AWSShapeMember(label: "TextBody", required: false, type: .string)
        ]
        /// The HTML body.
        public let htmlBody: String?
        /// The subject.
        public let subject: String
        /// The text body.
        public let textBody: String?

        public init(htmlBody: String? = nil, subject: String, textBody: String? = nil) {
            self.htmlBody = htmlBody
            self.subject = subject
            self.textBody = textBody
        }

        private enum CodingKeys: String, CodingKey {
            case htmlBody = "HtmlBody"
            case subject = "Subject"
            case textBody = "TextBody"
        }
    }

    public struct AdminSetUserMFAPreferenceResponse: AWSShape {

    }

    public struct ListUserImportJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: true, type: .integer)
        ]
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String
        /// An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list.
        public let paginationToken: String?
        /// The maximum number of import jobs you want the request to return.
        public let maxResults: Int32

        public init(userPoolId: String, paginationToken: String? = nil, maxResults: Int32) {
            self.userPoolId = userPoolId
            self.paginationToken = paginationToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case paginationToken = "PaginationToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ChangePasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreviousPassword", required: true, type: .string), 
            AWSShapeMember(label: "ProposedPassword", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The old password.
        public let previousPassword: String
        /// The new password.
        public let proposedPassword: String
        /// The access token.
        public let accessToken: String

        public init(previousPassword: String, proposedPassword: String, accessToken: String) {
            self.previousPassword = previousPassword
            self.proposedPassword = proposedPassword
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case previousPassword = "PreviousPassword"
            case proposedPassword = "ProposedPassword"
            case accessToken = "AccessToken"
        }
    }

    public struct UpdateResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Scopes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identifier for the resource server.
        public let identifier: String
        /// The name of the resource server.
        public let name: String
        /// The scope values to be set for the resource server.
        public let scopes: [ResourceServerScopeType]?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(identifier: String, name: String, scopes: [ResourceServerScopeType]? = nil, userPoolId: String) {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case name = "Name"
            case scopes = "Scopes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminGetUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserStatus", required: false, type: .enum), 
            AWSShapeMember(label: "UserMFASettingList", required: false, type: .list), 
            AWSShapeMember(label: "PreferredMfaSetting", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "UserLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list)
        ]
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public let userStatus: UserStatusType?
        public let userMFASettingList: [String]?
        public let preferredMfaSetting: String?
        /// Indicates that the status is enabled.
        public let enabled: Bool?
        /// The user name of the user about whom you are receiving information.
        public let username: String
        /// The date the user was created.
        public let userCreateDate: TimeStamp?
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The date the user was last modified.
        public let userLastModifiedDate: TimeStamp?
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]?

        public init(userStatus: UserStatusType? = nil, userMFASettingList: [String]? = nil, preferredMfaSetting: String? = nil, enabled: Bool? = nil, username: String, userCreateDate: TimeStamp? = nil, mFAOptions: [MFAOptionType]? = nil, userLastModifiedDate: TimeStamp? = nil, userAttributes: [AttributeType]? = nil) {
            self.userStatus = userStatus
            self.userMFASettingList = userMFASettingList
            self.preferredMfaSetting = preferredMfaSetting
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.mFAOptions = mFAOptions
            self.userLastModifiedDate = userLastModifiedDate
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case userStatus = "UserStatus"
            case userMFASettingList = "UserMFASettingList"
            case preferredMfaSetting = "PreferredMfaSetting"
            case enabled = "Enabled"
            case username = "Username"
            case userCreateDate = "UserCreateDate"
            case mFAOptions = "MFAOptions"
            case userLastModifiedDate = "UserLastModifiedDate"
            case userAttributes = "UserAttributes"
        }
    }

    public struct ListUserPoolsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPools", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The user pools from the response to list users.
        public let userPools: [UserPoolDescriptionType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(userPools: [UserPoolDescriptionType]? = nil, nextToken: String? = nil) {
            self.userPools = userPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case userPools = "UserPools"
            case nextToken = "NextToken"
        }
    }

    public struct ListUsersInGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The name of the group.
        public let groupName: String
        /// The limit of the request to list users.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.groupName = groupName
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A string containing the description of the group.
        public let description: String?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The name of the group. Must be unique.
        public let groupName: String
        /// The role ARN for the group.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case precedence = "Precedence"
            case groupName = "GroupName"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case signin = "SignIn"
        case signup = "SignUp"
        case forgotpassword = "ForgotPassword"
        public var description: String { return self.rawValue }
    }

    public struct SoftwareTokenMfaConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Specifies whether software token MFA is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct ConfirmDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserConfirmationNecessary", required: false, type: .boolean)
        ]
        /// Indicates whether the user confirmation is necessary to confirm the device response.
        public let userConfirmationNecessary: Bool?

        public init(userConfirmationNecessary: Bool? = nil) {
            self.userConfirmationNecessary = userConfirmationNecessary
        }

        private enum CodingKeys: String, CodingKey {
            case userConfirmationNecessary = "UserConfirmationNecessary"
        }
    }

    public struct AdminDisableUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to disable the user.
        public let userPoolId: String
        /// The user name of the user you wish to disable.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct UpdateUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// The access token for the request to update user attributes.
        public let accessToken: String

        public init(userAttributes: [AttributeType], accessToken: String) {
            self.userAttributes = userAttributes
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributes = "UserAttributes"
            case accessToken = "AccessToken"
        }
    }

    public struct UpdateAuthEventFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FeedbackToken", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "FeedbackValue", required: true, type: .enum), 
            AWSShapeMember(label: "EventId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The feedback token.
        public let feedbackToken: String
        /// The user pool username.
        public let username: String
        /// The authentication event feedback value.
        public let feedbackValue: FeedbackValueType
        /// The event ID.
        public let eventId: String
        /// The user pool ID.
        public let userPoolId: String

        public init(feedbackToken: String, username: String, feedbackValue: FeedbackValueType, eventId: String, userPoolId: String) {
            self.feedbackToken = feedbackToken
            self.username = username
            self.feedbackValue = feedbackValue
            self.eventId = eventId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case feedbackToken = "FeedbackToken"
            case username = "Username"
            case feedbackValue = "FeedbackValue"
            case eventId = "EventId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ConfirmForgotPasswordResponse: AWSShape {

    }

    public struct UpdateAuthEventFeedbackResponse: AWSShape {

    }

    public struct AdminSetUserSettingsResponse: AWSShape {

    }

    public enum DeviceRememberedStatusType: String, CustomStringConvertible, Codable {
        case remembered = "remembered"
        case notRemembered = "not_remembered"
        public var description: String { return self.rawValue }
    }

    public struct UpdateResourceServerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceServer", required: true, type: .structure)
        ]
        /// The resource server.
        public let resourceServer: ResourceServerType

        public init(resourceServer: ResourceServerType) {
            self.resourceServer = resourceServer
        }

        private enum CodingKeys: String, CodingKey {
            case resourceServer = "ResourceServer"
        }
    }

    public struct CreateResourceServerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceServer", required: true, type: .structure)
        ]
        /// The newly created resource server.
        public let resourceServer: ResourceServerType

        public init(resourceServer: ResourceServerType) {
            self.resourceServer = resourceServer
        }

        private enum CodingKeys: String, CodingKey {
            case resourceServer = "ResourceServer"
        }
    }

    public struct DeleteUserPoolDomainResponse: AWSShape {

    }

    public enum MessageActionType: String, CustomStringConvertible, Codable {
        case resend = "RESEND"
        case suppress = "SUPPRESS"
        public var description: String { return self.rawValue }
    }

    public enum AccountTakeoverEventActionType: String, CustomStringConvertible, Codable {
        case block = "BLOCK"
        case mfaIfConfigured = "MFA_IF_CONFIGURED"
        case mfaRequired = "MFA_REQUIRED"
        case noAction = "NO_ACTION"
        public var description: String { return self.rawValue }
    }

    public struct ListResourceServersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceServers", required: true, type: .list)
        ]
        /// A pagination token.
        public let nextToken: String?
        /// The resource servers.
        public let resourceServers: [ResourceServerType]

        public init(nextToken: String? = nil, resourceServers: [ResourceServerType]) {
            self.nextToken = nextToken
            self.resourceServers = resourceServers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceServers = "ResourceServers"
        }
    }

    public struct AdminDisableProviderForUserResponse: AWSShape {

    }

    public struct SmsConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "SnsCallerArn", required: true, type: .string)
        ]
        /// The external ID.
        public let externalId: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
        public let snsCallerArn: String

        public init(externalId: String? = nil, snsCallerArn: String) {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case snsCallerArn = "SnsCallerArn"
        }
    }

    public struct AnalyticsMetadataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsEndpointId", required: false, type: .string)
        ]
        /// The endpoint ID.
        public let analyticsEndpointId: String?

        public init(analyticsEndpointId: String? = nil) {
            self.analyticsEndpointId = analyticsEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsEndpointId = "AnalyticsEndpointId"
        }
    }

    public struct SetUserPoolMfaConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SoftwareTokenMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum)
        ]
        /// The software token MFA configuration.
        public let softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType?
        /// The SMS text message MFA configuration.
        public let smsMfaConfiguration: SmsMfaConfigType?
        /// The MFA configuration.
        public let mfaConfiguration: UserPoolMfaType?

        public init(softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil, smsMfaConfiguration: SmsMfaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil) {
            self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
            self.smsMfaConfiguration = smsMfaConfiguration
            self.mfaConfiguration = mfaConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
            case smsMfaConfiguration = "SmsMfaConfiguration"
            case mfaConfiguration = "MfaConfiguration"
        }
    }

    public struct GetCSVHeaderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSVHeader", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The header information for the .csv file for the user import job.
        public let cSVHeader: [String]?
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String?

        public init(cSVHeader: [String]? = nil, userPoolId: String? = nil) {
            self.cSVHeader = cSVHeader
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case cSVHeader = "CSVHeader"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminEnableUserResponse: AWSShape {

    }

    public struct UserPoolAddOnsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdvancedSecurityMode", required: true, type: .enum)
        ]
        /// The advanced security mode.
        public let advancedSecurityMode: AdvancedSecurityModeType

        public init(advancedSecurityMode: AdvancedSecurityModeType) {
            self.advancedSecurityMode = advancedSecurityMode
        }

        private enum CodingKeys: String, CodingKey {
            case advancedSecurityMode = "AdvancedSecurityMode"
        }
    }

    public struct ListUsersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string)
        ]
        /// The users returned in the request to list users.
        public let users: [UserType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?

        public init(users: [UserType]? = nil, paginationToken: String? = nil) {
            self.users = users
            self.paginationToken = paginationToken
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case paginationToken = "PaginationToken"
        }
    }

    public struct AccountTakeoverActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LowAction", required: false, type: .structure), 
            AWSShapeMember(label: "MediumAction", required: false, type: .structure), 
            AWSShapeMember(label: "HighAction", required: false, type: .structure)
        ]
        /// Action to take for a low risk.
        public let lowAction: AccountTakeoverActionType?
        /// Action to take for a medium risk.
        public let mediumAction: AccountTakeoverActionType?
        /// Action to take for a high risk.
        public let highAction: AccountTakeoverActionType?

        public init(lowAction: AccountTakeoverActionType? = nil, mediumAction: AccountTakeoverActionType? = nil, highAction: AccountTakeoverActionType? = nil) {
            self.lowAction = lowAction
            self.mediumAction = mediumAction
            self.highAction = highAction
        }

        private enum CodingKeys: String, CodingKey {
            case lowAction = "LowAction"
            case mediumAction = "MediumAction"
            case highAction = "HighAction"
        }
    }

    public struct CreateUserPoolResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPool", required: false, type: .structure)
        ]
        /// A container for the user pool details.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        private enum CodingKeys: String, CodingKey {
            case userPool = "UserPool"
        }
    }

    public struct ProviderDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderType", required: false, type: .enum)
        ]
        /// The date the provider was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The date the provider was added to the user pool.
        public let creationDate: TimeStamp?
        /// The identity provider name.
        public let providerName: String?
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType?

        public init(lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, providerName: String? = nil, providerType: IdentityProviderTypeType? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.providerName = providerName
            self.providerType = providerType
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
        }
    }

    public struct EventFeedbackType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Provider", required: true, type: .string), 
            AWSShapeMember(label: "FeedbackValue", required: true, type: .enum), 
            AWSShapeMember(label: "FeedbackDate", required: false, type: .timestamp)
        ]
        /// The provider.
        public let provider: String
        /// The event feedback value.
        public let feedbackValue: FeedbackValueType
        /// The event feedback date.
        public let feedbackDate: TimeStamp?

        public init(provider: String, feedbackValue: FeedbackValueType, feedbackDate: TimeStamp? = nil) {
            self.provider = provider
            self.feedbackValue = feedbackValue
            self.feedbackDate = feedbackDate
        }

        private enum CodingKeys: String, CodingKey {
            case provider = "Provider"
            case feedbackValue = "FeedbackValue"
            case feedbackDate = "FeedbackDate"
        }
    }

    public struct ResendConfirmationCodeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]
        /// The code delivery details returned by the server in response to the request to resend the confirmation code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct RespondToAuthChallengeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: true, type: .enum), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .map)
        ]
        /// The challenge name. For more information, see .  ADMIN_NO_SRP_AUTH is not a valid value.
        public let challengeName: ChallengeNameType
        /// The app client ID.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?
        /// The Amazon Pinpoint analytics metadata for collecting metrics for RespondToAuthChallenge calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:    SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).    PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).    NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).   
        public let challengeResponses: [String: String]?

        public init(challengeName: ChallengeNameType, clientId: String, userContextData: UserContextDataType? = nil, session: String? = nil, analyticsMetadata: AnalyticsMetadataType? = nil, challengeResponses: [String: String]? = nil) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.userContextData = userContextData
            self.session = session
            self.analyticsMetadata = analyticsMetadata
            self.challengeResponses = challengeResponses
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case clientId = "ClientId"
            case userContextData = "UserContextData"
            case session = "Session"
            case analyticsMetadata = "AnalyticsMetadata"
            case challengeResponses = "ChallengeResponses"
        }
    }

    public struct UpdateUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "VerificationMessageTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolAddOns", required: false, type: .structure), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure)
        ]
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// The template for verification messages.
        public let verificationMessageTemplate: VerificationMessageTemplateType?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
        public let userPoolAddOns: UserPoolAddOnsType?
        /// A container with the policies you wish to update in a user pool.
        public let policies: UserPoolPolicyType?
        /// The AWS Lambda configuration information from the request to update the user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The user pool ID for the user pool you want to update.
        public let userPoolId: String
        /// Email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A container with information about the SMS verification message.
        public let smsVerificationMessage: String?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// Device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, verificationMessageTemplate: VerificationMessageTemplateType? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, userPoolAddOns: UserPoolAddOnsType? = nil, policies: UserPoolPolicyType? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, userPoolId: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.verificationMessageTemplate = verificationMessageTemplate
            self.adminCreateUserConfig = adminCreateUserConfig
            self.userPoolAddOns = userPoolAddOns
            self.policies = policies
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.userPoolId = userPoolId
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolTags = "UserPoolTags"
            case emailVerificationSubject = "EmailVerificationSubject"
            case verificationMessageTemplate = "VerificationMessageTemplate"
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case userPoolAddOns = "UserPoolAddOns"
            case policies = "Policies"
            case lambdaConfig = "LambdaConfig"
            case mfaConfiguration = "MfaConfiguration"
            case userPoolId = "UserPoolId"
            case emailConfiguration = "EmailConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case emailVerificationMessage = "EmailVerificationMessage"
            case smsConfiguration = "SmsConfiguration"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
        }
    }

    public struct CreateResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Scopes", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, https://my-weather-api.example.com.
        public let identifier: String
        /// A friendly name for the resource server.
        public let name: String
        /// A list of scopes. Each scope is map, where the keys are name and description.
        public let scopes: [ResourceServerScopeType]?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(identifier: String, name: String, scopes: [ResourceServerScopeType]? = nil, userPoolId: String) {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case name = "Name"
            case scopes = "Scopes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct DescribeUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string)
        ]
        /// The domain string.
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    public struct ListGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct VerifySoftwareTokenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: false, type: .string), 
            AWSShapeMember(label: "UserCode", required: true, type: .string), 
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "FriendlyDeviceName", required: false, type: .string)
        ]
        /// The access token.
        public let accessToken: String?
        /// The one time password computed using the secret code returned by 
        public let userCode: String
        /// The session which should be passed both ways in challenge-response calls to the service.
        public let session: String?
        /// The friendly device name.
        public let friendlyDeviceName: String?

        public init(accessToken: String? = nil, userCode: String, session: String? = nil, friendlyDeviceName: String? = nil) {
            self.accessToken = accessToken
            self.userCode = userCode
            self.session = session
            self.friendlyDeviceName = friendlyDeviceName
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
            case userCode = "UserCode"
            case session = "Session"
            case friendlyDeviceName = "FriendlyDeviceName"
        }
    }

    public struct SetUserSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFAOptions", required: true, type: .list), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The access token for the set user settings request.
        public let accessToken: String

        public init(mFAOptions: [MFAOptionType], accessToken: String) {
            self.mFAOptions = mFAOptions
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case mFAOptions = "MFAOptions"
            case accessToken = "AccessToken"
        }
    }

    public struct AdminLinkProviderForUserResponse: AWSShape {

    }

    public struct SetUserMFAPreferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The SMS text message multi-factor authentication (MFA) settings.
        public let sMSMfaSettings: SMSMfaSettingsType?
        /// The time-based one-time password software token MFA settings.
        public let softwareTokenMfaSettings: SoftwareTokenMfaSettingsType?
        /// The access token.
        public let accessToken: String

        public init(sMSMfaSettings: SMSMfaSettingsType? = nil, softwareTokenMfaSettings: SoftwareTokenMfaSettingsType? = nil, accessToken: String) {
            self.sMSMfaSettings = sMSMfaSettings
            self.softwareTokenMfaSettings = softwareTokenMfaSettings
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case sMSMfaSettings = "SMSMfaSettings"
            case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
            case accessToken = "AccessToken"
        }
    }

    public struct GetIdentityProviderByIdentifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identity provider ID.
        public let idpIdentifier: String
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifier: String, userPoolId: String) {
            self.idpIdentifier = idpIdentifier
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifier = "IdpIdentifier"
            case userPoolId = "UserPoolId"
        }
    }

    public enum IdentityProviderTypeType: String, CustomStringConvertible, Codable {
        case saml = "SAML"
        case facebook = "Facebook"
        case google = "Google"
        case loginwithamazon = "LoginWithAmazon"
        public var description: String { return self.rawValue }
    }

    public struct AdminGetUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to get information about the user.
        public let userPoolId: String
        /// The user name of the user you wish to retrieve.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct GetUserPoolMfaConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public enum OAuthFlowType: String, CustomStringConvertible, Codable {
        case code = "code"
        case implicit = "implicit"
        case clientCredentials = "client_credentials"
        public var description: String { return self.rawValue }
    }

    public struct ListIdentityProvidersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Providers", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of identity provider objects.
        public let providers: [ProviderDescription]
        /// A pagination token.
        public let nextToken: String?

        public init(providers: [ProviderDescription], nextToken: String? = nil) {
            self.providers = providers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case providers = "Providers"
            case nextToken = "NextToken"
        }
    }

    public struct AdminUpdateAuthEventFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "FeedbackValue", required: true, type: .enum), 
            AWSShapeMember(label: "EventId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool username.
        public let username: String
        /// The authentication event feedback value.
        public let feedbackValue: FeedbackValueType
        /// The authentication event ID.
        public let eventId: String
        /// The user pool ID.
        public let userPoolId: String

        public init(username: String, feedbackValue: FeedbackValueType, eventId: String, userPoolId: String) {
            self.username = username
            self.feedbackValue = feedbackValue
            self.eventId = eventId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case feedbackValue = "FeedbackValue"
            case eventId = "EventId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GlobalSignOutResponse: AWSShape {

    }

    public struct DescribeUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The app client ID of the app associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SignUpResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure), 
            AWSShapeMember(label: "UserConfirmed", required: true, type: .boolean), 
            AWSShapeMember(label: "UserSub", required: true, type: .string)
        ]
        /// The code delivery details returned by the server response to the user registration request.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?
        /// A response from the server indicating that a user registration has been confirmed.
        public let userConfirmed: Bool
        /// The UUID of the authenticated user. This is not the same as username.
        public let userSub: String

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil, userConfirmed: Bool, userSub: String) {
            self.codeDeliveryDetails = codeDeliveryDetails
            self.userConfirmed = userConfirmed
            self.userSub = userSub
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
            case userConfirmed = "UserConfirmed"
            case userSub = "UserSub"
        }
    }

    public struct CreateUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The domain string.
        public let domain: String
        /// The user pool ID.
        public let userPoolId: String

        public init(domain: String, userPoolId: String) {
            self.domain = domain
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public enum DeliveryMediumType: String, CustomStringConvertible, Codable {
        case sms = "SMS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct AdminResetUserPasswordResponse: AWSShape {

    }

    public struct AdminDisableProviderForUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: true, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user to be disabled.
        public let user: ProviderUserIdentifierType
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(user: ProviderUserIdentifierType, userPoolId: String) {
            self.user = user
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminSetUserMFAPreferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "SMSMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "SoftwareTokenMfaSettings", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool username.
        public let username: String
        /// The SMS text message MFA settings.
        public let sMSMfaSettings: SMSMfaSettingsType?
        /// The time-based one-time password software token MFA settings.
        public let softwareTokenMfaSettings: SoftwareTokenMfaSettingsType?
        /// The user pool ID.
        public let userPoolId: String

        public init(username: String, sMSMfaSettings: SMSMfaSettingsType? = nil, softwareTokenMfaSettings: SoftwareTokenMfaSettingsType? = nil, userPoolId: String) {
            self.username = username
            self.sMSMfaSettings = sMSMfaSettings
            self.softwareTokenMfaSettings = softwareTokenMfaSettings
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case sMSMfaSettings = "SMSMfaSettings"
            case softwareTokenMfaSettings = "SoftwareTokenMfaSettings"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminDisableUserResponse: AWSShape {

    }

    public struct AdminDeleteUserAttributesResponse: AWSShape {

    }

    public struct DeleteUserPoolDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The domain string.
        public let domain: String
        /// The user pool ID.
        public let userPoolId: String

        public init(domain: String, userPoolId: String) {
            self.domain = domain
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AddCustomAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomAttributes", required: true, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// An array of custom attributes, such as Mutable and Name.
        public let customAttributes: [SchemaAttributeType]
        /// The user pool ID for the user pool where you want to add custom attributes.
        public let userPoolId: String

        public init(customAttributes: [SchemaAttributeType], userPoolId: String) {
            self.customAttributes = customAttributes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case customAttributes = "CustomAttributes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateUserAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetailsList", required: false, type: .list)
        ]
        /// The code delivery details list from the server for the request to update user attributes.
        public let codeDeliveryDetailsList: [CodeDeliveryDetailsType]?

        public init(codeDeliveryDetailsList: [CodeDeliveryDetailsType]? = nil) {
            self.codeDeliveryDetailsList = codeDeliveryDetailsList
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetailsList = "CodeDeliveryDetailsList"
        }
    }

    public struct NotifyConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockEmail", required: false, type: .structure), 
            AWSShapeMember(label: "MfaEmail", required: false, type: .structure), 
            AWSShapeMember(label: "From", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: true, type: .string), 
            AWSShapeMember(label: "ReplyTo", required: false, type: .string), 
            AWSShapeMember(label: "NoActionEmail", required: false, type: .structure)
        ]
        /// Email template used when a detected risk event is blocked.
        public let blockEmail: NotifyEmailType?
        /// The MFA email template used when MFA is challenged as part of a detected risk.
        public let mfaEmail: NotifyEmailType?
        /// The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
        public let from: String?
        /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the From parameter.
        public let sourceArn: String
        /// The destination to which the receiver of an email should reply to.
        public let replyTo: String?
        /// The email template used when a detected risk event is allowed.
        public let noActionEmail: NotifyEmailType?

        public init(blockEmail: NotifyEmailType? = nil, mfaEmail: NotifyEmailType? = nil, from: String? = nil, sourceArn: String, replyTo: String? = nil, noActionEmail: NotifyEmailType? = nil) {
            self.blockEmail = blockEmail
            self.mfaEmail = mfaEmail
            self.from = from
            self.sourceArn = sourceArn
            self.replyTo = replyTo
            self.noActionEmail = noActionEmail
        }

        private enum CodingKeys: String, CodingKey {
            case blockEmail = "BlockEmail"
            case mfaEmail = "MfaEmail"
            case from = "From"
            case sourceArn = "SourceArn"
            case replyTo = "ReplyTo"
            case noActionEmail = "NoActionEmail"
        }
    }

    public struct UpdateIdentityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct GetUICustomizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The client ID for the client app.
        public let clientId: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(clientId: String? = nil, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminListGroupsForUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The groups that the user belongs to.
        public let groups: [GroupType]?

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groups = "Groups"
        }
    }

    public struct PasswordPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinimumLength", required: false, type: .integer), 
            AWSShapeMember(label: "RequireLowercase", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireSymbols", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireUppercase", required: false, type: .boolean), 
            AWSShapeMember(label: "RequireNumbers", required: false, type: .boolean)
        ]
        /// The minimum length of the password policy that you have set. Cannot be less than 6.
        public let minimumLength: Int32?
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public let requireLowercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public let requireSymbols: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public let requireUppercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public let requireNumbers: Bool?

        public init(minimumLength: Int32? = nil, requireLowercase: Bool? = nil, requireSymbols: Bool? = nil, requireUppercase: Bool? = nil, requireNumbers: Bool? = nil) {
            self.minimumLength = minimumLength
            self.requireLowercase = requireLowercase
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.requireNumbers = requireNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case minimumLength = "MinimumLength"
            case requireLowercase = "RequireLowercase"
            case requireSymbols = "RequireSymbols"
            case requireUppercase = "RequireUppercase"
            case requireNumbers = "RequireNumbers"
        }
    }

    public enum EventResponseType: String, CustomStringConvertible, Codable {
        case success = "Success"
        case failure = "Failure"
        public var description: String { return self.rawValue }
    }

    public struct AdminGetDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .structure)
        ]
        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct ListIdentityProvidersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The user pool ID.
        public let userPoolId: String
        /// A pagination token.
        public let nextToken: String?
        /// The maximum number of identity providers to return.
        public let maxResults: Int32?

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AdminForgetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(deviceKey: String, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct InitiateAuthRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientMetadata", required: false, type: .map), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "AuthParameters", required: false, type: .map), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "AuthFlow", required: true, type: .enum)
        ]
        /// This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
        public let clientMetadata: [String: String]?
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow:   For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY    For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: USERNAME (required), SECRET_HASH (required if the app client is configured with a client secret), REFRESH_TOKEN (required), DEVICE_KEY    For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY   
        public let authParameters: [String: String]?
        /// The app client ID.
        public let clientId: String
        /// The Amazon Pinpoint analytics metadata for collecting metrics for InitiateAuth calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The authentication flow for this call to execute. The API action will depend on this value. For example:     REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.    USER_SRP_AUTH will take in USERNAME and SRP_A and return the SRP variables to be used for next challenge execution.   Valid values include:    USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.    REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.    CUSTOM_AUTH: Custom authentication flow.    ADMIN_NO_SRP_AUTH is not a valid value.
        public let authFlow: AuthFlowType

        public init(clientMetadata: [String: String]? = nil, userContextData: UserContextDataType? = nil, authParameters: [String: String]? = nil, clientId: String, analyticsMetadata: AnalyticsMetadataType? = nil, authFlow: AuthFlowType) {
            self.clientMetadata = clientMetadata
            self.userContextData = userContextData
            self.authParameters = authParameters
            self.clientId = clientId
            self.analyticsMetadata = analyticsMetadata
            self.authFlow = authFlow
        }

        private enum CodingKeys: String, CodingKey {
            case clientMetadata = "ClientMetadata"
            case userContextData = "UserContextData"
            case authParameters = "AuthParameters"
            case clientId = "ClientId"
            case analyticsMetadata = "AnalyticsMetadata"
            case authFlow = "AuthFlow"
        }
    }

    public struct AdminAddUserToGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The username for the user.
        public let username: String
        /// The group name.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct EmailConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplyToEmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string)
        ]
        /// The destination to which the receiver of the email should reply to.
        public let replyToEmailAddress: String?
        /// The Amazon Resource Name (ARN) of the email source.
        public let sourceArn: String?

        public init(replyToEmailAddress: String? = nil, sourceArn: String? = nil) {
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case replyToEmailAddress = "ReplyToEmailAddress"
            case sourceArn = "SourceArn"
        }
    }

    public struct AdminCreateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The newly created user.
        public let user: UserType?

        public init(user: UserType? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct AdminUserGlobalSignOutRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUsersInGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The users returned in the request to list users.
        public let users: [UserType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(users: [UserType]? = nil, nextToken: String? = nil) {
            self.users = users
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct CreateUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "VerificationMessageTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "UsernameAttributes", required: false, type: .list), 
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolAddOns", required: false, type: .structure), 
            AWSShapeMember(label: "Schema", required: false, type: .list), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "AliasAttributes", required: false, type: .list), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "PoolName", required: true, type: .string), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure)
        ]
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// A string representing the email verification subject.
        public let emailVerificationSubject: String?
        /// The template for the verification message that the user sees when the app requests permission to access the user's information.
        public let verificationMessageTemplate: VerificationMessageTemplateType?
        /// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        public let usernameAttributes: [UsernameAttributeType]?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
        public let userPoolAddOns: UserPoolAddOnsType?
        /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
        public let schema: [SchemaAttributeType]?
        /// The policies associated with the new user pool.
        public let policies: UserPoolPolicyType?
        /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
        public let aliasAttributes: [AliasAttributeType]?
        /// The Lambda trigger configuration information for the new user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Specifies MFA configuration details.
        public let mfaConfiguration: UserPoolMfaType?
        /// A string used to name the user pool.
        public let poolName: String
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A string representing the SMS verification message.
        public let smsVerificationMessage: String?
        /// A string representing the email verification message.
        public let emailVerificationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// A string representing the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The attributes to be auto-verified. Possible values: email, phone_number.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, verificationMessageTemplate: VerificationMessageTemplateType? = nil, usernameAttributes: [UsernameAttributeType]? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, userPoolAddOns: UserPoolAddOnsType? = nil, schema: [SchemaAttributeType]? = nil, policies: UserPoolPolicyType? = nil, aliasAttributes: [AliasAttributeType]? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, poolName: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsAuthenticationMessage: String? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.verificationMessageTemplate = verificationMessageTemplate
            self.usernameAttributes = usernameAttributes
            self.adminCreateUserConfig = adminCreateUserConfig
            self.userPoolAddOns = userPoolAddOns
            self.schema = schema
            self.policies = policies
            self.aliasAttributes = aliasAttributes
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.poolName = poolName
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolTags = "UserPoolTags"
            case emailVerificationSubject = "EmailVerificationSubject"
            case verificationMessageTemplate = "VerificationMessageTemplate"
            case usernameAttributes = "UsernameAttributes"
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case userPoolAddOns = "UserPoolAddOns"
            case schema = "Schema"
            case policies = "Policies"
            case aliasAttributes = "AliasAttributes"
            case lambdaConfig = "LambdaConfig"
            case mfaConfiguration = "MfaConfiguration"
            case poolName = "PoolName"
            case emailConfiguration = "EmailConfiguration"
            case smsVerificationMessage = "SmsVerificationMessage"
            case emailVerificationMessage = "EmailVerificationMessage"
            case smsConfiguration = "SmsConfiguration"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
            case deviceConfiguration = "DeviceConfiguration"
        }
    }

    public struct ContextDataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodedData", required: false, type: .string), 
            AWSShapeMember(label: "HttpHeaders", required: true, type: .list), 
            AWSShapeMember(label: "ServerName", required: true, type: .string), 
            AWSShapeMember(label: "ServerPath", required: true, type: .string), 
            AWSShapeMember(label: "IpAddress", required: true, type: .string)
        ]
        /// Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.
        public let encodedData: String?
        /// HttpHeaders received on your server in same order.
        public let httpHeaders: [HttpHeader]
        /// Your server endpoint where this API is invoked.
        public let serverName: String
        /// Your server path where this API is invoked. 
        public let serverPath: String
        /// Source IP address of your user.
        public let ipAddress: String

        public init(encodedData: String? = nil, httpHeaders: [HttpHeader], serverName: String, serverPath: String, ipAddress: String) {
            self.encodedData = encodedData
            self.httpHeaders = httpHeaders
            self.serverName = serverName
            self.serverPath = serverPath
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case encodedData = "EncodedData"
            case httpHeaders = "HttpHeaders"
            case serverName = "ServerName"
            case serverPath = "ServerPath"
            case ipAddress = "IpAddress"
        }
    }

    public struct ChallengeResponseType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeResponse", required: false, type: .enum)
        ]
        /// The challenge name
        public let challengeName: ChallengeName?
        /// The challenge response.
        public let challengeResponse: ChallengeResponse?

        public init(challengeName: ChallengeName? = nil, challengeResponse: ChallengeResponse? = nil) {
            self.challengeName = challengeName
            self.challengeResponse = challengeResponse
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeResponse = "ChallengeResponse"
        }
    }

    public struct NumberAttributeConstraintsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinValue", required: false, type: .string), 
            AWSShapeMember(label: "MaxValue", required: false, type: .string)
        ]
        /// The minimum value of an attribute that is of the number data type.
        public let minValue: String?
        /// The maximum value of an attribute that is of the number data type.
        public let maxValue: String?

        public init(minValue: String? = nil, maxValue: String? = nil) {
            self.minValue = minValue
            self.maxValue = maxValue
        }

        private enum CodingKeys: String, CodingKey {
            case minValue = "MinValue"
            case maxValue = "MaxValue"
        }
    }

    public struct SignUpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidationData", required: false, type: .list), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list)
        ]
        /// The validation data in the request to register a user.
        public let validationData: [AttributeType]?
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user you wish to register.
        public let username: String
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The password of the user you wish to register.
        public let password: String
        /// The Amazon Pinpoint analytics metadata for collecting metrics for SignUp calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]?

        public init(validationData: [AttributeType]? = nil, secretHash: String? = nil, username: String, clientId: String, userContextData: UserContextDataType? = nil, password: String, analyticsMetadata: AnalyticsMetadataType? = nil, userAttributes: [AttributeType]? = nil) {
            self.validationData = validationData
            self.secretHash = secretHash
            self.username = username
            self.clientId = clientId
            self.userContextData = userContextData
            self.password = password
            self.analyticsMetadata = analyticsMetadata
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case validationData = "ValidationData"
            case secretHash = "SecretHash"
            case username = "Username"
            case clientId = "ClientId"
            case userContextData = "UserContextData"
            case password = "Password"
            case analyticsMetadata = "AnalyticsMetadata"
            case userAttributes = "UserAttributes"
        }
    }

    public struct DescribeUserPoolClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolClient", required: false, type: .structure)
        ]
        /// The user pool client from a server response to describe the user pool client.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolClient = "UserPoolClient"
        }
    }

    public struct AdminListGroupsForUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The username for the user.
        public let username: String
        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.username = username
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case limit = "Limit"
            case nextToken = "NextToken"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SetUserSettingsResponse: AWSShape {

    }

    public struct UpdateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Precedence", required: false, type: .integer), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A string containing the new description of the group.
        public let description: String?
        /// The new precedence value for the group. For more information about this parameter, see .
        public let precedence: Int32?
        /// The name of the group.
        public let groupName: String
        /// The new role ARN for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case precedence = "Precedence"
            case groupName = "GroupName"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUserPoolsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: true, type: .integer)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return when listing the user pools.
        public let maxResults: Int32

        public init(nextToken: String? = nil, maxResults: Int32) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListResourceServersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The user pool ID for the user pool.
        public let userPoolId: String
        /// A pagination token.
        public let nextToken: String?
        /// The maximum number of resource servers to return.
        public let maxResults: Int32?

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identifier for the resource server.
        public let identifier: String
        /// The user pool ID for the user pool that hosts the resource server.
        public let userPoolId: String

        public init(identifier: String, userPoolId: String) {
            self.identifier = identifier
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetUICustomizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UICustomization", required: true, type: .structure)
        ]
        /// The UI customization information.
        public let uICustomization: UICustomizationType

        public init(uICustomization: UICustomizationType) {
            self.uICustomization = uICustomization
        }

        private enum CodingKeys: String, CodingKey {
            case uICustomization = "UICustomization"
        }
    }

    public struct EventRiskType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskDecision", required: false, type: .enum), 
            AWSShapeMember(label: "RiskLevel", required: false, type: .enum)
        ]
        /// The risk decision.
        public let riskDecision: RiskDecisionType?
        /// The risk level.
        public let riskLevel: RiskLevelType?

        public init(riskDecision: RiskDecisionType? = nil, riskLevel: RiskLevelType? = nil) {
            self.riskDecision = riskDecision
            self.riskLevel = riskLevel
        }

        private enum CodingKeys: String, CodingKey {
            case riskDecision = "RiskDecision"
            case riskLevel = "RiskLevel"
        }
    }

    public enum UsernameAttributeType: String, CustomStringConvertible, Codable {
        case phoneNumber = "phone_number"
        case email = "email"
        public var description: String { return self.rawValue }
    }

    public struct AdminDeleteUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "UserAttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to delete user attributes.
        public let userPoolId: String
        /// An array of strings representing the user attribute names you wish to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributeNames: [String]
        /// The user name of the user from which you would like to delete attributes.
        public let username: String

        public init(userPoolId: String, userAttributeNames: [String], username: String) {
            self.userPoolId = userPoolId
            self.userAttributeNames = userAttributeNames
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case userAttributeNames = "UserAttributeNames"
            case username = "Username"
        }
    }

    public struct DescribeResourceServerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceServer", required: true, type: .structure)
        ]
        /// The resource server.
        public let resourceServer: ResourceServerType

        public init(resourceServer: ResourceServerType) {
            self.resourceServer = resourceServer
        }

        private enum CodingKeys: String, CodingKey {
            case resourceServer = "ResourceServer"
        }
    }

    public struct GetIdentityProviderByIdentifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public enum DomainStatusType: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        case active = "ACTIVE"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct IdentityProviderType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderType", required: false, type: .enum), 
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderDetails", required: false, type: .map), 
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType?
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The date the identity provider was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The date the identity provider was created.
        public let creationDate: TimeStamp?
        /// The identity provider name.
        public let providerName: String?
        /// The identity provider details, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]?
        /// A mapping of identity provider attributes to standard and custom user pool attributes.
        public let attributeMapping: [String: String]?
        /// The user pool ID.
        public let userPoolId: String?

        public init(providerType: IdentityProviderTypeType? = nil, idpIdentifiers: [String]? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, providerName: String? = nil, providerDetails: [String: String]? = nil, attributeMapping: [String: String]? = nil, userPoolId: String? = nil) {
            self.providerType = providerType
            self.idpIdentifiers = idpIdentifiers
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.providerName = providerName
            self.providerDetails = providerDetails
            self.attributeMapping = attributeMapping
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case providerType = "ProviderType"
            case idpIdentifiers = "IdpIdentifiers"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case providerName = "ProviderName"
            case providerDetails = "ProviderDetails"
            case attributeMapping = "AttributeMapping"
            case userPoolId = "UserPoolId"
        }
    }

    public struct HttpHeader: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "headerName", required: false, type: .string), 
            AWSShapeMember(label: "headerValue", required: false, type: .string)
        ]
        /// The header name
        public let headerName: String?
        /// The header value.
        public let headerValue: String?

        public init(headerName: String? = nil, headerValue: String? = nil) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        private enum CodingKeys: String, CodingKey {
            case headerName = "headerName"
            case headerValue = "headerValue"
        }
    }

    public struct AdminListUserAuthEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The user pool username.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String
        /// A pagination token.
        public let nextToken: String?
        /// The maximum number of authentication events to return.
        public let maxResults: Int32?

        public init(username: String, userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.username = username
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userPoolId = "UserPoolId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AccountTakeoverRiskConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Actions", required: true, type: .structure)
        ]
        /// The notify configuration used to construct email notifications.
        public let notifyConfiguration: NotifyConfigurationType?
        /// Account takeover risk configuration actions
        public let actions: AccountTakeoverActionsType

        public init(notifyConfiguration: NotifyConfigurationType? = nil, actions: AccountTakeoverActionsType) {
            self.notifyConfiguration = notifyConfiguration
            self.actions = actions
        }

        private enum CodingKeys: String, CodingKey {
            case notifyConfiguration = "NotifyConfiguration"
            case actions = "Actions"
        }
    }

    public struct SMSMfaSettingsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreferredMfa", required: false, type: .boolean), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The preferred MFA method.
        public let preferredMfa: Bool?
        /// Specifies whether SMS text message MFA is enabled.
        public let enabled: Bool?

        public init(preferredMfa: Bool? = nil, enabled: Bool? = nil) {
            self.preferredMfa = preferredMfa
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case preferredMfa = "PreferredMfa"
            case enabled = "Enabled"
        }
    }

    public struct SetRiskConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskExceptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CompromisedCredentialsRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AccountTakeoverRiskConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The configuration to override the risk decision.
        public let riskExceptionConfiguration: RiskExceptionConfigurationType?
        /// The app client ID. If ClientId is null, then the risk configuration is mapped to userPoolId. When the client ID is null, the same risk configuration is applied to all the clients in the userPool. Otherwise, ClientId is mapped to the client. When the client ID is not null, the user pool configuration is overridden and the risk configuration for the client is used instead.
        public let clientId: String?
        /// The compromised credentials risk configuration.
        public let compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType?
        /// The account takeover risk configuration.
        public let accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType?
        /// The user pool ID. 
        public let userPoolId: String

        public init(riskExceptionConfiguration: RiskExceptionConfigurationType? = nil, clientId: String? = nil, compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType? = nil, accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType? = nil, userPoolId: String) {
            self.riskExceptionConfiguration = riskExceptionConfiguration
            self.clientId = clientId
            self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
            self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case riskExceptionConfiguration = "RiskExceptionConfiguration"
            case clientId = "ClientId"
            case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
            case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
            case userPoolId = "UserPoolId"
        }
    }

    public enum CompromisedCredentialsEventActionType: String, CustomStringConvertible, Codable {
        case block = "BLOCK"
        case noAction = "NO_ACTION"
        public var description: String { return self.rawValue }
    }

    public struct DescribeUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public enum UserImportJobStatusType: String, CustomStringConvertible, Codable {
        case created = "Created"
        case pending = "Pending"
        case inprogress = "InProgress"
        case stopping = "Stopping"
        case expired = "Expired"
        case stopped = "Stopped"
        case failed = "Failed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct GlobalSignOutRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The access token.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The access token from a request to delete a user.
        public let accessToken: String

        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "AccessToken"
        }
    }

    public struct CreateUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "ClientName", required: true, type: .string), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "GenerateSecret", required: false, type: .boolean)
        ]
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?
        /// Set to True if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// The write attributes.
        public let writeAttributes: [String]?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// The read attributes.
        public let readAttributes: [String]?
        /// The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.
        public let analyticsConfiguration: AnalyticsConfigurationType?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// A list of allowed callback URLs for the identity providers.
        public let callbackURLs: [String]?
        /// The user pool ID for the user pool where you want to create a user pool client.
        public let userPoolId: String
        /// The client name for the user pool client you would like to create.
        public let clientName: String
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// The default redirect URI. Must be in the CallbackURLs list.
        public let defaultRedirectURI: String?
        /// Boolean to specify whether you want to generate a secret for the user pool client being created.
        public let generateSecret: Bool?

        public init(allowedOAuthScopes: [String]? = nil, allowedOAuthFlowsUserPoolClient: Bool? = nil, writeAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, readAttributes: [String]? = nil, analyticsConfiguration: AnalyticsConfigurationType? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, callbackURLs: [String]? = nil, userPoolId: String, clientName: String, supportedIdentityProviders: [String]? = nil, logoutURLs: [String]? = nil, allowedOAuthFlows: [OAuthFlowType]? = nil, defaultRedirectURI: String? = nil, generateSecret: Bool? = nil) {
            self.allowedOAuthScopes = allowedOAuthScopes
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.writeAttributes = writeAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.readAttributes = readAttributes
            self.analyticsConfiguration = analyticsConfiguration
            self.explicitAuthFlows = explicitAuthFlows
            self.callbackURLs = callbackURLs
            self.userPoolId = userPoolId
            self.clientName = clientName
            self.supportedIdentityProviders = supportedIdentityProviders
            self.logoutURLs = logoutURLs
            self.allowedOAuthFlows = allowedOAuthFlows
            self.defaultRedirectURI = defaultRedirectURI
            self.generateSecret = generateSecret
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthScopes = "AllowedOAuthScopes"
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case writeAttributes = "WriteAttributes"
            case refreshTokenValidity = "RefreshTokenValidity"
            case readAttributes = "ReadAttributes"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case callbackURLs = "CallbackURLs"
            case userPoolId = "UserPoolId"
            case clientName = "ClientName"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case logoutURLs = "LogoutURLs"
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case defaultRedirectURI = "DefaultRedirectURI"
            case generateSecret = "GenerateSecret"
        }
    }

    public struct AttributeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.
        public let name: String

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct GetUserPoolMfaConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SoftwareTokenMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum)
        ]
        /// The software token multi-factor (MFA) configuration.
        public let softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType?
        /// The SMS text message multi-factor (MFA) configuration.
        public let smsMfaConfiguration: SmsMfaConfigType?
        /// The multi-factor (MFA) configuration.
        public let mfaConfiguration: UserPoolMfaType?

        public init(softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil, smsMfaConfiguration: SmsMfaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil) {
            self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
            self.smsMfaConfiguration = smsMfaConfiguration
            self.mfaConfiguration = mfaConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
            case smsMfaConfiguration = "SmsMfaConfiguration"
            case mfaConfiguration = "MfaConfiguration"
        }
    }

    public struct UserContextDataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodedData", required: false, type: .string)
        ]
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let encodedData: String?

        public init(encodedData: String? = nil) {
            self.encodedData = encodedData
        }

        private enum CodingKeys: String, CodingKey {
            case encodedData = "EncodedData"
        }
    }

    public struct ProviderUserIdentifierType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderAttributeValue", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderAttributeName", required: false, type: .string)
        ]
        /// The value of the provider attribute to link to, for example, xxxxx_account.
        public let providerAttributeValue: String?
        /// The name of the provider, for example, Facebook, Google, or Login with Amazon.
        public let providerName: String?
        /// The name of the provider attribute to link to, for example, NameID.
        public let providerAttributeName: String?

        public init(providerAttributeValue: String? = nil, providerName: String? = nil, providerAttributeName: String? = nil) {
            self.providerAttributeValue = providerAttributeValue
            self.providerName = providerName
            self.providerAttributeName = providerAttributeName
        }

        private enum CodingKeys: String, CodingKey {
            case providerAttributeValue = "ProviderAttributeValue"
            case providerName = "ProviderName"
            case providerAttributeName = "ProviderAttributeName"
        }
    }

    public struct DomainDescriptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "AWSAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "CloudFrontDistribution", required: false, type: .string), 
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The domain status.
        public let status: DomainStatusType?
        /// The AWS account ID for the user pool owner.
        public let aWSAccountId: String?
        /// The app version.
        public let version: String?
        /// The ARN of the CloudFront distribution.
        public let cloudFrontDistribution: String?
        /// The S3 bucket where the static files for this domain are stored.
        public let s3Bucket: String?
        /// The domain string.
        public let domain: String?
        /// The user pool ID.
        public let userPoolId: String?

        public init(status: DomainStatusType? = nil, aWSAccountId: String? = nil, version: String? = nil, cloudFrontDistribution: String? = nil, s3Bucket: String? = nil, domain: String? = nil, userPoolId: String? = nil) {
            self.status = status
            self.aWSAccountId = aWSAccountId
            self.version = version
            self.cloudFrontDistribution = cloudFrontDistribution
            self.s3Bucket = s3Bucket
            self.domain = domain
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case aWSAccountId = "AWSAccountId"
            case version = "Version"
            case cloudFrontDistribution = "CloudFrontDistribution"
            case s3Bucket = "S3Bucket"
            case domain = "Domain"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CreateUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobName", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job name for the user import job.
        public let jobName: String
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job.
        public let cloudWatchLogsRoleArn: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobName: String, cloudWatchLogsRoleArn: String, userPoolId: String) {
            self.jobName = jobName
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobName = "JobName"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SchemaAttributeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberAttributeConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "DeveloperOnlyAttribute", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AttributeDataType", required: false, type: .enum), 
            AWSShapeMember(label: "StringAttributeConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "Required", required: false, type: .boolean), 
            AWSShapeMember(label: "Mutable", required: false, type: .boolean)
        ]
        /// Specifies the constraints for an attribute of the number type.
        public let numberAttributeConstraints: NumberAttributeConstraintsType?
        /// Specifies whether the attribute type is developer only.
        public let developerOnlyAttribute: Bool?
        /// A schema attribute of the name type.
        public let name: String?
        /// The attribute data type.
        public let attributeDataType: AttributeDataType?
        /// Specifies the constraints for an attribute of the string type.
        public let stringAttributeConstraints: StringAttributeConstraintsType?
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
        public let required: Bool?
        /// Specifies whether the attribute can be changed once it has been created.
        public let mutable: Bool?

        public init(numberAttributeConstraints: NumberAttributeConstraintsType? = nil, developerOnlyAttribute: Bool? = nil, name: String? = nil, attributeDataType: AttributeDataType? = nil, stringAttributeConstraints: StringAttributeConstraintsType? = nil, required: Bool? = nil, mutable: Bool? = nil) {
            self.numberAttributeConstraints = numberAttributeConstraints
            self.developerOnlyAttribute = developerOnlyAttribute
            self.name = name
            self.attributeDataType = attributeDataType
            self.stringAttributeConstraints = stringAttributeConstraints
            self.required = required
            self.mutable = mutable
        }

        private enum CodingKeys: String, CodingKey {
            case numberAttributeConstraints = "NumberAttributeConstraints"
            case developerOnlyAttribute = "DeveloperOnlyAttribute"
            case name = "Name"
            case attributeDataType = "AttributeDataType"
            case stringAttributeConstraints = "StringAttributeConstraints"
            case required = "Required"
            case mutable = "Mutable"
        }
    }

    public struct ConfirmForgotPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfirmationCode", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure)
        ]
        /// The confirmation code sent by a user's request to retrieve a forgotten password. For more information, see 
        public let confirmationCode: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user for whom you want to enter a code to retrieve a forgotten password.
        public let username: String
        /// The app client ID of the app associated with the user pool.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The password sent by a user's request to retrieve a forgotten password.
        public let password: String
        /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmForgotPassword calls.
        public let analyticsMetadata: AnalyticsMetadataType?

        public init(confirmationCode: String, secretHash: String? = nil, username: String, clientId: String, userContextData: UserContextDataType? = nil, password: String, analyticsMetadata: AnalyticsMetadataType? = nil) {
            self.confirmationCode = confirmationCode
            self.secretHash = secretHash
            self.username = username
            self.clientId = clientId
            self.userContextData = userContextData
            self.password = password
            self.analyticsMetadata = analyticsMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case confirmationCode = "ConfirmationCode"
            case secretHash = "SecretHash"
            case username = "Username"
            case clientId = "ClientId"
            case userContextData = "UserContextData"
            case password = "Password"
            case analyticsMetadata = "AnalyticsMetadata"
        }
    }

    public struct ConfirmSignUpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfirmationCode", required: true, type: .string), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "ForceAliasCreation", required: false, type: .boolean)
        ]
        /// The confirmation code sent by a user's request to confirm registration.
        public let confirmationCode: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user whose registration you wish to confirm.
        public let username: String
        /// The ID of the app client associated with the user pool.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmSignUp calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
        public let forceAliasCreation: Bool?

        public init(confirmationCode: String, secretHash: String? = nil, username: String, clientId: String, userContextData: UserContextDataType? = nil, analyticsMetadata: AnalyticsMetadataType? = nil, forceAliasCreation: Bool? = nil) {
            self.confirmationCode = confirmationCode
            self.secretHash = secretHash
            self.username = username
            self.clientId = clientId
            self.userContextData = userContextData
            self.analyticsMetadata = analyticsMetadata
            self.forceAliasCreation = forceAliasCreation
        }

        private enum CodingKeys: String, CodingKey {
            case confirmationCode = "ConfirmationCode"
            case secretHash = "SecretHash"
            case username = "Username"
            case clientId = "ClientId"
            case userContextData = "UserContextData"
            case analyticsMetadata = "AnalyticsMetadata"
            case forceAliasCreation = "ForceAliasCreation"
        }
    }

    public struct DescribeIdentityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The identity provider that was deleted.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public enum RiskLevelType: String, CustomStringConvertible, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        public var description: String { return self.rawValue }
    }

    public struct AdminEnableUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to enable the user.
        public let userPoolId: String
        /// The user name of the user you wish to enable.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct ForgotPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The Amazon Pinpoint analytics metadata for collecting metrics for ForgotPassword calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The user name of the user for whom you want to enter a code to reset a forgotten password.
        public let username: String

        public init(clientId: String, userContextData: UserContextDataType? = nil, secretHash: String? = nil, analyticsMetadata: AnalyticsMetadataType? = nil, username: String) {
            self.clientId = clientId
            self.userContextData = userContextData
            self.secretHash = secretHash
            self.analyticsMetadata = analyticsMetadata
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userContextData = "UserContextData"
            case secretHash = "SecretHash"
            case analyticsMetadata = "AnalyticsMetadata"
            case username = "Username"
        }
    }

    public struct CompromisedCredentialsActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventAction", required: true, type: .enum)
        ]
        /// The event action.
        public let eventAction: CompromisedCredentialsEventActionType

        public init(eventAction: CompromisedCredentialsEventActionType) {
            self.eventAction = eventAction
        }

        private enum CodingKeys: String, CodingKey {
            case eventAction = "EventAction"
        }
    }

    public struct AdminListDevicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user name.
        public let username: String
        /// The pagination token.
        public let paginationToken: String?
        /// The limit of the devices request.
        public let limit: Int32?
        /// The user pool ID.
        public let userPoolId: String

        public init(username: String, paginationToken: String? = nil, limit: Int32? = nil, userPoolId: String) {
            self.username = username
            self.paginationToken = paginationToken
            self.limit = limit
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case paginationToken = "PaginationToken"
            case limit = "Limit"
            case userPoolId = "UserPoolId"
        }
    }

    public struct EventContextDataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "Country", required: false, type: .string), 
            AWSShapeMember(label: "City", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string)
        ]
        /// The user's IP address.
        public let ipAddress: String?
        /// The user's country.
        public let country: String?
        /// The user's city.
        public let city: String?
        /// The user's time zone.
        public let timezone: String?
        /// The user's device name.
        public let deviceName: String?

        public init(ipAddress: String? = nil, country: String? = nil, city: String? = nil, timezone: String? = nil, deviceName: String? = nil) {
            self.ipAddress = ipAddress
            self.country = country
            self.city = city
            self.timezone = timezone
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddress = "IpAddress"
            case country = "Country"
            case city = "City"
            case timezone = "Timezone"
            case deviceName = "DeviceName"
        }
    }

    public struct AdminDeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to delete the user.
        public let userPoolId: String
        /// The user name of the user you wish to delete.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct GetGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case userPoolId = "UserPoolId"
        }
    }

    public struct SoftwareTokenMfaSettingsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreferredMfa", required: false, type: .boolean), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The preferred MFA method.
        public let preferredMfa: Bool?
        /// Specifies whether software token MFA is enabled.
        public let enabled: Bool?

        public init(preferredMfa: Bool? = nil, enabled: Bool? = nil) {
            self.preferredMfa = preferredMfa
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case preferredMfa = "PreferredMfa"
            case enabled = "Enabled"
        }
    }

    public struct UICustomizationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSS", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CSSVersion", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// The CSS values in the UI customization.
        public let css: String?
        /// The client ID for the client app.
        public let clientId: String?
        /// The CSS version number.
        public let cSSVersion: String?
        /// The logo image for the UI customization.
        public let imageUrl: String?
        /// The creation date for the UI customization.
        public let creationDate: TimeStamp?
        /// The last-modified date for the UI customization.
        public let lastModifiedDate: TimeStamp?
        /// The user pool ID for the user pool.
        public let userPoolId: String?

        public init(css: String? = nil, clientId: String? = nil, cSSVersion: String? = nil, imageUrl: String? = nil, creationDate: TimeStamp? = nil, lastModifiedDate: TimeStamp? = nil, userPoolId: String? = nil) {
            self.css = css
            self.clientId = clientId
            self.cSSVersion = cSSVersion
            self.imageUrl = imageUrl
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case css = "CSS"
            case clientId = "ClientId"
            case cSSVersion = "CSSVersion"
            case imageUrl = "ImageUrl"
            case creationDate = "CreationDate"
            case lastModifiedDate = "LastModifiedDate"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminResetUserPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to reset the user's password.
        public let userPoolId: String
        /// The user name of the user whose password you wish to reset.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct SetUICustomizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "CSS", required: false, type: .string), 
            AWSShapeMember(label: "ImageFile", required: false, type: .blob), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The client ID for the client app.
        public let clientId: String?
        /// The CSS values in the UI customization.
        public let css: String?
        /// The uploaded logo image for the UI customization.
        public let imageFile: Data?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(clientId: String? = nil, css: String? = nil, imageFile: Data? = nil, userPoolId: String) {
            self.clientId = clientId
            self.css = css
            self.imageFile = imageFile
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case css = "CSS"
            case imageFile = "ImageFile"
            case userPoolId = "UserPoolId"
        }
    }

    public enum FeedbackValueType: String, CustomStringConvertible, Codable {
        case valid = "Valid"
        case invalid = "Invalid"
        public var description: String { return self.rawValue }
    }

    public struct UserPoolDescriptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The date the user pool description was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The date the user pool description was created.
        public let creationDate: TimeStamp?
        /// The user pool status in a user pool description.
        public let status: StatusType?
        /// The AWS Lambda configuration information in a user pool description.
        public let lambdaConfig: LambdaConfigType?
        /// The name in a user pool description.
        public let name: String?
        /// The ID in a user pool description.
        public let id: String?

        public init(lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, status: StatusType? = nil, lambdaConfig: LambdaConfigType? = nil, name: String? = nil, id: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.status = status
            self.lambdaConfig = lambdaConfig
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case status = "Status"
            case lambdaConfig = "LambdaConfig"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct DeviceConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceOnlyRememberedOnUserPrompt", required: false, type: .boolean), 
            AWSShapeMember(label: "ChallengeRequiredOnNewDevice", required: false, type: .boolean)
        ]
        /// If true, a device is only remembered on user prompt.
        public let deviceOnlyRememberedOnUserPrompt: Bool?
        /// Indicates whether a challenge is required on a new device. Only applicable to a new device.
        public let challengeRequiredOnNewDevice: Bool?

        public init(deviceOnlyRememberedOnUserPrompt: Bool? = nil, challengeRequiredOnNewDevice: Bool? = nil) {
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
        }

        private enum CodingKeys: String, CodingKey {
            case deviceOnlyRememberedOnUserPrompt = "DeviceOnlyRememberedOnUserPrompt"
            case challengeRequiredOnNewDevice = "ChallengeRequiredOnNewDevice"
        }
    }

    public enum RiskDecisionType: String, CustomStringConvertible, Codable {
        case norisk = "NoRisk"
        case accounttakeover = "AccountTakeover"
        case block = "Block"
        public var description: String { return self.rawValue }
    }

    public struct CreateIdentityProviderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityProvider", required: true, type: .structure)
        ]
        /// The newly created identity provider object.
        public let identityProvider: IdentityProviderType

        public init(identityProvider: IdentityProviderType) {
            self.identityProvider = identityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case identityProvider = "IdentityProvider"
        }
    }

    public struct MessageTemplateType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailSubject", required: false, type: .string)
        ]
        /// The message template for SMS messages.
        public let sMSMessage: String?
        /// The message template for email messages.
        public let emailMessage: String?
        /// The subject line for email messages.
        public let emailSubject: String?

        public init(sMSMessage: String? = nil, emailMessage: String? = nil, emailSubject: String? = nil) {
            self.sMSMessage = sMSMessage
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
        }

        private enum CodingKeys: String, CodingKey {
            case sMSMessage = "SMSMessage"
            case emailMessage = "EmailMessage"
            case emailSubject = "EmailSubject"
        }
    }

    public struct StartUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public enum VerifySoftwareTokenResponseType: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct DescribeUserPoolRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct MFAOptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryMedium", required: false, type: .enum)
        ]
        /// The attribute name of the MFA option type.
        public let attributeName: String?
        /// The delivery medium (email message or SMS message) to send the MFA code.
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case deliveryMedium = "DeliveryMedium"
        }
    }

    public struct GetUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserMFASettingList", required: false, type: .list), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMfaSetting", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: true, type: .list)
        ]
        public let userMFASettingList: [String]?
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The user name of the user you wish to retrieve from the get user request.
        public let username: String
        public let preferredMfaSetting: String?
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]

        public init(userMFASettingList: [String]? = nil, mFAOptions: [MFAOptionType]? = nil, username: String, preferredMfaSetting: String? = nil, userAttributes: [AttributeType]) {
            self.userMFASettingList = userMFASettingList
            self.mFAOptions = mFAOptions
            self.username = username
            self.preferredMfaSetting = preferredMfaSetting
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case userMFASettingList = "UserMFASettingList"
            case mFAOptions = "MFAOptions"
            case username = "Username"
            case preferredMfaSetting = "PreferredMfaSetting"
            case userAttributes = "UserAttributes"
        }
    }

    public struct AdminRespondToAuthChallengeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChallengeName", required: false, type: .enum), 
            AWSShapeMember(label: "ChallengeParameters", required: false, type: .map), 
            AWSShapeMember(label: "AuthenticationResult", required: false, type: .structure), 
            AWSShapeMember(label: "Session", required: false, type: .string)
        ]
        /// The name of the challenge. For more information, see .
        public let challengeName: ChallengeNameType?
        /// The challenge parameters. For more information, see .
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the authentication request.
        public let authenticationResult: AuthenticationResultType?
        /// The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        private enum CodingKeys: String, CodingKey {
            case challengeName = "ChallengeName"
            case challengeParameters = "ChallengeParameters"
            case authenticationResult = "AuthenticationResult"
            case session = "Session"
        }
    }

    public struct UpdateUserPoolClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedOAuthFlowsUserPoolClient", required: false, type: .boolean), 
            AWSShapeMember(label: "RefreshTokenValidity", required: false, type: .integer), 
            AWSShapeMember(label: "WriteAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ReadAttributes", required: false, type: .list), 
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ExplicitAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "CallbackURLs", required: false, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "ClientName", required: false, type: .string), 
            AWSShapeMember(label: "SupportedIdentityProviders", required: false, type: .list), 
            AWSShapeMember(label: "LogoutURLs", required: false, type: .list), 
            AWSShapeMember(label: "AllowedOAuthFlows", required: false, type: .list), 
            AWSShapeMember(label: "DefaultRedirectURI", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AllowedOAuthScopes", required: false, type: .list)
        ]
        /// Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
        public let allowedOAuthFlowsUserPoolClient: Bool?
        /// The time limit, in days, after which the refresh token is no longer valid and cannot be used.
        public let refreshTokenValidity: Int32?
        /// The writeable attributes of the user pool.
        public let writeAttributes: [String]?
        /// The read-only attributes of the user pool.
        public let readAttributes: [String]?
        /// The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.
        public let analyticsConfiguration: AnalyticsConfigurationType?
        /// Explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// A list of allowed callback URLs for the identity providers.
        public let callbackURLs: [String]?
        /// The user pool ID for the user pool where you want to update the user pool client.
        public let userPoolId: String
        /// The client name from the update user pool client request.
        public let clientName: String?
        /// A list of provider names for the identity providers that are supported on this client.
        public let supportedIdentityProviders: [String]?
        /// A list of allowed logout URLs for the identity providers.
        public let logoutURLs: [String]?
        /// Set to code to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint. Set to token to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.
        public let allowedOAuthFlows: [OAuthFlowType]?
        /// The default redirect URI. Must be in the CallbackURLs list.
        public let defaultRedirectURI: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// A list of allowed OAuth scopes. Currently supported values are "phone", "email", "openid", and "Cognito".
        public let allowedOAuthScopes: [String]?

        public init(allowedOAuthFlowsUserPoolClient: Bool? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, analyticsConfiguration: AnalyticsConfigurationType? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, callbackURLs: [String]? = nil, userPoolId: String, clientName: String? = nil, supportedIdentityProviders: [String]? = nil, logoutURLs: [String]? = nil, allowedOAuthFlows: [OAuthFlowType]? = nil, defaultRedirectURI: String? = nil, clientId: String, allowedOAuthScopes: [String]? = nil) {
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.analyticsConfiguration = analyticsConfiguration
            self.explicitAuthFlows = explicitAuthFlows
            self.callbackURLs = callbackURLs
            self.userPoolId = userPoolId
            self.clientName = clientName
            self.supportedIdentityProviders = supportedIdentityProviders
            self.logoutURLs = logoutURLs
            self.allowedOAuthFlows = allowedOAuthFlows
            self.defaultRedirectURI = defaultRedirectURI
            self.clientId = clientId
            self.allowedOAuthScopes = allowedOAuthScopes
        }

        private enum CodingKeys: String, CodingKey {
            case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
            case refreshTokenValidity = "RefreshTokenValidity"
            case writeAttributes = "WriteAttributes"
            case readAttributes = "ReadAttributes"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case explicitAuthFlows = "ExplicitAuthFlows"
            case callbackURLs = "CallbackURLs"
            case userPoolId = "UserPoolId"
            case clientName = "ClientName"
            case supportedIdentityProviders = "SupportedIdentityProviders"
            case logoutURLs = "LogoutURLs"
            case allowedOAuthFlows = "AllowedOAuthFlows"
            case defaultRedirectURI = "DefaultRedirectURI"
            case clientId = "ClientId"
            case allowedOAuthScopes = "AllowedOAuthScopes"
        }
    }

    public struct DeviceType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: false, type: .string), 
            AWSShapeMember(label: "DeviceLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeviceAttributes", required: false, type: .list), 
            AWSShapeMember(label: "DeviceCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeviceLastAuthenticatedDate", required: false, type: .timestamp)
        ]
        /// The device key.
        public let deviceKey: String?
        /// The last modified date of the device.
        public let deviceLastModifiedDate: TimeStamp?
        /// The device attributes.
        public let deviceAttributes: [AttributeType]?
        /// The creation date of the device.
        public let deviceCreateDate: TimeStamp?
        /// The date in which the device was last authenticated.
        public let deviceLastAuthenticatedDate: TimeStamp?

        public init(deviceKey: String? = nil, deviceLastModifiedDate: TimeStamp? = nil, deviceAttributes: [AttributeType]? = nil, deviceCreateDate: TimeStamp? = nil, deviceLastAuthenticatedDate: TimeStamp? = nil) {
            self.deviceKey = deviceKey
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceLastModifiedDate = "DeviceLastModifiedDate"
            case deviceAttributes = "DeviceAttributes"
            case deviceCreateDate = "DeviceCreateDate"
            case deviceLastAuthenticatedDate = "DeviceLastAuthenticatedDate"
        }
    }

    public struct SmsMfaConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure)
        ]
        /// The SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?

        public init(smsAuthenticationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil) {
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case smsConfiguration = "SmsConfiguration"
        }
    }

    public struct AdminUpdateDeviceStatusResponse: AWSShape {

    }

    public struct AdminUpdateUserAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: true, type: .list), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user name of the user for whom you want to update user attributes.
        public let username: String
        /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
        public let userAttributes: [AttributeType]
        /// The user pool ID for the user pool where you want to update user attributes.
        public let userPoolId: String

        public init(username: String, userAttributes: [AttributeType], userPoolId: String) {
            self.username = username
            self.userAttributes = userAttributes
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case userAttributes = "UserAttributes"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AuthEventType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventId", required: false, type: .string), 
            AWSShapeMember(label: "ChallengeResponses", required: false, type: .list), 
            AWSShapeMember(label: "EventResponse", required: false, type: .enum), 
            AWSShapeMember(label: "EventFeedback", required: false, type: .structure), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventRisk", required: false, type: .structure), 
            AWSShapeMember(label: "EventContextData", required: false, type: .structure), 
            AWSShapeMember(label: "EventType", required: false, type: .enum)
        ]
        /// The event ID.
        public let eventId: String?
        /// The challenge responses.
        public let challengeResponses: [ChallengeResponseType]?
        /// The event response.
        public let eventResponse: EventResponseType?
        /// A flag specifying the user feedback captured at the time of an event request is good or bad. 
        public let eventFeedback: EventFeedbackType?
        /// The creation date
        public let creationDate: TimeStamp?
        /// The event risk.
        public let eventRisk: EventRiskType?
        /// The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.
        public let eventContextData: EventContextDataType?
        /// The event type.
        public let eventType: EventType?

        public init(eventId: String? = nil, challengeResponses: [ChallengeResponseType]? = nil, eventResponse: EventResponseType? = nil, eventFeedback: EventFeedbackType? = nil, creationDate: TimeStamp? = nil, eventRisk: EventRiskType? = nil, eventContextData: EventContextDataType? = nil, eventType: EventType? = nil) {
            self.eventId = eventId
            self.challengeResponses = challengeResponses
            self.eventResponse = eventResponse
            self.eventFeedback = eventFeedback
            self.creationDate = creationDate
            self.eventRisk = eventRisk
            self.eventContextData = eventContextData
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case challengeResponses = "ChallengeResponses"
            case eventResponse = "EventResponse"
            case eventFeedback = "EventFeedback"
            case creationDate = "CreationDate"
            case eventRisk = "EventRisk"
            case eventContextData = "EventContextData"
            case eventType = "EventType"
        }
    }

    public struct CodeDeliveryDetailsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "Destination", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryMedium", required: false, type: .enum)
        ]
        /// The attribute name.
        public let attributeName: String?
        /// The destination for the code delivery details.
        public let destination: String?
        /// The delivery medium (email message or phone number).
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, destination: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.destination = destination
            self.deliveryMedium = deliveryMedium
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case destination = "Destination"
            case deliveryMedium = "DeliveryMedium"
        }
    }

    public struct AdminConfirmSignUpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for which you want to confirm user registration.
        public let userPoolId: String
        /// The user name for which you want to confirm user registration.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct ForgetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The access token for the forgotten device request.
        public let accessToken: String?

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case accessToken = "AccessToken"
        }
    }

    public struct UserPoolType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolTags", required: false, type: .map), 
            AWSShapeMember(label: "VerificationMessageTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "EmailVerificationSubject", required: false, type: .string), 
            AWSShapeMember(label: "UsernameAttributes", required: false, type: .list), 
            AWSShapeMember(label: "EstimatedNumberOfUsers", required: false, type: .integer), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "SmsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "EmailVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "DeviceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EmailConfigurationFailure", required: false, type: .string), 
            AWSShapeMember(label: "AdminCreateUserConfig", required: false, type: .structure), 
            AWSShapeMember(label: "UserPoolAddOns", required: false, type: .structure), 
            AWSShapeMember(label: "AliasAttributes", required: false, type: .list), 
            AWSShapeMember(label: "SchemaAttributes", required: false, type: .list), 
            AWSShapeMember(label: "SmsConfigurationFailure", required: false, type: .string), 
            AWSShapeMember(label: "LambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Policies", required: false, type: .structure), 
            AWSShapeMember(label: "SmsVerificationMessage", required: false, type: .string), 
            AWSShapeMember(label: "SmsAuthenticationMessage", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AutoVerifiedAttributes", required: false, type: .list)
        ]
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// The template for verification messages.
        public let verificationMessageTemplate: VerificationMessageTemplateType?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        public let usernameAttributes: [UsernameAttributeType]?
        /// A number estimating the size of the user pool.
        public let estimatedNumberOfUsers: Int32?
        /// The date the user pool was created.
        public let creationDate: TimeStamp?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The ID of the user pool.
        public let id: String?
        /// The status of a user pool.
        public let status: StatusType?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// The name of the user pool.
        public let name: String?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?
        /// The reason why the email configuration cannot send the messages to your users.
        public let emailConfigurationFailure: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// The user pool add-ons.
        public let userPoolAddOns: UserPoolAddOnsType?
        /// Specifies the attributes that are aliased in a user pool.
        public let aliasAttributes: [AliasAttributeType]?
        /// A container with the schema attributes of a user pool.
        public let schemaAttributes: [SchemaAttributeType]?
        /// The reason why the SMS configuration cannot send the messages to your users.
        public let smsConfigurationFailure: String?
        /// The AWS Lambda triggers associated with tue user pool.
        public let lambdaConfig: LambdaConfigType?
        /// The policies associated with the user pool.
        public let policies: UserPoolPolicyType?
        /// The contents of the SMS verification message.
        public let smsVerificationMessage: String?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The date the user pool was last modified.
        public let lastModifiedDate: TimeStamp?
        /// Specifies the attributes that are auto-verified in a user pool.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?

        public init(userPoolTags: [String: String]? = nil, verificationMessageTemplate: VerificationMessageTemplateType? = nil, emailVerificationSubject: String? = nil, usernameAttributes: [UsernameAttributeType]? = nil, estimatedNumberOfUsers: Int32? = nil, creationDate: TimeStamp? = nil, mfaConfiguration: UserPoolMfaType? = nil, id: String? = nil, status: StatusType? = nil, smsConfiguration: SmsConfigurationType? = nil, emailConfiguration: EmailConfigurationType? = nil, name: String? = nil, emailVerificationMessage: String? = nil, deviceConfiguration: DeviceConfigurationType? = nil, emailConfigurationFailure: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, userPoolAddOns: UserPoolAddOnsType? = nil, aliasAttributes: [AliasAttributeType]? = nil, schemaAttributes: [SchemaAttributeType]? = nil, smsConfigurationFailure: String? = nil, lambdaConfig: LambdaConfigType? = nil, policies: UserPoolPolicyType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, lastModifiedDate: TimeStamp? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil) {
            self.userPoolTags = userPoolTags
            self.verificationMessageTemplate = verificationMessageTemplate
            self.emailVerificationSubject = emailVerificationSubject
            self.usernameAttributes = usernameAttributes
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.creationDate = creationDate
            self.mfaConfiguration = mfaConfiguration
            self.id = id
            self.status = status
            self.smsConfiguration = smsConfiguration
            self.emailConfiguration = emailConfiguration
            self.name = name
            self.emailVerificationMessage = emailVerificationMessage
            self.deviceConfiguration = deviceConfiguration
            self.emailConfigurationFailure = emailConfigurationFailure
            self.adminCreateUserConfig = adminCreateUserConfig
            self.userPoolAddOns = userPoolAddOns
            self.aliasAttributes = aliasAttributes
            self.schemaAttributes = schemaAttributes
            self.smsConfigurationFailure = smsConfigurationFailure
            self.lambdaConfig = lambdaConfig
            self.policies = policies
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.lastModifiedDate = lastModifiedDate
            self.autoVerifiedAttributes = autoVerifiedAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolTags = "UserPoolTags"
            case verificationMessageTemplate = "VerificationMessageTemplate"
            case emailVerificationSubject = "EmailVerificationSubject"
            case usernameAttributes = "UsernameAttributes"
            case estimatedNumberOfUsers = "EstimatedNumberOfUsers"
            case creationDate = "CreationDate"
            case mfaConfiguration = "MfaConfiguration"
            case id = "Id"
            case status = "Status"
            case smsConfiguration = "SmsConfiguration"
            case emailConfiguration = "EmailConfiguration"
            case name = "Name"
            case emailVerificationMessage = "EmailVerificationMessage"
            case deviceConfiguration = "DeviceConfiguration"
            case emailConfigurationFailure = "EmailConfigurationFailure"
            case adminCreateUserConfig = "AdminCreateUserConfig"
            case userPoolAddOns = "UserPoolAddOns"
            case aliasAttributes = "AliasAttributes"
            case schemaAttributes = "SchemaAttributes"
            case smsConfigurationFailure = "SmsConfigurationFailure"
            case lambdaConfig = "LambdaConfig"
            case policies = "Policies"
            case smsVerificationMessage = "SmsVerificationMessage"
            case smsAuthenticationMessage = "SmsAuthenticationMessage"
            case lastModifiedDate = "LastModifiedDate"
            case autoVerifiedAttributes = "AutoVerifiedAttributes"
        }
    }

    public struct GetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The access token.
        public let accessToken: String?

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case accessToken = "AccessToken"
        }
    }

    public struct ListDevicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// The pagination token for the list device response.
        public let paginationToken: String?
        /// The devices returned in the list devices response.
        public let devices: [DeviceType]?

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case devices = "Devices"
        }
    }

    public struct DescribeRiskConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The app client ID.
        public let clientId: String?
        /// The user pool ID.
        public let userPoolId: String

        public init(clientId: String? = nil, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AdminConfirmSignUpResponse: AWSShape {

    }

    public struct CreateUserImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserImportJob", required: false, type: .structure)
        ]
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        private enum CodingKeys: String, CodingKey {
            case userImportJob = "UserImportJob"
        }
    }

    public struct UpdateUserPoolResponse: AWSShape {

    }

    public struct LambdaConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PostAuthentication", required: false, type: .string), 
            AWSShapeMember(label: "CustomMessage", required: false, type: .string), 
            AWSShapeMember(label: "PreSignUp", required: false, type: .string), 
            AWSShapeMember(label: "VerifyAuthChallengeResponse", required: false, type: .string), 
            AWSShapeMember(label: "DefineAuthChallenge", required: false, type: .string), 
            AWSShapeMember(label: "CreateAuthChallenge", required: false, type: .string), 
            AWSShapeMember(label: "PreAuthentication", required: false, type: .string), 
            AWSShapeMember(label: "PreTokenGeneration", required: false, type: .string), 
            AWSShapeMember(label: "PostConfirmation", required: false, type: .string)
        ]
        /// A post-authentication AWS Lambda trigger.
        public let postAuthentication: String?
        /// A custom Message AWS Lambda trigger.
        public let customMessage: String?
        /// A pre-registration AWS Lambda trigger.
        public let preSignUp: String?
        /// Verifies the authentication challenge response.
        public let verifyAuthChallengeResponse: String?
        /// Defines the authentication challenge.
        public let defineAuthChallenge: String?
        /// Creates an authentication challenge.
        public let createAuthChallenge: String?
        /// A pre-authentication AWS Lambda trigger.
        public let preAuthentication: String?
        /// A Lambda trigger that is invoked before token generation.
        public let preTokenGeneration: String?
        /// A post-confirmation AWS Lambda trigger.
        public let postConfirmation: String?

        public init(postAuthentication: String? = nil, customMessage: String? = nil, preSignUp: String? = nil, verifyAuthChallengeResponse: String? = nil, defineAuthChallenge: String? = nil, createAuthChallenge: String? = nil, preAuthentication: String? = nil, preTokenGeneration: String? = nil, postConfirmation: String? = nil) {
            self.postAuthentication = postAuthentication
            self.customMessage = customMessage
            self.preSignUp = preSignUp
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
            self.defineAuthChallenge = defineAuthChallenge
            self.createAuthChallenge = createAuthChallenge
            self.preAuthentication = preAuthentication
            self.preTokenGeneration = preTokenGeneration
            self.postConfirmation = postConfirmation
        }

        private enum CodingKeys: String, CodingKey {
            case postAuthentication = "PostAuthentication"
            case customMessage = "CustomMessage"
            case preSignUp = "PreSignUp"
            case verifyAuthChallengeResponse = "VerifyAuthChallengeResponse"
            case defineAuthChallenge = "DefineAuthChallenge"
            case createAuthChallenge = "CreateAuthChallenge"
            case preAuthentication = "PreAuthentication"
            case preTokenGeneration = "PreTokenGeneration"
            case postConfirmation = "PostConfirmation"
        }
    }

    public enum AttributeDataType: String, CustomStringConvertible, Codable {
        case string = "String"
        case number = "Number"
        case datetime = "DateTime"
        case boolean = "Boolean"
        public var description: String { return self.rawValue }
    }

    public enum EventFilterType: String, CustomStringConvertible, Codable {
        case signIn = "SIGN_IN"
        case passwordChange = "PASSWORD_CHANGE"
        case signUp = "SIGN_UP"
        public var description: String { return self.rawValue }
    }

    public struct CompromisedCredentialsRiskConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: true, type: .structure), 
            AWSShapeMember(label: "EventFilter", required: false, type: .list)
        ]
        /// The compromised credentials risk configuration actions.
        public let actions: CompromisedCredentialsActionsType
        /// Perform the action for these events. The default is to perform all events if no event filter is specified.
        public let eventFilter: [EventFilterType]?

        public init(actions: CompromisedCredentialsActionsType, eventFilter: [EventFilterType]? = nil) {
            self.actions = actions
            self.eventFilter = eventFilter
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case eventFilter = "EventFilter"
        }
    }

    public struct AdminCreateUserConfigType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowAdminCreateUserOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "UnusedAccountValidityDays", required: false, type: .integer), 
            AWSShapeMember(label: "InviteMessageTemplate", required: false, type: .structure)
        ]
        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public let allowAdminCreateUserOnly: Bool?
        /// The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this parameter is 7.
        public let unusedAccountValidityDays: Int32?
        /// The message template to be used for the welcome message to new users. See also Customizing User Invitation Messages.
        public let inviteMessageTemplate: MessageTemplateType?

        public init(allowAdminCreateUserOnly: Bool? = nil, unusedAccountValidityDays: Int32? = nil, inviteMessageTemplate: MessageTemplateType? = nil) {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.unusedAccountValidityDays = unusedAccountValidityDays
            self.inviteMessageTemplate = inviteMessageTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case allowAdminCreateUserOnly = "AllowAdminCreateUserOnly"
            case unusedAccountValidityDays = "UnusedAccountValidityDays"
            case inviteMessageTemplate = "InviteMessageTemplate"
        }
    }

    public struct AuthenticationResultType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpiresIn", required: false, type: .integer), 
            AWSShapeMember(label: "NewDeviceMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "IdToken", required: false, type: .string), 
            AWSShapeMember(label: "TokenType", required: false, type: .string), 
            AWSShapeMember(label: "RefreshToken", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: false, type: .string)
        ]
        /// The expiration period of the authentication result.
        public let expiresIn: Int32?
        /// The new device metadata from an authentication result.
        public let newDeviceMetadata: NewDeviceMetadataType?
        /// The ID token.
        public let idToken: String?
        /// The token type.
        public let tokenType: String?
        /// The refresh token.
        public let refreshToken: String?
        /// The access token.
        public let accessToken: String?

        public init(expiresIn: Int32? = nil, newDeviceMetadata: NewDeviceMetadataType? = nil, idToken: String? = nil, tokenType: String? = nil, refreshToken: String? = nil, accessToken: String? = nil) {
            self.expiresIn = expiresIn
            self.newDeviceMetadata = newDeviceMetadata
            self.idToken = idToken
            self.tokenType = tokenType
            self.refreshToken = refreshToken
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case expiresIn = "ExpiresIn"
            case newDeviceMetadata = "NewDeviceMetadata"
            case idToken = "IdToken"
            case tokenType = "TokenType"
            case refreshToken = "RefreshToken"
            case accessToken = "AccessToken"
        }
    }

    public struct StringAttributeConstraintsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinLength", required: false, type: .string), 
            AWSShapeMember(label: "MaxLength", required: false, type: .string)
        ]
        /// The minimum length.
        public let minLength: String?
        /// The maximum length.
        public let maxLength: String?

        public init(minLength: String? = nil, maxLength: String? = nil) {
            self.minLength = minLength
            self.maxLength = maxLength
        }

        private enum CodingKeys: String, CodingKey {
            case minLength = "MinLength"
            case maxLength = "MaxLength"
        }
    }

    public struct UserPoolPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordPolicy", required: false, type: .structure)
        ]
        /// The password policy.
        public let passwordPolicy: PasswordPolicyType?

        public init(passwordPolicy: PasswordPolicyType? = nil) {
            self.passwordPolicy = passwordPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case passwordPolicy = "PasswordPolicy"
        }
    }

    public struct ForgotPasswordResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeDeliveryDetails", required: false, type: .structure)
        ]
        /// The code delivery details returned by the server in response to the request to reset a password.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        private enum CodingKeys: String, CodingKey {
            case codeDeliveryDetails = "CodeDeliveryDetails"
        }
    }

    public struct CreateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public enum ExplicitAuthFlowsType: String, CustomStringConvertible, Codable {
        case adminNoSrpAuth = "ADMIN_NO_SRP_AUTH"
        case customAuthFlowOnly = "CUSTOM_AUTH_FLOW_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum UserPoolMfaType: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case on = "ON"
        case optional = "OPTIONAL"
        public var description: String { return self.rawValue }
    }

    public struct NewDeviceMetadataType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceGroupKey", required: false, type: .string), 
            AWSShapeMember(label: "DeviceKey", required: false, type: .string)
        ]
        /// The device group key.
        public let deviceGroupKey: String?
        /// The device key.
        public let deviceKey: String?

        public init(deviceGroupKey: String? = nil, deviceKey: String? = nil) {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }

        private enum CodingKeys: String, CodingKey {
            case deviceGroupKey = "DeviceGroupKey"
            case deviceKey = "DeviceKey"
        }
    }

    public enum DefaultEmailOptionType: String, CustomStringConvertible, Codable {
        case confirmWithLink = "CONFIRM_WITH_LINK"
        case confirmWithCode = "CONFIRM_WITH_CODE"
        public var description: String { return self.rawValue }
    }

    public struct UpdateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .structure)
        ]
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
        }
    }

    public enum ChallengeNameType: String, CustomStringConvertible, Codable {
        case smsMfa = "SMS_MFA"
        case softwareTokenMfa = "SOFTWARE_TOKEN_MFA"
        case selectMfaType = "SELECT_MFA_TYPE"
        case mfaSetup = "MFA_SETUP"
        case passwordVerifier = "PASSWORD_VERIFIER"
        case customChallenge = "CUSTOM_CHALLENGE"
        case deviceSrpAuth = "DEVICE_SRP_AUTH"
        case devicePasswordVerifier = "DEVICE_PASSWORD_VERIFIER"
        case adminNoSrpAuth = "ADMIN_NO_SRP_AUTH"
        case newPasswordRequired = "NEW_PASSWORD_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public struct AdminSetUserSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "MFAOptions", required: true, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The user pool ID for the user pool where you want to set the user's settings, such as MFA options.
        public let userPoolId: String
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The user name of the user for whom you wish to set user settings.
        public let username: String

        public init(userPoolId: String, mFAOptions: [MFAOptionType], username: String) {
            self.userPoolId = userPoolId
            self.mFAOptions = mFAOptions
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case mFAOptions = "MFAOptions"
            case username = "Username"
        }
    }

    public struct StopUserImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetCSVHeaderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
        }
    }

    public struct ResendConfirmationCodeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "UserContextData", required: false, type: .structure), 
            AWSShapeMember(label: "SecretHash", required: false, type: .string), 
            AWSShapeMember(label: "AnalyticsMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
        public let userContextData: UserContextDataType?
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The Amazon Pinpoint analytics metadata for collecting metrics for ResendConfirmationCode calls.
        public let analyticsMetadata: AnalyticsMetadataType?
        /// The user name of the user to whom you wish to resend a confirmation code.
        public let username: String

        public init(clientId: String, userContextData: UserContextDataType? = nil, secretHash: String? = nil, analyticsMetadata: AnalyticsMetadataType? = nil, username: String) {
            self.clientId = clientId
            self.userContextData = userContextData
            self.secretHash = secretHash
            self.analyticsMetadata = analyticsMetadata
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userContextData = "UserContextData"
            case secretHash = "SecretHash"
            case analyticsMetadata = "AnalyticsMetadata"
            case username = "Username"
        }
    }

    public struct DescribeUserPoolResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPool", required: false, type: .structure)
        ]
        /// The container of metadata returned by the server to describe the pool.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        private enum CodingKeys: String, CodingKey {
            case userPool = "UserPool"
        }
    }

    public enum ChallengeResponse: String, CustomStringConvertible, Codable {
        case success = "Success"
        case failure = "Failure"
        public var description: String { return self.rawValue }
    }

    public struct UserImportJobType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CompletionMessage", required: false, type: .string), 
            AWSShapeMember(label: "FailedUsers", required: false, type: .long), 
            AWSShapeMember(label: "SkippedUsers", required: false, type: .long), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "ImportedUsers", required: false, type: .long)
        ]
        /// The date when the user import job was completed.
        public let completionDate: TimeStamp?
        /// The message returned when the user import job is completed.
        public let completionMessage: String?
        /// The number of users that could not be imported.
        public let failedUsers: Int64?
        /// The number of users that were skipped.
        public let skippedUsers: Int64?
        /// The date the user import job was created.
        public let creationDate: TimeStamp?
        /// The job ID for the user import job.
        public let jobId: String?
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String?
        /// The status of the user import job. One of the following:    Created - The job was created but not started.    Pending - A transition state. You have started the job, but it has not begun importing users yet.    InProgress - The job has started, and users are being imported.    Stopping - You have stopped the job, but the job has not stopped importing users yet.    Stopped - You have stopped the job, and the job has stopped importing users.    Succeeded - The job has completed successfully.    Failed - The job has stopped due to an error.    Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.  
        public let status: UserImportJobStatusType?
        /// The pre-signed URL to be used to upload the .csv file.
        public let preSignedUrl: String?
        /// The date when the user import job was started.
        public let startDate: TimeStamp?
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public let cloudWatchLogsRoleArn: String?
        /// The job name for the user import job.
        public let jobName: String?
        /// The number of users that were successfully imported.
        public let importedUsers: Int64?

        public init(completionDate: TimeStamp? = nil, completionMessage: String? = nil, failedUsers: Int64? = nil, skippedUsers: Int64? = nil, creationDate: TimeStamp? = nil, jobId: String? = nil, userPoolId: String? = nil, status: UserImportJobStatusType? = nil, preSignedUrl: String? = nil, startDate: TimeStamp? = nil, cloudWatchLogsRoleArn: String? = nil, jobName: String? = nil, importedUsers: Int64? = nil) {
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.failedUsers = failedUsers
            self.skippedUsers = skippedUsers
            self.creationDate = creationDate
            self.jobId = jobId
            self.userPoolId = userPoolId
            self.status = status
            self.preSignedUrl = preSignedUrl
            self.startDate = startDate
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.jobName = jobName
            self.importedUsers = importedUsers
        }

        private enum CodingKeys: String, CodingKey {
            case completionDate = "CompletionDate"
            case completionMessage = "CompletionMessage"
            case failedUsers = "FailedUsers"
            case skippedUsers = "SkippedUsers"
            case creationDate = "CreationDate"
            case jobId = "JobId"
            case userPoolId = "UserPoolId"
            case status = "Status"
            case preSignedUrl = "PreSignedUrl"
            case startDate = "StartDate"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case jobName = "JobName"
            case importedUsers = "ImportedUsers"
        }
    }

    public struct AdminUpdateUserAttributesResponse: AWSShape {

    }

    public struct DeleteUserAttributesResponse: AWSShape {

    }

    public struct ConfirmDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceSecretVerifierConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The configuration of the device secret verifier.
        public let deviceSecretVerifierConfig: DeviceSecretVerifierConfigType?
        /// The device name.
        public let deviceName: String?
        /// The access token.
        public let accessToken: String

        public init(deviceKey: String, deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil, deviceName: String? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
            self.deviceName = deviceName
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceSecretVerifierConfig = "DeviceSecretVerifierConfig"
            case deviceName = "DeviceName"
            case accessToken = "AccessToken"
        }
    }

    public struct AdminCreateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForceAliasCreation", required: false, type: .boolean), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "DesiredDeliveryMediums", required: false, type: .list), 
            AWSShapeMember(label: "MessageAction", required: false, type: .enum), 
            AWSShapeMember(label: "ValidationData", required: false, type: .list), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "TemporaryPassword", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .list)
        ]
        /// This parameter is only used if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
        public let forceAliasCreation: Bool?
        /// The user pool ID for the user pool where the user will be created.
        public let userPoolId: String
        /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". More than one value can be specified.
        public let desiredDeliveryMediums: [DeliveryMediumType]?
        /// Set to "RESEND" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to "SUPPRESS" to suppress sending the message. Only one value can be specified.
        public let messageAction: MessageActionType?
        /// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain. To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process. The user's validation data is not persisted.
        public let validationData: [AttributeType]?
        /// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
        public let username: String
        /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins. This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter.
        public let temporaryPassword: String?
        /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in or in the Attributes tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message). For custom attributes, you must prepend the custom: prefix to the attribute name. To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. (You can also do this by calling .)    email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.    phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.  
        public let userAttributes: [AttributeType]?

        public init(forceAliasCreation: Bool? = nil, userPoolId: String, desiredDeliveryMediums: [DeliveryMediumType]? = nil, messageAction: MessageActionType? = nil, validationData: [AttributeType]? = nil, username: String, temporaryPassword: String? = nil, userAttributes: [AttributeType]? = nil) {
            self.forceAliasCreation = forceAliasCreation
            self.userPoolId = userPoolId
            self.desiredDeliveryMediums = desiredDeliveryMediums
            self.messageAction = messageAction
            self.validationData = validationData
            self.username = username
            self.temporaryPassword = temporaryPassword
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case forceAliasCreation = "ForceAliasCreation"
            case userPoolId = "UserPoolId"
            case desiredDeliveryMediums = "DesiredDeliveryMediums"
            case messageAction = "MessageAction"
            case validationData = "ValidationData"
            case username = "Username"
            case temporaryPassword = "TemporaryPassword"
            case userAttributes = "UserAttributes"
        }
    }

    public struct AdminListDevicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// The pagination token.
        public let paginationToken: String?
        /// The devices in the list of devices response.
        public let devices: [DeviceType]?

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case devices = "Devices"
        }
    }

    public struct UserType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "UserCreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "UserLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "MFAOptions", required: false, type: .list)
        ]
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public let userStatus: UserStatusType?
        /// Specifies whether the user is enabled.
        public let enabled: Bool?
        /// The user name of the user you wish to describe.
        public let username: String?
        /// The creation date of the user.
        public let userCreateDate: TimeStamp?
        /// A container with information about the user type attributes.
        public let attributes: [AttributeType]?
        /// The last modified date of the user.
        public let userLastModifiedDate: TimeStamp?
        /// The MFA options for the user.
        public let mFAOptions: [MFAOptionType]?

        public init(userStatus: UserStatusType? = nil, enabled: Bool? = nil, username: String? = nil, userCreateDate: TimeStamp? = nil, attributes: [AttributeType]? = nil, userLastModifiedDate: TimeStamp? = nil, mFAOptions: [MFAOptionType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.attributes = attributes
            self.userLastModifiedDate = userLastModifiedDate
            self.mFAOptions = mFAOptions
        }

        private enum CodingKeys: String, CodingKey {
            case userStatus = "UserStatus"
            case enabled = "Enabled"
            case username = "Username"
            case userCreateDate = "UserCreateDate"
            case attributes = "Attributes"
            case userLastModifiedDate = "UserLastModifiedDate"
            case mFAOptions = "MFAOptions"
        }
    }

    public struct VerificationMessageTemplateType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SmsMessage", required: false, type: .string), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .string), 
            AWSShapeMember(label: "DefaultEmailOption", required: false, type: .enum), 
            AWSShapeMember(label: "EmailSubject", required: false, type: .string), 
            AWSShapeMember(label: "EmailSubjectByLink", required: false, type: .string), 
            AWSShapeMember(label: "EmailMessageByLink", required: false, type: .string)
        ]
        /// The SMS message template.
        public let smsMessage: String?
        /// The email message template.
        public let emailMessage: String?
        /// The default email option.
        public let defaultEmailOption: DefaultEmailOptionType?
        /// The subject line for the email message template.
        public let emailSubject: String?
        /// The subject line for the email message template for sending a confirmation link to the user.
        public let emailSubjectByLink: String?
        /// The email message template for sending a confirmation link to the user.
        public let emailMessageByLink: String?

        public init(smsMessage: String? = nil, emailMessage: String? = nil, defaultEmailOption: DefaultEmailOptionType? = nil, emailSubject: String? = nil, emailSubjectByLink: String? = nil, emailMessageByLink: String? = nil) {
            self.smsMessage = smsMessage
            self.emailMessage = emailMessage
            self.defaultEmailOption = defaultEmailOption
            self.emailSubject = emailSubject
            self.emailSubjectByLink = emailSubjectByLink
            self.emailMessageByLink = emailMessageByLink
        }

        private enum CodingKeys: String, CodingKey {
            case smsMessage = "SmsMessage"
            case emailMessage = "EmailMessage"
            case defaultEmailOption = "DefaultEmailOption"
            case emailSubject = "EmailSubject"
            case emailSubjectByLink = "EmailSubjectByLink"
            case emailMessageByLink = "EmailMessageByLink"
        }
    }

    public struct AdminLinkProviderForUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "SourceUser", required: true, type: .structure), 
            AWSShapeMember(label: "DestinationUser", required: true, type: .structure)
        ]
        /// The user pool ID for the user pool.
        public let userPoolId: String
        /// An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user. If the SourceUser is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the ProviderAttributeName to Cognito_Subject. For social identity providers, the ProviderName will be Facebook, Google, or LoginWithAmazon, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for id, sub, and user_id, respectively. The ProviderAttributeValue for the user must be the same value as the id, sub, or user_id value found in the social identity provider token.  For SAML, the ProviderAttributeName can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the ProviderAttributeName. If you set ProviderAttributeName to Cognito_Subject, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.
        public let sourceUser: ProviderUserIdentifierType
        /// The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in. For a native username + password user, the ProviderAttributeValue for the DestinationUser should be the username in the user pool. For a federated user, it should be the provider-specific user_id. The ProviderAttributeName of the DestinationUser is ignored. The ProviderName should be set to Cognito for users in Cognito user pools.
        public let destinationUser: ProviderUserIdentifierType

        public init(userPoolId: String, sourceUser: ProviderUserIdentifierType, destinationUser: ProviderUserIdentifierType) {
            self.userPoolId = userPoolId
            self.sourceUser = sourceUser
            self.destinationUser = destinationUser
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case sourceUser = "SourceUser"
            case destinationUser = "DestinationUser"
        }
    }

    public struct ListUsersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributesToGet", required: false, type: .list), 
            AWSShapeMember(label: "PaginationToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.
        public let attributesToGet: [String]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?
        /// Maximum number of users to be returned.
        public let limit: Int32?
        /// A filter string of the form "AttributeName Filter-Type "AttributeValue"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".    AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.    Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".     AttributeValue: The attribute value that must be matched for each user.   If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:    username (case-sensitive)    email     phone_number     name     given_name     family_name     preferred_username     cognito:user_status (called Enabled in the Console) (case-sensitive)    status (case-insensitive)    sub    Custom attributes are not searchable. For more information, see Searching for Users Using the ListUsers API and Examples of Using the ListUsers API in the Amazon Cognito Developer Guide.
        public let filter: String?
        /// The user pool ID for the user pool on which the search should be performed.
        public let userPoolId: String

        public init(attributesToGet: [String]? = nil, paginationToken: String? = nil, limit: Int32? = nil, filter: String? = nil, userPoolId: String) {
            self.attributesToGet = attributesToGet
            self.paginationToken = paginationToken
            self.limit = limit
            self.filter = filter
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case paginationToken = "PaginationToken"
            case limit = "Limit"
            case filter = "Filter"
            case userPoolId = "UserPoolId"
        }
    }

    public struct GetDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .structure)
        ]
        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct SetUserPoolMfaConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "SoftwareTokenMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SmsMfaConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "MfaConfiguration", required: false, type: .enum)
        ]
        /// The user pool ID.
        public let userPoolId: String
        /// The software token MFA configuration.
        public let softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType?
        /// The SMS text message MFA configuration.
        public let smsMfaConfiguration: SmsMfaConfigType?
        /// The MFA configuration.
        public let mfaConfiguration: UserPoolMfaType?

        public init(userPoolId: String, softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil, smsMfaConfiguration: SmsMfaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil) {
            self.userPoolId = userPoolId
            self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
            self.smsMfaConfiguration = smsMfaConfiguration
            self.mfaConfiguration = mfaConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case softwareTokenMfaConfiguration = "SoftwareTokenMfaConfiguration"
            case smsMfaConfiguration = "SmsMfaConfiguration"
            case mfaConfiguration = "MfaConfiguration"
        }
    }

    public struct AdminUpdateDeviceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "DeviceRememberedStatus", required: false, type: .enum), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The status indicating whether a device has been remembered or not.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.userPoolId = userPoolId
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case deviceRememberedStatus = "DeviceRememberedStatus"
            case userPoolId = "UserPoolId"
            case username = "Username"
        }
    }

    public struct VerifyUserAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "Code", required: true, type: .string), 
            AWSShapeMember(label: "AccessToken", required: true, type: .string)
        ]
        /// The attribute name in the request to verify user attributes.
        public let attributeName: String
        /// The verification code in the request to verify user attributes.
        public let code: String
        /// Represents the access token of the request to verify user attributes.
        public let accessToken: String

        public init(attributeName: String, code: String, accessToken: String) {
            self.attributeName = attributeName
            self.code = code
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case code = "Code"
            case accessToken = "AccessToken"
        }
    }

    public struct ChangePasswordResponse: AWSShape {

    }

    public struct DescribeRiskConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RiskConfiguration", required: true, type: .structure)
        ]
        /// The risk configuration.
        public let riskConfiguration: RiskConfigurationType

        public init(riskConfiguration: RiskConfigurationType) {
            self.riskConfiguration = riskConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case riskConfiguration = "RiskConfiguration"
        }
    }

    public struct AdminListUserAuthEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AuthEvents", required: false, type: .list)
        ]
        /// A pagination token.
        public let nextToken: String?
        /// The response object. It includes the EventID, EventType, CreationDate, EventRisk, and EventResponse.
        public let authEvents: [AuthEventType]?

        public init(nextToken: String? = nil, authEvents: [AuthEventType]? = nil) {
            self.nextToken = nextToken
            self.authEvents = authEvents
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case authEvents = "AuthEvents"
        }
    }

    public struct AdminGetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceKey", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The device key.
        public let deviceKey: String
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(deviceKey: String, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.username = username
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceKey = "DeviceKey"
            case username = "Username"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUserPoolClientsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The user pool ID for the user pool where you want to list user pool clients.
        public let userPoolId: String
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return when listing the user pool clients.
        public let maxResults: Int32?

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum ChallengeName: String, CustomStringConvertible, Codable {
        case password = "Password"
        case mfa = "Mfa"
        public var description: String { return self.rawValue }
    }

    public struct CreateIdentityProviderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdpIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "ProviderType", required: true, type: .enum), 
            AWSShapeMember(label: "AttributeMapping", required: false, type: .map), 
            AWSShapeMember(label: "ProviderDetails", required: true, type: .map), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// A list of identity provider identifiers.
        public let idpIdentifiers: [String]?
        /// The identity provider name.
        public let providerName: String
        /// The identity provider type.
        public let providerType: IdentityProviderTypeType
        /// A mapping of identity provider attributes to standard and custom user pool attributes.
        public let attributeMapping: [String: String]?
        /// The identity provider details, such as MetadataURL and MetadataFile.
        public let providerDetails: [String: String]
        /// The user pool ID.
        public let userPoolId: String

        public init(idpIdentifiers: [String]? = nil, providerName: String, providerType: IdentityProviderTypeType, attributeMapping: [String: String]? = nil, providerDetails: [String: String], userPoolId: String) {
            self.idpIdentifiers = idpIdentifiers
            self.providerName = providerName
            self.providerType = providerType
            self.attributeMapping = attributeMapping
            self.providerDetails = providerDetails
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case idpIdentifiers = "IdpIdentifiers"
            case providerName = "ProviderName"
            case providerType = "ProviderType"
            case attributeMapping = "AttributeMapping"
            case providerDetails = "ProviderDetails"
            case userPoolId = "UserPoolId"
        }
    }

    public struct AssociateSoftwareTokenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Session", required: false, type: .string), 
            AWSShapeMember(label: "SecretCode", required: false, type: .string)
        ]
        /// The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
        public let session: String?
        /// A unique generated shared secret code that is used in the TOTP algorithm to generate a one time code.
        public let secretCode: String?

        public init(session: String? = nil, secretCode: String? = nil) {
            self.session = session
            self.secretCode = secretCode
        }

        private enum CodingKeys: String, CodingKey {
            case session = "Session"
            case secretCode = "SecretCode"
        }
    }

    public struct DescribeResourceServerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Identifier", required: true, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: true, type: .string)
        ]
        /// The identifier for the resource server
        public let identifier: String
        /// The user pool ID for the user pool that hosts the resource server.
        public let userPoolId: String

        public init(identifier: String, userPoolId: String) {
            self.identifier = identifier
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case userPoolId = "UserPoolId"
        }
    }

    public struct ListUserPoolClientsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolClients", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool clients in the response that lists user pool clients.
        public let userPoolClients: [UserPoolClientDescription]?

        public init(nextToken: String? = nil, userPoolClients: [UserPoolClientDescription]? = nil) {
            self.nextToken = nextToken
            self.userPoolClients = userPoolClients
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case userPoolClients = "UserPoolClients"
        }
    }

}