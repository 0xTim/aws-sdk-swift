// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, Amazon CloudTrail, or other sources. You can then retrieve the associated log data from CloudWatch Logs using the Amazon CloudWatch console, the CloudWatch Logs commands in the AWS CLI, the CloudWatch Logs API, or the CloudWatch Logs SDK. You can use CloudWatch Logs to:    Monitor Logs from Amazon EC2 Instances in Real-time: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs and send you a notification whenever the rate of errors exceeds a threshold you specify. CloudWatch Logs uses your log data for monitoring; so, no code changes are required. For example, you can monitor application logs for specific literal terms (such as "NullReferenceException") or count the number of occurrences of a literal term at a particular position in log data (such as "404" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a Amazon CloudWatch metric that you specify.    Monitor Amazon CloudTrail Logged Events: You can create alarms in Amazon CloudWatch and receive notifications of particular API activity as captured by CloudTrail and use the notification to perform troubleshooting.    Archive Log Data: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events older than this setting are automatically deleted. The CloudWatch Logs agent makes it easy to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.  
*/
public struct Logs {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "Logs_20140328",
            service: "logs",
            endpoint: endpoint
        )
    }

    ///  Creates a log stream for the specified log group. There is no limit on the number of log streams that you can create for a log group. You must use the following guidelines when naming a log stream:   Log stream names must be unique within the log group.   Log stream names can be between 1 and 512 characters long.   The ':' (colon) and '*' (asterisk) characters are not allowed.  
    public func createLogStream(_ input: CreateLogStreamRequest) throws {
        _ = try request.invoke(operation: "CreateLogStream", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Deletes the specified subscription filter.
    public func deleteSubscriptionFilter(_ input: DeleteSubscriptionFilterRequest) throws {
        _ = try request.invoke(operation: "DeleteSubscriptionFilter", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name.
    public func describeLogGroups(_ input: DescribeLogGroupsRequest) throws -> DescribeLogGroupsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeLogGroups", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the log streams for the specified log group. You can list all the log streams or filter the results by prefix. You can also control how the results are ordered. This operation has a limit of five transactions per second, after which transactions are throttled.
    public func describeLogStreams(_ input: DescribeLogStreamsRequest) throws -> DescribeLogStreamsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeLogStreams", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix. The results are ASCII-sorted by filter name.
    public func describeSubscriptionFilters(_ input: DescribeSubscriptionFiltersRequest) throws -> DescribeSubscriptionFiltersResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeSubscriptionFilters", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified retention policy. Log events do not expire if they belong to log groups without a retention policy.
    public func deleteRetentionPolicy(_ input: DeleteRetentionPolicyRequest) throws {
        _ = try request.invoke(operation: "DeleteRetentionPolicy", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Lists log events from the specified log stream. You can list all the log events or filter using a time range. By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events). If the results include tokens, there are more log events available. You can get additional log events by specifying one of the tokens in a subsequent call.
    public func getLogEvents(_ input: GetLogEventsRequest) throws -> GetLogEventsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetLogEvents", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates or updates a destination. A destination encapsulates a physical resource (such as a Kinesis stream) and enables you to subscribe to a real-time stream of log events of a different account, ingested using PutLogEvents. Currently, the only supported physical resource is a Amazon Kinesis stream belonging to the same account as the destination. A destination controls what is written to its Amazon Kinesis stream through an access policy. By default, PutDestination does not set any access policy with the destination, which means a cross-account user cannot call PutSubscriptionFilter against this destination. To enable this, the destination owner must call PutDestinationPolicy after PutDestination.
    public func putDestination(_ input: PutDestinationRequest) throws -> PutDestinationResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutDestination", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Uploads a batch of log events to the specified log stream. You must include the sequence token obtained from the response of the previous call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token using DescribeLogStreams. The batch of events must satisfy the following constraints:   The maximum batch size is 1,048,576 bytes, and this size is calculated as the sum of all event messages in UTF-8, plus 26 bytes for each log event.   None of the log events in the batch can be more than 2 hours in the future.   None of the log events in the batch can be older than 14 days or the retention period of the log group.   The log events in the batch must be in chronological ordered by their timestamp (the time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC).   The maximum number of log events in a batch is 10,000.   A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.  
    public func putLogEvents(_ input: PutLogEventsRequest) throws -> PutLogEventsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutLogEvents", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the tags for the specified log group. To add tags, use TagLogGroup. To remove tags, use UntagLogGroup.
    public func listTagsLogGroup(_ input: ListTagsLogGroupRequest) throws -> ListTagsLogGroupResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListTagsLogGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists log events from the specified log group. You can list all the log events or filter the results using a filter pattern, a time range, and the name of the log stream. By default, this operation returns as many log events as can fit in 1MB (up to 10,000 log events), or all the events found within the time range that you specify. If the results include a token, then there are more log events available, and you can get additional results by specifying the token in a subsequent call.
    public func filterLogEvents(_ input: FilterLogEventsRequest) throws -> FilterLogEventsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "FilterLogEvents", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Adds or updates the specified tags for the specified log group. To list the tags for a log group, use ListTagsLogGroup. To remove tags, use UntagLogGroup. For more information about tags, see Tag Log Groups in Amazon CloudWatch Logs in the Amazon CloudWatch Logs User Guide.
    public func tagLogGroup(_ input: TagLogGroupRequest) throws {
        _ = try request.invoke(operation: "TagLogGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates a log group with the specified name. You can create up to 5000 log groups per account. You must use the following guidelines when naming a log group:   Log group names must be unique within a region for an AWS account.   Log group names can be between 1 and 512 characters long.   Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), '/' (forward slash), and '.' (period).  
    public func createLogGroup(_ input: CreateLogGroupRequest) throws {
        _ = try request.invoke(operation: "CreateLogGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Cancels the specified export task. The task must be in the PENDING or RUNNING state.
    public func cancelExportTask(_ input: CancelExportTaskRequest) throws {
        _ = try request.invoke(operation: "CancelExportTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Lists the specified export tasks. You can list all your export tasks or filter the results based on task ID or task status.
    public func describeExportTasks(_ input: DescribeExportTasksRequest) throws -> DescribeExportTasksResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeExportTasks", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Sets the retention of the specified log group. A retention policy allows you to configure the number of days you want to retain log events in the specified log group.
    public func putRetentionPolicy(_ input: PutRetentionPolicyRequest) throws {
        _ = try request.invoke(operation: "PutRetentionPolicy", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates or updates a metric filter and associates it with the specified log group. Metric filters allow you to configure rules to extract metric data from log events ingested through PutLogEvents. The maximum number of metric filters that can be associated with a log group is 100.
    public func putMetricFilter(_ input: PutMetricFilterRequest) throws {
        _ = try request.invoke(operation: "PutMetricFilter", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates an export task, which allows you to efficiently export data from a log group to an Amazon S3 bucket. This is an asynchronous call. If all the required information is provided, this operation initiates an export task and responds with the ID of the task. After the task has started, you can use DescribeExportTasks to get the status of the export task. Each account can only have one active (RUNNING or PENDING) export task at a time. To cancel an export task, use CancelExportTask. You can export logs from multiple log groups or multiple time ranges to the same S3 bucket. To separate out log data for each export task, you can specify a prefix that will be used as the Amazon S3 key prefix for all exported objects.
    public func createExportTask(_ input: CreateExportTaskRequest) throws -> CreateExportTaskResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateExportTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified destination, and eventually disables all the subscription filters that publish to it. This operation does not delete the physical resource encapsulated by the destination.
    public func deleteDestination(_ input: DeleteDestinationRequest) throws {
        _ = try request.invoke(operation: "DeleteDestination", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern.
    public func testMetricFilter(_ input: TestMetricFilterRequest) throws -> TestMetricFilterResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "TestMetricFilter", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the specified metric filters. You can list all the metric filters or filter the results by log name, prefix, metric name, and metric namespace. The results are ASCII-sorted by filter name.
    public func describeMetricFilters(_ input: DescribeMetricFiltersRequest) throws -> DescribeMetricFiltersResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeMetricFilters", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Removes the specified tags from the specified log group. To list the tags for a log group, use ListTagsLogGroup. To add tags, use UntagLogGroup.
    public func untagLogGroup(_ input: UntagLogGroupRequest) throws {
        _ = try request.invoke(operation: "UntagLogGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates or updates an access policy associated with an existing destination. An access policy is an IAM policy document that is used to authorize claims to register a subscription filter against a given destination.
    public func putDestinationPolicy(_ input: PutDestinationPolicyRequest) throws {
        _ = try request.invoke(operation: "PutDestinationPolicy", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Deletes the specified metric filter.
    public func deleteMetricFilter(_ input: DeleteMetricFilterRequest) throws {
        _ = try request.invoke(operation: "DeleteMetricFilter", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates or updates a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events ingested through PutLogEvents and have them delivered to a specific destination. Currently, the supported destinations are:   An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination that belongs to a different account, for cross-account delivery.   An Amazon Kinesis Firehose stream that belongs to the same account as the subscription filter, for same-account delivery.   An AWS Lambda function that belongs to the same account as the subscription filter, for same-account delivery.   There can only be one subscription filter associated with a log group.
    public func putSubscriptionFilter(_ input: PutSubscriptionFilterRequest) throws {
        _ = try request.invoke(operation: "PutSubscriptionFilter", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Lists all your destinations. The results are ASCII-sorted by destination name.
    public func describeDestinations(_ input: DescribeDestinationsRequest) throws -> DescribeDestinationsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeDestinations", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try LogsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified log group and permanently deletes all the archived log events associated with the log group.
    public func deleteLogGroup(_ input: DeleteLogGroupRequest) throws {
        _ = try request.invoke(operation: "DeleteLogGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.
    public func deleteLogStream(_ input: DeleteLogStreamRequest) throws {
        _ = try request.invoke(operation: "DeleteLogStream", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }


}