// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Logs {

    public struct CreateLogStreamRequest: Serializable, Initializable {
        /// The name of the log group.
        var logGroupName: String = ""
        /// The name of the log stream.
        var logStreamName: String = ""

        public init() {}

        public init(logGroupName: String, logStreamName: String) {
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
        }

    }

    public struct DescribeDestinationsResponse: Serializable, Initializable {
        var nextToken: String? = nil
        /// The destinations.
        var destinations: [Destination]? = nil

        public init() {}

        public init(nextToken: String? = nil, destinations: [Destination]? = nil) {
            self.nextToken = nextToken
            self.destinations = destinations
        }

    }

    public struct TestMetricFilterResponse: Serializable, Initializable {
        /// The matched events.
        var matches: [MetricFilterMatchRecord]? = nil

        public init() {}

        public init(matches: [MetricFilterMatchRecord]? = nil) {
            self.matches = matches
        }

    }

    public struct LogStream: Serializable, Initializable {
        /// The number of bytes stored.
        var storedBytes: Int64? = nil
        /// The time of the last event, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        var lastEventTimestamp: Int64? = nil
        /// The name of the log stream.
        var logStreamName: String? = nil
        /// The creation time of the stream.
        var creationTime: Int64? = nil
        /// The ingestion time.
        var lastIngestionTime: Int64? = nil
        /// The time of the first event, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        var firstEventTimestamp: Int64? = nil
        /// The sequence token.
        var uploadSequenceToken: String? = nil
        /// The Amazon Resource Name (ARN) of the log stream.
        var arn: String? = nil

        public init() {}

        public init(storedBytes: Int64? = nil, lastEventTimestamp: Int64? = nil, logStreamName: String? = nil, creationTime: Int64? = nil, lastIngestionTime: Int64? = nil, firstEventTimestamp: Int64? = nil, uploadSequenceToken: String? = nil, arn: String? = nil) {
            self.storedBytes = storedBytes
            self.lastEventTimestamp = lastEventTimestamp
            self.logStreamName = logStreamName
            self.creationTime = creationTime
            self.lastIngestionTime = lastIngestionTime
            self.firstEventTimestamp = firstEventTimestamp
            self.uploadSequenceToken = uploadSequenceToken
            self.arn = arn
        }

    }

    public struct InputLogEvent: Serializable, Initializable {
        /// The time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        var timestamp: Int64 = 0
        /// The raw event message.
        var message: String = ""

        public init() {}

        public init(timestamp: Int64, message: String) {
            self.timestamp = timestamp
            self.message = message
        }

    }

    public struct PutLogEventsRequest: Serializable, Initializable {
        /// The log events.
        var logEvents: [InputLogEvent] = []
        /// The sequence token.
        var sequenceToken: String? = nil
        /// The name of the log stream.
        var logStreamName: String = ""
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(logEvents: [InputLogEvent], sequenceToken: String? = nil, logStreamName: String, logGroupName: String) {
            self.logEvents = logEvents
            self.sequenceToken = sequenceToken
            self.logStreamName = logStreamName
            self.logGroupName = logGroupName
        }

    }

    public struct FilteredLogEvent: Serializable, Initializable {
        /// The ID of the event.
        var eventId: String? = nil
        /// The data contained in the log event.
        var message: String? = nil
        /// The time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        var timestamp: Int64? = nil
        /// The name of the log stream this event belongs to.
        var logStreamName: String? = nil
        /// The time the event was ingested.
        var ingestionTime: Int64? = nil

        public init() {}

        public init(eventId: String? = nil, message: String? = nil, timestamp: Int64? = nil, logStreamName: String? = nil, ingestionTime: Int64? = nil) {
            self.eventId = eventId
            self.message = message
            self.timestamp = timestamp
            self.logStreamName = logStreamName
            self.ingestionTime = ingestionTime
        }

    }

    public struct ExportTaskExecutionInfo: Serializable, Initializable {
        /// The creation time of the export task.
        var creationTime: Int64? = nil
        /// The completion time of the export task.
        var completionTime: Int64? = nil

        public init() {}

        public init(creationTime: Int64? = nil, completionTime: Int64? = nil) {
            self.creationTime = creationTime
            self.completionTime = completionTime
        }

    }

    public struct DescribeLogStreamsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        var limit: Int32? = nil
        /// If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.
        var descending: Bool? = nil
        /// The prefix to match. You cannot specify this parameter if orderBy is LastEventTime.
        var logStreamNamePrefix: String? = nil
        /// If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter.
        var orderBy: String? = nil
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(nextToken: String? = nil, limit: Int32? = nil, descending: Bool? = nil, logStreamNamePrefix: String? = nil, orderBy: String? = nil, logGroupName: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.descending = descending
            self.logStreamNamePrefix = logStreamNamePrefix
            self.orderBy = orderBy
            self.logGroupName = logGroupName
        }

    }

    public struct DescribeLogStreamsResponse: Serializable, Initializable {
        /// The log streams.
        var logStreams: [LogStream]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(logStreams: [LogStream]? = nil, nextToken: String? = nil) {
            self.logStreams = logStreams
            self.nextToken = nextToken
        }

    }

    public struct DeleteRetentionPolicyRequest: Serializable, Initializable {
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

    }

    public struct MetricTransformation: Serializable, Initializable {
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        var metricValue: String = ""
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        var defaultValue: Double? = nil
        /// The name of the CloudWatch metric.
        var metricName: String = ""
        /// The namespace of the CloudWatch metric.
        var metricNamespace: String = ""

        public init() {}

        public init(metricValue: String, defaultValue: Double? = nil, metricName: String, metricNamespace: String) {
            self.metricValue = metricValue
            self.defaultValue = defaultValue
            self.metricName = metricName
            self.metricNamespace = metricNamespace
        }

    }

    public struct PutSubscriptionFilterRequest: Serializable, Initializable {
        /// A name for the subscription filter.
        var filterName: String = ""
        /// The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:   An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.   An Amazon Kinesis Firehose stream belonging to the same account as the subscription filter, for same-account delivery.   An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.  
        var destinationArn: String = ""
        /// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        var roleArn: String? = nil
        /// The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream. By default, log data is grouped by log stream. For a more even distribution, you can group log data randomly.
        var distribution: String? = nil
        /// The name of the log group.
        var logGroupName: String = ""
        /// A filter pattern for subscribing to a filtered stream of log events.
        var filterPattern: String = ""

        public init() {}

        public init(filterName: String, destinationArn: String, roleArn: String? = nil, distribution: String? = nil, logGroupName: String, filterPattern: String) {
            self.filterName = filterName
            self.destinationArn = destinationArn
            self.roleArn = roleArn
            self.distribution = distribution
            self.logGroupName = logGroupName
            self.filterPattern = filterPattern
        }

    }

    public struct RejectedLogEventsInfo: Serializable, Initializable {
        /// The expired log events.
        var expiredLogEventEndIndex: Int32? = nil
        /// The log events that are too old.
        var tooOldLogEventEndIndex: Int32? = nil
        /// The log events that are too new.
        var tooNewLogEventStartIndex: Int32? = nil

        public init() {}

        public init(expiredLogEventEndIndex: Int32? = nil, tooOldLogEventEndIndex: Int32? = nil, tooNewLogEventStartIndex: Int32? = nil) {
            self.expiredLogEventEndIndex = expiredLogEventEndIndex
            self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
            self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
        }

    }

    public struct DeleteDestinationRequest: Serializable, Initializable {
        /// The name of the destination.
        var destinationName: String = ""

        public init() {}

        public init(destinationName: String) {
            self.destinationName = destinationName
        }

    }

    public struct DescribeLogGroupsResponse: Serializable, Initializable {
        /// The log groups.
        var logGroups: [LogGroup]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(logGroups: [LogGroup]? = nil, nextToken: String? = nil) {
            self.logGroups = logGroups
            self.nextToken = nextToken
        }

    }

    public struct PutMetricFilterRequest: Serializable, Initializable {
        /// A name for the metric filter.
        var filterName: String = ""
        /// A collection of information needed to define how metric data gets emitted.
        var metricTransformations: [MetricTransformation] = []
        /// The name of the log group.
        var logGroupName: String = ""
        /// A filter pattern for extracting metric data out of ingested log events.
        var filterPattern: String = ""

        public init() {}

        public init(filterName: String, metricTransformations: [MetricTransformation], logGroupName: String, filterPattern: String) {
            self.filterName = filterName
            self.metricTransformations = metricTransformations
            self.logGroupName = logGroupName
            self.filterPattern = filterPattern
        }

    }

    public struct PutDestinationRequest: Serializable, Initializable {
        /// A name for the destination.
        var destinationName: String = ""
        /// The ARN of an IAM role that grants CloudWatch Logs permissions to call Amazon Kinesis PutRecord on the destination stream.
        var roleArn: String = ""
        /// The ARN of an Amazon Kinesis stream to deliver matching log events to.
        var targetArn: String = ""

        public init() {}

        public init(destinationName: String, roleArn: String, targetArn: String) {
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.targetArn = targetArn
        }

    }

    public struct OutputLogEvent: Serializable, Initializable {
        /// The time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        var timestamp: Int64? = nil
        /// The data contained in the log event.
        var message: String? = nil
        /// The time the event was ingested.
        var ingestionTime: Int64? = nil

        public init() {}

        public init(timestamp: Int64? = nil, message: String? = nil, ingestionTime: Int64? = nil) {
            self.timestamp = timestamp
            self.message = message
            self.ingestionTime = ingestionTime
        }

    }

    public struct DeleteLogStreamRequest: Serializable, Initializable {
        /// The name of the log group.
        var logGroupName: String = ""
        /// The name of the log stream.
        var logStreamName: String = ""

        public init() {}

        public init(logGroupName: String, logStreamName: String) {
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
        }

    }

    public struct DescribeSubscriptionFiltersRequest: Serializable, Initializable {
        /// The prefix to match. If you don't specify a value, no prefix filter is applied.
        var filterNamePrefix: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        var limit: Int32? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(filterNamePrefix: String? = nil, limit: Int32? = nil, nextToken: String? = nil, logGroupName: String) {
            self.filterNamePrefix = filterNamePrefix
            self.limit = limit
            self.nextToken = nextToken
            self.logGroupName = logGroupName
        }

    }

    public struct DescribeLogGroupsRequest: Serializable, Initializable {
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        var limit: Int32? = nil
        /// The prefix to match.
        var logGroupNamePrefix: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil

        public init() {}

        public init(limit: Int32? = nil, logGroupNamePrefix: String? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.logGroupNamePrefix = logGroupNamePrefix
            self.nextToken = nextToken
        }

    }

    public struct DescribeMetricFiltersRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The prefix to match.
        var filterNamePrefix: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        var limit: Int32? = nil
        /// The name of the log group.
        var logGroupName: String? = nil
        /// The name of the CloudWatch metric.
        var metricName: String? = nil
        /// The namespace of the CloudWatch metric.
        var metricNamespace: String? = nil

        public init() {}

        public init(nextToken: String? = nil, filterNamePrefix: String? = nil, limit: Int32? = nil, logGroupName: String? = nil, metricName: String? = nil, metricNamespace: String? = nil) {
            self.nextToken = nextToken
            self.filterNamePrefix = filterNamePrefix
            self.limit = limit
            self.logGroupName = logGroupName
            self.metricName = metricName
            self.metricNamespace = metricNamespace
        }

    }

    public struct DeleteSubscriptionFilterRequest: Serializable, Initializable {
        /// The name of the subscription filter.
        var filterName: String = ""
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(filterName: String, logGroupName: String) {
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

    }

    public struct DescribeExportTasksRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
        var statusCode: String? = nil
        /// The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.
        var taskId: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        var limit: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, statusCode: String? = nil, taskId: String? = nil, limit: Int32? = nil) {
            self.nextToken = nextToken
            self.statusCode = statusCode
            self.taskId = taskId
            self.limit = limit
        }

    }

    public struct CreateExportTaskRequest: Serializable, Initializable {
        /// The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.
        var destination: String = ""
        /// The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs.
        var destinationPrefix: String? = nil
        /// The start time of the range for the request, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.
        var from: Int64 = 0
        /// The name of the export task.
        var taskName: String? = nil
        /// The name of the log group.
        var logGroupName: String = ""
        /// The end time of the range for the request, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        var to: Int64 = 0
        /// Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
        var logStreamNamePrefix: String? = nil

        public init() {}

        public init(destination: String, destinationPrefix: String? = nil, from: Int64, taskName: String? = nil, logGroupName: String, to: Int64, logStreamNamePrefix: String? = nil) {
            self.destination = destination
            self.destinationPrefix = destinationPrefix
            self.from = from
            self.taskName = taskName
            self.logGroupName = logGroupName
            self.to = to
            self.logStreamNamePrefix = logStreamNamePrefix
        }

    }

    public struct MetricFilter: Serializable, Initializable {
        /// The metric transformations.
        var metricTransformations: [MetricTransformation]? = nil
        /// The name of the metric filter.
        var filterName: String? = nil
        /// The name of the log group.
        var logGroupName: String? = nil
        /// The creation time of the metric filter.
        var creationTime: Int64? = nil
        var filterPattern: String? = nil

        public init() {}

        public init(metricTransformations: [MetricTransformation]? = nil, filterName: String? = nil, logGroupName: String? = nil, creationTime: Int64? = nil, filterPattern: String? = nil) {
            self.metricTransformations = metricTransformations
            self.filterName = filterName
            self.logGroupName = logGroupName
            self.creationTime = creationTime
            self.filterPattern = filterPattern
        }

    }

    public struct TestMetricFilterRequest: Serializable, Initializable {
        var filterPattern: String = ""
        /// The log event messages to test.
        var logEventMessages: [String] = []

        public init() {}

        public init(filterPattern: String, logEventMessages: [String]) {
            self.filterPattern = filterPattern
            self.logEventMessages = logEventMessages
        }

    }

    public struct DeleteLogGroupRequest: Serializable, Initializable {
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

    }

    public struct GetLogEventsResponse: Serializable, Initializable {
        /// The token for the next set of items in the forward direction. The token expires after 24 hours.
        var nextForwardToken: String? = nil
        /// The token for the next set of items in the backward direction. The token expires after 24 hours.
        var nextBackwardToken: String? = nil
        /// The events.
        var events: [OutputLogEvent]? = nil

        public init() {}

        public init(nextForwardToken: String? = nil, nextBackwardToken: String? = nil, events: [OutputLogEvent]? = nil) {
            self.nextForwardToken = nextForwardToken
            self.nextBackwardToken = nextBackwardToken
            self.events = events
        }

    }

    public struct ExportTaskStatus: Serializable, Initializable {
        /// The status code of the export task.
        var code: String? = nil
        /// The status message related to the status code.
        var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct Destination: Serializable, Initializable {
        /// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
        var accessPolicy: String? = nil
        /// The name of the destination.
        var destinationName: String? = nil
        /// A role for impersonation, used when delivering log events to the target.
        var roleArn: String? = nil
        /// The creation time of the destination.
        var creationTime: Int64? = nil
        /// The Amazon Resource Name (ARN) of the physical target where the log events will be delivered (for example, a Kinesis stream).
        var targetArn: String? = nil
        /// The ARN of this destination.
        var arn: String? = nil

        public init() {}

        public init(accessPolicy: String? = nil, destinationName: String? = nil, roleArn: String? = nil, creationTime: Int64? = nil, targetArn: String? = nil, arn: String? = nil) {
            self.accessPolicy = accessPolicy
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.creationTime = creationTime
            self.targetArn = targetArn
            self.arn = arn
        }

    }

    public struct CreateLogGroupRequest: Serializable, Initializable {
        /// The key-value pairs to use for the tags.
        var tags: [String: String]? = nil
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(tags: [String: String]? = nil, logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

    }

    public struct DescribeExportTasksResponse: Serializable, Initializable {
        var nextToken: String? = nil
        /// The export tasks.
        var exportTasks: [ExportTask]? = nil

        public init() {}

        public init(nextToken: String? = nil, exportTasks: [ExportTask]? = nil) {
            self.nextToken = nextToken
            self.exportTasks = exportTasks
        }

    }

    public struct CancelExportTaskRequest: Serializable, Initializable {
        /// The ID of the export task.
        var taskId: String = ""

        public init() {}

        public init(taskId: String) {
            self.taskId = taskId
        }

    }

    public struct UntagLogGroupRequest: Serializable, Initializable {
        /// The tag keys. The corresponding tags are removed from the log group.
        var tags: [String] = []
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(tags: [String], logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

    }

    public struct ListTagsLogGroupResponse: Serializable, Initializable {
        /// The tags.
        var tags: [String: String]? = nil

        public init() {}

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

    }

    public struct DeleteMetricFilterRequest: Serializable, Initializable {
        /// The name of the metric filter.
        var filterName: String = ""
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(filterName: String, logGroupName: String) {
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

    }

    public struct LogGroup: Serializable, Initializable {
        /// The number of bytes stored.
        var storedBytes: Int64? = nil
        /// The Amazon Resource Name (ARN) of the log group.
        var arn: String? = nil
        /// The name of the log group.
        var logGroupName: String? = nil
        /// The creation time of the log group.
        var creationTime: Int64? = nil
        var retentionInDays: Int32? = nil
        /// The number of metric filters.
        var metricFilterCount: Int32? = nil

        public init() {}

        public init(storedBytes: Int64? = nil, arn: String? = nil, logGroupName: String? = nil, creationTime: Int64? = nil, retentionInDays: Int32? = nil, metricFilterCount: Int32? = nil) {
            self.storedBytes = storedBytes
            self.arn = arn
            self.logGroupName = logGroupName
            self.creationTime = creationTime
            self.retentionInDays = retentionInDays
            self.metricFilterCount = metricFilterCount
        }

    }

    public struct TagLogGroupRequest: Serializable, Initializable {
        /// The key-value pairs to use for the tags.
        var tags: [String: String] = [:]
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(tags: [String: String], logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

    }

    public struct DescribeSubscriptionFiltersResponse: Serializable, Initializable {
        /// The subscription filters.
        var subscriptionFilters: [SubscriptionFilter]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(subscriptionFilters: [SubscriptionFilter]? = nil, nextToken: String? = nil) {
            self.subscriptionFilters = subscriptionFilters
            self.nextToken = nextToken
        }

    }

    public struct GetLogEventsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of log events returned. If you don't specify a value, the maximum is as many log events as can fit in a response size of 1MB, up to 10,000 log events.
        var limit: Int32? = nil
        /// The name of the log stream.
        var logStreamName: String = ""
        /// If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false.
        var startFromHead: Bool? = nil
        /// The end of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not included.
        var endTime: Int64? = nil
        /// The name of the log group.
        var logGroupName: String = ""
        /// The start of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not included.
        var startTime: Int64? = nil

        public init() {}

        public init(nextToken: String? = nil, limit: Int32? = nil, logStreamName: String, startFromHead: Bool? = nil, endTime: Int64? = nil, logGroupName: String, startTime: Int64? = nil) {
            self.nextToken = nextToken
            self.limit = limit
            self.logStreamName = logStreamName
            self.startFromHead = startFromHead
            self.endTime = endTime
            self.logGroupName = logGroupName
            self.startTime = startTime
        }

    }

    public struct FilterLogEventsResponse: Serializable, Initializable {
        /// Indicates which log streams have been searched and whether each has been searched completely.
        var searchedLogStreams: [SearchedLogStream]? = nil
        /// The matched events.
        var events: [FilteredLogEvent]? = nil
        /// The token to use when requesting the next set of items. The token expires after 24 hours.
        var nextToken: String? = nil

        public init() {}

        public init(searchedLogStreams: [SearchedLogStream]? = nil, events: [FilteredLogEvent]? = nil, nextToken: String? = nil) {
            self.searchedLogStreams = searchedLogStreams
            self.events = events
            self.nextToken = nextToken
        }

    }

    public struct PutDestinationPolicyRequest: Serializable, Initializable {
        /// An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination.
        var accessPolicy: String = ""
        /// A name for an existing destination.
        var destinationName: String = ""

        public init() {}

        public init(accessPolicy: String, destinationName: String) {
            self.accessPolicy = accessPolicy
            self.destinationName = destinationName
        }

    }

    public struct ListTagsLogGroupRequest: Serializable, Initializable {
        /// The name of the log group.
        var logGroupName: String = ""

        public init() {}

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

    }

    public struct SearchedLogStream: Serializable, Initializable {
        /// The name of the log stream.
        var logStreamName: String? = nil
        /// Indicates whether all the events in this log stream were searched.
        var searchedCompletely: Bool? = nil

        public init() {}

        public init(logStreamName: String? = nil, searchedCompletely: Bool? = nil) {
            self.logStreamName = logStreamName
            self.searchedCompletely = searchedCompletely
        }

    }

    public struct PutRetentionPolicyRequest: Serializable, Initializable {
        /// The name of the log group.
        var logGroupName: String = ""
        var retentionInDays: Int32 = 0

        public init() {}

        public init(logGroupName: String, retentionInDays: Int32) {
            self.logGroupName = logGroupName
            self.retentionInDays = retentionInDays
        }

    }

    public struct FilterLogEventsRequest: Serializable, Initializable {
        /// The token for the next set of events to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of events to return. The default is 10,000 events.
        var limit: Int32? = nil
        /// The filter pattern to use. If not provided, all the events are matched.
        var filterPattern: String? = nil
        /// The end of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
        var endTime: Int64? = nil
        /// The name of the log group.
        var logGroupName: String = ""
        /// Optional list of log stream names.
        var logStreamNames: [String]? = nil
        /// The start of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp prior to this time are not returned.
        var startTime: Int64? = nil
        /// If the value is true, the operation makes a best effort to provide responses that contain events from multiple log streams within the log group interleaved in a single response. If the value is false all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. The default is false.
        var interleaved: Bool? = nil

        public init() {}

        public init(nextToken: String? = nil, limit: Int32? = nil, filterPattern: String? = nil, endTime: Int64? = nil, logGroupName: String, logStreamNames: [String]? = nil, startTime: Int64? = nil, interleaved: Bool? = nil) {
            self.nextToken = nextToken
            self.limit = limit
            self.filterPattern = filterPattern
            self.endTime = endTime
            self.logGroupName = logGroupName
            self.logStreamNames = logStreamNames
            self.startTime = startTime
            self.interleaved = interleaved
        }

    }

    public struct CreateExportTaskResponse: Serializable, Initializable {
        /// The ID of the export task.
        var taskId: String? = nil

        public init() {}

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

    }

    public struct MetricFilterMatchRecord: Serializable, Initializable {
        /// The values extracted from the event data by the filter.
        var extractedValues: [String: String]? = nil
        /// The event number.
        var eventNumber: Int64? = nil
        /// The raw event data.
        var eventMessage: String? = nil

        public init() {}

        public init(extractedValues: [String: String]? = nil, eventNumber: Int64? = nil, eventMessage: String? = nil) {
            self.extractedValues = extractedValues
            self.eventNumber = eventNumber
            self.eventMessage = eventMessage
        }

    }

    public struct PutDestinationResponse: Serializable, Initializable {
        /// The destination.
        var destination: Destination? = nil

        public init() {}

        public init(destination: Destination? = nil) {
            self.destination = destination
        }

    }

    public struct SubscriptionFilter: Serializable, Initializable {
        /// The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream.
        var distribution: String? = nil
        var roleArn: String? = nil
        /// The Amazon Resource Name (ARN) of the destination.
        var destinationArn: String? = nil
        /// The creation time of the subscription filter.
        var creationTime: Int64? = nil
        var filterPattern: String? = nil
        /// The name of the subscription filter.
        var filterName: String? = nil
        /// The name of the log group.
        var logGroupName: String? = nil

        public init() {}

        public init(distribution: String? = nil, roleArn: String? = nil, destinationArn: String? = nil, creationTime: Int64? = nil, filterPattern: String? = nil, filterName: String? = nil, logGroupName: String? = nil) {
            self.distribution = distribution
            self.roleArn = roleArn
            self.destinationArn = destinationArn
            self.creationTime = creationTime
            self.filterPattern = filterPattern
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

    }

    public struct DescribeMetricFiltersResponse: Serializable, Initializable {
        var nextToken: String? = nil
        /// The metric filters.
        var metricFilters: [MetricFilter]? = nil

        public init() {}

        public init(nextToken: String? = nil, metricFilters: [MetricFilter]? = nil) {
            self.nextToken = nextToken
            self.metricFilters = metricFilters
        }

    }

    public struct ExportTask: Serializable, Initializable {
        /// The status of the export task.
        var status: ExportTaskStatus? = nil
        /// The ID of the export task.
        var taskId: String? = nil
        /// The name of Amazon S3 bucket to which the log data was exported.
        var destination: String? = nil
        /// The prefix that was used as the start of Amazon S3 key for every object exported.
        var destinationPrefix: String? = nil
        /// The start time, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp prior to this time are not exported.
        var from: Int64? = nil
        /// The name of the export task.
        var taskName: String? = nil
        /// Execution info about the export task.
        var executionInfo: ExportTaskExecutionInfo? = nil
        /// The name of the log group from which logs data was exported.
        var logGroupName: String? = nil
        /// The end time, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        var to: Int64? = nil

        public init() {}

        public init(status: ExportTaskStatus? = nil, taskId: String? = nil, destination: String? = nil, destinationPrefix: String? = nil, from: Int64? = nil, taskName: String? = nil, executionInfo: ExportTaskExecutionInfo? = nil, logGroupName: String? = nil, to: Int64? = nil) {
            self.status = status
            self.taskId = taskId
            self.destination = destination
            self.destinationPrefix = destinationPrefix
            self.from = from
            self.taskName = taskName
            self.executionInfo = executionInfo
            self.logGroupName = logGroupName
            self.to = to
        }

    }

    public struct PutLogEventsResponse: Serializable, Initializable {
        /// The rejected events.
        var rejectedLogEventsInfo: RejectedLogEventsInfo? = nil
        /// The next sequence token.
        var nextSequenceToken: String? = nil

        public init() {}

        public init(rejectedLogEventsInfo: RejectedLogEventsInfo? = nil, nextSequenceToken: String? = nil) {
            self.rejectedLogEventsInfo = rejectedLogEventsInfo
            self.nextSequenceToken = nextSequenceToken
        }

    }

    public struct DescribeDestinationsRequest: Serializable, Initializable {
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        var limit: Int32? = nil
        /// The prefix to match. If you don't specify a value, no prefix filter is applied.
        var destinationNamePrefix: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil

        public init() {}

        public init(limit: Int32? = nil, destinationNamePrefix: String? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.destinationNamePrefix = destinationNamePrefix
            self.nextToken = nextToken
        }

    }

}