// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Meteringmarketplace {

    public struct UsageRecord: Serializable, Initializable {
        /// The CustomerIdentifier is obtained through the ResolveCustomer operation and represents an individual buyer in your application.
        var customerIdentifier: String = ""
        /// Timestamp of the hour, recorded in UTC. The seconds and milliseconds portions of the timestamp will be ignored. Your application can meter usage for up to one hour in the past.
        var timestamp: Date = Date()
        /// During the process of registering a product on AWS Marketplace, up to eight dimensions are specified. These represent different units of value in your application.
        var dimension: String = ""
        /// The quantity of usage consumed by the customer for the given dimension and time.
        var quantity: Int32 = 0

        public init() {}

        public init(customerIdentifier: String, timestamp: Date, dimension: String, quantity: Int32) {
            self.customerIdentifier = customerIdentifier
            self.timestamp = timestamp
            self.dimension = dimension
            self.quantity = quantity
        }

    }

    public struct ResolveCustomerRequest: Serializable, Initializable {
        /// When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a CustomerIdentifier and product code.
        var registrationToken: String = ""

        public init() {}

        public init(registrationToken: String) {
            self.registrationToken = registrationToken
        }

    }

    public struct MeterUsageRequest: Serializable, Initializable {
        /// Timestamp of the hour, recorded in UTC. The seconds and milliseconds portions of the timestamp will be ignored.
        var timestamp: Date = Date()
        /// Checks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns DryRunOperation; otherwise, it returns UnauthorizedException.
        var dryRun: Bool = false
        /// It will be one of the fcp dimension name provided during the publishing of the product.
        var usageDimension: String = ""
        /// Consumption value for the hour.
        var usageQuantity: Int32 = 0
        /// Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.
        var productCode: String = ""

        public init() {}

        public init(timestamp: Date, dryRun: Bool, usageDimension: String, usageQuantity: Int32, productCode: String) {
            self.timestamp = timestamp
            self.dryRun = dryRun
            self.usageDimension = usageDimension
            self.usageQuantity = usageQuantity
            self.productCode = productCode
        }

    }

    public struct BatchMeterUsageResult: Serializable, Initializable {
        /// Contains all UsageRecords that were not processed by BatchMeterUsage. This is a list of UsageRecords. You can retry the failed request by making another BatchMeterUsage call with this list as input in the BatchMeterUsageRequest.
        var unprocessedRecords: [UsageRecord]? = nil
        /// Contains all UsageRecords processed by BatchMeterUsage. These records were either honored by AWS Marketplace Metering Service or were invalid.
        var results: [UsageRecordResult]? = nil

        public init() {}

        public init(unprocessedRecords: [UsageRecord]? = nil, results: [UsageRecordResult]? = nil) {
            self.unprocessedRecords = unprocessedRecords
            self.results = results
        }

    }

    public struct ResolveCustomerResult: Serializable, Initializable {
        /// The CustomerIdentifier is used to identify an individual customer in your application. Calls to BatchMeterUsage require CustomerIdentifiers for each UsageRecord.
        var customerIdentifier: String? = nil
        /// The product code is returned to confirm that the buyer is registering for your product. Subsequent BatchMeterUsage calls should be made using this product code.
        var productCode: String? = nil

        public init() {}

        public init(customerIdentifier: String? = nil, productCode: String? = nil) {
            self.customerIdentifier = customerIdentifier
            self.productCode = productCode
        }

    }

    public struct MeterUsageResult: Serializable, Initializable {
        var meteringRecordId: String? = nil

        public init() {}

        public init(meteringRecordId: String? = nil) {
            self.meteringRecordId = meteringRecordId
        }

    }

    public struct BatchMeterUsageRequest: Serializable, Initializable {
        /// Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.
        var productCode: String = ""
        /// The set of UsageRecords to submit. BatchMeterUsage accepts up to 25 UsageRecords at a time.
        var usageRecords: [UsageRecord] = []

        public init() {}

        public init(productCode: String, usageRecords: [UsageRecord]) {
            self.productCode = productCode
            self.usageRecords = usageRecords
        }

    }

    public struct UsageRecordResult: Serializable, Initializable {
        /// The MeteringRecordId is a unique identifier for this metering event.
        var meteringRecordId: String? = nil
        /// The UsageRecordResult Status indicates the status of an individual UsageRecord processed by BatchMeterUsage.    Success- The UsageRecord was accepted and honored by BatchMeterUsage.    CustomerNotSubscribed- The CustomerIdentifier specified is not subscribed to your product. The UsageRecord was not honored. Future UsageRecords for this customer will fail until the customer subscribes to your product.    DuplicateRecord- Indicates that the UsageRecord was invalid and not honored. A previously metered UsageRecord had the same customer, dimension, and time, but a different quantity.  
        var status: String? = nil
        /// The UsageRecord that was part of the BatchMeterUsage request.
        var usageRecord: UsageRecord? = nil

        public init() {}

        public init(meteringRecordId: String? = nil, status: String? = nil, usageRecord: UsageRecord? = nil) {
            self.meteringRecordId = meteringRecordId
            self.status = status
            self.usageRecord = usageRecord
        }

    }

}