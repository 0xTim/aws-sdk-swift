// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Codebuild {

    public struct ListProjectsOutput: Serializable, Initializable {
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        var nextToken: String? = nil
        /// The list of build project names, with each build project name representing a single build project.
        var projects: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, projects: [String]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

    }

    public struct StopBuildOutput: Serializable, Initializable {
        /// Information about the build.
        var build: Build? = nil

        public init() {}

        public init(build: Build? = nil) {
            self.build = build
        }

    }

    public struct StopBuildInput: Serializable, Initializable {
        /// The ID of the build.
        var id: String = ""

        public init() {}

        public init(id: String) {
            self.id = id
        }

    }

    public struct BatchGetProjectsOutput: Serializable, Initializable {
        /// Information about the requested build projects.
        var projects: [Project]? = nil
        /// The names of build projects for which information could not be found.
        var projectsNotFound: [String]? = nil

        public init() {}

        public init(projects: [Project]? = nil, projectsNotFound: [String]? = nil) {
            self.projects = projects
            self.projectsNotFound = projectsNotFound
        }

    }

    public struct Project: Serializable, Initializable {
        /// The name of the build project.
        var name: String? = nil
        /// Information about the build input source code for this build project.
        var source: ProjectSource? = nil
        /// When the build project's settings were last modified, expressed in Unix time format.
        var lastModified: Date? = nil
        /// How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed. The default is 60 minutes.
        var timeoutInMinutes: Int32? = nil
        /// When the build project was created, expressed in Unix time format.
        var created: Date? = nil
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. This is expressed either as the CMK's Amazon Resource Name (ARN) or, if specified, the CMK's alias (using the format alias/alias-name ).
        var encryptionKey: String? = nil
        /// A description that makes the build project easy to identify.
        var description: String? = nil
        /// Information about the build output artifacts for the build project.
        var artifacts: ProjectArtifacts? = nil
        /// Information about the build environment for this build project.
        var environment: ProjectEnvironment? = nil
        /// The tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        var tags: [Tag]? = nil
        /// The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        var serviceRole: String? = nil
        /// The Amazon Resource Name (ARN) of the build project.
        var arn: String? = nil

        public init() {}

        public init(name: String? = nil, source: ProjectSource? = nil, lastModified: Date? = nil, timeoutInMinutes: Int32? = nil, created: Date? = nil, encryptionKey: String? = nil, description: String? = nil, artifacts: ProjectArtifacts? = nil, environment: ProjectEnvironment? = nil, tags: [Tag]? = nil, serviceRole: String? = nil, arn: String? = nil) {
            self.name = name
            self.source = source
            self.lastModified = lastModified
            self.timeoutInMinutes = timeoutInMinutes
            self.created = created
            self.encryptionKey = encryptionKey
            self.description = description
            self.artifacts = artifacts
            self.environment = environment
            self.tags = tags
            self.serviceRole = serviceRole
            self.arn = arn
        }

    }

    public struct BuildArtifacts: Serializable, Initializable {
        /// The MD5 hash of the build artifact. You can use this hash along with a checksum tool to confirm both file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP. 
        var md5sum: String? = nil
        /// Information about the location of the build artifacts.
        var location: String? = nil
        /// The SHA-256 hash of the build artifact. You can use this hash along with a checksum tool to confirm both file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP. 
        var sha256sum: String? = nil

        public init() {}

        public init(md5sum: String? = nil, location: String? = nil, sha256sum: String? = nil) {
            self.md5sum = md5sum
            self.location = location
            self.sha256sum = sha256sum
        }

    }

    public struct BuildPhase: Serializable, Initializable {
        /// How long, in seconds, between the starting and ending times of the build's phase.
        var durationInSeconds: Int64? = nil
        /// When the build phase ended, expressed in Unix time format.
        var endTime: Date? = nil
        /// When the build phase started, expressed in Unix time format.
        var startTime: Date? = nil
        /// Additional information about a build phase, especially to help troubleshoot a failed build.
        var contexts: [PhaseContext]? = nil
        /// The current status of the build phase. Valid values include:    FAILED: The build phase failed.    FAULT: The build phase faulted.    IN_PROGRESS: The build phase is still in progress.    STOPPED: The build phase stopped.    SUCCEEDED: The build phase succeeded.    TIMED_OUT: The build phase timed out.  
        var phaseStatus: String? = nil
        /// The name of the build phase. Valid values include:    BUILD: Core build activities typically occur in this build phase.    COMPLETED: The build has been completed.    DOWNLOAD_SOURCE: Source code is being downloaded in this build phase.    FINALIZING: The build process is completing in this build phase.    INSTALL: Installation activities typically occur in this build phase.    POST_BUILD: Post-build activities typically occur in this build phase.    PRE_BUILD: Pre-build activities typically occur in this build phase.    PROVISIONING: The build environment is being set up.    SUBMITTED: The build has been submitted.    UPLOAD_ARTIFACTS: Build output artifacts are being uploaded to the output location.  
        var phaseType: String? = nil

        public init() {}

        public init(durationInSeconds: Int64? = nil, endTime: Date? = nil, startTime: Date? = nil, contexts: [PhaseContext]? = nil, phaseStatus: String? = nil, phaseType: String? = nil) {
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.startTime = startTime
            self.contexts = contexts
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
        }

    }

    public struct LogsLocation: Serializable, Initializable {
        /// The URL to an individual build log in Amazon CloudWatch Logs.
        var deepLink: String? = nil
        /// The name of the Amazon CloudWatch Logs group for the build logs.
        var groupName: String? = nil
        /// The name of the Amazon CloudWatch Logs stream for the build logs.
        var streamName: String? = nil

        public init() {}

        public init(deepLink: String? = nil, groupName: String? = nil, streamName: String? = nil) {
            self.deepLink = deepLink
            self.groupName = groupName
            self.streamName = streamName
        }

    }

    public struct SourceAuth: Serializable, Initializable {
        /// The authorization type to use. The only valid value is OAUTH, which represents the OAuth authorization type.
        var type: String = ""
        /// The resource value that applies to the specified authorization type.
        var resource: String? = nil

        public init() {}

        public init(type: String, resource: String? = nil) {
            self.type = type
            self.resource = resource
        }

    }

    public struct EnvironmentPlatform: Serializable, Initializable {
        /// The list of programming languages that are available for the specified platform.
        var languages: [EnvironmentLanguage]? = nil
        /// The platform's name.
        var platform: String? = nil

        public init() {}

        public init(languages: [EnvironmentLanguage]? = nil, platform: String? = nil) {
            self.languages = languages
            self.platform = platform
        }

    }

    public struct Build: Serializable, Initializable {
        /// Information about all previous build phases that are completed and information about any current build phase that is not yet complete.
        var phases: [BuildPhase]? = nil
        /// Information about the source code to be built.
        var source: ProjectSource? = nil
        /// How long, in minutes, for AWS CodeBuild to wait before timing out this build if it does not get marked as completed.
        var timeoutInMinutes: Int32? = nil
        /// Any version identifier for the version of the source code to be built.
        var sourceVersion: String? = nil
        /// The current build phase.
        var currentPhase: String? = nil
        /// Information about the output artifacts for the build.
        var artifacts: BuildArtifacts? = nil
        /// The current status of the build. Valid values include:    FAILED: The build failed.    FAULT: The build faulted.    IN_PROGRESS: The build is still in progress.    STOPPED: The build stopped.    SUCCEEDED: The build succeeded.    TIMED_OUT: The build timed out.  
        var buildStatus: String? = nil
        /// The Amazon Resource Name (ARN) of the build.
        var arn: String? = nil
        /// The entity that started the build. Valid values include:   If AWS CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).   If an AWS Identity and Access Management (IAM) user started the build, the user's name (for example MyUserName).   If the Jenkins plugin for AWS CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.  
        var initiator: String? = nil
        /// Information about the build environment for this build.
        var environment: ProjectEnvironment? = nil
        /// The unique ID for the build.
        var id: String? = nil
        /// The name of the build project.
        var projectName: String? = nil
        /// Whether the build has finished. True if completed; otherwise, false.
        var buildComplete: Bool? = nil
        /// When the build process ended, expressed in Unix time format.
        var endTime: Date? = nil
        /// Information about the build's logs in Amazon CloudWatch Logs.
        var logs: LogsLocation? = nil
        /// When the build process started, expressed in Unix time format.
        var startTime: Date? = nil

        public init() {}

        public init(phases: [BuildPhase]? = nil, source: ProjectSource? = nil, timeoutInMinutes: Int32? = nil, sourceVersion: String? = nil, currentPhase: String? = nil, artifacts: BuildArtifacts? = nil, buildStatus: String? = nil, arn: String? = nil, initiator: String? = nil, environment: ProjectEnvironment? = nil, id: String? = nil, projectName: String? = nil, buildComplete: Bool? = nil, endTime: Date? = nil, logs: LogsLocation? = nil, startTime: Date? = nil) {
            self.phases = phases
            self.source = source
            self.timeoutInMinutes = timeoutInMinutes
            self.sourceVersion = sourceVersion
            self.currentPhase = currentPhase
            self.artifacts = artifacts
            self.buildStatus = buildStatus
            self.arn = arn
            self.initiator = initiator
            self.environment = environment
            self.id = id
            self.projectName = projectName
            self.buildComplete = buildComplete
            self.endTime = endTime
            self.logs = logs
            self.startTime = startTime
        }

    }

    public struct DeleteProjectInput: Serializable, Initializable {
        /// The name of the build project.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct DeleteProjectOutput: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateProjectOutput: Serializable, Initializable {
        /// Information about the build project that was changed.
        var project: Project? = nil

        public init() {}

        public init(project: Project? = nil) {
            self.project = project
        }

    }

    public struct ProjectArtifacts: Serializable, Initializable {
        /// Along with path and namespaceType, the pattern that AWS CodeBuild will use to name and store the output artifact, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, this is the name of the output artifact object.   For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact would be stored in MyArtifacts/build-ID/MyArtifact.zip.
        var name: String? = nil
        /// Information about the build output artifact location, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output locations instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, this is the name of the output bucket.  
        var location: String? = nil
        /// Along with namespaceType and name, the pattern that AWS CodeBuild will use to name and store the output artifact, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, this is the path to the output artifact. If path is not specified, then path will not be used.   For example, if path is set to MyArtifacts, namespaceType is set to NONE, and name is set to MyArtifact.zip, then the output artifact would be stored in the output bucket at MyArtifacts/MyArtifact.zip.
        var path: String? = nil
        /// Along with path and name, the pattern that AWS CodeBuild will use to determine the name and location to store the output artifact, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, then valid values include:    BUILD_ID: Include the build ID in the location of the build output artifact.    NONE: Do not include the build ID. This is the default if namespaceType is not specified.     For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact would be stored in MyArtifacts/build-ID/MyArtifact.zip.
        var namespaceType: String? = nil
        /// The type of build output artifact to create, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output artifacts instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, valid values include:    NONE: AWS CodeBuild will create in the output bucket a folder containing the build output. This is the default if packaging is not specified.    ZIP: AWS CodeBuild will create in the output bucket a ZIP file containing the build output.    
        var packaging: String? = nil
        /// The type of build output artifact. Valid values include:    CODEPIPELINE: The build project will have build output generated through AWS CodePipeline.    NO_ARTIFACTS: The build project will not produce any build output.    S3: The build project will store build output in Amazon Simple Storage Service (Amazon S3).  
        var type: String = ""

        public init() {}

        public init(name: String? = nil, location: String? = nil, path: String? = nil, namespaceType: String? = nil, packaging: String? = nil, type: String) {
            self.name = name
            self.location = location
            self.path = path
            self.namespaceType = namespaceType
            self.packaging = packaging
            self.type = type
        }

    }

    public struct ListCuratedEnvironmentImagesInput: Serializable, Initializable {

        public init() {}

    }

    public struct BatchGetBuildsOutput: Serializable, Initializable {
        /// Information about the requested builds.
        var builds: [Build]? = nil
        /// The IDs of builds for which information could not be found.
        var buildsNotFound: [String]? = nil

        public init() {}

        public init(builds: [Build]? = nil, buildsNotFound: [String]? = nil) {
            self.builds = builds
            self.buildsNotFound = buildsNotFound
        }

    }

    public struct EnvironmentLanguage: Serializable, Initializable {
        /// The programming language for the Docker images.
        var language: String? = nil
        /// The list of Docker images that are related by the specified programming language.
        var images: [EnvironmentImage]? = nil

        public init() {}

        public init(language: String? = nil, images: [EnvironmentImage]? = nil) {
            self.language = language
            self.images = images
        }

    }

    public struct StartBuildOutput: Serializable, Initializable {
        /// Information about the build to be run.
        var build: Build? = nil

        public init() {}

        public init(build: Build? = nil) {
            self.build = build
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The tag's key.
        var key: String? = nil
        /// The tag's value.
        var value: String? = nil

        public init() {}

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

    }

    public struct ListBuildsOutput: Serializable, Initializable {
        /// A list of build IDs, with each build ID representing a single build.
        var ids: [String]? = nil
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        var nextToken: String? = nil

        public init() {}

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

    }

    public struct ListBuildsForProjectOutput: Serializable, Initializable {
        /// A list of build IDs for the specified build project, with each build ID representing a single build.
        var ids: [String]? = nil
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        var nextToken: String? = nil

        public init() {}

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

    }

    public struct ProjectEnvironment: Serializable, Initializable {
        /// Information about the compute resources the build project will use. Available values include:    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.    BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.    BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds.  
        var computeType: String = ""
        /// A set of environment variables to make available to builds for this build project.
        var environmentVariables: [EnvironmentVariable]? = nil
        /// The type of build environment to use for related builds.
        var type: String = ""
        /// The ID of the Docker image to use for this build project.
        var image: String = ""

        public init() {}

        public init(computeType: String, environmentVariables: [EnvironmentVariable]? = nil, type: String, image: String) {
            self.computeType = computeType
            self.environmentVariables = environmentVariables
            self.type = type
            self.image = image
        }

    }

    public struct ListBuildsInput: Serializable, Initializable {
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        var nextToken: String? = nil
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.  
        var sortOrder: String? = nil

        public init() {}

        public init(nextToken: String? = nil, sortOrder: String? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

    }

    public struct BatchGetProjectsInput: Serializable, Initializable {
        /// The names of the build projects.
        var names: [String] = []

        public init() {}

        public init(names: [String]) {
            self.names = names
        }

    }

    public struct ListBuildsForProjectInput: Serializable, Initializable {
        /// The name of the build project.
        var projectName: String = ""
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        var nextToken: String? = nil
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.  
        var sortOrder: String? = nil

        public init() {}

        public init(projectName: String, nextToken: String? = nil, sortOrder: String? = nil) {
            self.projectName = projectName
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

    }

    public struct UpdateProjectInput: Serializable, Initializable {
        /// The name of the build project.  You cannot change a build project's name. 
        var name: String = ""
        /// Information to be changed about the build input source code for the build project.
        var source: ProjectSource? = nil
        /// Information to be changed about the build environment for the build project.
        var environment: ProjectEnvironment? = nil
        /// The replacement value in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed.
        var timeoutInMinutes: Int32? = nil
        /// The replacement AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. You can specify either the CMK's Amazon Resource Name (ARN) or, if available, the CMK's alias (using the format alias/alias-name ).
        var encryptionKey: String? = nil
        /// A new or replacement description of the build project.
        var description: String? = nil
        /// Information to be changed about the build output artifacts for the build project.
        var artifacts: ProjectArtifacts? = nil
        /// The replacement set of tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        var tags: [Tag]? = nil
        /// The replacement ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        var serviceRole: String? = nil

        public init() {}

        public init(name: String, source: ProjectSource? = nil, environment: ProjectEnvironment? = nil, timeoutInMinutes: Int32? = nil, encryptionKey: String? = nil, description: String? = nil, artifacts: ProjectArtifacts? = nil, tags: [Tag]? = nil, serviceRole: String? = nil) {
            self.name = name
            self.source = source
            self.environment = environment
            self.timeoutInMinutes = timeoutInMinutes
            self.encryptionKey = encryptionKey
            self.description = description
            self.artifacts = artifacts
            self.tags = tags
            self.serviceRole = serviceRole
        }

    }

    public struct StartBuildInput: Serializable, Initializable {
        /// A version of the build input to be built, for this build only. If not specified, the latest version will be used. If specified, must be one of:   For AWS CodeCommit or GitHub: the commit ID to use.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object representing the build input ZIP file to use.  
        var sourceVersion: String? = nil
        /// A set of environment variables that overrides, for this build only, the latest ones already defined in the build project.
        var environmentVariablesOverride: [EnvironmentVariable]? = nil
        /// Build output artifact settings that override, for this build only, the latest ones already defined in the build project.
        var artifactsOverride: ProjectArtifacts? = nil
        /// The name of the build project to start running a build.
        var projectName: String = ""
        /// The number of build timeout minutes, from 5 to 480 (8 hours), that overrides, for this build only, the latest setting already defined in the build project.
        var timeoutInMinutesOverride: Int32? = nil
        /// A build spec declaration that overrides, for this build only, the latest one already defined in the build project.
        var buildspecOverride: String? = nil

        public init() {}

        public init(sourceVersion: String? = nil, environmentVariablesOverride: [EnvironmentVariable]? = nil, artifactsOverride: ProjectArtifacts? = nil, projectName: String, timeoutInMinutesOverride: Int32? = nil, buildspecOverride: String? = nil) {
            self.sourceVersion = sourceVersion
            self.environmentVariablesOverride = environmentVariablesOverride
            self.artifactsOverride = artifactsOverride
            self.projectName = projectName
            self.timeoutInMinutesOverride = timeoutInMinutesOverride
            self.buildspecOverride = buildspecOverride
        }

    }

    public struct EnvironmentImage: Serializable, Initializable {
        /// The description of the Docker image.
        var description: String? = nil
        /// The name of the Docker image.
        var name: String? = nil

        public init() {}

        public init(description: String? = nil, name: String? = nil) {
            self.description = description
            self.name = name
        }

    }

    public struct EnvironmentVariable: Serializable, Initializable {
        /// The name or key of the environment variable.
        var name: String = ""
        /// The value of the environment variable.
        var value: String = ""

        public init() {}

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

    }

    public struct BatchGetBuildsInput: Serializable, Initializable {
        /// The IDs of the builds.
        var ids: [String] = []

        public init() {}

        public init(ids: [String]) {
            self.ids = ids
        }

    }

    public struct PhaseContext: Serializable, Initializable {
        /// An explanation of the build phase's context. This explanation might include a command ID and an exit code.
        var message: String? = nil
        /// The status code for the context of the build phase.
        var statusCode: String? = nil

        public init() {}

        public init(message: String? = nil, statusCode: String? = nil) {
            self.message = message
            self.statusCode = statusCode
        }

    }

    public struct CreateProjectInput: Serializable, Initializable {
        /// The name of the build project.
        var name: String = ""
        /// Information about the build input source code for the build project.
        var source: ProjectSource = ProjectSource()
        /// Information about the build environment for the build project.
        var environment: ProjectEnvironment = ProjectEnvironment()
        /// How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any build that has not been marked as completed. The default is 60 minutes.
        var timeoutInMinutes: Int32? = nil
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. You can specify either the CMK's Amazon Resource Name (ARN) or, if available, the CMK's alias (using the format alias/alias-name ).
        var encryptionKey: String? = nil
        /// A description that makes the build project easy to identify.
        var description: String? = nil
        /// Information about the build output artifacts for the build project.
        var artifacts: ProjectArtifacts = ProjectArtifacts()
        /// A set of tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        var tags: [Tag]? = nil
        /// The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        var serviceRole: String? = nil

        public init() {}

        public init(name: String, source: ProjectSource, environment: ProjectEnvironment, timeoutInMinutes: Int32? = nil, encryptionKey: String? = nil, description: String? = nil, artifacts: ProjectArtifacts, tags: [Tag]? = nil, serviceRole: String? = nil) {
            self.name = name
            self.source = source
            self.environment = environment
            self.timeoutInMinutes = timeoutInMinutes
            self.encryptionKey = encryptionKey
            self.description = description
            self.artifacts = artifacts
            self.tags = tags
            self.serviceRole = serviceRole
        }

    }

    public struct CreateProjectOutput: Serializable, Initializable {
        /// Information about the build project that was created.
        var project: Project? = nil

        public init() {}

        public init(project: Project? = nil) {
            self.project = project
        }

    }

    public struct ProjectSource: Serializable, Initializable {
        /// The build spec declaration to use for the builds in this build project. If this value is not specified, a build spec must be included along with the source code to be built.
        var buildspec: String? = nil
        /// Information about the location of the source code to be built. Valid values include:   For source code settings that are specified in the source action of a pipeline in AWS CodePipeline, location should not be specified. If it is specified, AWS CodePipeline will ignore it. This is because AWS CodePipeline uses the settings in a pipeline's source action instead of this value.   For source code in an AWS CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the build spec (for example, https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name ).   For source code in an Amazon Simple Storage Service (Amazon S3) input bucket, the path to the ZIP file that contains the source code (for example,  bucket-name/path/to/object-name.zip)   For source code in a GitHub repository, instead of specifying a value here, you connect your AWS account to your GitHub account. To do this, use the AWS CodeBuild console to begin creating a build project, and follow the on-screen instructions to complete the connection. (After you have connected to your GitHub account, you do not need to finish creating the build project, and you may then leave the AWS CodeBuild console.) To instruct AWS CodeBuild to then use this connection, in the source object, set the auth object's type value to OAUTH.  
        var location: String? = nil
        /// The type of repository that contains the source code to be built. Valid values include:    CODECOMMIT: The source code is in an AWS CodeCommit repository.    CODEPIPELINE: The source code settings are specified in the source action of a pipeline in AWS CodePipeline.    GITHUB: The source code is in a GitHub repository.    S3: The source code is in an Amazon Simple Storage Service (Amazon S3) input bucket.  
        var type: String = ""
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. This information is for the AWS CodeBuild console's use only. Your code should not get or set this information directly (unless the build project's source type value is GITHUB).
        var auth: SourceAuth? = nil

        public init() {}

        public init(buildspec: String? = nil, location: String? = nil, type: String, auth: SourceAuth? = nil) {
            self.buildspec = buildspec
            self.location = location
            self.type = type
            self.auth = auth
        }

    }

    public struct ListProjectsInput: Serializable, Initializable {
        /// The criterion to be used to list build project names. Valid values include:    CREATED_TIME: List the build project names based on when each build project was created.    LAST_MODIFIED_TIME: List the build project names based on when information about each build project was last changed.    NAME: List the build project names based on each build project's name.   Use sortOrder to specify in what order to list the build project names based on the preceding criteria.
        var sortBy: String? = nil
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        var nextToken: String? = nil
        /// The order in which to list build projects. Valid values include:    ASCENDING: List the build project names in ascending order.    DESCENDING: List the build project names in descending order.   Use sortBy to specify the criterion to be used to list build project names.
        var sortOrder: String? = nil

        public init() {}

        public init(sortBy: String? = nil, nextToken: String? = nil, sortOrder: String? = nil) {
            self.sortBy = sortBy
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

    }

    public struct ListCuratedEnvironmentImagesOutput: Serializable, Initializable {
        /// Information about supported platforms for Docker images that are managed by AWS CodeBuild.
        var platforms: [EnvironmentPlatform]? = nil

        public init() {}

        public init(platforms: [EnvironmentPlatform]? = nil) {
            self.platforms = platforms
        }

    }

}