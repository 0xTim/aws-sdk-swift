// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension EMR {

    public enum AdjustmentType: String, CustomStringConvertible, Codable {
        case changeInCapacity = "CHANGE_IN_CAPACITY"
        case percentChangeInCapacity = "PERCENT_CHANGE_IN_CAPACITY"
        case exactCapacity = "EXACT_CAPACITY"
        public var description: String { return self.rawValue }
    }

    public struct InstanceTypeConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "BidPriceAsPercentageOfOnDemandPrice", required: false, type: .double), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string)
        ]
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType. 
        public let ebsConfiguration: EbsConfiguration?
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified. 
        public let weightedCapacity: Int32?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%). If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public let bidPriceAsPercentageOfOnDemandPrice: Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
        public let configurations: [Configuration]?
        /// An EC2 instance type, such as m3.xlarge. 
        public let instanceType: String
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%. 
        public let bidPrice: String?

        public init(bidPrice: String? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, configurations: [Configuration]? = nil, ebsConfiguration: EbsConfiguration? = nil, instanceType: String, weightedCapacity: Int32? = nil) {
            self.ebsConfiguration = ebsConfiguration
            self.weightedCapacity = weightedCapacity
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.instanceType = instanceType
            self.bidPrice = bidPrice
        }

        private enum CodingKeys: String, CodingKey {
            case ebsConfiguration = "EbsConfiguration"
            case weightedCapacity = "WeightedCapacity"
            case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
            case configurations = "Configurations"
            case instanceType = "InstanceType"
            case bidPrice = "BidPrice"
        }
    }

    public struct PutAutoScalingPolicyOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string)
        ]
        /// The automatic scaling policy definition.
        public let autoScalingPolicy: AutoScalingPolicyDescription?
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public let instanceGroupId: String?
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String?

        public init(autoScalingPolicy: AutoScalingPolicyDescription? = nil, clusterId: String? = nil, instanceGroupId: String? = nil) {
            self.autoScalingPolicy = autoScalingPolicy
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingPolicy = "AutoScalingPolicy"
            case instanceGroupId = "InstanceGroupId"
            case clusterId = "ClusterId"
        }
    }

    public struct InstanceFleetProvisioningSpecifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotSpecification", required: true, type: .structure)
        ]
        /// The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.
        public let spotSpecification: SpotProvisioningSpecification

        public init(spotSpecification: SpotProvisioningSpecification) {
            self.spotSpecification = spotSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case spotSpecification = "SpotSpecification"
        }
    }

    public struct HadoopJarStepConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Properties", required: false, type: .list), 
            AWSShapeMember(label: "MainClass", required: false, type: .string), 
            AWSShapeMember(label: "Jar", required: true, type: .string), 
            AWSShapeMember(label: "Args", required: false, type: .list)
        ]
        /// A list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public let properties: [KeyValue]?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        public let mainClass: String?
        /// A path to a JAR file run during the step.
        public let jar: String
        /// A list of command line arguments passed to the JAR file's main function when executed.
        public let args: [String]?

        public init(args: [String]? = nil, jar: String, mainClass: String? = nil, properties: [KeyValue]? = nil) {
            self.properties = properties
            self.mainClass = mainClass
            self.jar = jar
            self.args = args
        }

        private enum CodingKeys: String, CodingKey {
            case properties = "Properties"
            case mainClass = "MainClass"
            case jar = "Jar"
            case args = "Args"
        }
    }

    public struct DescribeSecurityConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the security configuration.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ClusterStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]
        /// The reason for the cluster status change.
        public let stateChangeReason: ClusterStateChangeReason?
        /// The current state of the cluster.
        public let state: ClusterState?
        /// A timeline that represents the status of a cluster over the lifetime of the cluster.
        public let timeline: ClusterTimeline?

        public init(state: ClusterState? = nil, stateChangeReason: ClusterStateChangeReason? = nil, timeline: ClusterTimeline? = nil) {
            self.stateChangeReason = stateChangeReason
            self.state = state
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case stateChangeReason = "StateChangeReason"
            case state = "State"
            case timeline = "Timeline"
        }
    }

    public struct EbsVolume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "Device", required: false, type: .string)
        ]
        /// The volume identifier of the EBS volume.
        public let volumeId: String?
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public let device: String?

        public init(device: String? = nil, volumeId: String? = nil) {
            self.volumeId = volumeId
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
            case device = "Device"
        }
    }

    public struct StepExecutionStatusDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string)
        ]
        /// The start date and time of the step.
        public let startDateTime: TimeStamp?
        /// The completion date and time of the step.
        public let endDateTime: TimeStamp?
        /// The state of the step.
        public let state: StepExecutionState
        /// The creation date and time of the step.
        public let creationDateTime: TimeStamp
        /// A description of the step's current state.
        public let lastStateChangeReason: String?

        public init(creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, lastStateChangeReason: String? = nil, startDateTime: TimeStamp? = nil, state: StepExecutionState) {
            self.startDateTime = startDateTime
            self.endDateTime = endDateTime
            self.state = state
            self.creationDateTime = creationDateTime
            self.lastStateChangeReason = lastStateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case startDateTime = "StartDateTime"
            case endDateTime = "EndDateTime"
            case state = "State"
            case creationDateTime = "CreationDateTime"
            case lastStateChangeReason = "LastStateChangeReason"
        }
    }

    public struct CancelStepsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "StepIds", required: false, type: .list)
        ]
        /// The ClusterID for which specified steps will be canceled. Use RunJobFlow and ListClusters to get ClusterIDs. 
        public let clusterId: String?
        /// The list of StepIDs to cancel. Use ListSteps to get steps and their states for the specified cluster.
        public let stepIds: [String]?

        public init(clusterId: String? = nil, stepIds: [String]? = nil) {
            self.clusterId = clusterId
            self.stepIds = stepIds
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case stepIds = "StepIds"
        }
    }

    public enum InstanceGroupState: String, CustomStringConvertible, Codable {
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case resizing = "RESIZING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case arrested = "ARRESTED"
        case shuttingDown = "SHUTTING_DOWN"
        case ended = "ENDED"
        public var description: String { return self.rawValue }
    }

    public enum CancelStepsRequestStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct InstanceGroupModifyConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShrinkPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string), 
            AWSShapeMember(label: "EC2InstanceIdsToTerminate", required: false, type: .list)
        ]
        /// Policy for customizing shrink operations.
        public let shrinkPolicy: ShrinkPolicy?
        /// Target size for the instance group.
        public let instanceCount: Int32?
        /// Unique ID of the instance group to expand or shrink.
        public let instanceGroupId: String
        /// The EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
        public let eC2InstanceIdsToTerminate: [String]?

        public init(eC2InstanceIdsToTerminate: [String]? = nil, instanceCount: Int32? = nil, instanceGroupId: String, shrinkPolicy: ShrinkPolicy? = nil) {
            self.shrinkPolicy = shrinkPolicy
            self.instanceCount = instanceCount
            self.instanceGroupId = instanceGroupId
            self.eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate
        }

        private enum CodingKeys: String, CodingKey {
            case shrinkPolicy = "ShrinkPolicy"
            case instanceCount = "InstanceCount"
            case instanceGroupId = "InstanceGroupId"
            case eC2InstanceIdsToTerminate = "EC2InstanceIdsToTerminate"
        }
    }

    public struct ClusterStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// The descriptive message for the state change reason.
        public let message: String?
        /// The programmatic code for the state change reason.
        public let code: ClusterStateChangeReasonCode?

        public init(code: ClusterStateChangeReasonCode? = nil, message: String? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case code = "Code"
        }
    }

    public struct ClusterSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer)
        ]
        /// The unique identifier for the cluster.
        public let id: String?
        /// The details about the current status of the cluster.
        public let status: ClusterStatus?
        /// The name of the cluster.
        public let name: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int32?

        public init(id: String? = nil, name: String? = nil, normalizedInstanceHours: Int32? = nil, status: ClusterStatus? = nil) {
            self.id = id
            self.status = status
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case status = "Status"
            case name = "Name"
            case normalizedInstanceHours = "NormalizedInstanceHours"
        }
    }

    public struct AutoScalingPolicyStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// A friendly, more verbose message that accompanies an automatic scaling policy state change.
        public let message: String?
        /// The code indicating the reason for the change in status.USER_REQUEST indicates that the scaling policy status was changed by a user. PROVISION_FAILURE indicates that the status change was because the policy failed to provision. CLEANUP_FAILURE indicates an error.
        public let code: AutoScalingPolicyStateChangeReasonCode?

        public init(code: AutoScalingPolicyStateChangeReasonCode? = nil, message: String? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case code = "Code"
        }
    }

    public enum AutoScalingPolicyStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case userRequest = "USER_REQUEST"
        case provisionFailure = "PROVISION_FAILURE"
        case cleanupFailure = "CLEANUP_FAILURE"
        public var description: String { return self.rawValue }
    }

    public struct Cluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Ec2InstanceAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "MasterPublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "RepoUpgradeOnBoot", required: false, type: .enum), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean), 
            AWSShapeMember(label: "EbsRootVolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "CustomAmiId", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "RequestedAmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "Applications", required: false, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean), 
            AWSShapeMember(label: "RunningAmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReleaseLabel", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceCollectionType", required: false, type: .enum), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "KerberosAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "AutoTerminate", required: false, type: .boolean), 
            AWSShapeMember(label: "LogUri", required: false, type: .string)
        ]
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// A list of tags associated with a cluster.
        public let tags: [Tag]?
        /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public let ec2InstanceAttributes: Ec2InstanceAttributes?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public let masterPublicDnsName: String?
        /// The current status details about the cluster.
        public let status: ClusterStatus?
        /// The name of the cluster.
        public let name: String?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// Applies only when CustomAmiID is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.
        public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
        /// Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public let terminationProtected: Bool?
        /// The size, in GiB, of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        public let ebsRootVolumeSize: Int32?
        /// The name of the security configuration applied to the cluster.
        public let securityConfiguration: String?
        /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
        public let customAmiId: String?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// The AMI version requested for this cluster.
        public let requestedAmiVersion: String?
        /// The applications installed on this cluster.
        public let applications: [Application]?
        /// Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and manage the cluster if they have the proper policy permissions set. If this value is false, only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action.
        public let visibleToAllUsers: Bool?
        /// The AMI version running on this cluster.
        public let runningAmiVersion: String?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version, for example, emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see http://docs.aws.amazon.com/emr/latest/ReleaseGuide/. The release label applies only to Amazon EMR releases versions 4.x and later. Earlier versions use AmiVersion.
        public let releaseLabel: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int32?
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public let instanceCollectionType: InstanceCollectionType?
        /// Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied to the EMR cluster.
        public let configurations: [Configuration]?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see Use Kerberos Authentication in the EMR Management Guide.
        public let kerberosAttributes: KerberosAttributes?
        /// The unique identifier for the cluster.
        public let id: String?
        /// Specifies whether the cluster should terminate after completing all steps.
        public let autoTerminate: Bool?
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public let logUri: String?

        public init(applications: [Application]? = nil, autoScalingRole: String? = nil, autoTerminate: Bool? = nil, configurations: [Configuration]? = nil, customAmiId: String? = nil, ebsRootVolumeSize: Int32? = nil, ec2InstanceAttributes: Ec2InstanceAttributes? = nil, id: String? = nil, instanceCollectionType: InstanceCollectionType? = nil, kerberosAttributes: KerberosAttributes? = nil, logUri: String? = nil, masterPublicDnsName: String? = nil, name: String? = nil, normalizedInstanceHours: Int32? = nil, releaseLabel: String? = nil, repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil, requestedAmiVersion: String? = nil, runningAmiVersion: String? = nil, scaleDownBehavior: ScaleDownBehavior? = nil, securityConfiguration: String? = nil, serviceRole: String? = nil, status: ClusterStatus? = nil, tags: [Tag]? = nil, terminationProtected: Bool? = nil, visibleToAllUsers: Bool? = nil) {
            self.scaleDownBehavior = scaleDownBehavior
            self.tags = tags
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.masterPublicDnsName = masterPublicDnsName
            self.status = status
            self.name = name
            self.autoScalingRole = autoScalingRole
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.terminationProtected = terminationProtected
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.securityConfiguration = securityConfiguration
            self.customAmiId = customAmiId
            self.serviceRole = serviceRole
            self.requestedAmiVersion = requestedAmiVersion
            self.applications = applications
            self.visibleToAllUsers = visibleToAllUsers
            self.runningAmiVersion = runningAmiVersion
            self.releaseLabel = releaseLabel
            self.normalizedInstanceHours = normalizedInstanceHours
            self.instanceCollectionType = instanceCollectionType
            self.configurations = configurations
            self.kerberosAttributes = kerberosAttributes
            self.id = id
            self.autoTerminate = autoTerminate
            self.logUri = logUri
        }

        private enum CodingKeys: String, CodingKey {
            case scaleDownBehavior = "ScaleDownBehavior"
            case tags = "Tags"
            case ec2InstanceAttributes = "Ec2InstanceAttributes"
            case masterPublicDnsName = "MasterPublicDnsName"
            case status = "Status"
            case name = "Name"
            case autoScalingRole = "AutoScalingRole"
            case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
            case terminationProtected = "TerminationProtected"
            case ebsRootVolumeSize = "EbsRootVolumeSize"
            case securityConfiguration = "SecurityConfiguration"
            case customAmiId = "CustomAmiId"
            case serviceRole = "ServiceRole"
            case requestedAmiVersion = "RequestedAmiVersion"
            case applications = "Applications"
            case visibleToAllUsers = "VisibleToAllUsers"
            case runningAmiVersion = "RunningAmiVersion"
            case releaseLabel = "ReleaseLabel"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case instanceCollectionType = "InstanceCollectionType"
            case configurations = "Configurations"
            case kerberosAttributes = "KerberosAttributes"
            case id = "Id"
            case autoTerminate = "AutoTerminate"
            case logUri = "LogUri"
        }
    }

    public struct HadoopStepConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Properties", required: false, type: .map), 
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Jar", required: false, type: .string), 
            AWSShapeMember(label: "MainClass", required: false, type: .string)
        ]
        /// The list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public let properties: [String: String]?
        /// The list of command line arguments to pass to the JAR file's main function for execution.
        public let args: [String]?
        /// The path to the JAR file that runs during the step.
        public let jar: String?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
        public let mainClass: String?

        public init(args: [String]? = nil, jar: String? = nil, mainClass: String? = nil, properties: [String: String]? = nil) {
            self.properties = properties
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
        }

        private enum CodingKeys: String, CodingKey {
            case properties = "Properties"
            case args = "Args"
            case jar = "Jar"
            case mainClass = "MainClass"
        }
    }

    public struct InstanceFleetModifyConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleetId", required: true, type: .string), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer)
        ]
        /// A unique identifier for the instance fleet.
        public let instanceFleetId: String
        /// The target capacity of Spot units for the instance fleet. For more information, see InstanceFleetConfig$TargetSpotCapacity.
        public let targetSpotCapacity: Int32?
        /// The target capacity of On-Demand units for the instance fleet. For more information see InstanceFleetConfig$TargetOnDemandCapacity.
        public let targetOnDemandCapacity: Int32?

        public init(instanceFleetId: String, targetOnDemandCapacity: Int32? = nil, targetSpotCapacity: Int32? = nil) {
            self.instanceFleetId = instanceFleetId
            self.targetSpotCapacity = targetSpotCapacity
            self.targetOnDemandCapacity = targetOnDemandCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleetId = "InstanceFleetId"
            case targetSpotCapacity = "TargetSpotCapacity"
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
        }
    }

    public enum StepStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct ListInstanceGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of instance groups for the cluster and given filters.
        public let instanceGroups: [InstanceGroup]?

        public init(instanceGroups: [InstanceGroup]? = nil, marker: String? = nil) {
            self.marker = marker
            self.instanceGroups = instanceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case instanceGroups = "InstanceGroups"
        }
    }

    public struct ListClustersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Clusters", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of clusters for the account based on the given filters.
        public let clusters: [ClusterSummary]?

        public init(clusters: [ClusterSummary]? = nil, marker: String? = nil) {
            self.marker = marker
            self.clusters = clusters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusters = "Clusters"
        }
    }

    public struct DescribeClusterOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// This output contains the details for the requested cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct StepSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Config", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
        public let actionOnFailure: ActionOnFailure?
        /// The identifier of the cluster step.
        public let id: String?
        /// The current execution status details of the cluster step.
        public let status: StepStatus?
        /// The Hadoop job configuration of the cluster step.
        public let config: HadoopStepConfig?
        /// The name of the cluster step.
        public let name: String?

        public init(actionOnFailure: ActionOnFailure? = nil, config: HadoopStepConfig? = nil, id: String? = nil, name: String? = nil, status: StepStatus? = nil) {
            self.actionOnFailure = actionOnFailure
            self.id = id
            self.status = status
            self.config = config
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case id = "Id"
            case status = "Status"
            case config = "Config"
            case name = "Name"
        }
    }

    public struct InstanceFleetStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// A code corresponding to the reason the state change occurred.
        public let code: InstanceFleetStateChangeReasonCode?
        /// An explanatory message.
        public let message: String?

        public init(code: InstanceFleetStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public enum InstanceRoleType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public struct ListBootstrapActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The cluster identifier for the bootstrap actions to list.
        public let clusterId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterId: String, marker: String? = nil) {
            self.clusterId = clusterId
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case marker = "Marker"
        }
    }

    public struct AutoScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: true, type: .list), 
            AWSShapeMember(label: "Constraints", required: true, type: .structure)
        ]
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public let rules: [ScalingRule]
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public let constraints: ScalingConstraints

        public init(constraints: ScalingConstraints, rules: [ScalingRule]) {
            self.rules = rules
            self.constraints = constraints
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case constraints = "Constraints"
        }
    }

    public struct ListSecurityConfigurationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The pagination token that indicates the set of results to retrieve.
        public let marker: String?

        public init(marker: String? = nil) {
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
        }
    }

    public struct StepDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionStatusDetail", required: true, type: .structure), 
            AWSShapeMember(label: "StepConfig", required: true, type: .structure)
        ]
        /// The description of the step status.
        public let executionStatusDetail: StepExecutionStatusDetail
        /// The step configuration.
        public let stepConfig: StepConfig

        public init(executionStatusDetail: StepExecutionStatusDetail, stepConfig: StepConfig) {
            self.executionStatusDetail = executionStatusDetail
            self.stepConfig = stepConfig
        }

        private enum CodingKeys: String, CodingKey {
            case executionStatusDetail = "ExecutionStatusDetail"
            case stepConfig = "StepConfig"
        }
    }

    public struct DescribeClusterInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The identifier of the cluster to describe.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public enum ClusterStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case instanceFleetTimeout = "INSTANCE_FLEET_TIMEOUT"
        case bootstrapFailure = "BOOTSTRAP_FAILURE"
        case userRequest = "USER_REQUEST"
        case stepFailure = "STEP_FAILURE"
        case allStepsCompleted = "ALL_STEPS_COMPLETED"
        public var description: String { return self.rawValue }
    }

    public struct ScalingAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SimpleScalingPolicyConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "Market", required: false, type: .enum)
        ]
        /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
        public let simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration
        /// Not available for instance groups. Instance groups use the market type specified for the group.
        public let market: MarketType?

        public init(market: MarketType? = nil, simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration) {
            self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
            self.market = market
        }

        private enum CodingKeys: String, CodingKey {
            case simpleScalingPolicyConfiguration = "SimpleScalingPolicyConfiguration"
            case market = "Market"
        }
    }

    public enum AutoScalingPolicyState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case attaching = "ATTACHING"
        case attached = "ATTACHED"
        case detaching = "DETACHING"
        case detached = "DETACHED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum StepState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case cancelPending = "CANCEL_PENDING"
        case running = "RUNNING"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public struct AddInstanceGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: true, type: .list)
        ]
        /// Job flow in which to add the instance groups.
        public let jobFlowId: String
        /// Instance groups to add.
        public let instanceGroups: [InstanceGroupConfig]

        public init(instanceGroups: [InstanceGroupConfig], jobFlowId: String) {
            self.jobFlowId = jobFlowId
            self.instanceGroups = instanceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
            case instanceGroups = "InstanceGroups"
        }
    }

    public struct RunJobFlowInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "KerberosAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "Instances", required: true, type: .structure), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "AmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "EbsRootVolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "CustomAmiId", required: false, type: .string), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Applications", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowRole", required: false, type: .string), 
            AWSShapeMember(label: "ReleaseLabel", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string), 
            AWSShapeMember(label: "RepoUpgradeOnBoot", required: false, type: .enum), 
            AWSShapeMember(label: "NewSupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "SupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// A list of steps to run.
        public let steps: [StepConfig]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see Use Kerberos Authentication in the EMR Management Guide.
        public let kerberosAttributes: KerberosAttributes?
        /// A specification of the number and type of Amazon EC2 instances.
        public let instances: JobFlowInstancesConfig
        /// For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR cluster you are creating.
        public let configurations: [Configuration]?
        /// Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
        public let amiVersion: String?
        /// A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
        public let bootstrapActions: [BootstrapActionConfig]?
        /// The size, in GiB, of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        public let ebsRootVolumeSize: Int32?
        /// The name of a security configuration to apply to the cluster.
        public let securityConfiguration: String?
        /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2 instances. For more information about custom AMIs in Amazon EMR, see Using a Custom AMI in the Amazon EMR Management Guide. If omitted, the cluster uses the base Linux AMI for the ReleaseLabel specified. For Amazon EMR versions 2.x and 3.x, use AmiVersion instead. For information about creating a custom AMI, see Creating an Amazon EBS-Backed Linux AMI in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For information about finding an AMI ID, see Finding a Linux AMI. 
        public let customAmiId: String?
        /// Whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to false, only the IAM user that created the cluster can view and manage it.
        public let visibleToAllUsers: Bool?
        /// The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
        public let logUri: String?
        /// For Amazon EMR releases 4.0 and later. A list of applications for the cluster. Valid values are: "Hadoop", "Hive", "Mahout", "Pig", and "Spark." They are case insensitive.
        public let applications: [Application]?
        /// A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
        public let tags: [Tag]?
        /// Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
        public let jobFlowRole: String?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version, for example, emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see http://docs.aws.amazon.com/emr/latest/ReleaseGuide/. The release label applies only to Amazon EMR releases versions 4.x and later. Earlier versions use AmiVersion.
        public let releaseLabel: String?
        /// A JSON string for selecting additional features.
        public let additionalInfo: String?
        /// Applies only when CustomAmiID is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is SECURITY, which indicates that only security updates are applied. If NONE is specified, no updates are applied, and all updates must be applied manually.
        public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.  A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the Amazon EMR Developer Guide. Supported values are:   "mapr-m3" - launch the cluster using MapR M3 Edition.   "mapr-m5" - launch the cluster using MapR M5 Edition.   "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.   "mapr-m7" - launch the cluster using MapR M7 Edition.   "hunk" - launch the cluster with the Hunk Big Data Analtics Platform.   "hue"- launch the cluster with Hue installed.   "spark" - launch the cluster with Apache Spark installed.   "ganglia" - launch the cluster with the Ganglia Monitoring System installed.  
        public let newSupportedProducts: [SupportedProductConfig]?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.  A list of strings that indicates third-party software to use. For more information, see the Amazon EMR Developer Guide. Currently supported values are:   "mapr-m3" - launch the job flow using MapR M3 Edition.   "mapr-m5" - launch the job flow using MapR M5 Edition.  
        public let supportedProducts: [String]?
        /// The name of the job flow.
        public let name: String

        public init(additionalInfo: String? = nil, amiVersion: String? = nil, applications: [Application]? = nil, autoScalingRole: String? = nil, bootstrapActions: [BootstrapActionConfig]? = nil, configurations: [Configuration]? = nil, customAmiId: String? = nil, ebsRootVolumeSize: Int32? = nil, instances: JobFlowInstancesConfig, jobFlowRole: String? = nil, kerberosAttributes: KerberosAttributes? = nil, logUri: String? = nil, name: String, newSupportedProducts: [SupportedProductConfig]? = nil, releaseLabel: String? = nil, repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil, scaleDownBehavior: ScaleDownBehavior? = nil, securityConfiguration: String? = nil, serviceRole: String? = nil, steps: [StepConfig]? = nil, supportedProducts: [String]? = nil, tags: [Tag]? = nil, visibleToAllUsers: Bool? = nil) {
            self.steps = steps
            self.autoScalingRole = autoScalingRole
            self.kerberosAttributes = kerberosAttributes
            self.instances = instances
            self.configurations = configurations
            self.scaleDownBehavior = scaleDownBehavior
            self.amiVersion = amiVersion
            self.bootstrapActions = bootstrapActions
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.securityConfiguration = securityConfiguration
            self.customAmiId = customAmiId
            self.visibleToAllUsers = visibleToAllUsers
            self.logUri = logUri
            self.applications = applications
            self.tags = tags
            self.jobFlowRole = jobFlowRole
            self.releaseLabel = releaseLabel
            self.additionalInfo = additionalInfo
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.newSupportedProducts = newSupportedProducts
            self.serviceRole = serviceRole
            self.supportedProducts = supportedProducts
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case steps = "Steps"
            case autoScalingRole = "AutoScalingRole"
            case kerberosAttributes = "KerberosAttributes"
            case instances = "Instances"
            case configurations = "Configurations"
            case scaleDownBehavior = "ScaleDownBehavior"
            case amiVersion = "AmiVersion"
            case bootstrapActions = "BootstrapActions"
            case ebsRootVolumeSize = "EbsRootVolumeSize"
            case securityConfiguration = "SecurityConfiguration"
            case customAmiId = "CustomAmiId"
            case visibleToAllUsers = "VisibleToAllUsers"
            case logUri = "LogUri"
            case applications = "Applications"
            case tags = "Tags"
            case jobFlowRole = "JobFlowRole"
            case releaseLabel = "ReleaseLabel"
            case additionalInfo = "AdditionalInfo"
            case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
            case newSupportedProducts = "NewSupportedProducts"
            case serviceRole = "ServiceRole"
            case supportedProducts = "SupportedProducts"
            case name = "Name"
        }
    }

    public struct SecurityConfigurationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp)
        ]
        /// The name of the security configuration.
        public let name: String?
        /// The date and time the security configuration was created.
        public let creationDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, name: String? = nil) {
            self.name = name
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDateTime = "CreationDateTime"
        }
    }

    public enum SpotProvisioningTimeoutAction: String, CustomStringConvertible, Codable {
        case switchToOnDemand = "SWITCH_TO_ON_DEMAND"
        case terminateCluster = "TERMINATE_CLUSTER"
        public var description: String { return self.rawValue }
    }

    public struct ListSecurityConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The creation date and time, and name, of each security configuration.
        public let securityConfigurations: [SecurityConfigurationSummary]?
        /// A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
        public let marker: String?

        public init(marker: String? = nil, securityConfigurations: [SecurityConfigurationSummary]? = nil) {
            self.securityConfigurations = securityConfigurations
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case securityConfigurations = "SecurityConfigurations"
            case marker = "Marker"
        }
    }

    public struct JobFlowInstancesConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmrManagedSlaveSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleets", required: false, type: .list), 
            AWSShapeMember(label: "SlaveInstanceType", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedMasterSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "KeepJobFlowAliveWhenNoSteps", required: false, type: .boolean), 
            AWSShapeMember(label: "HadoopVersion", required: false, type: .string), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterInstanceType", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalSlaveSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ServiceAccessSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalMasterSecurityGroups", required: false, type: .list)
        ]
        /// The identifier of the Amazon EC2 security group for the slave nodes.
        public let emrManagedSlaveSecurityGroup: String?
        /// Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public let ec2SubnetIds: [String]?
        /// Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster launches in the normal Amazon Web Services cloud, outside of an Amazon VPC, if the account launching the cluster supports EC2 Classic networks in the region where the cluster launches. Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus you cannot specify the cc1.4xlarge instance type for clusters launched in an Amazon VPC.
        public let ec2SubnetId: String?
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  Describes the EC2 instances and instance configurations for clusters that use the instance fleet configuration.
        public let instanceFleets: [InstanceFleetConfig]?
        /// The EC2 instance type of the slave nodes.
        public let slaveInstanceType: String?
        /// The identifier of the Amazon EC2 security group for the master node.
        public let emrManagedMasterSecurityGroup: String?
        /// The number of EC2 instances in the cluster.
        public let instanceCount: Int32?
        /// The name of the EC2 key pair that can be used to ssh to the master node as the user called "hadoop."
        public let ec2KeyName: String?
        /// The Availability Zone in which the cluster runs.
        public let placement: PlacementType?
        /// Specifies whether the cluster should remain available after completing all steps.
        public let keepJobFlowAliveWhenNoSteps: Bool?
        /// Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the cluster. Valid inputs are "0.18" (deprecated), "0.20" (deprecated), "0.20.205" (deprecated), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
        public let hadoopVersion: String?
        /// Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
        public let terminationProtected: Bool?
        /// The EC2 instance type of the master node.
        public let masterInstanceType: String?
        /// A list of additional Amazon EC2 security group IDs for the slave nodes.
        public let additionalSlaveSecurityGroups: [String]?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public let serviceAccessSecurityGroup: String?
        /// Configuration for the instance groups in a cluster.
        public let instanceGroups: [InstanceGroupConfig]?
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public let additionalMasterSecurityGroups: [String]?

        public init(additionalMasterSecurityGroups: [String]? = nil, additionalSlaveSecurityGroups: [String]? = nil, ec2KeyName: String? = nil, ec2SubnetId: String? = nil, ec2SubnetIds: [String]? = nil, emrManagedMasterSecurityGroup: String? = nil, emrManagedSlaveSecurityGroup: String? = nil, hadoopVersion: String? = nil, instanceCount: Int32? = nil, instanceFleets: [InstanceFleetConfig]? = nil, instanceGroups: [InstanceGroupConfig]? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, masterInstanceType: String? = nil, placement: PlacementType? = nil, serviceAccessSecurityGroup: String? = nil, slaveInstanceType: String? = nil, terminationProtected: Bool? = nil) {
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.ec2SubnetIds = ec2SubnetIds
            self.ec2SubnetId = ec2SubnetId
            self.instanceFleets = instanceFleets
            self.slaveInstanceType = slaveInstanceType
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.instanceCount = instanceCount
            self.ec2KeyName = ec2KeyName
            self.placement = placement
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.hadoopVersion = hadoopVersion
            self.terminationProtected = terminationProtected
            self.masterInstanceType = masterInstanceType
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.instanceGroups = instanceGroups
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
            case ec2SubnetIds = "Ec2SubnetIds"
            case ec2SubnetId = "Ec2SubnetId"
            case instanceFleets = "InstanceFleets"
            case slaveInstanceType = "SlaveInstanceType"
            case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
            case instanceCount = "InstanceCount"
            case ec2KeyName = "Ec2KeyName"
            case placement = "Placement"
            case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
            case hadoopVersion = "HadoopVersion"
            case terminationProtected = "TerminationProtected"
            case masterInstanceType = "MasterInstanceType"
            case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
            case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
            case instanceGroups = "InstanceGroups"
            case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        }
    }

    public struct ListInstanceFleetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The unique identifier of the cluster.
        public let clusterId: String

        public init(clusterId: String, marker: String? = nil) {
            self.marker = marker
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterId = "ClusterId"
        }
    }

    public struct RunJobFlowOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: false, type: .string)
        ]
        /// An unique identifier for the job flow.
        public let jobFlowId: String?

        public init(jobFlowId: String? = nil) {
            self.jobFlowId = jobFlowId
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterThanOrEqual = "GREATER_THAN_OR_EQUAL"
        case greaterThan = "GREATER_THAN"
        case lessThan = "LESS_THAN"
        case lessThanOrEqual = "LESS_THAN_OR_EQUAL"
        public var description: String { return self.rawValue }
    }

    public struct Ec2InstanceAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalMasterSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedSlaveSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "RequestedEc2AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalSlaveSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "RequestedEc2SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "EmrManagedMasterSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Ec2AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "ServiceAccessSecurityGroup", required: false, type: .string)
        ]
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public let additionalMasterSecurityGroups: [String]?
        /// The IAM role that was specified when the cluster was launched. The EC2 instances of the cluster assume this role.
        public let iamInstanceProfile: String?
        /// The identifier of the Amazon EC2 security group for the slave nodes.
        public let emrManagedSlaveSecurityGroup: String?
        /// Applies to clusters configured with the instance fleets option. Specifies one or more Availability Zones in which to launch EC2 cluster instances when the EC2-Classic network configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from among the list of RequestedEc2AvailabilityZones, and then launches all cluster instances within that Availability Zone. If you do not specify this value, Amazon EMR chooses the Availability Zone for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public let requestedEc2AvailabilityZones: [String]?
        /// A list of additional Amazon EC2 security group IDs for the slave nodes.
        public let additionalSlaveSecurityGroups: [String]?
        /// To launch the cluster in Amazon VPC, set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster is launched in the normal AWS cloud, outside of a VPC. Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus, you cannot specify the cc1.4xlarge instance type for nodes of a cluster launched in a VPC.
        public let ec2SubnetId: String?
        /// Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances. Subnets must exist within the same VPC. Amazon EMR chooses the EC2 subnet with the best fit from among the list of RequestedEc2SubnetIds, and then launches all cluster instances within that Subnet. If this value is not specified, and the account and region support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses RequestedEc2AvailabilityZones instead of this setting. If EC2-Classic is not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public let requestedEc2SubnetIds: [String]?
        /// The identifier of the Amazon EC2 security group for the master node.
        public let emrManagedMasterSecurityGroup: String?
        /// The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
        public let ec2KeyName: String?
        /// The Availability Zone in which the cluster will run. 
        public let ec2AvailabilityZone: String?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public let serviceAccessSecurityGroup: String?

        public init(additionalMasterSecurityGroups: [String]? = nil, additionalSlaveSecurityGroups: [String]? = nil, ec2AvailabilityZone: String? = nil, ec2KeyName: String? = nil, ec2SubnetId: String? = nil, emrManagedMasterSecurityGroup: String? = nil, emrManagedSlaveSecurityGroup: String? = nil, iamInstanceProfile: String? = nil, requestedEc2AvailabilityZones: [String]? = nil, requestedEc2SubnetIds: [String]? = nil, serviceAccessSecurityGroup: String? = nil) {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.iamInstanceProfile = iamInstanceProfile
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2SubnetId = ec2SubnetId
            self.requestedEc2SubnetIds = requestedEc2SubnetIds
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.ec2KeyName = ec2KeyName
            self.ec2AvailabilityZone = ec2AvailabilityZone
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
            case iamInstanceProfile = "IamInstanceProfile"
            case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
            case requestedEc2AvailabilityZones = "RequestedEc2AvailabilityZones"
            case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
            case ec2SubnetId = "Ec2SubnetId"
            case requestedEc2SubnetIds = "RequestedEc2SubnetIds"
            case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
            case ec2KeyName = "Ec2KeyName"
            case ec2AvailabilityZone = "Ec2AvailabilityZone"
            case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
        }
    }

    public struct DescribeStepOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Step", required: false, type: .structure)
        ]
        /// The step details for the requested step identifier.
        public let step: Step?

        public init(step: Step? = nil) {
            self.step = step
        }

        private enum CodingKeys: String, CodingKey {
            case step = "Step"
        }
    }

    public enum InstanceState: String, CustomStringConvertible, Codable {
        case awaitingFulfillment = "AWAITING_FULFILLMENT"
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct StepStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// The descriptive message for the state change reason.
        public let message: String?
        /// The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
        public let code: StepStateChangeReasonCode?

        public init(code: StepStateChangeReasonCode? = nil, message: String? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case code = "Code"
        }
    }

    public struct SetVisibleToAllUsersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VisibleToAllUsers", required: true, type: .boolean), 
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list)
        ]
        /// Whether the specified clusters are visible to all IAM users of the AWS account associated with the cluster. If this value is set to True, all IAM users of that AWS account can view and, if they have the proper IAM policy permissions set, manage the clusters. If it is set to False, only the IAM user that created a cluster can view and manage it.
        public let visibleToAllUsers: Bool
        /// Identifiers of the job flows to receive the new visibility setting.
        public let jobFlowIds: [String]

        public init(jobFlowIds: [String], visibleToAllUsers: Bool) {
            self.visibleToAllUsers = visibleToAllUsers
            self.jobFlowIds = jobFlowIds
        }

        private enum CodingKeys: String, CodingKey {
            case visibleToAllUsers = "VisibleToAllUsers"
            case jobFlowIds = "JobFlowIds"
        }
    }

    public struct AddInstanceFleetOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string)
        ]
        /// The unique identifier of the instance fleet.
        public let instanceFleetId: String?
        /// The unique identifier of the cluster.
        public let clusterId: String?

        public init(clusterId: String? = nil, instanceFleetId: String? = nil) {
            self.instanceFleetId = instanceFleetId
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleetId = "InstanceFleetId"
            case clusterId = "ClusterId"
        }
    }

    public enum JobFlowExecutionState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case waiting = "WAITING"
        case shuttingDown = "SHUTTING_DOWN"
        case terminated = "TERMINATED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct AddInstanceFleetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceFleet", required: true, type: .structure)
        ]
        /// The unique identifier of the cluster.
        public let clusterId: String
        /// Specifies the configuration of the instance fleet.
        public let instanceFleet: InstanceFleetConfig

        public init(clusterId: String, instanceFleet: InstanceFleetConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleet = "InstanceFleet"
        }
    }

    public struct BootstrapActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScriptBootstrapAction", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The script run by the bootstrap action.
        public let scriptBootstrapAction: ScriptBootstrapActionConfig
        /// The name of the bootstrap action.
        public let name: String

        public init(name: String, scriptBootstrapAction: ScriptBootstrapActionConfig) {
            self.scriptBootstrapAction = scriptBootstrapAction
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case scriptBootstrapAction = "ScriptBootstrapAction"
            case name = "Name"
        }
    }

    public struct InstanceFleetConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceTypeConfigs", required: false, type: .list), 
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFleetType", required: true, type: .enum), 
            AWSShapeMember(label: "LaunchSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetSpotCapacity: Int32?
        /// The instance type configurations that define the EC2 instances in the instance fleet.
        public let instanceTypeConfigs: [InstanceTypeConfig]?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetOnDemandCapacity: Int32?
        /// The node type that the instance fleet hosts. Valid values are MASTER,CORE,and TASK.
        public let instanceFleetType: InstanceFleetType
        /// The launch specification for the instance fleet.
        public let launchSpecifications: InstanceFleetProvisioningSpecifications?
        /// The friendly name of the instance fleet.
        public let name: String?

        public init(instanceFleetType: InstanceFleetType, instanceTypeConfigs: [InstanceTypeConfig]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, name: String? = nil, targetOnDemandCapacity: Int32? = nil, targetSpotCapacity: Int32? = nil) {
            self.targetSpotCapacity = targetSpotCapacity
            self.instanceTypeConfigs = instanceTypeConfigs
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.instanceFleetType = instanceFleetType
            self.launchSpecifications = launchSpecifications
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case targetSpotCapacity = "TargetSpotCapacity"
            case instanceTypeConfigs = "InstanceTypeConfigs"
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case instanceFleetType = "InstanceFleetType"
            case launchSpecifications = "LaunchSpecifications"
            case name = "Name"
        }
    }

    public enum Unit: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case seconds = "SECONDS"
        case microSeconds = "MICRO_SECONDS"
        case milliSeconds = "MILLI_SECONDS"
        case bytes = "BYTES"
        case kiloBytes = "KILO_BYTES"
        case megaBytes = "MEGA_BYTES"
        case gigaBytes = "GIGA_BYTES"
        case teraBytes = "TERA_BYTES"
        case bits = "BITS"
        case kiloBits = "KILO_BITS"
        case megaBits = "MEGA_BITS"
        case gigaBits = "GIGA_BITS"
        case teraBits = "TERA_BITS"
        case percent = "PERCENT"
        case count = "COUNT"
        case bytesPerSecond = "BYTES_PER_SECOND"
        case kiloBytesPerSecond = "KILO_BYTES_PER_SECOND"
        case megaBytesPerSecond = "MEGA_BYTES_PER_SECOND"
        case gigaBytesPerSecond = "GIGA_BYTES_PER_SECOND"
        case teraBytesPerSecond = "TERA_BYTES_PER_SECOND"
        case bitsPerSecond = "BITS_PER_SECOND"
        case kiloBitsPerSecond = "KILO_BITS_PER_SECOND"
        case megaBitsPerSecond = "MEGA_BITS_PER_SECOND"
        case gigaBitsPerSecond = "GIGA_BITS_PER_SECOND"
        case teraBitsPerSecond = "TERA_BITS_PER_SECOND"
        case countPerSecond = "COUNT_PER_SECOND"
        public var description: String { return self.rawValue }
    }

    public struct VolumeSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "SizeInGB", required: true, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: true, type: .string)
        ]
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public let iops: Int32?
        /// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        public let sizeInGB: Int32
        /// The volume type. Volume types supported are gp2, io1, standard.
        public let volumeType: String

        public init(iops: Int32? = nil, sizeInGB: Int32, volumeType: String) {
            self.iops = iops
            self.sizeInGB = sizeInGB
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case iops = "Iops"
            case sizeInGB = "SizeInGB"
            case volumeType = "VolumeType"
        }
    }

    public struct InstanceResizePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancesToTerminate", required: false, type: .list), 
            AWSShapeMember(label: "InstancesToProtect", required: false, type: .list), 
            AWSShapeMember(label: "InstanceTerminationTimeout", required: false, type: .integer)
        ]
        /// Specific list of instances to be terminated when shrinking an instance group.
        public let instancesToTerminate: [String]?
        /// Specific list of instances to be protected when shrinking an instance group.
        public let instancesToProtect: [String]?
        /// Decommissioning timeout override for the specific list of instances to be terminated.
        public let instanceTerminationTimeout: Int32?

        public init(instanceTerminationTimeout: Int32? = nil, instancesToProtect: [String]? = nil, instancesToTerminate: [String]? = nil) {
            self.instancesToTerminate = instancesToTerminate
            self.instancesToProtect = instancesToProtect
            self.instanceTerminationTimeout = instanceTerminationTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case instancesToTerminate = "InstancesToTerminate"
            case instancesToProtect = "InstancesToProtect"
            case instanceTerminationTimeout = "InstanceTerminationTimeout"
        }
    }

    public struct InstanceTypeSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "EbsBlockDevices", required: false, type: .list), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "BidPriceAsPercentageOfOnDemandPrice", required: false, type: .double), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string)
        ]
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
        public let weightedCapacity: Int32?
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType.
        public let ebsBlockDevices: [EbsBlockDevice]?
        /// Evaluates to TRUE when the specified InstanceType is EBS-optimized.
        public let ebsOptimized: Bool?
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD.
        public let bidPrice: String?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%).
        public let bidPriceAsPercentageOfOnDemandPrice: Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
        public let configurations: [Configuration]?
        /// The EC2 instance type, for example m3.xlarge.
        public let instanceType: String?

        public init(bidPrice: String? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, configurations: [Configuration]? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, ebsOptimized: Bool? = nil, instanceType: String? = nil, weightedCapacity: Int32? = nil) {
            self.weightedCapacity = weightedCapacity
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case weightedCapacity = "WeightedCapacity"
            case ebsBlockDevices = "EbsBlockDevices"
            case ebsOptimized = "EbsOptimized"
            case bidPrice = "BidPrice"
            case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
            case configurations = "Configurations"
            case instanceType = "InstanceType"
        }
    }

    public struct InstanceFleet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTypeSpecifications", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFleetType", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "LaunchSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisionedOnDemandCapacity", required: false, type: .integer)
        ]
        /// The specification for the instance types that comprise an instance fleet. Up to five unique instance specifications may be defined for each instance fleet. 
        public let instanceTypeSpecifications: [InstanceTypeSpecification]?
        /// The unique identifier of the instance fleet.
        public let id: String?
        /// The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
        public let provisionedSpotCapacity: Int32?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedSpotCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetSpotCapacity: Int32?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedOnDemandCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetOnDemandCapacity: Int32?
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK. 
        public let instanceFleetType: InstanceFleetType?
        /// A friendly name for the instance fleet.
        public let name: String?
        /// The current status of the instance fleet. 
        public let status: InstanceFleetStatus?
        /// Describes the launch specification for an instance fleet. 
        public let launchSpecifications: InstanceFleetProvisioningSpecifications?
        /// The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
        public let provisionedOnDemandCapacity: Int32?

        public init(id: String? = nil, instanceFleetType: InstanceFleetType? = nil, instanceTypeSpecifications: [InstanceTypeSpecification]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, name: String? = nil, provisionedOnDemandCapacity: Int32? = nil, provisionedSpotCapacity: Int32? = nil, status: InstanceFleetStatus? = nil, targetOnDemandCapacity: Int32? = nil, targetSpotCapacity: Int32? = nil) {
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.id = id
            self.provisionedSpotCapacity = provisionedSpotCapacity
            self.targetSpotCapacity = targetSpotCapacity
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.instanceFleetType = instanceFleetType
            self.name = name
            self.status = status
            self.launchSpecifications = launchSpecifications
            self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypeSpecifications = "InstanceTypeSpecifications"
            case id = "Id"
            case provisionedSpotCapacity = "ProvisionedSpotCapacity"
            case targetSpotCapacity = "TargetSpotCapacity"
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case instanceFleetType = "InstanceFleetType"
            case name = "Name"
            case status = "Status"
            case launchSpecifications = "LaunchSpecifications"
            case provisionedOnDemandCapacity = "ProvisionedOnDemandCapacity"
        }
    }

    public struct Command: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "ScriptPath", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// Arguments for Amazon EMR to pass to the command for execution.
        public let args: [String]?
        /// The Amazon S3 location of the command script.
        public let scriptPath: String?
        /// The name of the command.
        public let name: String?

        public init(args: [String]? = nil, name: String? = nil, scriptPath: String? = nil) {
            self.args = args
            self.scriptPath = scriptPath
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case scriptPath = "ScriptPath"
            case name = "Name"
        }
    }

    public struct JobFlowExecutionStatusDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string)
        ]
        /// The creation date and time of the job flow.
        public let creationDateTime: TimeStamp
        /// The state of the job flow.
        public let state: JobFlowExecutionState
        /// The start date and time of the job flow.
        public let startDateTime: TimeStamp?
        /// The completion date and time of the job flow.
        public let endDateTime: TimeStamp?
        /// The date and time when the job flow was ready to start running bootstrap actions.
        public let readyDateTime: TimeStamp?
        /// Description of the job flow last changed state.
        public let lastStateChangeReason: String?

        public init(creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, lastStateChangeReason: String? = nil, readyDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil, state: JobFlowExecutionState) {
            self.creationDateTime = creationDateTime
            self.state = state
            self.startDateTime = startDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
            self.lastStateChangeReason = lastStateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case state = "State"
            case startDateTime = "StartDateTime"
            case endDateTime = "EndDateTime"
            case readyDateTime = "ReadyDateTime"
            case lastStateChangeReason = "LastStateChangeReason"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The dimension name.
        public let key: String?
        /// The dimension value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ScalingConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "MaxCapacity", required: true, type: .integer)
        ]
        /// The lower boundary of EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
        public let minCapacity: Int32
        /// The upper boundary of EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
        public let maxCapacity: Int32

        public init(maxCapacity: Int32, minCapacity: Int32) {
            self.minCapacity = minCapacity
            self.maxCapacity = maxCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case minCapacity = "MinCapacity"
            case maxCapacity = "MaxCapacity"
        }
    }

    public struct ListInstanceGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The identifier of the cluster for which to list the instance groups.
        public let clusterId: String

        public init(clusterId: String, marker: String? = nil) {
            self.marker = marker
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterId = "ClusterId"
        }
    }

    public enum InstanceCollectionType: String, CustomStringConvertible, Codable {
        case instanceFleet = "INSTANCE_FLEET"
        case instanceGroup = "INSTANCE_GROUP"
        public var description: String { return self.rawValue }
    }

    public enum StepExecutionState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case running = "RUNNING"
        case `continue` = "CONTINUE"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeJobFlowsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowStates", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowIds", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedBefore", required: false, type: .timestamp)
        ]
        /// Return only job flows whose state is contained in this list.
        public let jobFlowStates: [JobFlowExecutionState]?
        /// Return only job flows whose job flow ID is contained in this list.
        public let jobFlowIds: [String]?
        /// Return only job flows created after this date and time.
        public let createdAfter: TimeStamp?
        /// Return only job flows created before this date and time.
        public let createdBefore: TimeStamp?

        public init(createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, jobFlowIds: [String]? = nil, jobFlowStates: [JobFlowExecutionState]? = nil) {
            self.jobFlowStates = jobFlowStates
            self.jobFlowIds = jobFlowIds
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowStates = "JobFlowStates"
            case jobFlowIds = "JobFlowIds"
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
        }
    }

    public struct SetTerminationProtectionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list), 
            AWSShapeMember(label: "TerminationProtected", required: true, type: .boolean)
        ]
        ///  A list of strings that uniquely identify the clusters to protect. This identifier is returned by RunJobFlow and can also be obtained from DescribeJobFlows . 
        public let jobFlowIds: [String]
        /// A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
        public let terminationProtected: Bool

        public init(jobFlowIds: [String], terminationProtected: Bool) {
            self.jobFlowIds = jobFlowIds
            self.terminationProtected = terminationProtected
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
            case terminationProtected = "TerminationProtected"
        }
    }

    public struct TerminateJobFlowsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list)
        ]
        /// A list of job flows to be shutdown.
        public let jobFlowIds: [String]

        public init(jobFlowIds: [String]) {
            self.jobFlowIds = jobFlowIds
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
        }
    }

    public struct EbsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsBlockDeviceConfigs", required: false, type: .list), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean)
        ]
        /// An array of Amazon EBS volume specifications attached to a cluster instance.
        public let ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]?
        /// Indicates whether an Amazon EBS volume is EBS-optimized.
        public let ebsOptimized: Bool?

        public init(ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]? = nil, ebsOptimized: Bool? = nil) {
            self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
            self.ebsOptimized = ebsOptimized
        }

        private enum CodingKeys: String, CodingKey {
            case ebsBlockDeviceConfigs = "EbsBlockDeviceConfigs"
            case ebsOptimized = "EbsOptimized"
        }
    }

    public struct DeleteSecurityConfigurationOutput: AWSShape {

        public init() {
        }

    }

    public struct SpotProvisioningSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeoutAction", required: true, type: .enum), 
            AWSShapeMember(label: "TimeoutDurationMinutes", required: true, type: .integer), 
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer)
        ]
        /// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired. Spot instances are not uprovisioned within the Spot provisioining timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
        public let timeoutAction: SpotProvisioningTimeoutAction
        /// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
        public let timeoutDurationMinutes: Int32
        /// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. 
        public let blockDurationMinutes: Int32?

        public init(blockDurationMinutes: Int32? = nil, timeoutAction: SpotProvisioningTimeoutAction, timeoutDurationMinutes: Int32) {
            self.timeoutAction = timeoutAction
            self.timeoutDurationMinutes = timeoutDurationMinutes
            self.blockDurationMinutes = blockDurationMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutAction = "TimeoutAction"
            case timeoutDurationMinutes = "TimeoutDurationMinutes"
            case blockDurationMinutes = "BlockDurationMinutes"
        }
    }

    public enum InstanceFleetStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case clusterTerminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public class Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "Properties", required: false, type: .map), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// The classification within a configuration.
        public let classification: String?
        /// A set of properties specified within a configuration classification.
        public let properties: [String: String]?
        /// A list of additional configurations to apply within a configuration object.
        public let configurations: [Configuration]?

        public init(classification: String? = nil, configurations: [Configuration]? = nil, properties: [String: String]? = nil) {
            self.classification = classification
            self.properties = properties
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case classification = "Classification"
            case properties = "Properties"
            case configurations = "Configurations"
        }
    }

    public enum RepoUpgradeOnBoot: String, CustomStringConvertible, Codable {
        case security = "SECURITY"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct ListStepsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "StepIds", required: false, type: .list), 
            AWSShapeMember(label: "StepStates", required: false, type: .list), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The filter to limit the step list based on the identifier of the steps.
        public let stepIds: [String]?
        /// The filter to limit the step list based on certain states.
        public let stepStates: [StepState]?
        /// The identifier of the cluster for which to list the steps.
        public let clusterId: String

        public init(clusterId: String, marker: String? = nil, stepIds: [String]? = nil, stepStates: [StepState]? = nil) {
            self.marker = marker
            self.stepIds = stepIds
            self.stepStates = stepStates
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case stepIds = "StepIds"
            case stepStates = "StepStates"
            case clusterId = "ClusterId"
        }
    }

    public struct AddJobFlowStepsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "Steps", required: true, type: .list)
        ]
        /// A string that uniquely identifies the job flow. This identifier is returned by RunJobFlow and can also be obtained from ListClusters. 
        public let jobFlowId: String
        ///  A list of StepConfig to be executed by the job flow. 
        public let steps: [StepConfig]

        public init(jobFlowId: String, steps: [StepConfig]) {
            self.jobFlowId = jobFlowId
            self.steps = steps
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
            case steps = "Steps"
        }
    }

    public struct CreateSecurityConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp)
        ]
        /// The name of the security configuration.
        public let name: String
        /// The date and time the security configuration was created.
        public let creationDateTime: TimeStamp

        public init(creationDateTime: TimeStamp, name: String) {
            self.name = name
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDateTime = "CreationDateTime"
        }
    }

    public enum MarketType: String, CustomStringConvertible, Codable {
        case onDemand = "ON_DEMAND"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public struct JobFlowDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "AmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionStatusDetail", required: true, type: .structure), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "SupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean), 
            AWSShapeMember(label: "Instances", required: true, type: .structure), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowRole", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The job flow identifier.
        public let jobFlowId: String
        /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
        public let amiVersion: String?
        /// Describes the execution status of the job flow.
        public let executionStatusDetail: JobFlowExecutionStatusDetail
        /// The location in Amazon S3 where log files for the job are stored.
        public let logUri: String?
        /// A list of strings set by third party software when the job flow is launched. If you are not using third party software to manage the job flow this value is empty.
        public let supportedProducts: [String]?
        /// Specifies whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to false, only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action.
        public let visibleToAllUsers: Bool?
        /// Describes the Amazon EC2 instances of the job flow.
        public let instances: JobFlowInstancesDetail
        /// A list of the bootstrap actions run by the job flow.
        public let bootstrapActions: [BootstrapActionDetail]?
        /// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
        public let jobFlowRole: String?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// A list of steps run by the job flow.
        public let steps: [StepDetail]?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// The name of the job flow.
        public let name: String

        public init(amiVersion: String? = nil, autoScalingRole: String? = nil, bootstrapActions: [BootstrapActionDetail]? = nil, executionStatusDetail: JobFlowExecutionStatusDetail, instances: JobFlowInstancesDetail, jobFlowId: String, jobFlowRole: String? = nil, logUri: String? = nil, name: String, scaleDownBehavior: ScaleDownBehavior? = nil, serviceRole: String? = nil, steps: [StepDetail]? = nil, supportedProducts: [String]? = nil, visibleToAllUsers: Bool? = nil) {
            self.jobFlowId = jobFlowId
            self.amiVersion = amiVersion
            self.executionStatusDetail = executionStatusDetail
            self.logUri = logUri
            self.supportedProducts = supportedProducts
            self.visibleToAllUsers = visibleToAllUsers
            self.instances = instances
            self.bootstrapActions = bootstrapActions
            self.jobFlowRole = jobFlowRole
            self.serviceRole = serviceRole
            self.autoScalingRole = autoScalingRole
            self.steps = steps
            self.scaleDownBehavior = scaleDownBehavior
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
            case amiVersion = "AmiVersion"
            case executionStatusDetail = "ExecutionStatusDetail"
            case logUri = "LogUri"
            case supportedProducts = "SupportedProducts"
            case visibleToAllUsers = "VisibleToAllUsers"
            case instances = "Instances"
            case bootstrapActions = "BootstrapActions"
            case jobFlowRole = "JobFlowRole"
            case serviceRole = "ServiceRole"
            case autoScalingRole = "AutoScalingRole"
            case steps = "Steps"
            case scaleDownBehavior = "ScaleDownBehavior"
            case name = "Name"
        }
    }

    public struct CancelStepsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelStepsInfoList", required: false, type: .list)
        ]
        /// A list of CancelStepsInfo, which shows the status of specified cancel requests for each StepID specified.
        public let cancelStepsInfoList: [CancelStepsInfo]?

        public init(cancelStepsInfoList: [CancelStepsInfo]? = nil) {
            self.cancelStepsInfoList = cancelStepsInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case cancelStepsInfoList = "CancelStepsInfoList"
        }
    }

    public enum InstanceFleetState: String, CustomStringConvertible, Codable {
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case resizing = "RESIZING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct InstanceGroupDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceRunningCount", required: true, type: .integer), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceRequestCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceRole", required: true, type: .enum), 
            AWSShapeMember(label: "Market", required: true, type: .enum), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string)
        ]
        /// EC2 instance type.
        public let instanceType: String
        /// The date/time the instance group was created.
        public let creationDateTime: TimeStamp
        /// The maximum Spot price your are willing to pay for EC2 instances. An optional, nullable field that applies if the MarketType for the instance group is specified as SPOT. Specified in USD. If the value is NULL and SPOT is specified, the maximum Spot price is set equal to the On-Demand price.
        public let bidPrice: String?
        /// The date/time the instance group was started.
        public let startDateTime: TimeStamp?
        /// Friendly name for the instance group.
        public let name: String?
        /// Actual count of running instances.
        public let instanceRunningCount: Int32
        /// State of instance group. The following values are deprecated: STARTING, TERMINATED, and FAILED.
        public let state: InstanceGroupState
        /// The date/time the instance group was terminated.
        public let endDateTime: TimeStamp?
        /// Unique identifier for the instance group.
        public let instanceGroupId: String?
        /// The date/time the instance group was available to the cluster.
        public let readyDateTime: TimeStamp?
        /// Target number of instances to run in the instance group.
        public let instanceRequestCount: Int32
        /// Instance group role in the cluster
        public let instanceRole: InstanceRoleType
        /// Market type of the EC2 instances used to create a cluster node.
        public let market: MarketType
        /// Details regarding the state of the instance group.
        public let lastStateChangeReason: String?

        public init(bidPrice: String? = nil, creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, instanceGroupId: String? = nil, instanceRequestCount: Int32, instanceRole: InstanceRoleType, instanceRunningCount: Int32, instanceType: String, lastStateChangeReason: String? = nil, market: MarketType, name: String? = nil, readyDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil, state: InstanceGroupState) {
            self.instanceType = instanceType
            self.creationDateTime = creationDateTime
            self.bidPrice = bidPrice
            self.startDateTime = startDateTime
            self.name = name
            self.instanceRunningCount = instanceRunningCount
            self.state = state
            self.endDateTime = endDateTime
            self.instanceGroupId = instanceGroupId
            self.readyDateTime = readyDateTime
            self.instanceRequestCount = instanceRequestCount
            self.instanceRole = instanceRole
            self.market = market
            self.lastStateChangeReason = lastStateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case creationDateTime = "CreationDateTime"
            case bidPrice = "BidPrice"
            case startDateTime = "StartDateTime"
            case name = "Name"
            case instanceRunningCount = "InstanceRunningCount"
            case state = "State"
            case endDateTime = "EndDateTime"
            case instanceGroupId = "InstanceGroupId"
            case readyDateTime = "ReadyDateTime"
            case instanceRequestCount = "InstanceRequestCount"
            case instanceRole = "InstanceRole"
            case market = "Market"
            case lastStateChangeReason = "LastStateChangeReason"
        }
    }

    public struct AddTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon EMR resource identifier to which tags will be added. This value must be a cluster identifier.
        public let resourceId: String
        /// A list of tags to associate with a cluster and propagate to EC2 instances. Tags are user-defined key/value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
        }
    }

    public struct DeleteSecurityConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the security configuration.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct AddInstanceGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowId", required: false, type: .string)
        ]
        /// Instance group IDs of the newly created instance groups.
        public let instanceGroupIds: [String]?
        /// The job flow ID in which the instance groups are added.
        public let jobFlowId: String?

        public init(instanceGroupIds: [String]? = nil, jobFlowId: String? = nil) {
            self.instanceGroupIds = instanceGroupIds
            self.jobFlowId = jobFlowId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupIds = "InstanceGroupIds"
            case jobFlowId = "JobFlowId"
        }
    }

    public struct PlacementType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. AvailabilityZones is used for instance fleets, while AvailabilityZone (singular) is used for uniform instance groups.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public let availabilityZones: [String]?
        /// The Amazon EC2 Availability Zone for the cluster. AvailabilityZone is used for uniform instance groups, while AvailabilityZones (plural) is used for instance fleets.
        public let availabilityZone: String?

        public init(availabilityZone: String? = nil, availabilityZones: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct InstanceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The timeline of the instance status over time.
        public let timeline: InstanceTimeline?
        /// The details of the status change reason for the instance.
        public let stateChangeReason: InstanceStateChangeReason?
        /// The current state of the instance.
        public let state: InstanceState?

        public init(state: InstanceState? = nil, stateChangeReason: InstanceStateChangeReason? = nil, timeline: InstanceTimeline? = nil) {
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
            case state = "State"
        }
    }

    public enum ScaleDownBehavior: String, CustomStringConvertible, Codable {
        case terminateAtInstanceHour = "TERMINATE_AT_INSTANCE_HOUR"
        case terminateAtTaskCompletion = "TERMINATE_AT_TASK_COMPLETION"
        public var description: String { return self.rawValue }
    }

    public struct DescribeJobFlowsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlows", required: false, type: .list)
        ]
        /// A list of job flows matching the parameters supplied.
        public let jobFlows: [JobFlowDetail]?

        public init(jobFlows: [JobFlowDetail]? = nil) {
            self.jobFlows = jobFlows
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlows = "JobFlows"
        }
    }

    public struct RemoveAutoScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string)
        ]
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public let instanceGroupId: String

        public init(clusterId: String, instanceGroupId: String) {
            self.clusterId = clusterId
            self.instanceGroupId = instanceGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceGroupId = "InstanceGroupId"
        }
    }

    public struct EbsBlockDeviceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumesPerInstance", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeSpecification", required: true, type: .structure)
        ]
        /// Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group
        public let volumesPerInstance: Int32?
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public let volumeSpecification: VolumeSpecification

        public init(volumeSpecification: VolumeSpecification, volumesPerInstance: Int32? = nil) {
            self.volumesPerInstance = volumesPerInstance
            self.volumeSpecification = volumeSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case volumesPerInstance = "VolumesPerInstance"
            case volumeSpecification = "VolumeSpecification"
        }
    }

    public struct FailureDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "LogFile", required: false, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .string)
        ]
        /// The descriptive message including the error the EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
        public let message: String?
        /// The path to the log file where the step failure root cause was originally recorded.
        public let logFile: String?
        /// The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
        public let reason: String?

        public init(logFile: String? = nil, message: String? = nil, reason: String? = nil) {
            self.message = message
            self.logFile = logFile
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case logFile = "LogFile"
            case reason = "Reason"
        }
    }

    public struct InstanceFleetTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp)
        ]
        /// The time and date the instance fleet terminated.
        public let endDateTime: TimeStamp?
        /// The time and date the instance fleet was created.
        public let creationDateTime: TimeStamp?
        /// The time and date the instance fleet was ready to run jobs.
        public let readyDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.endDateTime = endDateTime
            self.creationDateTime = creationDateTime
            self.readyDateTime = readyDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case endDateTime = "EndDateTime"
            case creationDateTime = "CreationDateTime"
            case readyDateTime = "ReadyDateTime"
        }
    }

    public struct ScriptBootstrapActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: true, type: .string), 
            AWSShapeMember(label: "Args", required: false, type: .list)
        ]
        /// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
        public let path: String
        /// A list of command line arguments to pass to the bootstrap action script.
        public let args: [String]?

        public init(args: [String]? = nil, path: String) {
            self.path = path
            self.args = args
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
            case args = "Args"
        }
    }

    public struct InstanceTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the instance was terminated.
        public let endDateTime: TimeStamp?
        /// The creation date and time of the instance.
        public let creationDateTime: TimeStamp?
        /// The date and time when the instance was ready to perform tasks.
        public let readyDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.endDateTime = endDateTime
            self.creationDateTime = creationDateTime
            self.readyDateTime = readyDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case endDateTime = "EndDateTime"
            case creationDateTime = "CreationDateTime"
            case readyDateTime = "ReadyDateTime"
        }
    }

    public enum ClusterState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case waiting = "WAITING"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case terminatedWithErrors = "TERMINATED_WITH_ERRORS"
        public var description: String { return self.rawValue }
    }

    public struct StepStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// The timeline of the cluster step status over time.
        public let timeline: StepTimeline?
        /// The details for the step failure including reason, message, and log file path where the root cause was identified.
        public let failureDetails: FailureDetails?
        /// The execution state of the cluster step.
        public let state: StepState?
        /// The reason for the step execution status change.
        public let stateChangeReason: StepStateChangeReason?

        public init(failureDetails: FailureDetails? = nil, state: StepState? = nil, stateChangeReason: StepStateChangeReason? = nil, timeline: StepTimeline? = nil) {
            self.timeline = timeline
            self.failureDetails = failureDetails
            self.state = state
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case timeline = "Timeline"
            case failureDetails = "FailureDetails"
            case state = "State"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "EbsVolumes", required: false, type: .list), 
            AWSShapeMember(label: "PrivateDnsName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]
        /// The public IP address of the instance.
        public let publicIpAddress: String?
        /// The public DNS name of the instance.
        public let publicDnsName: String?
        /// The unique identifier for the instance in Amazon EMR.
        public let id: String?
        /// The EC2 instance type, for example m3.xlarge.
        public let instanceType: String?
        /// The instance purchasing option. Valid values are ON_DEMAND or SPOT. 
        public let market: MarketType?
        /// The list of EBS volumes that are attached to this instance.
        public let ebsVolumes: [EbsVolume]?
        /// The private DNS name of the instance.
        public let privateDnsName: String?
        /// The unique identifier of the instance fleet to which an EC2 instance belongs.
        public let instanceFleetId: String?
        /// The identifier of the instance group to which this instance belongs.
        public let instanceGroupId: String?
        /// The private IP address of the instance.
        public let privateIpAddress: String?
        /// The unique identifier of the instance in Amazon EC2.
        public let ec2InstanceId: String?
        /// The current status of the instance.
        public let status: InstanceStatus?

        public init(ebsVolumes: [EbsVolume]? = nil, ec2InstanceId: String? = nil, id: String? = nil, instanceFleetId: String? = nil, instanceGroupId: String? = nil, instanceType: String? = nil, market: MarketType? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, publicDnsName: String? = nil, publicIpAddress: String? = nil, status: InstanceStatus? = nil) {
            self.publicIpAddress = publicIpAddress
            self.publicDnsName = publicDnsName
            self.id = id
            self.instanceType = instanceType
            self.market = market
            self.ebsVolumes = ebsVolumes
            self.privateDnsName = privateDnsName
            self.instanceFleetId = instanceFleetId
            self.instanceGroupId = instanceGroupId
            self.privateIpAddress = privateIpAddress
            self.ec2InstanceId = ec2InstanceId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case publicIpAddress = "PublicIpAddress"
            case publicDnsName = "PublicDnsName"
            case id = "Id"
            case instanceType = "InstanceType"
            case market = "Market"
            case ebsVolumes = "EbsVolumes"
            case privateDnsName = "PrivateDnsName"
            case instanceFleetId = "InstanceFleetId"
            case instanceGroupId = "InstanceGroupId"
            case privateIpAddress = "PrivateIpAddress"
            case ec2InstanceId = "Ec2InstanceId"
            case status = "Status"
        }
    }

    public struct InstanceFleetStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
        public let timeline: InstanceFleetTimeline?
        /// Provides status change reason details for the instance fleet.
        public let stateChangeReason: InstanceFleetStateChangeReason?
        /// A code representing the instance fleet status.    PROVISIONING—The instance fleet is provisioning EC2 resources and is not yet ready to run jobs.    BOOTSTRAPPING—EC2 instances and other resources have been provisioned and the bootstrap actions specified for the instances are underway.    RUNNING—EC2 instances and other resources are running. They are either executing jobs or waiting to execute jobs.    RESIZING—A resize operation is underway. EC2 instances are either being added or removed.    SUSPENDED—A resize operation could not complete. Existing EC2 instances are running, but instances can't be added or removed.    TERMINATING—The instance fleet is terminating EC2 instances.    TERMINATED—The instance fleet is no longer active, and all EC2 instances have been terminated.  
        public let state: InstanceFleetState?

        public init(state: InstanceFleetState? = nil, stateChangeReason: InstanceFleetStateChangeReason? = nil, timeline: InstanceFleetTimeline? = nil) {
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
            case state = "State"
        }
    }

    public enum InstanceStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case bootstrapFailure = "BOOTSTRAP_FAILURE"
        case clusterTerminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct RemoveAutoScalingPolicyOutput: AWSShape {

        public init() {
        }

    }

    public struct Step: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Config", required: false, type: .structure), 
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum)
        ]
        /// The name of the cluster step.
        public let name: String?
        /// The identifier of the cluster step.
        public let id: String?
        /// The current execution status details of the cluster step.
        public let status: StepStatus?
        /// The Hadoop job configuration of the cluster step.
        public let config: HadoopStepConfig?
        /// This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
        public let actionOnFailure: ActionOnFailure?

        public init(actionOnFailure: ActionOnFailure? = nil, config: HadoopStepConfig? = nil, id: String? = nil, name: String? = nil, status: StepStatus? = nil) {
            self.name = name
            self.id = id
            self.status = status
            self.config = config
            self.actionOnFailure = actionOnFailure
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
            case status = "Status"
            case config = "Config"
            case actionOnFailure = "ActionOnFailure"
        }
    }

    public enum InstanceGroupStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case clusterTerminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct AutoScalingPolicyDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Constraints", required: false, type: .structure)
        ]
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public let rules: [ScalingRule]?
        /// The status of an automatic scaling policy. 
        public let status: AutoScalingPolicyStatus?
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public let constraints: ScalingConstraints?

        public init(constraints: ScalingConstraints? = nil, rules: [ScalingRule]? = nil, status: AutoScalingPolicyStatus? = nil) {
            self.rules = rules
            self.status = status
            self.constraints = constraints
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case status = "Status"
            case constraints = "Constraints"
        }
    }

    public struct ShrinkPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DecommissionTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceResizePolicy", required: false, type: .structure)
        ]
        /// The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
        public let decommissionTimeout: Int32?
        /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
        public let instanceResizePolicy: InstanceResizePolicy?

        public init(decommissionTimeout: Int32? = nil, instanceResizePolicy: InstanceResizePolicy? = nil) {
            self.decommissionTimeout = decommissionTimeout
            self.instanceResizePolicy = instanceResizePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case decommissionTimeout = "DecommissionTimeout"
            case instanceResizePolicy = "InstanceResizePolicy"
        }
    }

    public struct ListBootstrapActionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The bootstrap actions associated with the cluster.
        public let bootstrapActions: [Command]?

        public init(bootstrapActions: [Command]? = nil, marker: String? = nil) {
            self.marker = marker
            self.bootstrapActions = bootstrapActions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case bootstrapActions = "BootstrapActions"
        }
    }

    public struct ListInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Instances", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of instances for the cluster and given filters.
        public let instances: [Instance]?

        public init(instances: [Instance]? = nil, marker: String? = nil) {
            self.marker = marker
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case instances = "Instances"
        }
    }

    public struct RemoveTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon EMR resource identifier from which tags will be removed. This value must be a cluster identifier.
        public let resourceId: String
        /// A list of tag keys to remove from a resource.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagKeys = "TagKeys"
        }
    }

    public struct ListClustersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterStates", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CreatedBefore", required: false, type: .timestamp)
        ]
        /// The cluster state filters to apply when listing clusters.
        public let clusterStates: [ClusterState]?
        /// The creation date and time beginning value filter for listing clusters.
        public let createdAfter: TimeStamp?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The creation date and time end value filter for listing clusters.
        public let createdBefore: TimeStamp?

        public init(clusterStates: [ClusterState]? = nil, createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, marker: String? = nil) {
            self.clusterStates = clusterStates
            self.createdAfter = createdAfter
            self.marker = marker
            self.createdBefore = createdBefore
        }

        private enum CodingKeys: String, CodingKey {
            case clusterStates = "ClusterStates"
            case createdAfter = "CreatedAfter"
            case marker = "Marker"
            case createdBefore = "CreatedBefore"
        }
    }

    public struct StepConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "HadoopJarStep", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The action to take if the step fails.
        public let actionOnFailure: ActionOnFailure?
        /// The JAR file used for the step.
        public let hadoopJarStep: HadoopJarStepConfig
        /// The name of the step.
        public let name: String

        public init(actionOnFailure: ActionOnFailure? = nil, hadoopJarStep: HadoopJarStepConfig, name: String) {
            self.actionOnFailure = actionOnFailure
            self.hadoopJarStep = hadoopJarStep
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case hadoopJarStep = "HadoopJarStep"
            case name = "Name"
        }
    }

    public struct CancelStepsInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "StepId", required: false, type: .string)
        ]
        /// The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
        public let status: CancelStepsRequestStatus?
        /// The reason for the failure if the CancelSteps request fails.
        public let reason: String?
        /// The encrypted StepId of a step.
        public let stepId: String?

        public init(reason: String? = nil, status: CancelStepsRequestStatus? = nil, stepId: String? = nil) {
            self.status = status
            self.reason = reason
            self.stepId = stepId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case reason = "Reason"
            case stepId = "StepId"
        }
    }

    public struct JobFlowInstancesDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SlaveInstanceType", required: true, type: .string), 
            AWSShapeMember(label: "HadoopVersion", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "MasterInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "MasterPublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean), 
            AWSShapeMember(label: "KeepJobFlowAliveWhenNoSteps", required: false, type: .boolean), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "MasterInstanceType", required: true, type: .string)
        ]
        /// The Amazon EC2 slave node instance type.
        public let slaveInstanceType: String
        /// The Hadoop version for the cluster.
        public let hadoopVersion: String?
        /// Details about the instance groups in a cluster.
        public let instanceGroups: [InstanceGroupDetail]?
        /// The Amazon EC2 instance identifier of the master node.
        public let masterInstanceId: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour that an m1.small runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int32?
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public let ec2SubnetId: String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public let masterPublicDnsName: String?
        /// The Amazon EC2 Availability Zone for the cluster.
        public let placement: PlacementType?
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public let terminationProtected: Bool?
        /// Specifies whether the cluster should remain available after completing all steps.
        public let keepJobFlowAliveWhenNoSteps: Bool?
        /// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
        public let ec2KeyName: String?
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and slave node. If the value is greater than 1, one instance is the master node and all others are slave nodes.
        public let instanceCount: Int32
        /// The Amazon EC2 master node instance type.
        public let masterInstanceType: String

        public init(ec2KeyName: String? = nil, ec2SubnetId: String? = nil, hadoopVersion: String? = nil, instanceCount: Int32, instanceGroups: [InstanceGroupDetail]? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, masterInstanceId: String? = nil, masterInstanceType: String, masterPublicDnsName: String? = nil, normalizedInstanceHours: Int32? = nil, placement: PlacementType? = nil, slaveInstanceType: String, terminationProtected: Bool? = nil) {
            self.slaveInstanceType = slaveInstanceType
            self.hadoopVersion = hadoopVersion
            self.instanceGroups = instanceGroups
            self.masterInstanceId = masterInstanceId
            self.normalizedInstanceHours = normalizedInstanceHours
            self.ec2SubnetId = ec2SubnetId
            self.masterPublicDnsName = masterPublicDnsName
            self.placement = placement
            self.terminationProtected = terminationProtected
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.ec2KeyName = ec2KeyName
            self.instanceCount = instanceCount
            self.masterInstanceType = masterInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case slaveInstanceType = "SlaveInstanceType"
            case hadoopVersion = "HadoopVersion"
            case instanceGroups = "InstanceGroups"
            case masterInstanceId = "MasterInstanceId"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case ec2SubnetId = "Ec2SubnetId"
            case masterPublicDnsName = "MasterPublicDnsName"
            case placement = "Placement"
            case terminationProtected = "TerminationProtected"
            case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
            case ec2KeyName = "Ec2KeyName"
            case instanceCount = "InstanceCount"
            case masterInstanceType = "MasterInstanceType"
        }
    }

    public struct ListInstanceFleetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleets", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of instance fleets for the cluster and given filters.
        public let instanceFleets: [InstanceFleet]?

        public init(instanceFleets: [InstanceFleet]? = nil, marker: String? = nil) {
            self.marker = marker
            self.instanceFleets = instanceFleets
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case instanceFleets = "InstanceFleets"
        }
    }

    public struct PutAutoScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingPolicy", required: true, type: .structure)
        ]
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String
        /// Specifies the ID of the instance group to which the automatic scaling policy is applied.
        public let instanceGroupId: String
        /// Specifies the definition of the automatic scaling policy.
        public let autoScalingPolicy: AutoScalingPolicy

        public init(autoScalingPolicy: AutoScalingPolicy, clusterId: String, instanceGroupId: String) {
            self.clusterId = clusterId
            self.instanceGroupId = instanceGroupId
            self.autoScalingPolicy = autoScalingPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceGroupId = "InstanceGroupId"
            case autoScalingPolicy = "AutoScalingPolicy"
        }
    }

    public struct CreateSecurityConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityConfiguration", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The security configuration details in JSON format. For JSON parameters and examples, see Use Security Configurations to Set Up Cluster Security in the Amazon EMR Management Guide.
        public let securityConfiguration: String
        /// The name of the security configuration.
        public let name: String

        public init(name: String, securityConfiguration: String) {
            self.securityConfiguration = securityConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case securityConfiguration = "SecurityConfiguration"
            case name = "Name"
        }
    }

    public struct InstanceStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// The status change reason description.
        public let message: String?
        /// The programmable code for the state change reason.
        public let code: InstanceStateChangeReasonCode?

        public init(code: InstanceStateChangeReasonCode? = nil, message: String? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case code = "Code"
        }
    }

    public enum InstanceGroupType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public struct AddJobFlowStepsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepIds", required: false, type: .list)
        ]
        /// The identifiers of the list of steps added to the job flow.
        public let stepIds: [String]?

        public init(stepIds: [String]? = nil) {
            self.stepIds = stepIds
        }

        private enum CodingKeys: String, CodingKey {
            case stepIds = "StepIds"
        }
    }

    public struct InstanceGroupConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "InstanceRole", required: true, type: .enum), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "EbsConfiguration", required: false, type: .structure)
        ]
        /// Friendly name given to the instance group.
        public let name: String?
        /// Target number of instances for the instance group.
        public let instanceCount: Int32
        /// The EC2 instance type for all instances in the instance group.
        public let instanceType: String
        /// Market type of the EC2 instances used to create a cluster node.
        public let market: MarketType?
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public let configurations: [Configuration]?
        /// The role of the instance group in the cluster.
        public let instanceRole: InstanceRoleType
        /// The maximum Spot price your are willing to pay for EC2 instances. An optional, nullable field that applies if the MarketType for the instance group is specified as SPOT. Specify the maximum spot price in USD. If the value is NULL and SPOT is specified, the maximum Spot price is set equal to the On-Demand price.
        public let bidPrice: String?
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public let autoScalingPolicy: AutoScalingPolicy?
        /// EBS configurations that will be attached to each EC2 instance in the instance group.
        public let ebsConfiguration: EbsConfiguration?

        public init(autoScalingPolicy: AutoScalingPolicy? = nil, bidPrice: String? = nil, configurations: [Configuration]? = nil, ebsConfiguration: EbsConfiguration? = nil, instanceCount: Int32, instanceRole: InstanceRoleType, instanceType: String, market: MarketType? = nil, name: String? = nil) {
            self.name = name
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.market = market
            self.configurations = configurations
            self.instanceRole = instanceRole
            self.bidPrice = bidPrice
            self.autoScalingPolicy = autoScalingPolicy
            self.ebsConfiguration = ebsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case market = "Market"
            case configurations = "Configurations"
            case instanceRole = "InstanceRole"
            case bidPrice = "BidPrice"
            case autoScalingPolicy = "AutoScalingPolicy"
            case ebsConfiguration = "EbsConfiguration"
        }
    }

    public struct KerberosAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ADDomainJoinUser", required: false, type: .string), 
            AWSShapeMember(label: "KdcAdminPassword", required: true, type: .string), 
            AWSShapeMember(label: "ADDomainJoinPassword", required: false, type: .string), 
            AWSShapeMember(label: "CrossRealmTrustPrincipalPassword", required: false, type: .string), 
            AWSShapeMember(label: "Realm", required: true, type: .string)
        ]
        /// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
        public let aDDomainJoinUser: String?
        /// The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.
        public let kdcAdminPassword: String
        /// The Active Directory password for ADDomainJoinUser.
        public let aDDomainJoinPassword: String?
        /// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.
        public let crossRealmTrustPrincipalPassword: String?
        /// The name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL. 
        public let realm: String

        public init(aDDomainJoinPassword: String? = nil, aDDomainJoinUser: String? = nil, crossRealmTrustPrincipalPassword: String? = nil, kdcAdminPassword: String, realm: String) {
            self.aDDomainJoinUser = aDDomainJoinUser
            self.kdcAdminPassword = kdcAdminPassword
            self.aDDomainJoinPassword = aDDomainJoinPassword
            self.crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword
            self.realm = realm
        }

        private enum CodingKeys: String, CodingKey {
            case aDDomainJoinUser = "ADDomainJoinUser"
            case kdcAdminPassword = "KdcAdminPassword"
            case aDDomainJoinPassword = "ADDomainJoinPassword"
            case crossRealmTrustPrincipalPassword = "CrossRealmTrustPrincipalPassword"
            case realm = "Realm"
        }
    }

    public struct AddTagsOutput: AWSShape {

        public init() {
        }

    }

    public struct Application: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .map), 
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The name of the application.
        public let name: String?
        /// This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
        public let additionalInfo: [String: String]?
        /// Arguments for Amazon EMR to pass to the application.
        public let args: [String]?
        /// The version of the application.
        public let version: String?

        public init(additionalInfo: [String: String]? = nil, args: [String]? = nil, name: String? = nil, version: String? = nil) {
            self.name = name
            self.additionalInfo = additionalInfo
            self.args = args
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case additionalInfo = "AdditionalInfo"
            case args = "Args"
            case version = "Version"
        }
    }

    public struct ClusterTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the cluster was ready to execute steps.
        public let readyDateTime: TimeStamp?
        /// The date and time when the cluster was terminated.
        public let endDateTime: TimeStamp?
        /// The creation date and time of the cluster.
        public let creationDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.readyDateTime = readyDateTime
            self.endDateTime = endDateTime
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case readyDateTime = "ReadyDateTime"
            case endDateTime = "EndDateTime"
            case creationDateTime = "CreationDateTime"
        }
    }

    public struct RemoveTagsOutput: AWSShape {

        public init() {
        }

    }

    public struct InstanceGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// The current state of the instance group.
        public let state: InstanceGroupState?
        /// The timeline of the instance group status over time.
        public let timeline: InstanceGroupTimeline?
        /// The status change reason details for the instance group.
        public let stateChangeReason: InstanceGroupStateChangeReason?

        public init(state: InstanceGroupState? = nil, stateChangeReason: InstanceGroupStateChangeReason? = nil, timeline: InstanceGroupTimeline? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct ListStepsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The filtered list of steps for the cluster.
        public let steps: [StepSummary]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(marker: String? = nil, steps: [StepSummary]? = nil) {
            self.steps = steps
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case steps = "Steps"
            case marker = "Marker"
        }
    }

    public struct InstanceGroupTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the instance group terminated.
        public let endDateTime: TimeStamp?
        /// The date and time when the instance group became ready to perform tasks.
        public let readyDateTime: TimeStamp?
        /// The creation date and time of the instance group.
        public let creationDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case endDateTime = "EndDateTime"
            case readyDateTime = "ReadyDateTime"
            case creationDateTime = "CreationDateTime"
        }
    }

    public struct BootstrapActionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BootstrapActionConfig", required: false, type: .structure)
        ]
        /// A description of the bootstrap action.
        public let bootstrapActionConfig: BootstrapActionConfig?

        public init(bootstrapActionConfig: BootstrapActionConfig? = nil) {
            self.bootstrapActionConfig = bootstrapActionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case bootstrapActionConfig = "BootstrapActionConfig"
        }
    }

    public struct CloudWatchAlarmDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "MetricName", required: true, type: .string)
        ]
        /// A CloudWatch metric dimension.
        public let dimensions: [MetricDimension]?
        /// The value against which the specified statistic is compared.
        public let threshold: Double
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public let namespace: String?
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public let statistic: Statistic?
        /// The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify 300.
        public let period: Int32
        /// The number of periods, expressed in seconds using Period, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public let evaluationPeriods: Int32?
        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        public let comparisonOperator: ComparisonOperator
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public let unit: Unit?
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        public let metricName: String

        public init(comparisonOperator: ComparisonOperator, dimensions: [MetricDimension]? = nil, evaluationPeriods: Int32? = nil, metricName: String, namespace: String? = nil, period: Int32, statistic: Statistic? = nil, threshold: Double, unit: Unit? = nil) {
            self.dimensions = dimensions
            self.threshold = threshold
            self.namespace = namespace
            self.statistic = statistic
            self.period = period
            self.evaluationPeriods = evaluationPeriods
            self.comparisonOperator = comparisonOperator
            self.unit = unit
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case threshold = "Threshold"
            case namespace = "Namespace"
            case statistic = "Statistic"
            case period = "Period"
            case evaluationPeriods = "EvaluationPeriods"
            case comparisonOperator = "ComparisonOperator"
            case unit = "Unit"
            case metricName = "MetricName"
        }
    }

    public struct ScalingRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Trigger", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: true, type: .structure)
        ]
        /// The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
        public let name: String
        /// The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
        public let trigger: ScalingTrigger
        /// A friendly, more verbose description of the automatic scaling rule.
        public let description: String?
        /// The conditions that trigger an automatic scaling activity.
        public let action: ScalingAction

        public init(action: ScalingAction, description: String? = nil, name: String, trigger: ScalingTrigger) {
            self.name = name
            self.trigger = trigger
            self.description = description
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case trigger = "Trigger"
            case description = "Description"
            case action = "Action"
        }
    }

    public struct InstanceGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RunningInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceGroupType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "EbsBlockDevices", required: false, type: .list), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "RequestedInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ShrinkPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// The number of instances currently running in this instance group.
        public let runningInstanceCount: Int32?
        /// The maximum Spot price your are willing to pay for EC2 instances. An optional, nullable field that applies if the MarketType for the instance group is specified as SPOT. Specify the maximum spot price in USD. If the value is NULL and SPOT is specified, the maximum Spot price is set equal to the On-Demand price.
        public let bidPrice: String?
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public let ebsOptimized: Bool?
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public let instanceGroupType: InstanceGroupType?
        /// The EC2 instance type for all instances in the instance group.
        public let instanceType: String?
        /// The current status of the instance group.
        public let status: InstanceGroupStatus?
        /// The EBS block devices that are mapped to this instance group.
        public let ebsBlockDevices: [EbsBlockDevice]?
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public let market: MarketType?
        /// The target number of instances for the instance group.
        public let requestedInstanceCount: Int32?
        /// Policy for customizing shrink operations.
        public let shrinkPolicy: ShrinkPolicy?
        /// The name of the instance group.
        public let name: String?
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public let autoScalingPolicy: AutoScalingPolicyDescription?
        /// The identifier of the instance group.
        public let id: String?
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public let configurations: [Configuration]?

        public init(autoScalingPolicy: AutoScalingPolicyDescription? = nil, bidPrice: String? = nil, configurations: [Configuration]? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, ebsOptimized: Bool? = nil, id: String? = nil, instanceGroupType: InstanceGroupType? = nil, instanceType: String? = nil, market: MarketType? = nil, name: String? = nil, requestedInstanceCount: Int32? = nil, runningInstanceCount: Int32? = nil, shrinkPolicy: ShrinkPolicy? = nil, status: InstanceGroupStatus? = nil) {
            self.runningInstanceCount = runningInstanceCount
            self.bidPrice = bidPrice
            self.ebsOptimized = ebsOptimized
            self.instanceGroupType = instanceGroupType
            self.instanceType = instanceType
            self.status = status
            self.ebsBlockDevices = ebsBlockDevices
            self.market = market
            self.requestedInstanceCount = requestedInstanceCount
            self.shrinkPolicy = shrinkPolicy
            self.name = name
            self.autoScalingPolicy = autoScalingPolicy
            self.id = id
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case runningInstanceCount = "RunningInstanceCount"
            case bidPrice = "BidPrice"
            case ebsOptimized = "EbsOptimized"
            case instanceGroupType = "InstanceGroupType"
            case instanceType = "InstanceType"
            case status = "Status"
            case ebsBlockDevices = "EbsBlockDevices"
            case market = "Market"
            case requestedInstanceCount = "RequestedInstanceCount"
            case shrinkPolicy = "ShrinkPolicy"
            case name = "Name"
            case autoScalingPolicy = "AutoScalingPolicy"
            case id = "Id"
            case configurations = "Configurations"
        }
    }

    public struct KeyValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The unique identifier of a key value pair.
        public let key: String?
        /// The value part of the identified key.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ScalingTrigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchAlarmDefinition", required: true, type: .structure)
        ]
        /// The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
        public let cloudWatchAlarmDefinition: CloudWatchAlarmDefinition

        public init(cloudWatchAlarmDefinition: CloudWatchAlarmDefinition) {
            self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchAlarmDefinition = "CloudWatchAlarmDefinition"
        }
    }

    public enum ActionOnFailure: String, CustomStringConvertible, Codable {
        case terminateJobFlow = "TERMINATE_JOB_FLOW"
        case terminateCluster = "TERMINATE_CLUSTER"
        case cancelAndWait = "CANCEL_AND_WAIT"
        case `continue` = "CONTINUE"
        public var description: String { return self.rawValue }
    }

    public struct InstanceGroupStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// The status change reason description.
        public let message: String?
        /// The programmable code for the state change reason.
        public let code: InstanceGroupStateChangeReasonCode?

        public init(code: InstanceGroupStateChangeReasonCode? = nil, message: String? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case code = "Code"
        }
    }

    public struct DescribeSecurityConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string)
        ]
        /// The name of the security configuration.
        public let name: String?
        /// The date and time the security configuration was created
        public let creationDateTime: TimeStamp?
        /// The security configuration details in JSON format.
        public let securityConfiguration: String?

        public init(creationDateTime: TimeStamp? = nil, name: String? = nil, securityConfiguration: String? = nil) {
            self.name = name
            self.creationDateTime = creationDateTime
            self.securityConfiguration = securityConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDateTime = "CreationDateTime"
            case securityConfiguration = "SecurityConfiguration"
        }
    }

    public struct StepTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the cluster step was created.
        public let creationDateTime: TimeStamp?
        /// The date and time when the cluster step execution started.
        public let startDateTime: TimeStamp?
        /// The date and time when the cluster step execution completed or failed.
        public let endDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil) {
            self.creationDateTime = creationDateTime
            self.startDateTime = startDateTime
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case startDateTime = "StartDateTime"
            case endDateTime = "EndDateTime"
        }
    }

    public struct SupportedProductConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The list of user-supplied arguments.
        public let args: [String]?
        /// The name of the product configuration.
        public let name: String?

        public init(args: [String]? = nil, name: String? = nil) {
            self.args = args
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case name = "Name"
        }
    }

    public struct AutoScalingPolicyStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The reason for a change in status.
        public let stateChangeReason: AutoScalingPolicyStateChangeReason?
        /// Indicates the status of the automatic scaling policy.
        public let state: AutoScalingPolicyState?

        public init(state: AutoScalingPolicyState? = nil, stateChangeReason: AutoScalingPolicyStateChangeReason? = nil) {
            self.stateChangeReason = stateChangeReason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case stateChangeReason = "StateChangeReason"
            case state = "State"
        }
    }

    public struct ModifyInstanceGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string)
        ]
        /// Instance groups to change.
        public let instanceGroups: [InstanceGroupModifyConfig]?
        /// The ID of the cluster to which the instance group belongs.
        public let clusterId: String?

        public init(clusterId: String? = nil, instanceGroups: [InstanceGroupModifyConfig]? = nil) {
            self.instanceGroups = instanceGroups
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroups = "InstanceGroups"
            case clusterId = "ClusterId"
        }
    }

    public enum InstanceFleetType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public struct DescribeStepInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "StepId", required: true, type: .string)
        ]
        /// The identifier of the cluster with steps to describe.
        public let clusterId: String
        /// The identifier of the step to describe.
        public let stepId: String

        public init(clusterId: String, stepId: String) {
            self.clusterId = clusterId
            self.stepId = stepId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case stepId = "StepId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// A user-defined value, which is optional in a tag. For more information, see Tag Clusters. 
        public let value: String?
        /// A user-defined key, which is the minimum required information for a valid tag. For more information, see Tag . 
        public let key: String?

        public init(key: String? = nil, value: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public enum Statistic: String, CustomStringConvertible, Codable {
        case sampleCount = "SAMPLE_COUNT"
        case average = "AVERAGE"
        case sum = "SUM"
        case minimum = "MINIMUM"
        case maximum = "MAXIMUM"
        public var description: String { return self.rawValue }
    }

    public struct SimpleScalingPolicyConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoolDown", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer), 
            AWSShapeMember(label: "AdjustmentType", required: false, type: .enum)
        ]
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
        public let coolDown: Int32?
        /// The amount by which to scale in or scale out, based on the specified AdjustmentType. A positive value adds to the instance group's EC2 instance count while a negative number removes instances. If AdjustmentType is set to EXACT_CAPACITY, the number should only be a positive integer. If AdjustmentType is set to PERCENT_CHANGE_IN_CAPACITY, the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity.
        public let scalingAdjustment: Int32
        /// The way in which EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) each time the scaling activity is triggered. CHANGE_IN_CAPACITY is the default. CHANGE_IN_CAPACITY indicates that the EC2 instance count increments or decrements by ScalingAdjustment, which should be expressed as an integer. PERCENT_CHANGE_IN_CAPACITY indicates the instance count increments or decrements by the percentage specified by ScalingAdjustment, which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. EXACT_CAPACITY indicates the scaling activity results in an instance group with the number of EC2 instances specified by ScalingAdjustment, which should be expressed as a positive integer.
        public let adjustmentType: AdjustmentType?

        public init(adjustmentType: AdjustmentType? = nil, coolDown: Int32? = nil, scalingAdjustment: Int32) {
            self.coolDown = coolDown
            self.scalingAdjustment = scalingAdjustment
            self.adjustmentType = adjustmentType
        }

        private enum CodingKeys: String, CodingKey {
            case coolDown = "CoolDown"
            case scalingAdjustment = "ScalingAdjustment"
            case adjustmentType = "AdjustmentType"
        }
    }

    public struct ListInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceStates", required: false, type: .list), 
            AWSShapeMember(label: "InstanceFleetType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroupTypes", required: false, type: .list), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of instance states that will filter the instances returned with this request.
        public let instanceStates: [InstanceState]?
        /// The node type of the instance fleet. For example MASTER, CORE, or TASK.
        public let instanceFleetType: InstanceFleetType?
        /// The unique identifier of the instance fleet.
        public let instanceFleetId: String?
        /// The identifier of the cluster for which to list the instances.
        public let clusterId: String
        /// The type of instance group for which to list the instances.
        public let instanceGroupTypes: [InstanceGroupType]?
        /// The identifier of the instance group for which to list the instances.
        public let instanceGroupId: String?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterId: String, instanceFleetId: String? = nil, instanceFleetType: InstanceFleetType? = nil, instanceGroupId: String? = nil, instanceGroupTypes: [InstanceGroupType]? = nil, instanceStates: [InstanceState]? = nil, marker: String? = nil) {
            self.instanceStates = instanceStates
            self.instanceFleetType = instanceFleetType
            self.instanceFleetId = instanceFleetId
            self.clusterId = clusterId
            self.instanceGroupTypes = instanceGroupTypes
            self.instanceGroupId = instanceGroupId
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStates = "InstanceStates"
            case instanceFleetType = "InstanceFleetType"
            case instanceFleetId = "InstanceFleetId"
            case clusterId = "ClusterId"
            case instanceGroupTypes = "InstanceGroupTypes"
            case instanceGroupId = "InstanceGroupId"
            case marker = "Marker"
        }
    }

    public struct ModifyInstanceFleetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleet", required: true, type: .structure), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The unique identifier of the instance fleet.
        public let instanceFleet: InstanceFleetModifyConfig
        /// The unique identifier of the cluster.
        public let clusterId: String

        public init(clusterId: String, instanceFleet: InstanceFleetModifyConfig) {
            self.instanceFleet = instanceFleet
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleet = "InstanceFleet"
            case clusterId = "ClusterId"
        }
    }

    public struct EbsBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "Device", required: false, type: .string)
        ]
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public let volumeSpecification: VolumeSpecification?
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public let device: String?

        public init(device: String? = nil, volumeSpecification: VolumeSpecification? = nil) {
            self.volumeSpecification = volumeSpecification
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSpecification = "VolumeSpecification"
            case device = "Device"
        }
    }

}