// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
API for AWS Elemental MediaLive
*/
public struct Medialive {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "medialive",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-10-14",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [MedialiveError.self]
        )
    }

    ///  Produces details about an input
    public func describeInput(_ input: DescribeInputRequest) throws -> DescribeInputResponse {
        return try client.send(operation: "DescribeInput", path: "/prod/inputs/{inputId}", httpMethod: "GET", input: input)
    }

    ///  Starts deletion of channel. The associated outputs are also deleted.
    public func deleteChannel(_ input: DeleteChannelRequest) throws -> DeleteChannelResponse {
        return try client.send(operation: "DeleteChannel", path: "/prod/channels/{channelId}", httpMethod: "DELETE", input: input)
    }

    ///  Creates a Input Security Group
    public func createInputSecurityGroup(_ input: CreateInputSecurityGroupRequest) throws -> CreateInputSecurityGroupResponse {
        return try client.send(operation: "CreateInputSecurityGroup", path: "/prod/inputSecurityGroups", httpMethod: "POST", input: input)
    }

    ///  Produces list of channels that have been created
    public func listChannels(_ input: ListChannelsRequest) throws -> ListChannelsResponse {
        return try client.send(operation: "ListChannels", path: "/prod/channels", httpMethod: "GET", input: input)
    }

    ///  Produces a list of Input Security Groups for an account
    public func listInputSecurityGroups(_ input: ListInputSecurityGroupsRequest) throws -> ListInputSecurityGroupsResponse {
        return try client.send(operation: "ListInputSecurityGroups", path: "/prod/inputSecurityGroups", httpMethod: "GET", input: input)
    }

    ///  Deletes the input end point
    public func deleteInput(_ input: DeleteInputRequest) throws -> DeleteInputResponse {
        return try client.send(operation: "DeleteInput", path: "/prod/inputs/{inputId}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes an Input Security Group
    public func deleteInputSecurityGroup(_ input: DeleteInputSecurityGroupRequest) throws -> DeleteInputSecurityGroupResponse {
        return try client.send(operation: "DeleteInputSecurityGroup", path: "/prod/inputSecurityGroups/{inputSecurityGroupId}", httpMethod: "DELETE", input: input)
    }

    ///  Create an input
    public func createInput(_ input: CreateInputRequest) throws -> CreateInputResponse {
        return try client.send(operation: "CreateInput", path: "/prod/inputs", httpMethod: "POST", input: input)
    }

    ///  Gets details about a channel
    public func describeChannel(_ input: DescribeChannelRequest) throws -> DescribeChannelResponse {
        return try client.send(operation: "DescribeChannel", path: "/prod/channels/{channelId}", httpMethod: "GET", input: input)
    }

    ///  Starts an existing channel
    public func startChannel(_ input: StartChannelRequest) throws -> StartChannelResponse {
        return try client.send(operation: "StartChannel", path: "/prod/channels/{channelId}/start", httpMethod: "POST", input: input)
    }

    ///  Stops a running channel
    public func stopChannel(_ input: StopChannelRequest) throws -> StopChannelResponse {
        return try client.send(operation: "StopChannel", path: "/prod/channels/{channelId}/stop", httpMethod: "POST", input: input)
    }

    ///  Creates a new channel
    public func createChannel(_ input: CreateChannelRequest) throws -> CreateChannelResponse {
        return try client.send(operation: "CreateChannel", path: "/prod/channels", httpMethod: "POST", input: input)
    }

    ///  Produces a summary of an Input Security Group
    public func describeInputSecurityGroup(_ input: DescribeInputSecurityGroupRequest) throws -> DescribeInputSecurityGroupResponse {
        return try client.send(operation: "DescribeInputSecurityGroup", path: "/prod/inputSecurityGroups/{inputSecurityGroupId}", httpMethod: "GET", input: input)
    }

    ///  Produces list of inputs that have been created
    public func listInputs(_ input: ListInputsRequest) throws -> ListInputsResponse {
        return try client.send(operation: "ListInputs", path: "/prod/inputs", httpMethod: "GET", input: input)
    }


}