// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension MturkRequester {

    public struct HIT: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoApprovalDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "HITLayoutId", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfAssignmentsCompleted", required: false, type: .integer), 
            AWSShapeMember(label: "NumberOfAssignmentsAvailable", required: false, type: .integer), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "HITGroupId", required: false, type: .string), 
            AWSShapeMember(label: "Reward", required: false, type: .string), 
            AWSShapeMember(label: "HITReviewStatus", required: false, type: .enum), 
            AWSShapeMember(label: "HITTypeId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "MaxAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "HITStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Expiration", required: false, type: .timestamp), 
            AWSShapeMember(label: "QualificationRequirements", required: false, type: .list), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "Question", required: false, type: .string), 
            AWSShapeMember(label: "RequesterAnnotation", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfAssignmentsPending", required: false, type: .integer)
        ]
        /// The amount of time, in seconds, after the Worker submits an assignment for the HIT that the results are automatically approved by Amazon Mechanical Turk. This is the amount of time the Requester has to reject an assignment submitted by a Worker before the assignment is auto-approved and the Worker is paid. 
        public let autoApprovalDelayInSeconds: Int64?
        ///  The ID of the HIT Layout of this HIT.
        public let hITLayoutId: String?
        ///  The number of assignments for this HIT that have been approved or rejected.
        public let numberOfAssignmentsCompleted: Int32?
        ///  The number of assignments for this HIT that are available for Workers to accept.
        public let numberOfAssignmentsAvailable: Int32?
        ///  The title of the HIT.
        public let title: String?
        ///  The length of time, in seconds, that a Worker has to complete the HIT after accepting it.
        public let assignmentDurationInSeconds: Int64?
        ///  The date and time the HIT was created.
        public let creationTime: TimeStamp?
        ///  The ID of the HIT Group of this HIT.
        public let hITGroupId: String?
        public let reward: String?
        ///  Indicates the review status of the HIT. Valid Values are NotReviewed | MarkedForReview | ReviewedAppropriate | ReviewedInappropriate.
        public let hITReviewStatus: HITReviewStatus?
        /// The ID of the HIT type of this HIT
        public let hITTypeId: String?
        ///  A general description of the HIT.
        public let description: String?
        /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable. 
        public let maxAssignments: Int32?
        ///  A unique identifier for the HIT.
        public let hITId: String?
        /// The status of the HIT and its assignments. Valid Values are Assignable | Unassignable | Reviewable | Reviewing | Disposed. 
        public let hITStatus: HITStatus?
        /// The date and time the HIT expires.
        public let expiration: TimeStamp?
        ///  A condition that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met by a Worker's Qualifications for the Worker to accept the HIT.
        public let qualificationRequirements: [QualificationRequirement]?
        ///  One or more words or phrases that describe the HIT, separated by commas. Search terms similar to the keywords of a HIT are more likely to have the HIT in the search results.
        public let keywords: String?
        ///  The data the Worker completing the HIT uses produce the results. This is either either a QuestionForm, HTMLQuestion or an ExternalQuestion data structure.
        public let question: String?
        ///  An arbitrary data field the Requester who created the HIT can use. This field is visible only to the creator of the HIT.
        public let requesterAnnotation: String?
        ///  The number of assignments for this HIT that are being previewed or have been accepted by Workers, but have not yet been submitted, returned, or abandoned.
        public let numberOfAssignmentsPending: Int32?

        public init(autoApprovalDelayInSeconds: Int64? = nil, hITLayoutId: String? = nil, numberOfAssignmentsCompleted: Int32? = nil, numberOfAssignmentsAvailable: Int32? = nil, title: String? = nil, assignmentDurationInSeconds: Int64? = nil, creationTime: TimeStamp? = nil, hITGroupId: String? = nil, reward: String? = nil, hITReviewStatus: HITReviewStatus? = nil, hITTypeId: String? = nil, description: String? = nil, maxAssignments: Int32? = nil, hITId: String? = nil, hITStatus: HITStatus? = nil, expiration: TimeStamp? = nil, qualificationRequirements: [QualificationRequirement]? = nil, keywords: String? = nil, question: String? = nil, requesterAnnotation: String? = nil, numberOfAssignmentsPending: Int32? = nil) {
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.hITLayoutId = hITLayoutId
            self.numberOfAssignmentsCompleted = numberOfAssignmentsCompleted
            self.numberOfAssignmentsAvailable = numberOfAssignmentsAvailable
            self.title = title
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.creationTime = creationTime
            self.hITGroupId = hITGroupId
            self.reward = reward
            self.hITReviewStatus = hITReviewStatus
            self.hITTypeId = hITTypeId
            self.description = description
            self.maxAssignments = maxAssignments
            self.hITId = hITId
            self.hITStatus = hITStatus
            self.expiration = expiration
            self.qualificationRequirements = qualificationRequirements
            self.keywords = keywords
            self.question = question
            self.requesterAnnotation = requesterAnnotation
            self.numberOfAssignmentsPending = numberOfAssignmentsPending
        }

        private enum CodingKeys: String, CodingKey {
            case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
            case hITLayoutId = "HITLayoutId"
            case numberOfAssignmentsCompleted = "NumberOfAssignmentsCompleted"
            case numberOfAssignmentsAvailable = "NumberOfAssignmentsAvailable"
            case title = "Title"
            case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
            case creationTime = "CreationTime"
            case hITGroupId = "HITGroupId"
            case reward = "Reward"
            case hITReviewStatus = "HITReviewStatus"
            case hITTypeId = "HITTypeId"
            case description = "Description"
            case maxAssignments = "MaxAssignments"
            case hITId = "HITId"
            case hITStatus = "HITStatus"
            case expiration = "Expiration"
            case qualificationRequirements = "QualificationRequirements"
            case keywords = "Keywords"
            case question = "Question"
            case requesterAnnotation = "RequesterAnnotation"
            case numberOfAssignmentsPending = "NumberOfAssignmentsPending"
        }
    }

    public struct DeleteQualificationTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        /// The ID of the QualificationType to dispose.
        public let qualificationTypeId: String

        public init(qualificationTypeId: String) {
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct ListAssignmentsForHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentStatuses", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the HIT.
        public let hITId: String
        /// Pagination token
        public let nextToken: String?
        /// The status of the assignments to return: Submitted | Approved | Rejected
        public let assignmentStatuses: [AssignmentStatus]?
        public let maxResults: Int32?

        public init(hITId: String, nextToken: String? = nil, assignmentStatuses: [AssignmentStatus]? = nil, maxResults: Int32? = nil) {
            self.hITId = hITId
            self.nextToken = nextToken
            self.assignmentStatuses = assignmentStatuses
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
            case nextToken = "NextToken"
            case assignmentStatuses = "AssignmentStatuses"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteHITResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateHITReviewStatusResponse: AWSShape {
        /// The key for the payload

    }

    public enum NotificationTransport: String, CustomStringConvertible, Codable {
        case email = "Email"
        case sqs = "SQS"
        public var description: String { return self.rawValue }
    }

    public struct NotifyWorkersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subject", required: true, type: .string), 
            AWSShapeMember(label: "MessageText", required: true, type: .string), 
            AWSShapeMember(label: "WorkerIds", required: true, type: .list)
        ]
        /// The subject line of the email message to send. Can include up to 200 characters.
        public let subject: String
        /// The text of the email message to send. Can include up to 4,096 characters
        public let messageText: String
        /// A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.
        public let workerIds: [String]

        public init(subject: String, messageText: String, workerIds: [String]) {
            self.subject = subject
            self.messageText = messageText
            self.workerIds = workerIds
        }

        private enum CodingKeys: String, CodingKey {
            case subject = "Subject"
            case messageText = "MessageText"
            case workerIds = "WorkerIds"
        }
    }

    public struct CreateHITTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITTypeId", required: false, type: .string)
        ]
        ///  The ID of the newly registered HIT type.
        public let hITTypeId: String?

        public init(hITTypeId: String? = nil) {
            self.hITTypeId = hITTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case hITTypeId = "HITTypeId"
        }
    }

    public struct ListAssignmentsForHITResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Assignments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        ///  The collection of Assignment data structures returned by this call.
        public let assignments: [Assignment]?
        public let nextToken: String?
        ///  The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
        public let numResults: Int32?

        public init(assignments: [Assignment]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.assignments = assignments
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case assignments = "Assignments"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public struct ListQualificationTypesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MustBeOwnedByCaller", required: false, type: .boolean), 
            AWSShapeMember(label: "MustBeRequestable", required: true, type: .boolean), 
            AWSShapeMember(label: "Query", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        ///  Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types. 
        public let mustBeOwnedByCaller: Bool?
        /// Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False. 
        public let mustBeRequestable: Bool
        ///  A text query against all of the searchable attributes of Qualification types. 
        public let query: String?
        public let nextToken: String?
        ///  The maximum number of results to return in a single call. 
        public let maxResults: Int32?

        public init(mustBeOwnedByCaller: Bool? = nil, mustBeRequestable: Bool, query: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.mustBeOwnedByCaller = mustBeOwnedByCaller
            self.mustBeRequestable = mustBeRequestable
            self.query = query
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case mustBeOwnedByCaller = "MustBeOwnedByCaller"
            case mustBeRequestable = "MustBeRequestable"
            case query = "Query"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListQualificationRequestsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        /// The ID of the QualificationType.
        public let qualificationTypeId: String?
        ///  The maximum number of results to return in a single call. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, qualificationTypeId: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.qualificationTypeId = qualificationTypeId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case qualificationTypeId = "QualificationTypeId"
            case maxResults = "MaxResults"
        }
    }

    public enum NotifyWorkersFailureCode: String, CustomStringConvertible, Codable {
        case softfailure = "SoftFailure"
        case hardfailure = "HardFailure"
        public var description: String { return self.rawValue }
    }

    public struct ListReviewableHITsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITs", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        ///  The list of HIT elements returned by the query.
        public let hITs: [HIT]?
        public let nextToken: String?
        ///  The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call. 
        public let numResults: Int32?

        public init(hITs: [HIT]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.hITs = hITs
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case hITs = "HITs"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public struct GetFileUploadURLResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileUploadURL", required: false, type: .string)
        ]
        ///  A temporary URL for the file that the Worker uploaded for the answer. 
        public let fileUploadURL: String?

        public init(fileUploadURL: String? = nil) {
            self.fileUploadURL = fileUploadURL
        }

        private enum CodingKeys: String, CodingKey {
            case fileUploadURL = "FileUploadURL"
        }
    }

    public struct HITLayoutParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The value substituted for the parameter referenced in the HITLayout. 
        public let value: String?
        ///  The name of the parameter in the HITLayout. 
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public enum HITReviewStatus: String, CustomStringConvertible, Codable {
        case notreviewed = "NotReviewed"
        case markedforreview = "MarkedForReview"
        case reviewedappropriate = "ReviewedAppropriate"
        case reviewedinappropriate = "ReviewedInappropriate"
        public var description: String { return self.rawValue }
    }

    public struct QualificationType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TestDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "RetryDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "QualificationTypeStatus", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AnswerKey", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AutoGranted", required: false, type: .boolean), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "IsRequestable", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoGrantedValue", required: false, type: .integer), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string)
        ]
        ///  The amount of time, in seconds, given to a Worker to complete the Qualification test, beginning from the time the Worker requests the Qualification. 
        public let testDurationInSeconds: Int64?
        ///  The amount of time, in seconds, Workers must wait after taking the Qualification test before they can take it again. Workers can take a Qualification test multiple times if they were not granted the Qualification from a previous attempt, or if the test offers a gradient score and they want a better score. If not specified, retries are disabled and Workers can request a Qualification only once. 
        public let retryDelayInSeconds: Int64?
        ///  The status of the Qualification type. A Qualification type's status determines if users can apply to receive a Qualification of this type, and if HITs can be created with requirements based on this type. Valid values are Active | Inactive. 
        public let qualificationTypeStatus: QualificationTypeStatus?
        ///  The date and time the Qualification type was created. 
        public let creationTime: TimeStamp?
        /// The answers to the Qualification test specified in the Test parameter.
        public let answerKey: String?
        ///  A long description for the Qualification type. 
        public let description: String?
        /// Specifies that requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Valid values are True | False.
        public let autoGranted: Bool?
        ///  The questions for a Qualification test associated with this Qualification type that a user can take to obtain a Qualification of this type. This parameter must be specified if AnswerKey is present. A Qualification type cannot have both a specified Test parameter and an AutoGranted value of true. 
        public let test: String?
        ///  The name of the Qualification type. The type name is used to identify the type, and to find the type using a Qualification type search. 
        public let name: String?
        ///  One or more words or phrases that describe theQualification type, separated by commas. The Keywords make the type easier to find using a search. 
        public let keywords: String?
        ///  Specifies whether the Qualification type is one that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test. This value is False for Qualifications assigned automatically by the system. Valid values are True | False. 
        public let isRequestable: Bool?
        ///  The Qualification integer value to use for automatically granted Qualifications, if AutoGranted is true. This is 1 by default. 
        public let autoGrantedValue: Int32?
        ///  A unique identifier for the Qualification type. A Qualification type is given a Qualification type ID when you call the CreateQualificationType operation. 
        public let qualificationTypeId: String?

        public init(testDurationInSeconds: Int64? = nil, retryDelayInSeconds: Int64? = nil, qualificationTypeStatus: QualificationTypeStatus? = nil, creationTime: TimeStamp? = nil, answerKey: String? = nil, description: String? = nil, autoGranted: Bool? = nil, test: String? = nil, name: String? = nil, keywords: String? = nil, isRequestable: Bool? = nil, autoGrantedValue: Int32? = nil, qualificationTypeId: String? = nil) {
            self.testDurationInSeconds = testDurationInSeconds
            self.retryDelayInSeconds = retryDelayInSeconds
            self.qualificationTypeStatus = qualificationTypeStatus
            self.creationTime = creationTime
            self.answerKey = answerKey
            self.description = description
            self.autoGranted = autoGranted
            self.test = test
            self.name = name
            self.keywords = keywords
            self.isRequestable = isRequestable
            self.autoGrantedValue = autoGrantedValue
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case testDurationInSeconds = "TestDurationInSeconds"
            case retryDelayInSeconds = "RetryDelayInSeconds"
            case qualificationTypeStatus = "QualificationTypeStatus"
            case creationTime = "CreationTime"
            case answerKey = "AnswerKey"
            case description = "Description"
            case autoGranted = "AutoGranted"
            case test = "Test"
            case name = "Name"
            case keywords = "Keywords"
            case isRequestable = "IsRequestable"
            case autoGrantedValue = "AutoGrantedValue"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct UpdateExpirationForHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpireAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        ///  The date and time at which you want the HIT to expire 
        public let expireAt: TimeStamp?
        ///  The HIT to update. 
        public let hITId: String

        public init(expireAt: TimeStamp? = nil, hITId: String) {
            self.expireAt = expireAt
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case expireAt = "ExpireAt"
            case hITId = "HITId"
        }
    }

    public struct UpdateHITTypeOfHITResponse: AWSShape {
        /// The key for the payload

    }

    public enum ReviewActionStatus: String, CustomStringConvertible, Codable {
        case intended = "Intended"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateQualificationFromWorkerResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListQualificationTypesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypes", required: false, type: .list), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        ///  The list of QualificationType elements returned by the query. 
        public let qualificationTypes: [QualificationType]?
        ///  The number of Qualification types on this page in the filtered results list, equivalent to the number of types this operation returns. 
        public let numResults: Int32?

        public init(nextToken: String? = nil, qualificationTypes: [QualificationType]? = nil, numResults: Int32? = nil) {
            self.nextToken = nextToken
            self.qualificationTypes = qualificationTypes
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case qualificationTypes = "QualificationTypes"
            case numResults = "NumResults"
        }
    }

    public struct SendBonusResponse: AWSShape {
        /// The key for the payload

    }

    public struct ReviewPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "PolicyName", required: false, type: .string)
        ]
        /// Name of the parameter from the Review policy.
        public let parameters: [PolicyParameter]?
        ///  Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 
        public let policyName: String?

        public init(parameters: [PolicyParameter]? = nil, policyName: String? = nil) {
            self.parameters = parameters
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case policyName = "PolicyName"
        }
    }

    public enum ReviewableHITStatus: String, CustomStringConvertible, Codable {
        case reviewable = "Reviewable"
        case reviewing = "Reviewing"
        public var description: String { return self.rawValue }
    }

    public struct GetHITResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  Contains the requested HIT data.
        public let hit: HIT?

        public init(hit: HIT? = nil) {
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
        }
    }

    public struct NotifyWorkersFailureStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyWorkersFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "NotifyWorkersFailureCode", required: false, type: .enum)
        ]
        ///  A message detailing the reason the Worker could not be notified. 
        public let notifyWorkersFailureMessage: String?
        ///  The ID of the Worker.
        public let workerId: String?
        ///  Encoded value for the failure type. 
        public let notifyWorkersFailureCode: NotifyWorkersFailureCode?

        public init(notifyWorkersFailureMessage: String? = nil, workerId: String? = nil, notifyWorkersFailureCode: NotifyWorkersFailureCode? = nil) {
            self.notifyWorkersFailureMessage = notifyWorkersFailureMessage
            self.workerId = workerId
            self.notifyWorkersFailureCode = notifyWorkersFailureCode
        }

        private enum CodingKeys: String, CodingKey {
            case notifyWorkersFailureMessage = "NotifyWorkersFailureMessage"
            case workerId = "WorkerId"
            case notifyWorkersFailureCode = "NotifyWorkersFailureCode"
        }
    }

    public struct DeleteQualificationTypeResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListHITsForQualificationTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITs", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        ///  The list of HIT elements returned by the query.
        public let hITs: [HIT]?
        public let nextToken: String?
        ///  The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call. 
        public let numResults: Int32?

        public init(hITs: [HIT]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.hITs = hITs
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case hITs = "HITs"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public struct DeleteWorkerBlockResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoApprovalDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "HITLayoutParameters", required: false, type: .list), 
            AWSShapeMember(label: "HITLayoutId", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: true, type: .string), 
            AWSShapeMember(label: "HITReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "AssignmentDurationInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "Reward", required: true, type: .string), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "MaxAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "QualificationRequirements", required: false, type: .list), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "Question", required: false, type: .string), 
            AWSShapeMember(label: "LifetimeInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "AssignmentReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "RequesterAnnotation", required: false, type: .string)
        ]
        ///  The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it. 
        public let autoApprovalDelayInSeconds: Int64?
        ///  If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. 
        public let hITLayoutParameters: [HITLayoutParameter]?
        ///  The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters.   Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. 
        public let hITLayoutId: String?
        ///  The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned. 
        public let title: String
        ///  The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let hITReviewPolicy: ReviewPolicy?
        ///  The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept. 
        public let assignmentDurationInSeconds: Int64
        ///  The amount of money the Requester will pay a Worker for successfully completing the HIT. 
        public let reward: String
        ///  A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId.    Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.  
        public let uniqueRequestToken: String?
        ///  A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it. 
        public let description: String
        ///  The number of times the HIT can be accepted and completed before the HIT becomes unavailable. 
        public let maxAssignments: Int32?
        ///  A condition that a Worker's Qualifications must meet before the Worker is allowed to accept and complete the HIT. 
        public let qualificationRequirements: [QualificationRequirement]?
        ///  One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs. 
        public let keywords: String?
        ///  The data the person completing the HIT uses to produce the results.   Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace.  Either a Question parameter or a HITLayoutId parameter must be provided.
        public let question: String?
        ///  An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. 
        public let lifetimeInSeconds: Int64
        ///  The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let assignmentReviewPolicy: ReviewPolicy?
        ///  An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT.   The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester.   The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. 
        public let requesterAnnotation: String?

        public init(autoApprovalDelayInSeconds: Int64? = nil, hITLayoutParameters: [HITLayoutParameter]? = nil, hITLayoutId: String? = nil, title: String, hITReviewPolicy: ReviewPolicy? = nil, assignmentDurationInSeconds: Int64, reward: String, uniqueRequestToken: String? = nil, description: String, maxAssignments: Int32? = nil, qualificationRequirements: [QualificationRequirement]? = nil, keywords: String? = nil, question: String? = nil, lifetimeInSeconds: Int64, assignmentReviewPolicy: ReviewPolicy? = nil, requesterAnnotation: String? = nil) {
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.hITLayoutParameters = hITLayoutParameters
            self.hITLayoutId = hITLayoutId
            self.title = title
            self.hITReviewPolicy = hITReviewPolicy
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.reward = reward
            self.uniqueRequestToken = uniqueRequestToken
            self.description = description
            self.maxAssignments = maxAssignments
            self.qualificationRequirements = qualificationRequirements
            self.keywords = keywords
            self.question = question
            self.lifetimeInSeconds = lifetimeInSeconds
            self.assignmentReviewPolicy = assignmentReviewPolicy
            self.requesterAnnotation = requesterAnnotation
        }

        private enum CodingKeys: String, CodingKey {
            case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
            case hITLayoutParameters = "HITLayoutParameters"
            case hITLayoutId = "HITLayoutId"
            case title = "Title"
            case hITReviewPolicy = "HITReviewPolicy"
            case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
            case reward = "Reward"
            case uniqueRequestToken = "UniqueRequestToken"
            case description = "Description"
            case maxAssignments = "MaxAssignments"
            case qualificationRequirements = "QualificationRequirements"
            case keywords = "Keywords"
            case question = "Question"
            case lifetimeInSeconds = "LifetimeInSeconds"
            case assignmentReviewPolicy = "AssignmentReviewPolicy"
            case requesterAnnotation = "RequesterAnnotation"
        }
    }

    public struct ListWorkerBlocksRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Pagination token
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AcceptQualificationRequestResponse: AWSShape {
        /// The key for the payload

    }

    public struct RejectQualificationRequestResponse: AWSShape {
        /// The key for the payload

    }

    public struct SendTestEventNotificationResponse: AWSShape {
        /// The key for the payload

    }

    public struct GetQualificationScoreResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Qualification", required: false, type: .structure)
        ]
        ///  The Qualification data structure of the Qualification assigned to a user, including the Qualification type and the value (score). 
        public let qualification: Qualification?

        public init(qualification: Qualification? = nil) {
            self.qualification = qualification
        }

        private enum CodingKeys: String, CodingKey {
            case qualification = "Qualification"
        }
    }

    public struct UpdateNotificationSettingsResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateHITReviewStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "Revert", required: false, type: .boolean)
        ]
        ///  The ID of the HIT to update. 
        public let hITId: String
        ///  Specifies how to update the HIT status. Default is False.     Setting this to false will only transition a HIT from Reviewable to Reviewing     Setting this to true will only transition a HIT from Reviewing to Reviewable   
        public let revert: Bool?

        public init(hITId: String, revert: Bool? = nil) {
            self.hITId = hITId
            self.revert = revert
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
            case revert = "Revert"
        }
    }

    public struct AssociateQualificationWithWorkerRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer), 
            AWSShapeMember(label: "SendNotification", required: false, type: .boolean), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        /// The value of the Qualification to assign.
        public let integerValue: Int32?
        ///  Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. 
        public let sendNotification: Bool?
        ///  The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. 
        public let workerId: String
        /// The ID of the Qualification type to use for the assigned Qualification.
        public let qualificationTypeId: String

        public init(integerValue: Int32? = nil, sendNotification: Bool? = nil, workerId: String, qualificationTypeId: String) {
            self.integerValue = integerValue
            self.sendNotification = sendNotification
            self.workerId = workerId
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case integerValue = "IntegerValue"
            case sendNotification = "SendNotification"
            case workerId = "WorkerId"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct DeleteHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The ID of the HIT to be deleted.
        public let hITId: String

        public init(hITId: String) {
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
        }
    }

    public enum QualificationTypeStatus: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public struct UpdateQualificationTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TestDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "AutoGranted", required: false, type: .boolean), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "RetryDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "QualificationTypeStatus", required: false, type: .enum), 
            AWSShapeMember(label: "AnswerKey", required: false, type: .string), 
            AWSShapeMember(label: "AutoGrantedValue", required: false, type: .integer), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
        public let testDurationInSeconds: Int64?
        /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
        public let autoGranted: Bool?
        /// The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified. Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
        public let test: String?
        /// The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.
        public let retryDelayInSeconds: Int64?
        /// The new status of the Qualification type - Active | Inactive
        public let qualificationTypeStatus: QualificationTypeStatus?
        /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.
        public let answerKey: String?
        /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
        public let autoGrantedValue: Int32?
        /// The ID of the Qualification type to update.
        public let qualificationTypeId: String
        /// The new description of the Qualification type.
        public let description: String?

        public init(testDurationInSeconds: Int64? = nil, autoGranted: Bool? = nil, test: String? = nil, retryDelayInSeconds: Int64? = nil, qualificationTypeStatus: QualificationTypeStatus? = nil, answerKey: String? = nil, autoGrantedValue: Int32? = nil, qualificationTypeId: String, description: String? = nil) {
            self.testDurationInSeconds = testDurationInSeconds
            self.autoGranted = autoGranted
            self.test = test
            self.retryDelayInSeconds = retryDelayInSeconds
            self.qualificationTypeStatus = qualificationTypeStatus
            self.answerKey = answerKey
            self.autoGrantedValue = autoGrantedValue
            self.qualificationTypeId = qualificationTypeId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case testDurationInSeconds = "TestDurationInSeconds"
            case autoGranted = "AutoGranted"
            case test = "Test"
            case retryDelayInSeconds = "RetryDelayInSeconds"
            case qualificationTypeStatus = "QualificationTypeStatus"
            case answerKey = "AnswerKey"
            case autoGrantedValue = "AutoGrantedValue"
            case qualificationTypeId = "QualificationTypeId"
            case description = "Description"
        }
    }

    public enum Comparator: String, CustomStringConvertible, Codable {
        case lessthan = "LessThan"
        case lessthanorequalto = "LessThanOrEqualTo"
        case greaterthan = "GreaterThan"
        case greaterthanorequalto = "GreaterThanOrEqualTo"
        case equalto = "EqualTo"
        case notequalto = "NotEqualTo"
        case exists = "Exists"
        case doesnotexist = "DoesNotExist"
        case `in` = "In"
        case notin = "NotIn"
        public var description: String { return self.rawValue }
    }

    public struct Qualification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LocaleValue", required: false, type: .structure), 
            AWSShapeMember(label: "GrantTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string)
        ]
        ///  The value (score) of the Qualification, if the Qualification has an integer value.
        public let integerValue: Int32?
        ///  The status of the Qualification. Valid values are Granted | Revoked.
        public let status: QualificationStatus?
        public let localeValue: Locale?
        ///  The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.
        public let grantTime: TimeStamp?
        ///  The ID of the Worker who possesses the Qualification. 
        public let workerId: String?
        ///  The ID of the Qualification type for the Qualification.
        public let qualificationTypeId: String?

        public init(integerValue: Int32? = nil, status: QualificationStatus? = nil, localeValue: Locale? = nil, grantTime: TimeStamp? = nil, workerId: String? = nil, qualificationTypeId: String? = nil) {
            self.integerValue = integerValue
            self.status = status
            self.localeValue = localeValue
            self.grantTime = grantTime
            self.workerId = workerId
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case integerValue = "IntegerValue"
            case status = "Status"
            case localeValue = "LocaleValue"
            case grantTime = "GrantTime"
            case workerId = "WorkerId"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct AssociateQualificationWithWorkerResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateExpirationForHITResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateWorkerBlockRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: true, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string)
        ]
        /// A message explaining the reason for blocking the Worker. This parameter enables you to keep track of your Workers. The Worker does not see this message.
        public let reason: String
        /// The ID of the Worker to block.
        public let workerId: String

        public init(reason: String, workerId: String) {
            self.reason = reason
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case workerId = "WorkerId"
        }
    }

    public struct ListHITsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITs", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        ///  The list of HIT elements returned by the query.
        public let hITs: [HIT]?
        public let nextToken: String?
        /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
        public let numResults: Int32?

        public init(hITs: [HIT]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.hITs = hITs
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case hITs = "HITs"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public struct CreateAdditionalAssignmentsForHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "NumberOfAdditionalAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string)
        ]
        /// The ID of the HIT to extend.
        public let hITId: String
        /// The number of additional assignments to request for this HIT.
        public let numberOfAdditionalAssignments: Int32?
        ///  A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID. 
        public let uniqueRequestToken: String?

        public init(hITId: String, numberOfAdditionalAssignments: Int32? = nil, uniqueRequestToken: String? = nil) {
            self.hITId = hITId
            self.numberOfAdditionalAssignments = numberOfAdditionalAssignments
            self.uniqueRequestToken = uniqueRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
            case numberOfAdditionalAssignments = "NumberOfAdditionalAssignments"
            case uniqueRequestToken = "UniqueRequestToken"
        }
    }

    public struct GetFileUploadURLRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: true, type: .string), 
            AWSShapeMember(label: "QuestionIdentifier", required: true, type: .string)
        ]
        /// The ID of the assignment that contains the question with a FileUploadAnswer.
        public let assignmentId: String
        /// The identifier of the question with a FileUploadAnswer, as specified in the QuestionForm of the HIT.
        public let questionIdentifier: String

        public init(assignmentId: String, questionIdentifier: String) {
            self.assignmentId = assignmentId
            self.questionIdentifier = questionIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
            case questionIdentifier = "QuestionIdentifier"
        }
    }

    public struct ListQualificationRequestsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationRequests", required: false, type: .list), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        /// The Qualification request. The response includes one QualificationRequest element for each Qualification request returned by the query.
        public let qualificationRequests: [QualificationRequest]?
        /// The number of Qualification requests on this page in the filtered results list, equivalent to the number of Qualification requests being returned by this call.
        public let numResults: Int32?

        public init(nextToken: String? = nil, qualificationRequests: [QualificationRequest]? = nil, numResults: Int32? = nil) {
            self.nextToken = nextToken
            self.qualificationRequests = qualificationRequests
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case qualificationRequests = "QualificationRequests"
            case numResults = "NumResults"
        }
    }

    public struct ReviewReport: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReviewResults", required: false, type: .list), 
            AWSShapeMember(label: "ReviewActions", required: false, type: .list)
        ]
        ///  A list of ReviewResults objects for each action specified in the Review Policy. 
        public let reviewResults: [ReviewResultDetail]?
        ///  A list of ReviewAction objects for each action specified in the Review Policy. 
        public let reviewActions: [ReviewActionDetail]?

        public init(reviewResults: [ReviewResultDetail]? = nil, reviewActions: [ReviewActionDetail]? = nil) {
            self.reviewResults = reviewResults
            self.reviewActions = reviewActions
        }

        private enum CodingKeys: String, CodingKey {
            case reviewResults = "ReviewResults"
            case reviewActions = "ReviewActions"
        }
    }

    public struct RejectAssignmentResponse: AWSShape {
        /// The key for the payload

    }

    public struct GetAssignmentResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure), 
            AWSShapeMember(label: "Assignment", required: false, type: .structure)
        ]
        ///  The HIT associated with this assignment. The response includes one HIT element.
        public let hit: HIT?
        ///  The assignment. The response includes one Assignment element. 
        public let assignment: Assignment?

        public init(hit: HIT? = nil, assignment: Assignment? = nil) {
            self.hit = hit
            self.assignment = assignment
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
            case assignment = "Assignment"
        }
    }

    public struct QualificationRequirement: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "IntegerValues", required: false, type: .list), 
            AWSShapeMember(label: "RequiredToPreview", required: false, type: .boolean), 
            AWSShapeMember(label: "Comparator", required: true, type: .enum), 
            AWSShapeMember(label: "LocaleValues", required: false, type: .list)
        ]
        ///  The ID of the Qualification type for the requirement.
        public let qualificationTypeId: String
        ///  The integer value to compare against the Qualification's value. IntegerValue must not be present if Comparator is Exists or DoesNotExist. IntegerValue can only be used if the Qualification type has an integer value; it cannot be used with the Worker_Locale QualificationType ID. When performing a set comparison by using the In or the NotIn comparator, you can use up to 15 IntegerValue elements in a QualificationRequirement data structure. 
        public let integerValues: [Int32]?
        ///  If true, the question data for the HIT will not be shown when a Worker whose Qualifications do not meet this requirement tries to preview the HIT. That is, a Worker's Qualifications must meet all of the requirements for which RequiredToPreview is true in order to preview the HIT. If a Worker meets all of the requirements where RequiredToPreview is true (or if there are no such requirements), but does not meet all of the requirements for the HIT, the Worker will be allowed to preview the HIT's question data, but will not be allowed to accept and complete the HIT. The default is false. 
        public let requiredToPreview: Bool?
        /// The kind of comparison to make against a Qualification's value. You can compare a Qualification's value to an IntegerValue to see if it is LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue. You can compare it to a LocaleValue to see if it is EqualTo, or NotEqualTo the LocaleValue. You can check to see if the value is In or NotIn a set of IntegerValue or LocaleValue values. Lastly, a Qualification requirement can also test if a Qualification Exists or DoesNotExist in the user's profile, regardless of its value. 
        public let comparator: Comparator
        ///  The locale value to compare against the Qualification's value. The local value must be a valid ISO 3166 country code or supports ISO 3166-2 subdivisions. LocaleValue can only be used with a Worker_Locale QualificationType ID. LocaleValue can only be used with the EqualTo, NotEqualTo, In, and NotIn comparators. You must only use a single LocaleValue element when using the EqualTo or NotEqualTo comparators. When performing a set comparison by using the In or the NotIn comparator, you can use up to 30 LocaleValue elements in a QualificationRequirement data structure. 
        public let localeValues: [Locale]?

        public init(qualificationTypeId: String, integerValues: [Int32]? = nil, requiredToPreview: Bool? = nil, comparator: Comparator, localeValues: [Locale]? = nil) {
            self.qualificationTypeId = qualificationTypeId
            self.integerValues = integerValues
            self.requiredToPreview = requiredToPreview
            self.comparator = comparator
            self.localeValues = localeValues
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
            case integerValues = "IntegerValues"
            case requiredToPreview = "RequiredToPreview"
            case comparator = "Comparator"
            case localeValues = "LocaleValues"
        }
    }

    public struct GetAccountBalanceRequest: AWSShape {
        /// The key for the payload

    }

    public struct Locale: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Country", required: true, type: .string), 
            AWSShapeMember(label: "Subdivision", required: false, type: .string)
        ]
        ///  The country of the locale. Must be a valid ISO 3166 country code. For example, the code US refers to the United States of America. 
        public let country: String
        /// The state or subdivision of the locale. A valid ISO 3166-2 subdivision code. For example, the code WA refers to the state of Washington.
        public let subdivision: String?

        public init(country: String, subdivision: String? = nil) {
            self.country = country
            self.subdivision = subdivision
        }

        private enum CodingKeys: String, CodingKey {
            case country = "Country"
            case subdivision = "Subdivision"
        }
    }

    public struct WorkerBlock: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string)
        ]
        ///  A message explaining the reason the Worker was blocked. 
        public let reason: String?
        ///  The ID of the Worker who accepted the HIT.
        public let workerId: String?

        public init(reason: String? = nil, workerId: String? = nil) {
            self.reason = reason
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case workerId = "WorkerId"
        }
    }

    public struct ListWorkersWithQualificationTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Qualifications", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        ///  The list of Qualification elements returned by this call. 
        public let qualifications: [Qualification]?
        public let nextToken: String?
        ///  The number of Qualifications on this page in the filtered results list, equivalent to the number of Qualifications being returned by this call.
        public let numResults: Int32?

        public init(qualifications: [Qualification]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.qualifications = qualifications
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case qualifications = "Qualifications"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public enum HITStatus: String, CustomStringConvertible, Codable {
        case assignable = "Assignable"
        case unassignable = "Unassignable"
        case reviewable = "Reviewable"
        case reviewing = "Reviewing"
        case disposed = "Disposed"
        public var description: String { return self.rawValue }
    }

    public struct ParameterMapEntry: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        ///  The QuestionID from the HIT that is used to identify which question requires Mechanical Turk to score as part of the ScoreMyKnownAnswers/2011-09-01 Review Policy. 
        public let key: String?
        ///  The list of answers to the question specified in the MapEntry Key element. The Worker must match all values in order for the answer to be scored correctly. 
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct CreateHITWithHITTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation. 
        public let hit: HIT?

        public init(hit: HIT? = nil) {
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
        }
    }

    public struct GetHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The ID of the HIT to be retrieved.
        public let hITId: String

        public init(hITId: String) {
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
        }
    }

    public struct ListWorkersWithQualificationTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        ///  The status of the Qualifications to return. Can be Granted | Revoked. 
        public let status: QualificationStatus?
        /// Pagination Token
        public let nextToken: String?
        /// The ID of the Qualification type of the Qualifications to return.
        public let qualificationTypeId: String
        ///  Limit the number of results returned. 
        public let maxResults: Int32?

        public init(status: QualificationStatus? = nil, nextToken: String? = nil, qualificationTypeId: String, maxResults: Int32? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.qualificationTypeId = qualificationTypeId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case nextToken = "NextToken"
            case qualificationTypeId = "QualificationTypeId"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateQualificationTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TestDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "AutoGranted", required: false, type: .boolean), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "RetryDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeStatus", required: true, type: .enum), 
            AWSShapeMember(label: "AnswerKey", required: false, type: .string), 
            AWSShapeMember(label: "AutoGrantedValue", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
        public let testDurationInSeconds: Int64?
        /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
        public let autoGranted: Bool?
        ///  The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified.  Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
        public let test: String?
        /// The number of seconds that a Worker must wait after requesting a Qualification of the Qualification type before the worker can retry the Qualification request. Constraints: None. If not specified, retries are disabled and Workers can request a Qualification of this type only once, even if the Worker has not been granted the Qualification. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must delete existing retry-enabled Qualification type and then create a new Qualification type with retries disabled.
        public let retryDelayInSeconds: Int64?
        ///  The name you give to the Qualification type. The type name is used to represent the Qualification to Workers, and to find the type using a Qualification type search. It must be unique across all of your Qualification types.
        public let name: String
        /// One or more words or phrases that describe the Qualification type, separated by commas. The keywords of a type make the type easier to find during a search.
        public let keywords: String?
        /// The initial status of the Qualification type. Constraints: Valid values are: Active | Inactive
        public let qualificationTypeStatus: QualificationTypeStatus
        /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure. Constraints: Must not be longer than 65535 bytes. Constraints: None. If not specified, you must process Qualification requests manually.
        public let answerKey: String?
        /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
        public let autoGrantedValue: Int32?
        /// A long description for the Qualification type. On the Amazon Mechanical Turk website, the long description is displayed when a Worker examines a Qualification type.
        public let description: String

        public init(testDurationInSeconds: Int64? = nil, autoGranted: Bool? = nil, test: String? = nil, retryDelayInSeconds: Int64? = nil, name: String, keywords: String? = nil, qualificationTypeStatus: QualificationTypeStatus, answerKey: String? = nil, autoGrantedValue: Int32? = nil, description: String) {
            self.testDurationInSeconds = testDurationInSeconds
            self.autoGranted = autoGranted
            self.test = test
            self.retryDelayInSeconds = retryDelayInSeconds
            self.name = name
            self.keywords = keywords
            self.qualificationTypeStatus = qualificationTypeStatus
            self.answerKey = answerKey
            self.autoGrantedValue = autoGrantedValue
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case testDurationInSeconds = "TestDurationInSeconds"
            case autoGranted = "AutoGranted"
            case test = "Test"
            case retryDelayInSeconds = "RetryDelayInSeconds"
            case name = "Name"
            case keywords = "Keywords"
            case qualificationTypeStatus = "QualificationTypeStatus"
            case answerKey = "AnswerKey"
            case autoGrantedValue = "AutoGrantedValue"
            case description = "Description"
        }
    }

    public struct CreateAdditionalAssignmentsForHITResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListHITsForQualificationTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Pagination Token
        public let nextToken: String?
        ///  The ID of the Qualification type to use when querying HITs. 
        public let qualificationTypeId: String
        ///  Limit the number of results returned. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, qualificationTypeId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.qualificationTypeId = qualificationTypeId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case qualificationTypeId = "QualificationTypeId"
            case maxResults = "MaxResults"
        }
    }

    public struct RejectQualificationRequestRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "QualificationRequestId", required: true, type: .string)
        ]
        /// A text message explaining why the request was rejected, to be shown to the Worker who made the request.
        public let reason: String?
        ///  The ID of the Qualification request, as returned by the ListQualificationRequests operation. 
        public let qualificationRequestId: String

        public init(reason: String? = nil, qualificationRequestId: String) {
            self.reason = reason
            self.qualificationRequestId = qualificationRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case qualificationRequestId = "QualificationRequestId"
        }
    }

    public enum ReviewPolicyLevel: String, CustomStringConvertible, Codable {
        case assignment = "Assignment"
        case hit = "HIT"
        public var description: String { return self.rawValue }
    }

    public struct CreateHITTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoApprovalDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "QualificationRequirements", required: false, type: .list), 
            AWSShapeMember(label: "AssignmentDurationInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "Title", required: true, type: .string), 
            AWSShapeMember(label: "Reward", required: true, type: .string), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        ///  The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it. 
        public let autoApprovalDelayInSeconds: Int64?
        ///  A condition that a Worker's Qualifications must meet before the Worker is allowed to accept and complete the HIT. 
        public let qualificationRequirements: [QualificationRequirement]?
        ///  The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept. 
        public let assignmentDurationInSeconds: Int64
        ///  The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned. 
        public let title: String
        ///  The amount of money the Requester will pay a Worker for successfully completing the HIT. 
        public let reward: String
        ///  One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs. 
        public let keywords: String?
        ///  A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it. 
        public let description: String

        public init(autoApprovalDelayInSeconds: Int64? = nil, qualificationRequirements: [QualificationRequirement]? = nil, assignmentDurationInSeconds: Int64, title: String, reward: String, keywords: String? = nil, description: String) {
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.qualificationRequirements = qualificationRequirements
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.title = title
            self.reward = reward
            self.keywords = keywords
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
            case qualificationRequirements = "QualificationRequirements"
            case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
            case title = "Title"
            case reward = "Reward"
            case keywords = "Keywords"
            case description = "Description"
        }
    }

    public struct Assignment: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoApprovalTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "Deadline", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssignmentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "ApprovalTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RequesterFeedback", required: false, type: .string), 
            AWSShapeMember(label: "AcceptTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RejectionTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssignmentId", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "Answer", required: false, type: .string)
        ]
        ///  If results have been submitted, AutoApprovalTime is the date and time the results of the assignment results are considered Approved automatically if they have not already been explicitly approved or rejected by the Requester. This value is derived from the auto-approval delay specified by the Requester in the HIT. This value is omitted from the assignment if the Worker has not yet submitted results.
        public let autoApprovalTime: TimeStamp?
        ///  If the Worker has submitted results, SubmitTime is the date and time the assignment was submitted. This value is omitted from the assignment if the Worker has not yet submitted results.
        public let submitTime: TimeStamp?
        ///  The ID of the HIT.
        public let hITId: String?
        ///  The date and time of the deadline for the assignment. This value is derived from the deadline specification for the HIT and the date and time the Worker accepted the HIT.
        public let deadline: TimeStamp?
        ///  The status of the assignment.
        public let assignmentStatus: AssignmentStatus?
        ///  If the Worker has submitted results and the Requester has approved the results, ApprovalTime is the date and time the Requester approved the results. This value is omitted from the assignment if the Requester has not yet approved the results.
        public let approvalTime: TimeStamp?
        ///  The feedback string included with the call to the ApproveAssignment operation or the RejectAssignment operation, if the Requester approved or rejected the assignment and specified feedback.
        public let requesterFeedback: String?
        ///  The date and time the Worker accepted the assignment.
        public let acceptTime: TimeStamp?
        ///  If the Worker has submitted results and the Requester has rejected the results, RejectionTime is the date and time the Requester rejected the results.
        public let rejectionTime: TimeStamp?
        ///  A unique identifier for the assignment.
        public let assignmentId: String?
        ///  The ID of the Worker who accepted the HIT.
        public let workerId: String?
        ///  The Worker's answers submitted for the HIT contained in a QuestionFormAnswers document, if the Worker provides an answer. If the Worker does not provide any answers, Answer may contain a QuestionFormAnswers document, or Answer may be empty.
        public let answer: String?

        public init(autoApprovalTime: TimeStamp? = nil, submitTime: TimeStamp? = nil, hITId: String? = nil, deadline: TimeStamp? = nil, assignmentStatus: AssignmentStatus? = nil, approvalTime: TimeStamp? = nil, requesterFeedback: String? = nil, acceptTime: TimeStamp? = nil, rejectionTime: TimeStamp? = nil, assignmentId: String? = nil, workerId: String? = nil, answer: String? = nil) {
            self.autoApprovalTime = autoApprovalTime
            self.submitTime = submitTime
            self.hITId = hITId
            self.deadline = deadline
            self.assignmentStatus = assignmentStatus
            self.approvalTime = approvalTime
            self.requesterFeedback = requesterFeedback
            self.acceptTime = acceptTime
            self.rejectionTime = rejectionTime
            self.assignmentId = assignmentId
            self.workerId = workerId
            self.answer = answer
        }

        private enum CodingKeys: String, CodingKey {
            case autoApprovalTime = "AutoApprovalTime"
            case submitTime = "SubmitTime"
            case hITId = "HITId"
            case deadline = "Deadline"
            case assignmentStatus = "AssignmentStatus"
            case approvalTime = "ApprovalTime"
            case requesterFeedback = "RequesterFeedback"
            case acceptTime = "AcceptTime"
            case rejectionTime = "RejectionTime"
            case assignmentId = "AssignmentId"
            case workerId = "WorkerId"
            case answer = "Answer"
        }
    }

    public struct SendBonusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: true, type: .string), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "BonusAmount", required: true, type: .string)
        ]
        /// The ID of the assignment for which this bonus is paid.
        public let assignmentId: String
        /// A unique identifier for this request, which allows you to retry the call on error without granting multiple bonuses. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the bonus already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID.
        public let uniqueRequestToken: String?
        /// A message that explains the reason for the bonus payment. The Worker receiving the bonus can see this message.
        public let reason: String?
        /// The ID of the Worker being paid the bonus.
        public let workerId: String
        ///  The Bonus amount is a US Dollar amount specified using a string (for example, "5" represents $5.00 USD and "101.42" represents $101.42 USD). Do not include currency symbols or currency codes. 
        public let bonusAmount: String

        public init(assignmentId: String, uniqueRequestToken: String? = nil, reason: String? = nil, workerId: String, bonusAmount: String) {
            self.assignmentId = assignmentId
            self.uniqueRequestToken = uniqueRequestToken
            self.reason = reason
            self.workerId = workerId
            self.bonusAmount = bonusAmount
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
            case uniqueRequestToken = "UniqueRequestToken"
            case reason = "Reason"
            case workerId = "WorkerId"
            case bonusAmount = "BonusAmount"
        }
    }

    public struct CreateWorkerBlockResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateQualificationTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationType", required: false, type: .structure)
        ]
        /// The created Qualification type, returned as a QualificationType data structure.
        public let qualificationType: QualificationType?

        public init(qualificationType: QualificationType? = nil) {
            self.qualificationType = qualificationType
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationType = "QualificationType"
        }
    }

    public struct ListReviewPolicyResultsForHITResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "HITReviewReport", required: false, type: .structure), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentReviewReport", required: false, type: .structure)
        ]
        /// The name of the HIT-level Review Policy. This contains only the PolicyName element.
        public let hITReviewPolicy: ReviewPolicy?
        /// Contains both ReviewResult and ReviewAction elements for a particular HIT. 
        public let hITReviewReport: ReviewReport?
        /// The HITId of the HIT for which results have been returned.
        public let hITId: String?
        ///  The name of the Assignment-level Review Policy. This contains only the PolicyName element. 
        public let assignmentReviewPolicy: ReviewPolicy?
        public let nextToken: String?
        ///  Contains both ReviewResult and ReviewAction elements for an Assignment. 
        public let assignmentReviewReport: ReviewReport?

        public init(hITReviewPolicy: ReviewPolicy? = nil, hITReviewReport: ReviewReport? = nil, hITId: String? = nil, assignmentReviewPolicy: ReviewPolicy? = nil, nextToken: String? = nil, assignmentReviewReport: ReviewReport? = nil) {
            self.hITReviewPolicy = hITReviewPolicy
            self.hITReviewReport = hITReviewReport
            self.hITId = hITId
            self.assignmentReviewPolicy = assignmentReviewPolicy
            self.nextToken = nextToken
            self.assignmentReviewReport = assignmentReviewReport
        }

        private enum CodingKeys: String, CodingKey {
            case hITReviewPolicy = "HITReviewPolicy"
            case hITReviewReport = "HITReviewReport"
            case hITId = "HITId"
            case assignmentReviewPolicy = "AssignmentReviewPolicy"
            case nextToken = "NextToken"
            case assignmentReviewReport = "AssignmentReviewReport"
        }
    }

    public struct ListBonusPaymentsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BonusPayments", required: false, type: .list), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        /// A successful request to the ListBonusPayments operation returns a list of BonusPayment objects. 
        public let bonusPayments: [BonusPayment]?
        /// The number of bonus payments on this page in the filtered results list, equivalent to the number of bonus payments being returned by this call. 
        public let numResults: Int32?

        public init(nextToken: String? = nil, bonusPayments: [BonusPayment]? = nil, numResults: Int32? = nil) {
            self.nextToken = nextToken
            self.bonusPayments = bonusPayments
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case bonusPayments = "BonusPayments"
            case numResults = "NumResults"
        }
    }

    public struct ListBonusPaymentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: false, type: .string), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified
        public let assignmentId: String?
        /// The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified
        public let hITId: String?
        /// Pagination token
        public let nextToken: String?
        public let maxResults: Int32?

        public init(assignmentId: String? = nil, hITId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.assignmentId = assignmentId
            self.hITId = hITId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
            case hITId = "HITId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct BonusPayment: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: false, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "GrantTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "BonusAmount", required: false, type: .string)
        ]
        /// The ID of the assignment associated with this bonus payment.
        public let assignmentId: String?
        /// The Reason text given when the bonus was granted, if any.
        public let reason: String?
        /// The date and time of when the bonus was granted.
        public let grantTime: TimeStamp?
        /// The ID of the Worker to whom the bonus was paid.
        public let workerId: String?
        public let bonusAmount: String?

        public init(assignmentId: String? = nil, reason: String? = nil, grantTime: TimeStamp? = nil, workerId: String? = nil, bonusAmount: String? = nil) {
            self.assignmentId = assignmentId
            self.reason = reason
            self.grantTime = grantTime
            self.workerId = workerId
            self.bonusAmount = bonusAmount
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
            case reason = "Reason"
            case grantTime = "GrantTime"
            case workerId = "WorkerId"
            case bonusAmount = "BonusAmount"
        }
    }

    public struct CreateHITResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation. 
        public let hit: HIT?

        public init(hit: HIT? = nil) {
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
        }
    }

    public struct CreateHITWithHITTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "HITLayoutId", required: false, type: .string), 
            AWSShapeMember(label: "HITLayoutParameters", required: false, type: .list), 
            AWSShapeMember(label: "HITReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Question", required: false, type: .string), 
            AWSShapeMember(label: "RequesterAnnotation", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "LifetimeInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "HITTypeId", required: true, type: .string)
        ]
        ///  The number of times the HIT can be accepted and completed before the HIT becomes unavailable. 
        public let maxAssignments: Int32?
        ///  The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters.   Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. 
        public let hITLayoutId: String?
        ///  If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. 
        public let hITLayoutParameters: [HITLayoutParameter]?
        ///  The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let hITReviewPolicy: ReviewPolicy?
        ///  The data the person completing the HIT uses to produce the results.   Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace.  Either a Question parameter or a HITLayoutId parameter must be provided.
        public let question: String?
        ///  An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT.   The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester.   The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. 
        public let requesterAnnotation: String?
        ///  The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let assignmentReviewPolicy: ReviewPolicy?
        ///  An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. 
        public let lifetimeInSeconds: Int64
        ///  A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId.    Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.  
        public let uniqueRequestToken: String?
        /// The HIT type ID you want to create this HIT with.
        public let hITTypeId: String

        public init(maxAssignments: Int32? = nil, hITLayoutId: String? = nil, hITLayoutParameters: [HITLayoutParameter]? = nil, hITReviewPolicy: ReviewPolicy? = nil, question: String? = nil, requesterAnnotation: String? = nil, assignmentReviewPolicy: ReviewPolicy? = nil, lifetimeInSeconds: Int64, uniqueRequestToken: String? = nil, hITTypeId: String) {
            self.maxAssignments = maxAssignments
            self.hITLayoutId = hITLayoutId
            self.hITLayoutParameters = hITLayoutParameters
            self.hITReviewPolicy = hITReviewPolicy
            self.question = question
            self.requesterAnnotation = requesterAnnotation
            self.assignmentReviewPolicy = assignmentReviewPolicy
            self.lifetimeInSeconds = lifetimeInSeconds
            self.uniqueRequestToken = uniqueRequestToken
            self.hITTypeId = hITTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case maxAssignments = "MaxAssignments"
            case hITLayoutId = "HITLayoutId"
            case hITLayoutParameters = "HITLayoutParameters"
            case hITReviewPolicy = "HITReviewPolicy"
            case question = "Question"
            case requesterAnnotation = "RequesterAnnotation"
            case assignmentReviewPolicy = "AssignmentReviewPolicy"
            case lifetimeInSeconds = "LifetimeInSeconds"
            case uniqueRequestToken = "UniqueRequestToken"
            case hITTypeId = "HITTypeId"
        }
    }

    public struct ReviewActionDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ActionName", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "TargetId", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .string), 
            AWSShapeMember(label: "Result", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "CompleteTime", required: false, type: .timestamp)
        ]
        ///  The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. 
        public let status: ReviewActionStatus?
        ///  The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. 
        public let actionName: String?
        /// The unique identifier for the action.
        public let actionId: String?
        ///  The specific HITId or AssignmentID targeted by the action.
        public let targetId: String?
        ///  The type of object in TargetId.
        public let targetType: String?
        ///  A description of the outcome of the review.
        public let result: String?
        ///  Present only when the Results have a FAILED Status.
        public let errorCode: String?
        ///  The date when the action was completed.
        public let completeTime: TimeStamp?

        public init(status: ReviewActionStatus? = nil, actionName: String? = nil, actionId: String? = nil, targetId: String? = nil, targetType: String? = nil, result: String? = nil, errorCode: String? = nil, completeTime: TimeStamp? = nil) {
            self.status = status
            self.actionName = actionName
            self.actionId = actionId
            self.targetId = targetId
            self.targetType = targetType
            self.result = result
            self.errorCode = errorCode
            self.completeTime = completeTime
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case actionName = "ActionName"
            case actionId = "ActionId"
            case targetId = "TargetId"
            case targetType = "TargetType"
            case result = "Result"
            case errorCode = "ErrorCode"
            case completeTime = "CompleteTime"
        }
    }

    public struct UpdateHITTypeOfHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITTypeId", required: true, type: .string), 
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The ID of the new HIT type.
        public let hITTypeId: String
        /// The HIT to update.
        public let hITId: String

        public init(hITTypeId: String, hITId: String) {
            self.hITTypeId = hITTypeId
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case hITTypeId = "HITTypeId"
            case hITId = "HITId"
        }
    }

    public struct ApproveAssignmentResponse: AWSShape {
        /// The key for the payload

    }

    public struct QualificationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "Answer", required: false, type: .string), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string), 
            AWSShapeMember(label: "QualificationRequestId", required: false, type: .string)
        ]
        /// The date and time the Qualification request had a status of Submitted. This is either the time the Worker submitted answers for a Qualification test, or the time the Worker requested the Qualification if the Qualification type does not have a test. 
        public let submitTime: TimeStamp?
        ///  The ID of the Worker requesting the Qualification.
        public let workerId: String?
        ///  The Worker's answers for the Qualification type's test contained in a QuestionFormAnswers document, if the type has a test and the Worker has submitted answers. If the Worker does not provide any answers, Answer may be empty. 
        public let answer: String?
        ///  The contents of the Qualification test that was presented to the Worker, if the type has a test and the Worker has submitted answers. This value is identical to the QuestionForm associated with the Qualification type at the time the Worker requests the Qualification.
        public let test: String?
        ///  The ID of the Qualification type the Worker is requesting, as returned by the CreateQualificationType operation. 
        public let qualificationTypeId: String?
        /// The ID of the Qualification request, a unique identifier generated when the request was submitted. 
        public let qualificationRequestId: String?

        public init(submitTime: TimeStamp? = nil, workerId: String? = nil, answer: String? = nil, test: String? = nil, qualificationTypeId: String? = nil, qualificationRequestId: String? = nil) {
            self.submitTime = submitTime
            self.workerId = workerId
            self.answer = answer
            self.test = test
            self.qualificationTypeId = qualificationTypeId
            self.qualificationRequestId = qualificationRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case submitTime = "SubmitTime"
            case workerId = "WorkerId"
            case answer = "Answer"
            case test = "Test"
            case qualificationTypeId = "QualificationTypeId"
            case qualificationRequestId = "QualificationRequestId"
        }
    }

    public struct DisassociateQualificationFromWorkerRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        /// A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.
        public let reason: String?
        /// The ID of the Worker who possesses the Qualification to be revoked.
        public let workerId: String
        /// The ID of the Qualification type of the Qualification to be revoked.
        public let qualificationTypeId: String

        public init(reason: String? = nil, workerId: String, qualificationTypeId: String) {
            self.reason = reason
            self.workerId = workerId
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case workerId = "WorkerId"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct UpdateQualificationTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationType", required: false, type: .structure)
        ]
        ///  Contains a QualificationType data structure.
        public let qualificationType: QualificationType?

        public init(qualificationType: QualificationType? = nil) {
            self.qualificationType = qualificationType
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationType = "QualificationType"
        }
    }

    public struct ReviewResultDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "SubjectType", required: false, type: .string), 
            AWSShapeMember(label: "SubjectId", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "QuestionId", required: false, type: .string)
        ]
        ///  Key identifies the particular piece of reviewed information. 
        public let key: String?
        ///  The type of the object from the SubjectId field.
        public let subjectType: String?
        /// The HITID or AssignmentId about which this result was taken. Note that HIT-level Review Policies will often emit results about both the HIT itself and its Assignments, while Assignment-level review policies generally only emit results about the Assignment itself. 
        public let subjectId: String?
        ///  A unique identifier of the Review action result. 
        public let actionId: String?
        ///  The values of Key provided by the review policies you have selected. 
        public let value: String?
        ///  Specifies the QuestionId the result is describing. Depending on whether the TargetType is a HIT or Assignment this results could specify multiple values. If TargetType is HIT and QuestionId is absent, then the result describes results of the HIT, including the HIT agreement score. If ObjectType is Assignment and QuestionId is absent, then the result describes the Worker's performance on the HIT. 
        public let questionId: String?

        public init(key: String? = nil, subjectType: String? = nil, subjectId: String? = nil, actionId: String? = nil, value: String? = nil, questionId: String? = nil) {
            self.key = key
            self.subjectType = subjectType
            self.subjectId = subjectId
            self.actionId = actionId
            self.value = value
            self.questionId = questionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case subjectType = "SubjectType"
            case subjectId = "SubjectId"
            case actionId = "ActionId"
            case value = "Value"
            case questionId = "QuestionId"
        }
    }

    public struct GetAssignmentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: true, type: .string)
        ]
        /// The ID of the Assignment to be retrieved.
        public let assignmentId: String

        public init(assignmentId: String) {
            self.assignmentId = assignmentId
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
        }
    }

    public struct ListHITsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Pagination token
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct NotifyWorkersResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyWorkersFailureStatuses", required: false, type: .list)
        ]
        ///  When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects. 
        public let notifyWorkersFailureStatuses: [NotifyWorkersFailureStatus]?

        public init(notifyWorkersFailureStatuses: [NotifyWorkersFailureStatus]? = nil) {
            self.notifyWorkersFailureStatuses = notifyWorkersFailureStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case notifyWorkersFailureStatuses = "NotifyWorkersFailureStatuses"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case assignmentaccepted = "AssignmentAccepted"
        case assignmentabandoned = "AssignmentAbandoned"
        case assignmentreturned = "AssignmentReturned"
        case assignmentsubmitted = "AssignmentSubmitted"
        case assignmentrejected = "AssignmentRejected"
        case assignmentapproved = "AssignmentApproved"
        case hitcreated = "HITCreated"
        case hitexpired = "HITExpired"
        case hitreviewable = "HITReviewable"
        case hitextended = "HITExtended"
        case hitdisposed = "HITDisposed"
        case ping = "Ping"
        public var description: String { return self.rawValue }
    }

    public struct GetQualificationTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationType", required: false, type: .structure)
        ]
        ///  The returned Qualification Type
        public let qualificationType: QualificationType?

        public init(qualificationType: QualificationType? = nil) {
            self.qualificationType = qualificationType
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationType = "QualificationType"
        }
    }

    public struct PolicyParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MapEntries", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        ///  List of ParameterMapEntry objects. 
        public let mapEntries: [ParameterMapEntry]?
        ///  Name of the parameter from the list of Review Polices. 
        public let key: String?
        ///  The list of values of the Parameter
        public let values: [String]?

        public init(mapEntries: [ParameterMapEntry]? = nil, key: String? = nil, values: [String]? = nil) {
            self.mapEntries = mapEntries
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case mapEntries = "MapEntries"
            case key = "Key"
            case values = "Values"
        }
    }

    public struct DeleteWorkerBlockRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string)
        ]
        /// A message that explains the reason for unblocking the Worker. The Worker does not see this message.
        public let reason: String?
        /// The ID of the Worker to unblock.
        public let workerId: String

        public init(reason: String? = nil, workerId: String) {
            self.reason = reason
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case workerId = "WorkerId"
        }
    }

    public enum AssignmentStatus: String, CustomStringConvertible, Codable {
        case submitted = "Submitted"
        case approved = "Approved"
        case rejected = "Rejected"
        public var description: String { return self.rawValue }
    }

    public struct RejectAssignmentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterFeedback", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentId", required: true, type: .string)
        ]
        ///  A message for the Worker, which the Worker can see in the Status section of the web site. 
        public let requesterFeedback: String?
        ///  The ID of the assignment. The assignment must correspond to a HIT created by the Requester. 
        public let assignmentId: String

        public init(requesterFeedback: String? = nil, assignmentId: String) {
            self.requesterFeedback = requesterFeedback
            self.assignmentId = assignmentId
        }

        private enum CodingKeys: String, CodingKey {
            case requesterFeedback = "RequesterFeedback"
            case assignmentId = "AssignmentId"
        }
    }

    public struct AcceptQualificationRequestRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer), 
            AWSShapeMember(label: "QualificationRequestId", required: true, type: .string)
        ]
        ///  The value of the Qualification. You can omit this value if you are using the presence or absence of the Qualification as the basis for a HIT requirement. 
        public let integerValue: Int32?
        /// The ID of the Qualification request, as returned by the GetQualificationRequests operation.
        public let qualificationRequestId: String

        public init(integerValue: Int32? = nil, qualificationRequestId: String) {
            self.integerValue = integerValue
            self.qualificationRequestId = qualificationRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case integerValue = "IntegerValue"
            case qualificationRequestId = "QualificationRequestId"
        }
    }

    public struct ListReviewableHITsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "HITTypeId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        ///  Can be either Reviewable or Reviewing. Reviewable is the default value. 
        public let status: ReviewableHITStatus?
        ///  The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered 
        public let hITTypeId: String?
        /// Pagination Token
        public let nextToken: String?
        ///  Limit the number of results returned. 
        public let maxResults: Int32?

        public init(status: ReviewableHITStatus? = nil, hITTypeId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.status = status
            self.hITTypeId = hITTypeId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case hITTypeId = "HITTypeId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct SendTestEventNotificationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "TestEventType", required: true, type: .enum)
        ]
        ///  The notification specification to test. This value is identical to the value you would provide to the UpdateNotificationSettings operation when you establish the notification specification for a HIT type. 
        public let notification: NotificationSpecification
        ///  The event to simulate to test the notification specification. This event is included in the test message even if the notification specification does not include the event type. The notification specification does not filter out the test event. 
        public let testEventType: EventType

        public init(notification: NotificationSpecification, testEventType: EventType) {
            self.notification = notification
            self.testEventType = testEventType
        }

        private enum CodingKeys: String, CodingKey {
            case notification = "Notification"
            case testEventType = "TestEventType"
        }
    }

    public struct ApproveAssignmentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterFeedback", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentId", required: true, type: .string), 
            AWSShapeMember(label: "OverrideRejection", required: false, type: .boolean)
        ]
        ///  A message for the Worker, which the Worker can see in the Status section of the web site. 
        public let requesterFeedback: String?
        ///  The ID of the assignment. The assignment must correspond to a HIT created by the Requester. 
        public let assignmentId: String
        ///  A flag indicating that an assignment should be approved even if it was previously rejected. Defaults to False. 
        public let overrideRejection: Bool?

        public init(requesterFeedback: String? = nil, assignmentId: String, overrideRejection: Bool? = nil) {
            self.requesterFeedback = requesterFeedback
            self.assignmentId = assignmentId
            self.overrideRejection = overrideRejection
        }

        private enum CodingKeys: String, CodingKey {
            case requesterFeedback = "RequesterFeedback"
            case assignmentId = "AssignmentId"
            case overrideRejection = "OverrideRejection"
        }
    }

    public struct GetAccountBalanceResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OnHoldBalance", required: false, type: .string), 
            AWSShapeMember(label: "AvailableBalance", required: false, type: .string)
        ]
        public let onHoldBalance: String?
        public let availableBalance: String?

        public init(onHoldBalance: String? = nil, availableBalance: String? = nil) {
            self.onHoldBalance = onHoldBalance
            self.availableBalance = availableBalance
        }

        private enum CodingKeys: String, CodingKey {
            case onHoldBalance = "OnHoldBalance"
            case availableBalance = "AvailableBalance"
        }
    }

    public struct GetQualificationScoreRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string)
        ]
        /// The ID of the QualificationType.
        public let qualificationTypeId: String
        /// The ID of the Worker whose Qualification is being updated.
        public let workerId: String

        public init(qualificationTypeId: String, workerId: String) {
            self.qualificationTypeId = qualificationTypeId
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
            case workerId = "WorkerId"
        }
    }

    public struct ListWorkerBlocksResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer), 
            AWSShapeMember(label: "WorkerBlocks", required: false, type: .list)
        ]
        public let nextToken: String?
        ///  The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
        public let numResults: Int32?
        ///  The list of WorkerBlocks, containing the collection of Worker IDs and reasons for blocking.
        public let workerBlocks: [WorkerBlock]?

        public init(nextToken: String? = nil, numResults: Int32? = nil, workerBlocks: [WorkerBlock]? = nil) {
            self.nextToken = nextToken
            self.numResults = numResults
            self.workerBlocks = workerBlocks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case numResults = "NumResults"
            case workerBlocks = "WorkerBlocks"
        }
    }

    public struct UpdateNotificationSettingsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notification", required: false, type: .structure), 
            AWSShapeMember(label: "HITTypeId", required: true, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean)
        ]
        ///  The notification specification for the HIT type. 
        public let notification: NotificationSpecification?
        ///  The ID of the HIT type whose notification specification is being updated. 
        public let hITTypeId: String
        ///  Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed. 
        public let active: Bool?

        public init(notification: NotificationSpecification? = nil, hITTypeId: String, active: Bool? = nil) {
            self.notification = notification
            self.hITTypeId = hITTypeId
            self.active = active
        }

        private enum CodingKeys: String, CodingKey {
            case notification = "Notification"
            case hITTypeId = "HITTypeId"
            case active = "Active"
        }
    }

    public struct GetQualificationTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        /// The ID of the QualificationType.
        public let qualificationTypeId: String

        public init(qualificationTypeId: String) {
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct NotificationSpecification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventTypes", required: false, type: .list), 
            AWSShapeMember(label: "Destination", required: true, type: .string), 
            AWSShapeMember(label: "Transport", required: true, type: .enum), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        ///  The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. 
        public let eventTypes: [EventType]?
        ///  The destination for notification messages. or email notifications (if Transport is Email), this is an email address. For Amazon Simple Queue Service (Amazon SQS) notifications (if Transport is SQS), this is the URL for your Amazon SQS queue. 
        public let destination: String
        ///  The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS. 
        public let transport: NotificationTransport
        /// The version of the Notification API to use. Valid value is 2006-05-05.
        public let version: String?

        public init(eventTypes: [EventType]? = nil, destination: String, transport: NotificationTransport, version: String? = nil) {
            self.eventTypes = eventTypes
            self.destination = destination
            self.transport = transport
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case eventTypes = "EventTypes"
            case destination = "Destination"
            case transport = "Transport"
            case version = "Version"
        }
    }

    public struct ListReviewPolicyResultsForHITRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyLevels", required: false, type: .list), 
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "RetrieveResults", required: false, type: .boolean), 
            AWSShapeMember(label: "RetrieveActions", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Pagination token
        public let nextToken: String?
        ///  The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. 
        public let policyLevels: [ReviewPolicyLevel]?
        /// The unique identifier of the HIT to retrieve review results for.
        public let hITId: String
        ///  Specify if the operation should retrieve a list of the results computed by the Review Policies. 
        public let retrieveResults: Bool?
        ///  Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. 
        public let retrieveActions: Bool?
        /// Limit the number of results returned.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, policyLevels: [ReviewPolicyLevel]? = nil, hITId: String, retrieveResults: Bool? = nil, retrieveActions: Bool? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.policyLevels = policyLevels
            self.hITId = hITId
            self.retrieveResults = retrieveResults
            self.retrieveActions = retrieveActions
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyLevels = "PolicyLevels"
            case hITId = "HITId"
            case retrieveResults = "RetrieveResults"
            case retrieveActions = "RetrieveActions"
            case maxResults = "MaxResults"
        }
    }

    public enum QualificationStatus: String, CustomStringConvertible, Codable {
        case granted = "Granted"
        case revoked = "Revoked"
        public var description: String { return self.rawValue }
    }

}