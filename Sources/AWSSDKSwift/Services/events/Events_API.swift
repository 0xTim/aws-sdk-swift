// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
Amazon CloudWatch Events helps you to respond to state changes in your AWS resources. When your resources change state, they automatically send events into an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a pre-determined schedule. For example, you can configure rules to:   Automatically invoke an AWS Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.   Direct specific API records from CloudTrail to an Amazon Kinesis stream for detailed analysis of potential security or availability risks.   Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.   For more information about the features of Amazon CloudWatch Events, see the Amazon CloudWatch Events User Guide.
*/
public struct Events {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "AWSEvents",
            service: "events",
            endpoint: endpoint
        )
    }

    ///  Lists your Amazon CloudWatch Events rules. You can either list all the rules or you can provide a prefix to match to the rule names.
    public func listRules(_ input: ListRulesRequest) throws -> ListRulesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListRules", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Enables the specified rule. If the rule does not exist, the operation fails. When you enable a rule, incoming events might not immediately start matching to a newly enabled rule. Please allow a short period of time for changes to take effect.
    public func enableRule(_ input: EnableRuleRequest) throws {
        _ = try request.invoke(operation: "EnableRule", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Removes the specified targets from the specified rule. When the rule is triggered, those targets are no longer be invoked. When you remove a target, when the associated rule triggers, removed targets might continue to be invoked. Please allow a short period of time for changes to take effect.
    public func removeTargets(_ input: RemoveTargetsRequest) throws -> RemoveTargetsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "RemoveTargets", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Tests whether the specified event pattern matches the provided event. Most services in AWS treat : or / as the same character in Amazon Resource Names (ARNs). However, CloudWatch Events uses an exact match in event patterns and rules. Be sure to use the correct ARN characters when creating event patterns so that they match the ARN syntax in the event you want to match.
    public func testEventPattern(_ input: TestEventPatternRequest) throws -> TestEventPatternResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "TestEventPattern", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Disables the specified rule. A disabled rule won't match any events, and won't self-trigger if it has a schedule expression. When you disable a rule, incoming events might continue to match to the disabled rule. Please allow a short period of time for changes to take effect.
    public func disableRule(_ input: DisableRuleRequest) throws {
        _ = try request.invoke(operation: "DisableRule", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Lists the rules for the specified target. You can see which of the rules in Amazon CloudWatch Events can invoke a specific target in your account.
    public func listRuleNamesByTarget(_ input: ListRuleNamesByTargetRequest) throws -> ListRuleNamesByTargetResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListRuleNamesByTarget", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule. Targets are the resources that are invoked when a rule is triggered. Example targets include EC2 instances, AWS Lambda functions, Amazon Kinesis streams, Amazon ECS tasks, AWS Step Functions state machines, and built-in targets. Note that creating rules with built-in targets is supported only in the AWS Management Console. For some target types, PutTargets provides target-specific parameters. If the target is an Amazon Kinesis stream, you can optionally specify which shard the event goes to by using the KinesisParameters argument. To invoke a command on multiple EC2 instances with one rule, you can use the RunCommandParameters field. To be able to make API calls against the resources that you own, Amazon CloudWatch Events needs the appropriate permissions. For AWS Lambda and Amazon SNS resources, CloudWatch Events relies on resource-based policies. For EC2 instances, Amazon Kinesis streams, and AWS Step Functions state machines, CloudWatch Events relies on IAM roles that you specify in the RoleARN argument in PutTarget. For more information, see Authentication and Access Control in the Amazon CloudWatch Events User Guide.  Input, InputPath and InputTransformer are mutually exclusive and optional parameters of a target. When a rule is triggered due to a matched event:   If none of the following arguments are specified for a target, then the entire event is passed to the target in JSON form (unless the target is Amazon EC2 Run Command or Amazon ECS task, in which case nothing from the event is passed to the target).   If Input is specified in the form of valid JSON, then the matched event is overridden with this constant.   If InputPath is specified in the form of JSONPath (for example, $.detail), then only the part of the event specified in the path is passed to the target (for example, only the detail part of the event is passed).    If InputTransformer is specified, then one or more specified JSONPaths are extracted from the event and used as values in a template that you specify as the input to the target.   When you add targets to a rule and the associated rule triggers soon after, new or updated targets might not be immediately invoked. Please allow a short period of time for changes to take effect.
    public func putTargets(_ input: PutTargetsRequest) throws -> PutTargetsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutTargets", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified rule. You must remove all targets from a rule using RemoveTargets before you can delete the rule. When you delete a rule, incoming events might continue to match to the deleted rule. Please allow a short period of time for changes to take effect.
    public func deleteRule(_ input: DeleteRuleRequest) throws {
        _ = try request.invoke(operation: "DeleteRule", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Describes the specified rule.
    public func describeRule(_ input: DescribeRuleRequest) throws -> DescribeRuleResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeRule", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the targets assigned to the specified rule.
    public func listTargetsByRule(_ input: ListTargetsByRuleRequest) throws -> ListTargetsByRuleResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListTargetsByRule", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates or updates the specified rule. Rules are enabled by default, or based on value of the state. You can disable a rule using DisableRule. When you create or update a rule, incoming events might not immediately start matching to new or updated rules. Please allow a short period of time for changes to take effect. A rule must contain at least an EventPattern or ScheduleExpression. Rules with EventPatterns are triggered when a matching event is observed. Rules with ScheduleExpressions self-trigger based on the given schedule. A rule can have both an EventPattern and a ScheduleExpression, in which case the rule triggers on matching events as well as on a schedule. Most services in AWS treat : or / as the same character in Amazon Resource Names (ARNs). However, CloudWatch Events uses an exact match in event patterns and rules. Be sure to use the correct ARN characters when creating event patterns so that they match the ARN syntax in the event you want to match.
    public func putRule(_ input: PutRuleRequest) throws -> PutRuleResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutRule", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Sends custom events to Amazon CloudWatch Events so that they can be matched to rules.
    public func putEvents(_ input: PutEventsRequest) throws -> PutEventsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutEvents", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try EventsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}