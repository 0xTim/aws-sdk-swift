// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Greengrass {

    public struct ListLoggerDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct UpdateDeviceDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListFunctionDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct Deployment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeploymentId", required: false, type: .string), 
            AWSShapeProperty(label: "CreatedAt", required: false, type: .string), 
            AWSShapeProperty(label: "GroupArn", required: false, type: .string), 
            AWSShapeProperty(label: "DeploymentArn", required: false, type: .string)
        ]
        /// Id of the deployment.
        public let deploymentId: String?
        /// Timestamp when the deployment was created.
        public let createdAt: String?
        /// Arn of the group for this deployment.
        public let groupArn: String?
        /// Arn of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, createdAt: String? = nil, groupArn: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.createdAt = createdAt
            self.groupArn = groupArn
            self.deploymentArn = deploymentArn
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentId = dictionary["DeploymentId"] as? String
            self.createdAt = dictionary["CreatedAt"] as? String
            self.groupArn = dictionary["GroupArn"] as? String
            self.deploymentArn = dictionary["DeploymentArn"] as? String
        }
    }

    public struct GetGroupVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Definition", required: false, type: .structure), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Unique Id for a version of the Group.
        public let version: String?
        /// Arn of the group version.
        public let arn: String?
        /// Timestamp when the group version was created.
        public let creationTimestamp: String?
        /// Information on the definition
        public let definition: GroupVersion?
        /// Id of the group version.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: GroupVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            if let definition = dictionary["Definition"] as? [String: Any] { self.definition = try Greengrass.GroupVersion(dictionary: definition) } else { self.definition = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct GroupCertificateConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", required: false, type: .string)
        ]
        /// Amount of time when the certificate expires in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        /// Amount of time when the certificate authority expires in milliseconds.
        public let certificateAuthorityExpiryInMilliseconds: String?
        /// Id of the group the certificate configuration belongs to.
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.certificateExpiryInMilliseconds = dictionary["CertificateExpiryInMilliseconds"] as? String
            self.certificateAuthorityExpiryInMilliseconds = dictionary["CertificateAuthorityExpiryInMilliseconds"] as? String
            self.groupId = dictionary["GroupId"] as? String
        }
    }

    public struct UpdateFunctionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListFunctionDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Definitions", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let definitions = dictionary["Definitions"] as? [[String: Any]] {
                self.definitions = try definitions.map({ try DefinitionInformation(dictionary: $0) })
            } else { 
                self.definitions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct AssociateRoleToGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "RoleArn", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// Role arn you wish to associate with this group.
        public let roleArn: String?
        public let groupId: String

        public init(roleArn: String? = nil, groupId: String) {
            self.roleArn = roleArn
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.roleArn = dictionary["RoleArn"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct DeleteLoggerDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum LoggerComponent: String, CustomStringConvertible {
        case greengrasssystem = "GreengrassSystem"
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct ListVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Versions
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct GetFunctionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "FunctionDefinitionVersionId", location: .uri(locationName: "FunctionDefinitionVersionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String
        public let functionDefinitionVersionId: String

        public init(functionDefinitionId: String, functionDefinitionVersionId: String) {
            self.functionDefinitionId = functionDefinitionId
            self.functionDefinitionVersionId = functionDefinitionVersionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let functionDefinitionId = dictionary["FunctionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionId") }
            self.functionDefinitionId = functionDefinitionId
            guard let functionDefinitionVersionId = dictionary["FunctionDefinitionVersionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionVersionId") }
            self.functionDefinitionVersionId = functionDefinitionVersionId
        }
    }

    public struct CreateLoggerDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct Subscription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Subject", required: false, type: .string), 
            AWSShapeProperty(label: "Target", required: false, type: .string), 
            AWSShapeProperty(label: "Source", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Subject of the message.
        public let subject: String?
        /// Where the message is sent to. Can be a thing arn, lambda arn or word 'cloud'.
        public let target: String?
        /// Source of the subscription. Can be a thing arn, lambda arn or word 'cloud'
        public let source: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(subject: String? = nil, target: String? = nil, source: String? = nil, id: String? = nil) {
            self.subject = subject
            self.target = target
            self.source = source
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.subject = dictionary["Subject"] as? String
            self.target = dictionary["Target"] as? String
            self.source = dictionary["Source"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateDeviceDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct Function: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "FunctionConfiguration", required: false, type: .structure), 
            AWSShapeProperty(label: "FunctionArn", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Configuration of the function
        public let functionConfiguration: FunctionConfiguration?
        /// Arn of the Lambda function.
        public let functionArn: String?
        /// Id of the function in this version.
        public let id: String?

        public init(functionConfiguration: FunctionConfiguration? = nil, functionArn: String? = nil, id: String? = nil) {
            self.functionConfiguration = functionConfiguration
            self.functionArn = functionArn
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let functionConfiguration = dictionary["FunctionConfiguration"] as? [String: Any] { self.functionConfiguration = try Greengrass.FunctionConfiguration(dictionary: functionConfiguration) } else { self.functionConfiguration = nil }
            self.functionArn = dictionary["FunctionArn"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct ListFunctionDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct GetLoggerDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateCoreDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct UpdateSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: DeviceDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: DeviceDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.name = dictionary["Name"] as? String
            if let initialVersion = dictionary["InitialVersion"] as? [String: Any] { self.initialVersion = try Greengrass.DeviceDefinitionVersion(dictionary: initialVersion) } else { self.initialVersion = nil }
        }
    }

    public struct UpdateGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let name: String?
        public let groupId: String

        public init(name: String? = nil, groupId: String) {
            self.name = name
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetDeviceDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeviceDefinitionVersionId", location: .uri(locationName: "DeviceDefinitionVersionId"), required: true, type: .string), 
            AWSShapeProperty(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionVersionId: String
        public let deviceDefinitionId: String

        public init(deviceDefinitionVersionId: String, deviceDefinitionId: String) {
            self.deviceDefinitionVersionId = deviceDefinitionVersionId
            self.deviceDefinitionId = deviceDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceDefinitionVersionId = dictionary["DeviceDefinitionVersionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionVersionId") }
            self.deviceDefinitionVersionId = deviceDefinitionVersionId
            guard let deviceDefinitionId = dictionary["DeviceDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionId") }
            self.deviceDefinitionId = deviceDefinitionId
        }
    }

    public struct UpdateCoreDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateFunctionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct UpdateDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let name: String?

        public init(deviceDefinitionId: String, name: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceDefinitionId = dictionary["DeviceDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionId") }
            self.deviceDefinitionId = deviceDefinitionId
            self.name = dictionary["Name"] as? String
        }
    }

    public struct DeleteFunctionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListCoreDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Definitions", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let definitions = dictionary["Definitions"] as? [[String: Any]] {
                self.definitions = try definitions.map({ try DefinitionInformation(dictionary: $0) })
            } else { 
                self.definitions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetSubscriptionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Definition", required: false, type: .structure), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Version of the subscription definition version.
        public let version: String?
        /// Arn of the subscription definition version.
        public let arn: String?
        /// Timestamp of when the subscription definition version was created.
        public let creationTimestamp: String?
        /// Information on the definition
        public let definition: SubscriptionDefinitionVersion?
        /// Id of the subscription definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: SubscriptionDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            if let definition = dictionary["Definition"] as? [String: Any] { self.definition = try Greengrass.SubscriptionDefinitionVersion(dictionary: definition) } else { self.definition = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct ListLoggerDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Definitions", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let definitions = dictionary["Definitions"] as? [[String: Any]] {
                self.definitions = try definitions.map({ try DefinitionInformation(dictionary: $0) })
            } else { 
                self.definitions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DisassociateRoleFromGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetAssociatedRoleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetConnectivityInfoResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ConnectivityInfo", required: false, type: .list), 
            AWSShapeProperty(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// Connectivity info array
        public let connectivityInfo: [ConnectivityInfo]?
        public let message: String?

        public init(connectivityInfo: [ConnectivityInfo]? = nil, message: String? = nil) {
            self.connectivityInfo = connectivityInfo
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            if let connectivityInfo = dictionary["ConnectivityInfo"] as? [[String: Any]] {
                self.connectivityInfo = try connectivityInfo.map({ try ConnectivityInfo(dictionary: $0) })
            } else { 
                self.connectivityInfo = nil
            }
            self.message = dictionary["message"] as? String
        }
    }

    public struct CreateDeviceDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Devices", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let deviceDefinitionId: String
        public let devices: [Device]?

        public init(amznClientToken: String? = nil, deviceDefinitionId: String, devices: [Device]? = nil) {
            self.amznClientToken = amznClientToken
            self.deviceDefinitionId = deviceDefinitionId
            self.devices = devices
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            guard let deviceDefinitionId = dictionary["DeviceDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionId") }
            self.deviceDefinitionId = deviceDefinitionId
            if let devices = dictionary["Devices"] as? [[String: Any]] {
                self.devices = try devices.map({ try Device(dictionary: $0) })
            } else { 
                self.devices = nil
            }
        }
    }

    public struct ListDeploymentsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Deployments", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        /// Information on deployments
        public let deployments: [Deployment]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(deployments: [Deployment]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let deployments = dictionary["Deployments"] as? [[String: Any]] {
                self.deployments = try deployments.map({ try Deployment(dictionary: $0) })
            } else { 
                self.deployments = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetGroupVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupVersionId", location: .uri(locationName: "GroupVersionId"), required: true, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupVersionId: String
        public let groupId: String

        public init(groupVersionId: String, groupId: String) {
            self.groupVersionId = groupVersionId
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupVersionId = dictionary["GroupVersionId"] as? String else { throw InitializableError.missingRequiredParam("GroupVersionId") }
            self.groupVersionId = groupVersionId
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct UpdateGroupCertificateConfigurationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let certificateAuthorityExpiryInMilliseconds: String?
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.certificateExpiryInMilliseconds = dictionary["CertificateExpiryInMilliseconds"] as? String
            self.certificateAuthorityExpiryInMilliseconds = dictionary["CertificateAuthorityExpiryInMilliseconds"] as? String
            self.groupId = dictionary["GroupId"] as? String
        }
    }

    public struct ListGroupVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct GetLoggerDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "LoggerDefinitionVersionId", location: .uri(locationName: "LoggerDefinitionVersionId"), required: true, type: .string), 
            AWSShapeProperty(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionVersionId: String
        public let loggerDefinitionId: String

        public init(loggerDefinitionVersionId: String, loggerDefinitionId: String) {
            self.loggerDefinitionVersionId = loggerDefinitionVersionId
            self.loggerDefinitionId = loggerDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let loggerDefinitionVersionId = dictionary["LoggerDefinitionVersionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionVersionId") }
            self.loggerDefinitionVersionId = loggerDefinitionVersionId
            guard let loggerDefinitionId = dictionary["LoggerDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionId") }
            self.loggerDefinitionId = loggerDefinitionId
        }
    }

    public struct GetFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let functionDefinitionId = dictionary["FunctionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionId") }
            self.functionDefinitionId = functionDefinitionId
        }
    }

    public struct UpdateGroupCertificateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// Amount of time when the certificate expires in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        public let groupId: String

        public init(certificateExpiryInMilliseconds: String? = nil, groupId: String) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.certificateExpiryInMilliseconds = dictionary["CertificateExpiryInMilliseconds"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetSubscriptionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "SubscriptionDefinitionVersionId", location: .uri(locationName: "SubscriptionDefinitionVersionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let subscriptionDefinitionVersionId: String

        public init(subscriptionDefinitionId: String, subscriptionDefinitionVersionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptionDefinitionVersionId = subscriptionDefinitionVersionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptionDefinitionId = dictionary["SubscriptionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionId") }
            self.subscriptionDefinitionId = subscriptionDefinitionId
            guard let subscriptionDefinitionVersionId = dictionary["SubscriptionDefinitionVersionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionVersionId") }
            self.subscriptionDefinitionVersionId = subscriptionDefinitionVersionId
        }
    }

    public struct ListSubscriptionDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct UpdateSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let name: String?

        public init(subscriptionDefinitionId: String, name: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptionDefinitionId = dictionary["SubscriptionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionId") }
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.name = dictionary["Name"] as? String
        }
    }

    public struct CreateCoreDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Cores", required: false, type: .list), 
            AWSShapeProperty(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let cores: [Core]?
        public let coreDefinitionId: String

        public init(amznClientToken: String? = nil, cores: [Core]? = nil, coreDefinitionId: String) {
            self.amznClientToken = amznClientToken
            self.cores = cores
            self.coreDefinitionId = coreDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            if let cores = dictionary["Cores"] as? [[String: Any]] {
                self.cores = try cores.map({ try Core(dictionary: $0) })
            } else { 
                self.cores = nil
            }
            guard let coreDefinitionId = dictionary["CoreDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionId") }
            self.coreDefinitionId = coreDefinitionId
        }
    }

    public struct ListSubscriptionDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct GetCoreDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Definition", required: false, type: .structure), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Version of the core definition version.
        public let version: String?
        /// Arn of the core definition version.
        public let arn: String?
        /// Timestamp of when the core definition version was created.
        public let creationTimestamp: String?
        /// Information on definition
        public let definition: CoreDefinitionVersion?
        /// Id of the core definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: CoreDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            if let definition = dictionary["Definition"] as? [String: Any] { self.definition = try Greengrass.CoreDefinitionVersion(dictionary: definition) } else { self.definition = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DeleteSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptionDefinitionId = dictionary["SubscriptionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionId") }
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }
    }

    public struct ListGroupsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Groups", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Groups
        public let groups: [GroupInformation]?

        public init(nextToken: String? = nil, groups: [GroupInformation]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let groups = dictionary["Groups"] as? [[String: Any]] {
                self.groups = try groups.map({ try GroupInformation(dictionary: $0) })
            } else { 
                self.groups = nil
            }
        }
    }

    public struct CreateGroupCertificateAuthorityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// Arn of the group certificate authority.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        public init(dictionary: [String: Any]) throws {
            self.groupCertificateAuthorityArn = dictionary["GroupCertificateAuthorityArn"] as? String
        }
    }

    public struct ListGroupsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct GetServiceRoleForAccountResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "RoleArn", required: false, type: .string), 
            AWSShapeProperty(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Role arn which is associated to the account.
        public let roleArn: String?
        /// Time when the service role was associated to the account.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        public init(dictionary: [String: Any]) throws {
            self.roleArn = dictionary["RoleArn"] as? String
            self.associatedAt = dictionary["AssociatedAt"] as? String
        }
    }

    public struct DeleteFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let functionDefinitionId = dictionary["FunctionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionId") }
            self.functionDefinitionId = functionDefinitionId
        }
    }

    public struct GroupVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "SubscriptionDefinitionVersionArn", required: false, type: .string)
        ]
        /// Core definition version arn for this group.
        public let coreDefinitionVersionArn: String?
        /// Device definition version arn for this group.
        public let deviceDefinitionVersionArn: String?
        /// Logger definitionv ersion arn for this group.
        public let loggerDefinitionVersionArn: String?
        /// Function definition version arn for this group.
        public let functionDefinitionVersionArn: String?
        /// Subscription definition version arn for this group.
        public let subscriptionDefinitionVersionArn: String?

        public init(coreDefinitionVersionArn: String? = nil, deviceDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, subscriptionDefinitionVersionArn: String? = nil) {
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
        }

        public init(dictionary: [String: Any]) throws {
            self.coreDefinitionVersionArn = dictionary["CoreDefinitionVersionArn"] as? String
            self.deviceDefinitionVersionArn = dictionary["DeviceDefinitionVersionArn"] as? String
            self.loggerDefinitionVersionArn = dictionary["LoggerDefinitionVersionArn"] as? String
            self.functionDefinitionVersionArn = dictionary["FunctionDefinitionVersionArn"] as? String
            self.subscriptionDefinitionVersionArn = dictionary["SubscriptionDefinitionVersionArn"] as? String
        }
    }

    public struct ListSubscriptionDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let nextToken: String?
        public let maxResults: String?

        public init(subscriptionDefinitionId: String, nextToken: String? = nil, maxResults: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptionDefinitionId = dictionary["SubscriptionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionId") }
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct DeleteDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceDefinitionId = dictionary["DeviceDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionId") }
            self.deviceDefinitionId = deviceDefinitionId
        }
    }

    public struct GetDeviceDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Definition", required: false, type: .structure), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Version of the device definition version.
        public let version: String?
        /// Arn of the device definition version.
        public let arn: String?
        /// Timestamp of when the device definition version was created.
        public let creationTimestamp: String?
        /// Device definition version
        public let definition: DeviceDefinitionVersion?
        /// Id of the device definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: DeviceDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            if let definition = dictionary["Definition"] as? [String: Any] { self.definition = try Greengrass.DeviceDefinitionVersion(dictionary: definition) } else { self.definition = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DefinitionInformation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Arn of the definition.
        public let arn: String?
        /// Timestamp of when the definition was created.
        public let creationTimestamp: String?
        /// Name of the definition.
        public let name: String?
        /// Last updated timestamp of the definition.
        public let lastUpdatedTimestamp: String?
        /// Latest version arn of the definition.
        public let latestVersionArn: String?
        /// Last version of the definition.
        public let latestVersion: String?
        /// Id of the definition.
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct AssociateServiceRoleToAccountRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "RoleArn", required: false, type: .string)
        ]
        /// Role arn you wish to associate with this account.
        public let roleArn: String?

        public init(roleArn: String? = nil) {
            self.roleArn = roleArn
        }

        public init(dictionary: [String: Any]) throws {
            self.roleArn = dictionary["RoleArn"] as? String
        }
    }

    public enum DeploymentType: String, CustomStringConvertible {
        case newdeployment = "NewDeployment"
        case redeployment = "Redeployment"
        public var description: String { return self.rawValue }
    }

    public struct GeneralError: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ErrorDetails", required: false, type: .list), 
            AWSShapeProperty(label: "Message", required: false, type: .string)
        ]
        /// Error Details
        public let errorDetails: [ErrorDetail]?
        /// Message
        public let message: String?

        public init(errorDetails: [ErrorDetail]? = nil, message: String? = nil) {
            self.errorDetails = errorDetails
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            if let errorDetails = dictionary["ErrorDetails"] as? [[String: Any]] {
                self.errorDetails = try errorDetails.map({ try ErrorDetail(dictionary: $0) })
            } else { 
                self.errorDetails = nil
            }
            self.message = dictionary["Message"] as? String
        }
    }

    public struct ListLoggerDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let loggerDefinitionId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, loggerDefinitionId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.loggerDefinitionId = loggerDefinitionId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let loggerDefinitionId = dictionary["LoggerDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionId") }
            self.loggerDefinitionId = loggerDefinitionId
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct ListGroupCertificateAuthoritiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupCertificateAuthorities", required: false, type: .list)
        ]
        /// List of certificate authorities associated with the group.
        public let groupCertificateAuthorities: [GroupCertificateAuthorityProperties]?

        public init(groupCertificateAuthorities: [GroupCertificateAuthorityProperties]? = nil) {
            self.groupCertificateAuthorities = groupCertificateAuthorities
        }

        public init(dictionary: [String: Any]) throws {
            if let groupCertificateAuthorities = dictionary["GroupCertificateAuthorities"] as? [[String: Any]] {
                self.groupCertificateAuthorities = try groupCertificateAuthorities.map({ try GroupCertificateAuthorityProperties(dictionary: $0) })
            } else { 
                self.groupCertificateAuthorities = nil
            }
        }
    }

    public struct CreateGroupCertificateAuthorityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let groupId: String

        public init(amznClientToken: String? = nil, groupId: String) {
            self.amznClientToken = amznClientToken
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetGroupCertificateAuthorityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "PemEncodedCertificate", required: false, type: .string), 
            AWSShapeProperty(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeProperty(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// PEM encoded certificate for the group.
        public let pemEncodedCertificate: String?
        /// Id of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// Arn of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(pemEncodedCertificate: String? = nil, groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.pemEncodedCertificate = pemEncodedCertificate
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        public init(dictionary: [String: Any]) throws {
            self.pemEncodedCertificate = dictionary["PemEncodedCertificate"] as? String
            self.groupCertificateAuthorityId = dictionary["GroupCertificateAuthorityId"] as? String
            self.groupCertificateAuthorityArn = dictionary["GroupCertificateAuthorityArn"] as? String
        }
    }

    public struct ErrorDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DetailedErrorMessage", required: false, type: .string), 
            AWSShapeProperty(label: "DetailedErrorCode", required: false, type: .string)
        ]
        /// Detailed Error Message
        public let detailedErrorMessage: String?
        /// Detailed Error Code
        public let detailedErrorCode: String?

        public init(detailedErrorMessage: String? = nil, detailedErrorCode: String? = nil) {
            self.detailedErrorMessage = detailedErrorMessage
            self.detailedErrorCode = detailedErrorCode
        }

        public init(dictionary: [String: Any]) throws {
            self.detailedErrorMessage = dictionary["DetailedErrorMessage"] as? String
            self.detailedErrorCode = dictionary["DetailedErrorCode"] as? String
        }
    }

    public struct GetAssociatedRoleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "RoleArn", required: false, type: .string), 
            AWSShapeProperty(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Arn of the role that is associated with the group.
        public let roleArn: String?
        /// Time when the role was associated for the group.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        public init(dictionary: [String: Any]) throws {
            self.roleArn = dictionary["RoleArn"] as? String
            self.associatedAt = dictionary["AssociatedAt"] as? String
        }
    }

    public struct GetLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let loggerDefinitionId = dictionary["LoggerDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionId") }
            self.loggerDefinitionId = loggerDefinitionId
        }
    }

    public struct UpdateFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string)
        ]
        public let functionDefinitionId: String
        public let name: String?

        public init(functionDefinitionId: String, name: String? = nil) {
            self.functionDefinitionId = functionDefinitionId
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let functionDefinitionId = dictionary["FunctionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionId") }
            self.functionDefinitionId = functionDefinitionId
            self.name = dictionary["Name"] as? String
        }
    }

    public struct ListSubscriptionDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Definitions", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let definitions = dictionary["Definitions"] as? [[String: Any]] {
                self.definitions = try definitions.map({ try DefinitionInformation(dictionary: $0) })
            } else { 
                self.definitions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DisassociateRoleFromGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// Time when the role was disassociated from the group.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        public init(dictionary: [String: Any]) throws {
            self.disassociatedAt = dictionary["DisassociatedAt"] as? String
        }
    }

    public struct CoreDefinitionVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Cores", required: false, type: .list)
        ]
        /// Cores in the definition version.
        public let cores: [Core]?

        public init(cores: [Core]? = nil) {
            self.cores = cores
        }

        public init(dictionary: [String: Any]) throws {
            if let cores = dictionary["Cores"] as? [[String: Any]] {
                self.cores = try cores.map({ try Core(dictionary: $0) })
            } else { 
                self.cores = nil
            }
        }
    }

    public struct GetFunctionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Definition", required: false, type: .structure), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Version of the function definition version.
        public let version: String?
        /// Arn of the function definition version.
        public let arn: String?
        /// Timestamp when the funtion definition version was created.
        public let creationTimestamp: String?
        /// Information on the definition
        public let definition: FunctionDefinitionVersion?
        /// Id of the function definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: FunctionDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            if let definition = dictionary["Definition"] as? [String: Any] { self.definition = try Greengrass.FunctionDefinitionVersion(dictionary: definition) } else { self.definition = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct ListDeviceDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Definitions", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let definitions = dictionary["Definitions"] as? [[String: Any]] {
                self.definitions = try definitions.map({ try DefinitionInformation(dictionary: $0) })
            } else { 
                self.definitions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct UpdateConnectivityInfoRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ConnectivityInfo", required: false, type: .list), 
            AWSShapeProperty(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        /// Connectivity info array
        public let connectivityInfo: [ConnectivityInfo]?
        public let thingName: String

        public init(connectivityInfo: [ConnectivityInfo]? = nil, thingName: String) {
            self.connectivityInfo = connectivityInfo
            self.thingName = thingName
        }

        public init(dictionary: [String: Any]) throws {
            if let connectivityInfo = dictionary["ConnectivityInfo"] as? [[String: Any]] {
                self.connectivityInfo = try connectivityInfo.map({ try ConnectivityInfo(dictionary: $0) })
            } else { 
                self.connectivityInfo = nil
            }
            guard let thingName = dictionary["ThingName"] as? String else { throw InitializableError.missingRequiredParam("ThingName") }
            self.thingName = thingName
        }
    }

    public struct GetDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceDefinitionId = dictionary["DeviceDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionId") }
            self.deviceDefinitionId = deviceDefinitionId
        }
    }

    public struct GetDeviceDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct UpdateLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string)
        ]
        public let loggerDefinitionId: String
        public let name: String?

        public init(loggerDefinitionId: String, name: String? = nil) {
            self.loggerDefinitionId = loggerDefinitionId
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let loggerDefinitionId = dictionary["LoggerDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionId") }
            self.loggerDefinitionId = loggerDefinitionId
            self.name = dictionary["Name"] as? String
        }
    }

    public struct ListDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Definitions", required: false, type: .list), 
            AWSShapeProperty(label: "NextToken", required: false, type: .string)
        ]
        /// Definitions
        public let definitions: [DefinitionInformation]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let definitions = dictionary["Definitions"] as? [[String: Any]] {
                self.definitions = try definitions.map({ try DefinitionInformation(dictionary: $0) })
            } else { 
                self.definitions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ListLoggerDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct CreateGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct Core: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SyncShadow", required: false, type: .boolean), 
            AWSShapeProperty(label: "CertificateArn", required: false, type: .string), 
            AWSShapeProperty(label: "ThingArn", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// If true, the local shadow value automatically syncs with the cloud's shadow state.
        public let syncShadow: Bool?
        /// Certificate arn of the core.
        public let certificateArn: String?
        /// Thing arn of the core.
        public let thingArn: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(syncShadow: Bool? = nil, certificateArn: String? = nil, thingArn: String? = nil, id: String? = nil) {
            self.syncShadow = syncShadow
            self.certificateArn = certificateArn
            self.thingArn = thingArn
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.syncShadow = dictionary["SyncShadow"] as? Bool
            self.certificateArn = dictionary["CertificateArn"] as? String
            self.thingArn = dictionary["ThingArn"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DeleteSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let coreDefinitionId = dictionary["CoreDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionId") }
            self.coreDefinitionId = coreDefinitionId
        }
    }

    public struct ListFunctionDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let functionDefinitionId: String
        public let nextToken: String?
        public let maxResults: String?

        public init(functionDefinitionId: String, nextToken: String? = nil, maxResults: String? = nil) {
            self.functionDefinitionId = functionDefinitionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let functionDefinitionId = dictionary["FunctionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionId") }
            self.functionDefinitionId = functionDefinitionId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct ListDeviceDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let nextToken: String?
        public let maxResults: String?

        public init(deviceDefinitionId: String, nextToken: String? = nil, maxResults: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceDefinitionId = dictionary["DeviceDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("DeviceDefinitionId") }
            self.deviceDefinitionId = deviceDefinitionId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public enum LoggerType: String, CustomStringConvertible {
        case filesystem = "FileSystem"
        case awscloudwatch = "AWSCloudWatch"
        public var description: String { return self.rawValue }
    }

    public struct UpdateCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let name: String?
        public let coreDefinitionId: String

        public init(name: String? = nil, coreDefinitionId: String) {
            self.name = name
            self.coreDefinitionId = coreDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            guard let coreDefinitionId = dictionary["CoreDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionId") }
            self.coreDefinitionId = coreDefinitionId
        }
    }

    public struct UpdateGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateLoggerDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: LoggerDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: LoggerDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.name = dictionary["Name"] as? String
            if let initialVersion = dictionary["InitialVersion"] as? [String: Any] { self.initialVersion = try Greengrass.LoggerDefinitionVersion(dictionary: initialVersion) } else { self.initialVersion = nil }
        }
    }

    public struct ListGroupVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let groupId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, groupId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.groupId = groupId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct FunctionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Environment", required: false, type: .structure), 
            AWSShapeProperty(label: "Executable", required: false, type: .string), 
            AWSShapeProperty(label: "Timeout", required: false, type: .integer), 
            AWSShapeProperty(label: "MemorySize", required: false, type: .integer), 
            AWSShapeProperty(label: "ExecArgs", required: false, type: .string), 
            AWSShapeProperty(label: "Pinned", required: false, type: .boolean)
        ]
        /// Environment of the function configuration
        public let environment: FunctionConfigurationEnvironment?
        /// Executable
        public let executable: String?
        /// The function execution time at which Lambda should terminate the function. This timeout still applies to pinned lambdas for each request.
        public let timeout: Int32?
        /// The memory size, in KB, you configured for the function.
        public let memorySize: Int32?
        /// Execution Arguments
        public let execArgs: String?
        /// Whether the function is pinned or not. Pinned means the function is long-lived and starts when the core starts.
        public let pinned: Bool?

        public init(environment: FunctionConfigurationEnvironment? = nil, executable: String? = nil, timeout: Int32? = nil, memorySize: Int32? = nil, execArgs: String? = nil, pinned: Bool? = nil) {
            self.environment = environment
            self.executable = executable
            self.timeout = timeout
            self.memorySize = memorySize
            self.execArgs = execArgs
            self.pinned = pinned
        }

        public init(dictionary: [String: Any]) throws {
            if let environment = dictionary["Environment"] as? [String: Any] { self.environment = try Greengrass.FunctionConfigurationEnvironment(dictionary: environment) } else { self.environment = nil }
            self.executable = dictionary["Executable"] as? String
            self.timeout = dictionary["Timeout"] as? Int32
            self.memorySize = dictionary["MemorySize"] as? Int32
            self.execArgs = dictionary["ExecArgs"] as? String
            self.pinned = dictionary["Pinned"] as? Bool
        }
    }

    public struct GetLoggerDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Definition", required: false, type: .structure), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Version of the logger definition version.
        public let version: String?
        /// Arn of the logger definition version.
        public let arn: String?
        /// Timestamp of when the logger definition version was created.
        public let creationTimestamp: String?
        /// Information on definition
        public let definition: LoggerDefinitionVersion?
        /// Id of the logger definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: LoggerDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            if let definition = dictionary["Definition"] as? [String: Any] { self.definition = try Greengrass.LoggerDefinitionVersion(dictionary: definition) } else { self.definition = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct GroupCertificateAuthorityProperties: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeProperty(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// Id of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// Arn of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        public init(dictionary: [String: Any]) throws {
            self.groupCertificateAuthorityId = dictionary["GroupCertificateAuthorityId"] as? String
            self.groupCertificateAuthorityArn = dictionary["GroupCertificateAuthorityArn"] as? String
        }
    }

    public struct CreateFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: FunctionDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: FunctionDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.name = dictionary["Name"] as? String
            if let initialVersion = dictionary["InitialVersion"] as? [String: Any] { self.initialVersion = try Greengrass.FunctionDefinitionVersion(dictionary: initialVersion) } else { self.initialVersion = nil }
        }
    }

    public struct CreateSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: SubscriptionDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: SubscriptionDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.name = dictionary["Name"] as? String
            if let initialVersion = dictionary["InitialVersion"] as? [String: Any] { self.initialVersion = try Greengrass.SubscriptionDefinitionVersion(dictionary: initialVersion) } else { self.initialVersion = nil }
        }
    }

    public struct ListDeviceDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct UpdateLoggerDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let loggerDefinitionId = dictionary["LoggerDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionId") }
            self.loggerDefinitionId = loggerDefinitionId
        }
    }

    public struct GetDeploymentStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeploymentId", location: .uri(locationName: "DeploymentId"), required: true, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let deploymentId: String
        public let groupId: String

        public init(deploymentId: String, groupId: String) {
            self.deploymentId = deploymentId
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentId = dictionary["DeploymentId"] as? String else { throw InitializableError.missingRequiredParam("DeploymentId") }
            self.deploymentId = deploymentId
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct AssociateServiceRoleToAccountResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Time when the service role was associated to the account.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        public init(dictionary: [String: Any]) throws {
            self.associatedAt = dictionary["AssociatedAt"] as? String
        }
    }

    public struct DeleteCoreDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct FunctionConfigurationEnvironment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Variables", required: false, type: .map)
        ]
        public let variables: [String: String]?

        public init(variables: [String: String]? = nil) {
            self.variables = variables
        }

        public init(dictionary: [String: Any]) throws {
            if let variables = dictionary["Variables"] as? [String: String] {
                self.variables = variables
            } else { 
                self.variables = nil
            }
        }
    }

    public struct CreateLoggerDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Loggers", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let loggerDefinitionId: String
        public let loggers: [Logger]?

        public init(amznClientToken: String? = nil, loggerDefinitionId: String, loggers: [Logger]? = nil) {
            self.amznClientToken = amznClientToken
            self.loggerDefinitionId = loggerDefinitionId
            self.loggers = loggers
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            guard let loggerDefinitionId = dictionary["LoggerDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("LoggerDefinitionId") }
            self.loggerDefinitionId = loggerDefinitionId
            if let loggers = dictionary["Loggers"] as? [[String: Any]] {
                self.loggers = try loggers.map({ try Logger(dictionary: $0) })
            } else { 
                self.loggers = nil
            }
        }
    }

    public struct ListCoreDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?
        public let coreDefinitionId: String

        public init(maxResults: String? = nil, nextToken: String? = nil, coreDefinitionId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.coreDefinitionId = coreDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["MaxResults"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            guard let coreDefinitionId = dictionary["CoreDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionId") }
            self.coreDefinitionId = coreDefinitionId
        }
    }

    public struct GroupInformation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Arn of a group.
        public let arn: String?
        /// Timestamp of when the group was created.
        public let creationTimestamp: String?
        /// Name of a group.
        public let name: String?
        /// Last updated timestamp of the group.
        public let lastUpdatedTimestamp: String?
        /// Latest version arn of the group.
        public let latestVersionArn: String?
        /// Last version of the group.
        public let latestVersion: String?
        /// Id of a group.
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateGroupVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateFunctionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Functions", required: false, type: .list), 
            AWSShapeProperty(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let functions: [Function]?
        public let functionDefinitionId: String

        public init(amznClientToken: String? = nil, functions: [Function]? = nil, functionDefinitionId: String) {
            self.amznClientToken = amznClientToken
            self.functions = functions
            self.functionDefinitionId = functionDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            if let functions = dictionary["Functions"] as? [[String: Any]] {
                self.functions = try functions.map({ try Function(dictionary: $0) })
            } else { 
                self.functions = nil
            }
            guard let functionDefinitionId = dictionary["FunctionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("FunctionDefinitionId") }
            self.functionDefinitionId = functionDefinitionId
        }
    }

    public struct GetConnectivityInfoRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        public init(dictionary: [String: Any]) throws {
            guard let thingName = dictionary["ThingName"] as? String else { throw InitializableError.missingRequiredParam("ThingName") }
            self.thingName = thingName
        }
    }

    public struct CreateSubscriptionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public enum LoggerLevel: String, CustomStringConvertible {
        case debug = "DEBUG"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeviceDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct GetFunctionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeploymentId", required: false, type: .string), 
            AWSShapeProperty(label: "GroupVersionId", required: false, type: .string), 
            AWSShapeProperty(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// Id of the deployment if you wish to redeploy a previous deployment.
        public let deploymentId: String?
        /// Group Version you wish to deploy.
        public let groupVersionId: String?
        /// Type of deployment
        public let deploymentType: DeploymentType?
        public let amznClientToken: String?
        public let groupId: String

        public init(deploymentId: String? = nil, groupVersionId: String? = nil, deploymentType: DeploymentType? = nil, amznClientToken: String? = nil, groupId: String) {
            self.deploymentId = deploymentId
            self.groupVersionId = groupVersionId
            self.deploymentType = deploymentType
            self.amznClientToken = amznClientToken
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentId = dictionary["DeploymentId"] as? String
            self.groupVersionId = dictionary["GroupVersionId"] as? String
            if let deploymentType = dictionary["DeploymentType"] as? String { self.deploymentType = DeploymentType(rawValue: deploymentType) } else { self.deploymentType = nil }
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptionDefinitionId = dictionary["SubscriptionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionId") }
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }
    }

    public struct CreateFunctionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct UpdateConnectivityInfoResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeProperty(label: "Version", required: false, type: .string)
        ]
        public let message: String?
        /// New Version
        public let version: String?

        public init(message: String? = nil, version: String? = nil) {
            self.message = message
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            self.message = dictionary["message"] as? String
            self.version = dictionary["Version"] as? String
        }
    }

    public struct GetSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct SubscriptionDefinitionVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Subscriptions", required: false, type: .list)
        ]
        /// Subscriptions in the version.
        public let subscriptions: [Subscription]?

        public init(subscriptions: [Subscription]? = nil) {
            self.subscriptions = subscriptions
        }

        public init(dictionary: [String: Any]) throws {
            if let subscriptions = dictionary["Subscriptions"] as? [[String: Any]] {
                self.subscriptions = try subscriptions.map({ try Subscription(dictionary: $0) })
            } else { 
                self.subscriptions = nil
            }
        }
    }

    public struct ListDeviceDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct GetGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct GetGroupCertificateAuthorityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CertificateAuthorityId", location: .uri(locationName: "CertificateAuthorityId"), required: true, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let certificateAuthorityId: String
        public let groupId: String

        public init(certificateAuthorityId: String, groupId: String) {
            self.certificateAuthorityId = certificateAuthorityId
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let certificateAuthorityId = dictionary["CertificateAuthorityId"] as? String else { throw InitializableError.missingRequiredParam("CertificateAuthorityId") }
            self.certificateAuthorityId = certificateAuthorityId
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct CreateCoreDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DisassociateServiceRoleFromAccountResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// Time when the service role was disassociated from the account.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        public init(dictionary: [String: Any]) throws {
            self.disassociatedAt = dictionary["DisassociatedAt"] as? String
        }
    }

    public struct GetGroupCertificateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct Logger: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Level", required: false, type: .enum), 
            AWSShapeProperty(label: "Component", required: false, type: .enum), 
            AWSShapeProperty(label: "Space", required: false, type: .integer), 
            AWSShapeProperty(label: "Type", required: false, type: .enum), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// The level of the logs
        public let level: LoggerLevel?
        /// The component that will be subject to logs
        public let component: LoggerComponent?
        /// Amount of hardware space, in KB, to use if file system is used for logging purposes.
        public let space: Int32?
        /// The type which will be use for log output
        public let `type`: LoggerType?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(level: LoggerLevel? = nil, component: LoggerComponent? = nil, space: Int32? = nil, type: LoggerType? = nil, id: String? = nil) {
            self.level = level
            self.component = component
            self.space = space
            self.`type` = `type`
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let level = dictionary["Level"] as? String { self.level = LoggerLevel(rawValue: level) } else { self.level = nil }
            if let component = dictionary["Component"] as? String { self.component = LoggerComponent(rawValue: component) } else { self.component = nil }
            self.space = dictionary["Space"] as? Int32
            if let `type` = dictionary["Type"] as? String { self.`type` = LoggerType(rawValue: `type`) } else { self.`type` = nil }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct Empty: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateSubscriptionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeProperty(label: "Subscriptions", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let subscriptionDefinitionId: String
        public let subscriptions: [Subscription]?

        public init(amznClientToken: String? = nil, subscriptionDefinitionId: String, subscriptions: [Subscription]? = nil) {
            self.amznClientToken = amznClientToken
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptions = subscriptions
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            guard let subscriptionDefinitionId = dictionary["SubscriptionDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionDefinitionId") }
            self.subscriptionDefinitionId = subscriptionDefinitionId
            if let subscriptions = dictionary["Subscriptions"] as? [[String: Any]] {
                self.subscriptions = try subscriptions.map({ try Subscription(dictionary: $0) })
            } else { 
                self.subscriptions = nil
            }
        }
    }

    public struct VersionInformation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Version", required: false, type: .string), 
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Unique Id of a version.
        public let version: String?
        /// Arn of the version.
        public let arn: String?
        /// Timestamp of when the version was created.
        public let creationTimestamp: String?
        /// Id of the resource container.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["Version"] as? String
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct ConnectivityInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Metadata", required: false, type: .string), 
            AWSShapeProperty(label: "PortNumber", required: false, type: .integer), 
            AWSShapeProperty(label: "HostAddress", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// Metadata for this endpoint.
        public let metadata: String?
        /// Port of the GGC. Usually 8883.
        public let portNumber: Int32?
        /// Endpoint for the GGC. Can be an IP address or DNS.
        public let hostAddress: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(metadata: String? = nil, portNumber: Int32? = nil, hostAddress: String? = nil, id: String? = nil) {
            self.metadata = metadata
            self.portNumber = portNumber
            self.hostAddress = hostAddress
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.metadata = dictionary["Metadata"] as? String
            self.portNumber = dictionary["PortNumber"] as? Int32
            self.hostAddress = dictionary["HostAddress"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct LoggerDefinitionVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Loggers", required: false, type: .list)
        ]
        /// List of loggers.
        public let loggers: [Logger]?

        public init(loggers: [Logger]? = nil) {
            self.loggers = loggers
        }

        public init(dictionary: [String: Any]) throws {
            if let loggers = dictionary["Loggers"] as? [[String: Any]] {
                self.loggers = try loggers.map({ try Logger(dictionary: $0) })
            } else { 
                self.loggers = nil
            }
        }
    }

    public struct CreateGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: GroupVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: GroupVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.name = dictionary["Name"] as? String
            if let initialVersion = dictionary["InitialVersion"] as? [String: Any] { self.initialVersion = try Greengrass.GroupVersion(dictionary: initialVersion) } else { self.initialVersion = nil }
        }
    }

    public struct GetCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let coreDefinitionId = dictionary["CoreDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionId") }
            self.coreDefinitionId = coreDefinitionId
        }
    }

    public struct FunctionDefinitionVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Functions", required: false, type: .list)
        ]
        /// Lambda functions in this function definition version.
        public let functions: [Function]?

        public init(functions: [Function]? = nil) {
            self.functions = functions
        }

        public init(dictionary: [String: Any]) throws {
            if let functions = dictionary["Functions"] as? [[String: Any]] {
                self.functions = try functions.map({ try Function(dictionary: $0) })
            } else { 
                self.functions = nil
            }
        }
    }

    public struct GetServiceRoleForAccountRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetDeploymentStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeProperty(label: "UpdatedAt", required: false, type: .string), 
            AWSShapeProperty(label: "DeploymentStatus", required: false, type: .string)
        ]
        /// Error Message
        public let errorMessage: String?
        /// Last time the deployment status was updated.
        public let updatedAt: String?
        /// Status of the deployment.
        public let deploymentStatus: String?

        public init(errorMessage: String? = nil, updatedAt: String? = nil, deploymentStatus: String? = nil) {
            self.errorMessage = errorMessage
            self.updatedAt = updatedAt
            self.deploymentStatus = deploymentStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.errorMessage = dictionary["ErrorMessage"] as? String
            self.updatedAt = dictionary["UpdatedAt"] as? String
            self.deploymentStatus = dictionary["DeploymentStatus"] as? String
        }
    }

    public struct Device: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "SyncShadow", required: false, type: .boolean), 
            AWSShapeProperty(label: "CertificateArn", required: false, type: .string), 
            AWSShapeProperty(label: "ThingArn", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        /// If true, the local shadow value automatically syncs with the cloud's shadow state.
        public let syncShadow: Bool?
        /// Certificate arn of the device.
        public let certificateArn: String?
        /// Thing arn of the device.
        public let thingArn: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(syncShadow: Bool? = nil, certificateArn: String? = nil, thingArn: String? = nil, id: String? = nil) {
            self.syncShadow = syncShadow
            self.certificateArn = certificateArn
            self.thingArn = thingArn
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.syncShadow = dictionary["SyncShadow"] as? Bool
            self.certificateArn = dictionary["CertificateArn"] as? String
            self.thingArn = dictionary["ThingArn"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: CoreDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: CoreDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.name = dictionary["Name"] as? String
            if let initialVersion = dictionary["InitialVersion"] as? [String: Any] { self.initialVersion = try Greengrass.CoreDefinitionVersion(dictionary: initialVersion) } else { self.initialVersion = nil }
        }
    }

    public struct GetCoreDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Arn", required: false, type: .string), 
            AWSShapeProperty(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "Name", required: false, type: .string), 
            AWSShapeProperty(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LatestVersion", required: false, type: .string), 
            AWSShapeProperty(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            self.creationTimestamp = dictionary["CreationTimestamp"] as? String
            self.name = dictionary["Name"] as? String
            self.lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? String
            self.latestVersionArn = dictionary["LatestVersionArn"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct CreateDeploymentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "DeploymentId", required: false, type: .string), 
            AWSShapeProperty(label: "DeploymentArn", required: false, type: .string)
        ]
        /// Id of the deployment.
        public let deploymentId: String?
        /// Arn of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentId = dictionary["DeploymentId"] as? String
            self.deploymentArn = dictionary["DeploymentArn"] as? String
        }
    }

    public struct ListGroupCertificateAuthoritiesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct DeviceDefinitionVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "Devices", required: false, type: .list)
        ]
        /// Devices in the definition version.
        public let devices: [Device]?

        public init(devices: [Device]? = nil) {
            self.devices = devices
        }

        public init(dictionary: [String: Any]) throws {
            if let devices = dictionary["Devices"] as? [[String: Any]] {
                self.devices = try devices.map({ try Device(dictionary: $0) })
            } else { 
                self.devices = nil
            }
        }
    }

    public struct GetGroupCertificateConfigurationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let certificateAuthorityExpiryInMilliseconds: String?
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.certificateExpiryInMilliseconds = dictionary["CertificateExpiryInMilliseconds"] as? String
            self.certificateAuthorityExpiryInMilliseconds = dictionary["CertificateAuthorityExpiryInMilliseconds"] as? String
            self.groupId = dictionary["GroupId"] as? String
        }
    }

    public struct GetCoreDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "CoreDefinitionVersionId", location: .uri(locationName: "CoreDefinitionVersionId"), required: true, type: .string), 
            AWSShapeProperty(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionVersionId: String
        public let coreDefinitionId: String

        public init(coreDefinitionVersionId: String, coreDefinitionId: String) {
            self.coreDefinitionVersionId = coreDefinitionVersionId
            self.coreDefinitionId = coreDefinitionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let coreDefinitionVersionId = dictionary["CoreDefinitionVersionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionVersionId") }
            self.coreDefinitionVersionId = coreDefinitionVersionId
            guard let coreDefinitionId = dictionary["CoreDefinitionId"] as? String else { throw InitializableError.missingRequiredParam("CoreDefinitionId") }
            self.coreDefinitionId = coreDefinitionId
        }
    }

    public struct DisassociateServiceRoleFromAccountRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AssociateRoleToGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Time the role arn was associated to your group.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        public init(dictionary: [String: Any]) throws {
            self.associatedAt = dictionary["AssociatedAt"] as? String
        }
    }

    public struct ListDeploymentsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let groupId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, groupId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.groupId = groupId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct CreateGroupVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeProperty(label: "SubscriptionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let subscriptionDefinitionVersionArn: String?
        public let deviceDefinitionVersionArn: String?
        public let coreDefinitionVersionArn: String?
        public let loggerDefinitionVersionArn: String?
        public let functionDefinitionVersionArn: String?
        public let groupId: String

        public init(amznClientToken: String? = nil, subscriptionDefinitionVersionArn: String? = nil, deviceDefinitionVersionArn: String? = nil, coreDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, groupId: String) {
            self.amznClientToken = amznClientToken
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            self.amznClientToken = dictionary["X-Amzn-Client-Token"] as? String
            self.subscriptionDefinitionVersionArn = dictionary["SubscriptionDefinitionVersionArn"] as? String
            self.deviceDefinitionVersionArn = dictionary["DeviceDefinitionVersionArn"] as? String
            self.coreDefinitionVersionArn = dictionary["CoreDefinitionVersionArn"] as? String
            self.loggerDefinitionVersionArn = dictionary["LoggerDefinitionVersionArn"] as? String
            self.functionDefinitionVersionArn = dictionary["FunctionDefinitionVersionArn"] as? String
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct ListCoreDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", required: false, type: .string), 
            AWSShapeProperty(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try VersionInformation(dictionary: $0) })
            } else { 
                self.versions = nil
            }
        }
    }

    public struct ListCoreDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeProperty(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? String
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupId = dictionary["GroupId"] as? String else { throw InitializableError.missingRequiredParam("GroupId") }
            self.groupId = groupId
        }
    }

    public struct DeleteDeviceDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

}