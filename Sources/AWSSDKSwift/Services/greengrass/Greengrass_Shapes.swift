// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Greengrass {

    public struct ListLoggerDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateDeviceDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListFunctionDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct Deployment: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "GroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// Id of the deployment.
        public let deploymentId: String?
        /// Timestamp when the deployment was created.
        public let createdAt: String?
        /// Arn of the group for this deployment.
        public let groupArn: String?
        /// Arn of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, createdAt: String? = nil, groupArn: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.createdAt = createdAt
            self.groupArn = groupArn
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case createdAt = "CreatedAt"
            case groupArn = "GroupArn"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct GetGroupVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Unique Id for a version of the Group.
        public let version: String?
        /// Arn of the group version.
        public let arn: String?
        /// Timestamp when the group version was created.
        public let creationTimestamp: String?
        /// Information on the definition
        public let definition: GroupVersion?
        /// Id of the group version.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: GroupVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
        }
    }

    public struct GroupCertificateConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        /// Amount of time when the certificate expires in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        /// Amount of time when the certificate authority expires in milliseconds.
        public let certificateAuthorityExpiryInMilliseconds: String?
        /// Id of the group the certificate configuration belongs to.
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct UpdateFunctionDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct DeleteGroupResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListFunctionDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct AssociateRoleToGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// Role arn you wish to associate with this group.
        public let roleArn: String?
        public let groupId: String

        public init(roleArn: String? = nil, groupId: String) {
            self.roleArn = roleArn
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case groupId = "GroupId"
        }
    }

    public struct DeleteLoggerDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public enum LoggerComponent: String, CustomStringConvertible, Codable {
        case greengrasssystem = "GreengrassSystem"
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct ListVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Versions
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetFunctionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionId", location: .uri(locationName: "FunctionDefinitionVersionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String
        public let functionDefinitionVersionId: String

        public init(functionDefinitionId: String, functionDefinitionVersionId: String) {
            self.functionDefinitionId = functionDefinitionId
            self.functionDefinitionVersionId = functionDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
            case functionDefinitionVersionId = "FunctionDefinitionVersionId"
        }
    }

    public struct CreateLoggerDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public struct Subscription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subject", required: false, type: .string), 
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Subject of the message.
        public let subject: String?
        /// Where the message is sent to. Can be a thing arn, lambda arn or word 'cloud'.
        public let target: String?
        /// Source of the subscription. Can be a thing arn, lambda arn or word 'cloud'
        public let source: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(subject: String? = nil, target: String? = nil, source: String? = nil, id: String? = nil) {
            self.subject = subject
            self.target = target
            self.source = source
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case subject = "Subject"
            case target = "Target"
            case source = "Source"
            case id = "Id"
        }
    }

    public struct CreateDeviceDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public struct Function: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "FunctionArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Configuration of the function
        public let functionConfiguration: FunctionConfiguration?
        /// Arn of the Lambda function.
        public let functionArn: String?
        /// Id of the function in this version.
        public let id: String?

        public init(functionConfiguration: FunctionConfiguration? = nil, functionArn: String? = nil, id: String? = nil) {
            self.functionConfiguration = functionConfiguration
            self.functionArn = functionArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case functionConfiguration = "FunctionConfiguration"
            case functionArn = "FunctionArn"
            case id = "Id"
        }
    }

    public struct ListFunctionDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetLoggerDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct CreateCoreDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public struct UpdateSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: DeviceDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: DeviceDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
            case initialVersion = "InitialVersion"
        }
    }

    public struct UpdateGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let name: String?
        public let groupId: String

        public init(name: String? = nil, groupId: String) {
            self.name = name
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case groupId = "GroupId"
        }
    }

    public struct GetDeviceDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionVersionId", location: .uri(locationName: "DeviceDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionVersionId: String
        public let deviceDefinitionId: String

        public init(deviceDefinitionVersionId: String, deviceDefinitionId: String) {
            self.deviceDefinitionVersionId = deviceDefinitionVersionId
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionVersionId = "DeviceDefinitionVersionId"
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct UpdateCoreDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateFunctionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct UpdateDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let name: String?

        public init(deviceDefinitionId: String, name: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case name = "Name"
        }
    }

    public struct DeleteFunctionDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct ListCoreDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct GetSubscriptionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Version of the subscription definition version.
        public let version: String?
        /// Arn of the subscription definition version.
        public let arn: String?
        /// Timestamp of when the subscription definition version was created.
        public let creationTimestamp: String?
        /// Information on the definition
        public let definition: SubscriptionDefinitionVersion?
        /// Id of the subscription definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: SubscriptionDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
        }
    }

    public struct ListLoggerDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct DisassociateRoleFromGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetAssociatedRoleRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetConnectivityInfoResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectivityInfo", required: false, type: .list), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// Connectivity info array
        public let connectivityInfo: [ConnectivityInfo]?
        public let message: String?

        public init(connectivityInfo: [ConnectivityInfo]? = nil, message: String? = nil) {
            self.connectivityInfo = connectivityInfo
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case connectivityInfo = "ConnectivityInfo"
            case message = "message"
        }
    }

    public struct CreateDeviceDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let deviceDefinitionId: String
        public let devices: [Device]?

        public init(amznClientToken: String? = nil, deviceDefinitionId: String, devices: [Device]? = nil) {
            self.amznClientToken = amznClientToken
            self.deviceDefinitionId = deviceDefinitionId
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case deviceDefinitionId = "DeviceDefinitionId"
            case devices = "Devices"
        }
    }

    public struct ListDeploymentsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deployments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information on deployments
        public let deployments: [Deployment]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(deployments: [Deployment]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deployments = "Deployments"
            case nextToken = "NextToken"
        }
    }

    public struct GetGroupVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupVersionId", location: .uri(locationName: "GroupVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupVersionId: String
        public let groupId: String

        public init(groupVersionId: String, groupId: String) {
            self.groupVersionId = groupVersionId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupVersionId = "GroupVersionId"
            case groupId = "GroupId"
        }
    }

    public struct UpdateGroupCertificateConfigurationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let certificateAuthorityExpiryInMilliseconds: String?
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct ListGroupVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetLoggerDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionVersionId", location: .uri(locationName: "LoggerDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionVersionId: String
        public let loggerDefinitionId: String

        public init(loggerDefinitionVersionId: String, loggerDefinitionId: String) {
            self.loggerDefinitionVersionId = loggerDefinitionVersionId
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionVersionId = "LoggerDefinitionVersionId"
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct GetFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct UpdateGroupCertificateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// Amount of time when the certificate expires in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        public let groupId: String

        public init(certificateExpiryInMilliseconds: String? = nil, groupId: String) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct GetSubscriptionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionId", location: .uri(locationName: "SubscriptionDefinitionVersionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let subscriptionDefinitionVersionId: String

        public init(subscriptionDefinitionId: String, subscriptionDefinitionVersionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptionDefinitionVersionId = subscriptionDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case subscriptionDefinitionVersionId = "SubscriptionDefinitionVersionId"
        }
    }

    public struct ListSubscriptionDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct UpdateSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let name: String?

        public init(subscriptionDefinitionId: String, name: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case name = "Name"
        }
    }

    public struct CreateCoreDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Cores", required: false, type: .list), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let cores: [Core]?
        public let coreDefinitionId: String

        public init(amznClientToken: String? = nil, cores: [Core]? = nil, coreDefinitionId: String) {
            self.amznClientToken = amznClientToken
            self.cores = cores
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case cores = "Cores"
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct ListSubscriptionDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetCoreDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Version of the core definition version.
        public let version: String?
        /// Arn of the core definition version.
        public let arn: String?
        /// Timestamp of when the core definition version was created.
        public let creationTimestamp: String?
        /// Information on definition
        public let definition: CoreDefinitionVersion?
        /// Id of the core definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: CoreDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
        }
    }

    public struct DeleteSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Groups
        public let groups: [GroupInformation]?

        public init(nextToken: String? = nil, groups: [GroupInformation]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groups = "Groups"
        }
    }

    public struct CreateGroupCertificateAuthorityResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// Arn of the group certificate authority.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct ListGroupsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetServiceRoleForAccountResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Role arn which is associated to the account.
        public let roleArn: String?
        /// Time when the service role was associated to the account.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case associatedAt = "AssociatedAt"
        }
    }

    public struct DeleteFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct GroupVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionArn", required: false, type: .string)
        ]
        /// Core definition version arn for this group.
        public let coreDefinitionVersionArn: String?
        /// Device definition version arn for this group.
        public let deviceDefinitionVersionArn: String?
        /// Logger definitionv ersion arn for this group.
        public let loggerDefinitionVersionArn: String?
        /// Function definition version arn for this group.
        public let functionDefinitionVersionArn: String?
        /// Subscription definition version arn for this group.
        public let subscriptionDefinitionVersionArn: String?

        public init(coreDefinitionVersionArn: String? = nil, deviceDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, subscriptionDefinitionVersionArn: String? = nil) {
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
            case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
            case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
            case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
            case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
        }
    }

    public struct ListSubscriptionDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let nextToken: String?
        public let maxResults: String?

        public init(subscriptionDefinitionId: String, nextToken: String? = nil, maxResults: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct GetDeviceDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Version of the device definition version.
        public let version: String?
        /// Arn of the device definition version.
        public let arn: String?
        /// Timestamp of when the device definition version was created.
        public let creationTimestamp: String?
        /// Device definition version
        public let definition: DeviceDefinitionVersion?
        /// Id of the device definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: DeviceDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
        }
    }

    public struct DefinitionInformation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Arn of the definition.
        public let arn: String?
        /// Timestamp of when the definition was created.
        public let creationTimestamp: String?
        /// Name of the definition.
        public let name: String?
        /// Last updated timestamp of the definition.
        public let lastUpdatedTimestamp: String?
        /// Latest version arn of the definition.
        public let latestVersionArn: String?
        /// Last version of the definition.
        public let latestVersion: String?
        /// Id of the definition.
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct AssociateServiceRoleToAccountRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]
        /// Role arn you wish to associate with this account.
        public let roleArn: String?

        public init(roleArn: String? = nil) {
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
        }
    }

    public enum DeploymentType: String, CustomStringConvertible, Codable {
        case newdeployment = "NewDeployment"
        case redeployment = "Redeployment"
        public var description: String { return self.rawValue }
    }

    public struct GeneralError: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// Error Details
        public let errorDetails: [ErrorDetail]?
        /// Message
        public let message: String?

        public init(errorDetails: [ErrorDetail]? = nil, message: String? = nil) {
            self.errorDetails = errorDetails
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case errorDetails = "ErrorDetails"
            case message = "Message"
        }
    }

    public struct ListLoggerDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let loggerDefinitionId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, loggerDefinitionId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.loggerDefinitionId = loggerDefinitionId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case loggerDefinitionId = "LoggerDefinitionId"
            case maxResults = "MaxResults"
        }
    }

    public struct ListGroupCertificateAuthoritiesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorities", required: false, type: .list)
        ]
        /// List of certificate authorities associated with the group.
        public let groupCertificateAuthorities: [GroupCertificateAuthorityProperties]?

        public init(groupCertificateAuthorities: [GroupCertificateAuthorityProperties]? = nil) {
            self.groupCertificateAuthorities = groupCertificateAuthorities
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorities = "GroupCertificateAuthorities"
        }
    }

    public struct CreateGroupCertificateAuthorityRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let groupId: String

        public init(amznClientToken: String? = nil, groupId: String) {
            self.amznClientToken = amznClientToken
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case groupId = "GroupId"
        }
    }

    public struct GetGroupCertificateAuthorityResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PemEncodedCertificate", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// PEM encoded certificate for the group.
        public let pemEncodedCertificate: String?
        /// Id of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// Arn of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(pemEncodedCertificate: String? = nil, groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.pemEncodedCertificate = pemEncodedCertificate
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case pemEncodedCertificate = "PemEncodedCertificate"
            case groupCertificateAuthorityId = "GroupCertificateAuthorityId"
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct ErrorDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetailedErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "DetailedErrorCode", required: false, type: .string)
        ]
        /// Detailed Error Message
        public let detailedErrorMessage: String?
        /// Detailed Error Code
        public let detailedErrorCode: String?

        public init(detailedErrorMessage: String? = nil, detailedErrorCode: String? = nil) {
            self.detailedErrorMessage = detailedErrorMessage
            self.detailedErrorCode = detailedErrorCode
        }

        private enum CodingKeys: String, CodingKey {
            case detailedErrorMessage = "DetailedErrorMessage"
            case detailedErrorCode = "DetailedErrorCode"
        }
    }

    public struct GetAssociatedRoleResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Arn of the role that is associated with the group.
        public let roleArn: String?
        /// Time when the role was associated for the group.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case associatedAt = "AssociatedAt"
        }
    }

    public struct GetLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct UpdateFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let functionDefinitionId: String
        public let name: String?

        public init(functionDefinitionId: String, name: String? = nil) {
            self.functionDefinitionId = functionDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
            case name = "Name"
        }
    }

    public struct ListSubscriptionDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct DisassociateRoleFromGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// Time when the role was disassociated from the group.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case disassociatedAt = "DisassociatedAt"
        }
    }

    public struct CoreDefinitionVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cores", required: false, type: .list)
        ]
        /// Cores in the definition version.
        public let cores: [Core]?

        public init(cores: [Core]? = nil) {
            self.cores = cores
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "Cores"
        }
    }

    public struct GetFunctionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Version of the function definition version.
        public let version: String?
        /// Arn of the function definition version.
        public let arn: String?
        /// Timestamp when the funtion definition version was created.
        public let creationTimestamp: String?
        /// Information on the definition
        public let definition: FunctionDefinitionVersion?
        /// Id of the function definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: FunctionDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
        }
    }

    public struct ListDeviceDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct GetGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct UpdateConnectivityInfoRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectivityInfo", required: false, type: .list), 
            AWSShapeMember(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        /// Connectivity info array
        public let connectivityInfo: [ConnectivityInfo]?
        public let thingName: String

        public init(connectivityInfo: [ConnectivityInfo]? = nil, thingName: String) {
            self.connectivityInfo = connectivityInfo
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case connectivityInfo = "ConnectivityInfo"
            case thingName = "ThingName"
        }
    }

    public struct GetDeviceDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct GetDeviceDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct UpdateLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let loggerDefinitionId: String
        public let name: String?

        public init(loggerDefinitionId: String, name: String? = nil) {
            self.loggerDefinitionId = loggerDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
            case name = "Name"
        }
    }

    public struct ListDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Definitions
        public let definitions: [DefinitionInformation]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ListLoggerDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct CreateGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct Core: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncShadow", required: false, type: .boolean), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "ThingArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// If true, the local shadow value automatically syncs with the cloud's shadow state.
        public let syncShadow: Bool?
        /// Certificate arn of the core.
        public let certificateArn: String?
        /// Thing arn of the core.
        public let thingArn: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(syncShadow: Bool? = nil, certificateArn: String? = nil, thingArn: String? = nil, id: String? = nil) {
            self.syncShadow = syncShadow
            self.certificateArn = certificateArn
            self.thingArn = thingArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case syncShadow = "SyncShadow"
            case certificateArn = "CertificateArn"
            case thingArn = "ThingArn"
            case id = "Id"
        }
    }

    public struct DeleteSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct DeleteCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct ListFunctionDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let functionDefinitionId: String
        public let nextToken: String?
        public let maxResults: String?

        public init(functionDefinitionId: String, nextToken: String? = nil, maxResults: String? = nil) {
            self.functionDefinitionId = functionDefinitionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListDeviceDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let nextToken: String?
        public let maxResults: String?

        public init(deviceDefinitionId: String, nextToken: String? = nil, maxResults: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum LoggerType: String, CustomStringConvertible, Codable {
        case filesystem = "FileSystem"
        case awscloudwatch = "AWSCloudWatch"
        public var description: String { return self.rawValue }
    }

    public struct UpdateCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let name: String?
        public let coreDefinitionId: String

        public init(name: String? = nil, coreDefinitionId: String) {
            self.name = name
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct UpdateGroupResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateLoggerDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct CreateLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: LoggerDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: LoggerDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
            case initialVersion = "InitialVersion"
        }
    }

    public struct ListGroupVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let groupId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, groupId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.groupId = groupId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groupId = "GroupId"
            case maxResults = "MaxResults"
        }
    }

    public struct FunctionConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Environment", required: false, type: .structure), 
            AWSShapeMember(label: "Executable", required: false, type: .string), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "MemorySize", required: false, type: .integer), 
            AWSShapeMember(label: "ExecArgs", required: false, type: .string), 
            AWSShapeMember(label: "Pinned", required: false, type: .boolean)
        ]
        /// Environment of the function configuration
        public let environment: FunctionConfigurationEnvironment?
        /// Executable
        public let executable: String?
        /// The function execution time at which Lambda should terminate the function. This timeout still applies to pinned lambdas for each request.
        public let timeout: Int32?
        /// The memory size, in KB, you configured for the function.
        public let memorySize: Int32?
        /// Execution Arguments
        public let execArgs: String?
        /// Whether the function is pinned or not. Pinned means the function is long-lived and starts when the core starts.
        public let pinned: Bool?

        public init(environment: FunctionConfigurationEnvironment? = nil, executable: String? = nil, timeout: Int32? = nil, memorySize: Int32? = nil, execArgs: String? = nil, pinned: Bool? = nil) {
            self.environment = environment
            self.executable = executable
            self.timeout = timeout
            self.memorySize = memorySize
            self.execArgs = execArgs
            self.pinned = pinned
        }

        private enum CodingKeys: String, CodingKey {
            case environment = "Environment"
            case executable = "Executable"
            case timeout = "Timeout"
            case memorySize = "MemorySize"
            case execArgs = "ExecArgs"
            case pinned = "Pinned"
        }
    }

    public struct GetLoggerDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Version of the logger definition version.
        public let version: String?
        /// Arn of the logger definition version.
        public let arn: String?
        /// Timestamp of when the logger definition version was created.
        public let creationTimestamp: String?
        /// Information on definition
        public let definition: LoggerDefinitionVersion?
        /// Id of the logger definition the version belongs to.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, definition: LoggerDefinitionVersion? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
        }
    }

    public struct GroupCertificateAuthorityProperties: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// Id of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// Arn of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityId = "GroupCertificateAuthorityId"
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct CreateFunctionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: FunctionDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: FunctionDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
            case initialVersion = "InitialVersion"
        }
    }

    public struct CreateSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: SubscriptionDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: SubscriptionDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
            case initialVersion = "InitialVersion"
        }
    }

    public struct ListDeviceDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateLoggerDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct DeleteLoggerDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct GetDeploymentStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "DeploymentId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let deploymentId: String
        public let groupId: String

        public init(deploymentId: String, groupId: String) {
            self.deploymentId = deploymentId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case groupId = "GroupId"
        }
    }

    public struct AssociateServiceRoleToAccountResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Time when the service role was associated to the account.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAt = "AssociatedAt"
        }
    }

    public struct DeleteCoreDefinitionResponse: AWSShape {
        /// The key for the payload

    }

    public struct FunctionConfigurationEnvironment: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Variables", required: false, type: .map)
        ]
        public let variables: [String: String]?

        public init(variables: [String: String]? = nil) {
            self.variables = variables
        }

        private enum CodingKeys: String, CodingKey {
            case variables = "Variables"
        }
    }

    public struct CreateLoggerDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Loggers", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let loggerDefinitionId: String
        public let loggers: [Logger]?

        public init(amznClientToken: String? = nil, loggerDefinitionId: String, loggers: [Logger]? = nil) {
            self.amznClientToken = amznClientToken
            self.loggerDefinitionId = loggerDefinitionId
            self.loggers = loggers
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case loggerDefinitionId = "LoggerDefinitionId"
            case loggers = "Loggers"
        }
    }

    public struct ListCoreDefinitionVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?
        public let coreDefinitionId: String

        public init(maxResults: String? = nil, nextToken: String? = nil, coreDefinitionId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct GroupInformation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Arn of a group.
        public let arn: String?
        /// Timestamp of when the group was created.
        public let creationTimestamp: String?
        /// Name of a group.
        public let name: String?
        /// Last updated timestamp of the group.
        public let lastUpdatedTimestamp: String?
        /// Latest version arn of the group.
        public let latestVersionArn: String?
        /// Last version of the group.
        public let latestVersion: String?
        /// Id of a group.
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct CreateGroupVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public struct CreateFunctionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Functions", required: false, type: .list), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let functions: [Function]?
        public let functionDefinitionId: String

        public init(amznClientToken: String? = nil, functions: [Function]? = nil, functionDefinitionId: String) {
            self.amznClientToken = amznClientToken
            self.functions = functions
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case functions = "Functions"
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct GetConnectivityInfoRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "ThingName"
        }
    }

    public struct CreateSubscriptionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public enum LoggerLevel: String, CustomStringConvertible, Codable {
        case debug = "DEBUG"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeviceDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct GetFunctionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "GroupVersionId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// Id of the deployment if you wish to redeploy a previous deployment.
        public let deploymentId: String?
        /// Group Version you wish to deploy.
        public let groupVersionId: String?
        /// Type of deployment
        public let deploymentType: DeploymentType?
        public let amznClientToken: String?
        public let groupId: String

        public init(deploymentId: String? = nil, groupVersionId: String? = nil, deploymentType: DeploymentType? = nil, amznClientToken: String? = nil, groupId: String) {
            self.deploymentId = deploymentId
            self.groupVersionId = groupVersionId
            self.deploymentType = deploymentType
            self.amznClientToken = amznClientToken
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case groupVersionId = "GroupVersionId"
            case deploymentType = "DeploymentType"
            case amznClientToken = "X-Amzn-Client-Token"
            case groupId = "GroupId"
        }
    }

    public struct GetSubscriptionDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct CreateFunctionDefinitionVersionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let version: String?
        public let arn: String?
        public let creationTimestamp: String?
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public struct UpdateConnectivityInfoResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let message: String?
        /// New Version
        public let version: String?

        public init(message: String? = nil, version: String? = nil) {
            self.message = message
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case version = "Version"
        }
    }

    public struct GetSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct SubscriptionDefinitionVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// Subscriptions in the version.
        public let subscriptions: [Subscription]?

        public init(subscriptions: [Subscription]? = nil) {
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "Subscriptions"
        }
    }

    public struct ListDeviceDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetGroupCertificateAuthorityRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateAuthorityId", location: .uri(locationName: "CertificateAuthorityId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let certificateAuthorityId: String
        public let groupId: String

        public init(certificateAuthorityId: String, groupId: String) {
            self.certificateAuthorityId = certificateAuthorityId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateAuthorityId = "CertificateAuthorityId"
            case groupId = "GroupId"
        }
    }

    public struct CreateCoreDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct DisassociateServiceRoleFromAccountResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// Time when the service role was disassociated from the account.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case disassociatedAt = "DisassociatedAt"
        }
    }

    public struct GetGroupCertificateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct Logger: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Level", required: false, type: .enum), 
            AWSShapeMember(label: "Component", required: false, type: .enum), 
            AWSShapeMember(label: "Space", required: false, type: .integer), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The level of the logs
        public let level: LoggerLevel?
        /// The component that will be subject to logs
        public let component: LoggerComponent?
        /// Amount of hardware space, in KB, to use if file system is used for logging purposes.
        public let space: Int32?
        /// The type which will be use for log output
        public let `type`: LoggerType?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(level: LoggerLevel? = nil, component: LoggerComponent? = nil, space: Int32? = nil, type: LoggerType? = nil, id: String? = nil) {
            self.level = level
            self.component = component
            self.space = space
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case level = "Level"
            case component = "Component"
            case space = "Space"
            case `type` = "Type"
            case id = "Id"
        }
    }

    public struct Empty: AWSShape {
        /// The key for the payload

    }

    public struct CreateSubscriptionDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct CreateSubscriptionDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let subscriptionDefinitionId: String
        public let subscriptions: [Subscription]?

        public init(amznClientToken: String? = nil, subscriptionDefinitionId: String, subscriptions: [Subscription]? = nil) {
            self.amznClientToken = amznClientToken
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case subscriptions = "Subscriptions"
        }
    }

    public struct VersionInformation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Unique Id of a version.
        public let version: String?
        /// Arn of the version.
        public let arn: String?
        /// Timestamp of when the version was created.
        public let creationTimestamp: String?
        /// Id of the resource container.
        public let id: String?

        public init(version: String? = nil, arn: String? = nil, creationTimestamp: String? = nil, id: String? = nil) {
            self.version = version
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
        }
    }

    public struct ConnectivityInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .string), 
            AWSShapeMember(label: "PortNumber", required: false, type: .integer), 
            AWSShapeMember(label: "HostAddress", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Metadata for this endpoint.
        public let metadata: String?
        /// Port of the GGC. Usually 8883.
        public let portNumber: Int32?
        /// Endpoint for the GGC. Can be an IP address or DNS.
        public let hostAddress: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(metadata: String? = nil, portNumber: Int32? = nil, hostAddress: String? = nil, id: String? = nil) {
            self.metadata = metadata
            self.portNumber = portNumber
            self.hostAddress = hostAddress
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case portNumber = "PortNumber"
            case hostAddress = "HostAddress"
            case id = "Id"
        }
    }

    public struct LoggerDefinitionVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Loggers", required: false, type: .list)
        ]
        /// List of loggers.
        public let loggers: [Logger]?

        public init(loggers: [Logger]? = nil) {
            self.loggers = loggers
        }

        private enum CodingKeys: String, CodingKey {
            case loggers = "Loggers"
        }
    }

    public struct CreateGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: GroupVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: GroupVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
            case initialVersion = "InitialVersion"
        }
    }

    public struct GetCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct FunctionDefinitionVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Functions", required: false, type: .list)
        ]
        /// Lambda functions in this function definition version.
        public let functions: [Function]?

        public init(functions: [Function]? = nil) {
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case functions = "Functions"
        }
    }

    public struct GetServiceRoleForAccountRequest: AWSShape {
        /// The key for the payload

    }

    public struct GetDeploymentStatusResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .string)
        ]
        /// Error Message
        public let errorMessage: String?
        /// Last time the deployment status was updated.
        public let updatedAt: String?
        /// Status of the deployment.
        public let deploymentStatus: String?

        public init(errorMessage: String? = nil, updatedAt: String? = nil, deploymentStatus: String? = nil) {
            self.errorMessage = errorMessage
            self.updatedAt = updatedAt
            self.deploymentStatus = deploymentStatus
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case updatedAt = "UpdatedAt"
            case deploymentStatus = "DeploymentStatus"
        }
    }

    public struct Device: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncShadow", required: false, type: .boolean), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "ThingArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// If true, the local shadow value automatically syncs with the cloud's shadow state.
        public let syncShadow: Bool?
        /// Certificate arn of the device.
        public let certificateArn: String?
        /// Thing arn of the device.
        public let thingArn: String?
        /// Element Id for this entry in the list.
        public let id: String?

        public init(syncShadow: Bool? = nil, certificateArn: String? = nil, thingArn: String? = nil, id: String? = nil) {
            self.syncShadow = syncShadow
            self.certificateArn = certificateArn
            self.thingArn = thingArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case syncShadow = "SyncShadow"
            case certificateArn = "CertificateArn"
            case thingArn = "ThingArn"
            case id = "Id"
        }
    }

    public struct CreateCoreDefinitionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure)
        ]
        public let amznClientToken: String?
        public let name: String?
        public let initialVersion: CoreDefinitionVersion?

        public init(amznClientToken: String? = nil, name: String? = nil, initialVersion: CoreDefinitionVersion? = nil) {
            self.amznClientToken = amznClientToken
            self.name = name
            self.initialVersion = initialVersion
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
            case initialVersion = "InitialVersion"
        }
    }

    public struct GetCoreDefinitionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let arn: String?
        public let creationTimestamp: String?
        public let name: String?
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let latestVersion: String?
        public let id: String?

        public init(arn: String? = nil, creationTimestamp: String? = nil, name: String? = nil, lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, latestVersion: String? = nil, id: String? = nil) {
            self.arn = arn
            self.creationTimestamp = creationTimestamp
            self.name = name
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.latestVersion = latestVersion
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTimestamp = "CreationTimestamp"
            case name = "Name"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case latestVersion = "LatestVersion"
            case id = "Id"
        }
    }

    public struct CreateDeploymentResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// Id of the deployment.
        public let deploymentId: String?
        /// Arn of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct ListGroupCertificateAuthoritiesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct DeviceDefinitionVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// Devices in the definition version.
        public let devices: [Device]?

        public init(devices: [Device]? = nil) {
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case devices = "Devices"
        }
    }

    public struct GetGroupCertificateConfigurationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let certificateAuthorityExpiryInMilliseconds: String?
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct GetCoreDefinitionVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionVersionId", location: .uri(locationName: "CoreDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionVersionId: String
        public let coreDefinitionId: String

        public init(coreDefinitionVersionId: String, coreDefinitionId: String) {
            self.coreDefinitionVersionId = coreDefinitionVersionId
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionVersionId = "CoreDefinitionVersionId"
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct DisassociateServiceRoleFromAccountRequest: AWSShape {
        /// The key for the payload

    }

    public struct AssociateRoleToGroupResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// Time the role arn was associated to your group.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAt = "AssociatedAt"
        }
    }

    public struct ListDeploymentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let groupId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, groupId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.groupId = groupId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groupId = "GroupId"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateGroupVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let subscriptionDefinitionVersionArn: String?
        public let deviceDefinitionVersionArn: String?
        public let coreDefinitionVersionArn: String?
        public let loggerDefinitionVersionArn: String?
        public let functionDefinitionVersionArn: String?
        public let groupId: String

        public init(amznClientToken: String? = nil, subscriptionDefinitionVersionArn: String? = nil, deviceDefinitionVersionArn: String? = nil, coreDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, groupId: String) {
            self.amznClientToken = amznClientToken
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
            case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
            case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
            case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
            case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
            case groupId = "GroupId"
        }
    }

    public struct ListCoreDefinitionVersionsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct ListCoreDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct DeleteDeviceDefinitionResponse: AWSShape {
        /// The key for the payload

    }

}