// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CognitoSync {

    public struct DescribeIdentityPoolUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct GetIdentityPoolConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool for which to return a configuration.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct GetCognitoEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// The Cognito Identity Pool ID for the request
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct UpdateRecordsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Records", required: false, type: .list)
        ]
        /// A list of records that have been updated.
        public let records: [Record]?

        public init(records: [Record]? = nil) {
            self.records = records
        }

        private enum CodingKeys: String, CodingKey {
            case records = "Records"
        }
    }

    public struct BulkPublishRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct DescribeIdentityUsageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityUsage", required: false, type: .structure)
        ]
        /// Usage information for the identity.
        public let identityUsage: IdentityUsage?

        public init(identityUsage: IdentityUsage? = nil) {
            self.identityUsage = identityUsage
        }

        private enum CodingKeys: String, CodingKey {
            case identityUsage = "IdentityUsage"
        }
    }

    public struct Dataset: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DatasetName", required: false, type: .string), 
            AWSShapeMember(label: "IdentityId", required: false, type: .string), 
            AWSShapeMember(label: "DataStorage", required: false, type: .long), 
            AWSShapeMember(label: "NumRecords", required: false, type: .long), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Date when the dataset was last modified.
        public let lastModifiedDate: TimeStamp?
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String?
        /// Total size in bytes of the records in this dataset.
        public let dataStorage: Int64?
        /// Number of records in this dataset.
        public let numRecords: Int64?
        /// Date on which the dataset was created.
        public let creationDate: TimeStamp?
        /// The device that made the last change to this dataset.
        public let lastModifiedBy: String?

        public init(lastModifiedDate: TimeStamp? = nil, datasetName: String? = nil, identityId: String? = nil, dataStorage: Int64? = nil, numRecords: Int64? = nil, creationDate: TimeStamp? = nil, lastModifiedBy: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.datasetName = datasetName
            self.identityId = identityId
            self.dataStorage = dataStorage
            self.numRecords = numRecords
            self.creationDate = creationDate
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case datasetName = "DatasetName"
            case identityId = "IdentityId"
            case dataStorage = "DataStorage"
            case numRecords = "NumRecords"
            case creationDate = "CreationDate"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct DescribeDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "DatasetName", location: .uri(locationName: "DatasetName"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityId: String, datasetName: String, identityPoolId: String) {
            self.identityId = identityId
            self.datasetName = datasetName
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityId = "IdentityId"
            case datasetName = "DatasetName"
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct IdentityPoolUsage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataStorage", required: false, type: .long), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "SyncSessionsCount", required: false, type: .long)
        ]
        /// Data storage information for the identity pool.
        public let dataStorage: Int64?
        /// Date on which the identity pool was last modified.
        public let lastModifiedDate: TimeStamp?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?
        /// Number of sync sessions for the identity pool.
        public let syncSessionsCount: Int64?

        public init(dataStorage: Int64? = nil, lastModifiedDate: TimeStamp? = nil, identityPoolId: String? = nil, syncSessionsCount: Int64? = nil) {
            self.dataStorage = dataStorage
            self.lastModifiedDate = lastModifiedDate
            self.identityPoolId = identityPoolId
            self.syncSessionsCount = syncSessionsCount
        }

        private enum CodingKeys: String, CodingKey {
            case dataStorage = "DataStorage"
            case lastModifiedDate = "LastModifiedDate"
            case identityPoolId = "IdentityPoolId"
            case syncSessionsCount = "SyncSessionsCount"
        }
    }

    public struct GetIdentityPoolConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CognitoStreams", required: false, type: .structure), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "PushSync", required: false, type: .structure)
        ]
        /// Options to apply to this identity pool for Amazon Cognito streams.
        public let cognitoStreams: CognitoStreams?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.
        public let identityPoolId: String?
        /// Options to apply to this identity pool for push synchronization.
        public let pushSync: PushSync?

        public init(cognitoStreams: CognitoStreams? = nil, identityPoolId: String? = nil, pushSync: PushSync? = nil) {
            self.cognitoStreams = cognitoStreams
            self.identityPoolId = identityPoolId
            self.pushSync = pushSync
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoStreams = "CognitoStreams"
            case identityPoolId = "IdentityPoolId"
            case pushSync = "PushSync"
        }
    }

    public struct DeleteDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "DatasetName", location: .uri(locationName: "DatasetName"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityId: String, datasetName: String, identityPoolId: String) {
            self.identityId = identityId
            self.datasetName = datasetName
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityId = "IdentityId"
            case datasetName = "DatasetName"
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct SetIdentityPoolConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CognitoStreams", required: false, type: .structure), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "PushSync", required: false, type: .structure)
        ]
        /// Options to apply to this identity pool for Amazon Cognito streams.
        public let cognitoStreams: CognitoStreams?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool to modify.
        public let identityPoolId: String
        /// Options to apply to this identity pool for push synchronization.
        public let pushSync: PushSync?

        public init(cognitoStreams: CognitoStreams? = nil, identityPoolId: String, pushSync: PushSync? = nil) {
            self.cognitoStreams = cognitoStreams
            self.identityPoolId = identityPoolId
            self.pushSync = pushSync
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoStreams = "CognitoStreams"
            case identityPoolId = "IdentityPoolId"
            case pushSync = "PushSync"
        }
    }

    public struct ListIdentityPoolUsageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IdentityPoolUsages", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// Usage information for the identity pools.
        public let identityPoolUsages: [IdentityPoolUsage]?
        /// The maximum number of results to be returned.
        public let maxResults: Int32?
        /// Total number of identities for the identity pool.
        public let count: Int32?

        public init(nextToken: String? = nil, identityPoolUsages: [IdentityPoolUsage]? = nil, maxResults: Int32? = nil, count: Int32? = nil) {
            self.nextToken = nextToken
            self.identityPoolUsages = identityPoolUsages
            self.maxResults = maxResults
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case identityPoolUsages = "IdentityPoolUsages"
            case maxResults = "MaxResults"
            case count = "Count"
        }
    }

    public struct CognitoStreams: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamName", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "StreamingStatus", required: false, type: .enum)
        ]
        /// The name of the Cognito stream to receive updates. This stream must be in the developers account and in the same region as the identity pool.
        public let streamName: String?
        /// The ARN of the role Amazon Cognito can assume in order to publish to the stream. This role must grant access to Amazon Cognito (cognito-sync) to invoke PutRecord on your Cognito stream.
        public let roleArn: String?
        /// Status of the Cognito streams. Valid values are: ENABLED - Streaming of updates to identity pool is enabled. DISABLED - Streaming of updates to identity pool is disabled. Bulk publish will also fail if StreamingStatus is DISABLED.
        public let streamingStatus: StreamingStatus?

        public init(streamName: String? = nil, roleArn: String? = nil, streamingStatus: StreamingStatus? = nil) {
            self.streamName = streamName
            self.roleArn = roleArn
            self.streamingStatus = streamingStatus
        }

        private enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case roleArn = "RoleArn"
            case streamingStatus = "StreamingStatus"
        }
    }

    public struct RecordPatch: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncCount", required: true, type: .long), 
            AWSShapeMember(label: "DeviceLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Op", required: true, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// Last known server sync count for this record. Set to 0 if unknown.
        public let syncCount: Int64
        /// The last modified date of the client device.
        public let deviceLastModifiedDate: TimeStamp?
        /// The key associated with the record patch.
        public let key: String
        /// An operation, either replace or remove.
        public let op: Operation
        /// The value associated with the record patch.
        public let value: String?

        public init(syncCount: Int64, deviceLastModifiedDate: TimeStamp? = nil, key: String, op: Operation, value: String? = nil) {
            self.syncCount = syncCount
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.key = key
            self.op = op
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case syncCount = "SyncCount"
            case deviceLastModifiedDate = "DeviceLastModifiedDate"
            case key = "Key"
            case op = "Op"
            case value = "Value"
        }
    }

    public struct ListIdentityPoolUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// The maximum number of results to be returned.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct UnsubscribeFromDatasetResponse: AWSShape {

    }

    public struct SetCognitoEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: true, type: .map), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// The events to configure
        public let events: [String: String]
        /// The Cognito Identity Pool to use when configuring Cognito Events
        public let identityPoolId: String

        public init(events: [String: String], identityPoolId: String) {
            self.events = events
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct DescribeIdentityUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityId: String, identityPoolId: String) {
            self.identityId = identityId
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityId = "IdentityId"
            case identityPoolId = "IdentityPoolId"
        }
    }

    public enum Operation: String, CustomStringConvertible, Codable {
        case replace = "replace"
        case remove = "remove"
        public var description: String { return self.rawValue }
    }

    public struct UnsubscribeFromDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceId", location: .uri(locationName: "DeviceId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "DatasetName", location: .uri(locationName: "DatasetName"), required: true, type: .string)
        ]
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String
        /// Unique ID for this identity.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.
        public let identityPoolId: String
        /// The name of the dataset from which to unsubcribe.
        public let datasetName: String

        public init(deviceId: String, identityId: String, identityPoolId: String, datasetName: String) {
            self.deviceId = deviceId
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case identityId = "IdentityId"
            case identityPoolId = "IdentityPoolId"
            case datasetName = "DatasetName"
        }
    }

    public struct BulkPublishResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?

        public init(identityPoolId: String? = nil) {
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId = "IdentityPoolId"
        }
    }

    public enum BulkPublishStatus: String, CustomStringConvertible, Codable {
        case notStarted = "NOT_STARTED"
        case inProgress = "IN_PROGRESS"
        case failed = "FAILED"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct GetCognitoEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .map)
        ]
        /// The Cognito Events returned from the GetCognitoEvents request
        public let events: [String: String]?

        public init(events: [String: String]? = nil) {
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
        }
    }

    public struct IdentityUsage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityId", required: false, type: .string), 
            AWSShapeMember(label: "DataStorage", required: false, type: .long), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DatasetCount", required: false, type: .integer)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String?
        /// Total data storage for this identity.
        public let dataStorage: Int64?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?
        /// Date on which the identity was last modified.
        public let lastModifiedDate: TimeStamp?
        /// Number of datasets for the identity.
        public let datasetCount: Int32?

        public init(identityId: String? = nil, dataStorage: Int64? = nil, identityPoolId: String? = nil, lastModifiedDate: TimeStamp? = nil, datasetCount: Int32? = nil) {
            self.identityId = identityId
            self.dataStorage = dataStorage
            self.identityPoolId = identityPoolId
            self.lastModifiedDate = lastModifiedDate
            self.datasetCount = datasetCount
        }

        private enum CodingKeys: String, CodingKey {
            case identityId = "IdentityId"
            case dataStorage = "DataStorage"
            case identityPoolId = "IdentityPoolId"
            case lastModifiedDate = "LastModifiedDate"
            case datasetCount = "DatasetCount"
        }
    }

    public struct DescribeDatasetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dataset", required: false, type: .structure)
        ]
        /// Meta data for a collection of data for an identity. An identity can have multiple datasets. A dataset can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
        public let dataset: Dataset?

        public init(dataset: Dataset? = nil) {
            self.dataset = dataset
        }

        private enum CodingKeys: String, CodingKey {
            case dataset = "Dataset"
        }
    }

    public struct ListRecordsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Records", required: false, type: .list), 
            AWSShapeMember(label: "SyncSessionToken", required: false, type: .string), 
            AWSShapeMember(label: "DatasetSyncCount", required: false, type: .long), 
            AWSShapeMember(label: "DatasetExists", required: false, type: .boolean), 
            AWSShapeMember(label: "MergedDatasetNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DatasetDeletedAfterRequestedSyncCount", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string), 
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// A list of all records.
        public let records: [Record]?
        /// A token containing a session ID, identity ID, and expiration.
        public let syncSessionToken: String?
        /// Server sync count for this dataset.
        public let datasetSyncCount: Int64?
        /// Indicates whether the dataset exists.
        public let datasetExists: Bool?
        /// Names of merged datasets.
        public let mergedDatasetNames: [String]?
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// A boolean value specifying whether to delete the dataset locally.
        public let datasetDeletedAfterRequestedSyncCount: Bool?
        /// The user/device that made the last change to this record.
        public let lastModifiedBy: String?
        /// Total number of records.
        public let count: Int32?

        public init(records: [Record]? = nil, syncSessionToken: String? = nil, datasetSyncCount: Int64? = nil, datasetExists: Bool? = nil, mergedDatasetNames: [String]? = nil, nextToken: String? = nil, datasetDeletedAfterRequestedSyncCount: Bool? = nil, lastModifiedBy: String? = nil, count: Int32? = nil) {
            self.records = records
            self.syncSessionToken = syncSessionToken
            self.datasetSyncCount = datasetSyncCount
            self.datasetExists = datasetExists
            self.mergedDatasetNames = mergedDatasetNames
            self.nextToken = nextToken
            self.datasetDeletedAfterRequestedSyncCount = datasetDeletedAfterRequestedSyncCount
            self.lastModifiedBy = lastModifiedBy
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case records = "Records"
            case syncSessionToken = "SyncSessionToken"
            case datasetSyncCount = "DatasetSyncCount"
            case datasetExists = "DatasetExists"
            case mergedDatasetNames = "MergedDatasetNames"
            case nextToken = "NextToken"
            case datasetDeletedAfterRequestedSyncCount = "DatasetDeletedAfterRequestedSyncCount"
            case lastModifiedBy = "LastModifiedBy"
            case count = "Count"
        }
    }

    public struct SubscribeToDatasetResponse: AWSShape {

    }

    public struct ListRecordsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastSyncCount", location: .querystring(locationName: "lastSyncCount"), required: false, type: .long), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "SyncSessionToken", location: .querystring(locationName: "syncSessionToken"), required: false, type: .string), 
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DatasetName", location: .uri(locationName: "DatasetName"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The last server sync count for this record.
        public let lastSyncCount: Int64?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A token containing a session ID, identity ID, and expiration.
        public let syncSessionToken: String?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// The maximum number of results to be returned.
        public let maxResults: Int32?
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?

        public init(lastSyncCount: Int64? = nil, identityPoolId: String, syncSessionToken: String? = nil, identityId: String, maxResults: Int32? = nil, datasetName: String, nextToken: String? = nil) {
            self.lastSyncCount = lastSyncCount
            self.identityPoolId = identityPoolId
            self.syncSessionToken = syncSessionToken
            self.identityId = identityId
            self.maxResults = maxResults
            self.datasetName = datasetName
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case lastSyncCount = "lastSyncCount"
            case identityPoolId = "IdentityPoolId"
            case syncSessionToken = "syncSessionToken"
            case identityId = "IdentityId"
            case maxResults = "maxResults"
            case datasetName = "DatasetName"
            case nextToken = "nextToken"
        }
    }

    public struct GetBulkPublishDetailsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "BulkPublishStatus", required: false, type: .enum), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "BulkPublishCompleteTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "BulkPublishStartTime", required: false, type: .timestamp)
        ]
        /// If BulkPublishStatus is FAILED this field will contain the error message that caused the bulk publish to fail.
        public let failureMessage: String?
        /// Status of the last bulk publish operation, valid values are: NOT_STARTED - No bulk publish has been requested for this identity pool IN_PROGRESS - Data is being published to the configured stream SUCCEEDED - All data for the identity pool has been published to the configured stream FAILED - Some portion of the data has failed to publish, check FailureMessage for the cause.
        public let bulkPublishStatus: BulkPublishStatus?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?
        /// If BulkPublishStatus is SUCCEEDED, the time the last bulk publish operation completed.
        public let bulkPublishCompleteTime: TimeStamp?
        /// The date/time at which the last bulk publish was initiated.
        public let bulkPublishStartTime: TimeStamp?

        public init(failureMessage: String? = nil, bulkPublishStatus: BulkPublishStatus? = nil, identityPoolId: String? = nil, bulkPublishCompleteTime: TimeStamp? = nil, bulkPublishStartTime: TimeStamp? = nil) {
            self.failureMessage = failureMessage
            self.bulkPublishStatus = bulkPublishStatus
            self.identityPoolId = identityPoolId
            self.bulkPublishCompleteTime = bulkPublishCompleteTime
            self.bulkPublishStartTime = bulkPublishStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case failureMessage = "FailureMessage"
            case bulkPublishStatus = "BulkPublishStatus"
            case identityPoolId = "IdentityPoolId"
            case bulkPublishCompleteTime = "BulkPublishCompleteTime"
            case bulkPublishStartTime = "BulkPublishStartTime"
        }
    }

    public struct UpdateRecordsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DatasetName", location: .uri(locationName: "DatasetName"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "SyncSessionToken", required: true, type: .string), 
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "RecordPatches", required: false, type: .list), 
            AWSShapeMember(label: "DeviceId", required: false, type: .string), 
            AWSShapeMember(label: "ClientContext", location: .header(locationName: "x-amz-Client-Context"), required: false, type: .string)
        ]
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.
        public let syncSessionToken: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A list of patch operations.
        public let recordPatches: [RecordPatch]?
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String?
        /// Intended to supply a device ID that will populate the lastModifiedBy field referenced in other methods. The ClientContext field is not yet implemented.
        public let clientContext: String?

        public init(datasetName: String, identityPoolId: String, syncSessionToken: String, identityId: String, recordPatches: [RecordPatch]? = nil, deviceId: String? = nil, clientContext: String? = nil) {
            self.datasetName = datasetName
            self.identityPoolId = identityPoolId
            self.syncSessionToken = syncSessionToken
            self.identityId = identityId
            self.recordPatches = recordPatches
            self.deviceId = deviceId
            self.clientContext = clientContext
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "DatasetName"
            case identityPoolId = "IdentityPoolId"
            case syncSessionToken = "SyncSessionToken"
            case identityId = "IdentityId"
            case recordPatches = "RecordPatches"
            case deviceId = "DeviceId"
            case clientContext = "x-amz-Client-Context"
        }
    }

    public struct ListDatasetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string)
        ]
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// The maximum number of results to be returned.
        public let maxResults: Int32?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, identityPoolId: String, identityId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.identityPoolId = identityPoolId
            self.identityId = identityId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case identityPoolId = "IdentityPoolId"
            case identityId = "IdentityId"
        }
    }

    public struct GetBulkPublishDetailsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string)
        ]
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId = "IdentityPoolId"
        }
    }

    public struct ListDatasetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Datasets", required: false, type: .list), 
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// A set of datasets.
        public let datasets: [Dataset]?
        /// Number of datasets returned.
        public let count: Int32?

        public init(nextToken: String? = nil, datasets: [Dataset]? = nil, count: Int32? = nil) {
            self.nextToken = nextToken
            self.datasets = datasets
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case datasets = "Datasets"
            case count = "Count"
        }
    }

    public struct DescribeIdentityPoolUsageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityPoolUsage", required: false, type: .structure)
        ]
        /// Information about the usage of the identity pool.
        public let identityPoolUsage: IdentityPoolUsage?

        public init(identityPoolUsage: IdentityPoolUsage? = nil) {
            self.identityPoolUsage = identityPoolUsage
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolUsage = "IdentityPoolUsage"
        }
    }

    public struct SetIdentityPoolConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CognitoStreams", required: false, type: .structure), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "PushSync", required: false, type: .structure)
        ]
        /// Options to apply to this identity pool for Amazon Cognito streams.
        public let cognitoStreams: CognitoStreams?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.
        public let identityPoolId: String?
        /// Options to apply to this identity pool for push synchronization.
        public let pushSync: PushSync?

        public init(cognitoStreams: CognitoStreams? = nil, identityPoolId: String? = nil, pushSync: PushSync? = nil) {
            self.cognitoStreams = cognitoStreams
            self.identityPoolId = identityPoolId
            self.pushSync = pushSync
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoStreams = "CognitoStreams"
            case identityPoolId = "IdentityPoolId"
            case pushSync = "PushSync"
        }
    }

    public struct SubscribeToDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceId", location: .uri(locationName: "DeviceId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "DatasetName", location: .uri(locationName: "DatasetName"), required: true, type: .string)
        ]
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String
        /// Unique ID for this identity.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which the identity belongs.
        public let identityPoolId: String
        /// The name of the dataset to subcribe to.
        public let datasetName: String

        public init(deviceId: String, identityId: String, identityPoolId: String, datasetName: String) {
            self.deviceId = deviceId
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case identityId = "IdentityId"
            case identityPoolId = "IdentityPoolId"
            case datasetName = "DatasetName"
        }
    }

    public struct Record: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncCount", required: false, type: .long), 
            AWSShapeMember(label: "DeviceLastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp)
        ]
        /// The server sync count for this record.
        public let syncCount: Int64?
        /// The last modified date of the client device.
        public let deviceLastModifiedDate: TimeStamp?
        /// The key for the record.
        public let key: String?
        /// The user/device that made the last change to this record.
        public let lastModifiedBy: String?
        /// The value for the record.
        public let value: String?
        /// The date on which the record was last modified.
        public let lastModifiedDate: TimeStamp?

        public init(syncCount: Int64? = nil, deviceLastModifiedDate: TimeStamp? = nil, key: String? = nil, lastModifiedBy: String? = nil, value: String? = nil, lastModifiedDate: TimeStamp? = nil) {
            self.syncCount = syncCount
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.key = key
            self.lastModifiedBy = lastModifiedBy
            self.value = value
            self.lastModifiedDate = lastModifiedDate
        }

        private enum CodingKeys: String, CodingKey {
            case syncCount = "SyncCount"
            case deviceLastModifiedDate = "DeviceLastModifiedDate"
            case key = "Key"
            case lastModifiedBy = "LastModifiedBy"
            case value = "Value"
            case lastModifiedDate = "LastModifiedDate"
        }
    }

    public struct PushSync: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationArns", required: false, type: .list), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]
        /// List of SNS platform application ARNs that could be used by clients.
        public let applicationArns: [String]?
        /// A role configured to allow Cognito to call SNS on behalf of the developer.
        public let roleArn: String?

        public init(applicationArns: [String]? = nil, roleArn: String? = nil) {
            self.applicationArns = applicationArns
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case applicationArns = "ApplicationArns"
            case roleArn = "RoleArn"
        }
    }

    public enum StreamingStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum Platform: String, CustomStringConvertible, Codable {
        case apns = "APNS"
        case apnsSandbox = "APNS_SANDBOX"
        case gcm = "GCM"
        case adm = "ADM"
        public var description: String { return self.rawValue }
    }

    public struct RegisterDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceId", required: false, type: .string)
        ]
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String?

        public init(deviceId: String? = nil) {
            self.deviceId = deviceId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
        }
    }

    public struct RegisterDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Token", required: true, type: .string), 
            AWSShapeMember(label: "Platform", required: true, type: .enum), 
            AWSShapeMember(label: "IdentityPoolId", location: .uri(locationName: "IdentityPoolId"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityId", location: .uri(locationName: "IdentityId"), required: true, type: .string)
        ]
        /// The push token.
        public let token: String
        /// The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).
        public let platform: Platform
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. Here, the ID of the pool that the identity belongs to.
        public let identityPoolId: String
        /// The unique ID for this identity.
        public let identityId: String

        public init(token: String, platform: Platform, identityPoolId: String, identityId: String) {
            self.token = token
            self.platform = platform
            self.identityPoolId = identityPoolId
            self.identityId = identityId
        }

        private enum CodingKeys: String, CodingKey {
            case token = "Token"
            case platform = "Platform"
            case identityPoolId = "IdentityPoolId"
            case identityId = "IdentityId"
        }
    }

    public struct DeleteDatasetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dataset", required: false, type: .structure)
        ]
        /// A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
        public let dataset: Dataset?

        public init(dataset: Dataset? = nil) {
            self.dataset = dataset
        }

        private enum CodingKeys: String, CodingKey {
            case dataset = "Dataset"
        }
    }

}