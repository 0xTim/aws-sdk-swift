// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension KinesisAnalytics {

    public struct InputLambdaProcessor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that is used to access the AWS Lambda function.
        public let roleARN: String
        /// The ARN of the AWS Lambda function that operates on records in the stream.
        public let resourceARN: String

        public init(roleARN: String, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct DiscoverInputSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "ParsedInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "ProcessedInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "RawInputRecords", required: false, type: .list)
        ]
        /// Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
        public let inputSchema: SourceSchema?
        /// An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
        public let parsedInputRecords: [[String]]?
        /// Stream data that was modified by the processor specified in the InputProcessingConfiguration parameter.
        public let processedInputRecords: [String]?
        /// Raw stream data that was sampled to infer the schema.
        public let rawInputRecords: [String]?

        public init(inputSchema: SourceSchema? = nil, parsedInputRecords: [[String]]? = nil, processedInputRecords: [String]? = nil, rawInputRecords: [String]? = nil) {
            self.inputSchema = inputSchema
            self.parsedInputRecords = parsedInputRecords
            self.processedInputRecords = processedInputRecords
            self.rawInputRecords = rawInputRecords
        }

        private enum CodingKeys: String, CodingKey {
            case inputSchema = "InputSchema"
            case parsedInputRecords = "ParsedInputRecords"
            case processedInputRecords = "ProcessedInputRecords"
            case rawInputRecords = "RawInputRecords"
        }
    }

    public struct InputLambdaProcessorUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the new AWS Lambda function that is used to preprocess the records in the stream.
        public let resourceARNUpdate: String?
        /// The ARN of the new IAM role that is used to access the AWS Lambda function.
        public let roleARNUpdate: String?

        public init(resourceARNUpdate: String? = nil, roleARNUpdate: String? = nil) {
            self.resourceARNUpdate = resourceARNUpdate
            self.roleARNUpdate = roleARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
            case roleARNUpdate = "RoleARNUpdate"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {

    }

    public struct StopApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Name of the running application to stop.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
        }
    }

    public struct InputProcessingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessor", required: true, type: .structure)
        ]
        /// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
        public let inputLambdaProcessor: InputLambdaProcessor

        public init(inputLambdaProcessor: InputLambdaProcessor) {
            self.inputLambdaProcessor = inputLambdaProcessor
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessor = "InputLambdaProcessor"
        }
    }

    public struct RecordFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MappingParameters", required: false, type: .structure), 
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum)
        ]
        /// When configuring application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
        public let mappingParameters: MappingParameters?
        /// The type of record format.
        public let recordFormatType: RecordFormatType

        public init(mappingParameters: MappingParameters? = nil, recordFormatType: RecordFormatType) {
            self.mappingParameters = mappingParameters
            self.recordFormatType = recordFormatType
        }

        private enum CodingKeys: String, CodingKey {
            case mappingParameters = "MappingParameters"
            case recordFormatType = "RecordFormatType"
        }
    }

    public struct StartApplicationResponse: AWSShape {

    }

    public struct AddApplicationInputResponse: AWSShape {

    }

    public struct ListApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExclusiveStartApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.
        public let exclusiveStartApplicationName: String?
        /// Maximum number of applications to list.
        public let limit: Int32?

        public init(exclusiveStartApplicationName: String? = nil, limit: Int32? = nil) {
            self.exclusiveStartApplicationName = exclusiveStartApplicationName
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case exclusiveStartApplicationName = "ExclusiveStartApplicationName"
            case limit = "Limit"
        }
    }

    public struct InputStartingPositionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputStartingPosition", required: false, type: .enum)
        ]
        /// The starting position on the stream.    NOW - Start reading just after the most recent record in the stream, start at the request time stamp that the customer issued.    TRIM_HORIZON - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Firehose delivery stream.    LAST_STOPPED_POINT - Resume reading from where the application last stopped reading.  
        public let inputStartingPosition: InputStartingPosition?

        public init(inputStartingPosition: InputStartingPosition? = nil) {
            self.inputStartingPosition = inputStartingPosition
        }

        private enum CodingKeys: String, CodingKey {
            case inputStartingPosition = "InputStartingPosition"
        }
    }

    public struct DeleteApplicationInputProcessingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the DescribeApplication operation.
        public let inputId: String
        /// The version ID of the Kinesis Analytics application.
        public let currentApplicationVersionId: Int64
        /// The Kinesis Analytics application name.
        public let applicationName: String

        public init(inputId: String, currentApplicationVersionId: Int64, applicationName: String) {
            self.inputId = inputId
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct DeleteApplicationInputProcessingConfigurationResponse: AWSShape {

    }

    public struct S3ReferenceDataSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceRoleARN", required: true, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String
        /// Amazon S3 object key name.
        public let fileKey: String
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.
        public let referenceRoleARN: String

        public init(bucketARN: String, fileKey: String, referenceRoleARN: String) {
            self.bucketARN = bucketARN
            self.fileKey = fileKey
            self.referenceRoleARN = referenceRoleARN
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
            case referenceRoleARN = "ReferenceRoleARN"
        }
    }

    public struct InputParallelism: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// Number of in-application streams to create. For more information, see Limits. 
        public let count: Int32?

        public init(count: Int32? = nil) {
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
        }
    }

    public struct ApplicationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLoggingOptionUpdates", required: false, type: .list), 
            AWSShapeMember(label: "InputUpdates", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSourceUpdates", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationCodeUpdate", required: false, type: .string), 
            AWSShapeMember(label: "OutputUpdates", required: false, type: .list)
        ]
        /// Describes application CloudWatch logging option updates.
        public let cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]?
        /// Describes application input configuration updates.
        public let inputUpdates: [InputUpdate]?
        /// Describes application reference data source updates.
        public let referenceDataSourceUpdates: [ReferenceDataSourceUpdate]?
        /// Describes application code updates.
        public let applicationCodeUpdate: String?
        /// Describes application output configuration updates.
        public let outputUpdates: [OutputUpdate]?

        public init(cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]? = nil, inputUpdates: [InputUpdate]? = nil, referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil, applicationCodeUpdate: String? = nil, outputUpdates: [OutputUpdate]? = nil) {
            self.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates
            self.inputUpdates = inputUpdates
            self.referenceDataSourceUpdates = referenceDataSourceUpdates
            self.applicationCodeUpdate = applicationCodeUpdate
            self.outputUpdates = outputUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
            case inputUpdates = "InputUpdates"
            case referenceDataSourceUpdates = "ReferenceDataSourceUpdates"
            case applicationCodeUpdate = "ApplicationCodeUpdate"
            case outputUpdates = "OutputUpdates"
        }
    }

    public struct DiscoverInputSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Configuration", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: false, type: .structure)
        ]
        /// Specify this parameter to discover a schema from data in an Amazon S3 object.
        public let s3Configuration: S3Configuration?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.
        public let roleARN: String?
        /// Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        /// Amazon Resource Name (ARN) of the streaming source.
        public let resourceARN: String?
        /// The InputProcessingConfiguration to use to preprocess the records before discovering the schema of the records.
        public let inputProcessingConfiguration: InputProcessingConfiguration?

        public init(s3Configuration: S3Configuration? = nil, roleARN: String? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, resourceARN: String? = nil, inputProcessingConfiguration: InputProcessingConfiguration? = nil) {
            self.s3Configuration = s3Configuration
            self.roleARN = roleARN
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.resourceARN = resourceARN
            self.inputProcessingConfiguration = inputProcessingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case s3Configuration = "S3Configuration"
            case roleARN = "RoleARN"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case resourceARN = "ResourceARN"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
        }
    }

    public struct KinesisStreamsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARN: String
        /// ARN of the destination Amazon Kinesis stream to write to.
        public let resourceARN: String

        public init(roleARN: String, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ReferenceDataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceSchema", required: true, type: .structure), 
            AWSShapeMember(label: "S3ReferenceDataSource", required: false, type: .structure), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
        public let referenceSchema: SourceSchema
        /// Identifies the S3 bucket and object that contains the reference data. Also identifies the IAM role Amazon Kinesis Analytics can assume to read this object on your behalf. An Amazon Kinesis Analytics application loads reference data only once. If the data changes, you call the UpdateApplication operation to trigger reloading of data into your application. 
        public let s3ReferenceDataSource: S3ReferenceDataSource?
        /// Name of the in-application table to create.
        public let tableName: String

        public init(referenceSchema: SourceSchema, s3ReferenceDataSource: S3ReferenceDataSource? = nil, tableName: String) {
            self.referenceSchema = referenceSchema
            self.s3ReferenceDataSource = s3ReferenceDataSource
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case referenceSchema = "ReferenceSchema"
            case s3ReferenceDataSource = "S3ReferenceDataSource"
            case tableName = "TableName"
        }
    }

    public struct KinesisFirehoseOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARN: String
        /// ARN of the destination Amazon Kinesis Firehose delivery stream to write to.
        public let resourceARN: String

        public init(roleARN: String, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct JSONMappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowPath", required: true, type: .string)
        ]
        /// Path to the top-level parent that contains the records.
        public let recordRowPath: String

        public init(recordRowPath: String) {
            self.recordRowPath = recordRowPath
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowPath = "RecordRowPath"
        }
    }

    public struct KinesisFirehoseInputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the input Amazon Kinesis Firehose delivery stream to read.
        public let resourceARNUpdate: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARNUpdate: String?

        public init(resourceARNUpdate: String? = nil, roleARNUpdate: String? = nil) {
            self.resourceARNUpdate = resourceARNUpdate
            self.roleARNUpdate = roleARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
            case roleARNUpdate = "RoleARNUpdate"
        }
    }

    public struct InputConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: true, type: .structure)
        ]
        /// Input source ID. You can get this ID by calling the DescribeApplication operation.
        public let id: String
        /// Point at which you want the application to start processing records from the streaming source.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration

        public init(id: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.id = id
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
        }
    }

    public struct MappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JSONMappingParameters", required: false, type: .structure), 
            AWSShapeMember(label: "CSVMappingParameters", required: false, type: .structure)
        ]
        /// Provides additional mapping information when JSON is the record format on the streaming source.
        public let jSONMappingParameters: JSONMappingParameters?
        /// Provides additional mapping information when the record format uses delimiters (for example, CSV).
        public let cSVMappingParameters: CSVMappingParameters?

        public init(jSONMappingParameters: JSONMappingParameters? = nil, cSVMappingParameters: CSVMappingParameters? = nil) {
            self.jSONMappingParameters = jSONMappingParameters
            self.cSVMappingParameters = cSVMappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case jSONMappingParameters = "JSONMappingParameters"
            case cSVMappingParameters = "CSVMappingParameters"
        }
    }

    public struct LambdaOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination function.
        public let roleARN: String?
        /// Amazon Resource Name (ARN) of the destination Lambda function.
        public let resourceARN: String?

        public init(roleARN: String? = nil, resourceARN: String? = nil) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct KinesisFirehoseOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream to write to.
        public let resourceARNUpdate: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARNUpdate: String?

        public init(resourceARNUpdate: String? = nil, roleARNUpdate: String? = nil) {
            self.resourceARNUpdate = resourceARNUpdate
            self.roleARNUpdate = roleARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
            case roleARNUpdate = "RoleARNUpdate"
        }
    }

    public struct KinesisStreamsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARN: String
        /// ARN of the input Amazon Kinesis stream to read.
        public let resourceARN: String

        public init(roleARN: String, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Outputs", required: false, type: .list), 
            AWSShapeMember(label: "Inputs", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationCode", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string)
        ]
        /// You can configure application output to write data from any of the in-application streams to up to three destinations. These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery streams, AWS Lambda destinations, or any combination of the three. In the configuration, you specify the in-application stream name, the destination stream or Lambda function Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream or Lambda function on your behalf. In the output configuration, you also provide the output stream or Lambda function ARN. For stream destinations, you provide the format of data in the stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics can assume to write to the stream or Lambda function on your behalf.
        public let outputs: [Output]?
        /// Use this parameter to configure the application input. You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table). For the streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream (for example, JSON, CSV, etc.). You also must provide an IAM role that Amazon Kinesis Analytics can assume to read this stream on your behalf. To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.
        public let inputs: [Input]?
        /// Name of your Amazon Kinesis Analytics application (for example, sample-app).
        public let applicationName: String
        /// Use this parameter to configure a CloudWatch log stream to monitor application configuration errors. For more information, see Working with Amazon CloudWatch Logs.
        public let cloudWatchLoggingOptions: [CloudWatchLoggingOption]?
        /// One or more SQL statements that read input data, transform it, and generate output. For example, you can write a SQL statement that reads data from one in-application stream, generates a running average of the number of advertisement clicks by vendor, and insert resulting rows in another in-application stream using pumps. For more information about the typical pattern, see Application Code.  You can provide such series of SQL statements, where output of one statement can be used as the input for the next statement. You store intermediate results by creating in-application streams and pumps. Note that the application code must create the streams with names specified in the Outputs. For example, if your Outputs defines output streams named ExampleOutputStream1 and ExampleOutputStream2, then your application code must create these streams. 
        public let applicationCode: String?
        /// Summary description of the application.
        public let applicationDescription: String?

        public init(outputs: [Output]? = nil, inputs: [Input]? = nil, applicationName: String, cloudWatchLoggingOptions: [CloudWatchLoggingOption]? = nil, applicationCode: String? = nil, applicationDescription: String? = nil) {
            self.outputs = outputs
            self.inputs = inputs
            self.applicationName = applicationName
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.applicationCode = applicationCode
            self.applicationDescription = applicationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case outputs = "Outputs"
            case inputs = "Inputs"
            case applicationName = "ApplicationName"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case applicationCode = "ApplicationCode"
            case applicationDescription = "ApplicationDescription"
        }
    }

    public struct DeleteApplicationOutputResponse: AWSShape {

    }

    public struct OutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: true, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "NameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "LambdaOutputUpdate", required: false, type: .structure)
        ]
        /// Describes the data format when records are written to the destination. For more information, see Configuring Application Output.
        public let destinationSchemaUpdate: DestinationSchema?
        /// Describes an Amazon Kinesis stream as the destination for the output.
        public let kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate?
        /// Identifies the specific output configuration that you want to update.
        public let outputId: String
        /// Describes an Amazon Kinesis Firehose delivery stream as the destination for the output.
        public let kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate?
        /// If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
        public let nameUpdate: String?
        /// Describes an AWS Lambda function as the destination for the output.
        public let lambdaOutputUpdate: LambdaOutputUpdate?

        public init(destinationSchemaUpdate: DestinationSchema? = nil, kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil, outputId: String, kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil, nameUpdate: String? = nil, lambdaOutputUpdate: LambdaOutputUpdate? = nil) {
            self.destinationSchemaUpdate = destinationSchemaUpdate
            self.kinesisStreamsOutputUpdate = kinesisStreamsOutputUpdate
            self.outputId = outputId
            self.kinesisFirehoseOutputUpdate = kinesisFirehoseOutputUpdate
            self.nameUpdate = nameUpdate
            self.lambdaOutputUpdate = lambdaOutputUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case destinationSchemaUpdate = "DestinationSchemaUpdate"
            case kinesisStreamsOutputUpdate = "KinesisStreamsOutputUpdate"
            case outputId = "OutputId"
            case kinesisFirehoseOutputUpdate = "KinesisFirehoseOutputUpdate"
            case nameUpdate = "NameUpdate"
            case lambdaOutputUpdate = "LambdaOutputUpdate"
        }
    }

    public struct DeleteApplicationOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputId", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The ID of the configuration to delete. Each output configuration that is added to the application, either when the application is created or later using the AddApplicationOutput operation, has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the DescribeApplication operation to get the specific OutputId. 
        public let outputId: String
        /// Amazon Kinesis Analytics application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// Amazon Kinesis Analytics application name.
        public let applicationName: String

        public init(outputId: String, currentApplicationVersionId: Int64, applicationName: String) {
            self.outputId = outputId
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case outputId = "OutputId"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct OutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LambdaOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationSchema", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsOutputDescription", required: false, type: .structure)
        ]
        /// Describes the AWS Lambda function configured as the destination where output is written.
        public let lambdaOutputDescription: LambdaOutputDescription?
        /// Name of the in-application stream configured as output.
        public let name: String?
        /// Describes the Amazon Kinesis Firehose delivery stream configured as the destination where output is written.
        public let kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription?
        /// A unique identifier for the output configuration.
        public let outputId: String?
        /// Data format used for writing data to the destination.
        public let destinationSchema: DestinationSchema?
        /// Describes Amazon Kinesis stream configured as the destination where output is written.
        public let kinesisStreamsOutputDescription: KinesisStreamsOutputDescription?

        public init(lambdaOutputDescription: LambdaOutputDescription? = nil, name: String? = nil, kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil, outputId: String? = nil, destinationSchema: DestinationSchema? = nil, kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil) {
            self.lambdaOutputDescription = lambdaOutputDescription
            self.name = name
            self.kinesisFirehoseOutputDescription = kinesisFirehoseOutputDescription
            self.outputId = outputId
            self.destinationSchema = destinationSchema
            self.kinesisStreamsOutputDescription = kinesisStreamsOutputDescription
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaOutputDescription = "LambdaOutputDescription"
            case name = "Name"
            case kinesisFirehoseOutputDescription = "KinesisFirehoseOutputDescription"
            case outputId = "OutputId"
            case destinationSchema = "DestinationSchema"
            case kinesisStreamsOutputDescription = "KinesisStreamsOutputDescription"
        }
    }

    public struct S3Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// IAM ARN of the role used to access the data.
        public let roleARN: String
        /// ARN of the S3 bucket that contains the data.
        public let bucketARN: String
        /// The name of the object that contains the data.
        public let fileKey: String

        public init(roleARN: String, bucketARN: String, fileKey: String) {
            self.roleARN = roleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct AddApplicationInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "Input", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Current version of your Amazon Kinesis Analytics application. You can use the DescribeApplication operation to find the current application version.
        public let currentApplicationVersionId: Int64
        /// The Input to add.
        public let input: Input
        /// Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, input: Input, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.input = input
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case input = "Input"
            case applicationName = "ApplicationName"
        }
    }

    public struct LambdaOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination function on your behalf. You need to grant the necessary permissions to this role. 
        public let roleARN: String
        /// Amazon Resource Name (ARN) of the destination Lambda function to write to.
        public let resourceARN: String

        public init(roleARN: String, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct KinesisStreamsOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public let roleARN: String?
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        public let resourceARN: String?

        public init(roleARN: String? = nil, resourceARN: String? = nil) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ReferenceDataSourceUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "S3ReferenceDataSourceUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ReferenceSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "TableNameUpdate", required: false, type: .string)
        ]
        /// ID of the reference data source being updated. You can use the DescribeApplication operation to get this value.
        public let referenceId: String
        /// Describes the S3 bucket name, object key name, and IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
        public let s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream. 
        public let referenceSchemaUpdate: SourceSchema?
        /// In-application table name that is created by this update.
        public let tableNameUpdate: String?

        public init(referenceId: String, s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil, referenceSchemaUpdate: SourceSchema? = nil, tableNameUpdate: String? = nil) {
            self.referenceId = referenceId
            self.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate
            self.referenceSchemaUpdate = referenceSchemaUpdate
            self.tableNameUpdate = tableNameUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case referenceId = "ReferenceId"
            case s3ReferenceDataSourceUpdate = "S3ReferenceDataSourceUpdate"
            case referenceSchemaUpdate = "ReferenceSchemaUpdate"
            case tableNameUpdate = "TableNameUpdate"
        }
    }

    public struct RecordColumn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mapping", required: false, type: .string), 
            AWSShapeMember(label: "SqlType", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Reference to the data element in the streaming input of the reference data source.
        public let mapping: String?
        /// Type of column created in the in-application input stream or reference table.
        public let sqlType: String
        /// Name of the column created in the in-application input stream or reference table.
        public let name: String

        public init(mapping: String? = nil, sqlType: String, name: String) {
            self.mapping = mapping
            self.sqlType = sqlType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case mapping = "Mapping"
            case sqlType = "SqlType"
            case name = "Name"
        }
    }

    public struct CloudWatchLoggingOptionUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "LogStreamARNUpdate", required: false, type: .string)
        ]
        /// ID of the CloudWatch logging option to update
        public let cloudWatchLoggingOptionId: String
        /// IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the PutLogEvents policy action enabled.
        public let roleARNUpdate: String?
        /// ARN of the CloudWatch log to receive application messages.
        public let logStreamARNUpdate: String?

        public init(cloudWatchLoggingOptionId: String, roleARNUpdate: String? = nil, logStreamARNUpdate: String? = nil) {
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
            self.roleARNUpdate = roleARNUpdate
            self.logStreamARNUpdate = logStreamARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
            case roleARNUpdate = "RoleARNUpdate"
            case logStreamARNUpdate = "LogStreamARNUpdate"
        }
    }

    public struct DestinationSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum)
        ]
        /// Specifies the format of the records on the output stream.
        public let recordFormatType: RecordFormatType

        public init(recordFormatType: RecordFormatType) {
            self.recordFormatType = recordFormatType
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
        }
    }

    public struct AddApplicationOutputResponse: AWSShape {

    }

    public struct DeleteApplicationResponse: AWSShape {

    }

    public struct AddApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOption", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The version ID of the Kinesis Analytics application.
        public let currentApplicationVersionId: Int64
        /// Provides the CloudWatch log stream Amazon Resource Name (ARN) and the IAM role ARN. Note: To write application messages to CloudWatch, the IAM role that is used must have the PutLogEvents policy action enabled.
        public let cloudWatchLoggingOption: CloudWatchLoggingOption
        /// The Kinesis Analytics application name.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, cloudWatchLoggingOption: CloudWatchLoggingOption, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.cloudWatchLoggingOption = cloudWatchLoggingOption
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case cloudWatchLoggingOption = "CloudWatchLoggingOption"
            case applicationName = "ApplicationName"
        }
    }

    public struct InputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputParallelismUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "NamePrefixUpdate", required: false, type: .string), 
            AWSShapeMember(label: "KinesisStreamsInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputId", required: true, type: .string)
        ]
        /// Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).
        public let inputParallelismUpdate: InputParallelismUpdate?
        /// Describes updates for an input processing configuration.
        public let inputProcessingConfigurationUpdate: InputProcessingConfigurationUpdate?
        /// If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.
        public let kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate?
        /// Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.
        public let namePrefixUpdate: String?
        /// If an Amazon Kinesis stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.
        public let kinesisStreamsInputUpdate: KinesisStreamsInputUpdate?
        /// Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
        public let inputSchemaUpdate: InputSchemaUpdate?
        /// Input ID of the application input to be updated.
        public let inputId: String

        public init(inputParallelismUpdate: InputParallelismUpdate? = nil, inputProcessingConfigurationUpdate: InputProcessingConfigurationUpdate? = nil, kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil, namePrefixUpdate: String? = nil, kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil, inputSchemaUpdate: InputSchemaUpdate? = nil, inputId: String) {
            self.inputParallelismUpdate = inputParallelismUpdate
            self.inputProcessingConfigurationUpdate = inputProcessingConfigurationUpdate
            self.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate
            self.namePrefixUpdate = namePrefixUpdate
            self.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate
            self.inputSchemaUpdate = inputSchemaUpdate
            self.inputId = inputId
        }

        private enum CodingKeys: String, CodingKey {
            case inputParallelismUpdate = "InputParallelismUpdate"
            case inputProcessingConfigurationUpdate = "InputProcessingConfigurationUpdate"
            case kinesisFirehoseInputUpdate = "KinesisFirehoseInputUpdate"
            case namePrefixUpdate = "NamePrefixUpdate"
            case kinesisStreamsInputUpdate = "KinesisStreamsInputUpdate"
            case inputSchemaUpdate = "InputSchemaUpdate"
            case inputId = "InputId"
        }
    }

    public enum ApplicationStatus: String, CustomStringConvertible, Codable {
        case deleting = "DELETING"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case ready = "READY"
        case running = "RUNNING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public struct ListApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HasMoreApplications", required: true, type: .boolean), 
            AWSShapeMember(label: "ApplicationSummaries", required: true, type: .list)
        ]
        /// Returns true if there are more applications to retrieve.
        public let hasMoreApplications: Bool
        /// List of ApplicationSummary objects. 
        public let applicationSummaries: [ApplicationSummary]

        public init(hasMoreApplications: Bool, applicationSummaries: [ApplicationSummary]) {
            self.hasMoreApplications = hasMoreApplications
            self.applicationSummaries = applicationSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case hasMoreApplications = "HasMoreApplications"
            case applicationSummaries = "ApplicationSummaries"
        }
    }

    public struct UpdateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationUpdate", required: true, type: .structure)
        ]
        /// The current application version ID. You can use the DescribeApplication operation to get this value.
        public let currentApplicationVersionId: Int64
        /// Name of the Amazon Kinesis Analytics application to update.
        public let applicationName: String
        /// Describes application updates.
        public let applicationUpdate: ApplicationUpdate

        public init(currentApplicationVersionId: Int64, applicationName: String, applicationUpdate: ApplicationUpdate) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.applicationUpdate = applicationUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case applicationUpdate = "ApplicationUpdate"
        }
    }

    public struct InputProcessingConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessorUpdate", required: true, type: .structure)
        ]
        /// Provides update information for an InputLambdaProcessor.
        public let inputLambdaProcessorUpdate: InputLambdaProcessorUpdate

        public init(inputLambdaProcessorUpdate: InputLambdaProcessorUpdate) {
            self.inputLambdaProcessorUpdate = inputLambdaProcessorUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessorUpdate = "InputLambdaProcessorUpdate"
        }
    }

    public struct InputLambdaProcessorDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// The ARN of the IAM role that is used to access the AWS Lambda function.
        public let roleARN: String?
        /// The ARN of the AWS Lambda function that is used to preprocess the records in the stream.
        public let resourceARN: String?

        public init(roleARN: String? = nil, resourceARN: String? = nil) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public enum InputStartingPosition: String, CustomStringConvertible, Codable {
        case now = "NOW"
        case trimHorizon = "TRIM_HORIZON"
        case lastStoppedPoint = "LAST_STOPPED_POINT"
        public var description: String { return self.rawValue }
    }

    public struct StartApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputConfigurations", required: true, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.
        public let inputConfigurations: [InputConfiguration]
        /// Name of the application.
        public let applicationName: String

        public init(inputConfigurations: [InputConfiguration], applicationName: String) {
            self.inputConfigurations = inputConfigurations
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfigurations = "InputConfigurations"
            case applicationName = "ApplicationName"
        }
    }

    public struct InputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamsInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "InAppStreamNames", required: false, type: .list), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputId", required: false, type: .string), 
            AWSShapeMember(label: "NamePrefix", required: false, type: .string)
        ]
        /// If an Amazon Kinesis stream is configured as streaming source, provides Amazon Kinesis stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public let kinesisStreamsInputDescription: KinesisStreamsInputDescription?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. 
        public let inputSchema: SourceSchema?
        /// Returns the in-application stream names that are mapped to the stream source.
        public let inAppStreamNames: [String]?
        /// Describes the configured parallelism (number of in-application streams mapped to the streaming source).
        public let inputParallelism: InputParallelism?
        /// The description of the preprocessor that executes on records in this input before the application's code is run.
        public let inputProcessingConfigurationDescription: InputProcessingConfigurationDescription?
        /// Point at which the application is configured to read from the input stream.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        /// If an Amazon Kinesis Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public let kinesisFirehoseInputDescription: KinesisFirehoseInputDescription?
        /// Input ID associated with the application input. This is the ID that Amazon Kinesis Analytics assigns to each input configuration you add to your application. 
        public let inputId: String?
        /// In-application name prefix.
        public let namePrefix: String?

        public init(kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil, inputSchema: SourceSchema? = nil, inAppStreamNames: [String]? = nil, inputParallelism: InputParallelism? = nil, inputProcessingConfigurationDescription: InputProcessingConfigurationDescription? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil, inputId: String? = nil, namePrefix: String? = nil) {
            self.kinesisStreamsInputDescription = kinesisStreamsInputDescription
            self.inputSchema = inputSchema
            self.inAppStreamNames = inAppStreamNames
            self.inputParallelism = inputParallelism
            self.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription
            self.inputId = inputId
            self.namePrefix = namePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamsInputDescription = "KinesisStreamsInputDescription"
            case inputSchema = "InputSchema"
            case inAppStreamNames = "InAppStreamNames"
            case inputParallelism = "InputParallelism"
            case inputProcessingConfigurationDescription = "InputProcessingConfigurationDescription"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case kinesisFirehoseInputDescription = "KinesisFirehoseInputDescription"
            case inputId = "InputId"
            case namePrefix = "NamePrefix"
        }
    }

    public struct DeleteApplicationReferenceDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Version of the application. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// ID of the reference data source. When you add a reference data source to your application using the AddApplicationReferenceDataSource, Amazon Kinesis Analytics assigns an ID. You can use the DescribeApplication operation to get the reference ID. 
        public let referenceId: String
        /// Name of an existing application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, referenceId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceId = referenceId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case referenceId = "ReferenceId"
            case applicationName = "ApplicationName"
        }
    }

    public struct KinesisStreamsOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream where you want to write the output.
        public let resourceARNUpdate: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARNUpdate: String?

        public init(resourceARNUpdate: String? = nil, roleARNUpdate: String? = nil) {
            self.resourceARNUpdate = resourceARNUpdate
            self.roleARNUpdate = roleARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
            case roleARNUpdate = "RoleARNUpdate"
        }
    }

    public struct AddApplicationInputProcessingConfigurationResponse: AWSShape {

    }

    public struct DescribeApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Name of the application.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
        }
    }

    public struct CloudWatchLoggingOptionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: false, type: .string), 
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string)
        ]
        /// IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the PutLogEvents policy action enabled.
        public let roleARN: String
        /// ID of the CloudWatch logging option description.
        public let cloudWatchLoggingOptionId: String?
        /// ARN of the CloudWatch log to receive application messages.
        public let logStreamARN: String

        public init(roleARN: String, cloudWatchLoggingOptionId: String? = nil, logStreamARN: String) {
            self.roleARN = roleARN
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
            self.logStreamARN = logStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
            case logStreamARN = "LogStreamARN"
        }
    }

    public struct ApplicationDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "ReferenceDataSourceDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationCode", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string), 
            AWSShapeMember(label: "InputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "LastUpdateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long)
        ]
        /// Time stamp when the application version was created.
        public let createTimestamp: TimeStamp?
        /// Status of the application.
        public let applicationStatus: ApplicationStatus
        /// Describes reference data sources configured for the application. For more information, see Configuring Application Input. 
        public let referenceDataSourceDescriptions: [ReferenceDataSourceDescription]?
        /// Returns the application code that you provided to perform data analysis on any of the in-application streams in your application.
        public let applicationCode: String?
        /// Describes the CloudWatch log streams that are configured to receive application messages. For more information about using CloudWatch log streams with Amazon Kinesis Analytics applications, see Working with Amazon CloudWatch Logs. 
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// Name of the application.
        public let applicationName: String
        /// ARN of the application.
        public let applicationARN: String
        /// Description of the application.
        public let applicationDescription: String?
        /// Describes the application input configuration. For more information, see Configuring Application Input. 
        public let inputDescriptions: [InputDescription]?
        /// Time stamp when the application was last updated.
        public let lastUpdateTimestamp: TimeStamp?
        /// Describes the application output configuration. For more information, see Configuring Application Output. 
        public let outputDescriptions: [OutputDescription]?
        /// Provides the current application version.
        public let applicationVersionId: Int64

        public init(createTimestamp: TimeStamp? = nil, applicationStatus: ApplicationStatus, referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil, applicationCode: String? = nil, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, applicationName: String, applicationARN: String, applicationDescription: String? = nil, inputDescriptions: [InputDescription]? = nil, lastUpdateTimestamp: TimeStamp? = nil, outputDescriptions: [OutputDescription]? = nil, applicationVersionId: Int64) {
            self.createTimestamp = createTimestamp
            self.applicationStatus = applicationStatus
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
            self.applicationCode = applicationCode
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.applicationName = applicationName
            self.applicationARN = applicationARN
            self.applicationDescription = applicationDescription
            self.inputDescriptions = inputDescriptions
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.outputDescriptions = outputDescriptions
            self.applicationVersionId = applicationVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case createTimestamp = "CreateTimestamp"
            case applicationStatus = "ApplicationStatus"
            case referenceDataSourceDescriptions = "ReferenceDataSourceDescriptions"
            case applicationCode = "ApplicationCode"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case applicationName = "ApplicationName"
            case applicationARN = "ApplicationARN"
            case applicationDescription = "ApplicationDescription"
            case inputDescriptions = "InputDescriptions"
            case lastUpdateTimestamp = "LastUpdateTimestamp"
            case outputDescriptions = "OutputDescriptions"
            case applicationVersionId = "ApplicationVersionId"
        }
    }

    public struct KinesisStreamsInputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public let roleARN: String?
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        public let resourceARN: String?

        public init(roleARN: String? = nil, resourceARN: String? = nil) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct DescribeApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct KinesisFirehoseInputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics assumes to access the stream.
        public let roleARN: String?
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        public let resourceARN: String?

        public init(roleARN: String? = nil, resourceARN: String? = nil) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct AddApplicationReferenceDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ReferenceDataSource", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Version of the application for which you are adding the reference data source. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.
        public let referenceDataSource: ReferenceDataSource
        /// Name of an existing application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, referenceDataSource: ReferenceDataSource, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceDataSource = referenceDataSource
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case referenceDataSource = "ReferenceDataSource"
            case applicationName = "ApplicationName"
        }
    }

    public struct LambdaOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the destination Lambda function.
        public let resourceARNUpdate: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination function on your behalf. You need to grant the necessary permissions to this role. 
        public let roleARNUpdate: String?

        public init(resourceARNUpdate: String? = nil, roleARNUpdate: String? = nil) {
            self.resourceARNUpdate = resourceARNUpdate
            self.roleARNUpdate = roleARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
            case roleARNUpdate = "RoleARNUpdate"
        }
    }

    public struct KinesisFirehoseInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to make sure that the role has the necessary permissions to access the stream.
        public let roleARN: String
        /// ARN of the input delivery stream.
        public let resourceARN: String

        public init(roleARN: String, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct KinesisFirehoseOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public let roleARN: String?
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        public let resourceARN: String?

        public init(roleARN: String? = nil, resourceARN: String? = nil) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseOutput", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaOutput", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationSchema", required: true, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsOutput", required: false, type: .structure)
        ]
        /// Name of the in-application stream.
        public let name: String
        /// Identifies an Amazon Kinesis Firehose delivery stream as the destination.
        public let kinesisFirehoseOutput: KinesisFirehoseOutput?
        /// Identifies an AWS Lambda function as the destination.
        public let lambdaOutput: LambdaOutput?
        /// Describes the data format when records are written to the destination. For more information, see Configuring Application Output.
        public let destinationSchema: DestinationSchema
        /// Identifies an Amazon Kinesis stream as the destination.
        public let kinesisStreamsOutput: KinesisStreamsOutput?

        public init(name: String, kinesisFirehoseOutput: KinesisFirehoseOutput? = nil, lambdaOutput: LambdaOutput? = nil, destinationSchema: DestinationSchema, kinesisStreamsOutput: KinesisStreamsOutput? = nil) {
            self.name = name
            self.kinesisFirehoseOutput = kinesisFirehoseOutput
            self.lambdaOutput = lambdaOutput
            self.destinationSchema = destinationSchema
            self.kinesisStreamsOutput = kinesisStreamsOutput
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case kinesisFirehoseOutput = "KinesisFirehoseOutput"
            case lambdaOutput = "LambdaOutput"
            case destinationSchema = "DestinationSchema"
            case kinesisStreamsOutput = "KinesisStreamsOutput"
        }
    }

    public struct InputParallelismUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountUpdate", required: false, type: .integer)
        ]
        /// Number of in-application streams to create for the specified streaming source.
        public let countUpdate: Int32?

        public init(countUpdate: Int32? = nil) {
            self.countUpdate = countUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case countUpdate = "CountUpdate"
        }
    }

    public struct Input: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSchema", required: true, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure), 
            AWSShapeMember(label: "NamePrefix", required: true, type: .string), 
            AWSShapeMember(label: "KinesisStreamsInput", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseInput", required: false, type: .structure)
        ]
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.
        public let inputSchema: SourceSchema
        /// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
        public let inputProcessingConfiguration: InputProcessingConfiguration?
        /// Describes the number of in-application streams to create.  Data from your source is routed to these in-application input streams.  (see Configuring Application Input.
        public let inputParallelism: InputParallelism?
        /// Name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Amazon Kinesis Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. 
        public let namePrefix: String
        /// If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf. Note: Either KinesisStreamsInput or KinesisFirehoseInput is required.
        public let kinesisStreamsInput: KinesisStreamsInput?
        /// If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf. Note: Either KinesisStreamsInput or KinesisFirehoseInput is required.
        public let kinesisFirehoseInput: KinesisFirehoseInput?

        public init(inputSchema: SourceSchema, inputProcessingConfiguration: InputProcessingConfiguration? = nil, inputParallelism: InputParallelism? = nil, namePrefix: String, kinesisStreamsInput: KinesisStreamsInput? = nil, kinesisFirehoseInput: KinesisFirehoseInput? = nil) {
            self.inputSchema = inputSchema
            self.inputProcessingConfiguration = inputProcessingConfiguration
            self.inputParallelism = inputParallelism
            self.namePrefix = namePrefix
            self.kinesisStreamsInput = kinesisStreamsInput
            self.kinesisFirehoseInput = kinesisFirehoseInput
        }

        private enum CodingKeys: String, CodingKey {
            case inputSchema = "InputSchema"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
            case inputParallelism = "InputParallelism"
            case namePrefix = "NamePrefix"
            case kinesisStreamsInput = "KinesisStreamsInput"
            case kinesisFirehoseInput = "KinesisFirehoseInput"
        }
    }

    public struct SourceSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormat", required: true, type: .structure), 
            AWSShapeMember(label: "RecordColumns", required: true, type: .list), 
            AWSShapeMember(label: "RecordEncoding", required: false, type: .string)
        ]
        /// Specifies the format of the records on the streaming source.
        public let recordFormat: RecordFormat
        /// A list of RecordColumn objects.
        public let recordColumns: [RecordColumn]
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public let recordEncoding: String?

        public init(recordFormat: RecordFormat, recordColumns: [RecordColumn], recordEncoding: String? = nil) {
            self.recordFormat = recordFormat
            self.recordColumns = recordColumns
            self.recordEncoding = recordEncoding
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormat = "RecordFormat"
            case recordColumns = "RecordColumns"
            case recordEncoding = "RecordEncoding"
        }
    }

    public struct ReferenceDataSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "S3ReferenceDataSourceDescription", required: true, type: .structure), 
            AWSShapeMember(label: "TableName", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceSchema", required: false, type: .structure)
        ]
        /// ID of the reference data source. This is the ID that Amazon Kinesis Analytics assigns when you add the reference data source to your application using the AddApplicationReferenceDataSource operation.
        public let referenceId: String
        /// Provides the S3 bucket name, the object key name that contains the reference data. It also provides the Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application reference table.
        public let s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription
        /// The in-application table name created by the specific reference data source configuration.
        public let tableName: String
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
        public let referenceSchema: SourceSchema?

        public init(referenceId: String, s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription, tableName: String, referenceSchema: SourceSchema? = nil) {
            self.referenceId = referenceId
            self.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription
            self.tableName = tableName
            self.referenceSchema = referenceSchema
        }

        private enum CodingKeys: String, CodingKey {
            case referenceId = "ReferenceId"
            case s3ReferenceDataSourceDescription = "S3ReferenceDataSourceDescription"
            case tableName = "TableName"
            case referenceSchema = "ReferenceSchema"
        }
    }

    public struct InputSchemaUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordColumnUpdates", required: false, type: .list), 
            AWSShapeMember(label: "RecordFormatUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "RecordEncodingUpdate", required: false, type: .string)
        ]
        /// A list of RecordColumn objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream. 
        public let recordColumnUpdates: [RecordColumn]?
        /// Specifies the format of the records on the streaming source.
        public let recordFormatUpdate: RecordFormat?
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public let recordEncodingUpdate: String?

        public init(recordColumnUpdates: [RecordColumn]? = nil, recordFormatUpdate: RecordFormat? = nil, recordEncodingUpdate: String? = nil) {
            self.recordColumnUpdates = recordColumnUpdates
            self.recordFormatUpdate = recordFormatUpdate
            self.recordEncodingUpdate = recordEncodingUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case recordColumnUpdates = "RecordColumnUpdates"
            case recordFormatUpdate = "RecordFormatUpdate"
            case recordEncodingUpdate = "RecordEncodingUpdate"
        }
    }

    public struct DeleteApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        ///  You can use the DescribeApplication operation to get this value. 
        public let createTimestamp: TimeStamp
        /// Name of the Amazon Kinesis Analytics application to delete.
        public let applicationName: String

        public init(createTimestamp: TimeStamp, applicationName: String) {
            self.createTimestamp = createTimestamp
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case createTimestamp = "CreateTimestamp"
            case applicationName = "ApplicationName"
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSummary", required: true, type: .structure)
        ]
        /// In response to your CreateApplication request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.
        public let applicationSummary: ApplicationSummary

        public init(applicationSummary: ApplicationSummary) {
            self.applicationSummary = applicationSummary
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSummary = "ApplicationSummary"
        }
    }

    public struct DeleteApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The version ID of the Kinesis Analytics application.
        public let currentApplicationVersionId: Int64
        /// The CloudWatchLoggingOptionId of the CloudWatch logging option to delete. You can get the CloudWatchLoggingOptionId by using the DescribeApplication operation. 
        public let cloudWatchLoggingOptionId: String
        /// The Kinesis Analytics application name.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, cloudWatchLoggingOptionId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct AddApplicationOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Output", required: true, type: .structure)
        ]
        /// Version of the application to which you want to add the output configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// Name of the application to which you want to add the output configuration.
        public let applicationName: String
        /// An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, an Amazon Kinesis stream, an Amazon Kinesis Firehose delivery stream, or an AWS Lambda function), and record the formation to use when writing to the destination.
        public let output: Output

        public init(currentApplicationVersionId: Int64, applicationName: String, output: Output) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case output = "Output"
        }
    }

    public struct DeleteApplicationReferenceDataSourceResponse: AWSShape {

    }

    public struct KinesisStreamsInputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the input Amazon Kinesis stream to read.
        public let resourceARNUpdate: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARNUpdate: String?

        public init(resourceARNUpdate: String? = nil, roleARNUpdate: String? = nil) {
            self.resourceARNUpdate = resourceARNUpdate
            self.roleARNUpdate = roleARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
            case roleARNUpdate = "RoleARNUpdate"
        }
    }

    public struct CloudWatchLoggingOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string)
        ]
        /// IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role that is used must have the PutLogEvents policy action enabled.
        public let roleARN: String
        /// ARN of the CloudWatch log to receive application messages.
        public let logStreamARN: String

        public init(roleARN: String, logStreamARN: String) {
            self.roleARN = roleARN
            self.logStreamARN = logStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case logStreamARN = "LogStreamARN"
        }
    }

    public struct CSVMappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowDelimiter", required: true, type: .string), 
            AWSShapeMember(label: "RecordColumnDelimiter", required: true, type: .string)
        ]
        /// Row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
        public let recordRowDelimiter: String
        /// Column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
        public let recordColumnDelimiter: String

        public init(recordRowDelimiter: String, recordColumnDelimiter: String) {
            self.recordRowDelimiter = recordRowDelimiter
            self.recordColumnDelimiter = recordColumnDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowDelimiter = "RecordRowDelimiter"
            case recordColumnDelimiter = "RecordColumnDelimiter"
        }
    }

    public struct S3ReferenceDataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceRoleARN", required: true, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String
        /// Object key name containing reference data.
        public let fileKey: String
        /// ARN of the IAM role that the service can assume to read data on your behalf. This role must have permission for the s3:GetObject action on the object and trust policy that allows Amazon Kinesis Analytics service principal to assume this role.
        public let referenceRoleARN: String

        public init(bucketARN: String, fileKey: String, referenceRoleARN: String) {
            self.bucketARN = bucketARN
            self.fileKey = fileKey
            self.referenceRoleARN = referenceRoleARN
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
            case referenceRoleARN = "ReferenceRoleARN"
        }
    }

    public struct S3ReferenceDataSourceUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceRoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "FileKeyUpdate", required: false, type: .string), 
            AWSShapeMember(label: "BucketARNUpdate", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application.
        public let referenceRoleARNUpdate: String?
        /// Object key name.
        public let fileKeyUpdate: String?
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARNUpdate: String?

        public init(referenceRoleARNUpdate: String? = nil, fileKeyUpdate: String? = nil, bucketARNUpdate: String? = nil) {
            self.referenceRoleARNUpdate = referenceRoleARNUpdate
            self.fileKeyUpdate = fileKeyUpdate
            self.bucketARNUpdate = bucketARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case referenceRoleARNUpdate = "ReferenceRoleARNUpdate"
            case fileKeyUpdate = "FileKeyUpdate"
            case bucketARNUpdate = "BucketARNUpdate"
        }
    }

    public struct ApplicationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Status of the application.
        public let applicationStatus: ApplicationStatus
        /// ARN of the application.
        public let applicationARN: String
        /// Name of the application.
        public let applicationName: String

        public init(applicationStatus: ApplicationStatus, applicationARN: String, applicationName: String) {
            self.applicationStatus = applicationStatus
            self.applicationARN = applicationARN
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationStatus = "ApplicationStatus"
            case applicationARN = "ApplicationARN"
            case applicationName = "ApplicationName"
        }
    }

    public struct AddApplicationCloudWatchLoggingOptionResponse: AWSShape {

    }

    public struct DeleteApplicationCloudWatchLoggingOptionResponse: AWSShape {

    }

    public enum RecordFormatType: String, CustomStringConvertible, Codable {
        case json = "JSON"
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct AddApplicationReferenceDataSourceResponse: AWSShape {

    }

    public struct InputProcessingConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessorDescription", required: false, type: .structure)
        ]
        /// Provides configuration information about the associated InputLambdaProcessorDescription.
        public let inputLambdaProcessorDescription: InputLambdaProcessorDescription?

        public init(inputLambdaProcessorDescription: InputLambdaProcessorDescription? = nil) {
            self.inputLambdaProcessorDescription = inputLambdaProcessorDescription
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessorDescription = "InputLambdaProcessorDescription"
        }
    }

    public struct AddApplicationInputProcessingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: true, type: .structure)
        ]
        /// Name of the application to which you want to add the input processing configuration.
        public let applicationName: String
        /// Version of the application to which you want to add the input processing configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The ID of the input configuration to add the input processing configuration to. You can get a list of the input IDs for an application using the DescribeApplication operation.
        public let inputId: String
        /// The InputProcessingConfiguration to add to the application.
        public let inputProcessingConfiguration: InputProcessingConfiguration

        public init(applicationName: String, currentApplicationVersionId: Int64, inputId: String, inputProcessingConfiguration: InputProcessingConfiguration) {
            self.applicationName = applicationName
            self.currentApplicationVersionId = currentApplicationVersionId
            self.inputId = inputId
            self.inputProcessingConfiguration = inputProcessingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case inputId = "InputId"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
        }
    }

    public struct StopApplicationResponse: AWSShape {

    }

}