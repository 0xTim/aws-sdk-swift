// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Rekognition {

    public struct Landmark: Serializable, Initializable {
        /// x-coordinate from the top left of the landmark expressed as the ration of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. 
        var x: Float? = nil
        /// Type of the landmark.
        var type: String? = nil
        /// y-coordinate from the top left of the landmark expressed as the ration of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.
        var y: Float? = nil

        public init() {}

        public init(x: Float? = nil, type: String? = nil, y: Float? = nil) {
            self.x = x
            self.type = type
            self.y = y
        }

    }

    public struct SearchFacesByImageResponse: Serializable, Initializable {
        /// The level of confidence that the searchedFaceBoundingBox, contains a face.
        var searchedFaceConfidence: Float? = nil
        /// An array of faces that match the input face, along with the confidence in the match.
        var faceMatches: [FaceMatch]? = nil
        /// The bounding box around the face in the input image that Amazon Rekognition used for the search.
        var searchedFaceBoundingBox: BoundingBox? = nil

        public init() {}

        public init(searchedFaceConfidence: Float? = nil, faceMatches: [FaceMatch]? = nil, searchedFaceBoundingBox: BoundingBox? = nil) {
            self.searchedFaceConfidence = searchedFaceConfidence
            self.faceMatches = faceMatches
            self.searchedFaceBoundingBox = searchedFaceBoundingBox
        }

    }

    public struct DeleteCollectionResponse: Serializable, Initializable {
        /// HTTP status code that indicates the result of the operation.
        var statusCode: Int32? = nil

        public init() {}

        public init(statusCode: Int32? = nil) {
            self.statusCode = statusCode
        }

    }

    public struct ListCollectionsResponse: Serializable, Initializable {
        /// An array of collection IDs.
        var collectionIds: [String]? = nil
        /// If the result is truncated, the response provides a NextToken that you can use in the subsequent request to fetch the next set of collection IDs.
        var nextToken: String? = nil

        public init() {}

        public init(collectionIds: [String]? = nil, nextToken: String? = nil) {
            self.collectionIds = collectionIds
            self.nextToken = nextToken
        }

    }

    public struct Emotion: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Type of emotion detected.
        var type: String? = nil

        public init() {}

        public init(confidence: Float? = nil, type: String? = nil) {
            self.confidence = confidence
            self.type = type
        }

    }

    public struct DeleteFacesRequest: Serializable, Initializable {
        /// An array of face IDs to delete.
        var faceIds: [String] = []
        /// Collection from which to remove the specific faces.
        var collectionId: String = ""

        public init() {}

        public init(faceIds: [String], collectionId: String) {
            self.faceIds = faceIds
            self.collectionId = collectionId
        }

    }

    public struct DeleteFacesResponse: Serializable, Initializable {
        /// An array of strings (face IDs) of the faces that were deleted.
        var deletedFaces: [String]? = nil

        public init() {}

        public init(deletedFaces: [String]? = nil) {
            self.deletedFaces = deletedFaces
        }

    }

    public struct BoundingBox: Serializable, Initializable {
        /// Height of the bounding box as a ratio of the overall image height.
        var height: Float? = nil
        /// Top coordinate of the bounding box as a ratio of overall image height.
        var top: Float? = nil
        /// Left coordinate of the bounding box as a ratio of overall image width.
        var left: Float? = nil
        /// Width of the bounding box as a ratio of the overall image width.
        var width: Float? = nil

        public init() {}

        public init(height: Float? = nil, top: Float? = nil, left: Float? = nil, width: Float? = nil) {
            self.height = height
            self.top = top
            self.left = left
            self.width = width
        }

    }

    public struct Pose: Serializable, Initializable {
        /// Value representing the face rotation on the yaw axis.
        var yaw: Float? = nil
        /// Value representing the face rotation on the roll axis.
        var roll: Float? = nil
        /// Value representing the face rotation on the pitch axis.
        var pitch: Float? = nil

        public init() {}

        public init(yaw: Float? = nil, roll: Float? = nil, pitch: Float? = nil) {
            self.yaw = yaw
            self.roll = roll
            self.pitch = pitch
        }

    }

    public struct ComparedFace: Serializable, Initializable {
        /// Level of confidence that what the bounding box contains is a face.
        var confidence: Float? = nil
        var boundingBox: BoundingBox? = nil

        public init() {}

        public init(confidence: Float? = nil, boundingBox: BoundingBox? = nil) {
            self.confidence = confidence
            self.boundingBox = boundingBox
        }

    }

    public struct SearchFacesByImageRequest: Serializable, Initializable {
        var image: Image = Image()
        /// (Optional) Specifies the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%.
        var faceMatchThreshold: Float? = nil
        /// Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
        var maxFaces: Int32? = nil
        /// ID of the collection to search.
        var collectionId: String = ""

        public init() {}

        public init(image: Image, faceMatchThreshold: Float? = nil, maxFaces: Int32? = nil, collectionId: String) {
            self.image = image
            self.faceMatchThreshold = faceMatchThreshold
            self.maxFaces = maxFaces
            self.collectionId = collectionId
        }

    }

    public struct FaceMatch: Serializable, Initializable {
        var face: Face? = nil
        /// Confidence in the match of this face with the input face.
        var similarity: Float? = nil

        public init() {}

        public init(face: Face? = nil, similarity: Float? = nil) {
            self.face = face
            self.similarity = similarity
        }

    }

    public struct Gender: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Gender of the face.
        var value: String? = nil

        public init() {}

        public init(confidence: Float? = nil, value: String? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct Smile: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the face is smiling or not.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct S3Object: Serializable, Initializable {
        /// Name of the S3 bucket.
        var bucket: String? = nil
        /// S3 object key name.
        var name: String? = nil
        /// If the bucket is versioning enabled, you can specify the object version. 
        var version: String? = nil

        public init() {}

        public init(bucket: String? = nil, name: String? = nil, version: String? = nil) {
            self.bucket = bucket
            self.name = name
            self.version = version
        }

    }

    public struct DetectFacesResponse: Serializable, Initializable {
        /// The algorithm detects the image orientation. If it detects that the image was rotated, it returns the degrees of rotation. If your application is displaying the image, you can use this value to adjust the orientation.  For example, if the service detects that the input image was rotated by 90 degrees, it corrects orientation, performs face detection, and then returns the faces. That is, the bounding box coordinates in the response are based on the corrected orientation.   If the source image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be nil. 
        var orientationCorrection: String? = nil
        /// Details of each face found in the image. 
        var faceDetails: [FaceDetail]? = nil

        public init() {}

        public init(orientationCorrection: String? = nil, faceDetails: [FaceDetail]? = nil) {
            self.orientationCorrection = orientationCorrection
            self.faceDetails = faceDetails
        }

    }

    public struct IndexFacesResponse: Serializable, Initializable {
        /// The algorithm detects the image orientation. If it detects that the image was rotated, it returns the degree of rotation. You can use this value to correct the orientation and also appropriately analyze the bounding box coordinates that are returned.   If the source image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be nil. 
        var orientationCorrection: String? = nil
        /// An array of faces detected and added to the collection. For more information, see howitworks-index-faces. 
        var faceRecords: [FaceRecord]? = nil

        public init() {}

        public init(orientationCorrection: String? = nil, faceRecords: [FaceRecord]? = nil) {
            self.orientationCorrection = orientationCorrection
            self.faceRecords = faceRecords
        }

    }

    public struct Label: Serializable, Initializable {
        /// Level of confidence.
        var confidence: Float? = nil
        /// The name (label) of the object.
        var name: String? = nil

        public init() {}

        public init(confidence: Float? = nil, name: String? = nil) {
            self.confidence = confidence
            self.name = name
        }

    }

    public struct FaceDetail: Serializable, Initializable {
        /// Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.
        var sunglasses: Sunglasses? = nil
        /// Gender of the face and the confidence level in the determination.
        var gender: Gender? = nil
        /// Indicates whether or not the eyes on the face are open, and the confidence level in the determination.
        var eyesOpen: EyeOpen? = nil
        /// Indicates whether or not the face is smiling, and the confidence level in the determination.
        var smile: Smile? = nil
        /// Indicates whether or not the mouth on the face is open, and the confidence level in the determination.
        var mouthOpen: MouthOpen? = nil
        /// Bounding box of the face.
        var boundingBox: BoundingBox? = nil
        /// Indicates the pose of the face as determined by pitch, roll, and the yaw.
        var pose: Pose? = nil
        /// The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.
        var ageRange: AgeRange? = nil
        /// Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.
        var eyeglasses: Eyeglasses? = nil
        /// Indicates the location of the landmark on the face.
        var landmarks: [Landmark]? = nil
        /// Indicates whether or not the face has a beard, and the confidence level in the determination.
        var beard: Beard? = nil
        /// Identifies image brightness and sharpness.
        var quality: ImageQuality? = nil
        /// Confidence level that the bounding box contains a face (and not a different object such as a tree).
        var confidence: Float? = nil
        /// Indicates whether or not the face has a mustache, and the confidence level in the determination.
        var mustache: Mustache? = nil
        /// The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. 
        var emotions: [Emotion]? = nil

        public init() {}

        public init(sunglasses: Sunglasses? = nil, gender: Gender? = nil, eyesOpen: EyeOpen? = nil, smile: Smile? = nil, mouthOpen: MouthOpen? = nil, boundingBox: BoundingBox? = nil, pose: Pose? = nil, ageRange: AgeRange? = nil, eyeglasses: Eyeglasses? = nil, landmarks: [Landmark]? = nil, beard: Beard? = nil, quality: ImageQuality? = nil, confidence: Float? = nil, mustache: Mustache? = nil, emotions: [Emotion]? = nil) {
            self.sunglasses = sunglasses
            self.gender = gender
            self.eyesOpen = eyesOpen
            self.smile = smile
            self.mouthOpen = mouthOpen
            self.boundingBox = boundingBox
            self.pose = pose
            self.ageRange = ageRange
            self.eyeglasses = eyeglasses
            self.landmarks = landmarks
            self.beard = beard
            self.quality = quality
            self.confidence = confidence
            self.mustache = mustache
            self.emotions = emotions
        }

    }

    public struct CompareFacesMatch: Serializable, Initializable {
        /// Provides face metadata (bounding box and confidence that the bounding box actually contains a face).
        var face: ComparedFace? = nil
        /// Level of confidence that the faces match.
        var similarity: Float? = nil

        public init() {}

        public init(face: ComparedFace? = nil, similarity: Float? = nil) {
            self.face = face
            self.similarity = similarity
        }

    }

    public struct SearchFacesResponse: Serializable, Initializable {
        /// An array of faces that matched the input face, along with the confidence in the match.
        var faceMatches: [FaceMatch]? = nil
        /// ID of the face that was searched for matches in a collection.
        var searchedFaceId: String? = nil

        public init() {}

        public init(faceMatches: [FaceMatch]? = nil, searchedFaceId: String? = nil) {
            self.faceMatches = faceMatches
            self.searchedFaceId = searchedFaceId
        }

    }

    public struct SearchFacesRequest: Serializable, Initializable {
        /// Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%.
        var faceMatchThreshold: Float? = nil
        /// Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
        var maxFaces: Int32? = nil
        /// ID of the collection the face belongs to.
        var collectionId: String = ""
        /// ID of a face to find matches for in the collection.
        var faceId: String = ""

        public init() {}

        public init(faceMatchThreshold: Float? = nil, maxFaces: Int32? = nil, collectionId: String, faceId: String) {
            self.faceMatchThreshold = faceMatchThreshold
            self.maxFaces = maxFaces
            self.collectionId = collectionId
            self.faceId = faceId
        }

    }

    public struct Mustache: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the face has mustache or not.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct ListCollectionsRequest: Serializable, Initializable {
        /// Pagination token from the previous response.
        var nextToken: String? = nil
        /// Maximum number of collection IDs to return.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct EyeOpen: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the eyes on the face are open.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct DetectLabelsRequest: Serializable, Initializable {
        /// The input image. You can provide a blob of image bytes or an S3 object.
        var image: Image = Image()
        /// Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels. 
        var maxLabels: Int32? = nil
        /// Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with confidence lower than this specified value. If minConfidence is not specified, the operation returns labels with a confidence values greater than or equal to 50 percent.
        var minConfidence: Float? = nil

        public init() {}

        public init(image: Image, maxLabels: Int32? = nil, minConfidence: Float? = nil) {
            self.image = image
            self.maxLabels = maxLabels
            self.minConfidence = minConfidence
        }

    }

    public struct CreateCollectionResponse: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources. 
        var collectionArn: String? = nil
        /// HTTP status code indicating the result of the operation.
        var statusCode: Int32? = nil

        public init() {}

        public init(collectionArn: String? = nil, statusCode: Int32? = nil) {
            self.collectionArn = collectionArn
            self.statusCode = statusCode
        }

    }

    public struct DetectFacesRequest: Serializable, Initializable {
        /// The image in which you want to detect faces. You can specify a blob or an S3 object. 
        var image: Image = Image()
        /// A list of facial attributes you would like to be returned. By default, the API returns subset of facial attributes.  For example, you can specify the value as, ["ALL"] or ["DEFAULT"]. If you provide both, ["ALL", "DEFAULT"], the service uses a logical AND operator to determine which attributes to return (in this case, it is all attributes). If you specify all attributes, Amazon Rekognition performs additional detection. 
        var attributes: [String]? = nil

        public init() {}

        public init(image: Image, attributes: [String]? = nil) {
            self.image = image
            self.attributes = attributes
        }

    }

    public struct FaceRecord: Serializable, Initializable {
        var face: Face? = nil
        var faceDetail: FaceDetail? = nil

        public init() {}

        public init(face: Face? = nil, faceDetail: FaceDetail? = nil) {
            self.face = face
            self.faceDetail = faceDetail
        }

    }

    public struct Beard: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the face has beard or not.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct Face: Serializable, Initializable {
        var boundingBox: BoundingBox? = nil
        /// Identifier that you assign to all the faces in the input image.
        var externalImageId: String? = nil
        /// Confidence level that the bounding box contains a face (and not a different object such as a tree).
        var confidence: Float? = nil
        /// Unique identifier that Amazon Rekognition assigns to the face.
        var faceId: String? = nil
        /// Unique identifier that Amazon Rekognition assigns to the source image.
        var imageId: String? = nil

        public init() {}

        public init(boundingBox: BoundingBox? = nil, externalImageId: String? = nil, confidence: Float? = nil, faceId: String? = nil, imageId: String? = nil) {
            self.boundingBox = boundingBox
            self.externalImageId = externalImageId
            self.confidence = confidence
            self.faceId = faceId
            self.imageId = imageId
        }

    }

    public struct CompareFacesRequest: Serializable, Initializable {
        /// Source image either as bytes or an S3 object
        var sourceImage: Image = Image()
        /// Target image either as bytes or an S3 object
        var targetImage: Image = Image()
        /// The minimum level of confidence in the match you want included in the result.
        var similarityThreshold: Float? = nil

        public init() {}

        public init(sourceImage: Image, targetImage: Image, similarityThreshold: Float? = nil) {
            self.sourceImage = sourceImage
            self.targetImage = targetImage
            self.similarityThreshold = similarityThreshold
        }

    }

    public struct Sunglasses: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the face is wearing sunglasses or not.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct MouthOpen: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the mouth on the face is open or not.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct Image: Serializable, Initializable {
        /// Blob of image bytes up to 5 MBs.
        var bytes: Data? = nil
        /// Identifies an S3 object as the image source.
        var s3Object: S3Object? = nil

        public init() {}

        public init(bytes: Data? = nil, s3Object: S3Object? = nil) {
            self.bytes = bytes
            self.s3Object = s3Object
        }

    }

    public struct CompareFacesResponse: Serializable, Initializable {
        /// Provides an array of CompareFacesMatch objects. Each object provides the bounding box, confidence that the bounding box contains a face, and the similarity between the face in the bounding box and the face in the source image.
        var faceMatches: [CompareFacesMatch]? = nil
        /// The face from the source image that was used for comparison.
        var sourceImageFace: ComparedSourceImageFace? = nil

        public init() {}

        public init(faceMatches: [CompareFacesMatch]? = nil, sourceImageFace: ComparedSourceImageFace? = nil) {
            self.faceMatches = faceMatches
            self.sourceImageFace = sourceImageFace
        }

    }

    public struct AgeRange: Serializable, Initializable {
        /// The highest estimated age.
        var high: Int32? = nil
        /// The lowest estimated age.
        var low: Int32? = nil

        public init() {}

        public init(high: Int32? = nil, low: Int32? = nil) {
            self.high = high
            self.low = low
        }

    }

    public struct Eyeglasses: Serializable, Initializable {
        /// Level of confidence in the determination.
        var confidence: Float? = nil
        /// Boolean value that indicates whether the face is wearing eye glasses or not.
        var value: Bool? = nil

        public init() {}

        public init(confidence: Float? = nil, value: Bool? = nil) {
            self.confidence = confidence
            self.value = value
        }

    }

    public struct DeleteCollectionRequest: Serializable, Initializable {
        /// ID of the collection to delete.
        var collectionId: String = ""

        public init() {}

        public init(collectionId: String) {
            self.collectionId = collectionId
        }

    }

    public struct CreateCollectionRequest: Serializable, Initializable {
        /// ID for the collection that you are creating.
        var collectionId: String = ""

        public init() {}

        public init(collectionId: String) {
            self.collectionId = collectionId
        }

    }

    public struct ListFacesRequest: Serializable, Initializable {
        /// If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.
        var nextToken: String? = nil
        /// ID of the collection from which to list the faces.
        var collectionId: String = ""
        /// Maximum number of faces to return.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, collectionId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.collectionId = collectionId
            self.maxResults = maxResults
        }

    }

    public struct ImageQuality: Serializable, Initializable {
        /// Value representing sharpness of the face.
        var sharpness: Float? = nil
        /// Value representing brightness of the face. The service returns a value between 0 and 1 (inclusive).
        var brightness: Float? = nil

        public init() {}

        public init(sharpness: Float? = nil, brightness: Float? = nil) {
            self.sharpness = sharpness
            self.brightness = brightness
        }

    }

    public struct DetectLabelsResponse: Serializable, Initializable {
        ///  Amazon Rekognition returns the orientation of the input image that was detected (clockwise direction). If your application displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects that the input image was rotated (for example, by 90 degrees), it first corrects the orientation before detecting the labels.   If the source image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be nil. 
        var orientationCorrection: String? = nil
        /// An array of labels for the real-world objects detected. 
        var labels: [Label]? = nil

        public init() {}

        public init(orientationCorrection: String? = nil, labels: [Label]? = nil) {
            self.orientationCorrection = orientationCorrection
            self.labels = labels
        }

    }

    public struct ListFacesResponse: Serializable, Initializable {
        /// An array of Face objects. 
        var faces: [Face]? = nil
        /// If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.
        var nextToken: String? = nil

        public init() {}

        public init(faces: [Face]? = nil, nextToken: String? = nil) {
            self.faces = faces
            self.nextToken = nextToken
        }

    }

    public struct IndexFacesRequest: Serializable, Initializable {
        var image: Image = Image()
        /// ID you want to assign to all the faces detected in the image.
        var externalImageId: String? = nil
        /// ID of an existing collection to which you want to add the faces that are detected in the input images.
        var collectionId: String = ""
        /// (Optional) Returns detailed attributes of indexed faces. By default, the operation returns a subset of the facial attributes.  For example, you can specify the value as, ["ALL"] or ["DEFAULT"]. If you provide both, ["ALL", "DEFAULT"], Amazon Rekognition uses the logical AND operator to determine which attributes to return (in this case, it is all attributes). If you specify all attributes, the service performs additional detection, in addition to the default. 
        var detectionAttributes: [String]? = nil

        public init() {}

        public init(image: Image, externalImageId: String? = nil, collectionId: String, detectionAttributes: [String]? = nil) {
            self.image = image
            self.externalImageId = externalImageId
            self.collectionId = collectionId
            self.detectionAttributes = detectionAttributes
        }

    }

    public struct ComparedSourceImageFace: Serializable, Initializable {
        /// Confidence level that the selected bounding box contains a face.
        var confidence: Float? = nil
        var boundingBox: BoundingBox? = nil

        public init() {}

        public init(confidence: Float? = nil, boundingBox: BoundingBox? = nil) {
            self.confidence = confidence
            self.boundingBox = boundingBox
        }

    }

}