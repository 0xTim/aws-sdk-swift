// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Polly {

    public struct Lexicon: Serializable, Initializable {
        /// Lexicon content in string format. The content of a lexicon must be in PLS format.
        var content: String? = nil
        /// Name of the lexicon.
        var name: String? = nil

        public init() {}

        public init(content: String? = nil, name: String? = nil) {
            self.content = content
            self.name = name
        }

    }

    public struct DescribeVoicesInput: Serializable, Initializable {
        ///  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned. 
        var languageCode: String? = nil
        /// An opaque pagination token returned from the previous DescribeVoices operation. If present, this indicates where to continue the listing.
        var nextToken: String? = nil

        public init() {}

        public init(languageCode: String? = nil, nextToken: String? = nil) {
            self.languageCode = languageCode
            self.nextToken = nextToken
        }

    }

    public struct SynthesizeSpeechOutput: Serializable, Initializable {
        ///  Specifies the type audio stream. This should reflect the OutputFormat parameter in your request.     If you request mp3 as the OutputFormat, the ContentType returned is audio/mpeg.     If you request ogg_vorbis as the OutputFormat, the ContentType returned is audio/ogg.     If you request pcm as the OutputFormat, the ContentType returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.     
        var contentType: String? = nil
        ///  Stream containing the synthesized speech. 
        var audioStream: Data? = nil
        /// Number of characters synthesized.
        var requestCharacters: Int32? = nil

        public init() {}

        public init(contentType: String? = nil, audioStream: Data? = nil, requestCharacters: Int32? = nil) {
            self.contentType = contentType
            self.audioStream = audioStream
            self.requestCharacters = requestCharacters
        }

    }

    public struct PutLexiconInput: Serializable, Initializable {
        /// Content of the PLS lexicon as string data.
        var content: String = ""
        /// Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long. 
        var name: String = ""

        public init() {}

        public init(content: String, name: String) {
            self.content = content
            self.name = name
        }

    }

    public struct GetLexiconOutput: Serializable, Initializable {
        /// Lexicon object that provides name and the string content of the lexicon. 
        var lexicon: Lexicon? = nil
        /// Metadata of the lexicon, including phonetic alphabetic used, language code, lexicon ARN, number of lexemes defined in the lexicon, and size of lexicon in bytes.
        var lexiconAttributes: LexiconAttributes? = nil

        public init() {}

        public init(lexicon: Lexicon? = nil, lexiconAttributes: LexiconAttributes? = nil) {
            self.lexicon = lexicon
            self.lexiconAttributes = lexiconAttributes
        }

    }

    public struct ListLexiconsOutput: Serializable, Initializable {
        /// The pagination token to use in the next request to continue the listing of lexicons. NextToken is returned only if the response is truncated.
        var nextToken: String? = nil
        /// A list of lexicon names and attributes.
        var lexicons: [LexiconDescription]? = nil

        public init() {}

        public init(nextToken: String? = nil, lexicons: [LexiconDescription]? = nil) {
            self.nextToken = nextToken
            self.lexicons = lexicons
        }

    }

    public struct GetLexiconInput: Serializable, Initializable {
        /// Name of the lexicon.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct DeleteLexiconOutput: Serializable, Initializable {

        public init() {}

    }

    public struct SynthesizeSpeechInput: Serializable, Initializable {
        ///  The audio format in which the resulting stream will be encoded. 
        var outputFormat: String = ""
        ///  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the DescribeVoices operation. 
        var voiceId: String = ""
        /// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see PutLexicon.
        var lexiconNames: [String]? = nil
        ///  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see Using SSML.
        var textType: String? = nil
        ///  Input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text. 
        var text: String = ""
        ///  The audio frequency specified in Hz.  The valid values for mp3 and ogg_vorbis are "8000", "16000", and "22050". The default value is "22050".   Valid values for pcm are "8000" and "16000" The default value is "16000". 
        var sampleRate: String? = nil

        public init() {}

        public init(outputFormat: String, voiceId: String, lexiconNames: [String]? = nil, textType: String? = nil, text: String, sampleRate: String? = nil) {
            self.outputFormat = outputFormat
            self.voiceId = voiceId
            self.lexiconNames = lexiconNames
            self.textType = textType
            self.text = text
            self.sampleRate = sampleRate
        }

    }

    public struct DescribeVoicesOutput: Serializable, Initializable {
        /// A list of voices with their properties.
        var voices: [Voice]? = nil
        /// The pagination token to use in the next request to continue the listing of voices. NextToken is returned only if the response is truncated.
        var nextToken: String? = nil

        public init() {}

        public init(voices: [Voice]? = nil, nextToken: String? = nil) {
            self.voices = voices
            self.nextToken = nextToken
        }

    }

    public struct ListLexiconsInput: Serializable, Initializable {
        /// An opaque pagination token returned from previous ListLexicons operation. If present, indicates where to continue the list of lexicons.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct LexiconAttributes: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the lexicon.
        var lexiconArn: String? = nil
        /// Date lexicon was last modified (a timestamp value).
        var lastModified: Date? = nil
        /// Number of lexemes in the lexicon.
        var lexemesCount: Int32? = nil
        /// Language code that the lexicon applies to. A lexicon with a language code such as "en" would be applied to all English languages (en-GB, en-US, en-AUS, en-WLS, and so on.
        var languageCode: String? = nil
        /// Phonetic alphabet used in the lexicon. Valid values are ipa and x-sampa.
        var alphabet: String? = nil
        /// Total size of the lexicon, in characters.
        var size: Int32? = nil

        public init() {}

        public init(lexiconArn: String? = nil, lastModified: Date? = nil, lexemesCount: Int32? = nil, languageCode: String? = nil, alphabet: String? = nil, size: Int32? = nil) {
            self.lexiconArn = lexiconArn
            self.lastModified = lastModified
            self.lexemesCount = lexemesCount
            self.languageCode = languageCode
            self.alphabet = alphabet
            self.size = size
        }

    }

    public struct LexiconDescription: Serializable, Initializable {
        /// Name of the lexicon.
        var name: String? = nil
        /// Provides lexicon metadata.
        var attributes: LexiconAttributes? = nil

        public init() {}

        public init(name: String? = nil, attributes: LexiconAttributes? = nil) {
            self.name = name
            self.attributes = attributes
        }

    }

    public struct PutLexiconOutput: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteLexiconInput: Serializable, Initializable {
        /// The name of the lexicon to delete. Must be an existing lexicon in the region.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct Voice: Serializable, Initializable {
        /// Human readable name of the language in English.
        var languageName: String? = nil
        /// Language code of the voice.
        var languageCode: String? = nil
        /// Name of the voice (for example, Salli, Kendra, etc.). This provides a human readable voice name that you might display in your application.
        var name: String? = nil
        /// Gender of the voice.
        var gender: String? = nil
        /// Amazon Polly assigned voice ID. This is the ID that you specify when calling the SynthesizeSpeech operation.
        var id: String? = nil

        public init() {}

        public init(languageName: String? = nil, languageCode: String? = nil, name: String? = nil, gender: String? = nil, id: String? = nil) {
            self.languageName = languageName
            self.languageCode = languageCode
            self.name = name
            self.gender = gender
            self.id = id
        }

    }

}