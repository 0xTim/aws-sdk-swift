// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Polly {

    public struct Lexicon: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// Lexicon content in string format. The content of a lexicon must be in PLS format.
        public let content: String?
        /// Name of the lexicon.
        public let name: String?

        public init(content: String? = nil, name: String? = nil) {
            self.content = content
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case name = "Name"
        }
    }

    public struct DescribeVoicesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", location: .querystring(locationName: "LanguageCode"), required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        ///  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned. 
        public let languageCode: LanguageCode?
        /// An opaque pagination token returned from the previous DescribeVoices operation. If present, this indicates where to continue the listing.
        public let nextToken: String?

        public init(languageCode: LanguageCode? = nil, nextToken: String? = nil) {
            self.languageCode = languageCode
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case nextToken = "NextToken"
        }
    }

    public enum VoiceId: String, CustomStringConvertible, Codable {
        case geraint = "Geraint"
        case gwyneth = "Gwyneth"
        case mads = "Mads"
        case naja = "Naja"
        case hans = "Hans"
        case marlene = "Marlene"
        case nicole = "Nicole"
        case russell = "Russell"
        case amy = "Amy"
        case brian = "Brian"
        case emma = "Emma"
        case raveena = "Raveena"
        case ivy = "Ivy"
        case joanna = "Joanna"
        case joey = "Joey"
        case justin = "Justin"
        case kendra = "Kendra"
        case kimberly = "Kimberly"
        case salli = "Salli"
        case conchita = "Conchita"
        case enrique = "Enrique"
        case miguel = "Miguel"
        case penelope = "Penelope"
        case chantal = "Chantal"
        case celine = "Celine"
        case mathieu = "Mathieu"
        case dora = "Dora"
        case karl = "Karl"
        case carla = "Carla"
        case giorgio = "Giorgio"
        case mizuki = "Mizuki"
        case liv = "Liv"
        case lotte = "Lotte"
        case ruben = "Ruben"
        case ewa = "Ewa"
        case jacek = "Jacek"
        case jan = "Jan"
        case maja = "Maja"
        case ricardo = "Ricardo"
        case vitoria = "Vitoria"
        case cristiano = "Cristiano"
        case ines = "Ines"
        case carmen = "Carmen"
        case maxim = "Maxim"
        case tatyana = "Tatyana"
        case astrid = "Astrid"
        case filiz = "Filiz"
        case vicki = "Vicki"
        public var description: String { return self.rawValue }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable {
        case cy_gb = "cy-GB"
        case da_dk = "da-DK"
        case de_de = "de-DE"
        case en_au = "en-AU"
        case en_gb = "en-GB"
        case en_gb_wls = "en-GB-WLS"
        case en_in = "en-IN"
        case en_us = "en-US"
        case es_es = "es-ES"
        case es_us = "es-US"
        case fr_ca = "fr-CA"
        case fr_fr = "fr-FR"
        case is_is = "is-IS"
        case it_it = "it-IT"
        case ja_jp = "ja-JP"
        case nb_no = "nb-NO"
        case nl_nl = "nl-NL"
        case pl_pl = "pl-PL"
        case pt_br = "pt-BR"
        case pt_pt = "pt-PT"
        case ro_ro = "ro-RO"
        case ru_ru = "ru-RU"
        case sv_se = "sv-SE"
        case tr_tr = "tr-TR"
        public var description: String { return self.rawValue }
    }

    public enum Gender: String, CustomStringConvertible, Codable {
        case female = "Female"
        case male = "Male"
        public var description: String { return self.rawValue }
    }

    public struct SynthesizeSpeechOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AudioStream"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "AudioStream", required: false, type: .blob), 
            AWSShapeMember(label: "RequestCharacters", location: .header(locationName: "x-amzn-RequestCharacters"), required: false, type: .integer)
        ]
        ///  Specifies the type audio stream. This should reflect the OutputFormat parameter in your request.     If you request mp3 as the OutputFormat, the ContentType returned is audio/mpeg.     If you request ogg_vorbis as the OutputFormat, the ContentType returned is audio/ogg.     If you request pcm as the OutputFormat, the ContentType returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.    If you request json as the OutputFormat, the ContentType returned is audio/json.    
        public let contentType: String?
        ///  Stream containing the synthesized speech. 
        public let audioStream: Data?
        /// Number of characters synthesized.
        public let requestCharacters: Int32?

        public init(contentType: String? = nil, audioStream: Data? = nil, requestCharacters: Int32? = nil) {
            self.contentType = contentType
            self.audioStream = audioStream
            self.requestCharacters = requestCharacters
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "Content-Type"
            case audioStream = "AudioStream"
            case requestCharacters = "x-amzn-RequestCharacters"
        }
    }

    public struct PutLexiconInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .uri(locationName: "LexiconName"), required: true, type: .string)
        ]
        /// Content of the PLS lexicon as string data.
        public let content: String
        /// Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long. 
        public let name: String

        public init(content: String, name: String) {
            self.content = content
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case name = "LexiconName"
        }
    }

    public struct GetLexiconOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lexicon", required: false, type: .structure), 
            AWSShapeMember(label: "LexiconAttributes", required: false, type: .structure)
        ]
        /// Lexicon object that provides name and the string content of the lexicon. 
        public let lexicon: Lexicon?
        /// Metadata of the lexicon, including phonetic alphabetic used, language code, lexicon ARN, number of lexemes defined in the lexicon, and size of lexicon in bytes.
        public let lexiconAttributes: LexiconAttributes?

        public init(lexicon: Lexicon? = nil, lexiconAttributes: LexiconAttributes? = nil) {
            self.lexicon = lexicon
            self.lexiconAttributes = lexiconAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case lexicon = "Lexicon"
            case lexiconAttributes = "LexiconAttributes"
        }
    }

    public enum OutputFormat: String, CustomStringConvertible, Codable {
        case json = "json"
        case mp3 = "mp3"
        case ogg_vorbis = "ogg_vorbis"
        case pcm = "pcm"
        public var description: String { return self.rawValue }
    }

    public struct ListLexiconsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Lexicons", required: false, type: .list)
        ]
        /// The pagination token to use in the next request to continue the listing of lexicons. NextToken is returned only if the response is truncated.
        public let nextToken: String?
        /// A list of lexicon names and attributes.
        public let lexicons: [LexiconDescription]?

        public init(nextToken: String? = nil, lexicons: [LexiconDescription]? = nil) {
            self.nextToken = nextToken
            self.lexicons = lexicons
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case lexicons = "Lexicons"
        }
    }

    public struct GetLexiconInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .uri(locationName: "LexiconName"), required: true, type: .string)
        ]
        /// Name of the lexicon.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "LexiconName"
        }
    }

    public struct DeleteLexiconOutput: AWSShape {
        /// The key for the payload

    }

    public enum SpeechMarkType: String, CustomStringConvertible, Codable {
        case sentence = "sentence"
        case ssml = "ssml"
        case viseme = "viseme"
        case word = "word"
        public var description: String { return self.rawValue }
    }

    public struct SynthesizeSpeechInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VoiceId", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "SampleRate", required: false, type: .string), 
            AWSShapeMember(label: "SpeechMarkTypes", required: false, type: .list), 
            AWSShapeMember(label: "OutputFormat", required: true, type: .enum), 
            AWSShapeMember(label: "TextType", required: false, type: .enum), 
            AWSShapeMember(label: "LexiconNames", required: false, type: .list)
        ]
        ///  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the DescribeVoices operation. 
        public let voiceId: VoiceId
        ///  Input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text. 
        public let text: String
        ///  The audio frequency specified in Hz.  The valid values for mp3 and ogg_vorbis are "8000", "16000", and "22050". The default value is "22050".   Valid values for pcm are "8000" and "16000" The default value is "16000". 
        public let sampleRate: String?
        /// The type of speech marks returned for the input text.
        public let speechMarkTypes: [SpeechMarkType]?
        ///  The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. 
        public let outputFormat: OutputFormat
        ///  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see Using SSML.
        public let textType: TextType?
        /// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see PutLexicon.
        public let lexiconNames: [String]?

        public init(voiceId: VoiceId, text: String, sampleRate: String? = nil, speechMarkTypes: [SpeechMarkType]? = nil, outputFormat: OutputFormat, textType: TextType? = nil, lexiconNames: [String]? = nil) {
            self.voiceId = voiceId
            self.text = text
            self.sampleRate = sampleRate
            self.speechMarkTypes = speechMarkTypes
            self.outputFormat = outputFormat
            self.textType = textType
            self.lexiconNames = lexiconNames
        }

        private enum CodingKeys: String, CodingKey {
            case voiceId = "VoiceId"
            case text = "Text"
            case sampleRate = "SampleRate"
            case speechMarkTypes = "SpeechMarkTypes"
            case outputFormat = "OutputFormat"
            case textType = "TextType"
            case lexiconNames = "LexiconNames"
        }
    }

    public struct DescribeVoicesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Voices", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of voices with their properties.
        public let voices: [Voice]?
        /// The pagination token to use in the next request to continue the listing of voices. NextToken is returned only if the response is truncated.
        public let nextToken: String?

        public init(voices: [Voice]? = nil, nextToken: String? = nil) {
            self.voices = voices
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case voices = "Voices"
            case nextToken = "NextToken"
        }
    }

    public struct ListLexiconsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        /// An opaque pagination token returned from previous ListLexicons operation. If present, indicates where to continue the list of lexicons.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct LexiconAttributes: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LexiconArn", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "LexemesCount", required: false, type: .integer), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "Alphabet", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// Amazon Resource Name (ARN) of the lexicon.
        public let lexiconArn: String?
        /// Date lexicon was last modified (a timestamp value).
        public let lastModified: Double?
        /// Number of lexemes in the lexicon.
        public let lexemesCount: Int32?
        /// Language code that the lexicon applies to. A lexicon with a language code such as "en" would be applied to all English languages (en-GB, en-US, en-AUS, en-WLS, and so on.
        public let languageCode: LanguageCode?
        /// Phonetic alphabet used in the lexicon. Valid values are ipa and x-sampa.
        public let alphabet: String?
        /// Total size of the lexicon, in characters.
        public let size: Int32?

        public init(lexiconArn: String? = nil, lastModified: Double? = nil, lexemesCount: Int32? = nil, languageCode: LanguageCode? = nil, alphabet: String? = nil, size: Int32? = nil) {
            self.lexiconArn = lexiconArn
            self.lastModified = lastModified
            self.lexemesCount = lexemesCount
            self.languageCode = languageCode
            self.alphabet = alphabet
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case lexiconArn = "LexiconArn"
            case lastModified = "LastModified"
            case lexemesCount = "LexemesCount"
            case languageCode = "LanguageCode"
            case alphabet = "Alphabet"
            case size = "Size"
        }
    }

    public struct LexiconDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .structure)
        ]
        /// Name of the lexicon.
        public let name: String?
        /// Provides lexicon metadata.
        public let attributes: LexiconAttributes?

        public init(name: String? = nil, attributes: LexiconAttributes? = nil) {
            self.name = name
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case attributes = "Attributes"
        }
    }

    public enum TextType: String, CustomStringConvertible, Codable {
        case ssml = "ssml"
        case text = "text"
        public var description: String { return self.rawValue }
    }

    public struct PutLexiconOutput: AWSShape {
        /// The key for the payload

    }

    public struct DeleteLexiconInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .uri(locationName: "LexiconName"), required: true, type: .string)
        ]
        /// The name of the lexicon to delete. Must be an existing lexicon in the region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "LexiconName"
        }
    }

    public struct Voice: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageName", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Gender", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .enum)
        ]
        /// Human readable name of the language in English.
        public let languageName: String?
        /// Language code of the voice.
        public let languageCode: LanguageCode?
        /// Name of the voice (for example, Salli, Kendra, etc.). This provides a human readable voice name that you might display in your application.
        public let name: String?
        /// Gender of the voice.
        public let gender: Gender?
        /// Amazon Polly assigned voice ID. This is the ID that you specify when calling the SynthesizeSpeech operation.
        public let id: VoiceId?

        public init(languageName: String? = nil, languageCode: LanguageCode? = nil, name: String? = nil, gender: Gender? = nil, id: VoiceId? = nil) {
            self.languageName = languageName
            self.languageCode = languageCode
            self.name = name
            self.gender = gender
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case languageName = "LanguageName"
            case languageCode = "LanguageCode"
            case name = "Name"
            case gender = "Gender"
            case id = "Id"
        }
    }

}