// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Elasticbeanstalk {

    public struct EventDescriptionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Events", required: false, type: .list)
        ]
        ///  If returned, this indicates that there are more results to obtain. Use this token in the next DescribeEvents call to get the next batch of events. 
        public let nextToken: String?
        ///  A list of EventDescription. 
        public let events: [EventDescription]?

        public init(nextToken: String? = nil, events: [EventDescription]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case events = "Events"
        }
    }

    public struct SolutionStackDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PermittedFileTypes", required: false, type: .list), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string)
        ]
        /// The permitted file types allowed for a solution stack.
        public let permittedFileTypes: [String]?
        /// The name of the solution stack.
        public let solutionStackName: String?

        public init(permittedFileTypes: [String]? = nil, solutionStackName: String? = nil) {
            self.permittedFileTypes = permittedFileTypes
            self.solutionStackName = solutionStackName
        }

        private enum CodingKeys: String, CodingKey {
            case permittedFileTypes = "PermittedFileTypes"
            case solutionStackName = "SolutionStackName"
        }
    }

    public struct RequestEnvironmentInfoMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "InfoType", required: true, type: .enum), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The type of information to request.
        public let infoType: EnvironmentInfoType
        /// The ID of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, infoType: EnvironmentInfoType, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.infoType = infoType
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case infoType = "InfoType"
            case environmentId = "EnvironmentId"
        }
    }

    public enum ValidationSeverity: String, CustomStringConvertible, Codable {
        case error = "error"
        case warning = "warning"
        public var description: String { return self.rawValue }
    }

    public struct PlatformProgrammingLanguage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The name of the programming language.
        public let name: String?
        /// The version of the programming language.
        public let version: String?

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
        }
    }

    public struct ManagedAction: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ActionDescription", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "WindowStartTime", required: false, type: .timestamp)
        ]
        /// The type of managed action.
        public let actionType: ActionType?
        /// The status of the managed action. If the action is Scheduled, you can apply it immediately with ApplyEnvironmentManagedAction.
        public let status: ActionStatus?
        /// A description of the managed action.
        public let actionDescription: String?
        /// A unique identifier for the managed action.
        public let actionId: String?
        /// The start time of the maintenance window in which the managed action will execute.
        public let windowStartTime: Double?

        public init(actionType: ActionType? = nil, status: ActionStatus? = nil, actionDescription: String? = nil, actionId: String? = nil, windowStartTime: Double? = nil) {
            self.actionType = actionType
            self.status = status
            self.actionDescription = actionDescription
            self.actionId = actionId
            self.windowStartTime = windowStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case status = "Status"
            case actionDescription = "ActionDescription"
            case actionId = "ActionId"
            case windowStartTime = "WindowStartTime"
        }
    }

    public struct RestartAppServerMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment to restart the server for.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to restart the server for.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct CPUUtilization: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Nice", required: false, type: .double), 
            AWSShapeMember(label: "IRQ", required: false, type: .double), 
            AWSShapeMember(label: "SoftIRQ", required: false, type: .double), 
            AWSShapeMember(label: "Idle", required: false, type: .double), 
            AWSShapeMember(label: "IOWait", required: false, type: .double), 
            AWSShapeMember(label: "System", required: false, type: .double), 
            AWSShapeMember(label: "User", required: false, type: .double)
        ]
        /// Percentage of time that the CPU has spent in the Nice state over the last 10 seconds.
        public let nice: Double?
        /// Percentage of time that the CPU has spent in the IRQ state over the last 10 seconds.
        public let iRQ: Double?
        /// Percentage of time that the CPU has spent in the SoftIRQ state over the last 10 seconds.
        public let softIRQ: Double?
        /// Percentage of time that the CPU has spent in the Idle state over the last 10 seconds.
        public let idle: Double?
        /// Percentage of time that the CPU has spent in the I/O Wait state over the last 10 seconds.
        public let iOWait: Double?
        /// Percentage of time that the CPU has spent in the System state over the last 10 seconds.
        public let system: Double?
        /// Percentage of time that the CPU has spent in the User state over the last 10 seconds.
        public let user: Double?

        public init(nice: Double? = nil, iRQ: Double? = nil, softIRQ: Double? = nil, idle: Double? = nil, iOWait: Double? = nil, system: Double? = nil, user: Double? = nil) {
            self.nice = nice
            self.iRQ = iRQ
            self.softIRQ = softIRQ
            self.idle = idle
            self.iOWait = iOWait
            self.system = system
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case nice = "Nice"
            case iRQ = "IRQ"
            case softIRQ = "SoftIRQ"
            case idle = "Idle"
            case iOWait = "IOWait"
            case system = "System"
            case user = "User"
        }
    }

    public struct DescribeEnvironmentManagedActionHistoryResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ManagedActionHistoryItems", required: false, type: .list)
        ]
        /// A pagination token that you pass to DescribeEnvironmentManagedActionHistory to get the next page of results.
        public let nextToken: String?
        /// A list of completed and failed managed actions.
        public let managedActionHistoryItems: [ManagedActionHistoryItem]?

        public init(nextToken: String? = nil, managedActionHistoryItems: [ManagedActionHistoryItem]? = nil) {
            self.nextToken = nextToken
            self.managedActionHistoryItems = managedActionHistoryItems
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case managedActionHistoryItems = "ManagedActionHistoryItems"
        }
    }

    public struct TerminateEnvironmentMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "TerminateResources", required: false, type: .boolean), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "ForceTerminate", required: false, type: .boolean)
        ]
        /// The name of the environment to terminate.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// Indicates whether the associated AWS resources should shut down when the environment is terminated:    true: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.    false: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.    For more information, see the  AWS Elastic Beanstalk User Guide.    Default: true   Valid Values: true | false 
        public let terminateResources: Bool?
        /// The ID of the environment to terminate.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?
        /// Terminates the target environment even if another environment in the same group is dependent on it.
        public let forceTerminate: Bool?

        public init(environmentName: String? = nil, terminateResources: Bool? = nil, environmentId: String? = nil, forceTerminate: Bool? = nil) {
            self.environmentName = environmentName
            self.terminateResources = terminateResources
            self.environmentId = environmentId
            self.forceTerminate = forceTerminate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case terminateResources = "TerminateResources"
            case environmentId = "EnvironmentId"
            case forceTerminate = "ForceTerminate"
        }
    }

    public struct CreateStorageLocationResultMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string)
        ]
        /// The name of the Amazon S3 bucket created.
        public let s3Bucket: String?

        public init(s3Bucket: String? = nil) {
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
        }
    }

    public struct StatusCodes: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status5xx", required: false, type: .integer), 
            AWSShapeMember(label: "Status3xx", required: false, type: .integer), 
            AWSShapeMember(label: "Status2xx", required: false, type: .integer), 
            AWSShapeMember(label: "Status4xx", required: false, type: .integer)
        ]
        /// The percentage of requests over the last 10 seconds that resulted in a 5xx (500, 501, etc.) status code.
        public let status5xx: Int32?
        /// The percentage of requests over the last 10 seconds that resulted in a 3xx (300, 301, etc.) status code.
        public let status3xx: Int32?
        /// The percentage of requests over the last 10 seconds that resulted in a 2xx (200, 201, etc.) status code.
        public let status2xx: Int32?
        /// The percentage of requests over the last 10 seconds that resulted in a 4xx (400, 401, etc.) status code.
        public let status4xx: Int32?

        public init(status5xx: Int32? = nil, status3xx: Int32? = nil, status2xx: Int32? = nil, status4xx: Int32? = nil) {
            self.status5xx = status5xx
            self.status3xx = status3xx
            self.status2xx = status2xx
            self.status4xx = status4xx
        }

        private enum CodingKeys: String, CodingKey {
            case status5xx = "Status5xx"
            case status3xx = "Status3xx"
            case status2xx = "Status2xx"
            case status4xx = "Status4xx"
        }
    }

    public struct ApplyEnvironmentManagedActionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "ActionDescription", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string)
        ]
        /// The type of managed action.
        public let actionType: ActionType?
        /// The status of the managed action.
        public let status: String?
        /// A description of the managed action.
        public let actionDescription: String?
        /// The action ID of the managed action.
        public let actionId: String?

        public init(actionType: ActionType? = nil, status: String? = nil, actionDescription: String? = nil, actionId: String? = nil) {
            self.actionType = actionType
            self.status = status
            self.actionDescription = actionDescription
            self.actionId = actionId
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case status = "Status"
            case actionDescription = "ActionDescription"
            case actionId = "ActionId"
        }
    }

    public struct EventDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Severity", required: false, type: .enum), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "EventDate", required: false, type: .timestamp)
        ]
        /// The severity level of this event.
        public let severity: EventSeverity?
        /// The name of the configuration associated with this event.
        public let templateName: String?
        /// The event message.
        public let message: String?
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// The release label for the application version associated with this event.
        public let versionLabel: String?
        /// The name of the environment associated with this event.
        public let environmentName: String?
        /// The application associated with the event.
        public let applicationName: String?
        /// The web service request ID for the activity of this event.
        public let requestId: String?
        /// The date when the event occurred.
        public let eventDate: Double?

        public init(severity: EventSeverity? = nil, templateName: String? = nil, message: String? = nil, platformArn: String? = nil, versionLabel: String? = nil, environmentName: String? = nil, applicationName: String? = nil, requestId: String? = nil, eventDate: Double? = nil) {
            self.severity = severity
            self.templateName = templateName
            self.message = message
            self.platformArn = platformArn
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.applicationName = applicationName
            self.requestId = requestId
            self.eventDate = eventDate
        }

        private enum CodingKeys: String, CodingKey {
            case severity = "Severity"
            case templateName = "TemplateName"
            case message = "Message"
            case platformArn = "PlatformArn"
            case versionLabel = "VersionLabel"
            case environmentName = "EnvironmentName"
            case applicationName = "ApplicationName"
            case requestId = "RequestId"
            case eventDate = "EventDate"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value of the tag.
        public let value: String?
        /// The key of the tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeEnvironmentManagedActionsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManagedActions", required: false, type: .list)
        ]
        /// A list of upcoming and in-progress managed actions.
        public let managedActions: [ManagedAction]?

        public init(managedActions: [ManagedAction]? = nil) {
            self.managedActions = managedActions
        }

        private enum CodingKeys: String, CodingKey {
            case managedActions = "ManagedActions"
        }
    }

    public struct PlatformSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperatingSystemVersion", required: false, type: .string), 
            AWSShapeMember(label: "PlatformStatus", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "SupportedAddonList", required: false, type: .list), 
            AWSShapeMember(label: "PlatformCategory", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystemName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformOwner", required: false, type: .string), 
            AWSShapeMember(label: "SupportedTierList", required: false, type: .list)
        ]
        /// The version of the operating system used by the platform.
        public let operatingSystemVersion: String?
        /// The status of the platform. You can create an environment from the platform once it is ready.
        public let platformStatus: PlatformStatus?
        /// The ARN of the platform.
        public let platformArn: String?
        /// The additions associated with the platform.
        public let supportedAddonList: [String]?
        /// The category of platform.
        public let platformCategory: String?
        /// The operating system used by the platform.
        public let operatingSystemName: String?
        /// The AWS account ID of the person who created the platform.
        public let platformOwner: String?
        /// The tiers in which the platform runs.
        public let supportedTierList: [String]?

        public init(operatingSystemVersion: String? = nil, platformStatus: PlatformStatus? = nil, platformArn: String? = nil, supportedAddonList: [String]? = nil, platformCategory: String? = nil, operatingSystemName: String? = nil, platformOwner: String? = nil, supportedTierList: [String]? = nil) {
            self.operatingSystemVersion = operatingSystemVersion
            self.platformStatus = platformStatus
            self.platformArn = platformArn
            self.supportedAddonList = supportedAddonList
            self.platformCategory = platformCategory
            self.operatingSystemName = operatingSystemName
            self.platformOwner = platformOwner
            self.supportedTierList = supportedTierList
        }

        private enum CodingKeys: String, CodingKey {
            case operatingSystemVersion = "OperatingSystemVersion"
            case platformStatus = "PlatformStatus"
            case platformArn = "PlatformArn"
            case supportedAddonList = "SupportedAddonList"
            case platformCategory = "PlatformCategory"
            case operatingSystemName = "OperatingSystemName"
            case platformOwner = "PlatformOwner"
            case supportedTierList = "SupportedTierList"
        }
    }

    public enum EventSeverity: String, CustomStringConvertible, Codable {
        case trace = "TRACE"
        case debug = "DEBUG"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEnvironmentManagedActionHistoryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", required: false, type: .integer), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The name of the target environment.
        public let environmentName: String?
        /// The maximum number of items to return for a single request.
        public let maxItems: Int32?
        /// The environment ID of the target environment.
        public let environmentId: String?
        /// The pagination token returned by a previous request.
        public let nextToken: String?

        public init(environmentName: String? = nil, maxItems: Int32? = nil, environmentId: String? = nil, nextToken: String? = nil) {
            self.environmentName = environmentName
            self.maxItems = maxItems
            self.environmentId = environmentId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case maxItems = "MaxItems"
            case environmentId = "EnvironmentId"
            case nextToken = "NextToken"
        }
    }

    public enum ComputeType: String, CustomStringConvertible, Codable {
        case build_general1_small = "BUILD_GENERAL1_SMALL"
        case build_general1_medium = "BUILD_GENERAL1_MEDIUM"
        case build_general1_large = "BUILD_GENERAL1_LARGE"
        public var description: String { return self.rawValue }
    }

    public struct PlatformFramework: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The name of the framework.
        public let name: String?
        /// The version of the framework.
        public let version: String?

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
        }
    }

    public struct DescribeEnvironmentHealthRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "AttributeNames", required: false, type: .list)
        ]
        /// Specify the environment by name. You must specify either this or an EnvironmentName, or both.
        public let environmentName: String?
        /// Specify the environment by ID. You must specify either this or an EnvironmentName, or both.
        public let environmentId: String?
        /// Specify the response elements to return. To retrieve all attributes, set to All. If no attribute names are specified, returns the name of the environment.
        public let attributeNames: [EnvironmentHealthAttribute]?

        public init(environmentName: String? = nil, environmentId: String? = nil, attributeNames: [EnvironmentHealthAttribute]? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.attributeNames = attributeNames
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
            case attributeNames = "AttributeNames"
        }
    }

    public struct Trigger: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the trigger.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The ID of the Amazon EC2 instance.
        public let id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "Severity", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time.
        public let startTime: Double?
        /// Specifies the maximum number of events that can be returned, beginning with the most recent event.
        public let maxRecords: Int32?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration.
        public let templateName: String?
        /// If specified, limits the events returned from this call to include only those with the specified severity or higher.
        public let severity: EventSeverity?
        /// The ARN of the version of the custom platform.
        public let platformArn: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version.
        public let versionLabel: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
        public let environmentName: String?
        ///  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the EndTime. 
        public let endTime: Double?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
        public let environmentId: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application.
        public let applicationName: String?
        /// If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID.
        public let requestId: String?
        /// Pagination token. If specified, the events return the next batch of results.
        public let nextToken: String?

        public init(startTime: Double? = nil, maxRecords: Int32? = nil, templateName: String? = nil, severity: EventSeverity? = nil, platformArn: String? = nil, versionLabel: String? = nil, environmentName: String? = nil, endTime: Double? = nil, environmentId: String? = nil, applicationName: String? = nil, requestId: String? = nil, nextToken: String? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.templateName = templateName
            self.severity = severity
            self.platformArn = platformArn
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.endTime = endTime
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.requestId = requestId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case maxRecords = "MaxRecords"
            case templateName = "TemplateName"
            case severity = "Severity"
            case platformArn = "PlatformArn"
            case versionLabel = "VersionLabel"
            case environmentName = "EnvironmentName"
            case endTime = "EndTime"
            case environmentId = "EnvironmentId"
            case applicationName = "ApplicationName"
            case requestId = "RequestId"
            case nextToken = "NextToken"
        }
    }

    public enum ConfigurationDeploymentStatus: String, CustomStringConvertible, Codable {
        case deployed = "deployed"
        case pending = "pending"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct CreateApplicationVersionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionLabel", required: true, type: .string), 
            AWSShapeMember(label: "AutoCreateApplication", required: false, type: .boolean), 
            AWSShapeMember(label: "BuildConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SourceBuildInformation", required: false, type: .structure), 
            AWSShapeMember(label: "Process", required: false, type: .boolean), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "SourceBundle", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A label identifying this version. Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let versionLabel: String
        /// Set to true to create an application with the specified name if it doesn't already exist.
        public let autoCreateApplication: Bool?
        /// Settings for an AWS CodeBuild build.
        public let buildConfiguration: BuildConfiguration?
        /// Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version.
        public let sourceBuildInformation: SourceBuildInformation?
        /// Preprocesses and validates the environment manifest and configuration files in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.
        public let process: Bool?
        ///  The name of the application. If no application is found with this name, and AutoCreateApplication is false, returns an InvalidParameterValue error. 
        public let applicationName: String
        /// The Amazon S3 bucket and key that identify the location of the source bundle for this version.  The Amazon S3 bucket must be in the same region as the environment.  Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with SourceBuildInformation), but not both. If neither SourceBundle nor SourceBuildInformation are provided, Elastic Beanstalk uses a sample application.
        public let sourceBundle: S3Location?
        /// Describes this version.
        public let description: String?

        public init(versionLabel: String, autoCreateApplication: Bool? = nil, buildConfiguration: BuildConfiguration? = nil, sourceBuildInformation: SourceBuildInformation? = nil, process: Bool? = nil, applicationName: String, sourceBundle: S3Location? = nil, description: String? = nil) {
            self.versionLabel = versionLabel
            self.autoCreateApplication = autoCreateApplication
            self.buildConfiguration = buildConfiguration
            self.sourceBuildInformation = sourceBuildInformation
            self.process = process
            self.applicationName = applicationName
            self.sourceBundle = sourceBundle
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case versionLabel = "VersionLabel"
            case autoCreateApplication = "AutoCreateApplication"
            case buildConfiguration = "BuildConfiguration"
            case sourceBuildInformation = "SourceBuildInformation"
            case process = "Process"
            case applicationName = "ApplicationName"
            case sourceBundle = "SourceBundle"
            case description = "Description"
        }
    }

    public struct SwapEnvironmentCNAMEsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationEnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "SourceEnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "SourceEnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationEnvironmentId", required: false, type: .string)
        ]
        /// The name of the destination environment.  Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentName with the DestinationEnvironmentName. 
        public let destinationEnvironmentName: String?
        /// The name of the source environment.  Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentName, you must specify the DestinationEnvironmentName. 
        public let sourceEnvironmentName: String?
        /// The ID of the source environment.  Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentId, you must specify the DestinationEnvironmentId. 
        public let sourceEnvironmentId: String?
        /// The ID of the destination environment.  Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentId with the DestinationEnvironmentId. 
        public let destinationEnvironmentId: String?

        public init(destinationEnvironmentName: String? = nil, sourceEnvironmentName: String? = nil, sourceEnvironmentId: String? = nil, destinationEnvironmentId: String? = nil) {
            self.destinationEnvironmentName = destinationEnvironmentName
            self.sourceEnvironmentName = sourceEnvironmentName
            self.sourceEnvironmentId = sourceEnvironmentId
            self.destinationEnvironmentId = destinationEnvironmentId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationEnvironmentName = "DestinationEnvironmentName"
            case sourceEnvironmentName = "SourceEnvironmentName"
            case sourceEnvironmentId = "SourceEnvironmentId"
            case destinationEnvironmentId = "DestinationEnvironmentId"
        }
    }

    public enum ConfigurationOptionValueType: String, CustomStringConvertible, Codable {
        case scalar = "Scalar"
        case list = "List"
        public var description: String { return self.rawValue }
    }

    public struct ComposeEnvironmentsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionLabels", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string)
        ]
        /// A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create.
        public let versionLabels: [String]?
        /// The name of the application to which the specified source bundles belong.
        public let applicationName: String?
        /// The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment's manifest ends with a + (plus) character. See Environment Manifest (env.yaml) for details.
        public let groupName: String?

        public init(versionLabels: [String]? = nil, applicationName: String? = nil, groupName: String? = nil) {
            self.versionLabels = versionLabels
            self.applicationName = applicationName
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case versionLabels = "VersionLabels"
            case applicationName = "ApplicationName"
            case groupName = "GroupName"
        }
    }

    public struct EnvironmentResourcesDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancer", required: false, type: .structure)
        ]
        /// Describes the LoadBalancer.
        public let loadBalancer: LoadBalancerDescription?

        public init(loadBalancer: LoadBalancerDescription? = nil) {
            self.loadBalancer = loadBalancer
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancer = "LoadBalancer"
        }
    }

    public struct CheckDNSAvailabilityMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CNAMEPrefix", required: true, type: .string)
        ]
        /// The prefix used when this CNAME is reserved.
        public let cNAMEPrefix: String

        public init(cNAMEPrefix: String) {
            self.cNAMEPrefix = cNAMEPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case cNAMEPrefix = "CNAMEPrefix"
        }
    }

    public struct BuildConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Image", required: true, type: .string), 
            AWSShapeMember(label: "ComputeType", required: false, type: .enum), 
            AWSShapeMember(label: "ArtifactName", required: false, type: .string), 
            AWSShapeMember(label: "CodeBuildServiceRole", required: true, type: .string), 
            AWSShapeMember(label: "TimeoutInMinutes", required: false, type: .integer)
        ]
        /// The ID of the Docker image to use for this build project.
        public let image: String
        /// Information about the compute resources the build project will use.    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds     BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds     BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds   
        public let computeType: ComputeType?
        /// The name of the artifact of the CodeBuild build. If provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label-artifact-name.zip. If not provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label.zip. 
        public let artifactName: String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let codeBuildServiceRole: String
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int32?

        public init(image: String, computeType: ComputeType? = nil, artifactName: String? = nil, codeBuildServiceRole: String, timeoutInMinutes: Int32? = nil) {
            self.image = image
            self.computeType = computeType
            self.artifactName = artifactName
            self.codeBuildServiceRole = codeBuildServiceRole
            self.timeoutInMinutes = timeoutInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case image = "Image"
            case computeType = "ComputeType"
            case artifactName = "ArtifactName"
            case codeBuildServiceRole = "CodeBuildServiceRole"
            case timeoutInMinutes = "TimeoutInMinutes"
        }
    }

    public struct Latency: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "P95", required: false, type: .double), 
            AWSShapeMember(label: "P10", required: false, type: .double), 
            AWSShapeMember(label: "P90", required: false, type: .double), 
            AWSShapeMember(label: "P85", required: false, type: .double), 
            AWSShapeMember(label: "P50", required: false, type: .double), 
            AWSShapeMember(label: "P75", required: false, type: .double), 
            AWSShapeMember(label: "P99", required: false, type: .double), 
            AWSShapeMember(label: "P999", required: false, type: .double)
        ]
        /// The average latency for the slowest 5 percent of requests over the last 10 seconds.
        public let p95: Double?
        /// The average latency for the slowest 90 percent of requests over the last 10 seconds.
        public let p10: Double?
        /// The average latency for the slowest 10 percent of requests over the last 10 seconds.
        public let p90: Double?
        /// The average latency for the slowest 15 percent of requests over the last 10 seconds.
        public let p85: Double?
        /// The average latency for the slowest 50 percent of requests over the last 10 seconds.
        public let p50: Double?
        /// The average latency for the slowest 25 percent of requests over the last 10 seconds.
        public let p75: Double?
        /// The average latency for the slowest 1 percent of requests over the last 10 seconds.
        public let p99: Double?
        /// The average latency for the slowest 0.1 percent of requests over the last 10 seconds.
        public let p999: Double?

        public init(p95: Double? = nil, p10: Double? = nil, p90: Double? = nil, p85: Double? = nil, p50: Double? = nil, p75: Double? = nil, p99: Double? = nil, p999: Double? = nil) {
            self.p95 = p95
            self.p10 = p10
            self.p90 = p90
            self.p85 = p85
            self.p50 = p50
            self.p75 = p75
            self.p99 = p99
            self.p999 = p999
        }

        private enum CodingKeys: String, CodingKey {
            case p95 = "P95"
            case p10 = "P10"
            case p90 = "P90"
            case p85 = "P85"
            case p50 = "P50"
            case p75 = "P75"
            case p99 = "P99"
            case p999 = "P999"
        }
    }

    public struct LoadBalancer: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the LoadBalancer.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct RebuildEnvironmentMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment to rebuild.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to rebuild.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct ManagedActionHistoryItem: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "FinishedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureType", required: false, type: .enum), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "FailureDescription", required: false, type: .string), 
            AWSShapeMember(label: "ExecutedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ActionDescription", required: false, type: .string)
        ]
        /// The type of the managed action.
        public let actionType: ActionType?
        /// The status of the action.
        public let status: ActionHistoryStatus?
        /// The date and time that the action finished executing.
        public let finishedTime: Double?
        /// If the action failed, the type of failure.
        public let failureType: FailureType?
        /// A unique identifier for the managed action.
        public let actionId: String?
        /// If the action failed, a description of the failure.
        public let failureDescription: String?
        /// The date and time that the action started executing.
        public let executedTime: Double?
        /// A description of the managed action.
        public let actionDescription: String?

        public init(actionType: ActionType? = nil, status: ActionHistoryStatus? = nil, finishedTime: Double? = nil, failureType: FailureType? = nil, actionId: String? = nil, failureDescription: String? = nil, executedTime: Double? = nil, actionDescription: String? = nil) {
            self.actionType = actionType
            self.status = status
            self.finishedTime = finishedTime
            self.failureType = failureType
            self.actionId = actionId
            self.failureDescription = failureDescription
            self.executedTime = executedTime
            self.actionDescription = actionDescription
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case status = "Status"
            case finishedTime = "FinishedTime"
            case failureType = "FailureType"
            case actionId = "ActionId"
            case failureDescription = "FailureDescription"
            case executedTime = "ExecutedTime"
            case actionDescription = "ActionDescription"
        }
    }

    public struct DescribePlatformVersionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformDescription", required: false, type: .structure)
        ]
        /// Detailed information about the version of the platform.
        public let platformDescription: PlatformDescription?

        public init(platformDescription: PlatformDescription? = nil) {
            self.platformDescription = platformDescription
        }

        private enum CodingKeys: String, CodingKey {
            case platformDescription = "PlatformDescription"
        }
    }

    public struct RetrieveEnvironmentInfoResultMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentInfo", required: false, type: .list)
        ]
        ///  The EnvironmentInfoDescription of the environment. 
        public let environmentInfo: [EnvironmentInfoDescription]?

        public init(environmentInfo: [EnvironmentInfoDescription]? = nil) {
            self.environmentInfo = environmentInfo
        }

        private enum CodingKeys: String, CodingKey {
            case environmentInfo = "EnvironmentInfo"
        }
    }

    public struct InstanceHealthSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pending", required: false, type: .integer), 
            AWSShapeMember(label: "Degraded", required: false, type: .integer), 
            AWSShapeMember(label: "Warning", required: false, type: .integer), 
            AWSShapeMember(label: "Ok", required: false, type: .integer), 
            AWSShapeMember(label: "Info", required: false, type: .integer), 
            AWSShapeMember(label: "NoData", required: false, type: .integer), 
            AWSShapeMember(label: "Unknown", required: false, type: .integer), 
            AWSShapeMember(label: "Severe", required: false, type: .integer)
        ]
        ///  Grey. An operation is in progress on an instance within the command timeout.
        public let pending: Int32?
        ///  Red. The health agent is reporting a high number of request failures or other issues for an instance or environment.
        public let degraded: Int32?
        ///  Yellow. The health agent is reporting a moderate number of request failures or other issues for an instance or environment.
        public let warning: Int32?
        ///  Green. An instance is passing health checks and the health agent is not reporting any problems.
        public let ok: Int32?
        ///  Green. An operation is in progress on an instance.
        public let info: Int32?
        ///  Grey. AWS Elastic Beanstalk and the health agent are reporting no data on an instance.
        public let noData: Int32?
        ///  Grey. AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.
        public let unknown: Int32?
        ///  Red. The health agent is reporting a very high number of request failures or other issues for an instance or environment.
        public let severe: Int32?

        public init(pending: Int32? = nil, degraded: Int32? = nil, warning: Int32? = nil, ok: Int32? = nil, info: Int32? = nil, noData: Int32? = nil, unknown: Int32? = nil, severe: Int32? = nil) {
            self.pending = pending
            self.degraded = degraded
            self.warning = warning
            self.ok = ok
            self.info = info
            self.noData = noData
            self.unknown = unknown
            self.severe = severe
        }

        private enum CodingKeys: String, CodingKey {
            case pending = "Pending"
            case degraded = "Degraded"
            case warning = "Warning"
            case ok = "Ok"
            case info = "Info"
            case noData = "NoData"
            case unknown = "Unknown"
            case severe = "Severe"
        }
    }

    public struct ApplicationDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationTemplates", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceLifecycleConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        /// The names of the configuration templates associated with this application.
        public let configurationTemplates: [String]?
        /// User-defined description of the application.
        public let description: String?
        /// The date when the application was last modified.
        public let dateUpdated: Double?
        /// The lifecycle settings for the application.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig?
        /// The name of the application.
        public let applicationName: String?
        /// The date when the application was created.
        public let dateCreated: Double?
        /// The names of the versions for this application.
        public let versions: [String]?

        public init(configurationTemplates: [String]? = nil, description: String? = nil, dateUpdated: Double? = nil, resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil, applicationName: String? = nil, dateCreated: Double? = nil, versions: [String]? = nil) {
            self.configurationTemplates = configurationTemplates
            self.description = description
            self.dateUpdated = dateUpdated
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
            self.dateCreated = dateCreated
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case configurationTemplates = "ConfigurationTemplates"
            case description = "Description"
            case dateUpdated = "DateUpdated"
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
            case applicationName = "ApplicationName"
            case dateCreated = "DateCreated"
            case versions = "Versions"
        }
    }

    public struct Builder: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The ARN of the builder.
        public let aRN: String?

        public init(aRN: String? = nil) {
            self.aRN = aRN
        }

        private enum CodingKeys: String, CodingKey {
            case aRN = "ARN"
        }
    }

    public enum SourceRepository: String, CustomStringConvertible, Codable {
        case codecommit = "CodeCommit"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInstancesHealthRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttributeNames", required: false, type: .list)
        ]
        /// Specify the AWS Elastic Beanstalk environment by name.
        public let environmentName: String?
        /// Specify the AWS Elastic Beanstalk environment by ID.
        public let environmentId: String?
        /// Specify the pagination token returned by a previous call.
        public let nextToken: String?
        /// Specifies the response elements you wish to receive. To retrieve all attributes, set to All. If no attribute names are specified, returns a list of instances.
        public let attributeNames: [InstancesHealthAttribute]?

        public init(environmentName: String? = nil, environmentId: String? = nil, nextToken: String? = nil, attributeNames: [InstancesHealthAttribute]? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.nextToken = nextToken
            self.attributeNames = attributeNames
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
            case nextToken = "NextToken"
            case attributeNames = "AttributeNames"
        }
    }

    public struct AutoScalingGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the AutoScalingGroup . 
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct CreatePlatformVersionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformSummary", required: false, type: .structure), 
            AWSShapeMember(label: "Builder", required: false, type: .structure)
        ]
        /// Detailed information about the new version of the custom platform.
        public let platformSummary: PlatformSummary?
        /// The builder used to create the custom platform.
        public let builder: Builder?

        public init(platformSummary: PlatformSummary? = nil, builder: Builder? = nil) {
            self.platformSummary = platformSummary
            self.builder = builder
        }

        private enum CodingKeys: String, CodingKey {
            case platformSummary = "PlatformSummary"
            case builder = "Builder"
        }
    }

    public struct EnvironmentDescriptionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Environments", required: false, type: .list)
        ]
        ///  Returns an EnvironmentDescription list. 
        public let environments: [EnvironmentDescription]?

        public init(environments: [EnvironmentDescription]? = nil) {
            self.environments = environments
        }

        private enum CodingKeys: String, CodingKey {
            case environments = "Environments"
        }
    }

    public enum InstancesHealthAttribute: String, CustomStringConvertible, Codable {
        case healthstatus = "HealthStatus"
        case color = "Color"
        case causes = "Causes"
        case applicationmetrics = "ApplicationMetrics"
        case refreshedat = "RefreshedAt"
        case launchedat = "LaunchedAt"
        case system = "System"
        case deployment = "Deployment"
        case availabilityzone = "AvailabilityZone"
        case instancetype = "InstanceType"
        case all = "All"
        public var description: String { return self.rawValue }
    }

    public struct SourceConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string)
        ]
        /// The name of the configuration template.
        public let templateName: String?
        /// The name of the application associated with the configuration.
        public let applicationName: String?

        public init(templateName: String? = nil, applicationName: String? = nil) {
            self.templateName = templateName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case applicationName = "ApplicationName"
        }
    }

    public struct CreateConfigurationTemplateMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "SourceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TemplateName", required: true, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// If specified, AWS Elastic Beanstalk sets the specified configuration option to the requested value. The new value overrides the value obtained from the solution stack or the source configuration template.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// If specified, AWS Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.  Values specified in the OptionSettings parameter of this call overrides any values obtained from the SourceConfiguration.   If no configuration template is found, returns an InvalidParameterValue error.   Constraint: If both the solution stack name parameter and the source configuration parameters are specified, the solution stack of the source configuration template must match the specified solution stack name or else AWS Elastic Beanstalk returns an InvalidParameterCombination error. 
        public let sourceConfiguration: SourceConfiguration?
        /// The name of the configuration template. Constraint: This name must be unique per application. Default: If a configuration template already exists with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let templateName: String
        /// The name of the solution stack used by this configuration. The solution stack specifies the operating system, architecture, and application server for a configuration template. It determines the set of configuration options as well as the possible and default values.  Use ListAvailableSolutionStacks to obtain a list of available solution stacks.   A solution stack name or a source configuration parameter must be specified, otherwise AWS Elastic Beanstalk returns an InvalidParameterValue error.  If a solution stack name is not specified and the source configuration parameter is specified, AWS Elastic Beanstalk uses the same solution stack as the source configuration template.
        public let solutionStackName: String?
        /// The ARN of the custome platform.
        public let platformArn: String?
        /// The ID of the environment used with this configuration template.
        public let environmentId: String?
        /// The name of the application to associate with this configuration template. If no application is found with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let applicationName: String
        /// Describes this configuration.
        public let description: String?

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, sourceConfiguration: SourceConfiguration? = nil, templateName: String, solutionStackName: String? = nil, platformArn: String? = nil, environmentId: String? = nil, applicationName: String, description: String? = nil) {
            self.optionSettings = optionSettings
            self.sourceConfiguration = sourceConfiguration
            self.templateName = templateName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case optionSettings = "OptionSettings"
            case sourceConfiguration = "SourceConfiguration"
            case templateName = "TemplateName"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case environmentId = "EnvironmentId"
            case applicationName = "ApplicationName"
            case description = "Description"
        }
    }

    public struct ConfigurationSettingsDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A list of the configuration options and their values in this configuration set.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The date (in UTC time) when this configuration set was last modified.
        public let dateUpdated: Double?
        ///  If not null, the name of the configuration template for this configuration set. 
        public let templateName: String?
        /// The name of the solution stack this configuration set uses.
        public let solutionStackName: String?
        /// The ARN of the custom platform.
        public let platformArn: String?
        ///  If not null, the name of the environment for this configuration set. 
        public let environmentName: String?
        /// The name of the application associated with this configuration set.
        public let applicationName: String?
        ///  If this configuration set is associated with an environment, the DeploymentStatus parameter indicates the deployment status of this configuration set:     null: This configuration is not associated with a running environment.    pending: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.    deployed: This is the configuration that is currently deployed to the associated running environment.    failed: This is a draft configuration that failed to successfully deploy.  
        public let deploymentStatus: ConfigurationDeploymentStatus?
        /// The date (in UTC time) when this configuration set was created.
        public let dateCreated: Double?
        /// Describes this configuration set.
        public let description: String?

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, dateUpdated: Double? = nil, templateName: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, environmentName: String? = nil, applicationName: String? = nil, deploymentStatus: ConfigurationDeploymentStatus? = nil, dateCreated: Double? = nil, description: String? = nil) {
            self.optionSettings = optionSettings
            self.dateUpdated = dateUpdated
            self.templateName = templateName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.environmentName = environmentName
            self.applicationName = applicationName
            self.deploymentStatus = deploymentStatus
            self.dateCreated = dateCreated
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case optionSettings = "OptionSettings"
            case dateUpdated = "DateUpdated"
            case templateName = "TemplateName"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case environmentName = "EnvironmentName"
            case applicationName = "ApplicationName"
            case deploymentStatus = "DeploymentStatus"
            case dateCreated = "DateCreated"
            case description = "Description"
        }
    }

    public struct UpdateConfigurationTemplateMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "TemplateName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A list of configuration option settings to update with the new specified option value.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The name of the application associated with the configuration template to update.  If no application is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error. 
        public let applicationName: String
        /// A list of configuration options to remove from the configuration set.  Constraint: You can remove only UserDefined configuration options. 
        public let optionsToRemove: [OptionSpecification]?
        /// The name of the configuration template to update.  If no configuration template is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error. 
        public let templateName: String
        /// A new description for the configuration.
        public let description: String?

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, applicationName: String, optionsToRemove: [OptionSpecification]? = nil, templateName: String, description: String? = nil) {
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.optionsToRemove = optionsToRemove
            self.templateName = templateName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case optionSettings = "OptionSettings"
            case applicationName = "ApplicationName"
            case optionsToRemove = "OptionsToRemove"
            case templateName = "TemplateName"
            case description = "Description"
        }
    }

    public struct EnvironmentDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "CNAME", required: false, type: .string), 
            AWSShapeMember(label: "HealthStatus", required: false, type: .enum), 
            AWSShapeMember(label: "EndpointURL", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentLinks", required: false, type: .list), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "AbortableOperationInProgress", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Health", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "Tier", required: false, type: .structure)
        ]
        /// The name of the configuration template used to originally launch this environment.
        public let templateName: String?
        /// The last modified date for this environment.
        public let dateUpdated: Double?
        /// The application version deployed in this environment.
        public let versionLabel: String?
        /// The name of this environment.
        public let environmentName: String?
        /// The URL to the CNAME for this environment.
        public let cNAME: String?
        /// Returns the health status of the application running in your environment. For more information, see Health Colors and Statuses.
        public let healthStatus: EnvironmentHealthStatus?
        /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
        public let endpointURL: String?
        /// A list of links to other environments in the same group.
        public let environmentLinks: [EnvironmentLink]?
        /// The creation date for this environment.
        public let dateCreated: Double?
        /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.  true: There is an update in progress.   false: There are no updates currently in progress. 
        public let abortableOperationInProgress: Bool?
        /// Describes this environment.
        public let description: String?
        /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:    Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.    Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.    Green: Indicates the environment is healthy and fully functional.    Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironement request.    Default: Grey 
        public let health: EnvironmentHealth?
        /// The current operational status of the environment:    Launching: Environment is in the process of initial deployment.    Updating: Environment is in the process of updating its configuration settings or application version.    Ready: Environment is available to have an action performed on it, such as update or terminate.    Terminating: Environment is in the shut-down process.    Terminated: Environment is not running.  
        public let status: EnvironmentStatus?
        ///  The name of the SolutionStack deployed with this environment. 
        public let solutionStackName: String?
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// The ID of this environment.
        public let environmentId: String?
        /// The description of the AWS resources used by this environment.
        public let resources: EnvironmentResourcesDescription?
        /// The name of the application associated with this environment.
        public let applicationName: String?
        /// Describes the current tier of this environment.
        public let tier: EnvironmentTier?

        public init(templateName: String? = nil, dateUpdated: Double? = nil, versionLabel: String? = nil, environmentName: String? = nil, cNAME: String? = nil, healthStatus: EnvironmentHealthStatus? = nil, endpointURL: String? = nil, environmentLinks: [EnvironmentLink]? = nil, dateCreated: Double? = nil, abortableOperationInProgress: Bool? = nil, description: String? = nil, health: EnvironmentHealth? = nil, status: EnvironmentStatus? = nil, solutionStackName: String? = nil, platformArn: String? = nil, environmentId: String? = nil, resources: EnvironmentResourcesDescription? = nil, applicationName: String? = nil, tier: EnvironmentTier? = nil) {
            self.templateName = templateName
            self.dateUpdated = dateUpdated
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.cNAME = cNAME
            self.healthStatus = healthStatus
            self.endpointURL = endpointURL
            self.environmentLinks = environmentLinks
            self.dateCreated = dateCreated
            self.abortableOperationInProgress = abortableOperationInProgress
            self.description = description
            self.health = health
            self.status = status
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.resources = resources
            self.applicationName = applicationName
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case dateUpdated = "DateUpdated"
            case versionLabel = "VersionLabel"
            case environmentName = "EnvironmentName"
            case cNAME = "CNAME"
            case healthStatus = "HealthStatus"
            case endpointURL = "EndpointURL"
            case environmentLinks = "EnvironmentLinks"
            case dateCreated = "DateCreated"
            case abortableOperationInProgress = "AbortableOperationInProgress"
            case description = "Description"
            case health = "Health"
            case status = "Status"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case environmentId = "EnvironmentId"
            case resources = "Resources"
            case applicationName = "ApplicationName"
            case tier = "Tier"
        }
    }

    public enum ActionHistoryStatus: String, CustomStringConvertible, Codable {
        case completed = "Completed"
        case failed = "Failed"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct ConfigurationOptionDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Regex", required: false, type: .structure), 
            AWSShapeMember(label: "MaxValue", required: false, type: .integer), 
            AWSShapeMember(label: "ChangeSeverity", required: false, type: .string), 
            AWSShapeMember(label: "ValueOptions", required: false, type: .list), 
            AWSShapeMember(label: "MaxLength", required: false, type: .integer), 
            AWSShapeMember(label: "ValueType", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MinValue", required: false, type: .integer), 
            AWSShapeMember(label: "UserDefined", required: false, type: .boolean), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string)
        ]
        /// If specified, the configuration option must be a string value that satisfies this regular expression.
        public let regex: OptionRestrictionRegex?
        /// If specified, the configuration option must be a numeric value less than this value.
        public let maxValue: Int32?
        /// An indication of which action is required if the value for this configuration option changes:    NoInterruption : There is no interruption to the environment or application availability.    RestartEnvironment : The environment is entirely restarted, all AWS resources are deleted and recreated, and the environment is unavailable during the process.    RestartApplicationServer : The environment is available the entire time. However, a short application outage occurs when the application servers on the running Amazon EC2 instances are restarted.  
        public let changeSeverity: String?
        /// If specified, values for the configuration option are selected from this list.
        public let valueOptions: [String]?
        /// If specified, the configuration option must be a string value no longer than this value.
        public let maxLength: Int32?
        /// An indication of which type of values this option has and whether it is allowable to select one or more than one of the possible values:    Scalar : Values for this option are a single selection from the possible values, or an unformatted string, or numeric value governed by the MIN/MAX/Regex constraints.    List : Values for this option are multiple selections from the possible values.    Boolean : Values for this option are either true or false .    Json : Values for this option are a JSON representation of a ConfigDocument.  
        public let valueType: ConfigurationOptionValueType?
        /// The name of the configuration option.
        public let name: String?
        /// If specified, the configuration option must be a numeric value greater than this value.
        public let minValue: Int32?
        /// An indication of whether the user defined this configuration option:    true : This configuration option was defined by the user. It is a valid choice for specifying if this as an Option to Remove when updating configuration settings.     false : This configuration was not defined by the user.    Constraint: You can remove only UserDefined options from a configuration.   Valid Values: true | false 
        public let userDefined: Bool?
        /// A unique namespace identifying the option's associated AWS resource.
        public let namespace: String?
        /// The default value for this configuration option.
        public let defaultValue: String?

        public init(regex: OptionRestrictionRegex? = nil, maxValue: Int32? = nil, changeSeverity: String? = nil, valueOptions: [String]? = nil, maxLength: Int32? = nil, valueType: ConfigurationOptionValueType? = nil, name: String? = nil, minValue: Int32? = nil, userDefined: Bool? = nil, namespace: String? = nil, defaultValue: String? = nil) {
            self.regex = regex
            self.maxValue = maxValue
            self.changeSeverity = changeSeverity
            self.valueOptions = valueOptions
            self.maxLength = maxLength
            self.valueType = valueType
            self.name = name
            self.minValue = minValue
            self.userDefined = userDefined
            self.namespace = namespace
            self.defaultValue = defaultValue
        }

        private enum CodingKeys: String, CodingKey {
            case regex = "Regex"
            case maxValue = "MaxValue"
            case changeSeverity = "ChangeSeverity"
            case valueOptions = "ValueOptions"
            case maxLength = "MaxLength"
            case valueType = "ValueType"
            case name = "Name"
            case minValue = "MinValue"
            case userDefined = "UserDefined"
            case namespace = "Namespace"
            case defaultValue = "DefaultValue"
        }
    }

    public struct ConfigurationSettingsValidationMessages: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Messages", required: false, type: .list)
        ]
        ///  A list of ValidationMessage. 
        public let messages: [ValidationMessage]?

        public init(messages: [ValidationMessage]? = nil) {
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "Messages"
        }
    }

    public struct SourceBuildInformation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceLocation", required: true, type: .string), 
            AWSShapeMember(label: "SourceType", required: true, type: .enum), 
            AWSShapeMember(label: "SourceRepository", required: true, type: .enum)
        ]
        /// The location of the source code, as a formatted string, depending on the value of SourceRepository    For CodeCommit, the format is the repository name and commit ID, separated by a forward slash. For example, my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a.   For S3, the format is the S3 bucket name and object key, separated by a forward slash. For example, my-s3-bucket/Folders/my-source-file.  
        public let sourceLocation: String
        /// The type of repository.    Git     Zip   
        public let sourceType: SourceType
        /// Location where the repository is stored.    CodeCommit     S3   
        public let sourceRepository: SourceRepository

        public init(sourceLocation: String, sourceType: SourceType, sourceRepository: SourceRepository) {
            self.sourceLocation = sourceLocation
            self.sourceType = sourceType
            self.sourceRepository = sourceRepository
        }

        private enum CodingKeys: String, CodingKey {
            case sourceLocation = "SourceLocation"
            case sourceType = "SourceType"
            case sourceRepository = "SourceRepository"
        }
    }

    public struct ApplicationResourceLifecycleDescriptionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceLifecycleConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string)
        ]
        /// The lifecycle configuration.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig?
        /// The name of the application.
        public let applicationName: String?

        public init(resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil, applicationName: String? = nil) {
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
            case applicationName = "ApplicationName"
        }
    }

    public struct ApplicationMetrics: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Latency", required: false, type: .structure), 
            AWSShapeMember(label: "RequestCount", required: false, type: .integer), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "StatusCodes", required: false, type: .structure)
        ]
        /// Represents the average latency for the slowest X percent of requests over the last 10 seconds. Latencies are in seconds with one millisecond resolution.
        public let latency: Latency?
        /// Average number of requests handled by the web server per second over the last 10 seconds.
        public let requestCount: Int32?
        /// The amount of time that the metrics cover (usually 10 seconds). For example, you might have 5 requests (request_count) within the most recent time slice of 10 seconds (duration).
        public let duration: Int32?
        /// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response.
        public let statusCodes: StatusCodes?

        public init(latency: Latency? = nil, requestCount: Int32? = nil, duration: Int32? = nil, statusCodes: StatusCodes? = nil) {
            self.latency = latency
            self.requestCount = requestCount
            self.duration = duration
            self.statusCodes = statusCodes
        }

        private enum CodingKeys: String, CodingKey {
            case latency = "Latency"
            case requestCount = "RequestCount"
            case duration = "Duration"
            case statusCodes = "StatusCodes"
        }
    }

    public struct ApplicationDescriptionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Applications", required: false, type: .list)
        ]
        /// This parameter contains a list of ApplicationDescription.
        public let applications: [ApplicationDescription]?

        public init(applications: [ApplicationDescription]? = nil) {
            self.applications = applications
        }

        private enum CodingKeys: String, CodingKey {
            case applications = "Applications"
        }
    }

    public struct DescribeConfigurationOptionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "Options", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string)
        ]
        /// The name of the environment whose configuration options you want to describe.
        public let environmentName: String?
        /// If specified, restricts the descriptions to only the specified options.
        public let options: [OptionSpecification]?
        /// The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment.
        public let applicationName: String?
        /// The name of the solution stack whose configuration options you want to describe.
        public let solutionStackName: String?
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// The name of the configuration template whose configuration options you want to describe.
        public let templateName: String?

        public init(environmentName: String? = nil, options: [OptionSpecification]? = nil, applicationName: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, templateName: String? = nil) {
            self.environmentName = environmentName
            self.options = options
            self.applicationName = applicationName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case options = "Options"
            case applicationName = "ApplicationName"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case templateName = "TemplateName"
        }
    }

    public struct UpdateApplicationMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the application to update. If no such application is found, UpdateApplication returns an InvalidParameterValue error. 
        public let applicationName: String
        /// A new description for the application. Default: If not specified, AWS Elastic Beanstalk does not update the description.
        public let description: String?

        public init(applicationName: String, description: String? = nil) {
            self.applicationName = applicationName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case description = "Description"
        }
    }

    public struct OptionRestrictionRegex: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pattern", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        /// The regular expression pattern that a string configuration option value with this restriction must match.
        public let pattern: String?
        /// A unique name representing this regular expression.
        public let label: String?

        public init(pattern: String? = nil, label: String? = nil) {
            self.pattern = pattern
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case pattern = "Pattern"
            case label = "Label"
        }
    }

    public struct Deployment: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .long), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string)
        ]
        /// For in-progress deployments, the time that the deloyment started. For completed deployments, the time that the deployment ended.
        public let deploymentTime: Double?
        /// The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.
        public let deploymentId: Int64?
        /// The status of the deployment:    In Progress : The deployment is in progress.    Deployed : The deployment succeeded.    Failed : The deployment failed.  
        public let status: String?
        /// The version label of the application version in the deployment.
        public let versionLabel: String?

        public init(deploymentTime: Double? = nil, deploymentId: Int64? = nil, status: String? = nil, versionLabel: String? = nil) {
            self.deploymentTime = deploymentTime
            self.deploymentId = deploymentId
            self.status = status
            self.versionLabel = versionLabel
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentTime = "DeploymentTime"
            case deploymentId = "DeploymentId"
            case status = "Status"
            case versionLabel = "VersionLabel"
        }
    }

    public struct ApplicationResourceLifecycleConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionLifecycleConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string)
        ]
        /// The application version lifecycle configuration.
        public let versionLifecycleConfig: ApplicationVersionLifecycleConfig?
        /// The ARN of an IAM service role that Elastic Beanstalk has permission to assume.
        public let serviceRole: String?

        public init(versionLifecycleConfig: ApplicationVersionLifecycleConfig? = nil, serviceRole: String? = nil) {
            self.versionLifecycleConfig = versionLifecycleConfig
            self.serviceRole = serviceRole
        }

        private enum CodingKeys: String, CodingKey {
            case versionLifecycleConfig = "VersionLifecycleConfig"
            case serviceRole = "ServiceRole"
        }
    }

    public struct DescribeApplicationsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationNames", required: false, type: .list)
        ]
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names.
        public let applicationNames: [String]?

        public init(applicationNames: [String]? = nil) {
            self.applicationNames = applicationNames
        }

        private enum CodingKeys: String, CodingKey {
            case applicationNames = "ApplicationNames"
        }
    }

    public struct EnvironmentResourceDescriptionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentResources", required: false, type: .structure)
        ]
        ///  A list of EnvironmentResourceDescription. 
        public let environmentResources: EnvironmentResourceDescription?

        public init(environmentResources: EnvironmentResourceDescription? = nil) {
            self.environmentResources = environmentResources
        }

        private enum CodingKeys: String, CodingKey {
            case environmentResources = "EnvironmentResources"
        }
    }

    public struct SystemStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadAverage", required: false, type: .list), 
            AWSShapeMember(label: "CPUUtilization", required: false, type: .structure)
        ]
        /// Load average in the last 1-minute, 5-minute, and 15-minute periods. For more information, see Operating System Metrics.
        public let loadAverage: [Double]?
        /// CPU utilization metrics for the instance.
        public let cPUUtilization: CPUUtilization?

        public init(loadAverage: [Double]? = nil, cPUUtilization: CPUUtilization? = nil) {
            self.loadAverage = loadAverage
            self.cPUUtilization = cPUUtilization
        }

        private enum CodingKeys: String, CodingKey {
            case loadAverage = "LoadAverage"
            case cPUUtilization = "CPUUtilization"
        }
    }

    public enum EnvironmentStatus: String, CustomStringConvertible, Codable {
        case launching = "Launching"
        case updating = "Updating"
        case ready = "Ready"
        case terminating = "Terminating"
        case terminated = "Terminated"
        public var description: String { return self.rawValue }
    }

    public struct ApplyEnvironmentManagedActionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: true, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the target environment.
        public let environmentName: String?
        /// The action ID of the scheduled managed action to execute.
        public let actionId: String
        /// The environment ID of the target environment.
        public let environmentId: String?

        public init(environmentName: String? = nil, actionId: String, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.actionId = actionId
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case actionId = "ActionId"
            case environmentId = "EnvironmentId"
        }
    }

    public struct DescribePlatformVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string)
        ]
        /// The ARN of the version of the platform.
        public let platformArn: String?

        public init(platformArn: String? = nil) {
            self.platformArn = platformArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
        }
    }

    public struct ConfigurationOptionsDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: false, type: .list), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string)
        ]
        ///  A list of ConfigurationOptionDescription. 
        public let options: [ConfigurationOptionDescription]?
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// The name of the solution stack these configuration options belong to.
        public let solutionStackName: String?

        public init(options: [ConfigurationOptionDescription]? = nil, platformArn: String? = nil, solutionStackName: String? = nil) {
            self.options = options
            self.platformArn = platformArn
            self.solutionStackName = solutionStackName
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case platformArn = "PlatformArn"
            case solutionStackName = "SolutionStackName"
        }
    }

    public struct ApplicationVersionDescriptionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationVersions", required: false, type: .list)
        ]
        /// For a paginated request, the token that you can pass in a subsequent request to get the next page.
        public let nextToken: String?
        /// List of ApplicationVersionDescription objects sorted in order of creation.
        public let applicationVersions: [ApplicationVersionDescription]?

        public init(nextToken: String? = nil, applicationVersions: [ApplicationVersionDescription]? = nil) {
            self.nextToken = nextToken
            self.applicationVersions = applicationVersions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case applicationVersions = "ApplicationVersions"
        }
    }

    public struct ApplicationVersionDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "SourceBuildInformation", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "SourceBundle", required: false, type: .structure), 
            AWSShapeMember(label: "BuildArn", required: false, type: .string), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp)
        ]
        /// The description of the application version.
        public let description: String?
        /// The processing status of the application version.
        public let status: ApplicationVersionStatus?
        /// The last modified date of the application version.
        public let dateUpdated: Double?
        /// A unique identifier for the application version.
        public let versionLabel: String?
        /// If the version's source code was retrieved from AWS CodeCommit, the location of the source code for the application version.
        public let sourceBuildInformation: SourceBuildInformation?
        /// The name of the application to which the application version belongs.
        public let applicationName: String?
        /// The storage location of the application version's source bundle in Amazon S3.
        public let sourceBundle: S3Location?
        /// Reference to the artifact from the AWS CodeBuild build.
        public let buildArn: String?
        /// The creation date of the application version.
        public let dateCreated: Double?

        public init(description: String? = nil, status: ApplicationVersionStatus? = nil, dateUpdated: Double? = nil, versionLabel: String? = nil, sourceBuildInformation: SourceBuildInformation? = nil, applicationName: String? = nil, sourceBundle: S3Location? = nil, buildArn: String? = nil, dateCreated: Double? = nil) {
            self.description = description
            self.status = status
            self.dateUpdated = dateUpdated
            self.versionLabel = versionLabel
            self.sourceBuildInformation = sourceBuildInformation
            self.applicationName = applicationName
            self.sourceBundle = sourceBundle
            self.buildArn = buildArn
            self.dateCreated = dateCreated
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case status = "Status"
            case dateUpdated = "DateUpdated"
            case versionLabel = "VersionLabel"
            case sourceBuildInformation = "SourceBuildInformation"
            case applicationName = "ApplicationName"
            case sourceBundle = "SourceBundle"
            case buildArn = "BuildArn"
            case dateCreated = "DateCreated"
        }
    }

    public struct DescribeConfigurationSettingsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The name of the environment to describe.  Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The name of the configuration template to describe.  Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns a MissingRequiredParameter error. 
        public let templateName: String?
        /// The application for the environment or configuration template.
        public let applicationName: String

        public init(environmentName: String? = nil, templateName: String? = nil, applicationName: String) {
            self.environmentName = environmentName
            self.templateName = templateName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case templateName = "TemplateName"
            case applicationName = "ApplicationName"
        }
    }

    public struct OptionSpecification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OptionName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceName", required: false, type: .string)
        ]
        /// A unique namespace identifying the option's associated AWS resource.
        public let namespace: String?
        /// The name of the configuration option.
        public let optionName: String?
        /// A unique resource name for a time-based scaling configuration option.
        public let resourceName: String?

        public init(namespace: String? = nil, optionName: String? = nil, resourceName: String? = nil) {
            self.namespace = namespace
            self.optionName = optionName
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case optionName = "OptionName"
            case resourceName = "ResourceName"
        }
    }

    public struct Listener: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", required: false, type: .string)
        ]
        /// The port that is used by the Listener.
        public let port: Int32?
        /// The protocol that is used by the Listener.
        public let `protocol`: String?

        public init(port: Int32? = nil, protocol: String? = nil) {
            self.port = port
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case `protocol` = "Protocol"
        }
    }

    public struct ApplicationVersionLifecycleConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCountRule", required: false, type: .structure), 
            AWSShapeMember(label: "MaxAgeRule", required: false, type: .structure)
        ]
        /// Specify a max count rule to restrict the number of application versions that are retained for an application.
        public let maxCountRule: MaxCountRule?
        /// Specify a max age rule to restrict the length of time that application versions are retained for an application.
        public let maxAgeRule: MaxAgeRule?

        public init(maxCountRule: MaxCountRule? = nil, maxAgeRule: MaxAgeRule? = nil) {
            self.maxCountRule = maxCountRule
            self.maxAgeRule = maxAgeRule
        }

        private enum CodingKeys: String, CodingKey {
            case maxCountRule = "MaxCountRule"
            case maxAgeRule = "MaxAgeRule"
        }
    }

    public struct DescribeInstancesHealthResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceHealthList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RefreshedAt", required: false, type: .timestamp)
        ]
        /// Detailed health information about each instance.
        public let instanceHealthList: [SingleInstanceHealth]?
        /// Pagination token for the next page of results, if available.
        public let nextToken: String?
        /// The date and time that the health information was retrieved.
        public let refreshedAt: Double?

        public init(instanceHealthList: [SingleInstanceHealth]? = nil, nextToken: String? = nil, refreshedAt: Double? = nil) {
            self.instanceHealthList = instanceHealthList
            self.nextToken = nextToken
            self.refreshedAt = refreshedAt
        }

        private enum CodingKeys: String, CodingKey {
            case instanceHealthList = "InstanceHealthList"
            case nextToken = "NextToken"
            case refreshedAt = "RefreshedAt"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case git = "Git"
        case zip = "Zip"
        public var description: String { return self.rawValue }
    }

    public struct ApplicationDescriptionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Application", required: false, type: .structure)
        ]
        ///  The ApplicationDescription of the application. 
        public let application: ApplicationDescription?

        public init(application: ApplicationDescription? = nil) {
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case application = "Application"
        }
    }

    public enum EnvironmentHealth: String, CustomStringConvertible, Codable {
        case green = "Green"
        case yellow = "Yellow"
        case red = "Red"
        case grey = "Grey"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEnvironmentHealthResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Color", required: false, type: .string), 
            AWSShapeMember(label: "InstancesHealth", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "HealthStatus", required: false, type: .string), 
            AWSShapeMember(label: "Causes", required: false, type: .list), 
            AWSShapeMember(label: "RefreshedAt", required: false, type: .timestamp)
        ]
        /// The environment's operational status. Ready, Launching, Updating, Terminating, or Terminated.
        public let status: EnvironmentHealth?
        /// The health color of the environment.
        public let color: String?
        /// Summary health information for the instances in the environment.
        public let instancesHealth: InstanceHealthSummary?
        /// Application request metrics for the environment.
        public let applicationMetrics: ApplicationMetrics?
        /// The environment's name.
        public let environmentName: String?
        /// The health status of the environment. For example, Ok.
        public let healthStatus: String?
        /// Descriptions of the data that contributed to the environment's current health status.
        public let causes: [String]?
        /// The date and time that the health information was retrieved.
        public let refreshedAt: Double?

        public init(status: EnvironmentHealth? = nil, color: String? = nil, instancesHealth: InstanceHealthSummary? = nil, applicationMetrics: ApplicationMetrics? = nil, environmentName: String? = nil, healthStatus: String? = nil, causes: [String]? = nil, refreshedAt: Double? = nil) {
            self.status = status
            self.color = color
            self.instancesHealth = instancesHealth
            self.applicationMetrics = applicationMetrics
            self.environmentName = environmentName
            self.healthStatus = healthStatus
            self.causes = causes
            self.refreshedAt = refreshedAt
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case color = "Color"
            case instancesHealth = "InstancesHealth"
            case applicationMetrics = "ApplicationMetrics"
            case environmentName = "EnvironmentName"
            case healthStatus = "HealthStatus"
            case causes = "Causes"
            case refreshedAt = "RefreshedAt"
        }
    }

    public struct RetrieveEnvironmentInfoMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "InfoType", required: true, type: .enum), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the data's environment.  If no such environment is found, returns an InvalidParameterValue error.   Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The type of information to retrieve.
        public let infoType: EnvironmentInfoType
        /// The ID of the data's environment. If no such environment is found, returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
        public let environmentId: String?

        public init(environmentName: String? = nil, infoType: EnvironmentInfoType, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.infoType = infoType
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case infoType = "InfoType"
            case environmentId = "EnvironmentId"
        }
    }

    public struct ConfigurationSettingsDescriptions: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationSettings", required: false, type: .list)
        ]
        ///  A list of ConfigurationSettingsDescription. 
        public let configurationSettings: [ConfigurationSettingsDescription]?

        public init(configurationSettings: [ConfigurationSettingsDescription]? = nil) {
            self.configurationSettings = configurationSettings
        }

        private enum CodingKeys: String, CodingKey {
            case configurationSettings = "ConfigurationSettings"
        }
    }

    public struct AbortEnvironmentUpdateMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// This specifies the name of the environment with the in-progress update that you want to cancel.
        public let environmentName: String?
        /// This specifies the ID of the environment with the in-progress update that you want to cancel.
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct MaxCountRule: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "MaxCount", required: false, type: .integer), 
            AWSShapeMember(label: "DeleteSourceFromS3", required: false, type: .boolean)
        ]
        /// Specify true to apply the rule, or false to disable it.
        public let enabled: Bool
        /// Specify the maximum number of application versions to retain.
        public let maxCount: Int32?
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public let deleteSourceFromS3: Bool?

        public init(enabled: Bool, maxCount: Int32? = nil, deleteSourceFromS3: Bool? = nil) {
            self.enabled = enabled
            self.maxCount = maxCount
            self.deleteSourceFromS3 = deleteSourceFromS3
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case maxCount = "MaxCount"
            case deleteSourceFromS3 = "DeleteSourceFromS3"
        }
    }

    public enum ApplicationVersionStatus: String, CustomStringConvertible, Codable {
        case processed = "Processed"
        case unprocessed = "Unprocessed"
        case failed = "Failed"
        case processing = "Processing"
        case building = "Building"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEnvironmentResourcesMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment to retrieve AWS resource usage data.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to retrieve AWS resource usage data.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public enum EnvironmentInfoType: String, CustomStringConvertible, Codable {
        case tail = "tail"
        case bundle = "bundle"
        public var description: String { return self.rawValue }
    }

    public struct ListAvailableSolutionStacksResultMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SolutionStackDetails", required: false, type: .list), 
            AWSShapeMember(label: "SolutionStacks", required: false, type: .list)
        ]
        ///  A list of available solution stacks and their SolutionStackDescription. 
        public let solutionStackDetails: [SolutionStackDescription]?
        /// A list of available solution stacks.
        public let solutionStacks: [String]?

        public init(solutionStackDetails: [SolutionStackDescription]? = nil, solutionStacks: [String]? = nil) {
            self.solutionStackDetails = solutionStackDetails
            self.solutionStacks = solutionStacks
        }

        private enum CodingKeys: String, CodingKey {
            case solutionStackDetails = "SolutionStackDetails"
            case solutionStacks = "SolutionStacks"
        }
    }

    public struct S3Location: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "S3Key", required: false, type: .string)
        ]
        /// The Amazon S3 bucket where the data is located.
        public let s3Bucket: String?
        /// The Amazon S3 key where the data is located.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct ValidateConfigurationSettingsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: true, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string)
        ]
        /// The name of the environment to validate the settings against. Condition: You cannot specify both this and a configuration template name.
        public let environmentName: String?
        /// A list of the options and desired values to evaluate.
        public let optionSettings: [ConfigurationOptionSetting]
        /// The name of the application that the configuration template or environment belongs to.
        public let applicationName: String
        /// The name of the configuration template to validate the settings against. Condition: You cannot specify both this and an environment name.
        public let templateName: String?

        public init(environmentName: String? = nil, optionSettings: [ConfigurationOptionSetting], applicationName: String, templateName: String? = nil) {
            self.environmentName = environmentName
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case optionSettings = "OptionSettings"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
        }
    }

    public enum ActionStatus: String, CustomStringConvertible, Codable {
        case scheduled = "Scheduled"
        case pending = "Pending"
        case running = "Running"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct CreatePlatformVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformVersion", required: true, type: .string), 
            AWSShapeMember(label: "PlatformName", required: true, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "PlatformDefinitionBundle", required: true, type: .structure)
        ]
        /// The number, such as 1.0.2, for the new platform version.
        public let platformVersion: String
        /// The name of your custom platform.
        public let platformName: String
        /// The name of the builder environment.
        public let environmentName: String?
        /// The configuration option settings to apply to the builder environment.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The location of the platform definition archive in Amazon S3.
        public let platformDefinitionBundle: S3Location

        public init(platformVersion: String, platformName: String, environmentName: String? = nil, optionSettings: [ConfigurationOptionSetting]? = nil, platformDefinitionBundle: S3Location) {
            self.platformVersion = platformVersion
            self.platformName = platformName
            self.environmentName = environmentName
            self.optionSettings = optionSettings
            self.platformDefinitionBundle = platformDefinitionBundle
        }

        private enum CodingKeys: String, CodingKey {
            case platformVersion = "PlatformVersion"
            case platformName = "PlatformName"
            case environmentName = "EnvironmentName"
            case optionSettings = "OptionSettings"
            case platformDefinitionBundle = "PlatformDefinitionBundle"
        }
    }

    public enum FailureType: String, CustomStringConvertible, Codable {
        case updatecancelled = "UpdateCancelled"
        case cancellationfailed = "CancellationFailed"
        case rollbackfailed = "RollbackFailed"
        case rollbacksuccessful = "RollbackSuccessful"
        case internalfailure = "InternalFailure"
        case invalidenvironmentstate = "InvalidEnvironmentState"
        case permissionserror = "PermissionsError"
        public var description: String { return self.rawValue }
    }

    public struct CreateEnvironmentMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "CNAMEPrefix", required: false, type: .string), 
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Tier", required: false, type: .structure)
        ]
        /// If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template.
        public let optionSettings: [ConfigurationOptionSetting]?
        ///  The name of the configuration template to use in deployment. If no configuration template is found with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let templateName: String?
        /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name parameter. See Environment Manifest (env.yaml) for details.
        public let groupName: String?
        /// The name of the application version to deploy.  If the specified application has no associated application versions, AWS Elastic Beanstalk UpdateEnvironment returns an InvalidParameterValue error.  Default: If not specified, AWS Elastic Beanstalk attempts to launch the sample application in the container.
        public let versionLabel: String?
        /// This specifies the tags applied to resources in the environment.
        public let tags: [Tag]?
        /// A unique name for the deployment environment. Used in the application URL. Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It cannot start or end with a hyphen. This name must be unique in your account. If the specified name already exists, AWS Elastic Beanstalk returns an InvalidParameterValue error.  Default: If the CNAME parameter is not specified, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.
        public let environmentName: String?
        /// Describes this environment.
        public let description: String?
        /// This is an alternative to specifying a template name. If specified, AWS Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack.
        public let solutionStackName: String?
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// If specified, the environment attempts to use this value as the prefix for the CNAME. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
        public let cNAMEPrefix: String?
        /// A list of custom user-defined configuration options to remove from the configuration set for this new environment.
        public let optionsToRemove: [OptionSpecification]?
        /// The name of the application that contains the version to be deployed.  If no application is found with this name, CreateEnvironment returns an InvalidParameterValue error. 
        public let applicationName: String
        /// This specifies the tier to use for creating this environment.
        public let tier: EnvironmentTier?

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, templateName: String? = nil, groupName: String? = nil, versionLabel: String? = nil, tags: [Tag]? = nil, environmentName: String? = nil, description: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, cNAMEPrefix: String? = nil, optionsToRemove: [OptionSpecification]? = nil, applicationName: String, tier: EnvironmentTier? = nil) {
            self.optionSettings = optionSettings
            self.templateName = templateName
            self.groupName = groupName
            self.versionLabel = versionLabel
            self.tags = tags
            self.environmentName = environmentName
            self.description = description
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.cNAMEPrefix = cNAMEPrefix
            self.optionsToRemove = optionsToRemove
            self.applicationName = applicationName
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case optionSettings = "OptionSettings"
            case templateName = "TemplateName"
            case groupName = "GroupName"
            case versionLabel = "VersionLabel"
            case tags = "Tags"
            case environmentName = "EnvironmentName"
            case description = "Description"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case cNAMEPrefix = "CNAMEPrefix"
            case optionsToRemove = "OptionsToRemove"
            case applicationName = "ApplicationName"
            case tier = "Tier"
        }
    }

    public struct DeletePlatformVersionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformSummary", required: false, type: .structure)
        ]
        /// Detailed information about the version of the custom platform.
        public let platformSummary: PlatformSummary?

        public init(platformSummary: PlatformSummary? = nil) {
            self.platformSummary = platformSummary
        }

        private enum CodingKeys: String, CodingKey {
            case platformSummary = "PlatformSummary"
        }
    }

    public struct CustomAmi: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VirtualizationType", required: false, type: .string), 
            AWSShapeMember(label: "ImageId", required: false, type: .string)
        ]
        /// The type of virtualization used to create the custom AMI.
        public let virtualizationType: String?
        /// THe ID of the image used to create the custom AMI.
        public let imageId: String?

        public init(virtualizationType: String? = nil, imageId: String? = nil) {
            self.virtualizationType = virtualizationType
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualizationType = "VirtualizationType"
            case imageId = "ImageId"
        }
    }

    public enum ActionType: String, CustomStringConvertible, Codable {
        case instancerefresh = "InstanceRefresh"
        case platformupdate = "PlatformUpdate"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentHealthAttribute: String, CustomStringConvertible, Codable {
        case status = "Status"
        case color = "Color"
        case causes = "Causes"
        case applicationmetrics = "ApplicationMetrics"
        case instanceshealth = "InstancesHealth"
        case all = "All"
        case healthstatus = "HealthStatus"
        case refreshedat = "RefreshedAt"
        public var description: String { return self.rawValue }
    }

    public struct CheckDNSAvailabilityResultMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FullyQualifiedCNAME", required: false, type: .string), 
            AWSShapeMember(label: "Available", required: false, type: .boolean)
        ]
        /// The fully qualified CNAME to reserve when CreateEnvironment is called with the provided prefix.
        public let fullyQualifiedCNAME: String?
        /// Indicates if the specified CNAME is available:    true : The CNAME is available.    false : The CNAME is not available.  
        public let available: Bool?

        public init(fullyQualifiedCNAME: String? = nil, available: Bool? = nil) {
            self.fullyQualifiedCNAME = fullyQualifiedCNAME
            self.available = available
        }

        private enum CodingKeys: String, CodingKey {
            case fullyQualifiedCNAME = "FullyQualifiedCNAME"
            case available = "Available"
        }
    }

    public struct DeleteConfigurationTemplateMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemplateName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The name of the configuration template to delete.
        public let templateName: String
        /// The name of the application to delete the configuration template from.
        public let applicationName: String

        public init(templateName: String, applicationName: String) {
            self.templateName = templateName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case applicationName = "ApplicationName"
        }
    }

    public struct PlatformFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Operator", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The custom platform attribute to which the filter values are applied. Valid Values: PlatformName | PlatformVersion | PlatformStatus | PlatformOwner 
        public let `type`: String?
        /// The operator to apply to the Type with each of the Values.  Valid Values: = (equal to) | != (not equal to) | &lt; (less than) | &lt;= (less than or equal to) | &gt; (greater than) | &gt;= (greater than or equal to) | contains | begins_with | ends_with 
        public let `operator`: String?
        /// The list of values applied to the custom platform attribute.
        public let values: [String]?

        public init(type: String? = nil, operator: String? = nil, values: [String]? = nil) {
            self.`type` = `type`
            self.`operator` = `operator`
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case `operator` = "Operator"
            case values = "Values"
        }
    }

    public struct PlatformDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "PlatformStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SupportedAddonList", required: false, type: .list), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "CustomAmiList", required: false, type: .list), 
            AWSShapeMember(label: "PlatformCategory", required: false, type: .string), 
            AWSShapeMember(label: "Maintainer", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystemName", required: false, type: .string), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "PlatformOwner", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "PlatformName", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystemVersion", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "SupportedTierList", required: false, type: .list), 
            AWSShapeMember(label: "Frameworks", required: false, type: .list), 
            AWSShapeMember(label: "ProgrammingLanguages", required: false, type: .list)
        ]
        /// The date when the platform was last updated.
        public let dateUpdated: Double?
        /// The status of the platform.
        public let platformStatus: PlatformStatus?
        /// The additions supported by the platform.
        public let supportedAddonList: [String]?
        /// The version of the platform.
        public let platformVersion: String?
        /// The custom AMIs supported by the platform.
        public let customAmiList: [CustomAmi]?
        /// The category of the platform.
        public let platformCategory: String?
        /// Information about the maintainer of the platform.
        public let maintainer: String?
        /// The operating system used by the platform.
        public let operatingSystemName: String?
        /// The date when the platform was created.
        public let dateCreated: Double?
        /// The AWS account ID of the person who created the platform.
        public let platformOwner: String?
        /// The description of the platform.
        public let description: String?
        /// The name of the platform.
        public let platformName: String?
        /// The version of the operating system used by the platform.
        public let operatingSystemVersion: String?
        /// The name of the solution stack used by the platform.
        public let solutionStackName: String?
        /// The ARN of the platform.
        public let platformArn: String?
        /// The tiers supported by the platform.
        public let supportedTierList: [String]?
        /// The frameworks supported by the platform.
        public let frameworks: [PlatformFramework]?
        /// The programming languages supported by the platform.
        public let programmingLanguages: [PlatformProgrammingLanguage]?

        public init(dateUpdated: Double? = nil, platformStatus: PlatformStatus? = nil, supportedAddonList: [String]? = nil, platformVersion: String? = nil, customAmiList: [CustomAmi]? = nil, platformCategory: String? = nil, maintainer: String? = nil, operatingSystemName: String? = nil, dateCreated: Double? = nil, platformOwner: String? = nil, description: String? = nil, platformName: String? = nil, operatingSystemVersion: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, supportedTierList: [String]? = nil, frameworks: [PlatformFramework]? = nil, programmingLanguages: [PlatformProgrammingLanguage]? = nil) {
            self.dateUpdated = dateUpdated
            self.platformStatus = platformStatus
            self.supportedAddonList = supportedAddonList
            self.platformVersion = platformVersion
            self.customAmiList = customAmiList
            self.platformCategory = platformCategory
            self.maintainer = maintainer
            self.operatingSystemName = operatingSystemName
            self.dateCreated = dateCreated
            self.platformOwner = platformOwner
            self.description = description
            self.platformName = platformName
            self.operatingSystemVersion = operatingSystemVersion
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.supportedTierList = supportedTierList
            self.frameworks = frameworks
            self.programmingLanguages = programmingLanguages
        }

        private enum CodingKeys: String, CodingKey {
            case dateUpdated = "DateUpdated"
            case platformStatus = "PlatformStatus"
            case supportedAddonList = "SupportedAddonList"
            case platformVersion = "PlatformVersion"
            case customAmiList = "CustomAmiList"
            case platformCategory = "PlatformCategory"
            case maintainer = "Maintainer"
            case operatingSystemName = "OperatingSystemName"
            case dateCreated = "DateCreated"
            case platformOwner = "PlatformOwner"
            case description = "Description"
            case platformName = "PlatformName"
            case operatingSystemVersion = "OperatingSystemVersion"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case supportedTierList = "SupportedTierList"
            case frameworks = "Frameworks"
            case programmingLanguages = "ProgrammingLanguages"
        }
    }

    public struct UpdateEnvironmentMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "Tier", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let templateName: String?
        /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See Environment Manifest (env.yaml) for details.
        public let groupName: String?
        /// This specifies the platform version that the environment will run after the environment is updated.
        public let solutionStackName: String?
        /// The ARN of the platform, if used.
        public let platformArn: String?
        /// A list of custom user-defined configuration options to remove from the configuration set for this environment.
        public let optionsToRemove: [OptionSpecification]?
        /// If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an InvalidParameterValue error. 
        public let versionLabel: String?
        /// The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to update. If no environment with this ID exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?
        /// The name of the application with which the environment is associated.
        public let applicationName: String?
        /// This specifies the tier to use to update the environment. Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns InvalidParameterValue error. 
        public let tier: EnvironmentTier?
        /// If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.
        public let description: String?

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, templateName: String? = nil, groupName: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, optionsToRemove: [OptionSpecification]? = nil, versionLabel: String? = nil, environmentName: String? = nil, environmentId: String? = nil, applicationName: String? = nil, tier: EnvironmentTier? = nil, description: String? = nil) {
            self.optionSettings = optionSettings
            self.templateName = templateName
            self.groupName = groupName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.optionsToRemove = optionsToRemove
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.tier = tier
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case optionSettings = "OptionSettings"
            case templateName = "TemplateName"
            case groupName = "GroupName"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
            case optionsToRemove = "OptionsToRemove"
            case versionLabel = "VersionLabel"
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
            case applicationName = "ApplicationName"
            case tier = "Tier"
            case description = "Description"
        }
    }

    public struct DeleteApplicationMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "TerminateEnvByForce", required: false, type: .boolean)
        ]
        /// The name of the application to delete.
        public let applicationName: String
        /// When set to true, running environments will be terminated before deleting the application.
        public let terminateEnvByForce: Bool?

        public init(applicationName: String, terminateEnvByForce: Bool? = nil) {
            self.applicationName = applicationName
            self.terminateEnvByForce = terminateEnvByForce
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case terminateEnvByForce = "TerminateEnvByForce"
        }
    }

    public struct EnvironmentTier: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The type of this environment tier.
        public let `type`: String?
        /// The name of this environment tier.
        public let name: String?
        /// The version of this environment tier.
        public let version: String?

        public init(type: String? = nil, name: String? = nil, version: String? = nil) {
            self.`type` = `type`
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case name = "Name"
            case version = "Version"
        }
    }

    public struct ListPlatformVersionsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlatformSummaryList", required: false, type: .list)
        ]
        /// The starting index into the remaining list of platforms. if this value is not null, you can use it in a subsequent ListPlatformVersion call. 
        public let nextToken: String?
        /// Detailed information about the platforms.
        public let platformSummaryList: [PlatformSummary]?

        public init(nextToken: String? = nil, platformSummaryList: [PlatformSummary]? = nil) {
            self.nextToken = nextToken
            self.platformSummaryList = platformSummaryList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case platformSummaryList = "PlatformSummaryList"
        }
    }

    public struct ApplicationVersionDescriptionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersion", required: false, type: .structure)
        ]
        ///  The ApplicationVersionDescription of the application version. 
        public let applicationVersion: ApplicationVersionDescription?

        public init(applicationVersion: ApplicationVersionDescription? = nil) {
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersion = "ApplicationVersion"
        }
    }

    public struct EnvironmentLink: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "LinkName", required: false, type: .string)
        ]
        /// The name of the linked environment (the dependency).
        public let environmentName: String?
        /// The name of the link.
        public let linkName: String?

        public init(environmentName: String? = nil, linkName: String? = nil) {
            self.environmentName = environmentName
            self.linkName = linkName
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case linkName = "LinkName"
        }
    }

    public struct LaunchConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the launch configuration.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct MaxAgeRule: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxAgeInDays", required: false, type: .integer), 
            AWSShapeMember(label: "DeleteSourceFromS3", required: false, type: .boolean), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean)
        ]
        /// Specify the number of days to retain an application versions.
        public let maxAgeInDays: Int32?
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public let deleteSourceFromS3: Bool?
        /// Specify true to apply the rule, or false to disable it.
        public let enabled: Bool

        public init(maxAgeInDays: Int32? = nil, deleteSourceFromS3: Bool? = nil, enabled: Bool) {
            self.maxAgeInDays = maxAgeInDays
            self.deleteSourceFromS3 = deleteSourceFromS3
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case maxAgeInDays = "MaxAgeInDays"
            case deleteSourceFromS3 = "DeleteSourceFromS3"
            case enabled = "Enabled"
        }
    }

    public struct ListPlatformVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The maximum number of platform values returned in one call.
        public let maxRecords: Int32?
        /// The starting index into the remaining list of platforms. Use the NextToken value from a previous ListPlatformVersion call.
        public let nextToken: String?
        /// List only the platforms where the platform member value relates to one of the supplied values.
        public let filters: [PlatformFilter]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, filters: [PlatformFilter]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case filters = "Filters"
        }
    }

    public struct UpdateApplicationVersionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionLabel", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the version to update. If no application version is found with this label, UpdateApplication returns an InvalidParameterValue error. 
        public let versionLabel: String
        /// The name of the application associated with this version.  If no application is found with this name, UpdateApplication returns an InvalidParameterValue error.
        public let applicationName: String
        /// A new description for this version.
        public let description: String?

        public init(versionLabel: String, applicationName: String, description: String? = nil) {
            self.versionLabel = versionLabel
            self.applicationName = applicationName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case versionLabel = "VersionLabel"
            case applicationName = "ApplicationName"
            case description = "Description"
        }
    }

    public struct DeleteEnvironmentConfigurationMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The name of the environment to delete the draft configuration from.
        public let environmentName: String
        /// The name of the application the environment is associated with.
        public let applicationName: String

        public init(environmentName: String, applicationName: String) {
            self.environmentName = environmentName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case applicationName = "ApplicationName"
        }
    }

    public struct EnvironmentInfoDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "InfoType", required: false, type: .enum), 
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "SampleTimestamp", required: false, type: .timestamp)
        ]
        /// The retrieved information.
        public let message: String?
        /// The type of information retrieved.
        public let infoType: EnvironmentInfoType?
        /// The Amazon EC2 Instance ID for this information.
        public let ec2InstanceId: String?
        /// The time stamp when this information was retrieved.
        public let sampleTimestamp: Double?

        public init(message: String? = nil, infoType: EnvironmentInfoType? = nil, ec2InstanceId: String? = nil, sampleTimestamp: Double? = nil) {
            self.message = message
            self.infoType = infoType
            self.ec2InstanceId = ec2InstanceId
            self.sampleTimestamp = sampleTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case infoType = "InfoType"
            case ec2InstanceId = "Ec2InstanceId"
            case sampleTimestamp = "SampleTimestamp"
        }
    }

    public struct DeleteApplicationVersionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionLabel", required: true, type: .string), 
            AWSShapeMember(label: "DeleteSourceBundle", required: false, type: .boolean), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The label of the version to delete.
        public let versionLabel: String
        /// Set to true to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3.
        public let deleteSourceBundle: Bool?
        /// The name of the application to which the version belongs.
        public let applicationName: String

        public init(versionLabel: String, deleteSourceBundle: Bool? = nil, applicationName: String) {
            self.versionLabel = versionLabel
            self.deleteSourceBundle = deleteSourceBundle
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case versionLabel = "VersionLabel"
            case deleteSourceBundle = "DeleteSourceBundle"
            case applicationName = "ApplicationName"
        }
    }

    public struct ValidationMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "Severity", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "OptionName", required: false, type: .string)
        ]
        /// The namespace to which the option belongs.
        public let namespace: String?
        /// An indication of the severity of this message:    error: This message indicates that this is not a valid setting for an option.    warning: This message is providing information you should take into account.  
        public let severity: ValidationSeverity?
        /// A message describing the error or warning.
        public let message: String?
        /// The name of the option.
        public let optionName: String?

        public init(namespace: String? = nil, severity: ValidationSeverity? = nil, message: String? = nil, optionName: String? = nil) {
            self.namespace = namespace
            self.severity = severity
            self.message = message
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case severity = "Severity"
            case message = "Message"
            case optionName = "OptionName"
        }
    }

    public enum EnvironmentHealthStatus: String, CustomStringConvertible, Codable {
        case nodata = "NoData"
        case unknown = "Unknown"
        case pending = "Pending"
        case ok = "Ok"
        case info = "Info"
        case warning = "Warning"
        case degraded = "Degraded"
        case severe = "Severe"
        public var description: String { return self.rawValue }
    }

    public struct Queue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "URL", required: false, type: .string)
        ]
        /// The name of the queue.
        public let name: String?
        /// The URL of the queue.
        public let uRL: String?

        public init(name: String? = nil, uRL: String? = nil) {
            self.name = name
            self.uRL = uRL
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case uRL = "URL"
        }
    }

    public enum PlatformStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case failed = "Failed"
        case ready = "Ready"
        case deleting = "Deleting"
        case deleted = "Deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEnvironmentManagedActionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the target environment.
        public let environmentName: String?
        /// To show only actions with a particular status, specify a status.
        public let status: ActionStatus?
        /// The environment ID of the target environment.
        public let environmentId: String?

        public init(environmentName: String? = nil, status: ActionStatus? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.status = status
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case status = "Status"
            case environmentId = "EnvironmentId"
        }
    }

    public struct DeletePlatformVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string)
        ]
        /// The ARN of the version of the custom platform.
        public let platformArn: String?

        public init(platformArn: String? = nil) {
            self.platformArn = platformArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
        }
    }

    public struct ConfigurationOptionSetting: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OptionName", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "ResourceName", required: false, type: .string)
        ]
        /// A unique namespace identifying the option's associated AWS resource.
        public let namespace: String?
        /// The name of the configuration option.
        public let optionName: String?
        /// The current value for the configuration option.
        public let value: String?
        /// A unique resource name for a time-based scaling configuration option.
        public let resourceName: String?

        public init(namespace: String? = nil, optionName: String? = nil, value: String? = nil, resourceName: String? = nil) {
            self.namespace = namespace
            self.optionName = optionName
            self.value = value
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case optionName = "OptionName"
            case value = "Value"
            case resourceName = "ResourceName"
        }
    }

    public struct CreateApplicationMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceLifecycleConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Specify an application resource lifecycle configuration to prevent your application from accumulating too many versions.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig?
        /// The name of the application. Constraint: This name must be unique within your account. If the specified name already exists, the action returns an InvalidParameterValue error.
        public let applicationName: String
        /// Describes the application.
        public let description: String?

        public init(resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil, applicationName: String, description: String? = nil) {
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
            case applicationName = "ApplicationName"
            case description = "Description"
        }
    }

    public struct LoadBalancerDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// The name of the LoadBalancer.
        public let loadBalancerName: String?
        /// The domain name of the LoadBalancer.
        public let domain: String?
        /// A list of Listeners used by the LoadBalancer.
        public let listeners: [Listener]?

        public init(loadBalancerName: String? = nil, domain: String? = nil, listeners: [Listener]? = nil) {
            self.loadBalancerName = loadBalancerName
            self.domain = domain
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "LoadBalancerName"
            case domain = "Domain"
            case listeners = "Listeners"
        }
    }

    public struct UpdateApplicationResourceLifecycleMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceLifecycleConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The lifecycle configuration.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig
        /// The name of the application.
        public let applicationName: String

        public init(resourceLifecycleConfig: ApplicationResourceLifecycleConfig, applicationName: String) {
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
            case applicationName = "ApplicationName"
        }
    }

    public struct SingleInstanceHealth: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Color", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Deployment", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "HealthStatus", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "System", required: false, type: .structure), 
            AWSShapeMember(label: "Causes", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// Represents the color indicator that gives you information about the health of the EC2 instance. For more information, see Health Colors and Statuses.
        public let color: String?
        /// The ID of the Amazon EC2 instance.
        public let instanceId: String?
        /// Information about the most recent deployment to an instance.
        public let deployment: Deployment?
        /// Request metrics from your application.
        public let applicationMetrics: ApplicationMetrics?
        /// The time at which the EC2 instance was launched.
        public let launchedAt: Double?
        /// Returns the health status of the specified instance. For more information, see Health Colors and Statuses.
        public let healthStatus: String?
        /// The instance's type.
        public let instanceType: String?
        /// Operating system metrics from the instance.
        public let system: SystemStatus?
        /// Represents the causes, which provide more information about the current health status.
        public let causes: [String]?
        /// The availability zone in which the instance runs.
        public let availabilityZone: String?

        public init(color: String? = nil, instanceId: String? = nil, deployment: Deployment? = nil, applicationMetrics: ApplicationMetrics? = nil, launchedAt: Double? = nil, healthStatus: String? = nil, instanceType: String? = nil, system: SystemStatus? = nil, causes: [String]? = nil, availabilityZone: String? = nil) {
            self.color = color
            self.instanceId = instanceId
            self.deployment = deployment
            self.applicationMetrics = applicationMetrics
            self.launchedAt = launchedAt
            self.healthStatus = healthStatus
            self.instanceType = instanceType
            self.system = system
            self.causes = causes
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case color = "Color"
            case instanceId = "InstanceId"
            case deployment = "Deployment"
            case applicationMetrics = "ApplicationMetrics"
            case launchedAt = "LaunchedAt"
            case healthStatus = "HealthStatus"
            case instanceType = "InstanceType"
            case system = "System"
            case causes = "Causes"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct EnvironmentResourceDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "LaunchConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "Triggers", required: false, type: .list), 
            AWSShapeMember(label: "Queues", required: false, type: .list), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        ///  The AutoScalingGroups used by this environment. 
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The Auto Scaling launch configurations in use by this environment.
        public let launchConfigurations: [LaunchConfiguration]?
        /// The AutoScaling triggers in use by this environment. 
        public let triggers: [Trigger]?
        /// The queues used by this environment.
        public let queues: [Queue]?
        /// The name of the environment.
        public let environmentName: String?
        /// The Amazon EC2 instances used by this environment.
        public let instances: [Instance]?
        /// The LoadBalancers in use by this environment.
        public let loadBalancers: [LoadBalancer]?

        public init(autoScalingGroups: [AutoScalingGroup]? = nil, launchConfigurations: [LaunchConfiguration]? = nil, triggers: [Trigger]? = nil, queues: [Queue]? = nil, environmentName: String? = nil, instances: [Instance]? = nil, loadBalancers: [LoadBalancer]? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.launchConfigurations = launchConfigurations
            self.triggers = triggers
            self.queues = queues
            self.environmentName = environmentName
            self.instances = instances
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroups = "AutoScalingGroups"
            case launchConfigurations = "LaunchConfigurations"
            case triggers = "Triggers"
            case queues = "Queues"
            case environmentName = "EnvironmentName"
            case instances = "Instances"
            case loadBalancers = "LoadBalancers"
        }
    }

    public struct DescribeEnvironmentsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludedDeletedBackTo", required: false, type: .timestamp), 
            AWSShapeMember(label: "EnvironmentIds", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "IncludeDeleted", required: false, type: .boolean), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentNames", required: false, type: .list)
        ]
        ///  If specified when IncludeDeleted is set to true, then environments deleted after this date are displayed. 
        public let includedDeletedBackTo: Double?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.
        public let environmentIds: [String]?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.
        public let applicationName: String?
        /// Indicates whether to include deleted environments:  true: Environments that have been deleted after IncludedDeletedBackTo are displayed.  false: Do not include deleted environments.
        public let includeDeleted: Bool?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.
        public let versionLabel: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.
        public let environmentNames: [String]?

        public init(includedDeletedBackTo: Double? = nil, environmentIds: [String]? = nil, applicationName: String? = nil, includeDeleted: Bool? = nil, versionLabel: String? = nil, environmentNames: [String]? = nil) {
            self.includedDeletedBackTo = includedDeletedBackTo
            self.environmentIds = environmentIds
            self.applicationName = applicationName
            self.includeDeleted = includeDeleted
            self.versionLabel = versionLabel
            self.environmentNames = environmentNames
        }

        private enum CodingKeys: String, CodingKey {
            case includedDeletedBackTo = "IncludedDeletedBackTo"
            case environmentIds = "EnvironmentIds"
            case applicationName = "ApplicationName"
            case includeDeleted = "IncludeDeleted"
            case versionLabel = "VersionLabel"
            case environmentNames = "EnvironmentNames"
        }
    }

    public struct DescribeApplicationVersionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabels", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Specify a maximum number of application versions to paginate in the request.
        public let maxRecords: Int32?
        /// Specify an application name to show only application versions for that application.
        public let applicationName: String?
        /// Specify a version label to show a specific application version.
        public let versionLabels: [String]?
        /// Specify a next token to retrieve the next page in a paginated request.
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, applicationName: String? = nil, versionLabels: [String]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.applicationName = applicationName
            self.versionLabels = versionLabels
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case applicationName = "ApplicationName"
            case versionLabels = "VersionLabels"
            case nextToken = "NextToken"
        }
    }

}