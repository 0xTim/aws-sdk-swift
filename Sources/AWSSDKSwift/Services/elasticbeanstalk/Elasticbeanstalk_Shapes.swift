// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Elasticbeanstalk {

    public struct EventDescriptionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  If returned, this indicates that there are more results to obtain. Use this token in the next DescribeEvents call to get the next batch of events. 
        public var nextToken: String? = nil
        ///  A list of EventDescription. 
        public var events: [EventDescription]? = nil

        public init() {}

        public init(nextToken: String? = nil, events: [EventDescription]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

    }

    public struct RequestEnvironmentInfoMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The type of information to request.
        public var infoType: String = ""
        /// The ID of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, infoType: String, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.infoType = infoType
            self.environmentId = environmentId
        }

    }

    public struct SolutionStackDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The permitted file types allowed for a solution stack.
        public var permittedFileTypes: [String]? = nil
        /// The name of the solution stack.
        public var solutionStackName: String? = nil

        public init() {}

        public init(permittedFileTypes: [String]? = nil, solutionStackName: String? = nil) {
            self.permittedFileTypes = permittedFileTypes
            self.solutionStackName = solutionStackName
        }

    }

    public struct PlatformProgrammingLanguage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the programming language.
        public var name: String? = nil
        /// The version of the programming language.
        public var version: String? = nil

        public init() {}

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

    }

    public struct ManagedAction: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of managed action.
        public var actionType: String? = nil
        /// The status of the managed action. If the action is Scheduled, you can apply it immediately with ApplyEnvironmentManagedAction.
        public var status: String? = nil
        /// A description of the managed action.
        public var actionDescription: String? = nil
        /// A unique identifier for the managed action.
        public var actionId: String? = nil
        /// The start time of the maintenance window in which the managed action will execute.
        public var windowStartTime: Date? = nil

        public init() {}

        public init(actionType: String? = nil, status: String? = nil, actionDescription: String? = nil, actionId: String? = nil, windowStartTime: Date? = nil) {
            self.actionType = actionType
            self.status = status
            self.actionDescription = actionDescription
            self.actionId = actionId
            self.windowStartTime = windowStartTime
        }

    }

    public struct RestartAppServerMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to restart the server for.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The ID of the environment to restart the server for.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

    }

    public struct CPUUtilization: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Percentage of time that the CPU has spent in the Nice state over the last 10 seconds.
        public var nice: Double? = nil
        /// Percentage of time that the CPU has spent in the IRQ state over the last 10 seconds.
        public var iRQ: Double? = nil
        /// Percentage of time that the CPU has spent in the SoftIRQ state over the last 10 seconds.
        public var softIRQ: Double? = nil
        /// Percentage of time that the CPU has spent in the Idle state over the last 10 seconds.
        public var idle: Double? = nil
        /// Percentage of time that the CPU has spent in the I/O Wait state over the last 10 seconds.
        public var iOWait: Double? = nil
        /// Percentage of time that the CPU has spent in the System state over the last 10 seconds.
        public var system: Double? = nil
        /// Percentage of time that the CPU has spent in the User state over the last 10 seconds.
        public var user: Double? = nil

        public init() {}

        public init(nice: Double? = nil, iRQ: Double? = nil, softIRQ: Double? = nil, idle: Double? = nil, iOWait: Double? = nil, system: Double? = nil, user: Double? = nil) {
            self.nice = nice
            self.iRQ = iRQ
            self.softIRQ = softIRQ
            self.idle = idle
            self.iOWait = iOWait
            self.system = system
            self.user = user
        }

    }

    public struct DescribeEnvironmentManagedActionHistoryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A pagination token that you pass to DescribeEnvironmentManagedActionHistory to get the next page of results.
        public var nextToken: String? = nil
        /// A list of completed and failed managed actions.
        public var managedActionHistoryItems: [ManagedActionHistoryItem]? = nil

        public init() {}

        public init(nextToken: String? = nil, managedActionHistoryItems: [ManagedActionHistoryItem]? = nil) {
            self.nextToken = nextToken
            self.managedActionHistoryItems = managedActionHistoryItems
        }

    }

    public struct TerminateEnvironmentMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to terminate.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// Indicates whether the associated AWS resources should shut down when the environment is terminated:    true: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.    false: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.    For more information, see the  AWS Elastic Beanstalk User Guide.    Default: true   Valid Values: true | false 
        public var terminateResources: Bool? = nil
        /// The ID of the environment to terminate.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentId: String? = nil
        /// Terminates the target environment even if another environment in the same group is dependent on it.
        public var forceTerminate: Bool? = nil

        public init() {}

        public init(environmentName: String? = nil, terminateResources: Bool? = nil, environmentId: String? = nil, forceTerminate: Bool? = nil) {
            self.environmentName = environmentName
            self.terminateResources = terminateResources
            self.environmentId = environmentId
            self.forceTerminate = forceTerminate
        }

    }

    public struct CreateStorageLocationResultMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the Amazon S3 bucket created.
        public var s3Bucket: String? = nil

        public init() {}

        public init(s3Bucket: String? = nil) {
            self.s3Bucket = s3Bucket
        }

    }

    public struct StatusCodes: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The percentage of requests over the last 10 seconds that resulted in a 5xx (500, 501, etc.) status code.
        public var status5xx: Int32? = nil
        /// The percentage of requests over the last 10 seconds that resulted in a 3xx (300, 301, etc.) status code.
        public var status3xx: Int32? = nil
        /// The percentage of requests over the last 10 seconds that resulted in a 2xx (200, 201, etc.) status code.
        public var status2xx: Int32? = nil
        /// The percentage of requests over the last 10 seconds that resulted in a 4xx (400, 401, etc.) status code.
        public var status4xx: Int32? = nil

        public init() {}

        public init(status5xx: Int32? = nil, status3xx: Int32? = nil, status2xx: Int32? = nil, status4xx: Int32? = nil) {
            self.status5xx = status5xx
            self.status3xx = status3xx
            self.status2xx = status2xx
            self.status4xx = status4xx
        }

    }

    public struct ApplyEnvironmentManagedActionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of managed action.
        public var actionType: String? = nil
        /// The status of the managed action.
        public var status: String? = nil
        /// A description of the managed action.
        public var actionDescription: String? = nil
        /// The action ID of the managed action.
        public var actionId: String? = nil

        public init() {}

        public init(actionType: String? = nil, status: String? = nil, actionDescription: String? = nil, actionId: String? = nil) {
            self.actionType = actionType
            self.status = status
            self.actionDescription = actionDescription
            self.actionId = actionId
        }

    }

    public struct EventDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The severity level of this event.
        public var severity: String? = nil
        /// The name of the configuration associated with this event.
        public var templateName: String? = nil
        /// The event message.
        public var message: String? = nil
        /// The ARN of the custom platform.
        public var platformArn: String? = nil
        /// The release label for the application version associated with this event.
        public var versionLabel: String? = nil
        /// The name of the environment associated with this event.
        public var environmentName: String? = nil
        /// The application associated with the event.
        public var applicationName: String? = nil
        /// The web service request ID for the activity of this event.
        public var requestId: String? = nil
        /// The date when the event occurred.
        public var eventDate: Date? = nil

        public init() {}

        public init(severity: String? = nil, templateName: String? = nil, message: String? = nil, platformArn: String? = nil, versionLabel: String? = nil, environmentName: String? = nil, applicationName: String? = nil, requestId: String? = nil, eventDate: Date? = nil) {
            self.severity = severity
            self.templateName = templateName
            self.message = message
            self.platformArn = platformArn
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.applicationName = applicationName
            self.requestId = requestId
            self.eventDate = eventDate
        }

    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value of the tag.
        public var value: String? = nil
        /// The key of the tag.
        public var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct DescribeEnvironmentManagedActionsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of upcoming and in-progress managed actions.
        public var managedActions: [ManagedAction]? = nil

        public init() {}

        public init(managedActions: [ManagedAction]? = nil) {
            self.managedActions = managedActions
        }

    }

    public struct PlatformSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The version of the operating system used by the platform.
        public var operatingSystemVersion: String? = nil
        /// The status of the platform. You can create an environment from the platform once it is ready.
        public var platformStatus: String? = nil
        /// The ARN of the platform.
        public var platformArn: String? = nil
        /// The additions associated with the platform.
        public var supportedAddonList: [String]? = nil
        /// The category of platform.
        public var platformCategory: String? = nil
        /// The operating system used by the platform.
        public var operatingSystemName: String? = nil
        /// The AWS account ID of the person who created the platform.
        public var platformOwner: String? = nil
        /// The tiers in which the platform runs.
        public var supportedTierList: [String]? = nil

        public init() {}

        public init(operatingSystemVersion: String? = nil, platformStatus: String? = nil, platformArn: String? = nil, supportedAddonList: [String]? = nil, platformCategory: String? = nil, operatingSystemName: String? = nil, platformOwner: String? = nil, supportedTierList: [String]? = nil) {
            self.operatingSystemVersion = operatingSystemVersion
            self.platformStatus = platformStatus
            self.platformArn = platformArn
            self.supportedAddonList = supportedAddonList
            self.platformCategory = platformCategory
            self.operatingSystemName = operatingSystemName
            self.platformOwner = platformOwner
            self.supportedTierList = supportedTierList
        }

    }

    public struct DescribeEnvironmentManagedActionHistoryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the target environment.
        public var environmentName: String? = nil
        /// The maximum number of items to return for a single request.
        public var maxItems: Int32? = nil
        /// The environment ID of the target environment.
        public var environmentId: String? = nil
        /// The pagination token returned by a previous request.
        public var nextToken: String? = nil

        public init() {}

        public init(environmentName: String? = nil, maxItems: Int32? = nil, environmentId: String? = nil, nextToken: String? = nil) {
            self.environmentName = environmentName
            self.maxItems = maxItems
            self.environmentId = environmentId
            self.nextToken = nextToken
        }

    }

    public struct PlatformFramework: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the framework.
        public var name: String? = nil
        /// The version of the framework.
        public var version: String? = nil

        public init() {}

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

    }

    public struct DescribeEnvironmentHealthRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify the environment by name. You must specify either this or an EnvironmentName, or both.
        public var environmentName: String? = nil
        /// Specify the environment by ID. You must specify either this or an EnvironmentName, or both.
        public var environmentId: String? = nil
        /// Specify the response elements to return. To retrieve all attributes, set to All. If no attribute names are specified, returns the name of the environment.
        public var attributeNames: [String]? = nil

        public init() {}

        public init(environmentName: String? = nil, environmentId: String? = nil, attributeNames: [String]? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.attributeNames = attributeNames
        }

    }

    public struct Trigger: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the trigger.
        public var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Amazon EC2 instance.
        public var id: String? = nil

        public init() {}

        public init(id: String? = nil) {
            self.id = id
        }

    }

    public struct DescribeEventsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time.
        public var startTime: Date? = nil
        /// Specifies the maximum number of events that can be returned, beginning with the most recent event.
        public var maxRecords: Int32? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration.
        public var templateName: String? = nil
        /// If specified, limits the events returned from this call to include only those with the specified severity or higher.
        public var severity: String? = nil
        /// The ARN of the version of the custom platform.
        public var platformArn: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version.
        public var versionLabel: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
        public var environmentName: String? = nil
        ///  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the EndTime. 
        public var endTime: Date? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
        public var environmentId: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application.
        public var applicationName: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID.
        public var requestId: String? = nil
        /// Pagination token. If specified, the events return the next batch of results.
        public var nextToken: String? = nil

        public init() {}

        public init(startTime: Date? = nil, maxRecords: Int32? = nil, templateName: String? = nil, severity: String? = nil, platformArn: String? = nil, versionLabel: String? = nil, environmentName: String? = nil, endTime: Date? = nil, environmentId: String? = nil, applicationName: String? = nil, requestId: String? = nil, nextToken: String? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.templateName = templateName
            self.severity = severity
            self.platformArn = platformArn
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.endTime = endTime
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.requestId = requestId
            self.nextToken = nextToken
        }

    }

    public struct CreateApplicationVersionMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A label identifying this version. Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public var versionLabel: String = ""
        /// Set to true to create an application with the specified name if it doesn't already exist.
        public var autoCreateApplication: Bool? = nil
        /// Settings for an AWS CodeBuild build.
        public var buildConfiguration: BuildConfiguration? = nil
        /// Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version.
        public var sourceBuildInformation: SourceBuildInformation? = nil
        /// Preprocesses and validates the environment manifest and configuration files in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.
        public var process: Bool? = nil
        ///  The name of the application. If no application is found with this name, and AutoCreateApplication is false, returns an InvalidParameterValue error. 
        public var applicationName: String = ""
        /// The Amazon S3 bucket and key that identify the location of the source bundle for this version.  The Amazon S3 bucket must be in the same region as the environment.  Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with SourceBuildInformation), but not both. If neither SourceBundle nor SourceBuildInformation are provided, Elastic Beanstalk uses a sample application.
        public var sourceBundle: S3Location? = nil
        /// Describes this version.
        public var description: String? = nil

        public init() {}

        public init(versionLabel: String, autoCreateApplication: Bool? = nil, buildConfiguration: BuildConfiguration? = nil, sourceBuildInformation: SourceBuildInformation? = nil, process: Bool? = nil, applicationName: String, sourceBundle: S3Location? = nil, description: String? = nil) {
            self.versionLabel = versionLabel
            self.autoCreateApplication = autoCreateApplication
            self.buildConfiguration = buildConfiguration
            self.sourceBuildInformation = sourceBuildInformation
            self.process = process
            self.applicationName = applicationName
            self.sourceBundle = sourceBundle
            self.description = description
        }

    }

    public struct SwapEnvironmentCNAMEsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the destination environment.  Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentName with the DestinationEnvironmentName. 
        public var destinationEnvironmentName: String? = nil
        /// The name of the source environment.  Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentName, you must specify the DestinationEnvironmentName. 
        public var sourceEnvironmentName: String? = nil
        /// The ID of the source environment.  Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentId, you must specify the DestinationEnvironmentId. 
        public var sourceEnvironmentId: String? = nil
        /// The ID of the destination environment.  Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentId with the DestinationEnvironmentId. 
        public var destinationEnvironmentId: String? = nil

        public init() {}

        public init(destinationEnvironmentName: String? = nil, sourceEnvironmentName: String? = nil, sourceEnvironmentId: String? = nil, destinationEnvironmentId: String? = nil) {
            self.destinationEnvironmentName = destinationEnvironmentName
            self.sourceEnvironmentName = sourceEnvironmentName
            self.sourceEnvironmentId = sourceEnvironmentId
            self.destinationEnvironmentId = destinationEnvironmentId
        }

    }

    public struct ComposeEnvironmentsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create.
        public var versionLabels: [String]? = nil
        /// The name of the application to which the specified source bundles belong.
        public var applicationName: String? = nil
        /// The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment's manifest ends with a + (plus) character. See Environment Manifest (env.yaml) for details.
        public var groupName: String? = nil

        public init() {}

        public init(versionLabels: [String]? = nil, applicationName: String? = nil, groupName: String? = nil) {
            self.versionLabels = versionLabels
            self.applicationName = applicationName
            self.groupName = groupName
        }

    }

    public struct EnvironmentResourcesDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Describes the LoadBalancer.
        public var loadBalancer: LoadBalancerDescription? = nil

        public init() {}

        public init(loadBalancer: LoadBalancerDescription? = nil) {
            self.loadBalancer = loadBalancer
        }

    }

    public struct CheckDNSAvailabilityMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The prefix used when this CNAME is reserved.
        public var cNAMEPrefix: String = ""

        public init() {}

        public init(cNAMEPrefix: String) {
            self.cNAMEPrefix = cNAMEPrefix
        }

    }

    public struct BuildConfiguration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Docker image to use for this build project.
        public var image: String = ""
        /// Information about the compute resources the build project will use.    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds     BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds     BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds   
        public var computeType: String? = nil
        /// The name of the artifact of the CodeBuild build. If provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label-artifact-name.zip. If not provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label.zip. 
        public var artifactName: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public var codeBuildServiceRole: String = ""
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        public var timeoutInMinutes: Int32? = nil

        public init() {}

        public init(image: String, computeType: String? = nil, artifactName: String? = nil, codeBuildServiceRole: String, timeoutInMinutes: Int32? = nil) {
            self.image = image
            self.computeType = computeType
            self.artifactName = artifactName
            self.codeBuildServiceRole = codeBuildServiceRole
            self.timeoutInMinutes = timeoutInMinutes
        }

    }

    public struct Latency: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The average latency for the slowest 5 percent of requests over the last 10 seconds.
        public var p95: Double? = nil
        /// The average latency for the slowest 90 percent of requests over the last 10 seconds.
        public var p10: Double? = nil
        /// The average latency for the slowest 10 percent of requests over the last 10 seconds.
        public var p90: Double? = nil
        /// The average latency for the slowest 15 percent of requests over the last 10 seconds.
        public var p85: Double? = nil
        /// The average latency for the slowest 50 percent of requests over the last 10 seconds.
        public var p50: Double? = nil
        /// The average latency for the slowest 25 percent of requests over the last 10 seconds.
        public var p75: Double? = nil
        /// The average latency for the slowest 1 percent of requests over the last 10 seconds.
        public var p99: Double? = nil
        /// The average latency for the slowest 0.1 percent of requests over the last 10 seconds.
        public var p999: Double? = nil

        public init() {}

        public init(p95: Double? = nil, p10: Double? = nil, p90: Double? = nil, p85: Double? = nil, p50: Double? = nil, p75: Double? = nil, p99: Double? = nil, p999: Double? = nil) {
            self.p95 = p95
            self.p10 = p10
            self.p90 = p90
            self.p85 = p85
            self.p50 = p50
            self.p75 = p75
            self.p99 = p99
            self.p999 = p999
        }

    }

    public struct LoadBalancer: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the LoadBalancer.
        public var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct RebuildEnvironmentMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to rebuild.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The ID of the environment to rebuild.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

    }

    public struct ManagedActionHistoryItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of the managed action.
        public var actionType: String? = nil
        /// The status of the action.
        public var status: String? = nil
        /// The date and time that the action finished executing.
        public var finishedTime: Date? = nil
        /// If the action failed, the type of failure.
        public var failureType: String? = nil
        /// A unique identifier for the managed action.
        public var actionId: String? = nil
        /// If the action failed, a description of the failure.
        public var failureDescription: String? = nil
        /// The date and time that the action started executing.
        public var executedTime: Date? = nil
        /// A description of the managed action.
        public var actionDescription: String? = nil

        public init() {}

        public init(actionType: String? = nil, status: String? = nil, finishedTime: Date? = nil, failureType: String? = nil, actionId: String? = nil, failureDescription: String? = nil, executedTime: Date? = nil, actionDescription: String? = nil) {
            self.actionType = actionType
            self.status = status
            self.finishedTime = finishedTime
            self.failureType = failureType
            self.actionId = actionId
            self.failureDescription = failureDescription
            self.executedTime = executedTime
            self.actionDescription = actionDescription
        }

    }

    public struct DescribePlatformVersionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Detailed information about the version of the platform.
        public var platformDescription: PlatformDescription? = nil

        public init() {}

        public init(platformDescription: PlatformDescription? = nil) {
            self.platformDescription = platformDescription
        }

    }

    public struct RetrieveEnvironmentInfoResultMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The EnvironmentInfoDescription of the environment. 
        public var environmentInfo: [EnvironmentInfoDescription]? = nil

        public init() {}

        public init(environmentInfo: [EnvironmentInfoDescription]? = nil) {
            self.environmentInfo = environmentInfo
        }

    }

    public struct InstanceHealthSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  Grey. An operation is in progress on an instance within the command timeout.
        public var pending: Int32? = nil
        ///  Red. The health agent is reporting a high number of request failures or other issues for an instance or environment.
        public var degraded: Int32? = nil
        ///  Yellow. The health agent is reporting a moderate number of request failures or other issues for an instance or environment.
        public var warning: Int32? = nil
        ///  Green. An instance is passing health checks and the health agent is not reporting any problems.
        public var ok: Int32? = nil
        ///  Green. An operation is in progress on an instance.
        public var info: Int32? = nil
        ///  Grey. AWS Elastic Beanstalk and the health agent are reporting no data on an instance.
        public var noData: Int32? = nil
        ///  Grey. AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.
        public var unknown: Int32? = nil
        ///  Red. The health agent is reporting a very high number of request failures or other issues for an instance or environment.
        public var severe: Int32? = nil

        public init() {}

        public init(pending: Int32? = nil, degraded: Int32? = nil, warning: Int32? = nil, ok: Int32? = nil, info: Int32? = nil, noData: Int32? = nil, unknown: Int32? = nil, severe: Int32? = nil) {
            self.pending = pending
            self.degraded = degraded
            self.warning = warning
            self.ok = ok
            self.info = info
            self.noData = noData
            self.unknown = unknown
            self.severe = severe
        }

    }

    public struct ApplicationDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The names of the configuration templates associated with this application.
        public var configurationTemplates: [String]? = nil
        /// User-defined description of the application.
        public var description: String? = nil
        /// The date when the application was last modified.
        public var dateUpdated: Date? = nil
        /// The lifecycle settings for the application.
        public var resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil
        /// The name of the application.
        public var applicationName: String? = nil
        /// The date when the application was created.
        public var dateCreated: Date? = nil
        /// The names of the versions for this application.
        public var versions: [String]? = nil

        public init() {}

        public init(configurationTemplates: [String]? = nil, description: String? = nil, dateUpdated: Date? = nil, resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil, applicationName: String? = nil, dateCreated: Date? = nil, versions: [String]? = nil) {
            self.configurationTemplates = configurationTemplates
            self.description = description
            self.dateUpdated = dateUpdated
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
            self.dateCreated = dateCreated
            self.versions = versions
        }

    }

    public struct Builder: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ARN of the builder.
        public var aRN: String? = nil

        public init() {}

        public init(aRN: String? = nil) {
            self.aRN = aRN
        }

    }

    public struct DescribeInstancesHealthRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify the AWS Elastic Beanstalk environment by name.
        public var environmentName: String? = nil
        /// Specify the AWS Elastic Beanstalk environment by ID.
        public var environmentId: String? = nil
        /// Specify the pagination token returned by a previous call.
        public var nextToken: String? = nil
        /// Specifies the response elements you wish to receive. To retrieve all attributes, set to All. If no attribute names are specified, returns a list of instances.
        public var attributeNames: [String]? = nil

        public init() {}

        public init(environmentName: String? = nil, environmentId: String? = nil, nextToken: String? = nil, attributeNames: [String]? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.nextToken = nextToken
            self.attributeNames = attributeNames
        }

    }

    public struct AutoScalingGroup: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the AutoScalingGroup . 
        public var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct CreatePlatformVersionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Detailed information about the new version of the custom platform.
        public var platformSummary: PlatformSummary? = nil
        /// The builder used to create the custom platform.
        public var builder: Builder? = nil

        public init() {}

        public init(platformSummary: PlatformSummary? = nil, builder: Builder? = nil) {
            self.platformSummary = platformSummary
            self.builder = builder
        }

    }

    public struct EnvironmentDescriptionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  Returns an EnvironmentDescription list. 
        public var environments: [EnvironmentDescription]? = nil

        public init() {}

        public init(environments: [EnvironmentDescription]? = nil) {
            self.environments = environments
        }

    }

    public struct SourceConfiguration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the configuration template.
        public var templateName: String? = nil
        /// The name of the application associated with the configuration.
        public var applicationName: String? = nil

        public init() {}

        public init(templateName: String? = nil, applicationName: String? = nil) {
            self.templateName = templateName
            self.applicationName = applicationName
        }

    }

    public struct CreateConfigurationTemplateMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, AWS Elastic Beanstalk sets the specified configuration option to the requested value. The new value overrides the value obtained from the solution stack or the source configuration template.
        public var optionSettings: [ConfigurationOptionSetting]? = nil
        /// If specified, AWS Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.  Values specified in the OptionSettings parameter of this call overrides any values obtained from the SourceConfiguration.   If no configuration template is found, returns an InvalidParameterValue error.   Constraint: If both the solution stack name parameter and the source configuration parameters are specified, the solution stack of the source configuration template must match the specified solution stack name or else AWS Elastic Beanstalk returns an InvalidParameterCombination error. 
        public var sourceConfiguration: SourceConfiguration? = nil
        /// The name of the configuration template. Constraint: This name must be unique per application. Default: If a configuration template already exists with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public var templateName: String = ""
        /// The name of the solution stack used by this configuration. The solution stack specifies the operating system, architecture, and application server for a configuration template. It determines the set of configuration options as well as the possible and default values.  Use ListAvailableSolutionStacks to obtain a list of available solution stacks.   A solution stack name or a source configuration parameter must be specified, otherwise AWS Elastic Beanstalk returns an InvalidParameterValue error.  If a solution stack name is not specified and the source configuration parameter is specified, AWS Elastic Beanstalk uses the same solution stack as the source configuration template.
        public var solutionStackName: String? = nil
        /// The ARN of the custome platform.
        public var platformArn: String? = nil
        /// The ID of the environment used with this configuration template.
        public var environmentId: String? = nil
        /// The name of the application to associate with this configuration template. If no application is found with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public var applicationName: String = ""
        /// Describes this configuration.
        public var description: String? = nil

        public init() {}

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, sourceConfiguration: SourceConfiguration? = nil, templateName: String, solutionStackName: String? = nil, platformArn: String? = nil, environmentId: String? = nil, applicationName: String, description: String? = nil) {
            self.optionSettings = optionSettings
            self.sourceConfiguration = sourceConfiguration
            self.templateName = templateName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.description = description
        }

    }

    public struct ConfigurationSettingsDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of the configuration options and their values in this configuration set.
        public var optionSettings: [ConfigurationOptionSetting]? = nil
        /// The date (in UTC time) when this configuration set was last modified.
        public var dateUpdated: Date? = nil
        ///  If not null, the name of the configuration template for this configuration set. 
        public var templateName: String? = nil
        /// The name of the solution stack this configuration set uses.
        public var solutionStackName: String? = nil
        /// The ARN of the custom platform.
        public var platformArn: String? = nil
        ///  If not null, the name of the environment for this configuration set. 
        public var environmentName: String? = nil
        /// The name of the application associated with this configuration set.
        public var applicationName: String? = nil
        ///  If this configuration set is associated with an environment, the DeploymentStatus parameter indicates the deployment status of this configuration set:     null: This configuration is not associated with a running environment.    pending: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.    deployed: This is the configuration that is currently deployed to the associated running environment.    failed: This is a draft configuration that failed to successfully deploy.  
        public var deploymentStatus: String? = nil
        /// The date (in UTC time) when this configuration set was created.
        public var dateCreated: Date? = nil
        /// Describes this configuration set.
        public var description: String? = nil

        public init() {}

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, dateUpdated: Date? = nil, templateName: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, environmentName: String? = nil, applicationName: String? = nil, deploymentStatus: String? = nil, dateCreated: Date? = nil, description: String? = nil) {
            self.optionSettings = optionSettings
            self.dateUpdated = dateUpdated
            self.templateName = templateName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.environmentName = environmentName
            self.applicationName = applicationName
            self.deploymentStatus = deploymentStatus
            self.dateCreated = dateCreated
            self.description = description
        }

    }

    public struct UpdateConfigurationTemplateMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of configuration option settings to update with the new specified option value.
        public var optionSettings: [ConfigurationOptionSetting]? = nil
        /// The name of the application associated with the configuration template to update.  If no application is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error. 
        public var applicationName: String = ""
        /// A list of configuration options to remove from the configuration set.  Constraint: You can remove only UserDefined configuration options. 
        public var optionsToRemove: [OptionSpecification]? = nil
        /// The name of the configuration template to update.  If no configuration template is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error. 
        public var templateName: String = ""
        /// A new description for the configuration.
        public var description: String? = nil

        public init() {}

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, applicationName: String, optionsToRemove: [OptionSpecification]? = nil, templateName: String, description: String? = nil) {
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.optionsToRemove = optionsToRemove
            self.templateName = templateName
            self.description = description
        }

    }

    public struct EnvironmentDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the configuration template used to originally launch this environment.
        public var templateName: String? = nil
        /// The last modified date for this environment.
        public var dateUpdated: Date? = nil
        /// The application version deployed in this environment.
        public var versionLabel: String? = nil
        /// The name of this environment.
        public var environmentName: String? = nil
        /// The URL to the CNAME for this environment.
        public var cNAME: String? = nil
        /// Returns the health status of the application running in your environment. For more information, see Health Colors and Statuses.
        public var healthStatus: String? = nil
        /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
        public var endpointURL: String? = nil
        /// A list of links to other environments in the same group.
        public var environmentLinks: [EnvironmentLink]? = nil
        /// The creation date for this environment.
        public var dateCreated: Date? = nil
        /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.  true: There is an update in progress.   false: There are no updates currently in progress. 
        public var abortableOperationInProgress: Bool? = nil
        /// Describes this environment.
        public var description: String? = nil
        /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:    Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.    Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.    Green: Indicates the environment is healthy and fully functional.    Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironement request.    Default: Grey 
        public var health: String? = nil
        /// The current operational status of the environment:    Launching: Environment is in the process of initial deployment.    Updating: Environment is in the process of updating its configuration settings or application version.    Ready: Environment is available to have an action performed on it, such as update or terminate.    Terminating: Environment is in the shut-down process.    Terminated: Environment is not running.  
        public var status: String? = nil
        ///  The name of the SolutionStack deployed with this environment. 
        public var solutionStackName: String? = nil
        /// The ARN of the custom platform.
        public var platformArn: String? = nil
        /// The ID of this environment.
        public var environmentId: String? = nil
        /// The description of the AWS resources used by this environment.
        public var resources: EnvironmentResourcesDescription? = nil
        /// The name of the application associated with this environment.
        public var applicationName: String? = nil
        /// Describes the current tier of this environment.
        public var tier: EnvironmentTier? = nil

        public init() {}

        public init(templateName: String? = nil, dateUpdated: Date? = nil, versionLabel: String? = nil, environmentName: String? = nil, cNAME: String? = nil, healthStatus: String? = nil, endpointURL: String? = nil, environmentLinks: [EnvironmentLink]? = nil, dateCreated: Date? = nil, abortableOperationInProgress: Bool? = nil, description: String? = nil, health: String? = nil, status: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, environmentId: String? = nil, resources: EnvironmentResourcesDescription? = nil, applicationName: String? = nil, tier: EnvironmentTier? = nil) {
            self.templateName = templateName
            self.dateUpdated = dateUpdated
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.cNAME = cNAME
            self.healthStatus = healthStatus
            self.endpointURL = endpointURL
            self.environmentLinks = environmentLinks
            self.dateCreated = dateCreated
            self.abortableOperationInProgress = abortableOperationInProgress
            self.description = description
            self.health = health
            self.status = status
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.resources = resources
            self.applicationName = applicationName
            self.tier = tier
        }

    }

    public struct ConfigurationOptionDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, the configuration option must be a string value that satisfies this regular expression.
        public var regex: OptionRestrictionRegex? = nil
        /// If specified, the configuration option must be a numeric value less than this value.
        public var maxValue: Int32? = nil
        /// An indication of which action is required if the value for this configuration option changes:    NoInterruption : There is no interruption to the environment or application availability.    RestartEnvironment : The environment is entirely restarted, all AWS resources are deleted and recreated, and the environment is unavailable during the process.    RestartApplicationServer : The environment is available the entire time. However, a short application outage occurs when the application servers on the running Amazon EC2 instances are restarted.  
        public var changeSeverity: String? = nil
        /// If specified, values for the configuration option are selected from this list.
        public var valueOptions: [String]? = nil
        /// If specified, the configuration option must be a string value no longer than this value.
        public var maxLength: Int32? = nil
        /// An indication of which type of values this option has and whether it is allowable to select one or more than one of the possible values:    Scalar : Values for this option are a single selection from the possible values, or an unformatted string, or numeric value governed by the MIN/MAX/Regex constraints.    List : Values for this option are multiple selections from the possible values.    Boolean : Values for this option are either true or false .    Json : Values for this option are a JSON representation of a ConfigDocument.  
        public var valueType: String? = nil
        /// The name of the configuration option.
        public var name: String? = nil
        /// If specified, the configuration option must be a numeric value greater than this value.
        public var minValue: Int32? = nil
        /// An indication of whether the user defined this configuration option:    true : This configuration option was defined by the user. It is a valid choice for specifying if this as an Option to Remove when updating configuration settings.     false : This configuration was not defined by the user.    Constraint: You can remove only UserDefined options from a configuration.   Valid Values: true | false 
        public var userDefined: Bool? = nil
        /// A unique namespace identifying the option's associated AWS resource.
        public var namespace: String? = nil
        /// The default value for this configuration option.
        public var defaultValue: String? = nil

        public init() {}

        public init(regex: OptionRestrictionRegex? = nil, maxValue: Int32? = nil, changeSeverity: String? = nil, valueOptions: [String]? = nil, maxLength: Int32? = nil, valueType: String? = nil, name: String? = nil, minValue: Int32? = nil, userDefined: Bool? = nil, namespace: String? = nil, defaultValue: String? = nil) {
            self.regex = regex
            self.maxValue = maxValue
            self.changeSeverity = changeSeverity
            self.valueOptions = valueOptions
            self.maxLength = maxLength
            self.valueType = valueType
            self.name = name
            self.minValue = minValue
            self.userDefined = userDefined
            self.namespace = namespace
            self.defaultValue = defaultValue
        }

    }

    public struct ConfigurationSettingsValidationMessages: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of ValidationMessage. 
        public var messages: [ValidationMessage]? = nil

        public init() {}

        public init(messages: [ValidationMessage]? = nil) {
            self.messages = messages
        }

    }

    public struct SourceBuildInformation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The location of the source code, as a formatted string, depending on the value of SourceRepository    For CodeCommit, the format is the repository name and commit ID, separated by a forward slash. For example, my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a.   For S3, the format is the S3 bucket name and object key, separated by a forward slash. For example, my-s3-bucket/Folders/my-source-file.  
        public var sourceLocation: String = ""
        /// The type of repository.    Git     Zip   
        public var sourceType: String = ""
        /// Location where the repository is stored.    CodeCommit     S3   
        public var sourceRepository: String = ""

        public init() {}

        public init(sourceLocation: String, sourceType: String, sourceRepository: String) {
            self.sourceLocation = sourceLocation
            self.sourceType = sourceType
            self.sourceRepository = sourceRepository
        }

    }

    public struct ApplicationResourceLifecycleDescriptionMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The lifecycle configuration.
        public var resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil
        /// The name of the application.
        public var applicationName: String? = nil

        public init() {}

        public init(resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil, applicationName: String? = nil) {
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
        }

    }

    public struct ApplicationMetrics: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Represents the average latency for the slowest X percent of requests over the last 10 seconds. Latencies are in seconds with one millisecond resolution.
        public var latency: Latency? = nil
        /// Average number of requests handled by the web server per second over the last 10 seconds.
        public var requestCount: Int32? = nil
        /// The amount of time that the metrics cover (usually 10 seconds). For example, you might have 5 requests (request_count) within the most recent time slice of 10 seconds (duration).
        public var duration: Int32? = nil
        /// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response.
        public var statusCodes: StatusCodes? = nil

        public init() {}

        public init(latency: Latency? = nil, requestCount: Int32? = nil, duration: Int32? = nil, statusCodes: StatusCodes? = nil) {
            self.latency = latency
            self.requestCount = requestCount
            self.duration = duration
            self.statusCodes = statusCodes
        }

    }

    public struct ApplicationDescriptionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This parameter contains a list of ApplicationDescription.
        public var applications: [ApplicationDescription]? = nil

        public init() {}

        public init(applications: [ApplicationDescription]? = nil) {
            self.applications = applications
        }

    }

    public struct DescribeConfigurationOptionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment whose configuration options you want to describe.
        public var environmentName: String? = nil
        /// If specified, restricts the descriptions to only the specified options.
        public var options: [OptionSpecification]? = nil
        /// The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment.
        public var applicationName: String? = nil
        /// The name of the solution stack whose configuration options you want to describe.
        public var solutionStackName: String? = nil
        /// The ARN of the custom platform.
        public var platformArn: String? = nil
        /// The name of the configuration template whose configuration options you want to describe.
        public var templateName: String? = nil

        public init() {}

        public init(environmentName: String? = nil, options: [OptionSpecification]? = nil, applicationName: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, templateName: String? = nil) {
            self.environmentName = environmentName
            self.options = options
            self.applicationName = applicationName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.templateName = templateName
        }

    }

    public struct UpdateApplicationMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the application to update. If no such application is found, UpdateApplication returns an InvalidParameterValue error. 
        public var applicationName: String = ""
        /// A new description for the application. Default: If not specified, AWS Elastic Beanstalk does not update the description.
        public var description: String? = nil

        public init() {}

        public init(applicationName: String, description: String? = nil) {
            self.applicationName = applicationName
            self.description = description
        }

    }

    public struct OptionRestrictionRegex: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The regular expression pattern that a string configuration option value with this restriction must match.
        public var pattern: String? = nil
        /// A unique name representing this regular expression.
        public var label: String? = nil

        public init() {}

        public init(pattern: String? = nil, label: String? = nil) {
            self.pattern = pattern
            self.label = label
        }

    }

    public struct Deployment: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// For in-progress deployments, the time that the deloyment started. For completed deployments, the time that the deployment ended.
        public var deploymentTime: Date? = nil
        /// The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.
        public var deploymentId: Int64? = nil
        /// The status of the deployment:    In Progress : The deployment is in progress.    Deployed : The deployment succeeded.    Failed : The deployment failed.  
        public var status: String? = nil
        /// The version label of the application version in the deployment.
        public var versionLabel: String? = nil

        public init() {}

        public init(deploymentTime: Date? = nil, deploymentId: Int64? = nil, status: String? = nil, versionLabel: String? = nil) {
            self.deploymentTime = deploymentTime
            self.deploymentId = deploymentId
            self.status = status
            self.versionLabel = versionLabel
        }

    }

    public struct ApplicationResourceLifecycleConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The application version lifecycle configuration.
        public var versionLifecycleConfig: ApplicationVersionLifecycleConfig? = nil
        /// The ARN of an IAM service role that Elastic Beanstalk has permission to assume.
        public var serviceRole: String? = nil

        public init() {}

        public init(versionLifecycleConfig: ApplicationVersionLifecycleConfig? = nil, serviceRole: String? = nil) {
            self.versionLifecycleConfig = versionLifecycleConfig
            self.serviceRole = serviceRole
        }

    }

    public struct DescribeApplicationsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names.
        public var applicationNames: [String]? = nil

        public init() {}

        public init(applicationNames: [String]? = nil) {
            self.applicationNames = applicationNames
        }

    }

    public struct EnvironmentResourceDescriptionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of EnvironmentResourceDescription. 
        public var environmentResources: EnvironmentResourceDescription? = nil

        public init() {}

        public init(environmentResources: EnvironmentResourceDescription? = nil) {
            self.environmentResources = environmentResources
        }

    }

    public struct SystemStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Load average in the last 1-minute, 5-minute, and 15-minute periods. For more information, see Operating System Metrics.
        public var loadAverage: [Double]? = nil
        /// CPU utilization metrics for the instance.
        public var cPUUtilization: CPUUtilization? = nil

        public init() {}

        public init(loadAverage: [Double]? = nil, cPUUtilization: CPUUtilization? = nil) {
            self.loadAverage = loadAverage
            self.cPUUtilization = cPUUtilization
        }

    }

    public struct ApplyEnvironmentManagedActionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the target environment.
        public var environmentName: String? = nil
        /// The action ID of the scheduled managed action to execute.
        public var actionId: String = ""
        /// The environment ID of the target environment.
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, actionId: String, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.actionId = actionId
            self.environmentId = environmentId
        }

    }

    public struct DescribePlatformVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ARN of the version of the platform.
        public var platformArn: String? = nil

        public init() {}

        public init(platformArn: String? = nil) {
            self.platformArn = platformArn
        }

    }

    public struct ConfigurationOptionsDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of ConfigurationOptionDescription. 
        public var options: [ConfigurationOptionDescription]? = nil
        /// The ARN of the custom platform.
        public var platformArn: String? = nil
        /// The name of the solution stack these configuration options belong to.
        public var solutionStackName: String? = nil

        public init() {}

        public init(options: [ConfigurationOptionDescription]? = nil, platformArn: String? = nil, solutionStackName: String? = nil) {
            self.options = options
            self.platformArn = platformArn
            self.solutionStackName = solutionStackName
        }

    }

    public struct ApplicationVersionDescriptionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// For a paginated request, the token that you can pass in a subsequent request to get the next page.
        public var nextToken: String? = nil
        /// List of ApplicationVersionDescription objects sorted in order of creation.
        public var applicationVersions: [ApplicationVersionDescription]? = nil

        public init() {}

        public init(nextToken: String? = nil, applicationVersions: [ApplicationVersionDescription]? = nil) {
            self.nextToken = nextToken
            self.applicationVersions = applicationVersions
        }

    }

    public struct ApplicationVersionDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the application version.
        public var description: String? = nil
        /// The processing status of the application version.
        public var status: String? = nil
        /// The last modified date of the application version.
        public var dateUpdated: Date? = nil
        /// A unique identifier for the application version.
        public var versionLabel: String? = nil
        /// If the version's source code was retrieved from AWS CodeCommit, the location of the source code for the application version.
        public var sourceBuildInformation: SourceBuildInformation? = nil
        /// The name of the application to which the application version belongs.
        public var applicationName: String? = nil
        /// The storage location of the application version's source bundle in Amazon S3.
        public var sourceBundle: S3Location? = nil
        /// Reference to the artifact from the AWS CodeBuild build.
        public var buildArn: String? = nil
        /// The creation date of the application version.
        public var dateCreated: Date? = nil

        public init() {}

        public init(description: String? = nil, status: String? = nil, dateUpdated: Date? = nil, versionLabel: String? = nil, sourceBuildInformation: SourceBuildInformation? = nil, applicationName: String? = nil, sourceBundle: S3Location? = nil, buildArn: String? = nil, dateCreated: Date? = nil) {
            self.description = description
            self.status = status
            self.dateUpdated = dateUpdated
            self.versionLabel = versionLabel
            self.sourceBuildInformation = sourceBuildInformation
            self.applicationName = applicationName
            self.sourceBundle = sourceBundle
            self.buildArn = buildArn
            self.dateCreated = dateCreated
        }

    }

    public struct DescribeConfigurationSettingsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to describe.  Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The name of the configuration template to describe.  Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns a MissingRequiredParameter error. 
        public var templateName: String? = nil
        /// The application for the environment or configuration template.
        public var applicationName: String = ""

        public init() {}

        public init(environmentName: String? = nil, templateName: String? = nil, applicationName: String) {
            self.environmentName = environmentName
            self.templateName = templateName
            self.applicationName = applicationName
        }

    }

    public struct OptionSpecification: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique namespace identifying the option's associated AWS resource.
        public var namespace: String? = nil
        /// The name of the configuration option.
        public var optionName: String? = nil
        /// A unique resource name for a time-based scaling configuration option.
        public var resourceName: String? = nil

        public init() {}

        public init(namespace: String? = nil, optionName: String? = nil, resourceName: String? = nil) {
            self.namespace = namespace
            self.optionName = optionName
            self.resourceName = resourceName
        }

    }

    public struct Listener: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The port that is used by the Listener.
        public var port: Int32? = nil
        /// The protocol that is used by the Listener.
        public var `protocol`: String? = nil

        public init() {}

        public init(port: Int32? = nil, protocol: String? = nil) {
            self.port = port
            self.`protocol` = `protocol`
        }

    }

    public struct ApplicationVersionLifecycleConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify a max count rule to restrict the number of application versions that are retained for an application.
        public var maxCountRule: MaxCountRule? = nil
        /// Specify a max age rule to restrict the length of time that application versions are retained for an application.
        public var maxAgeRule: MaxAgeRule? = nil

        public init() {}

        public init(maxCountRule: MaxCountRule? = nil, maxAgeRule: MaxAgeRule? = nil) {
            self.maxCountRule = maxCountRule
            self.maxAgeRule = maxAgeRule
        }

    }

    public struct DescribeInstancesHealthResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Detailed health information about each instance.
        public var instanceHealthList: [SingleInstanceHealth]? = nil
        /// Pagination token for the next page of results, if available.
        public var nextToken: String? = nil
        /// The date and time that the health information was retrieved.
        public var refreshedAt: Date? = nil

        public init() {}

        public init(instanceHealthList: [SingleInstanceHealth]? = nil, nextToken: String? = nil, refreshedAt: Date? = nil) {
            self.instanceHealthList = instanceHealthList
            self.nextToken = nextToken
            self.refreshedAt = refreshedAt
        }

    }

    public struct ApplicationDescriptionMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The ApplicationDescription of the application. 
        public var application: ApplicationDescription? = nil

        public init() {}

        public init(application: ApplicationDescription? = nil) {
            self.application = application
        }

    }

    public struct DescribeEnvironmentHealthResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The environment's operational status. Ready, Launching, Updating, Terminating, or Terminated.
        public var status: String? = nil
        /// The health color of the environment.
        public var color: String? = nil
        /// Summary health information for the instances in the environment.
        public var instancesHealth: InstanceHealthSummary? = nil
        /// Application request metrics for the environment.
        public var applicationMetrics: ApplicationMetrics? = nil
        /// The environment's name.
        public var environmentName: String? = nil
        /// The health status of the environment. For example, Ok.
        public var healthStatus: String? = nil
        /// Descriptions of the data that contributed to the environment's current health status.
        public var causes: [String]? = nil
        /// The date and time that the health information was retrieved.
        public var refreshedAt: Date? = nil

        public init() {}

        public init(status: String? = nil, color: String? = nil, instancesHealth: InstanceHealthSummary? = nil, applicationMetrics: ApplicationMetrics? = nil, environmentName: String? = nil, healthStatus: String? = nil, causes: [String]? = nil, refreshedAt: Date? = nil) {
            self.status = status
            self.color = color
            self.instancesHealth = instancesHealth
            self.applicationMetrics = applicationMetrics
            self.environmentName = environmentName
            self.healthStatus = healthStatus
            self.causes = causes
            self.refreshedAt = refreshedAt
        }

    }

    public struct RetrieveEnvironmentInfoMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the data's environment.  If no such environment is found, returns an InvalidParameterValue error.   Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The type of information to retrieve.
        public var infoType: String = ""
        /// The ID of the data's environment. If no such environment is found, returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, infoType: String, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.infoType = infoType
            self.environmentId = environmentId
        }

    }

    public struct ConfigurationSettingsDescriptions: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of ConfigurationSettingsDescription. 
        public var configurationSettings: [ConfigurationSettingsDescription]? = nil

        public init() {}

        public init(configurationSettings: [ConfigurationSettingsDescription]? = nil) {
            self.configurationSettings = configurationSettings
        }

    }

    public struct AbortEnvironmentUpdateMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This specifies the name of the environment with the in-progress update that you want to cancel.
        public var environmentName: String? = nil
        /// This specifies the ID of the environment with the in-progress update that you want to cancel.
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

    }

    public struct MaxCountRule: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify true to apply the rule, or false to disable it.
        public var enabled: Bool = false
        /// Specify the maximum number of application versions to retain.
        public var maxCount: Int32? = nil
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public var deleteSourceFromS3: Bool? = nil

        public init() {}

        public init(enabled: Bool, maxCount: Int32? = nil, deleteSourceFromS3: Bool? = nil) {
            self.enabled = enabled
            self.maxCount = maxCount
            self.deleteSourceFromS3 = deleteSourceFromS3
        }

    }

    public struct DescribeEnvironmentResourcesMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to retrieve AWS resource usage data.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The ID of the environment to retrieve AWS resource usage data.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

    }

    public struct ListAvailableSolutionStacksResultMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of available solution stacks and their SolutionStackDescription. 
        public var solutionStackDetails: [SolutionStackDescription]? = nil
        /// A list of available solution stacks.
        public var solutionStacks: [String]? = nil

        public init() {}

        public init(solutionStackDetails: [SolutionStackDescription]? = nil, solutionStacks: [String]? = nil) {
            self.solutionStackDetails = solutionStackDetails
            self.solutionStacks = solutionStacks
        }

    }

    public struct S3Location: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon S3 bucket where the data is located.
        public var s3Bucket: String? = nil
        /// The Amazon S3 key where the data is located.
        public var s3Key: String? = nil

        public init() {}

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

    }

    public struct ValidateConfigurationSettingsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to validate the settings against. Condition: You cannot specify both this and a configuration template name.
        public var environmentName: String? = nil
        /// A list of the options and desired values to evaluate.
        public var optionSettings: [ConfigurationOptionSetting] = []
        /// The name of the application that the configuration template or environment belongs to.
        public var applicationName: String = ""
        /// The name of the configuration template to validate the settings against. Condition: You cannot specify both this and an environment name.
        public var templateName: String? = nil

        public init() {}

        public init(environmentName: String? = nil, optionSettings: [ConfigurationOptionSetting], applicationName: String, templateName: String? = nil) {
            self.environmentName = environmentName
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.templateName = templateName
        }

    }

    public struct CreatePlatformVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number, such as 1.0.2, for the new platform version.
        public var platformVersion: String = ""
        /// The name of your custom platform.
        public var platformName: String = ""
        /// The name of the builder environment.
        public var environmentName: String? = nil
        /// The configuration option settings to apply to the builder environment.
        public var optionSettings: [ConfigurationOptionSetting]? = nil
        /// The location of the platform definition archive in Amazon S3.
        public var platformDefinitionBundle: S3Location = S3Location()

        public init() {}

        public init(platformVersion: String, platformName: String, environmentName: String? = nil, optionSettings: [ConfigurationOptionSetting]? = nil, platformDefinitionBundle: S3Location) {
            self.platformVersion = platformVersion
            self.platformName = platformName
            self.environmentName = environmentName
            self.optionSettings = optionSettings
            self.platformDefinitionBundle = platformDefinitionBundle
        }

    }

    public struct CreateEnvironmentMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template.
        public var optionSettings: [ConfigurationOptionSetting]? = nil
        ///  The name of the configuration template to use in deployment. If no configuration template is found with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public var templateName: String? = nil
        /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name parameter. See Environment Manifest (env.yaml) for details.
        public var groupName: String? = nil
        /// The name of the application version to deploy.  If the specified application has no associated application versions, AWS Elastic Beanstalk UpdateEnvironment returns an InvalidParameterValue error.  Default: If not specified, AWS Elastic Beanstalk attempts to launch the sample application in the container.
        public var versionLabel: String? = nil
        /// This specifies the tags applied to resources in the environment.
        public var tags: [Tag]? = nil
        /// A unique name for the deployment environment. Used in the application URL. Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It cannot start or end with a hyphen. This name must be unique in your account. If the specified name already exists, AWS Elastic Beanstalk returns an InvalidParameterValue error.  Default: If the CNAME parameter is not specified, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.
        public var environmentName: String? = nil
        /// Describes this environment.
        public var description: String? = nil
        /// This is an alternative to specifying a template name. If specified, AWS Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack.
        public var solutionStackName: String? = nil
        /// The ARN of the custom platform.
        public var platformArn: String? = nil
        /// If specified, the environment attempts to use this value as the prefix for the CNAME. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
        public var cNAMEPrefix: String? = nil
        /// A list of custom user-defined configuration options to remove from the configuration set for this new environment.
        public var optionsToRemove: [OptionSpecification]? = nil
        /// The name of the application that contains the version to be deployed.  If no application is found with this name, CreateEnvironment returns an InvalidParameterValue error. 
        public var applicationName: String = ""
        /// This specifies the tier to use for creating this environment.
        public var tier: EnvironmentTier? = nil

        public init() {}

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, templateName: String? = nil, groupName: String? = nil, versionLabel: String? = nil, tags: [Tag]? = nil, environmentName: String? = nil, description: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, cNAMEPrefix: String? = nil, optionsToRemove: [OptionSpecification]? = nil, applicationName: String, tier: EnvironmentTier? = nil) {
            self.optionSettings = optionSettings
            self.templateName = templateName
            self.groupName = groupName
            self.versionLabel = versionLabel
            self.tags = tags
            self.environmentName = environmentName
            self.description = description
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.cNAMEPrefix = cNAMEPrefix
            self.optionsToRemove = optionsToRemove
            self.applicationName = applicationName
            self.tier = tier
        }

    }

    public struct DeletePlatformVersionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Detailed information about the version of the custom platform.
        public var platformSummary: PlatformSummary? = nil

        public init() {}

        public init(platformSummary: PlatformSummary? = nil) {
            self.platformSummary = platformSummary
        }

    }

    public struct CustomAmi: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of virtualization used to create the custom AMI.
        public var virtualizationType: String? = nil
        /// THe ID of the image used to create the custom AMI.
        public var imageId: String? = nil

        public init() {}

        public init(virtualizationType: String? = nil, imageId: String? = nil) {
            self.virtualizationType = virtualizationType
            self.imageId = imageId
        }

    }

    public struct CheckDNSAvailabilityResultMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The fully qualified CNAME to reserve when CreateEnvironment is called with the provided prefix.
        public var fullyQualifiedCNAME: String? = nil
        /// Indicates if the specified CNAME is available:    true : The CNAME is available.    false : The CNAME is not available.  
        public var available: Bool? = nil

        public init() {}

        public init(fullyQualifiedCNAME: String? = nil, available: Bool? = nil) {
            self.fullyQualifiedCNAME = fullyQualifiedCNAME
            self.available = available
        }

    }

    public struct DeleteConfigurationTemplateMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the configuration template to delete.
        public var templateName: String = ""
        /// The name of the application to delete the configuration template from.
        public var applicationName: String = ""

        public init() {}

        public init(templateName: String, applicationName: String) {
            self.templateName = templateName
            self.applicationName = applicationName
        }

    }

    public struct PlatformFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The custom platform attribute to which the filter values are applied. Valid Values: PlatformName | PlatformVersion | PlatformStatus | PlatformOwner 
        public var type: String? = nil
        /// The operator to apply to the Type with each of the Values.  Valid Values: = (equal to) | != (not equal to) | &lt; (less than) | &lt;= (less than or equal to) | &gt; (greater than) | &gt;= (greater than or equal to) | contains | begins_with | ends_with 
        public var `operator`: String? = nil
        /// The list of values applied to the custom platform attribute.
        public var values: [String]? = nil

        public init() {}

        public init(type: String? = nil, operator: String? = nil, values: [String]? = nil) {
            self.type = type
            self.`operator` = `operator`
            self.values = values
        }

    }

    public struct PlatformDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date when the platform was last updated.
        public var dateUpdated: Date? = nil
        /// The status of the platform.
        public var platformStatus: String? = nil
        /// The additions supported by the platform.
        public var supportedAddonList: [String]? = nil
        /// The version of the platform.
        public var platformVersion: String? = nil
        /// The custom AMIs supported by the platform.
        public var customAmiList: [CustomAmi]? = nil
        /// Information about the maintainer of the platform.
        public var maintainer: String? = nil
        /// The operating system used by the platform.
        public var operatingSystemName: String? = nil
        /// The date when the platform was created.
        public var dateCreated: Date? = nil
        /// The AWS account ID of the person who created the platform.
        public var platformOwner: String? = nil
        /// The description of the platform.
        public var description: String? = nil
        /// The category of the platform.
        public var platformCategory: String? = nil
        /// The name of the platform.
        public var platformName: String? = nil
        /// The version of the operating system used by the platform.
        public var operatingSystemVersion: String? = nil
        /// The name of the solution stack used by the platform.
        public var solutionStackName: String? = nil
        /// The ARN of the platform.
        public var platformArn: String? = nil
        /// The tiers supported by the platform.
        public var supportedTierList: [String]? = nil
        /// The frameworks supported by the platform.
        public var frameworks: [PlatformFramework]? = nil
        /// The programming languages supported by the platform.
        public var programmingLanguages: [PlatformProgrammingLanguage]? = nil

        public init() {}

        public init(dateUpdated: Date? = nil, platformStatus: String? = nil, supportedAddonList: [String]? = nil, platformVersion: String? = nil, customAmiList: [CustomAmi]? = nil, maintainer: String? = nil, operatingSystemName: String? = nil, dateCreated: Date? = nil, platformOwner: String? = nil, description: String? = nil, platformCategory: String? = nil, platformName: String? = nil, operatingSystemVersion: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, supportedTierList: [String]? = nil, frameworks: [PlatformFramework]? = nil, programmingLanguages: [PlatformProgrammingLanguage]? = nil) {
            self.dateUpdated = dateUpdated
            self.platformStatus = platformStatus
            self.supportedAddonList = supportedAddonList
            self.platformVersion = platformVersion
            self.customAmiList = customAmiList
            self.maintainer = maintainer
            self.operatingSystemName = operatingSystemName
            self.dateCreated = dateCreated
            self.platformOwner = platformOwner
            self.description = description
            self.platformCategory = platformCategory
            self.platformName = platformName
            self.operatingSystemVersion = operatingSystemVersion
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.supportedTierList = supportedTierList
            self.frameworks = frameworks
            self.programmingLanguages = programmingLanguages
        }

    }

    public struct UpdateEnvironmentMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.
        public var optionSettings: [ConfigurationOptionSetting]? = nil
        /// If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public var templateName: String? = nil
        /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See Environment Manifest (env.yaml) for details.
        public var groupName: String? = nil
        /// This specifies the platform version that the environment will run after the environment is updated.
        public var solutionStackName: String? = nil
        /// The ARN of the platform, if used.
        public var platformArn: String? = nil
        /// A list of custom user-defined configuration options to remove from the configuration set for this environment.
        public var optionsToRemove: [OptionSpecification]? = nil
        /// If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an InvalidParameterValue error. 
        public var versionLabel: String? = nil
        /// The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentName: String? = nil
        /// The ID of the environment to update. If no environment with this ID exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public var environmentId: String? = nil
        /// The name of the application with which the environment is associated.
        public var applicationName: String? = nil
        /// This specifies the tier to use to update the environment. Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns InvalidParameterValue error. 
        public var tier: EnvironmentTier? = nil
        /// If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.
        public var description: String? = nil

        public init() {}

        public init(optionSettings: [ConfigurationOptionSetting]? = nil, templateName: String? = nil, groupName: String? = nil, solutionStackName: String? = nil, platformArn: String? = nil, optionsToRemove: [OptionSpecification]? = nil, versionLabel: String? = nil, environmentName: String? = nil, environmentId: String? = nil, applicationName: String? = nil, tier: EnvironmentTier? = nil, description: String? = nil) {
            self.optionSettings = optionSettings
            self.templateName = templateName
            self.groupName = groupName
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
            self.optionsToRemove = optionsToRemove
            self.versionLabel = versionLabel
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.tier = tier
            self.description = description
        }

    }

    public struct DeleteApplicationMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the application to delete.
        public var applicationName: String = ""
        /// When set to true, running environments will be terminated before deleting the application.
        public var terminateEnvByForce: Bool? = nil

        public init() {}

        public init(applicationName: String, terminateEnvByForce: Bool? = nil) {
            self.applicationName = applicationName
            self.terminateEnvByForce = terminateEnvByForce
        }

    }

    public struct EnvironmentTier: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of this environment tier.
        public var type: String? = nil
        /// The name of this environment tier.
        public var name: String? = nil
        /// The version of this environment tier.
        public var version: String? = nil

        public init() {}

        public init(type: String? = nil, name: String? = nil, version: String? = nil) {
            self.type = type
            self.name = name
            self.version = version
        }

    }

    public struct ListPlatformVersionsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The starting index into the remaining list of platforms. if this value is not null, you can use it in a subsequent ListPlatformVersion call. 
        public var nextToken: String? = nil
        /// Detailed information about the platforms.
        public var platformSummaryList: [PlatformSummary]? = nil

        public init() {}

        public init(nextToken: String? = nil, platformSummaryList: [PlatformSummary]? = nil) {
            self.nextToken = nextToken
            self.platformSummaryList = platformSummaryList
        }

    }

    public struct ApplicationVersionDescriptionMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The ApplicationVersionDescription of the application version. 
        public var applicationVersion: ApplicationVersionDescription? = nil

        public init() {}

        public init(applicationVersion: ApplicationVersionDescription? = nil) {
            self.applicationVersion = applicationVersion
        }

    }

    public struct EnvironmentLink: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the linked environment (the dependency).
        public var environmentName: String? = nil
        /// The name of the link.
        public var linkName: String? = nil

        public init() {}

        public init(environmentName: String? = nil, linkName: String? = nil) {
            self.environmentName = environmentName
            self.linkName = linkName
        }

    }

    public struct LaunchConfiguration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the launch configuration.
        public var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct MaxAgeRule: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify the number of days to retain an application versions.
        public var maxAgeInDays: Int32? = nil
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public var deleteSourceFromS3: Bool? = nil
        /// Specify true to apply the rule, or false to disable it.
        public var enabled: Bool = false

        public init() {}

        public init(maxAgeInDays: Int32? = nil, deleteSourceFromS3: Bool? = nil, enabled: Bool) {
            self.maxAgeInDays = maxAgeInDays
            self.deleteSourceFromS3 = deleteSourceFromS3
            self.enabled = enabled
        }

    }

    public struct ListPlatformVersionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of platform values returned in one call.
        public var maxRecords: Int32? = nil
        /// The starting index into the remaining list of platforms. Use the NextToken value from a previous ListPlatformVersion call.
        public var nextToken: String? = nil
        /// List only the platforms where the platform member value relates to one of the supplied values.
        public var filters: [PlatformFilter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, filters: [PlatformFilter]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.filters = filters
        }

    }

    public struct UpdateApplicationVersionMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the version to update. If no application version is found with this label, UpdateApplication returns an InvalidParameterValue error. 
        public var versionLabel: String = ""
        /// The name of the application associated with this version.  If no application is found with this name, UpdateApplication returns an InvalidParameterValue error.
        public var applicationName: String = ""
        /// A new description for this version.
        public var description: String? = nil

        public init() {}

        public init(versionLabel: String, applicationName: String, description: String? = nil) {
            self.versionLabel = versionLabel
            self.applicationName = applicationName
            self.description = description
        }

    }

    public struct DeleteEnvironmentConfigurationMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the environment to delete the draft configuration from.
        public var environmentName: String = ""
        /// The name of the application the environment is associated with.
        public var applicationName: String = ""

        public init() {}

        public init(environmentName: String, applicationName: String) {
            self.environmentName = environmentName
            self.applicationName = applicationName
        }

    }

    public struct EnvironmentInfoDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The retrieved information.
        public var message: String? = nil
        /// The type of information retrieved.
        public var infoType: String? = nil
        /// The Amazon EC2 Instance ID for this information.
        public var ec2InstanceId: String? = nil
        /// The time stamp when this information was retrieved.
        public var sampleTimestamp: Date? = nil

        public init() {}

        public init(message: String? = nil, infoType: String? = nil, ec2InstanceId: String? = nil, sampleTimestamp: Date? = nil) {
            self.message = message
            self.infoType = infoType
            self.ec2InstanceId = ec2InstanceId
            self.sampleTimestamp = sampleTimestamp
        }

    }

    public struct DeleteApplicationVersionMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The label of the version to delete.
        public var versionLabel: String = ""
        /// Set to true to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3.
        public var deleteSourceBundle: Bool? = nil
        /// The name of the application to which the version belongs.
        public var applicationName: String = ""

        public init() {}

        public init(versionLabel: String, deleteSourceBundle: Bool? = nil, applicationName: String) {
            self.versionLabel = versionLabel
            self.deleteSourceBundle = deleteSourceBundle
            self.applicationName = applicationName
        }

    }

    public struct ValidationMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The namespace to which the option belongs.
        public var namespace: String? = nil
        /// An indication of the severity of this message:    error: This message indicates that this is not a valid setting for an option.    warning: This message is providing information you should take into account.  
        public var severity: String? = nil
        /// A message describing the error or warning.
        public var message: String? = nil
        /// The name of the option.
        public var optionName: String? = nil

        public init() {}

        public init(namespace: String? = nil, severity: String? = nil, message: String? = nil, optionName: String? = nil) {
            self.namespace = namespace
            self.severity = severity
            self.message = message
            self.optionName = optionName
        }

    }

    public struct Queue: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the queue.
        public var name: String? = nil
        /// The URL of the queue.
        public var uRL: String? = nil

        public init() {}

        public init(name: String? = nil, uRL: String? = nil) {
            self.name = name
            self.uRL = uRL
        }

    }

    public struct DescribeEnvironmentManagedActionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the target environment.
        public var environmentName: String? = nil
        /// To show only actions with a particular status, specify a status.
        public var status: String? = nil
        /// The environment ID of the target environment.
        public var environmentId: String? = nil

        public init() {}

        public init(environmentName: String? = nil, status: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.status = status
            self.environmentId = environmentId
        }

    }

    public struct DeletePlatformVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ARN of the version of the custom platform.
        public var platformArn: String? = nil

        public init() {}

        public init(platformArn: String? = nil) {
            self.platformArn = platformArn
        }

    }

    public struct ConfigurationOptionSetting: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique namespace identifying the option's associated AWS resource.
        public var namespace: String? = nil
        /// The name of the configuration option.
        public var optionName: String? = nil
        /// The current value for the configuration option.
        public var value: String? = nil
        /// A unique resource name for a time-based scaling configuration option.
        public var resourceName: String? = nil

        public init() {}

        public init(namespace: String? = nil, optionName: String? = nil, value: String? = nil, resourceName: String? = nil) {
            self.namespace = namespace
            self.optionName = optionName
            self.value = value
            self.resourceName = resourceName
        }

    }

    public struct CreateApplicationMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify an application resource lifecycle configuration to prevent your application from accumulating too many versions.
        public var resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil
        /// The name of the application. Constraint: This name must be unique within your account. If the specified name already exists, the action returns an InvalidParameterValue error.
        public var applicationName: String = ""
        /// Describes the application.
        public var description: String? = nil

        public init() {}

        public init(resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil, applicationName: String, description: String? = nil) {
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
            self.description = description
        }

    }

    public struct LoadBalancerDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the LoadBalancer.
        public var loadBalancerName: String? = nil
        /// The domain name of the LoadBalancer.
        public var domain: String? = nil
        /// A list of Listeners used by the LoadBalancer.
        public var listeners: [Listener]? = nil

        public init() {}

        public init(loadBalancerName: String? = nil, domain: String? = nil, listeners: [Listener]? = nil) {
            self.loadBalancerName = loadBalancerName
            self.domain = domain
            self.listeners = listeners
        }

    }

    public struct UpdateApplicationResourceLifecycleMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The lifecycle configuration.
        public var resourceLifecycleConfig: ApplicationResourceLifecycleConfig = ApplicationResourceLifecycleConfig()
        /// The name of the application.
        public var applicationName: String = ""

        public init() {}

        public init(resourceLifecycleConfig: ApplicationResourceLifecycleConfig, applicationName: String) {
            self.resourceLifecycleConfig = resourceLifecycleConfig
            self.applicationName = applicationName
        }

    }

    public struct SingleInstanceHealth: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Represents the color indicator that gives you information about the health of the EC2 instance. For more information, see Health Colors and Statuses.
        public var color: String? = nil
        /// The ID of the Amazon EC2 instance.
        public var instanceId: String? = nil
        /// Request metrics from your application.
        public var applicationMetrics: ApplicationMetrics? = nil
        /// The time at which the EC2 instance was launched.
        public var launchedAt: Date? = nil
        /// Information about the most recent deployment to an instance.
        public var deployment: Deployment? = nil
        /// Returns the health status of the specified instance. For more information, see Health Colors and Statuses.
        public var healthStatus: String? = nil
        /// The instance's type.
        public var instanceType: String? = nil
        /// Operating system metrics from the instance.
        public var system: SystemStatus? = nil
        /// Represents the causes, which provide more information about the current health status.
        public var causes: [String]? = nil
        /// The availability zone in which the instance runs.
        public var availabilityZone: String? = nil

        public init() {}

        public init(color: String? = nil, instanceId: String? = nil, applicationMetrics: ApplicationMetrics? = nil, launchedAt: Date? = nil, deployment: Deployment? = nil, healthStatus: String? = nil, instanceType: String? = nil, system: SystemStatus? = nil, causes: [String]? = nil, availabilityZone: String? = nil) {
            self.color = color
            self.instanceId = instanceId
            self.applicationMetrics = applicationMetrics
            self.launchedAt = launchedAt
            self.deployment = deployment
            self.healthStatus = healthStatus
            self.instanceType = instanceType
            self.system = system
            self.causes = causes
            self.availabilityZone = availabilityZone
        }

    }

    public struct EnvironmentResourceDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The AutoScalingGroups used by this environment. 
        public var autoScalingGroups: [AutoScalingGroup]? = nil
        /// The Auto Scaling launch configurations in use by this environment.
        public var launchConfigurations: [LaunchConfiguration]? = nil
        /// The AutoScaling triggers in use by this environment. 
        public var triggers: [Trigger]? = nil
        /// The queues used by this environment.
        public var queues: [Queue]? = nil
        /// The name of the environment.
        public var environmentName: String? = nil
        /// The Amazon EC2 instances used by this environment.
        public var instances: [Instance]? = nil
        /// The LoadBalancers in use by this environment.
        public var loadBalancers: [LoadBalancer]? = nil

        public init() {}

        public init(autoScalingGroups: [AutoScalingGroup]? = nil, launchConfigurations: [LaunchConfiguration]? = nil, triggers: [Trigger]? = nil, queues: [Queue]? = nil, environmentName: String? = nil, instances: [Instance]? = nil, loadBalancers: [LoadBalancer]? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.launchConfigurations = launchConfigurations
            self.triggers = triggers
            self.queues = queues
            self.environmentName = environmentName
            self.instances = instances
            self.loadBalancers = loadBalancers
        }

    }

    public struct DescribeEnvironmentsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  If specified when IncludeDeleted is set to true, then environments deleted after this date are displayed. 
        public var includedDeletedBackTo: Date? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.
        public var environmentIds: [String]? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.
        public var applicationName: String? = nil
        /// Indicates whether to include deleted environments:  true: Environments that have been deleted after IncludedDeletedBackTo are displayed.  false: Do not include deleted environments.
        public var includeDeleted: Bool? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.
        public var versionLabel: String? = nil
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.
        public var environmentNames: [String]? = nil

        public init() {}

        public init(includedDeletedBackTo: Date? = nil, environmentIds: [String]? = nil, applicationName: String? = nil, includeDeleted: Bool? = nil, versionLabel: String? = nil, environmentNames: [String]? = nil) {
            self.includedDeletedBackTo = includedDeletedBackTo
            self.environmentIds = environmentIds
            self.applicationName = applicationName
            self.includeDeleted = includeDeleted
            self.versionLabel = versionLabel
            self.environmentNames = environmentNames
        }

    }

    public struct DescribeApplicationVersionsMessage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specify a maximum number of application versions to paginate in the request.
        public var maxRecords: Int32? = nil
        /// Specify an application name to show only application versions for that application.
        public var applicationName: String? = nil
        /// Specify a version label to show a specific application version.
        public var versionLabels: [String]? = nil
        /// Specify a next token to retrieve the next page in a paginated request.
        public var nextToken: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, applicationName: String? = nil, versionLabels: [String]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.applicationName = applicationName
            self.versionLabels = versionLabels
            self.nextToken = nextToken
        }

    }

}