// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
Amazon Route 53 auto naming lets you configure public or private namespaces that your microservice applications run in. When instances of the service become available, you can call the auto naming API to register the instance, and Route 53 automatically creates up to five DNS records and an optional health check. Clients that submit DNS queries for the service receive an answer that contains up to eight healthy records.
*/
public struct ServiceDiscovery {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "Route53AutoNaming_v20170314",
            service: "servicediscovery",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-03-14",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [ServiceDiscoveryErrorType.self]
        )
    }

    ///  Deletes a namespace from the current account. If the namespace still contains one or more services, the request fails.
    public func deleteNamespace(_ input: DeleteNamespaceRequest) throws -> DeleteNamespaceResponse {
        return try client.send(operation: "DeleteNamespace", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a public namespace based on DNS, which will be visible on the internet. The namespace defines your service naming scheme. For example, if you name your namespace example.com and name your service backend, the resulting DNS name for the service will be backend.example.com. For the current limit on the number of namespaces that you can create using the same AWS account, see Limits on Auto Naming in the Route 53 Developer Guide.
    public func createPublicDnsNamespace(_ input: CreatePublicDnsNamespaceRequest) throws -> CreatePublicDnsNamespaceResponse {
        return try client.send(operation: "CreatePublicDnsNamespace", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets information about a namespace.
    public func getNamespace(_ input: GetNamespaceRequest) throws -> GetNamespaceResponse {
        return try client.send(operation: "GetNamespace", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the records and the health check, if any, that Amazon Route 53 created for the specified instance.
    public func deregisterInstance(_ input: DeregisterInstanceRequest) throws -> DeregisterInstanceResponse {
        return try client.send(operation: "DeregisterInstance", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists summary information for all the services that are associated with one or more specified namespaces.
    public func listServices(_ input: ListServicesRequest) throws -> ListServicesResponse {
        return try client.send(operation: "ListServices", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates or updates one or more records and optionally a health check based on the settings in a specified service. When you submit a RegisterInstance request, Amazon Route 53 does the following:   For each DNS record that you define in the service specified by ServiceId, creates or updates a record in the hosted zone that is associated with the corresponding namespace   If the service includes HealthCheckConfig, creates or updates a health check based on the settings in the health check configuration   Associates the health check, if any, with each of the records    One RegisterInstance request must complete before you can submit another request and specify the same service ID and instance ID.  For more information, see CreateService. When Route 53 receives a DNS query for the specified DNS name, it returns the applicable value:    If the health check is healthy: returns all the records    If the health check is unhealthy: returns the applicable value for the last healthy instance    If you didn't specify a health check configuration: returns all the records   For the current limit on the number of instances that you can register using the same namespace and using the same service, see Limits on Auto Naming in the Route 53 Developer Guide.
    public func registerInstance(_ input: RegisterInstanceRequest) throws -> RegisterInstanceResponse {
        return try client.send(operation: "RegisterInstance", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets information about a specified instance.
    public func getInstance(_ input: GetInstanceRequest) throws -> GetInstanceResponse {
        return try client.send(operation: "GetInstance", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists summary information about the namespaces that were created by the current AWS account.
    public func listNamespaces(_ input: ListNamespacesRequest) throws -> ListNamespacesResponse {
        return try client.send(operation: "ListNamespaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Submits a request to perform the following operations:   Add or delete DnsRecords configurations   Update the TTL setting for existing DnsRecords configurations   Add, update, or delete HealthCheckConfig for a specified service   You must specify all DnsRecords configurations (and, optionally, HealthCheckConfig) that you want to appear in the updated service. Any current configurations that don't appear in an UpdateService request are deleted. When you update the TTL setting for a service, Amazon Route 53 also updates the corresponding settings in all the records and health checks that were created by using the specified service.
    public func updateService(_ input: UpdateServiceRequest) throws -> UpdateServiceResponse {
        return try client.send(operation: "UpdateService", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets information about any operation that returns an operation ID in the response, such as a CreateService request.  To get a list of operations that match specified criteria, see ListOperations. 
    public func getOperation(_ input: GetOperationRequest) throws -> GetOperationResponse {
        return try client.send(operation: "GetOperation", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets the current health status (Healthy, Unhealthy, or Unknown) of one or more instances that are associated with a specified service.  There is a brief delay between when you register an instance and when the health status for the instance is available.  
    public func getInstancesHealthStatus(_ input: GetInstancesHealthStatusRequest) throws -> GetInstancesHealthStatusResponse {
        return try client.send(operation: "GetInstancesHealthStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a service, which defines the configuration for the following entities:   Up to three records (A, AAAA, and SRV) or one CNAME record   Optionally, a health check   After you create the service, you can submit a RegisterInstance request, and Amazon Route 53 uses the values in the configuration to create the specified entities. For the current limit on the number of instances that you can register using the same namespace and using the same service, see Limits on Auto Naming in the Route 53 Developer Guide.
    public func createService(_ input: CreateServiceRequest) throws -> CreateServiceResponse {
        return try client.send(operation: "CreateService", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a private namespace based on DNS, which will be visible only inside a specified Amazon VPC. The namespace defines your service naming scheme. For example, if you name your namespace example.com and name your service backend, the resulting DNS name for the service will be backend.example.com. For the current limit on the number of namespaces that you can create using the same AWS account, see Limits on Auto Naming in the Route 53 Developer Guide.
    public func createPrivateDnsNamespace(_ input: CreatePrivateDnsNamespaceRequest) throws -> CreatePrivateDnsNamespaceResponse {
        return try client.send(operation: "CreatePrivateDnsNamespace", path: "/", httpMethod: "POST", input: input)
    }

    public func updateInstanceCustomHealthStatus(_ input: UpdateInstanceCustomHealthStatusRequest) throws {
        _ = try client.send(operation: "UpdateInstanceCustomHealthStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists operations that match the criteria that you specify.
    public func listOperations(_ input: ListOperationsRequest) throws -> ListOperationsResponse {
        return try client.send(operation: "ListOperations", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists summary information about the instances that you registered by using a specified service.
    public func listInstances(_ input: ListInstancesRequest) throws -> ListInstancesResponse {
        return try client.send(operation: "ListInstances", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified service. If the service still contains one or more registered instances, the request fails.
    public func deleteService(_ input: DeleteServiceRequest) throws -> DeleteServiceResponse {
        return try client.send(operation: "DeleteService", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets the settings for a specified service.
    public func getService(_ input: GetServiceRequest) throws -> GetServiceResponse {
        return try client.send(operation: "GetService", path: "/", httpMethod: "POST", input: input)
    }


}