// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CodeBuild {

    public struct BuildPhase: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "contexts", required: false, type: .list), 
            AWSShapeMember(label: "phaseStatus", required: false, type: .enum), 
            AWSShapeMember(label: "durationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "phaseType", required: false, type: .enum)
        ]
        /// When the build phase ended, expressed in Unix time format.
        public let endTime: TimeStamp?
        /// When the build phase started, expressed in Unix time format.
        public let startTime: TimeStamp?
        /// Additional information about a build phase, especially to help troubleshoot a failed build.
        public let contexts: [PhaseContext]?
        /// The current status of the build phase. Valid values include:    FAILED: The build phase failed.    FAULT: The build phase faulted.    IN_PROGRESS: The build phase is still in progress.    STOPPED: The build phase stopped.    SUCCEEDED: The build phase succeeded.    TIMED_OUT: The build phase timed out.  
        public let phaseStatus: StatusType?
        /// How long, in seconds, between the starting and ending times of the build's phase.
        public let durationInSeconds: Int64?
        /// The name of the build phase. Valid values include:    BUILD: Core build activities typically occur in this build phase.    COMPLETED: The build has been completed.    DOWNLOAD_SOURCE: Source code is being downloaded in this build phase.    FINALIZING: The build process is completing in this build phase.    INSTALL: Installation activities typically occur in this build phase.    POST_BUILD: Post-build activities typically occur in this build phase.    PRE_BUILD: Pre-build activities typically occur in this build phase.    PROVISIONING: The build environment is being set up.    SUBMITTED: The build has been submitted.    UPLOAD_ARTIFACTS: Build output artifacts are being uploaded to the output location.  
        public let phaseType: BuildPhaseType?

        public init(endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, contexts: [PhaseContext]? = nil, phaseStatus: StatusType? = nil, durationInSeconds: Int64? = nil, phaseType: BuildPhaseType? = nil) {
            self.endTime = endTime
            self.startTime = startTime
            self.contexts = contexts
            self.phaseStatus = phaseStatus
            self.durationInSeconds = durationInSeconds
            self.phaseType = phaseType
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case startTime = "startTime"
            case contexts = "contexts"
            case phaseStatus = "phaseStatus"
            case durationInSeconds = "durationInSeconds"
            case phaseType = "phaseType"
        }
    }

    public struct ListProjectsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sortBy", required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum)
        ]
        /// The criterion to be used to list build project names. Valid values include:    CREATED_TIME: List the build project names based on when each build project was created.    LAST_MODIFIED_TIME: List the build project names based on when information about each build project was last changed.    NAME: List the build project names based on each build project's name.   Use sortOrder to specify in what order to list the build project names based on the preceding criteria.
        public let sortBy: ProjectSortByType?
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The order in which to list build projects. Valid values include:    ASCENDING: List the build project names in ascending order.    DESCENDING: List the build project names in descending order.   Use sortBy to specify the criterion to be used to list build project names.
        public let sortOrder: SortOrderType?

        public init(sortBy: ProjectSortByType? = nil, nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.sortBy = sortBy
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "sortBy"
            case nextToken = "nextToken"
            case sortOrder = "sortOrder"
        }
    }

    public enum EnvironmentType: String, CustomStringConvertible, Codable {
        case windowsContainer = "WINDOWS_CONTAINER"
        case linuxContainer = "LINUX_CONTAINER"
        public var description: String { return self.rawValue }
    }

    public struct ListCuratedEnvironmentImagesInput: AWSShape {

    }

    public struct EnvironmentPlatform: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "languages", required: false, type: .list), 
            AWSShapeMember(label: "platform", required: false, type: .enum)
        ]
        /// The list of programming languages that are available for the specified platform.
        public let languages: [EnvironmentLanguage]?
        /// The platform's name.
        public let platform: PlatformType?

        public init(languages: [EnvironmentLanguage]? = nil, platform: PlatformType? = nil) {
            self.languages = languages
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "languages"
            case platform = "platform"
        }
    }

    public struct BuildArtifacts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "encryptionDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "md5sum", required: false, type: .string), 
            AWSShapeMember(label: "sha256sum", required: false, type: .string)
        ]
        ///  Information that tells you if encryption for build artifacts is disabled. 
        public let encryptionDisabled: Bool?
        /// Information about the location of the build artifacts.
        public let location: String?
        /// The MD5 hash of the build artifact. You can use this hash along with a checksum tool to confirm both file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP. 
        public let md5sum: String?
        /// The SHA-256 hash of the build artifact. You can use this hash along with a checksum tool to confirm both file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP. 
        public let sha256sum: String?

        public init(encryptionDisabled: Bool? = nil, location: String? = nil, md5sum: String? = nil, sha256sum: String? = nil) {
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.md5sum = md5sum
            self.sha256sum = sha256sum
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionDisabled = "encryptionDisabled"
            case location = "location"
            case md5sum = "md5sum"
            case sha256sum = "sha256sum"
        }
    }

    public enum ProjectSortByType: String, CustomStringConvertible, Codable {
        case name = "NAME"
        case createdTime = "CREATED_TIME"
        case lastModifiedTime = "LAST_MODIFIED_TIME"
        public var description: String { return self.rawValue }
    }

    public struct ProjectCache: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "location", required: false, type: .string)
        ]
        /// The type of cache used by the build project. Valid values include:    NO_CACHE: The build project will not use any cache.    S3: The build project will read and write from/to S3.  
        public let `type`: CacheType
        /// Information about the cache location, as follows:     NO_CACHE: This value will be ignored.    S3: This is the S3 bucket name/prefix.  
        public let location: String?

        public init(type: CacheType, location: String? = nil) {
            self.`type` = `type`
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case location = "location"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case codecommit = "CODECOMMIT"
        case codepipeline = "CODEPIPELINE"
        case github = "GITHUB"
        case s3 = "S3"
        case bitbucket = "BITBUCKET"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteWebhookInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectName", required: true, type: .string)
        ]
        /// The name of the AWS CodeBuild project.
        public let projectName: String

        public init(projectName: String) {
            self.projectName = projectName
        }

        private enum CodingKeys: String, CodingKey {
            case projectName = "projectName"
        }
    }

    public struct PhaseContext: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "message", required: false, type: .string)
        ]
        /// The status code for the context of the build phase.
        public let statusCode: String?
        /// An explanation of the build phase's context. This explanation might include a command ID and an exit code.
        public let message: String?

        public init(statusCode: String? = nil, message: String? = nil) {
            self.statusCode = statusCode
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
            case message = "message"
        }
    }

    public struct LogsLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groupName", required: false, type: .string), 
            AWSShapeMember(label: "deepLink", required: false, type: .string), 
            AWSShapeMember(label: "streamName", required: false, type: .string)
        ]
        /// The name of the Amazon CloudWatch Logs group for the build logs.
        public let groupName: String?
        /// The URL to an individual build log in Amazon CloudWatch Logs.
        public let deepLink: String?
        /// The name of the Amazon CloudWatch Logs stream for the build logs.
        public let streamName: String?

        public init(groupName: String? = nil, deepLink: String? = nil, streamName: String? = nil) {
            self.groupName = groupName
            self.deepLink = deepLink
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case deepLink = "deepLink"
            case streamName = "streamName"
        }
    }

    public struct ProjectArtifacts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "namespaceType", required: false, type: .enum), 
            AWSShapeMember(label: "encryptionDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "packaging", required: false, type: .enum)
        ]
        /// Along with path and namespaceType, the pattern that AWS CodeBuild will use to name and store the output artifact, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, this is the name of the output artifact object. If you set the name to be a forward slash ("/"), then the artifact is stored in the root of the output bucket.   For example:    If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact would be stored in MyArtifacts/build-ID/MyArtifact.zip.     If path is empty, namespaceType is set to NONE, and name is set to "/", then the output artifact would be stored in the root of the output bucket.     If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to "/", then the output artifact would be stored in MyArtifacts/build-ID .   
        public let name: String?
        /// Information about the build output artifact location, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output locations instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, this is the name of the output bucket.  
        public let location: String?
        /// Along with namespaceType and name, the pattern that AWS CodeBuild will use to name and store the output artifact, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, this is the path to the output artifact. If path is not specified, then path will not be used.   For example, if path is set to MyArtifacts, namespaceType is set to NONE, and name is set to MyArtifact.zip, then the output artifact would be stored in the output bucket at MyArtifacts/MyArtifact.zip.
        public let path: String?
        /// The type of build output artifact. Valid values include:    CODEPIPELINE: The build project will have build output generated through AWS CodePipeline.    NO_ARTIFACTS: The build project will not produce any build output.    S3: The build project will store build output in Amazon Simple Storage Service (Amazon S3).  
        public let `type`: ArtifactsType
        /// Along with path and name, the pattern that AWS CodeBuild will use to determine the name and location to store the output artifact, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, then valid values include:    BUILD_ID: Include the build ID in the location of the build output artifact.    NONE: Do not include the build ID. This is the default if namespaceType is not specified.     For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact would be stored in MyArtifacts/build-ID/MyArtifact.zip.
        public let namespaceType: ArtifactNamespace?
        ///  Set to true if you do not want your output artifacts encrypted. This option is only valid if your artifacts type is Amazon S3. If this is set with another artifacts type, an invalidInputException will be thrown. 
        public let encryptionDisabled: Bool?
        /// The type of build output artifact to create, as follows:   If type is set to CODEPIPELINE, then AWS CodePipeline will ignore this value if specified. This is because AWS CodePipeline manages its build output artifacts instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, then this value will be ignored if specified, because no build output will be produced.   If type is set to S3, valid values include:    NONE: AWS CodeBuild will create in the output bucket a folder containing the build output. This is the default if packaging is not specified.    ZIP: AWS CodeBuild will create in the output bucket a ZIP file containing the build output.    
        public let packaging: ArtifactPackaging?

        public init(name: String? = nil, location: String? = nil, path: String? = nil, type: ArtifactsType, namespaceType: ArtifactNamespace? = nil, encryptionDisabled: Bool? = nil, packaging: ArtifactPackaging? = nil) {
            self.name = name
            self.location = location
            self.path = path
            self.`type` = `type`
            self.namespaceType = namespaceType
            self.encryptionDisabled = encryptionDisabled
            self.packaging = packaging
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case location = "location"
            case path = "path"
            case `type` = "type"
            case namespaceType = "namespaceType"
            case encryptionDisabled = "encryptionDisabled"
            case packaging = "packaging"
        }
    }

    public struct EnvironmentLanguage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "images", required: false, type: .list), 
            AWSShapeMember(label: "language", required: false, type: .enum)
        ]
        /// The list of Docker images that are related by the specified programming language.
        public let images: [EnvironmentImage]?
        /// The programming language for the Docker images.
        public let language: LanguageType?

        public init(images: [EnvironmentImage]? = nil, language: LanguageType? = nil) {
            self.images = images
            self.language = language
        }

        private enum CodingKeys: String, CodingKey {
            case images = "images"
            case language = "language"
        }
    }

    public struct UpdateProjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "project", required: false, type: .structure)
        ]
        /// Information about the build project that was changed.
        public let project: Project?

        public init(project: Project? = nil) {
            self.project = project
        }

        private enum CodingKeys: String, CodingKey {
            case project = "project"
        }
    }

    public enum SortOrderType: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct EnvironmentImage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versions", required: false, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// A list of environment image versions.
        public let versions: [String]?
        /// The description of the Docker image.
        public let description: String?
        /// The name of the Docker image.
        public let name: String?

        public init(versions: [String]? = nil, description: String? = nil, name: String? = nil) {
            self.versions = versions
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case versions = "versions"
            case description = "description"
            case name = "name"
        }
    }

    public enum ArtifactPackaging: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case zip = "ZIP"
        public var description: String { return self.rawValue }
    }

    public struct DeleteWebhookOutput: AWSShape {

    }

    public enum ArtifactsType: String, CustomStringConvertible, Codable {
        case codepipeline = "CODEPIPELINE"
        case s3 = "S3"
        case noArtifacts = "NO_ARTIFACTS"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetBuildsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "buildsNotFound", required: false, type: .list), 
            AWSShapeMember(label: "builds", required: false, type: .list)
        ]
        /// The IDs of builds for which information could not be found.
        public let buildsNotFound: [String]?
        /// Information about the requested builds.
        public let builds: [Build]?

        public init(buildsNotFound: [String]? = nil, builds: [Build]? = nil) {
            self.buildsNotFound = buildsNotFound
            self.builds = builds
        }

        private enum CodingKeys: String, CodingKey {
            case buildsNotFound = "buildsNotFound"
            case builds = "builds"
        }
    }

    public struct ListBuildsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "ids", required: false, type: .list)
        ]
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?
        /// A list of build IDs, with each build ID representing a single build.
        public let ids: [String]?

        public init(nextToken: String? = nil, ids: [String]? = nil) {
            self.nextToken = nextToken
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case ids = "ids"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "subnetId", required: false, type: .string), 
            AWSShapeMember(label: "networkInterfaceId", required: false, type: .string)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(subnetId: String? = nil, networkInterfaceId: String? = nil) {
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct ProjectEnvironment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "certificate", required: false, type: .string), 
            AWSShapeMember(label: "image", required: true, type: .string), 
            AWSShapeMember(label: "computeType", required: true, type: .enum), 
            AWSShapeMember(label: "environmentVariables", required: false, type: .list), 
            AWSShapeMember(label: "privilegedMode", required: false, type: .boolean)
        ]
        /// The type of build environment to use for related builds.
        public let `type`: EnvironmentType
        /// The certificate to use with this build project.
        public let certificate: String?
        /// The ID of the Docker image to use for this build project.
        public let image: String
        /// Information about the compute resources the build project will use. Available values include:    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.    BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.    BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds.  
        public let computeType: ComputeType
        /// A set of environment variables to make available to builds for this build project.
        public let environmentVariables: [EnvironmentVariable]?
        /// Enables running the Docker daemon inside a Docker container. Set to true only if the build project is be used to build Docker images, and the specified build environment image is not provided by AWS CodeBuild with Docker support. Otherwise, all associated builds that attempt to interact with the Docker daemon will fail. Note that you must also start the Docker daemon so that builds can interact with it. One way to do this is to initialize the Docker daemon during the install phase of your build spec by running the following build commands. (Do not run the following build commands if the specified build environment image is provided by AWS CodeBuild with Docker support.) If the operating system's base image is Ubuntu Linux:  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp; - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"  If the operating system's base image is Alpine Linux, add the -t argument to timeout:  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp; - timeout 15 -t sh -c "until docker info; do echo .; sleep 1; done" 
        public let privilegedMode: Bool?

        public init(type: EnvironmentType, certificate: String? = nil, image: String, computeType: ComputeType, environmentVariables: [EnvironmentVariable]? = nil, privilegedMode: Bool? = nil) {
            self.`type` = `type`
            self.certificate = certificate
            self.image = image
            self.computeType = computeType
            self.environmentVariables = environmentVariables
            self.privilegedMode = privilegedMode
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case certificate = "certificate"
            case image = "image"
            case computeType = "computeType"
            case environmentVariables = "environmentVariables"
            case privilegedMode = "privilegedMode"
        }
    }

    public struct Webhook: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "secret", required: false, type: .string), 
            AWSShapeMember(label: "branchFilter", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedSecret", required: false, type: .timestamp), 
            AWSShapeMember(label: "url", required: false, type: .string), 
            AWSShapeMember(label: "payloadUrl", required: false, type: .string)
        ]
        ///  The secret token of the associated repository. 
        public let secret: String?
        /// A regular expression used to determine which branches in a repository are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If it doesn't match, then it is not. If branchFilter is empty, then all branches are built.
        public let branchFilter: String?
        ///  A timestamp indicating the last time a repository's secret token was modified. 
        public let lastModifiedSecret: TimeStamp?
        /// The URL to the webhook.
        public let url: String?
        ///  The CodeBuild endpoint where webhook events are sent.
        public let payloadUrl: String?

        public init(secret: String? = nil, branchFilter: String? = nil, lastModifiedSecret: TimeStamp? = nil, url: String? = nil, payloadUrl: String? = nil) {
            self.secret = secret
            self.branchFilter = branchFilter
            self.lastModifiedSecret = lastModifiedSecret
            self.url = url
            self.payloadUrl = payloadUrl
        }

        private enum CodingKeys: String, CodingKey {
            case secret = "secret"
            case branchFilter = "branchFilter"
            case lastModifiedSecret = "lastModifiedSecret"
            case url = "url"
            case payloadUrl = "payloadUrl"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case fault = "FAULT"
        case timedOut = "TIMED_OUT"
        case inProgress = "IN_PROGRESS"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum ArtifactNamespace: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case buildId = "BUILD_ID"
        public var description: String { return self.rawValue }
    }

    public struct InvalidateProjectCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectName", required: true, type: .string)
        ]
        /// The name of the AWS CodeBuild build project that the cache will be reset for.
        public let projectName: String

        public init(projectName: String) {
            self.projectName = projectName
        }

        private enum CodingKeys: String, CodingKey {
            case projectName = "projectName"
        }
    }

    public struct VpcConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "subnets", required: false, type: .list), 
            AWSShapeMember(label: "vpcId", required: false, type: .string), 
            AWSShapeMember(label: "securityGroupIds", required: false, type: .list)
        ]
        /// A list of one or more subnet IDs in your Amazon VPC.
        public let subnets: [String]?
        /// The ID of the Amazon VPC.
        public let vpcId: String?
        /// A list of one or more security groups IDs in your Amazon VPC.
        public let securityGroupIds: [String]?

        public init(subnets: [String]? = nil, vpcId: String? = nil, securityGroupIds: [String]? = nil) {
            self.subnets = subnets
            self.vpcId = vpcId
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "subnets"
            case vpcId = "vpcId"
            case securityGroupIds = "securityGroupIds"
        }
    }

    public struct Project: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "badge", required: false, type: .structure), 
            AWSShapeMember(label: "source", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "cache", required: false, type: .structure), 
            AWSShapeMember(label: "webhook", required: false, type: .structure), 
            AWSShapeMember(label: "artifacts", required: false, type: .structure), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "environment", required: false, type: .structure), 
            AWSShapeMember(label: "encryptionKey", required: false, type: .string), 
            AWSShapeMember(label: "serviceRole", required: false, type: .string), 
            AWSShapeMember(label: "lastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "created", required: false, type: .timestamp), 
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "timeoutInMinutes", required: false, type: .integer)
        ]
        /// Information about the build badge for the build project.
        public let badge: ProjectBadge?
        /// Information about the build input source code for this build project.
        public let source: ProjectSource?
        /// A description that makes the build project easy to identify.
        public let description: String?
        /// The name of the build project.
        public let name: String?
        /// Information about the cache for the build project.
        public let cache: ProjectCache?
        /// Information about a webhook in GitHub that connects repository events to a build project in AWS CodeBuild.
        public let webhook: Webhook?
        /// Information about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts?
        /// The Amazon Resource Name (ARN) of the build project.
        public let arn: String?
        /// Information about the build environment for this build project.
        public let environment: ProjectEnvironment?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. This is expressed either as the CMK's Amazon Resource Name (ARN) or, if specified, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let serviceRole: String?
        /// When the build project's settings were last modified, expressed in Unix time format.
        public let lastModified: TimeStamp?
        /// When the build project was created, expressed in Unix time format.
        public let created: TimeStamp?
        /// Information about the VPC configuration that AWS CodeBuild will access.
        public let vpcConfig: VpcConfig?
        /// The tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        public let tags: [Tag]?
        /// How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int32?

        public init(badge: ProjectBadge? = nil, source: ProjectSource? = nil, description: String? = nil, name: String? = nil, cache: ProjectCache? = nil, webhook: Webhook? = nil, artifacts: ProjectArtifacts? = nil, arn: String? = nil, environment: ProjectEnvironment? = nil, encryptionKey: String? = nil, serviceRole: String? = nil, lastModified: TimeStamp? = nil, created: TimeStamp? = nil, vpcConfig: VpcConfig? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int32? = nil) {
            self.badge = badge
            self.source = source
            self.description = description
            self.name = name
            self.cache = cache
            self.webhook = webhook
            self.artifacts = artifacts
            self.arn = arn
            self.environment = environment
            self.encryptionKey = encryptionKey
            self.serviceRole = serviceRole
            self.lastModified = lastModified
            self.created = created
            self.vpcConfig = vpcConfig
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case badge = "badge"
            case source = "source"
            case description = "description"
            case name = "name"
            case cache = "cache"
            case webhook = "webhook"
            case artifacts = "artifacts"
            case arn = "arn"
            case environment = "environment"
            case encryptionKey = "encryptionKey"
            case serviceRole = "serviceRole"
            case lastModified = "lastModified"
            case created = "created"
            case vpcConfig = "vpcConfig"
            case tags = "tags"
            case timeoutInMinutes = "timeoutInMinutes"
        }
    }

    public struct SourceAuth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "resource", required: false, type: .string)
        ]
        /// The authorization type to use. The only valid value is OAUTH, which represents the OAuth authorization type.
        public let `type`: SourceAuthType
        /// The resource value that applies to the specified authorization type.
        public let resource: String?

        public init(type: SourceAuthType, resource: String? = nil) {
            self.`type` = `type`
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case resource = "resource"
        }
    }

    public struct StopBuildOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "build", required: false, type: .structure)
        ]
        /// Information about the build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "build"
        }
    }

    public struct BuildNotDeleted: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "statusCode", required: false, type: .string)
        ]
        /// The ID of the build that could not be successfully deleted.
        public let id: String?
        /// Additional information about the build that could not be successfully deleted.
        public let statusCode: String?

        public init(id: String? = nil, statusCode: String? = nil) {
            self.id = id
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case statusCode = "statusCode"
        }
    }

    public struct ProjectSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "buildspec", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "insecureSsl", required: false, type: .boolean), 
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "auth", required: false, type: .structure), 
            AWSShapeMember(label: "reportBuildStatus", required: false, type: .boolean), 
            AWSShapeMember(label: "gitCloneDepth", required: false, type: .integer)
        ]
        /// The build spec declaration to use for the builds in this build project. If this value is not specified, a build spec must be included along with the source code to be built.
        public let buildspec: String?
        /// Information about the location of the source code to be built. Valid values include:   For source code settings that are specified in the source action of a pipeline in AWS CodePipeline, location should not be specified. If it is specified, AWS CodePipeline will ignore it. This is because AWS CodePipeline uses the settings in a pipeline's source action instead of this value.   For source code in an AWS CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the build spec (for example, https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name ).   For source code in an Amazon Simple Storage Service (Amazon S3) input bucket, the path to the ZIP file that contains the source code (for example,  bucket-name/path/to/object-name.zip)   For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the build spec. Also, you must connect your AWS account to your GitHub account. To do this, use the AWS CodeBuild console to begin creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub Authorize application page that displays, for Organization access, choose Request access next to each repository you want to allow AWS CodeBuild to have access to. Then choose Authorize application. (After you have connected to your GitHub account, you do not need to finish creating the build project, and you may then leave the AWS CodeBuild console.) To instruct AWS CodeBuild to then use this connection, in the source object, set the auth object's type value to OAUTH.   For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the build spec. Also, you must connect your AWS account to your Bitbucket account. To do this, use the AWS CodeBuild console to begin creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket Confirm access to your account page that displays, choose Grant access. (After you have connected to your Bitbucket account, you do not need to finish creating the build project, and you may then leave the AWS CodeBuild console.) To instruct AWS CodeBuild to then use this connection, in the source object, set the auth object's type value to OAUTH.  
        public let location: String?
        /// Enable this flag to ignore SSL warnings while connecting to the project source code.
        public let insecureSsl: Bool?
        /// The type of repository that contains the source code to be built. Valid values include:    BITBUCKET: The source code is in a Bitbucket repository.    CODECOMMIT: The source code is in an AWS CodeCommit repository.    CODEPIPELINE: The source code settings are specified in the source action of a pipeline in AWS CodePipeline.    GITHUB: The source code is in a GitHub repository.    S3: The source code is in an Amazon Simple Storage Service (Amazon S3) input bucket.  
        public let `type`: SourceType
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. This information is for the AWS CodeBuild console's use only. Your code should not get or set this information directly (unless the build project's source type value is BITBUCKET or GITHUB).
        public let auth: SourceAuth?
        ///  Set to true to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is GitHub. If this is set and you use a different source provider, an invalidInputException is thrown. 
        public let reportBuildStatus: Bool?
        /// Information about the git clone depth for the build project.
        public let gitCloneDepth: Int32?

        public init(buildspec: String? = nil, location: String? = nil, insecureSsl: Bool? = nil, type: SourceType, auth: SourceAuth? = nil, reportBuildStatus: Bool? = nil, gitCloneDepth: Int32? = nil) {
            self.buildspec = buildspec
            self.location = location
            self.insecureSsl = insecureSsl
            self.`type` = `type`
            self.auth = auth
            self.reportBuildStatus = reportBuildStatus
            self.gitCloneDepth = gitCloneDepth
        }

        private enum CodingKeys: String, CodingKey {
            case buildspec = "buildspec"
            case location = "location"
            case insecureSsl = "insecureSsl"
            case `type` = "type"
            case auth = "auth"
            case reportBuildStatus = "reportBuildStatus"
            case gitCloneDepth = "gitCloneDepth"
        }
    }

    public struct UpdateProjectInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "cache", required: false, type: .structure), 
            AWSShapeMember(label: "badgeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "encryptionKey", required: false, type: .string), 
            AWSShapeMember(label: "source", required: false, type: .structure), 
            AWSShapeMember(label: "environment", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "timeoutInMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "artifacts", required: false, type: .structure), 
            AWSShapeMember(label: "serviceRole", required: false, type: .string)
        ]
        /// VpcConfig enables AWS CodeBuild to access resources in an Amazon VPC.
        public let vpcConfig: VpcConfig?
        /// The replacement set of tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        public let tags: [Tag]?
        /// The name of the build project.  You cannot change a build project's name. 
        public let name: String
        /// Stores recently used information so that it can be quickly accessed at a later time.
        public let cache: ProjectCache?
        /// Set this to true to generate a publicly-accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// The replacement AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. You can specify either the CMK's Amazon Resource Name (ARN) or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// Information to be changed about the build input source code for the build project.
        public let source: ProjectSource?
        /// Information to be changed about the build environment for the build project.
        public let environment: ProjectEnvironment?
        /// A new or replacement description of the build project.
        public let description: String?
        /// The replacement value in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed.
        public let timeoutInMinutes: Int32?
        /// Information to be changed about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts?
        /// The replacement ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let serviceRole: String?

        public init(vpcConfig: VpcConfig? = nil, tags: [Tag]? = nil, name: String, cache: ProjectCache? = nil, badgeEnabled: Bool? = nil, encryptionKey: String? = nil, source: ProjectSource? = nil, environment: ProjectEnvironment? = nil, description: String? = nil, timeoutInMinutes: Int32? = nil, artifacts: ProjectArtifacts? = nil, serviceRole: String? = nil) {
            self.vpcConfig = vpcConfig
            self.tags = tags
            self.name = name
            self.cache = cache
            self.badgeEnabled = badgeEnabled
            self.encryptionKey = encryptionKey
            self.source = source
            self.environment = environment
            self.description = description
            self.timeoutInMinutes = timeoutInMinutes
            self.artifacts = artifacts
            self.serviceRole = serviceRole
        }

        private enum CodingKeys: String, CodingKey {
            case vpcConfig = "vpcConfig"
            case tags = "tags"
            case name = "name"
            case cache = "cache"
            case badgeEnabled = "badgeEnabled"
            case encryptionKey = "encryptionKey"
            case source = "source"
            case environment = "environment"
            case description = "description"
            case timeoutInMinutes = "timeoutInMinutes"
            case artifacts = "artifacts"
            case serviceRole = "serviceRole"
        }
    }

    public struct ProjectBadge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "badgeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "badgeRequestUrl", required: false, type: .string)
        ]
        /// Set this to true to generate a publicly-accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// The publicly-accessible URL through which you can access the build badge for your project. 
        public let badgeRequestUrl: String?

        public init(badgeEnabled: Bool? = nil, badgeRequestUrl: String? = nil) {
            self.badgeEnabled = badgeEnabled
            self.badgeRequestUrl = badgeRequestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case badgeEnabled = "badgeEnabled"
            case badgeRequestUrl = "badgeRequestUrl"
        }
    }

    public enum LanguageType: String, CustomStringConvertible, Codable {
        case java = "JAVA"
        case python = "PYTHON"
        case nodeJs = "NODE_JS"
        case ruby = "RUBY"
        case golang = "GOLANG"
        case docker = "DOCKER"
        case android = "ANDROID"
        case dotnet = "DOTNET"
        case base = "BASE"
        public var description: String { return self.rawValue }
    }

    public struct StartBuildInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "buildspecOverride", required: false, type: .string), 
            AWSShapeMember(label: "sourceTypeOverride", required: false, type: .enum), 
            AWSShapeMember(label: "imageOverride", required: false, type: .string), 
            AWSShapeMember(label: "sourceVersion", required: false, type: .string), 
            AWSShapeMember(label: "sourceAuthOverride", required: false, type: .structure), 
            AWSShapeMember(label: "idempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "reportBuildStatusOverride", required: false, type: .boolean), 
            AWSShapeMember(label: "timeoutInMinutesOverride", required: false, type: .integer), 
            AWSShapeMember(label: "sourceLocationOverride", required: false, type: .string), 
            AWSShapeMember(label: "environmentVariablesOverride", required: false, type: .list), 
            AWSShapeMember(label: "artifactsOverride", required: false, type: .structure), 
            AWSShapeMember(label: "privilegedModeOverride", required: false, type: .boolean), 
            AWSShapeMember(label: "certificateOverride", required: false, type: .string), 
            AWSShapeMember(label: "computeTypeOverride", required: false, type: .enum), 
            AWSShapeMember(label: "serviceRoleOverride", required: false, type: .string), 
            AWSShapeMember(label: "environmentTypeOverride", required: false, type: .enum), 
            AWSShapeMember(label: "cacheOverride", required: false, type: .structure), 
            AWSShapeMember(label: "gitCloneDepthOverride", required: false, type: .integer), 
            AWSShapeMember(label: "projectName", required: true, type: .string), 
            AWSShapeMember(label: "insecureSslOverride", required: false, type: .boolean)
        ]
        /// A build spec declaration that overrides, for this build only, the latest one already defined in the build project.
        public let buildspecOverride: String?
        /// A source input type for this build that overrides the source input defined in the build project
        public let sourceTypeOverride: SourceType?
        /// The name of an image for this build that overrides the one specified in the build project.
        public let imageOverride: String?
        /// A version of the build input to be built, for this build only. If not specified, the latest version will be used. If specified, must be one of:   For AWS CodeCommit: the commit ID to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID will be used. If not specified, the default branch's HEAD commit ID will be used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID will be used. If not specified, the default branch's HEAD commit ID will be used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object representing the build input ZIP file to use.  
        public let sourceVersion: String?
        /// An authorization type for this build that overrides the one defined in the build project. This override applies only if the build project's source is BitBucket or GitHub.
        public let sourceAuthOverride: SourceAuth?
        /// A unique, case sensitive identifier you provide to ensure the idempotency of the StartBuild request. The token is included in the StartBuild request and is valid for 12 hours. If you repeat the StartBuild request with the same token, but change a parameter, AWS CodeBuild returns a parameter mismatch error. 
        public let idempotencyToken: String?
        ///  Set to true to report to your source provider the status of a build's start and completion. If you use this option with a source provider other than GitHub, an invalidInputException is thrown. 
        public let reportBuildStatusOverride: Bool?
        /// The number of build timeout minutes, from 5 to 480 (8 hours), that overrides, for this build only, the latest setting already defined in the build project.
        public let timeoutInMinutesOverride: Int32?
        /// A location that overrides for this build the source location for the one defined in the build project.
        public let sourceLocationOverride: String?
        /// A set of environment variables that overrides, for this build only, the latest ones already defined in the build project.
        public let environmentVariablesOverride: [EnvironmentVariable]?
        /// Build output artifact settings that override, for this build only, the latest ones already defined in the build project.
        public let artifactsOverride: ProjectArtifacts?
        /// Enable this flag to override privileged mode in the build project.
        public let privilegedModeOverride: Bool?
        /// The name of a certificate for this build that overrides the one specified in the build project.
        public let certificateOverride: String?
        /// The name of a compute type for this build that overrides the one specified in the build project.
        public let computeTypeOverride: ComputeType?
        /// The name of a service role for this build that overrides the one specified in the build project.
        public let serviceRoleOverride: String?
        /// A container type for this build that overrides the one specified in the build project.
        public let environmentTypeOverride: EnvironmentType?
        /// A ProjectCache object specified for this build that overrides the one defined in the build project.
        public let cacheOverride: ProjectCache?
        /// The user-defined depth of history, with a minimum value of 0, that overrides, for this build only, any previous depth of history defined in the build project.
        public let gitCloneDepthOverride: Int32?
        /// The name of the AWS CodeBuild build project to start running a build.
        public let projectName: String
        /// Enable this flag to override the insecure SSL setting that is specified in the build project. The insecure SSL setting determines whether to ignore SSL warnings while connecting to the project source code. This override applies only if the build's source is GitHub Enterprise.
        public let insecureSslOverride: Bool?

        public init(buildspecOverride: String? = nil, sourceTypeOverride: SourceType? = nil, imageOverride: String? = nil, sourceVersion: String? = nil, sourceAuthOverride: SourceAuth? = nil, idempotencyToken: String? = nil, reportBuildStatusOverride: Bool? = nil, timeoutInMinutesOverride: Int32? = nil, sourceLocationOverride: String? = nil, environmentVariablesOverride: [EnvironmentVariable]? = nil, artifactsOverride: ProjectArtifacts? = nil, privilegedModeOverride: Bool? = nil, certificateOverride: String? = nil, computeTypeOverride: ComputeType? = nil, serviceRoleOverride: String? = nil, environmentTypeOverride: EnvironmentType? = nil, cacheOverride: ProjectCache? = nil, gitCloneDepthOverride: Int32? = nil, projectName: String, insecureSslOverride: Bool? = nil) {
            self.buildspecOverride = buildspecOverride
            self.sourceTypeOverride = sourceTypeOverride
            self.imageOverride = imageOverride
            self.sourceVersion = sourceVersion
            self.sourceAuthOverride = sourceAuthOverride
            self.idempotencyToken = idempotencyToken
            self.reportBuildStatusOverride = reportBuildStatusOverride
            self.timeoutInMinutesOverride = timeoutInMinutesOverride
            self.sourceLocationOverride = sourceLocationOverride
            self.environmentVariablesOverride = environmentVariablesOverride
            self.artifactsOverride = artifactsOverride
            self.privilegedModeOverride = privilegedModeOverride
            self.certificateOverride = certificateOverride
            self.computeTypeOverride = computeTypeOverride
            self.serviceRoleOverride = serviceRoleOverride
            self.environmentTypeOverride = environmentTypeOverride
            self.cacheOverride = cacheOverride
            self.gitCloneDepthOverride = gitCloneDepthOverride
            self.projectName = projectName
            self.insecureSslOverride = insecureSslOverride
        }

        private enum CodingKeys: String, CodingKey {
            case buildspecOverride = "buildspecOverride"
            case sourceTypeOverride = "sourceTypeOverride"
            case imageOverride = "imageOverride"
            case sourceVersion = "sourceVersion"
            case sourceAuthOverride = "sourceAuthOverride"
            case idempotencyToken = "idempotencyToken"
            case reportBuildStatusOverride = "reportBuildStatusOverride"
            case timeoutInMinutesOverride = "timeoutInMinutesOverride"
            case sourceLocationOverride = "sourceLocationOverride"
            case environmentVariablesOverride = "environmentVariablesOverride"
            case artifactsOverride = "artifactsOverride"
            case privilegedModeOverride = "privilegedModeOverride"
            case certificateOverride = "certificateOverride"
            case computeTypeOverride = "computeTypeOverride"
            case serviceRoleOverride = "serviceRoleOverride"
            case environmentTypeOverride = "environmentTypeOverride"
            case cacheOverride = "cacheOverride"
            case gitCloneDepthOverride = "gitCloneDepthOverride"
            case projectName = "projectName"
            case insecureSslOverride = "insecureSslOverride"
        }
    }

    public struct Build: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sourceVersion", required: false, type: .string), 
            AWSShapeMember(label: "source", required: false, type: .structure), 
            AWSShapeMember(label: "buildStatus", required: false, type: .enum), 
            AWSShapeMember(label: "buildComplete", required: false, type: .boolean), 
            AWSShapeMember(label: "initiator", required: false, type: .string), 
            AWSShapeMember(label: "cache", required: false, type: .structure), 
            AWSShapeMember(label: "artifacts", required: false, type: .structure), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "environment", required: false, type: .structure), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "encryptionKey", required: false, type: .string), 
            AWSShapeMember(label: "currentPhase", required: false, type: .string), 
            AWSShapeMember(label: "networkInterface", required: false, type: .structure), 
            AWSShapeMember(label: "serviceRole", required: false, type: .string), 
            AWSShapeMember(label: "projectName", required: false, type: .string), 
            AWSShapeMember(label: "logs", required: false, type: .structure), 
            AWSShapeMember(label: "phases", required: false, type: .list), 
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "timeoutInMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp)
        ]
        /// Any version identifier for the version of the source code to be built.
        public let sourceVersion: String?
        /// Information about the source code to be built.
        public let source: ProjectSource?
        /// The current status of the build. Valid values include:    FAILED: The build failed.    FAULT: The build faulted.    IN_PROGRESS: The build is still in progress.    STOPPED: The build stopped.    SUCCEEDED: The build succeeded.    TIMED_OUT: The build timed out.  
        public let buildStatus: StatusType?
        /// Whether the build has finished. True if completed; otherwise, false.
        public let buildComplete: Bool?
        /// The entity that started the build. Valid values include:   If AWS CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).   If an AWS Identity and Access Management (IAM) user started the build, the user's name (for example MyUserName).   If the Jenkins plugin for AWS CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.  
        public let initiator: String?
        /// Information about the cache for the build.
        public let cache: ProjectCache?
        /// Information about the output artifacts for the build.
        public let artifacts: BuildArtifacts?
        /// The Amazon Resource Name (ARN) of the build.
        public let arn: String?
        /// Information about the build environment for this build.
        public let environment: ProjectEnvironment?
        /// The unique ID for the build.
        public let id: String?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. This is expressed either as the CMK's Amazon Resource Name (ARN) or, if specified, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// The current build phase.
        public let currentPhase: String?
        /// Describes a network interface.
        public let networkInterface: NetworkInterface?
        /// The name of a service role used for this build.
        public let serviceRole: String?
        /// The name of the AWS CodeBuild project.
        public let projectName: String?
        /// Information about the build's logs in Amazon CloudWatch Logs.
        public let logs: LogsLocation?
        /// Information about all previous build phases that are completed and information about any current build phase that is not yet complete.
        public let phases: [BuildPhase]?
        /// If your AWS CodeBuild project accesses resources in an Amazon VPC, you provide this parameter that identifies the VPC ID and the list of security group IDs and subnet IDs. The security groups and subnets must belong to the same VPC. You must provide at least one security group and one subnet ID.
        public let vpcConfig: VpcConfig?
        /// When the build process started, expressed in Unix time format.
        public let startTime: TimeStamp?
        /// How long, in minutes, for AWS CodeBuild to wait before timing out this build if it does not get marked as completed.
        public let timeoutInMinutes: Int32?
        /// When the build process ended, expressed in Unix time format.
        public let endTime: TimeStamp?

        public init(sourceVersion: String? = nil, source: ProjectSource? = nil, buildStatus: StatusType? = nil, buildComplete: Bool? = nil, initiator: String? = nil, cache: ProjectCache? = nil, artifacts: BuildArtifacts? = nil, arn: String? = nil, environment: ProjectEnvironment? = nil, id: String? = nil, encryptionKey: String? = nil, currentPhase: String? = nil, networkInterface: NetworkInterface? = nil, serviceRole: String? = nil, projectName: String? = nil, logs: LogsLocation? = nil, phases: [BuildPhase]? = nil, vpcConfig: VpcConfig? = nil, startTime: TimeStamp? = nil, timeoutInMinutes: Int32? = nil, endTime: TimeStamp? = nil) {
            self.sourceVersion = sourceVersion
            self.source = source
            self.buildStatus = buildStatus
            self.buildComplete = buildComplete
            self.initiator = initiator
            self.cache = cache
            self.artifacts = artifacts
            self.arn = arn
            self.environment = environment
            self.id = id
            self.encryptionKey = encryptionKey
            self.currentPhase = currentPhase
            self.networkInterface = networkInterface
            self.serviceRole = serviceRole
            self.projectName = projectName
            self.logs = logs
            self.phases = phases
            self.vpcConfig = vpcConfig
            self.startTime = startTime
            self.timeoutInMinutes = timeoutInMinutes
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case sourceVersion = "sourceVersion"
            case source = "source"
            case buildStatus = "buildStatus"
            case buildComplete = "buildComplete"
            case initiator = "initiator"
            case cache = "cache"
            case artifacts = "artifacts"
            case arn = "arn"
            case environment = "environment"
            case id = "id"
            case encryptionKey = "encryptionKey"
            case currentPhase = "currentPhase"
            case networkInterface = "networkInterface"
            case serviceRole = "serviceRole"
            case projectName = "projectName"
            case logs = "logs"
            case phases = "phases"
            case vpcConfig = "vpcConfig"
            case startTime = "startTime"
            case timeoutInMinutes = "timeoutInMinutes"
            case endTime = "endTime"
        }
    }

    public struct CreateProjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "project", required: false, type: .structure)
        ]
        /// Information about the build project that was created.
        public let project: Project?

        public init(project: Project? = nil) {
            self.project = project
        }

        private enum CodingKeys: String, CodingKey {
            case project = "project"
        }
    }

    public struct CreateWebhookOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "webhook", required: false, type: .structure)
        ]
        /// Information about a webhook in GitHub that connects repository events to a build project in AWS CodeBuild.
        public let webhook: Webhook?

        public init(webhook: Webhook? = nil) {
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case webhook = "webhook"
        }
    }

    public struct BatchGetProjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectsNotFound", required: false, type: .list), 
            AWSShapeMember(label: "projects", required: false, type: .list)
        ]
        /// The names of build projects for which information could not be found.
        public let projectsNotFound: [String]?
        /// Information about the requested build projects.
        public let projects: [Project]?

        public init(projectsNotFound: [String]? = nil, projects: [Project]? = nil) {
            self.projectsNotFound = projectsNotFound
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case projectsNotFound = "projectsNotFound"
            case projects = "projects"
        }
    }

    public struct UpdateWebhookOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "webhook", required: false, type: .structure)
        ]
        ///  Information about a repository's webhook that is associated with a project in AWS CodeBuild. 
        public let webhook: Webhook?

        public init(webhook: Webhook? = nil) {
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case webhook = "webhook"
        }
    }

    public enum PlatformType: String, CustomStringConvertible, Codable {
        case debian = "DEBIAN"
        case amazonLinux = "AMAZON_LINUX"
        case ubuntu = "UBUNTU"
        case windowsServer = "WINDOWS_SERVER"
        public var description: String { return self.rawValue }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DeleteProjectInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the build project.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct BatchDeleteBuildsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ids", required: true, type: .list)
        ]
        /// The IDs of the builds to delete.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
        }
    }

    public struct ListBuildsForProjectInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectName", required: true, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The name of the AWS CodeBuild project.
        public let projectName: String
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.  
        public let sortOrder: SortOrderType?
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?

        public init(projectName: String, sortOrder: SortOrderType? = nil, nextToken: String? = nil) {
            self.projectName = projectName
            self.sortOrder = sortOrder
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case projectName = "projectName"
            case sortOrder = "sortOrder"
            case nextToken = "nextToken"
        }
    }

    public enum SourceAuthType: String, CustomStringConvertible, Codable {
        case oauth = "OAUTH"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentVariableType: String, CustomStringConvertible, Codable {
        case plaintext = "PLAINTEXT"
        case parameterStore = "PARAMETER_STORE"
        public var description: String { return self.rawValue }
    }

    public enum BuildPhaseType: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case provisioning = "PROVISIONING"
        case downloadSource = "DOWNLOAD_SOURCE"
        case install = "INSTALL"
        case preBuild = "PRE_BUILD"
        case build = "BUILD"
        case postBuild = "POST_BUILD"
        case uploadArtifacts = "UPLOAD_ARTIFACTS"
        case finalizing = "FINALIZING"
        case completed = "COMPLETED"
        public var description: String { return self.rawValue }
    }

    public struct EnvironmentVariable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The type of environment variable. Valid values include:    PARAMETER_STORE: An environment variable stored in Amazon EC2 Systems Manager Parameter Store.    PLAINTEXT: An environment variable in plaintext format.  
        public let `type`: EnvironmentVariableType?
        /// The name or key of the environment variable.
        public let name: String
        /// The value of the environment variable.  We strongly discourage using environment variables to store sensitive values, especially AWS secret key IDs and secret access keys. Environment variables can be displayed in plain text using tools such as the AWS CodeBuild console and the AWS Command Line Interface (AWS CLI). 
        public let value: String

        public init(type: EnvironmentVariableType? = nil, name: String, value: String) {
            self.`type` = `type`
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case name = "name"
            case value = "value"
        }
    }

    public struct ListProjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "projects", required: false, type: .list)
        ]
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?
        /// The list of build project names, with each build project name representing a single build project.
        public let projects: [String]?

        public init(nextToken: String? = nil, projects: [String]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case projects = "projects"
        }
    }

    public struct CreateWebhookInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchFilter", required: false, type: .string), 
            AWSShapeMember(label: "projectName", required: true, type: .string)
        ]
        /// A regular expression used to determine which branches in a repository are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If it doesn't match, then it is not. If branchFilter is empty, then all branches are built.
        public let branchFilter: String?
        /// The name of the AWS CodeBuild project.
        public let projectName: String

        public init(branchFilter: String? = nil, projectName: String) {
            self.branchFilter = branchFilter
            self.projectName = projectName
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter = "branchFilter"
            case projectName = "projectName"
        }
    }

    public enum ComputeType: String, CustomStringConvertible, Codable {
        case buildGeneral1Small = "BUILD_GENERAL1_SMALL"
        case buildGeneral1Medium = "BUILD_GENERAL1_MEDIUM"
        case buildGeneral1Large = "BUILD_GENERAL1_LARGE"
        public var description: String { return self.rawValue }
    }

    public struct StartBuildOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "build", required: false, type: .structure)
        ]
        /// Information about the build to be run.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "build"
        }
    }

    public struct CreateProjectInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "cache", required: false, type: .structure), 
            AWSShapeMember(label: "badgeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "encryptionKey", required: false, type: .string), 
            AWSShapeMember(label: "source", required: true, type: .structure), 
            AWSShapeMember(label: "environment", required: true, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "timeoutInMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "artifacts", required: true, type: .structure), 
            AWSShapeMember(label: "serviceRole", required: true, type: .string)
        ]
        /// VpcConfig enables AWS CodeBuild to access resources in an Amazon VPC.
        public let vpcConfig: VpcConfig?
        /// A set of tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        public let tags: [Tag]?
        /// The name of the build project.
        public let name: String
        /// Stores recently used information so that it can be quickly accessed at a later time.
        public let cache: ProjectCache?
        /// Set this to true to generate a publicly-accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts. You can specify either the CMK's Amazon Resource Name (ARN) or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// Information about the build input source code for the build project.
        public let source: ProjectSource
        /// Information about the build environment for the build project.
        public let environment: ProjectEnvironment
        /// A description that makes the build project easy to identify.
        public let description: String?
        /// How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any build that has not been marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int32?
        /// Information about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts
        /// The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let serviceRole: String

        public init(vpcConfig: VpcConfig? = nil, tags: [Tag]? = nil, name: String, cache: ProjectCache? = nil, badgeEnabled: Bool? = nil, encryptionKey: String? = nil, source: ProjectSource, environment: ProjectEnvironment, description: String? = nil, timeoutInMinutes: Int32? = nil, artifacts: ProjectArtifacts, serviceRole: String) {
            self.vpcConfig = vpcConfig
            self.tags = tags
            self.name = name
            self.cache = cache
            self.badgeEnabled = badgeEnabled
            self.encryptionKey = encryptionKey
            self.source = source
            self.environment = environment
            self.description = description
            self.timeoutInMinutes = timeoutInMinutes
            self.artifacts = artifacts
            self.serviceRole = serviceRole
        }

        private enum CodingKeys: String, CodingKey {
            case vpcConfig = "vpcConfig"
            case tags = "tags"
            case name = "name"
            case cache = "cache"
            case badgeEnabled = "badgeEnabled"
            case encryptionKey = "encryptionKey"
            case source = "source"
            case environment = "environment"
            case description = "description"
            case timeoutInMinutes = "timeoutInMinutes"
            case artifacts = "artifacts"
            case serviceRole = "serviceRole"
        }
    }

    public struct StopBuildInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The ID of the build.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct DeleteProjectOutput: AWSShape {

    }

    public struct BatchDeleteBuildsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "buildsDeleted", required: false, type: .list), 
            AWSShapeMember(label: "buildsNotDeleted", required: false, type: .list)
        ]
        /// The IDs of the builds that were successfully deleted.
        public let buildsDeleted: [String]?
        /// Information about any builds that could not be successfully deleted.
        public let buildsNotDeleted: [BuildNotDeleted]?

        public init(buildsDeleted: [String]? = nil, buildsNotDeleted: [BuildNotDeleted]? = nil) {
            self.buildsDeleted = buildsDeleted
            self.buildsNotDeleted = buildsNotDeleted
        }

        private enum CodingKeys: String, CodingKey {
            case buildsDeleted = "buildsDeleted"
            case buildsNotDeleted = "buildsNotDeleted"
        }
    }

    public struct InvalidateProjectCacheOutput: AWSShape {

    }

    public struct ListBuildsForProjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "ids", required: false, type: .list)
        ]
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?
        /// A list of build IDs for the specified build project, with each build ID representing a single build.
        public let ids: [String]?

        public init(nextToken: String? = nil, ids: [String]? = nil) {
            self.nextToken = nextToken
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case ids = "ids"
        }
    }

    public struct ListCuratedEnvironmentImagesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "platforms", required: false, type: .list)
        ]
        /// Information about supported platforms for Docker images that are managed by AWS CodeBuild.
        public let platforms: [EnvironmentPlatform]?

        public init(platforms: [EnvironmentPlatform]? = nil) {
            self.platforms = platforms
        }

        private enum CodingKeys: String, CodingKey {
            case platforms = "platforms"
        }
    }

    public enum CacheType: String, CustomStringConvertible, Codable {
        case noCache = "NO_CACHE"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetProjectsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "names", required: true, type: .list)
        ]
        /// The names of the build projects.
        public let names: [String]

        public init(names: [String]) {
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case names = "names"
        }
    }

    public struct UpdateWebhookInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rotateSecret", required: false, type: .boolean), 
            AWSShapeMember(label: "branchFilter", required: false, type: .string), 
            AWSShapeMember(label: "projectName", required: true, type: .string)
        ]
        ///  A boolean value that specifies whether the associated repository's secret token should be updated. 
        public let rotateSecret: Bool?
        /// A regular expression used to determine which branches in a repository are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If it doesn't match, then it is not. If branchFilter is empty, then all branches are built.
        public let branchFilter: String?
        /// The name of the AWS CodeBuild project.
        public let projectName: String

        public init(rotateSecret: Bool? = nil, branchFilter: String? = nil, projectName: String) {
            self.rotateSecret = rotateSecret
            self.branchFilter = branchFilter
            self.projectName = projectName
        }

        private enum CodingKeys: String, CodingKey {
            case rotateSecret = "rotateSecret"
            case branchFilter = "branchFilter"
            case projectName = "projectName"
        }
    }

    public struct BatchGetBuildsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ids", required: true, type: .list)
        ]
        /// The IDs of the builds.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
        }
    }

    public struct ListBuildsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum)
        ]
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a next token. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.  
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case sortOrder = "sortOrder"
        }
    }

}