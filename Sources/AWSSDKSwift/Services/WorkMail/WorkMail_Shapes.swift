// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension WorkMail {

    public struct PutMailboxPermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GranteeId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "PermissionValues", required: true, type: .list), 
            AWSShapeMember(label: "EntityId", required: true, type: .string)
        ]
        /// The identifier of the entity (user or group) to which to grant the permissions.
        public let granteeId: String
        /// The identifier of the organization under which the entity (user or group) exists.
        public let organizationId: String
        /// The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.
        public let permissionValues: [PermissionType]
        /// The identifier of the entity (user or group) for which to update mailbox permissions.
        public let entityId: String

        public init(granteeId: String, organizationId: String, permissionValues: [PermissionType], entityId: String) {
            self.granteeId = granteeId
            self.organizationId = organizationId
            self.permissionValues = permissionValues
            self.entityId = entityId
        }

        private enum CodingKeys: String, CodingKey {
            case granteeId = "GranteeId"
            case organizationId = "OrganizationId"
            case permissionValues = "PermissionValues"
            case entityId = "EntityId"
        }
    }

    public struct DisassociateDelegateFromResourceResponse: AWSShape {

    }

    public struct CreateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "DisplayName", required: true, type: .string)
        ]
        /// The name for the user to be created.
        public let name: String
        /// The identifier of the organization for which the user is created.
        public let organizationId: String
        /// The password for the user to be created.
        public let password: String
        /// The display name for the user to be created.
        public let displayName: String

        public init(name: String, organizationId: String, password: String, displayName: String) {
            self.name = name
            self.organizationId = organizationId
            self.password = password
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case organizationId = "OrganizationId"
            case password = "Password"
            case displayName = "DisplayName"
        }
    }

    public struct DeleteMailboxPermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "GranteeId", required: true, type: .string)
        ]
        /// The identifier of the entity (user or group) for which to delete mailbox permissions.
        public let entityId: String
        /// The identifier of the organization under which the entity (user or group) exists.
        public let organizationId: String
        /// The identifier of the entity (user or group) for which to delete granted permissions.
        public let granteeId: String

        public init(entityId: String, organizationId: String, granteeId: String) {
            self.entityId = entityId
            self.organizationId = organizationId
            self.granteeId = granteeId
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "EntityId"
            case organizationId = "OrganizationId"
            case granteeId = "GranteeId"
        }
    }

    public struct ListResourceDelegatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The identifier for the resource whose delegates are listed.
        public let resourceId: String
        /// The number of maximum results in a page.
        public let maxResults: Int32?
        /// The identifier for the organization that contains the resource for which delegates are listed.
        public let organizationId: String
        /// The token used to paginate through the delegates associated with a resource.
        public let nextToken: String?

        public init(resourceId: String, maxResults: Int32? = nil, organizationId: String, nextToken: String? = nil) {
            self.resourceId = resourceId
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case nextToken = "NextToken"
        }
    }

    public struct RegisterToWorkMailRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Email", required: true, type: .string)
        ]
        /// The identifier for the entity to be updated.
        public let entityId: String
        /// The identifier for the organization under which the Amazon WorkMail entity exists.
        public let organizationId: String
        /// The email for the entity to be updated.
        public let email: String

        public init(entityId: String, organizationId: String, email: String) {
            self.entityId = entityId
            self.organizationId = organizationId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "EntityId"
            case organizationId = "OrganizationId"
            case email = "Email"
        }
    }

    public struct Group: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The email of the group.
        public let email: String?
        /// The name of the group.
        public let name: String?
        /// The state of the group, which can be ENABLED, DISABLED, or DELETED.
        public let state: EntityState?
        /// The date indicating when the group was disabled from Amazon WorkMail use.
        public let disabledDate: TimeStamp?
        /// The date indicating when the group was enabled for Amazon WorkMail use.
        public let enabledDate: TimeStamp?
        /// The identifier of the group.
        public let id: String?

        public init(email: String? = nil, name: String? = nil, state: EntityState? = nil, disabledDate: TimeStamp? = nil, enabledDate: TimeStamp? = nil, id: String? = nil) {
            self.email = email
            self.name = name
            self.state = state
            self.disabledDate = disabledDate
            self.enabledDate = enabledDate
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case email = "Email"
            case name = "Name"
            case state = "State"
            case disabledDate = "DisabledDate"
            case enabledDate = "EnabledDate"
            case id = "Id"
        }
    }

    public struct User: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "UserRole", required: false, type: .enum), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The date indicating when the user was disabled from Amazon WorkMail use.
        public let disabledDate: TimeStamp?
        /// The identifier of the user.
        public let id: String?
        /// The role of the user.
        public let userRole: UserRole?
        /// The email of the user.
        public let email: String?
        /// The date indicating when the user was enabled for Amazon WorkMail use.
        public let enabledDate: TimeStamp?
        /// The display name of the user.
        public let displayName: String?
        /// The name of the user.
        public let name: String?
        /// The state of the user, which can be ENABLED, DISABLED, or DELETED.
        public let state: EntityState?

        public init(disabledDate: TimeStamp? = nil, id: String? = nil, userRole: UserRole? = nil, email: String? = nil, enabledDate: TimeStamp? = nil, displayName: String? = nil, name: String? = nil, state: EntityState? = nil) {
            self.disabledDate = disabledDate
            self.id = id
            self.userRole = userRole
            self.email = email
            self.enabledDate = enabledDate
            self.displayName = displayName
            self.name = name
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case disabledDate = "DisabledDate"
            case id = "Id"
            case userRole = "UserRole"
            case email = "Email"
            case enabledDate = "EnabledDate"
            case displayName = "DisplayName"
            case name = "Name"
            case state = "State"
        }
    }

    public struct ResetPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "UserId", required: true, type: .string)
        ]
        /// The identifier of the organization that contains the user for which the password is reset.
        public let organizationId: String
        /// The new password for the user.
        public let password: String
        /// The identifier of the user for whom the password is reset.
        public let userId: String

        public init(organizationId: String, password: String, userId: String) {
            self.organizationId = organizationId
            self.password = password
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case password = "Password"
            case userId = "UserId"
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "GroupId", required: true, type: .string)
        ]
        /// The organization that contains the group.
        public let organizationId: String
        /// The identifier of the group to be deleted.
        public let groupId: String

        public init(organizationId: String, groupId: String) {
            self.organizationId = organizationId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case groupId = "GroupId"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "UserId", required: true, type: .string)
        ]
        /// The organization that contains the user.
        public let organizationId: String
        /// The identifier of the user to be deleted.
        public let userId: String

        public init(organizationId: String, userId: String) {
            self.organizationId = organizationId
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case userId = "UserId"
        }
    }

    public struct ListGroupMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "GroupId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The identifier for the organization under which the group exists.
        public let organizationId: String
        /// The identifier for the group to which the members are associated.
        public let groupId: String
        ///  The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, organizationId: String, groupId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.groupId = groupId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case groupId = "GroupId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeOrganizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string)
        ]
        /// The identifier for the organization to be described.
        public let organizationId: String

        public init(organizationId: String) {
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
        }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the member.
        public let name: String?
        /// A member can be a user or group.
        public let `type`: MemberType?
        /// The state of the member, which can be ENABLED, DISABLED, or DELETED.
        public let state: EntityState?
        /// The date indicating when the member was disabled from Amazon WorkMail use.
        public let disabledDate: TimeStamp?
        /// The date indicating when the member was enabled for Amazon WorkMail use.
        public let enabledDate: TimeStamp?
        /// The identifier of the member.
        public let id: String?

        public init(name: String? = nil, type: MemberType? = nil, state: EntityState? = nil, disabledDate: TimeStamp? = nil, enabledDate: TimeStamp? = nil, id: String? = nil) {
            self.name = name
            self.`type` = `type`
            self.state = state
            self.disabledDate = disabledDate
            self.enabledDate = enabledDate
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case `type` = "Type"
            case state = "State"
            case disabledDate = "DisabledDate"
            case enabledDate = "EnabledDate"
            case id = "Id"
        }
    }

    public struct CreateAliasResponse: AWSShape {

    }

    public struct CreateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        /// The ID of the group.
        public let groupId: String?

        public init(groupId: String? = nil) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct AssociateDelegateToResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "EntityId", required: true, type: .string)
        ]
        /// The resource for which members are associated.
        public let resourceId: String
        /// The organization under which the resource exists.
        public let organizationId: String
        /// The member (user or group) to associate to the resource.
        public let entityId: String

        public init(resourceId: String, organizationId: String, entityId: String) {
            self.resourceId = resourceId
            self.organizationId = organizationId
            self.entityId = entityId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case organizationId = "OrganizationId"
            case entityId = "EntityId"
        }
    }

    public struct AssociateDelegateToResourceResponse: AWSShape {

    }

    public enum MemberType: String, CustomStringConvertible, Codable {
        case group = "GROUP"
        case user = "USER"
        public var description: String { return self.rawValue }
    }

    public struct ListResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The identifier for the organization under which the resources exist.
        public let organizationId: String
        /// The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, organizationId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case nextToken = "NextToken"
        }
    }

    public struct RegisterToWorkMailResponse: AWSShape {

    }

    public struct UpdatePrimaryEmailAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Email", required: true, type: .string)
        ]
        /// The entity to update (user, group, or resource).
        public let entityId: String
        /// The organization that contains the entity to update.
        public let organizationId: String
        /// The value of the email to be updated as primary.
        public let email: String

        public init(entityId: String, organizationId: String, email: String) {
            self.entityId = entityId
            self.organizationId = organizationId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "EntityId"
            case organizationId = "OrganizationId"
            case email = "Email"
        }
    }

    public struct ListOrganizationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The overview of owned organizations presented as a list of organization summaries.
        public let organizationSummaries: [OrganizationSummary]?
        /// The token to use to retrieve the next page of results. The value is "null" when there are no more results to return.
        public let nextToken: String?

        public init(organizationSummaries: [OrganizationSummary]? = nil, nextToken: String? = nil) {
            self.organizationSummaries = organizationSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case organizationSummaries = "OrganizationSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListUsersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The identifier for the organization under which the users exist.
        public let organizationId: String
        /// TBD
        public let nextToken: String?

        public init(maxResults: Int32? = nil, organizationId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case nextToken = "NextToken"
        }
    }

    public struct CreateAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Alias", required: true, type: .string)
        ]
        /// The alias is added to this Amazon WorkMail entity.
        public let entityId: String
        /// The organization under which the member exists.
        public let organizationId: String
        /// The alias to add to the user.
        public let alias: String

        public init(entityId: String, organizationId: String, alias: String) {
            self.entityId = entityId
            self.organizationId = organizationId
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "EntityId"
            case organizationId = "OrganizationId"
            case alias = "Alias"
        }
    }

    public struct DescribeGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp)
        ]
        /// The email of the described group.
        public let email: String?
        /// The name of the described group.
        public let name: String?
        /// The state of the user: enabled (registered to Amazon WorkMail) or disabled (deregistered or never registered to Amazon WorkMail).
        public let state: EntityState?
        /// The date and time when a user was deregistered from Amazon WorkMail, in UNIX epoch time format.
        public let disabledDate: TimeStamp?
        /// The identifier of the described group.
        public let groupId: String?
        /// The date and time when a user was registered to Amazon WorkMail, in UNIX epoch time format.
        public let enabledDate: TimeStamp?

        public init(email: String? = nil, name: String? = nil, state: EntityState? = nil, disabledDate: TimeStamp? = nil, groupId: String? = nil, enabledDate: TimeStamp? = nil) {
            self.email = email
            self.name = name
            self.state = state
            self.disabledDate = disabledDate
            self.groupId = groupId
            self.enabledDate = enabledDate
        }

        private enum CodingKeys: String, CodingKey {
            case email = "Email"
            case name = "Name"
            case state = "State"
            case disabledDate = "DisabledDate"
            case groupId = "GroupId"
            case enabledDate = "EnabledDate"
        }
    }

    public struct ListGroupMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Members", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The members associated to the group.
        public let members: [Member]?
        /// The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(members: [Member]? = nil, nextToken: String? = nil) {
            self.members = members
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case members = "Members"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteResourceResponse: AWSShape {

    }

    public struct DeleteUserResponse: AWSShape {

    }

    public struct DescribeUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "UserId", required: true, type: .string)
        ]
        /// The identifier for the organization under which the user exists.
        public let organizationId: String
        /// The identifier for the user to be described.
        public let userId: String

        public init(organizationId: String, userId: String) {
            self.organizationId = organizationId
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case userId = "UserId"
        }
    }

    public struct ListMailboxPermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The identifier of the organization under which the entity (user or group) exists.
        public let organizationId: String
        /// The identifier of the entity (user or group) for which to list mailbox permissions.
        public let entityId: String
        /// The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, organizationId: String, entityId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.entityId = entityId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case entityId = "EntityId"
            case nextToken = "NextToken"
        }
    }

    public struct CreateResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// The identifier associated with the organization for which the resource is created.
        public let organizationId: String
        /// The name of the created resource.
        public let name: String
        /// The type of the created resource.
        public let `type`: ResourceType

        public init(organizationId: String, name: String, type: ResourceType) {
            self.organizationId = organizationId
            self.name = name
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case name = "Name"
            case `type` = "Type"
        }
    }

    public enum PermissionType: String, CustomStringConvertible, Codable {
        case fullAccess = "FULL_ACCESS"
        case sendAs = "SEND_AS"
        case sendOnBehalf = "SEND_ON_BEHALF"
        public var description: String { return self.rawValue }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The date indicating when the resource was disabled from Amazon WorkMail use.
        public let disabledDate: TimeStamp?
        /// The type of the resource: equipment or room.
        public let `type`: ResourceType?
        /// The identifier of the resource.
        public let id: String?
        /// The email of the resource.
        public let email: String?
        /// The date indicating when the resource was enabled for Amazon WorkMail use.
        public let enabledDate: TimeStamp?
        /// The name of the resource.
        public let name: String?
        /// The state of the resource, which can be ENABLED, DISABLED, or DELETED.
        public let state: EntityState?

        public init(disabledDate: TimeStamp? = nil, type: ResourceType? = nil, id: String? = nil, email: String? = nil, enabledDate: TimeStamp? = nil, name: String? = nil, state: EntityState? = nil) {
            self.disabledDate = disabledDate
            self.`type` = `type`
            self.id = id
            self.email = email
            self.enabledDate = enabledDate
            self.name = name
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case disabledDate = "DisabledDate"
            case `type` = "Type"
            case id = "Id"
            case email = "Email"
            case enabledDate = "EnabledDate"
            case name = "Name"
            case state = "State"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The overview of groups for an organization.
        public let groups: [Group]?
        /// The token to use to retrieve the next page of results. The value is "null" when there are no more results to return.
        public let nextToken: String?

        public init(groups: [Group]? = nil, nextToken: String? = nil) {
            self.groups = groups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case nextToken = "NextToken"
        }
    }

    public struct CreateResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// The identifier of the created resource.
        public let resourceId: String?

        public init(resourceId: String? = nil) {
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
        }
    }

    public struct ListMailboxPermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Permissions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// One page of the entity's mailbox permissions.
        public let permissions: [Permission]?
        /// The token to use to retrieve the next page of results. The value is "null" when there are no more results to return.
        public let nextToken: String?

        public init(permissions: [Permission]? = nil, nextToken: String? = nil) {
            self.permissions = permissions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case permissions = "Permissions"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeOrganizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultMailDomain", required: false, type: .string), 
            AWSShapeMember(label: "Alias", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryType", required: false, type: .string), 
            AWSShapeMember(label: "CompletedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string)
        ]
        /// The default mail domain associated with the organization.
        public let defaultMailDomain: String?
        /// The alias for an organization.
        public let alias: String?
        /// The identifier of an organization.
        public let organizationId: String?
        /// The state of an organization.
        public let state: String?
        /// The identifier for the directory associated with an Amazon WorkMail organization.
        public let directoryId: String?
        /// The type of directory associated with the Amazon WorkMail organization.
        public let directoryType: String?
        /// The date at which the organization became usable in the Amazon WorkMail context, in UNIX epoch time format.
        public let completedDate: TimeStamp?
        /// The (optional) error message indicating if unexpected behavior was encountered with regards to the organization.
        public let errorMessage: String?

        public init(defaultMailDomain: String? = nil, alias: String? = nil, organizationId: String? = nil, state: String? = nil, directoryId: String? = nil, directoryType: String? = nil, completedDate: TimeStamp? = nil, errorMessage: String? = nil) {
            self.defaultMailDomain = defaultMailDomain
            self.alias = alias
            self.organizationId = organizationId
            self.state = state
            self.directoryId = directoryId
            self.directoryType = directoryType
            self.completedDate = completedDate
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case defaultMailDomain = "DefaultMailDomain"
            case alias = "Alias"
            case organizationId = "OrganizationId"
            case state = "State"
            case directoryId = "DirectoryId"
            case directoryType = "DirectoryType"
            case completedDate = "CompletedDate"
            case errorMessage = "ErrorMessage"
        }
    }

    public struct DeleteGroupResponse: AWSShape {

    }

    public struct DeleteMailboxPermissionsResponse: AWSShape {

    }

    public struct ListUsersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The overview of users for an organization.
        public let users: [User]?
        ///  The token to use to retrieve the next page of results. This value is `null` when there are no more results to return.
        public let nextToken: String?

        public init(users: [User]? = nil, nextToken: String? = nil) {
            self.users = users
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case nextToken = "NextToken"
        }
    }

    public struct BookingOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoDeclineRecurringRequests", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoAcceptRequests", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoDeclineConflictingRequests", required: false, type: .boolean)
        ]
        /// The resource's ability to automatically decline any recurring requests.
        public let autoDeclineRecurringRequests: Bool?
        /// The resource's ability to automatically reply to requests. If disabled, delegates must be associated to the resource.
        public let autoAcceptRequests: Bool?
        /// The resource's ability to automatically decline any conflicting requests.
        public let autoDeclineConflictingRequests: Bool?

        public init(autoDeclineRecurringRequests: Bool? = nil, autoAcceptRequests: Bool? = nil, autoDeclineConflictingRequests: Bool? = nil) {
            self.autoDeclineRecurringRequests = autoDeclineRecurringRequests
            self.autoAcceptRequests = autoAcceptRequests
            self.autoDeclineConflictingRequests = autoDeclineConflictingRequests
        }

        private enum CodingKeys: String, CodingKey {
            case autoDeclineRecurringRequests = "AutoDeclineRecurringRequests"
            case autoAcceptRequests = "AutoAcceptRequests"
            case autoDeclineConflictingRequests = "AutoDeclineConflictingRequests"
        }
    }

    public struct DeleteAliasResponse: AWSShape {

    }

    public enum EntityState: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct ListOrganizationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ResetPasswordResponse: AWSShape {

    }

    public struct Permission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GranteeType", required: true, type: .enum), 
            AWSShapeMember(label: "GranteeId", required: true, type: .string), 
            AWSShapeMember(label: "PermissionValues", required: true, type: .list)
        ]
        /// The type of entity (user, group) of the entity referred to in GranteeId.
        public let granteeType: MemberType
        /// The identifier of the entity (user or group) to which the permissions are granted.
        public let granteeId: String
        /// The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.
        public let permissionValues: [PermissionType]

        public init(granteeType: MemberType, granteeId: String, permissionValues: [PermissionType]) {
            self.granteeType = granteeType
            self.granteeId = granteeId
            self.permissionValues = permissionValues
        }

        private enum CodingKeys: String, CodingKey {
            case granteeType = "GranteeType"
            case granteeId = "GranteeId"
            case permissionValues = "PermissionValues"
        }
    }

    public struct DeleteAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Alias", required: true, type: .string)
        ]
        /// The identifier for the Amazon WorkMail entity to have the aliases removed.
        public let entityId: String
        /// The identifier for the organization under which the user exists.
        public let organizationId: String
        /// The aliases to be removed from the user's set of aliases. Duplicate entries in the list are collapsed into single entries (the list is transformed into a set).
        public let alias: String

        public init(entityId: String, organizationId: String, alias: String) {
            self.entityId = entityId
            self.organizationId = organizationId
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "EntityId"
            case organizationId = "OrganizationId"
            case alias = "Alias"
        }
    }

    public struct DescribeUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "UserRole", required: false, type: .enum), 
            AWSShapeMember(label: "UserId", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch time format.
        public let disabledDate: TimeStamp?
        /// In certain cases other entities are modeled as users. If interoperability is enabled, resources are imported into Amazon WorkMail as users. Because different Amazon WorkMail organizations rely on different directory types, administrators can distinguish between a user that is not registered to Amazon WorkMail (is disabled and has a user role) and the administrative users of the directory. The values are USER, RESOURCE, and SYSTEM_USER.
        public let userRole: UserRole?
        /// The identifier for the described user.
        public let userId: String?
        /// The email of the user.
        public let email: String?
        /// The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch time format.
        public let enabledDate: TimeStamp?
        /// The display name of the user.
        public let displayName: String?
        /// The name for the user.
        public let name: String?
        /// The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or never registered to Amazon WorkMail).
        public let state: EntityState?

        public init(disabledDate: TimeStamp? = nil, userRole: UserRole? = nil, userId: String? = nil, email: String? = nil, enabledDate: TimeStamp? = nil, displayName: String? = nil, name: String? = nil, state: EntityState? = nil) {
            self.disabledDate = disabledDate
            self.userRole = userRole
            self.userId = userId
            self.email = email
            self.enabledDate = enabledDate
            self.displayName = displayName
            self.name = name
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case disabledDate = "DisabledDate"
            case userRole = "UserRole"
            case userId = "UserId"
            case email = "Email"
            case enabledDate = "EnabledDate"
            case displayName = "DisplayName"
            case name = "Name"
            case state = "State"
        }
    }

    public struct DeregisterFromWorkMailResponse: AWSShape {

    }

    public struct UpdatePrimaryEmailAddressResponse: AWSShape {

    }

    public struct CreateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", required: false, type: .string)
        ]
        /// The information regarding the newly created user.
        public let userId: String?

        public init(userId: String? = nil) {
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
        }
    }

    public struct DescribeGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "GroupId", required: true, type: .string)
        ]
        /// The identifier for the organization under which the group exists.
        public let organizationId: String
        /// The identifier for the group to be described.
        public let groupId: String

        public init(organizationId: String, groupId: String) {
            self.organizationId = organizationId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case groupId = "GroupId"
        }
    }

    public struct PutMailboxPermissionsResponse: AWSShape {

    }

    public struct CreateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The organization under which the group is to be created.
        public let organizationId: String
        /// The name of the group.
        public let name: String

        public init(organizationId: String, name: String) {
            self.organizationId = organizationId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case name = "Name"
        }
    }

    public struct DisassociateMemberFromGroupResponse: AWSShape {

    }

    public struct UpdateResourceResponse: AWSShape {

    }

    public struct DisassociateMemberFromGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "GroupId", required: true, type: .string), 
            AWSShapeMember(label: "MemberId", required: true, type: .string)
        ]
        /// The identifier for the organization under which the group exists.
        public let organizationId: String
        /// The identifier for the group from which members are removed.
        public let groupId: String
        /// The identifier for the member to be removed to the group.
        public let memberId: String

        public init(organizationId: String, groupId: String, memberId: String) {
            self.organizationId = organizationId
            self.groupId = groupId
            self.memberId = memberId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case groupId = "GroupId"
            case memberId = "MemberId"
        }
    }

    public struct AssociateMemberToGroupResponse: AWSShape {

    }

    public struct Delegate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// The identifier for the user or group is associated as the resource's delegate.
        public let id: String
        /// The type of the delegate: user or group.
        public let `type`: MemberType

        public init(id: String, type: MemberType) {
            self.id = id
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case `type` = "Type"
        }
    }

    public struct DescribeResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "BookingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "EnabledDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The date and time when a resource was registered from Amazon WorkMail, in UNIX epoch time format.
        public let disabledDate: TimeStamp?
        /// The type of the described resource.
        public let `type`: ResourceType?
        /// The email of the described resource.
        public let email: String?
        /// The identifier of the described resource.
        public let resourceId: String?
        /// The booking options for the described resource.
        public let bookingOptions: BookingOptions?
        /// The date and time when a resource was registered to Amazon WorkMail, in UNIX epoch time format.
        public let enabledDate: TimeStamp?
        /// The name of the described resource.
        public let name: String?
        /// The state of the resource: enabled (registered to Amazon WorkMail) or disabled (deregistered or never registered to Amazon WorkMail).
        public let state: EntityState?

        public init(disabledDate: TimeStamp? = nil, type: ResourceType? = nil, email: String? = nil, resourceId: String? = nil, bookingOptions: BookingOptions? = nil, enabledDate: TimeStamp? = nil, name: String? = nil, state: EntityState? = nil) {
            self.disabledDate = disabledDate
            self.`type` = `type`
            self.email = email
            self.resourceId = resourceId
            self.bookingOptions = bookingOptions
            self.enabledDate = enabledDate
            self.name = name
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case disabledDate = "DisabledDate"
            case `type` = "Type"
            case email = "Email"
            case resourceId = "ResourceId"
            case bookingOptions = "BookingOptions"
            case enabledDate = "EnabledDate"
            case name = "Name"
            case state = "State"
        }
    }

    public struct ListAliasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The identifier for the organization under which the entity exists.
        public let organizationId: String
        /// The identifier for the entity for which to list the aliases.
        public let entityId: String
        /// The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, organizationId: String, entityId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.entityId = entityId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case entityId = "EntityId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string)
        ]
        /// The identifier of the resource to be described.
        public let resourceId: String
        /// The identifier associated with the organization for which the resource is described.
        public let organizationId: String

        public init(resourceId: String, organizationId: String) {
            self.resourceId = resourceId
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case organizationId = "OrganizationId"
        }
    }

    public struct ListGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// The identifier for the organization under which the groups exist.
        public let organizationId: String
        /// The token to use to retrieve the next page of results. The first call does not contain any tokens.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, organizationId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.organizationId = organizationId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case organizationId = "OrganizationId"
            case nextToken = "NextToken"
        }
    }

    public struct AssociateMemberToGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "GroupId", required: true, type: .string), 
            AWSShapeMember(label: "MemberId", required: true, type: .string)
        ]
        /// The organization under which the group exists.
        public let organizationId: String
        /// The group for which the member is associated.
        public let groupId: String
        /// The member to associate to the group.
        public let memberId: String

        public init(organizationId: String, groupId: String, memberId: String) {
            self.organizationId = organizationId
            self.groupId = groupId
            self.memberId = memberId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case groupId = "GroupId"
            case memberId = "MemberId"
        }
    }

    public struct ListResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .list)
        ]
        ///  The token used to paginate through all the organization's resources. While results are still available, it has an associated value. When the last page is reached, the token is empty.
        public let nextToken: String?
        /// One page of the organization's resource representation.
        public let resources: [Resource]?

        public init(nextToken: String? = nil, resources: [Resource]? = nil) {
            self.nextToken = nextToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resources = "Resources"
        }
    }

    public struct ListResourceDelegatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Delegates", required: false, type: .list)
        ]
        /// The token used to paginate through the delegates associated with a resource. While results are still available, it has an associated value. When the last page is reached, the token is empty. 
        public let nextToken: String?
        /// One page of the resource's delegates.
        public let delegates: [Delegate]?

        public init(nextToken: String? = nil, delegates: [Delegate]? = nil) {
            self.nextToken = nextToken
            self.delegates = delegates
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case delegates = "Delegates"
        }
    }

    public struct ListAliasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Aliases", required: false, type: .list)
        ]
        /// The token to use to retrieve the next page of results. The value is "null" when there are no more results to return.
        public let nextToken: String?
        /// The entity's paginated aliases.
        public let aliases: [String]?

        public init(nextToken: String? = nil, aliases: [String]? = nil) {
            self.nextToken = nextToken
            self.aliases = aliases
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case aliases = "Aliases"
        }
    }

    public struct DisassociateDelegateFromResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "EntityId", required: true, type: .string)
        ]
        /// The identifier of the resource from which delegates' set members are removed. 
        public let resourceId: String
        /// The identifier for the organization under which the resource exists.
        public let organizationId: String
        /// The identifier for the member (user, group) to be removed from the resource's delegates.
        public let entityId: String

        public init(resourceId: String, organizationId: String, entityId: String) {
            self.resourceId = resourceId
            self.organizationId = organizationId
            self.entityId = entityId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case organizationId = "OrganizationId"
            case entityId = "EntityId"
        }
    }

    public struct UpdateResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string), 
            AWSShapeMember(label: "BookingOptions", required: false, type: .structure)
        ]
        /// The identifier of the resource to be updated.
        public let resourceId: String
        /// The name of the resource to be updated.
        public let name: String?
        /// The identifier associated with the organization for which the resource is updated.
        public let organizationId: String
        /// The resource's booking options to be updated.
        public let bookingOptions: BookingOptions?

        public init(resourceId: String, name: String? = nil, organizationId: String, bookingOptions: BookingOptions? = nil) {
            self.resourceId = resourceId
            self.name = name
            self.organizationId = organizationId
            self.bookingOptions = bookingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case name = "Name"
            case organizationId = "OrganizationId"
            case bookingOptions = "BookingOptions"
        }
    }

    public struct DeleteResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string)
        ]
        /// The identifier of the resource to be deleted.
        public let resourceId: String
        /// The identifier associated with the organization for which the resource is deleted.
        public let organizationId: String

        public init(resourceId: String, organizationId: String) {
            self.resourceId = resourceId
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case organizationId = "OrganizationId"
        }
    }

    public struct DeregisterFromWorkMailRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: true, type: .string)
        ]
        /// The identifier for the entity to be updated.
        public let entityId: String
        /// The identifier for the organization under which the Amazon WorkMail entity exists.
        public let organizationId: String

        public init(entityId: String, organizationId: String) {
            self.entityId = entityId
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "EntityId"
            case organizationId = "OrganizationId"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case room = "ROOM"
        case equipment = "EQUIPMENT"
        public var description: String { return self.rawValue }
    }

    public struct OrganizationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string)
        ]
        /// The alias associated with the organization.
        public let alias: String?
        /// The identifier associated with the organization.
        public let organizationId: String?
        /// The state associated with the organization.
        public let state: String?
        /// The error message associated with the organization. It is only present if unexpected behavior has occurred with regards to the organization. It provides insight or solutions regarding unexpected behavior.
        public let errorMessage: String?

        public init(alias: String? = nil, organizationId: String? = nil, state: String? = nil, errorMessage: String? = nil) {
            self.alias = alias
            self.organizationId = organizationId
            self.state = state
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
            case organizationId = "OrganizationId"
            case state = "State"
            case errorMessage = "ErrorMessage"
        }
    }

    public enum UserRole: String, CustomStringConvertible, Codable {
        case user = "USER"
        case resource = "RESOURCE"
        case systemUser = "SYSTEM_USER"
        public var description: String { return self.rawValue }
    }

}