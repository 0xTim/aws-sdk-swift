// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension WorkDocs {

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Roles", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The type of resource.
        public let `type`: PrincipalType?
        /// The permission information for the resource.
        public let roles: [PermissionInfo]?
        /// The ID of the resource.
        public let id: String?

        public init(type: PrincipalType? = nil, roles: [PermissionInfo]? = nil, id: String? = nil) {
            self.`type` = `type`
            self.roles = roles
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case roles = "Roles"
            case id = "Id"
        }
    }

    public struct GetFolderPathRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// A comma-separated list of values. Specify "NAME" to include the names of the parent folders.
        public let fields: String?
        /// This value is not supported.
        public let marker: String?
        /// The ID of the folder.
        public let folderId: String
        /// The maximum number of levels in the hierarchy to return.
        public let limit: Int32?

        public init(authenticationToken: String? = nil, fields: String? = nil, marker: String? = nil, folderId: String, limit: Int32? = nil) {
            self.authenticationToken = authenticationToken
            self.fields = fields
            self.marker = marker
            self.folderId = folderId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case fields = "fields"
            case marker = "marker"
            case folderId = "FolderId"
            case limit = "limit"
        }
    }

    public enum DocumentVersionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct Comment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecipientId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "Visibility", required: false, type: .enum), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "Contributor", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "CommentId", required: true, type: .string)
        ]
        /// If the comment is a reply to another user's comment, this field contains the user ID of the user being replied to.
        public let recipientId: String?
        /// The status of the comment.
        public let status: CommentStatusType?
        /// The ID of the root comment in the thread.
        public let threadId: String?
        /// The text of the comment.
        public let text: String?
        /// The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.
        public let visibility: CommentVisibilityType?
        /// The ID of the parent comment.
        public let parentId: String?
        /// The details of the user who made the comment.
        public let contributor: User?
        /// The time that the comment was created.
        public let createdTimestamp: TimeStamp?
        /// The ID of the comment.
        public let commentId: String

        public init(recipientId: String? = nil, status: CommentStatusType? = nil, threadId: String? = nil, text: String? = nil, visibility: CommentVisibilityType? = nil, parentId: String? = nil, contributor: User? = nil, createdTimestamp: TimeStamp? = nil, commentId: String) {
            self.recipientId = recipientId
            self.status = status
            self.threadId = threadId
            self.text = text
            self.visibility = visibility
            self.parentId = parentId
            self.contributor = contributor
            self.createdTimestamp = createdTimestamp
            self.commentId = commentId
        }

        private enum CodingKeys: String, CodingKey {
            case recipientId = "RecipientId"
            case status = "Status"
            case threadId = "ThreadId"
            case text = "Text"
            case visibility = "Visibility"
            case parentId = "ParentId"
            case contributor = "Contributor"
            case createdTimestamp = "CreatedTimestamp"
            case commentId = "CommentId"
        }
    }

    public enum DocumentThumbnailType: String, CustomStringConvertible, Codable {
        case small = "SMALL"
        case smallHq = "SMALL_HQ"
        case large = "LARGE"
        public var description: String { return self.rawValue }
    }

    public struct UpdateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Locale", required: false, type: .enum), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "GrantPoweruserPrivileges", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "StorageRule", required: false, type: .structure)
        ]
        /// The locale of the user.
        public let locale: LocaleType?
        /// The surname of the user.
        public let surname: String?
        /// Boolean value to determine whether the user is granted Poweruser privileges.
        public let grantPoweruserPrivileges: BooleanEnumType?
        /// The type of the user.
        public let `type`: UserType?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The ID of the user.
        public let userId: String
        /// The given name of the user.
        public let givenName: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The amount of storage for the user.
        public let storageRule: StorageRuleType?

        public init(locale: LocaleType? = nil, surname: String? = nil, grantPoweruserPrivileges: BooleanEnumType? = nil, type: UserType? = nil, timeZoneId: String? = nil, userId: String, givenName: String? = nil, authenticationToken: String? = nil, storageRule: StorageRuleType? = nil) {
            self.locale = locale
            self.surname = surname
            self.grantPoweruserPrivileges = grantPoweruserPrivileges
            self.`type` = `type`
            self.timeZoneId = timeZoneId
            self.userId = userId
            self.givenName = givenName
            self.authenticationToken = authenticationToken
            self.storageRule = storageRule
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "Locale"
            case surname = "Surname"
            case grantPoweruserPrivileges = "GrantPoweruserPrivileges"
            case `type` = "Type"
            case timeZoneId = "TimeZoneId"
            case userId = "UserId"
            case givenName = "GivenName"
            case authenticationToken = "Authentication"
            case storageRule = "StorageRule"
        }
    }

    public struct UserStorageMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageRule", required: false, type: .structure), 
            AWSShapeMember(label: "StorageUtilizedInBytes", required: false, type: .long)
        ]
        /// The storage for a user.
        public let storageRule: StorageRuleType?
        /// The amount of storage used, in bytes.
        public let storageUtilizedInBytes: Int64?

        public init(storageRule: StorageRuleType? = nil, storageUtilizedInBytes: Int64? = nil) {
            self.storageRule = storageRule
            self.storageUtilizedInBytes = storageUtilizedInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case storageRule = "StorageRule"
            case storageUtilizedInBytes = "StorageUtilizedInBytes"
        }
    }

    public enum ResourceCollectionType: String, CustomStringConvertible, Codable {
        case sharedWithMe = "SHARED_WITH_ME"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFolderContentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Sort", location: .querystring(locationName: "sort"), required: false, type: .enum), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "Order", location: .querystring(locationName: "order"), required: false, type: .enum), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the folder.
        public let folderId: String
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The sorting criteria.
        public let sort: ResourceSortType?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The type of items.
        public let `type`: FolderContentType?
        /// The order for the contents of the folder.
        public let order: OrderType?
        /// The contents to include. Specify "INITIALIZED" to include initialized documents.
        public let include: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(folderId: String, limit: Int32? = nil, sort: ResourceSortType? = nil, marker: String? = nil, type: FolderContentType? = nil, order: OrderType? = nil, include: String? = nil, authenticationToken: String? = nil) {
            self.folderId = folderId
            self.limit = limit
            self.sort = sort
            self.marker = marker
            self.`type` = `type`
            self.order = order
            self.include = include
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case folderId = "FolderId"
            case limit = "limit"
            case sort = "sort"
            case marker = "marker"
            case `type` = "type"
            case order = "order"
            case include = "include"
            case authenticationToken = "Authentication"
        }
    }

    public struct InitiateDocumentVersionUploadResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "UploadMetadata", required: false, type: .structure)
        ]
        /// The document metadata.
        public let metadata: DocumentMetadata?
        /// The upload metadata.
        public let uploadMetadata: UploadMetadata?

        public init(metadata: DocumentMetadata? = nil, uploadMetadata: UploadMetadata? = nil) {
            self.metadata = metadata
            self.uploadMetadata = uploadMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case uploadMetadata = "UploadMetadata"
        }
    }

    public struct DocumentVersionMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Source", required: false, type: .map), 
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentCreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Thumbnail", required: false, type: .map), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The source of the document.
        public let source: [DocumentSourceType: String]?
        /// The content type of the document.
        public let contentType: String?
        /// The signature of the document.
        public let signature: String?
        /// The ID of the creator.
        public let creatorId: String?
        /// The timestamp when the document was last uploaded.
        public let modifiedTimestamp: TimeStamp?
        /// The name of the version.
        public let name: String?
        /// The timestamp when the document was first uploaded.
        public let createdTimestamp: TimeStamp?
        /// The timestamp when the content of the document was modified.
        public let contentModifiedTimestamp: TimeStamp?
        /// The timestamp when the content of the document was originally created.
        public let contentCreatedTimestamp: TimeStamp?
        /// The size of the document, in bytes.
        public let size: Int64?
        /// The ID of the version.
        public let id: String?
        /// The thumbnail of the document.
        public let thumbnail: [DocumentThumbnailType: String]?
        /// The status of the document.
        public let status: DocumentStatusType?

        public init(source: [DocumentSourceType: String]? = nil, contentType: String? = nil, signature: String? = nil, creatorId: String? = nil, modifiedTimestamp: TimeStamp? = nil, name: String? = nil, createdTimestamp: TimeStamp? = nil, contentModifiedTimestamp: TimeStamp? = nil, contentCreatedTimestamp: TimeStamp? = nil, size: Int64? = nil, id: String? = nil, thumbnail: [DocumentThumbnailType: String]? = nil, status: DocumentStatusType? = nil) {
            self.source = source
            self.contentType = contentType
            self.signature = signature
            self.creatorId = creatorId
            self.modifiedTimestamp = modifiedTimestamp
            self.name = name
            self.createdTimestamp = createdTimestamp
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.contentCreatedTimestamp = contentCreatedTimestamp
            self.size = size
            self.id = id
            self.thumbnail = thumbnail
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case source = "Source"
            case contentType = "ContentType"
            case signature = "Signature"
            case creatorId = "CreatorId"
            case modifiedTimestamp = "ModifiedTimestamp"
            case name = "Name"
            case createdTimestamp = "CreatedTimestamp"
            case contentModifiedTimestamp = "ContentModifiedTimestamp"
            case contentCreatedTimestamp = "ContentCreatedTimestamp"
            case size = "Size"
            case id = "Id"
            case thumbnail = "Thumbnail"
            case status = "Status"
        }
    }

    public struct GetResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Folders", required: false, type: .list), 
            AWSShapeMember(label: "Documents", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The folders in the specified folder.
        public let folders: [FolderMetadata]?
        /// The documents in the specified collection.
        public let documents: [DocumentMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(folders: [FolderMetadata]? = nil, documents: [DocumentMetadata]? = nil, marker: String? = nil) {
            self.folders = folders
            self.documents = documents
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case folders = "Folders"
            case documents = "Documents"
            case marker = "Marker"
        }
    }

    public struct CommentMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "CommentId", required: false, type: .string), 
            AWSShapeMember(label: "RecipientId", required: false, type: .string), 
            AWSShapeMember(label: "Contributor", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp)
        ]
        /// The status of the comment.
        public let commentStatus: CommentStatusType?
        /// The ID of the comment.
        public let commentId: String?
        /// The ID of the user being replied to.
        public let recipientId: String?
        /// The user who made the comment.
        public let contributor: User?
        /// The timestamp that the comment was created.
        public let createdTimestamp: TimeStamp?

        public init(commentStatus: CommentStatusType? = nil, commentId: String? = nil, recipientId: String? = nil, contributor: User? = nil, createdTimestamp: TimeStamp? = nil) {
            self.commentStatus = commentStatus
            self.commentId = commentId
            self.recipientId = recipientId
            self.contributor = contributor
            self.createdTimestamp = createdTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case commentStatus = "CommentStatus"
            case commentId = "CommentId"
            case recipientId = "RecipientId"
            case contributor = "Contributor"
            case createdTimestamp = "CreatedTimestamp"
        }
    }

    public struct CreateCustomMetadataResponse: AWSShape {

    }

    public enum RolePermissionType: String, CustomStringConvertible, Codable {
        case direct = "DIRECT"
        case inherited = "INHERITED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFolderContentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the folder.
        public let folderId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(folderId: String, authenticationToken: String? = nil) {
            self.folderId = folderId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case folderId = "FolderId"
            case authenticationToken = "Authentication"
        }
    }

    public struct ActivateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

    public struct DeactivateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

    public enum SubscriptionProtocolType: String, CustomStringConvertible, Codable {
        case https = "HTTPS"
        public var description: String { return self.rawValue }
    }

    public struct DocumentMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Labels", required: false, type: .list), 
            AWSShapeMember(label: "LatestVersionMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp)
        ]
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// List of labels on the document.
        public let labels: [String]?
        /// The latest version of the document.
        public let latestVersionMetadata: DocumentVersionMetadata?
        /// The ID of the creator.
        public let creatorId: String?
        /// The ID of the document.
        public let id: String?
        /// The resource state.
        public let resourceState: ResourceStateType?
        /// The time when the document was created.
        public let createdTimestamp: TimeStamp?
        /// The time when the document was updated.
        public let modifiedTimestamp: TimeStamp?

        public init(parentFolderId: String? = nil, labels: [String]? = nil, latestVersionMetadata: DocumentVersionMetadata? = nil, creatorId: String? = nil, id: String? = nil, resourceState: ResourceStateType? = nil, createdTimestamp: TimeStamp? = nil, modifiedTimestamp: TimeStamp? = nil) {
            self.parentFolderId = parentFolderId
            self.labels = labels
            self.latestVersionMetadata = latestVersionMetadata
            self.creatorId = creatorId
            self.id = id
            self.resourceState = resourceState
            self.createdTimestamp = createdTimestamp
            self.modifiedTimestamp = modifiedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case parentFolderId = "ParentFolderId"
            case labels = "Labels"
            case latestVersionMetadata = "LatestVersionMetadata"
            case creatorId = "CreatorId"
            case id = "Id"
            case resourceState = "ResourceState"
            case createdTimestamp = "CreatedTimestamp"
            case modifiedTimestamp = "ModifiedTimestamp"
        }
    }

    public struct GetFolderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The metadata of the folder.
        public let metadata: FolderMetadata?
        /// The custom metadata on the folder.
        public let customMetadata: [String: String]?

        public init(metadata: FolderMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public struct GetDocumentVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// A comma-separated list of values. Specify "SOURCE" to include a URL for the source document.
        public let fields: String?
        /// The version ID of the document.
        public let versionId: String
        /// The ID of the document.
        public let documentId: String
        /// Set this to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?

        public init(authenticationToken: String? = nil, fields: String? = nil, versionId: String, documentId: String, includeCustomMetadata: Bool? = nil) {
            self.authenticationToken = authenticationToken
            self.fields = fields
            self.versionId = versionId
            self.documentId = documentId
            self.includeCustomMetadata = includeCustomMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case fields = "fields"
            case versionId = "VersionId"
            case documentId = "DocumentId"
            case includeCustomMetadata = "includeCustomMetadata"
        }
    }

    public struct CreateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public enum DocumentStatusType: String, CustomStringConvertible, Codable {
        case initialized = "INITIALIZED"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct UserMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string)
        ]
        /// The name of the user.
        public let username: String?
        /// The ID of the user.
        public let id: String?
        /// The email address of the user.
        public let emailAddress: String?
        /// The surname of the user.
        public let surname: String?
        /// The given name of the user before a rename operation.
        public let givenName: String?

        public init(username: String? = nil, id: String? = nil, emailAddress: String? = nil, surname: String? = nil, givenName: String? = nil) {
            self.username = username
            self.id = id
            self.emailAddress = emailAddress
            self.surname = surname
            self.givenName = givenName
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case id = "Id"
            case emailAddress = "EmailAddress"
            case surname = "Surname"
            case givenName = "GivenName"
        }
    }

    public struct AddResourcePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Principals", required: true, type: .list), 
            AWSShapeMember(label: "NotificationOptions", required: false, type: .structure)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// The users, groups, or organization being granted permission.
        public let principals: [SharePrincipal]
        /// The notification options.
        public let notificationOptions: NotificationOptions?

        public init(authenticationToken: String? = nil, resourceId: String, principals: [SharePrincipal], notificationOptions: NotificationOptions? = nil) {
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.principals = principals
            self.notificationOptions = notificationOptions
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case principals = "Principals"
            case notificationOptions = "NotificationOptions"
        }
    }

    public struct CreateCustomMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "CustomMetadata", required: true, type: .map), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionid"), required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// Custom metadata in the form of name-value pairs.
        public let customMetadata: [String: String]
        /// The ID of the version, if the custom metadata is being added to a document version.
        public let versionId: String?

        public init(authenticationToken: String? = nil, resourceId: String, customMetadata: [String: String], versionId: String? = nil) {
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.customMetadata = customMetadata
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case customMetadata = "CustomMetadata"
            case versionId = "versionid"
        }
    }

    public struct NotificationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SendEmail", required: false, type: .boolean), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .string)
        ]
        /// Boolean value to indicate an email notification should be sent to the receipients.
        public let sendEmail: Bool?
        /// Text value to be included in the email body.
        public let emailMessage: String?

        public init(sendEmail: Bool? = nil, emailMessage: String? = nil) {
            self.sendEmail = sendEmail
            self.emailMessage = emailMessage
        }

        private enum CodingKeys: String, CodingKey {
            case sendEmail = "SendEmail"
            case emailMessage = "EmailMessage"
        }
    }

    public struct RemoveResourcePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalType", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "PrincipalId", location: .uri(locationName: "PrincipalId"), required: true, type: .string)
        ]
        /// The principal type of the resource.
        public let principalType: PrincipalType?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// The principal ID of the resource.
        public let principalId: String

        public init(principalType: PrincipalType? = nil, authenticationToken: String? = nil, resourceId: String, principalId: String) {
            self.principalType = principalType
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case principalType = "type"
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case principalId = "PrincipalId"
        }
    }

    public struct DescribeResourcePermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The principals.
        public let principals: [Principal]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(principals: [Principal]? = nil, marker: String? = nil) {
            self.principals = principals
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "Principals"
            case marker = "Marker"
        }
    }

    public struct DescribeActivitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityTypes", location: .querystring(locationName: "activityTypes"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "EndTime", location: .querystring(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "UserId", location: .querystring(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .querystring(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string), 
            AWSShapeMember(label: "IncludeIndirectActivities", location: .querystring(locationName: "includeIndirectActivities"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .querystring(locationName: "resourceId"), required: false, type: .string)
        ]
        /// Specifies which activity types to include in the response. If this field is left empty, all activity types are returned.
        public let activityTypes: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The marker for the next set of results.
        public let marker: String?
        /// The timestamp that determines the end time of the activities. The response includes the activities performed before the specified timestamp.
        public let endTime: TimeStamp?
        /// The ID of the user who performed the action. The response includes activities pertaining to this user. This is an optional parameter and is only applicable for administrative API (SigV4) requests.
        public let userId: String?
        /// The timestamp that determines the starting time of the activities. The response includes the activities performed after the specified timestamp.
        public let startTime: TimeStamp?
        /// The ID of the organization. This is a mandatory parameter when using administrative API (SigV4) requests.
        public let organizationId: String?
        /// Includes indirect activities. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).
        public let includeIndirectActivities: Bool?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The document or folder ID for which to describe activity types.
        public let resourceId: String?

        public init(activityTypes: String? = nil, limit: Int32? = nil, marker: String? = nil, endTime: TimeStamp? = nil, userId: String? = nil, startTime: TimeStamp? = nil, organizationId: String? = nil, includeIndirectActivities: Bool? = nil, authenticationToken: String? = nil, resourceId: String? = nil) {
            self.activityTypes = activityTypes
            self.limit = limit
            self.marker = marker
            self.endTime = endTime
            self.userId = userId
            self.startTime = startTime
            self.organizationId = organizationId
            self.includeIndirectActivities = includeIndirectActivities
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case activityTypes = "activityTypes"
            case limit = "limit"
            case marker = "marker"
            case endTime = "endTime"
            case userId = "userId"
            case startTime = "startTime"
            case organizationId = "organizationId"
            case includeIndirectActivities = "includeIndirectActivities"
            case authenticationToken = "Authentication"
            case resourceId = "resourceId"
        }
    }

    public struct GetDocumentPathRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// A comma-separated list of values. Specify NAME to include the names of the parent folders.
        public let fields: String?
        /// This value is not supported.
        public let marker: String?
        /// The maximum number of levels in the hierarchy to return.
        public let limit: Int32?
        /// The ID of the document.
        public let documentId: String

        public init(authenticationToken: String? = nil, fields: String? = nil, marker: String? = nil, limit: Int32? = nil, documentId: String) {
            self.authenticationToken = authenticationToken
            self.fields = fields
            self.marker = marker
            self.limit = limit
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case fields = "fields"
            case marker = "marker"
            case limit = "limit"
            case documentId = "DocumentId"
        }
    }

    public struct GetCurrentUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// Metadata of the user.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct UpdateFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum)
        ]
        /// The name of the folder.
        public let name: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.
        public let resourceState: ResourceStateType?

        public init(name: String? = nil, authenticationToken: String? = nil, folderId: String, parentFolderId: String? = nil, resourceState: ResourceStateType? = nil) {
            self.name = name
            self.authenticationToken = authenticationToken
            self.folderId = folderId
            self.parentFolderId = parentFolderId
            self.resourceState = resourceState
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
            case parentFolderId = "ParentFolderId"
            case resourceState = "ResourceState"
        }
    }

    public enum UserFilterType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case activePending = "ACTIVE_PENDING"
        public var description: String { return self.rawValue }
    }

    public enum UserStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct GroupMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ID of the user group.
        public let id: String?
        /// The name of the group.
        public let name: String?

        public init(id: String? = nil, name: String? = nil) {
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
        }
    }

    public enum DocumentSourceType: String, CustomStringConvertible, Codable {
        case original = "ORIGINAL"
        case withComments = "WITH_COMMENTS"
        public var description: String { return self.rawValue }
    }

    public enum BooleanEnumType: String, CustomStringConvertible, Codable {
        case `true` = "TRUE"
        case `false` = "FALSE"
        public var description: String { return self.rawValue }
    }

    public enum UserType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case admin = "ADMIN"
        case poweruser = "POWERUSER"
        case minimaluser = "MINIMALUSER"
        case workspacesuser = "WORKSPACESUSER"
        public var description: String { return self.rawValue }
    }

    public enum OrderType: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct DeleteCommentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "CommentId", location: .uri(locationName: "CommentId"), required: true, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the comment.
        public let commentId: String
        /// The ID of the document.
        public let documentId: String
        /// The ID of the document version.
        public let versionId: String

        public init(authenticationToken: String? = nil, commentId: String, documentId: String, versionId: String) {
            self.authenticationToken = authenticationToken
            self.commentId = commentId
            self.documentId = documentId
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case commentId = "CommentId"
            case documentId = "DocumentId"
            case versionId = "VersionId"
        }
    }

    public struct UpdateDocumentVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "VersionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The status of the version.
        public let versionStatus: DocumentVersionStatus?
        /// The ID of the document.
        public let documentId: String
        /// The version ID of the document.
        public let versionId: String

        public init(authenticationToken: String? = nil, versionStatus: DocumentVersionStatus? = nil, documentId: String, versionId: String) {
            self.authenticationToken = authenticationToken
            self.versionStatus = versionStatus
            self.documentId = documentId
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case versionStatus = "VersionStatus"
            case documentId = "DocumentId"
            case versionId = "VersionId"
        }
    }

    public struct RemoveAllResourcePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String

        public init(authenticationToken: String? = nil, resourceId: String) {
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
        }
    }

    public struct CreateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "StorageRule", required: false, type: .structure), 
            AWSShapeMember(label: "Surname", required: true, type: .string), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "GivenName", required: true, type: .string)
        ]
        /// The login name of the user.
        public let username: String
        /// The amount of storage for the user.
        public let storageRule: StorageRuleType?
        /// The surname of the user.
        public let surname: String
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The email address of the user.
        public let emailAddress: String?
        /// The ID of the organization.
        public let organizationId: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The password of the user.
        public let password: String
        /// The given name of the user.
        public let givenName: String

        public init(username: String, storageRule: StorageRuleType? = nil, surname: String, timeZoneId: String? = nil, emailAddress: String? = nil, organizationId: String? = nil, authenticationToken: String? = nil, password: String, givenName: String) {
            self.username = username
            self.storageRule = storageRule
            self.surname = surname
            self.timeZoneId = timeZoneId
            self.emailAddress = emailAddress
            self.organizationId = organizationId
            self.authenticationToken = authenticationToken
            self.password = password
            self.givenName = givenName
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case storageRule = "StorageRule"
            case surname = "Surname"
            case timeZoneId = "TimeZoneId"
            case emailAddress = "EmailAddress"
            case organizationId = "OrganizationId"
            case authenticationToken = "Authentication"
            case password = "Password"
            case givenName = "GivenName"
        }
    }

    public struct GetCurrentUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String

        public init(authenticationToken: String) {
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
        }
    }

    public struct GetDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean)
        ]
        /// The ID of the document.
        public let documentId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Set this to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?

        public init(documentId: String, authenticationToken: String? = nil, includeCustomMetadata: Bool? = nil) {
            self.documentId = documentId
            self.authenticationToken = authenticationToken
            self.includeCustomMetadata = includeCustomMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case documentId = "DocumentId"
            case authenticationToken = "Authentication"
            case includeCustomMetadata = "includeCustomMetadata"
        }
    }

    public struct DeleteNotificationSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionId", location: .uri(locationName: "SubscriptionId"), required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string)
        ]
        /// The ID of the subscription.
        public let subscriptionId: String
        /// The ID of the organization.
        public let organizationId: String

        public init(subscriptionId: String, organizationId: String) {
            self.subscriptionId = subscriptionId
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionId = "SubscriptionId"
            case organizationId = "OrganizationId"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case folder = "FOLDER"
        case document = "DOCUMENT"
        public var description: String { return self.rawValue }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionId", required: false, type: .string), 
            AWSShapeMember(label: "EndPoint", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum)
        ]
        /// The ID of the subscription.
        public let subscriptionId: String?
        /// The endpoint of the subscription.
        public let endPoint: String?
        /// The protocol of the subscription.
        public let `protocol`: SubscriptionProtocolType?

        public init(subscriptionId: String? = nil, endPoint: String? = nil, protocol: SubscriptionProtocolType? = nil) {
            self.subscriptionId = subscriptionId
            self.endPoint = endPoint
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionId = "SubscriptionId"
            case endPoint = "EndPoint"
            case `protocol` = "Protocol"
        }
    }

    public struct CreateLabelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Labels", required: true, type: .list), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string)
        ]
        /// List of labels to add to the resource.
        public let labels: [String]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String

        public init(labels: [String], authenticationToken: String? = nil, resourceId: String) {
            self.labels = labels
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "Labels"
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
        }
    }

    public struct GetDocumentVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The version metadata.
        public let metadata: DocumentVersionMetadata?
        /// The custom metadata on the document version.
        public let customMetadata: [String: String]?

        public init(metadata: DocumentVersionMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public enum FolderContentType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case document = "DOCUMENT"
        case folder = "FOLDER"
        public var description: String { return self.rawValue }
    }

    public enum CommentVisibilityType: String, CustomStringConvertible, Codable {
        case `public` = "PUBLIC"
        case `private` = "PRIVATE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRootFoldersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Folders", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The user's special folders.
        public let folders: [FolderMetadata]?
        /// The marker for the next set of results.
        public let marker: String?

        public init(folders: [FolderMetadata]? = nil, marker: String? = nil) {
            self.folders = folders
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case folders = "Folders"
            case marker = "Marker"
        }
    }

    public struct CreateCommentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .structure)
        ]
        /// The comment that has been created.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
        }
    }

    public struct ActivateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct Participants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "Users", required: false, type: .list)
        ]
        /// The list of user groups.
        public let groups: [GroupMetadata]?
        /// The list of users.
        public let users: [UserMetadata]?

        public init(groups: [GroupMetadata]? = nil, users: [UserMetadata]? = nil) {
            self.groups = groups
            self.users = users
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case users = "Users"
        }
    }

    public struct ResourceMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "OriginalName", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// The name of the resource.
        public let name: String?
        /// The owner of the resource.
        public let owner: UserMetadata?
        /// The original name of the resource before a rename operation.
        public let originalName: String?
        /// The type of resource.
        public let `type`: ResourceType?
        /// The parent ID of the resource before a rename operation.
        public let parentId: String?
        /// The ID of the resource.
        public let id: String?
        /// The version ID of the resource. This is an optional field and is filled for action on document version.
        public let versionId: String?

        public init(name: String? = nil, owner: UserMetadata? = nil, originalName: String? = nil, type: ResourceType? = nil, parentId: String? = nil, id: String? = nil, versionId: String? = nil) {
            self.name = name
            self.owner = owner
            self.originalName = originalName
            self.`type` = `type`
            self.parentId = parentId
            self.id = id
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case owner = "Owner"
            case originalName = "OriginalName"
            case `type` = "Type"
            case parentId = "ParentId"
            case id = "Id"
            case versionId = "VersionId"
        }
    }

    public struct CreateFolderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure)
        ]
        /// The metadata of the folder.
        public let metadata: FolderMetadata?

        public init(metadata: FolderMetadata? = nil) {
            self.metadata = metadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
        }
    }

    public struct ShareResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "InviteePrincipalId", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalId", required: false, type: .string), 
            AWSShapeMember(label: "ShareId", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string)
        ]
        /// The role.
        public let role: RoleType?
        /// The status.
        public let status: ShareStatusType?
        /// The ID of the invited user.
        public let inviteePrincipalId: String?
        /// The ID of the principal.
        public let principalId: String?
        /// The ID of the resource that was shared.
        public let shareId: String?
        /// The status message.
        public let statusMessage: String?

        public init(role: RoleType? = nil, status: ShareStatusType? = nil, inviteePrincipalId: String? = nil, principalId: String? = nil, shareId: String? = nil, statusMessage: String? = nil) {
            self.role = role
            self.status = status
            self.inviteePrincipalId = inviteePrincipalId
            self.principalId = principalId
            self.shareId = shareId
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case status = "Status"
            case inviteePrincipalId = "InviteePrincipalId"
            case principalId = "PrincipalId"
            case shareId = "ShareId"
            case statusMessage = "StatusMessage"
        }
    }

    public struct AddResourcePermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareResults", required: false, type: .list)
        ]
        /// The share results.
        public let shareResults: [ShareResult]?

        public init(shareResults: [ShareResult]? = nil) {
            self.shareResults = shareResults
        }

        private enum CodingKeys: String, CodingKey {
            case shareResults = "ShareResults"
        }
    }

    public struct SharePrincipal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Role", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The type of the recipient.
        public let `type`: PrincipalType
        /// The role of the recipient.
        public let role: RoleType
        /// The ID of the recipient.
        public let id: String

        public init(type: PrincipalType, role: RoleType, id: String) {
            self.`type` = `type`
            self.role = role
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case role = "Role"
            case id = "Id"
        }
    }

    public struct DescribeGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of groups.
        public let groups: [GroupMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(groups: [GroupMetadata]? = nil, marker: String? = nil) {
            self.groups = groups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case marker = "Marker"
        }
    }

    public enum ResourceSortType: String, CustomStringConvertible, Codable {
        case date = "DATE"
        case name = "NAME"
        public var description: String { return self.rawValue }
    }

    public enum LocaleType: String, CustomStringConvertible, Codable {
        case en = "en"
        case fr = "fr"
        case ko = "ko"
        case de = "de"
        case es = "es"
        case ja = "ja"
        case ru = "ru"
        case zhCn = "zh_CN"
        case zhTw = "zh_TW"
        case ptBr = "pt_BR"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public struct PermissionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Role", required: false, type: .enum)
        ]
        /// The type of permissions.
        public let `type`: RolePermissionType?
        /// The role of the user.
        public let role: RoleType?

        public init(type: RolePermissionType? = nil, role: RoleType? = nil) {
            self.`type` = `type`
            self.role = role
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case role = "Role"
        }
    }

    public struct DeleteLabelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteAll", location: .querystring(locationName: "deleteAll"), required: false, type: .boolean), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Labels", location: .querystring(locationName: "labels"), required: false, type: .list)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Flag to request removal of all labels from the specified resource.
        public let deleteAll: Bool?
        /// The ID of the resource.
        public let resourceId: String
        /// List of labels to delete from the resource.
        public let labels: [String]?

        public init(authenticationToken: String? = nil, deleteAll: Bool? = nil, resourceId: String, labels: [String]? = nil) {
            self.authenticationToken = authenticationToken
            self.deleteAll = deleteAll
            self.resourceId = resourceId
            self.labels = labels
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case deleteAll = "deleteAll"
            case resourceId = "ResourceId"
            case labels = "labels"
        }
    }

    public struct DescribeActivitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserActivities", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of activities for the specified user and time period.
        public let userActivities: [Activity]?
        /// The marker for the next set of results.
        public let marker: String?

        public init(userActivities: [Activity]? = nil, marker: String? = nil) {
            self.userActivities = userActivities
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case userActivities = "UserActivities"
            case marker = "Marker"
        }
    }

    public struct DescribeDocumentVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersions", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The document versions.
        public let documentVersions: [DocumentVersionMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(documentVersions: [DocumentVersionMetadata]? = nil, marker: String? = nil) {
            self.documentVersions = documentVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersions = "DocumentVersions"
            case marker = "Marker"
        }
    }

    public enum UserSortType: String, CustomStringConvertible, Codable {
        case userName = "USER_NAME"
        case fullName = "FULL_NAME"
        case storageLimit = "STORAGE_LIMIT"
        case userStatus = "USER_STATUS"
        case storageUsed = "STORAGE_USED"
        public var description: String { return self.rawValue }
    }

    public struct GetResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CollectionType", location: .querystring(locationName: "collectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .querystring(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The collection type.
        public let collectionType: ResourceCollectionType?
        /// The user ID for the resource collection. This is a required field for accessing the API operation using IAM credentials.
        public let userId: String?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API operation using AWS credentials.
        public let authenticationToken: String?
        /// The maximum number of resources to return.
        public let limit: Int32?

        public init(collectionType: ResourceCollectionType? = nil, userId: String? = nil, marker: String? = nil, authenticationToken: String? = nil, limit: Int32? = nil) {
            self.collectionType = collectionType
            self.userId = userId
            self.marker = marker
            self.authenticationToken = authenticationToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case collectionType = "collectionType"
            case userId = "userId"
            case marker = "marker"
            case authenticationToken = "Authentication"
            case limit = "limit"
        }
    }

    public struct User: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "RecycleBinFolderId", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Storage", required: false, type: .structure), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "Locale", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "RootFolderId", required: false, type: .string)
        ]
        /// The ID of the organization.
        public let organizationId: String?
        /// The ID of the recycle bin folder.
        public let recycleBinFolderId: String?
        /// The email address of the user.
        public let emailAddress: String?
        /// The login name of the user.
        public let username: String?
        /// The time when the user was modified.
        public let modifiedTimestamp: TimeStamp?
        /// The surname of the user.
        public let surname: String?
        /// The time when the user was created.
        public let createdTimestamp: TimeStamp?
        /// The storage for the user.
        public let storage: UserStorageMetadata?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The locale of the user.
        public let locale: LocaleType?
        /// The type of user.
        public let `type`: UserType?
        /// The ID of the user.
        public let id: String?
        /// The given name of the user.
        public let givenName: String?
        /// The status of the user.
        public let status: UserStatusType?
        /// The ID of the root folder.
        public let rootFolderId: String?

        public init(organizationId: String? = nil, recycleBinFolderId: String? = nil, emailAddress: String? = nil, username: String? = nil, modifiedTimestamp: TimeStamp? = nil, surname: String? = nil, createdTimestamp: TimeStamp? = nil, storage: UserStorageMetadata? = nil, timeZoneId: String? = nil, locale: LocaleType? = nil, type: UserType? = nil, id: String? = nil, givenName: String? = nil, status: UserStatusType? = nil, rootFolderId: String? = nil) {
            self.organizationId = organizationId
            self.recycleBinFolderId = recycleBinFolderId
            self.emailAddress = emailAddress
            self.username = username
            self.modifiedTimestamp = modifiedTimestamp
            self.surname = surname
            self.createdTimestamp = createdTimestamp
            self.storage = storage
            self.timeZoneId = timeZoneId
            self.locale = locale
            self.`type` = `type`
            self.id = id
            self.givenName = givenName
            self.status = status
            self.rootFolderId = rootFolderId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case recycleBinFolderId = "RecycleBinFolderId"
            case emailAddress = "EmailAddress"
            case username = "Username"
            case modifiedTimestamp = "ModifiedTimestamp"
            case surname = "Surname"
            case createdTimestamp = "CreatedTimestamp"
            case storage = "Storage"
            case timeZoneId = "TimeZoneId"
            case locale = "Locale"
            case `type` = "Type"
            case id = "Id"
            case givenName = "GivenName"
            case status = "Status"
            case rootFolderId = "RootFolderId"
        }
    }

    public struct StorageRuleType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "StorageType", required: false, type: .enum)
        ]
        /// The amount of storage allocated, in bytes.
        public let storageAllocatedInBytes: Int64?
        /// The type of storage.
        public let storageType: StorageType?

        public init(storageAllocatedInBytes: Int64? = nil, storageType: StorageType? = nil) {
            self.storageAllocatedInBytes = storageAllocatedInBytes
            self.storageType = storageType
        }

        private enum CodingKeys: String, CodingKey {
            case storageAllocatedInBytes = "StorageAllocatedInBytes"
            case storageType = "StorageType"
        }
    }

    public struct DeleteDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String

        public init(authenticationToken: String? = nil, documentId: String) {
            self.authenticationToken = authenticationToken
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
        }
    }

    public struct DescribeRootFoldersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: true, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The maximum number of items to return.
        public let limit: Int32?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(limit: Int32? = nil, authenticationToken: String, marker: String? = nil) {
            self.limit = limit
            self.authenticationToken = authenticationToken
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case authenticationToken = "Authentication"
            case marker = "marker"
        }
    }

    public enum CommentStatusType: String, CustomStringConvertible, Codable {
        case draft = "DRAFT"
        case published = "PUBLISHED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct FolderMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "Labels", required: false, type: .list), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestVersionSize", required: false, type: .long)
        ]
        /// The name of the folder.
        public let name: String?
        /// The size of the folder metadata.
        public let size: Int64?
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The ID of the creator.
        public let creatorId: String?
        /// List of labels on the folder.
        public let labels: [String]?
        /// The time when the folder was created.
        public let createdTimestamp: TimeStamp?
        /// The ID of the folder.
        public let id: String?
        /// The resource state of the folder.
        public let resourceState: ResourceStateType?
        /// The unique identifier created from the subfolders and documents of the folder.
        public let signature: String?
        /// The time when the folder was updated.
        public let modifiedTimestamp: TimeStamp?
        /// The size of the latest version of the folder metadata.
        public let latestVersionSize: Int64?

        public init(name: String? = nil, size: Int64? = nil, parentFolderId: String? = nil, creatorId: String? = nil, labels: [String]? = nil, createdTimestamp: TimeStamp? = nil, id: String? = nil, resourceState: ResourceStateType? = nil, signature: String? = nil, modifiedTimestamp: TimeStamp? = nil, latestVersionSize: Int64? = nil) {
            self.name = name
            self.size = size
            self.parentFolderId = parentFolderId
            self.creatorId = creatorId
            self.labels = labels
            self.createdTimestamp = createdTimestamp
            self.id = id
            self.resourceState = resourceState
            self.signature = signature
            self.modifiedTimestamp = modifiedTimestamp
            self.latestVersionSize = latestVersionSize
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case size = "Size"
            case parentFolderId = "ParentFolderId"
            case creatorId = "CreatorId"
            case labels = "Labels"
            case createdTimestamp = "CreatedTimestamp"
            case id = "Id"
            case resourceState = "ResourceState"
            case signature = "Signature"
            case modifiedTimestamp = "ModifiedTimestamp"
            case latestVersionSize = "LatestVersionSize"
        }
    }

    public struct ResourcePathComponent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ID of the resource path.
        public let id: String?
        /// The name of the resource path.
        public let name: String?

        public init(id: String? = nil, name: String? = nil) {
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
        }
    }

    public struct GetDocumentPathResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .structure)
        ]
        /// The path information.
        public let path: ResourcePath?

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct DescribeNotificationSubscriptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The ID of the organization.
        public let organizationId: String
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(limit: Int32? = nil, organizationId: String, marker: String? = nil) {
            self.limit = limit
            self.organizationId = organizationId
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case organizationId = "OrganizationId"
            case marker = "marker"
        }
    }

    public struct CreateNotificationSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "SubscriptionType", required: true, type: .enum), 
            AWSShapeMember(label: "Endpoint", required: true, type: .string)
        ]
        /// The ID of the organization.
        public let organizationId: String
        /// The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.
        public let `protocol`: SubscriptionProtocolType
        /// The notification type.
        public let subscriptionType: SubscriptionType
        /// The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with "https://".
        public let endpoint: String

        public init(organizationId: String, protocol: SubscriptionProtocolType, subscriptionType: SubscriptionType, endpoint: String) {
            self.organizationId = organizationId
            self.`protocol` = `protocol`
            self.subscriptionType = subscriptionType
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case `protocol` = "Protocol"
            case subscriptionType = "SubscriptionType"
            case endpoint = "Endpoint"
        }
    }

    public struct DeleteLabelsResponse: AWSShape {

    }

    public struct GetFolderPathResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .structure)
        ]
        /// The path information.
        public let path: ResourcePath?

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct DescribeCommentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The ID of the document.
        public let documentId: String
        /// The ID of the document version.
        public let versionId: String

        public init(authenticationToken: String? = nil, marker: String? = nil, limit: Int32? = nil, documentId: String, versionId: String) {
            self.authenticationToken = authenticationToken
            self.marker = marker
            self.limit = limit
            self.documentId = documentId
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case marker = "marker"
            case limit = "limit"
            case documentId = "DocumentId"
            case versionId = "VersionId"
        }
    }

    public struct DeleteFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the folder.
        public let folderId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(folderId: String, authenticationToken: String? = nil) {
            self.folderId = folderId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case folderId = "FolderId"
            case authenticationToken = "Authentication"
        }
    }

    public struct CreateFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ParentFolderId", required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The name of the new folder.
        public let name: String?
        /// The ID of the parent folder.
        public let parentFolderId: String

        public init(authenticationToken: String? = nil, name: String? = nil, parentFolderId: String) {
            self.authenticationToken = authenticationToken
            self.name = name
            self.parentFolderId = parentFolderId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case name = "Name"
            case parentFolderId = "ParentFolderId"
        }
    }

    public struct CreateLabelsResponse: AWSShape {

    }

    public struct DescribeCommentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comments", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of comments for the specified document version.
        public let comments: [Comment]?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?

        public init(comments: [Comment]? = nil, marker: String? = nil) {
            self.comments = comments
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case comments = "Comments"
            case marker = "Marker"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

    public enum ResourceStateType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case restoring = "RESTORING"
        case recycling = "RECYCLING"
        case recycled = "RECYCLED"
        public var description: String { return self.rawValue }
    }

    public struct CreateCommentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyCollaborators", required: false, type: .boolean), 
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "Visibility", required: false, type: .enum), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
        public let notifyCollaborators: Bool?
        /// The ID of the root comment in the thread.
        public let threadId: String?
        /// The ID of the document.
        public let documentId: String
        /// The text of the comment.
        public let text: String
        /// The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.
        public let visibility: CommentVisibilityType?
        /// The ID of the parent comment.
        public let parentId: String?
        /// The ID of the document version.
        public let versionId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(notifyCollaborators: Bool? = nil, threadId: String? = nil, documentId: String, text: String, visibility: CommentVisibilityType? = nil, parentId: String? = nil, versionId: String, authenticationToken: String? = nil) {
            self.notifyCollaborators = notifyCollaborators
            self.threadId = threadId
            self.documentId = documentId
            self.text = text
            self.visibility = visibility
            self.parentId = parentId
            self.versionId = versionId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case notifyCollaborators = "NotifyCollaborators"
            case threadId = "ThreadId"
            case documentId = "DocumentId"
            case text = "Text"
            case visibility = "Visibility"
            case parentId = "ParentId"
            case versionId = "VersionId"
            case authenticationToken = "Authentication"
        }
    }

    public enum ShareStatusType: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case failure = "FAILURE"
        public var description: String { return self.rawValue }
    }

    public struct GetDocumentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The metadata details of the document.
        public let metadata: DocumentMetadata?
        /// The custom metadata on the document.
        public let customMetadata: [String: String]?

        public init(metadata: DocumentMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case group = "GROUP"
        case invite = "INVITE"
        case anonymous = "ANONYMOUS"
        case organization = "ORGANIZATION"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The name of the document.
        public let name: String?
        /// The resource state of the document. Only ACTIVE and RECYCLED are supported.
        public let resourceState: ResourceStateType?
        /// The ID of the document.
        public let documentId: String
        /// The ID of the parent folder.
        public let parentFolderId: String?

        public init(authenticationToken: String? = nil, name: String? = nil, resourceState: ResourceStateType? = nil, documentId: String, parentFolderId: String? = nil) {
            self.authenticationToken = authenticationToken
            self.name = name
            self.resourceState = resourceState
            self.documentId = documentId
            self.parentFolderId = parentFolderId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case name = "Name"
            case resourceState = "ResourceState"
            case documentId = "DocumentId"
            case parentFolderId = "ParentFolderId"
        }
    }

    public struct DescribeNotificationSubscriptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscriptions", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The subscriptions.
        public let subscriptions: [Subscription]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(subscriptions: [Subscription]? = nil, marker: String? = nil) {
            self.subscriptions = subscriptions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "Subscriptions"
            case marker = "Marker"
        }
    }

    public enum RoleType: String, CustomStringConvertible, Codable {
        case viewer = "VIEWER"
        case contributor = "CONTRIBUTOR"
        case owner = "OWNER"
        case coowner = "COOWNER"
        public var description: String { return self.rawValue }
    }

    public enum StorageType: String, CustomStringConvertible, Codable {
        case unlimited = "UNLIMITED"
        case quota = "QUOTA"
        public var description: String { return self.rawValue }
    }

    public struct GetFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean)
        ]
        /// The ID of the folder.
        public let folderId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Set to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?

        public init(folderId: String, authenticationToken: String? = nil, includeCustomMetadata: Bool? = nil) {
            self.folderId = folderId
            self.authenticationToken = authenticationToken
            self.includeCustomMetadata = includeCustomMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case folderId = "FolderId"
            case authenticationToken = "Authentication"
            case includeCustomMetadata = "includeCustomMetadata"
        }
    }

    public enum ActivityType: String, CustomStringConvertible, Codable {
        case documentCheckedIn = "DOCUMENT_CHECKED_IN"
        case documentCheckedOut = "DOCUMENT_CHECKED_OUT"
        case documentRenamed = "DOCUMENT_RENAMED"
        case documentVersionUploaded = "DOCUMENT_VERSION_UPLOADED"
        case documentVersionDeleted = "DOCUMENT_VERSION_DELETED"
        case documentVersionViewed = "DOCUMENT_VERSION_VIEWED"
        case documentVersionDownloaded = "DOCUMENT_VERSION_DOWNLOADED"
        case documentRecycled = "DOCUMENT_RECYCLED"
        case documentRestored = "DOCUMENT_RESTORED"
        case documentReverted = "DOCUMENT_REVERTED"
        case documentShared = "DOCUMENT_SHARED"
        case documentUnshared = "DOCUMENT_UNSHARED"
        case documentSharePermissionChanged = "DOCUMENT_SHARE_PERMISSION_CHANGED"
        case documentShareableLinkCreated = "DOCUMENT_SHAREABLE_LINK_CREATED"
        case documentShareableLinkRemoved = "DOCUMENT_SHAREABLE_LINK_REMOVED"
        case documentShareableLinkPermissionChanged = "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED"
        case documentMoved = "DOCUMENT_MOVED"
        case documentCommentAdded = "DOCUMENT_COMMENT_ADDED"
        case documentCommentDeleted = "DOCUMENT_COMMENT_DELETED"
        case documentAnnotationAdded = "DOCUMENT_ANNOTATION_ADDED"
        case documentAnnotationDeleted = "DOCUMENT_ANNOTATION_DELETED"
        case folderCreated = "FOLDER_CREATED"
        case folderDeleted = "FOLDER_DELETED"
        case folderRenamed = "FOLDER_RENAMED"
        case folderRecycled = "FOLDER_RECYCLED"
        case folderRestored = "FOLDER_RESTORED"
        case folderShared = "FOLDER_SHARED"
        case folderUnshared = "FOLDER_UNSHARED"
        case folderSharePermissionChanged = "FOLDER_SHARE_PERMISSION_CHANGED"
        case folderShareableLinkCreated = "FOLDER_SHAREABLE_LINK_CREATED"
        case folderShareableLinkRemoved = "FOLDER_SHAREABLE_LINK_REMOVED"
        case folderShareableLinkPermissionChanged = "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED"
        case folderMoved = "FOLDER_MOVED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteCustomMetadataResponse: AWSShape {

    }

    public struct DescribeUsersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserIds", location: .querystring(locationName: "userIds"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Sort", location: .querystring(locationName: "sort"), required: false, type: .enum), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Query", location: .querystring(locationName: "query"), required: false, type: .string), 
            AWSShapeMember(label: "Order", location: .querystring(locationName: "order"), required: false, type: .enum), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .enum), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The IDs of the users.
        public let userIds: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The sorting criteria.
        public let sort: UserSortType?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// A query to filter users by user name.
        public let query: String?
        /// The order for the results.
        public let order: OrderType?
        /// The state of the users. Specify "ALL" to include inactive users.
        public let include: UserFilterType?
        /// The ID of the organization.
        public let organizationId: String?
        /// A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.
        public let fields: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(userIds: String? = nil, limit: Int32? = nil, sort: UserSortType? = nil, marker: String? = nil, query: String? = nil, order: OrderType? = nil, include: UserFilterType? = nil, organizationId: String? = nil, fields: String? = nil, authenticationToken: String? = nil) {
            self.userIds = userIds
            self.limit = limit
            self.sort = sort
            self.marker = marker
            self.query = query
            self.order = order
            self.include = include
            self.organizationId = organizationId
            self.fields = fields
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case userIds = "userIds"
            case limit = "limit"
            case sort = "sort"
            case marker = "marker"
            case query = "query"
            case order = "order"
            case include = "include"
            case organizationId = "organizationId"
            case fields = "fields"
            case authenticationToken = "Authentication"
        }
    }

    public struct CreateNotificationSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscription", required: false, type: .structure)
        ]
        /// The subscription.
        public let subscription: Subscription?

        public init(subscription: Subscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "Subscription"
        }
    }

    public struct UploadMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SignedHeaders", required: false, type: .map), 
            AWSShapeMember(label: "UploadUrl", required: false, type: .string)
        ]
        /// The signed headers.
        public let signedHeaders: [String: String]?
        /// The URL of the upload.
        public let uploadUrl: String?

        public init(signedHeaders: [String: String]? = nil, uploadUrl: String? = nil) {
            self.signedHeaders = signedHeaders
            self.uploadUrl = uploadUrl
        }

        private enum CodingKeys: String, CodingKey {
            case signedHeaders = "SignedHeaders"
            case uploadUrl = "UploadUrl"
        }
    }

    public struct DescribeUsersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalNumberOfUsers", required: false, type: .long), 
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The total number of users included in the results.
        public let totalNumberOfUsers: Int64?
        /// The users.
        public let users: [User]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(totalNumberOfUsers: Int64? = nil, users: [User]? = nil, marker: String? = nil) {
            self.totalNumberOfUsers = totalNumberOfUsers
            self.users = users
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case totalNumberOfUsers = "TotalNumberOfUsers"
            case users = "Users"
            case marker = "Marker"
        }
    }

    public struct DescribeFolderContentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Folders", required: false, type: .list), 
            AWSShapeMember(label: "Documents", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The subfolders in the specified folder.
        public let folders: [FolderMetadata]?
        /// The documents in the specified folder.
        public let documents: [DocumentMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(folders: [FolderMetadata]? = nil, documents: [DocumentMetadata]? = nil, marker: String? = nil) {
            self.folders = folders
            self.documents = documents
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case folders = "Folders"
            case documents = "Documents"
            case marker = "Marker"
        }
    }

    public struct DescribeGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SearchQuery", location: .querystring(locationName: "searchQuery"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string)
        ]
        /// A query to describe groups by group name.
        public let searchQuery: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The ID of the organization.
        public let organizationId: String?

        public init(searchQuery: String, authenticationToken: String? = nil, marker: String? = nil, limit: Int32? = nil, organizationId: String? = nil) {
            self.searchQuery = searchQuery
            self.authenticationToken = authenticationToken
            self.marker = marker
            self.limit = limit
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case searchQuery = "searchQuery"
            case authenticationToken = "Authentication"
            case marker = "marker"
            case limit = "limit"
            case organizationId = "organizationId"
        }
    }

    public struct AbortDocumentVersionUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the document.
        public let documentId: String
        /// The ID of the version.
        public let versionId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(documentId: String, versionId: String, authenticationToken: String? = nil) {
            self.documentId = documentId
            self.versionId = versionId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentId = "DocumentId"
            case versionId = "VersionId"
            case authenticationToken = "Authentication"
        }
    }

    public struct InitiateDocumentVersionUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ContentCreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ParentFolderId", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "DocumentSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "ContentModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", required: false, type: .string)
        ]
        /// The name of the document.
        public let name: String?
        /// The timestamp when the content of the document was originally created.
        public let contentCreatedTimestamp: TimeStamp?
        /// The ID of the parent folder.
        public let parentFolderId: String
        /// The ID of the document.
        public let id: String?
        /// The size of the document, in bytes.
        public let documentSizeInBytes: Int64?
        /// The timestamp when the content of the document was modified.
        public let contentModifiedTimestamp: TimeStamp?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The content type of the document.
        public let contentType: String?

        public init(name: String? = nil, contentCreatedTimestamp: TimeStamp? = nil, parentFolderId: String, id: String? = nil, documentSizeInBytes: Int64? = nil, contentModifiedTimestamp: TimeStamp? = nil, authenticationToken: String? = nil, contentType: String? = nil) {
            self.name = name
            self.contentCreatedTimestamp = contentCreatedTimestamp
            self.parentFolderId = parentFolderId
            self.id = id
            self.documentSizeInBytes = documentSizeInBytes
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.authenticationToken = authenticationToken
            self.contentType = contentType
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case contentCreatedTimestamp = "ContentCreatedTimestamp"
            case parentFolderId = "ParentFolderId"
            case id = "Id"
            case documentSizeInBytes = "DocumentSizeInBytes"
            case contentModifiedTimestamp = "ContentModifiedTimestamp"
            case authenticationToken = "Authentication"
            case contentType = "ContentType"
        }
    }

    public struct Activity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Participants", required: false, type: .structure), 
            AWSShapeMember(label: "IsIndirectActivity", required: false, type: .boolean), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "OriginalParent", required: false, type: .structure), 
            AWSShapeMember(label: "TimeStamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "CommentMetadata", required: false, type: .structure)
        ]
        /// The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.
        public let participants: Participants?
        /// Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).
        public let isIndirectActivity: Bool?
        /// The user who performed the action.
        public let initiator: UserMetadata?
        /// The activity type.
        public let `type`: ActivityType?
        /// The original parent of the resource. This is an optional field and is filled for move activities.
        public let originalParent: ResourceMetadata?
        /// The timestamp when the action was performed.
        public let timeStamp: TimeStamp?
        /// The metadata of the resource involved in the user action.
        public let resourceMetadata: ResourceMetadata?
        /// The ID of the organization.
        public let organizationId: String?
        /// Metadata of the commenting activity. This is an optional field and is filled for commenting activities.
        public let commentMetadata: CommentMetadata?

        public init(participants: Participants? = nil, isIndirectActivity: Bool? = nil, initiator: UserMetadata? = nil, type: ActivityType? = nil, originalParent: ResourceMetadata? = nil, timeStamp: TimeStamp? = nil, resourceMetadata: ResourceMetadata? = nil, organizationId: String? = nil, commentMetadata: CommentMetadata? = nil) {
            self.participants = participants
            self.isIndirectActivity = isIndirectActivity
            self.initiator = initiator
            self.`type` = `type`
            self.originalParent = originalParent
            self.timeStamp = timeStamp
            self.resourceMetadata = resourceMetadata
            self.organizationId = organizationId
            self.commentMetadata = commentMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case participants = "Participants"
            case isIndirectActivity = "IsIndirectActivity"
            case initiator = "Initiator"
            case `type` = "Type"
            case originalParent = "OriginalParent"
            case timeStamp = "TimeStamp"
            case resourceMetadata = "ResourceMetadata"
            case organizationId = "OrganizationId"
            case commentMetadata = "CommentMetadata"
        }
    }

    public struct UpdateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct DeleteCustomMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteAll", location: .querystring(locationName: "deleteAll"), required: false, type: .boolean), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Keys", location: .querystring(locationName: "keys"), required: false, type: .list), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Flag to indicate removal of all custom metadata properties from the specified resource.
        public let deleteAll: Bool?
        /// The ID of the resource, either a document or folder.
        public let resourceId: String
        /// List of properties to remove.
        public let keys: [String]?
        /// The ID of the version, if the custom metadata is being deleted from a document version.
        public let versionId: String?

        public init(authenticationToken: String? = nil, deleteAll: Bool? = nil, resourceId: String, keys: [String]? = nil, versionId: String? = nil) {
            self.authenticationToken = authenticationToken
            self.deleteAll = deleteAll
            self.resourceId = resourceId
            self.keys = keys
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case deleteAll = "deleteAll"
            case resourceId = "ResourceId"
            case keys = "keys"
            case versionId = "versionId"
        }
    }

    public struct ResourcePath: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Components", required: false, type: .list)
        ]
        /// The components of the resource path.
        public let components: [ResourcePathComponent]?

        public init(components: [ResourcePathComponent]? = nil) {
            self.components = components
        }

        private enum CodingKeys: String, CodingKey {
            case components = "Components"
        }
    }

    public struct DescribeResourcePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "PrincipalId", location: .querystring(locationName: "principalId"), required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// The marker for the next set of results. (You received this marker from a previous call)
        public let marker: String?
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The ID of the principal to filter permissions by.
        public let principalId: String?

        public init(authenticationToken: String? = nil, resourceId: String, marker: String? = nil, limit: Int32? = nil, principalId: String? = nil) {
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.marker = marker
            self.limit = limit
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case marker = "marker"
            case limit = "limit"
            case principalId = "principalId"
        }
    }

    public struct DescribeDocumentVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Specify "SOURCE" to include initialized versions and a URL for the source document.
        public let fields: String?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The maximum number of versions to return with this call.
        public let limit: Int32?
        /// The ID of the document.
        public let documentId: String
        /// A comma-separated list of values. Specify "INITIALIZED" to include incomplete versions.
        public let include: String?

        public init(authenticationToken: String? = nil, fields: String? = nil, marker: String? = nil, limit: Int32? = nil, documentId: String, include: String? = nil) {
            self.authenticationToken = authenticationToken
            self.fields = fields
            self.marker = marker
            self.limit = limit
            self.documentId = documentId
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case fields = "fields"
            case marker = "marker"
            case limit = "limit"
            case documentId = "DocumentId"
            case include = "include"
        }
    }

}