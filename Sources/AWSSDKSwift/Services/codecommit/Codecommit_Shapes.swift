// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Codecommit {

    public struct ListRepositoriesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Lists the repositories called by the list repositories operation.
        public var repositories: [RepositoryNameIdPair]? = nil
        /// An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.
        public var nextToken: String? = nil

        public init() {}

        public init(repositories: [RepositoryNameIdPair]? = nil, nextToken: String? = nil) {
            self.repositories = repositories
            self.nextToken = nextToken
        }

    }

    public struct UserInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user who made the specified commit.
        public var name: String? = nil
        /// The date when the specified commit was pushed to the repository.
        public var date: String? = nil
        /// The email address associated with the user who made the commit, if any.
        public var email: String? = nil

        public init() {}

        public init(name: String? = nil, date: String? = nil, email: String? = nil) {
            self.name = name
            self.date = date
            self.email = email
        }

    }

    public struct BranchInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the branch.
        public var branchName: String? = nil
        /// The ID of the last commit made to the branch.
        public var commitId: String? = nil

        public init() {}

        public init(branchName: String? = nil, commitId: String? = nil) {
            self.branchName = branchName
            self.commitId = commitId
        }

    }

    public struct GetCommitOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A commit data type object that contains information about the specified commit.
        public var commit: Commit = Commit()

        public init() {}

        public init(commit: Commit) {
            self.commit = commit
        }

    }

    public struct DeleteRepositoryOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the repository that was deleted.
        public var repositoryId: String? = nil

        public init() {}

        public init(repositoryId: String? = nil) {
            self.repositoryId = repositoryId
        }

    }

    public struct RepositoryMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A comment or description about the repository.
        public var repositoryDescription: String? = nil
        /// The Amazon Resource Name (ARN) of the repository.
        public var arn: String? = nil
        /// The repository's name.
        public var repositoryName: String? = nil
        /// The date and time the repository was created, in timestamp format.
        public var creationDate: Date? = nil
        /// The URL to use for cloning the repository over SSH.
        public var cloneUrlSsh: String? = nil
        /// The ID of the AWS account associated with the repository.
        public var accountId: String? = nil
        /// The URL to use for cloning the repository over HTTPS.
        public var cloneUrlHttp: String? = nil
        /// The ID of the repository.
        public var repositoryId: String? = nil
        /// The date and time the repository was last modified, in timestamp format.
        public var lastModifiedDate: Date? = nil
        /// The repository's default branch name.
        public var defaultBranch: String? = nil

        public init() {}

        public init(repositoryDescription: String? = nil, arn: String? = nil, repositoryName: String? = nil, creationDate: Date? = nil, cloneUrlSsh: String? = nil, accountId: String? = nil, cloneUrlHttp: String? = nil, repositoryId: String? = nil, lastModifiedDate: Date? = nil, defaultBranch: String? = nil) {
            self.repositoryDescription = repositoryDescription
            self.arn = arn
            self.repositoryName = repositoryName
            self.creationDate = creationDate
            self.cloneUrlSsh = cloneUrlSsh
            self.accountId = accountId
            self.cloneUrlHttp = cloneUrlHttp
            self.repositoryId = repositoryId
            self.lastModifiedDate = lastModifiedDate
            self.defaultBranch = defaultBranch
        }

    }

    public struct ListBranchesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An enumeration token that returns the batch of the results.
        public var nextToken: String? = nil
        /// The list of branch names.
        public var branches: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, branches: [String]? = nil) {
            self.nextToken = nextToken
            self.branches = branches
        }

    }

    public struct RepositoryTrigger: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
        public var destinationArn: String = ""
        /// The name of the trigger.
        public var name: String = ""
        /// The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
        public var branches: [String]? = nil
        /// Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
        public var customData: String? = nil
        /// The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).   The valid value "all" cannot be used with any other values. 
        public var events: [String] = []

        public init() {}

        public init(destinationArn: String, name: String, branches: [String]? = nil, customData: String? = nil, events: [String]) {
            self.destinationArn = destinationArn
            self.name = name
            self.branches = branches
            self.customData = customData
            self.events = events
        }

    }

    public struct BlobMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The full ID of the blob.
        public var blobId: String? = nil
        /// The file mode permissions of the blob. File mode permission codes include:    100644 indicates read/write    100755 indicates read/write/execute    160000 indicates a submodule    120000 indicates a symlink  
        public var mode: String? = nil
        /// The path to the blob and any associated file name, if any.
        public var path: String? = nil

        public init() {}

        public init(blobId: String? = nil, mode: String? = nil, path: String? = nil) {
            self.blobId = blobId
            self.mode = mode
            self.path = path
        }

    }

    public struct Commit: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The parent list for the specified commit.
        public var parents: [String]? = nil
        /// The commit message associated with the specified commit.
        public var message: String? = nil
        /// Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.
        public var author: UserInfo? = nil
        /// Tree information for the specified commit.
        public var treeId: String? = nil
        /// Any additional data associated with the specified commit.
        public var additionalData: String? = nil
        /// Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git. For more information about the difference between an author and a committer in Git, see Viewing the Commit History in Pro Git by Scott Chacon and Ben Straub.
        public var committer: UserInfo? = nil

        public init() {}

        public init(parents: [String]? = nil, message: String? = nil, author: UserInfo? = nil, treeId: String? = nil, additionalData: String? = nil, committer: UserInfo? = nil) {
            self.parents = parents
            self.message = message
            self.author = author
            self.treeId = treeId
            self.additionalData = additionalData
            self.committer = committer
        }

    }

    public struct UpdateDefaultBranchInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the branch to set as the default.
        public var defaultBranchName: String = ""
        /// The name of the repository to set or change the default branch for.
        public var repositoryName: String = ""

        public init() {}

        public init(defaultBranchName: String, repositoryName: String) {
            self.defaultBranchName = defaultBranchName
            self.repositoryName = repositoryName
        }

    }

    public struct GetRepositoryOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the repository.
        public var repositoryMetadata: RepositoryMetadata? = nil

        public init() {}

        public init(repositoryMetadata: RepositoryMetadata? = nil) {
            self.repositoryMetadata = repositoryMetadata
        }

    }

    public struct TestRepositoryTriggersOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.
        public var successfulExecutions: [String]? = nil
        /// The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas.
        public var failedExecutions: [RepositoryTriggerExecutionFailure]? = nil

        public init() {}

        public init(successfulExecutions: [String]? = nil, failedExecutions: [RepositoryTriggerExecutionFailure]? = nil) {
            self.successfulExecutions = successfulExecutions
            self.failedExecutions = failedExecutions
        }

    }

    public struct TestRepositoryTriggersInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of triggers to test.
        public var triggers: [RepositoryTrigger] = []
        /// The name of the repository in which to test the triggers.
        public var repositoryName: String = ""

        public init() {}

        public init(triggers: [RepositoryTrigger], repositoryName: String) {
            self.triggers = triggers
            self.repositoryName = repositoryName
        }

    }

    public struct UpdateRepositoryDescriptionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the repository to set or change the comment or description for.
        public var repositoryName: String = ""
        /// The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.
        public var repositoryDescription: String? = nil

        public init() {}

        public init(repositoryName: String, repositoryDescription: String? = nil) {
            self.repositoryName = repositoryName
            self.repositoryDescription = repositoryDescription
        }

    }

    public struct PutRepositoryTriggersOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The system-generated unique ID for the create or update operation.
        public var configurationId: String? = nil

        public init() {}

        public init(configurationId: String? = nil) {
            self.configurationId = configurationId
        }

    }

    public struct GetBranchInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the branch for which you want to retrieve information.
        public var branchName: String? = nil
        /// The name of the repository that contains the branch for which you want to retrieve information.
        public var repositoryName: String? = nil

        public init() {}

        public init(branchName: String? = nil, repositoryName: String? = nil) {
            self.branchName = branchName
            self.repositoryName = repositoryName
        }

    }

    public struct CreateRepositoryOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the newly created repository.
        public var repositoryMetadata: RepositoryMetadata? = nil

        public init() {}

        public init(repositoryMetadata: RepositoryMetadata? = nil) {
            self.repositoryMetadata = repositoryMetadata
        }

    }

    public struct Difference: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Whether the change type of the difference is an addition (A), deletion (D), or modification (M).
        public var changeType: String? = nil
        /// Information about an afterBlob data type object, including the ID, the file mode permission code, and the path.
        public var afterBlob: BlobMetadata? = nil
        /// Information about a beforeBlob data type object, including the ID, the file mode permission code, and the path.
        public var beforeBlob: BlobMetadata? = nil

        public init() {}

        public init(changeType: String? = nil, afterBlob: BlobMetadata? = nil, beforeBlob: BlobMetadata? = nil) {
            self.changeType = changeType
            self.afterBlob = afterBlob
            self.beforeBlob = beforeBlob
        }

    }

    public struct RepositoryNameIdPair: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID associated with the repository.
        public var repositoryId: String? = nil
        /// The name associated with the repository.
        public var repositoryName: String? = nil

        public init() {}

        public init(repositoryId: String? = nil, repositoryName: String? = nil) {
            self.repositoryId = repositoryId
            self.repositoryName = repositoryName
        }

    }

    public struct GetDifferencesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit.
        public var afterCommitSpecifier: String = ""
        /// The name of the repository where you want to get differences.
        public var repositoryName: String = ""
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, the full commit ID. Optional. If not specified, all changes prior to the afterCommitSpecifier value will be shown. If you do not use beforeCommitSpecifier in your request, consider limiting the results with maxResults.
        public var beforeCommitSpecifier: String? = nil
        /// The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If beforePath and afterPath are not specified, differences will be shown for all paths.
        public var beforePath: String? = nil
        /// The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences will be shown for all paths.
        public var afterPath: String? = nil
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public var nextToken: String? = nil
        /// A non-negative integer used to limit the number of returned results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(afterCommitSpecifier: String, repositoryName: String, beforeCommitSpecifier: String? = nil, beforePath: String? = nil, afterPath: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.afterCommitSpecifier = afterCommitSpecifier
            self.repositoryName = repositoryName
            self.beforeCommitSpecifier = beforeCommitSpecifier
            self.beforePath = beforePath
            self.afterPath = afterPath
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct CreateBranchInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the new branch to create.
        public var branchName: String = ""
        /// The ID of the commit to point the new branch to.
        public var commitId: String = ""
        /// The name of the repository in which you want to create the new branch.
        public var repositoryName: String = ""

        public init() {}

        public init(branchName: String, commitId: String, repositoryName: String) {
            self.branchName = branchName
            self.commitId = commitId
            self.repositoryName = repositoryName
        }

    }

    public struct DeleteRepositoryInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the repository to delete.
        public var repositoryName: String = ""

        public init() {}

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

    }

    public struct ListBranchesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An enumeration token that allows the operation to batch the results.
        public var nextToken: String? = nil
        /// The name of the repository that contains the branches.
        public var repositoryName: String = ""

        public init() {}

        public init(nextToken: String? = nil, repositoryName: String) {
            self.nextToken = nextToken
            self.repositoryName = repositoryName
        }

    }

    public struct GetBranchOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the branch.
        public var branch: BranchInfo? = nil

        public init() {}

        public init(branch: BranchInfo? = nil) {
            self.branch = branch
        }

    }

    public struct GetCommitInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The commit ID.
        public var commitId: String = ""
        /// The name of the repository to which the commit was made.
        public var repositoryName: String = ""

        public init() {}

        public init(commitId: String, repositoryName: String) {
            self.commitId = commitId
            self.repositoryName = repositoryName
        }

    }

    public struct GetRepositoryInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the repository to get information about.
        public var repositoryName: String = ""

        public init() {}

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

    }

    public struct GetRepositoryTriggersOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The system-generated unique ID for the trigger.
        public var configurationId: String? = nil
        /// The JSON block of configuration information for each trigger.
        public var triggers: [RepositoryTrigger]? = nil

        public init() {}

        public init(configurationId: String? = nil, triggers: [RepositoryTrigger]? = nil) {
            self.configurationId = configurationId
            self.triggers = triggers
        }

    }

    public struct GetRepositoryTriggersInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the repository for which the trigger is configured.
        public var repositoryName: String = ""

        public init() {}

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

    }

    public struct UpdateRepositoryNameInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The existing name of the repository.
        public var oldName: String = ""
        /// The new name for the repository.
        public var newName: String = ""

        public init() {}

        public init(oldName: String, newName: String) {
            self.oldName = oldName
            self.newName = newName
        }

    }

    public struct BatchGetRepositoriesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of repositories returned by the batch get repositories operation.
        public var repositories: [RepositoryMetadata]? = nil
        /// Returns a list of repository names for which information could not be found.
        public var repositoriesNotFound: [String]? = nil

        public init() {}

        public init(repositories: [RepositoryMetadata]? = nil, repositoriesNotFound: [String]? = nil) {
            self.repositories = repositories
            self.repositoriesNotFound = repositoriesNotFound
        }

    }

    public struct GetDifferencesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public var nextToken: String? = nil
        /// A differences data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).
        public var differences: [Difference]? = nil

        public init() {}

        public init(nextToken: String? = nil, differences: [Difference]? = nil) {
            self.nextToken = nextToken
            self.differences = differences
        }

    }

    public struct ListRepositoriesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The criteria used to sort the results of a list repositories operation.
        public var sortBy: String? = nil
        /// The order in which to sort the results of a list repositories operation.
        public var order: String? = nil
        /// An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.
        public var nextToken: String? = nil

        public init() {}

        public init(sortBy: String? = nil, order: String? = nil, nextToken: String? = nil) {
            self.sortBy = sortBy
            self.order = order
            self.nextToken = nextToken
        }

    }

    public struct GetBlobOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The content of the blob, usually a file.
        public var content: Data = Data()

        public init() {}

        public init(content: Data) {
            self.content = content
        }

    }

    public struct RepositoryTriggerExecutionFailure: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Additional message information about the trigger that did not run.
        public var failureMessage: String? = nil
        /// The name of the trigger that did not run.
        public var trigger: String? = nil

        public init() {}

        public init(failureMessage: String? = nil, trigger: String? = nil) {
            self.failureMessage = failureMessage
            self.trigger = trigger
        }

    }

    public struct GetBlobInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the blob, which is its SHA-1 pointer.
        public var blobId: String = ""
        /// The name of the repository that contains the blob.
        public var repositoryName: String = ""

        public init() {}

        public init(blobId: String, repositoryName: String) {
            self.blobId = blobId
            self.repositoryName = repositoryName
        }

    }

    public struct CreateRepositoryInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the new repository to be created.  The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For a full description of the limits on repository names, see Limits in the AWS CodeCommit User Guide. The suffix ".git" is prohibited. 
        public var repositoryName: String = ""
        /// A comment or description about the new repository.  The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page. 
        public var repositoryDescription: String? = nil

        public init() {}

        public init(repositoryName: String, repositoryDescription: String? = nil) {
            self.repositoryName = repositoryName
            self.repositoryDescription = repositoryDescription
        }

    }

    public struct PutRepositoryTriggersInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JSON block of configuration information for each trigger.
        public var triggers: [RepositoryTrigger] = []
        /// The name of the repository where you want to create or update the trigger.
        public var repositoryName: String = ""

        public init() {}

        public init(triggers: [RepositoryTrigger], repositoryName: String) {
            self.triggers = triggers
            self.repositoryName = repositoryName
        }

    }

    public struct BatchGetRepositoriesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The names of the repositories to get information about.
        public var repositoryNames: [String] = []

        public init() {}

        public init(repositoryNames: [String]) {
            self.repositoryNames = repositoryNames
        }

    }

}