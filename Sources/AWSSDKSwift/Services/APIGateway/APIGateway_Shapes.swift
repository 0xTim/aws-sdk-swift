// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension APIGateway {

    public struct SdkConfigurationProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "friendlyName", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "required", required: false, type: .boolean), 
            AWSShapeMember(label: "defaultValue", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The user-friendly name of an SdkType configuration property.
        public let friendlyName: String?
        /// The name of a an SdkType configuration property.
        public let name: String?
        /// A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (true) or not (false).
        public let required: Bool?
        /// The default value of an SdkType configuration property.
        public let defaultValue: String?
        /// The description of an SdkType configuration property.
        public let description: String?

        public init(defaultValue: String? = nil, description: String? = nil, friendlyName: String? = nil, name: String? = nil, required: Bool? = nil) {
            self.friendlyName = friendlyName
            self.name = name
            self.required = required
            self.defaultValue = defaultValue
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case friendlyName = "friendlyName"
            case name = "name"
            case required = "required"
            case defaultValue = "defaultValue"
            case description = "description"
        }
    }

    public enum GatewayResponseType: String, CustomStringConvertible, Codable {
        case default4Xx = "DEFAULT_4XX"
        case default5Xx = "DEFAULT_5XX"
        case resourceNotFound = "RESOURCE_NOT_FOUND"
        case unauthorized = "UNAUTHORIZED"
        case invalidApiKey = "INVALID_API_KEY"
        case accessDenied = "ACCESS_DENIED"
        case authorizerFailure = "AUTHORIZER_FAILURE"
        case authorizerConfigurationError = "AUTHORIZER_CONFIGURATION_ERROR"
        case invalidSignature = "INVALID_SIGNATURE"
        case expiredToken = "EXPIRED_TOKEN"
        case missingAuthenticationToken = "MISSING_AUTHENTICATION_TOKEN"
        case integrationFailure = "INTEGRATION_FAILURE"
        case integrationTimeout = "INTEGRATION_TIMEOUT"
        case apiConfigurationError = "API_CONFIGURATION_ERROR"
        case unsupportedMediaType = "UNSUPPORTED_MEDIA_TYPE"
        case badRequestParameters = "BAD_REQUEST_PARAMETERS"
        case badRequestBody = "BAD_REQUEST_BODY"
        case requestTooLarge = "REQUEST_TOO_LARGE"
        case throttled = "THROTTLED"
        case quotaExceeded = "QUOTA_EXCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "vpcLinkId", location: .uri(locationName: "vpclink_id"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let vpcLinkId: String

        public init(patchOperations: [PatchOperation]? = nil, vpcLinkId: String) {
            self.patchOperations = patchOperations
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case vpcLinkId = "vpclink_id"
        }
    }

    public struct GetUsagePlanKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "nameQuery", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// A query parameter specifying the name of the to-be-returned usage plan keys.
        public let nameQuery: String?
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String

        public init(limit: Int32? = nil, nameQuery: String? = nil, position: String? = nil, usagePlanId: String) {
            self.limit = limit
            self.position = position
            self.nameQuery = nameQuery
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
            case nameQuery = "name"
            case usagePlanId = "usageplanId"
        }
    }

    public struct ImportRestApiRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean)
        ]
        /// A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.  To exclude DocumentationParts from the import, set parameters as ignore=documentation.  To configure the endpoint type, set parameters as endpointConfigurationTypes=EDGE, endpointConfigurationTypes=REGIONAL, or endpointConfigurationTypes=PRIVATE. The default endpoint type is EDGE.  To handle imported basePath, set parameters as basePath=ignore, basePath=prepend or basePath=split. For example, the AWS CLI command to exclude documentation from the imported API is: aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json' The AWS CLI command to set the regional endpoint on the imported API is: aws apigateway import-rest-api --parameters endpointConfigurationTypes=REGIONAL --body 'file:///path/to/imported-api-body.json'
        public let parameters: [String: String]?
        /// [Required] The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 2MB.
        public let body: Data
        /// A query parameter to indicate whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
        public let failOnWarnings: Bool?

        public init(body: Data, failOnWarnings: Bool? = nil, parameters: [String: String]? = nil) {
            self.parameters = parameters
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "parameters"
            case body = "body"
            case failOnWarnings = "failonwarnings"
        }
    }

    public struct DeleteDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", location: .uri(locationName: "deployment_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the Deployment resource to delete.
        public let deploymentId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(deploymentId: String, restApiId: String) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deployment_id"
            case restApiId = "restapi_id"
        }
    }

    public struct DeleteResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Resource resource.
        public let resourceId: String

        public init(resourceId: String, restApiId: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct GetTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resource_arn"), required: true, type: .string)
        ]
        /// (Not currently supported) The current pagination position in the paged result set.
        public let position: String?
        /// (Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded. At present, Stage is the only taggable resource.
        public let resourceArn: String

        public init(limit: Int32? = nil, position: String? = nil, resourceArn: String) {
            self.position = position
            self.limit = limit
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
            case resourceArn = "resource_arn"
        }
    }

    public struct QuotaSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "period", required: false, type: .enum), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "offset", required: false, type: .integer)
        ]
        /// The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
        public let period: QuotaPeriodType?
        /// The maximum number of requests that can be made in a given time period.
        public let limit: Int32?
        /// The number of requests subtracted from the given limit in the initial time period.
        public let offset: Int32?

        public init(limit: Int32? = nil, offset: Int32? = nil, period: QuotaPeriodType? = nil) {
            self.period = period
            self.limit = limit
            self.offset = offset
        }

        private enum CodingKeys: String, CodingKey {
            case period = "period"
            case limit = "limit"
            case offset = "offset"
        }
    }

    public struct AccessLogSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationArn", required: false, type: .string), 
            AWSShapeMember(label: "format", required: false, type: .string)
        ]
        /// The ARN of the CloudWatch Logs log group to receive access logs.
        public let destinationArn: String?
        /// A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.
        public let format: String?

        public init(destinationArn: String? = nil, format: String? = nil) {
            self.destinationArn = destinationArn
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "destinationArn"
            case format = "format"
        }
    }

    public struct VpcLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [VpcLink]?

        public init(items: [VpcLink]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct GetMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The status code for the MethodResponse resource.
        public let statusCode: String
        /// [Required] The Resource identifier for the MethodResponse resource.
        public let resourceId: String

        public init(httpMethod: String, resourceId: String, restApiId: String, statusCode: String) {
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.statusCode = statusCode
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case httpMethod = "http_method"
            case statusCode = "status_code"
            case resourceId = "resource_id"
        }
    }

    public struct UpdateMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The status code for the MethodResponse resource.
        public let statusCode: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The Resource identifier for the MethodResponse resource.
        public let resourceId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(httpMethod: String, patchOperations: [PatchOperation]? = nil, resourceId: String, restApiId: String, statusCode: String) {
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.resourceId = resourceId
            self.patchOperations = patchOperations
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
            case patchOperations = "patchOperations"
            case restApiId = "restapi_id"
        }
    }

    public struct UpdateResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Resource resource.
        public let resourceId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(patchOperations: [PatchOperation]? = nil, resourceId: String, restApiId: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct VpcLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "targetArns", required: false, type: .list), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]
        /// The status of the VPC link. The valid values are AVAILABLE, PENDING, DELETING, or FAILED. Deploying an API will wait if the status is PENDING and will fail if the status is DELETING. 
        public let status: VpcLinkStatus?
        /// The name used to label and identify the VPC link.
        public let name: String?
        /// The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let id: String?
        /// The description of the VPC link.
        public let description: String?
        /// The ARNs of network load balancers of the VPC targeted by the VPC link. The network load balancers must be owned by the same AWS account of the API owner.
        public let targetArns: [String]?
        /// A description about the VPC link status.
        public let statusMessage: String?

        public init(description: String? = nil, id: String? = nil, name: String? = nil, status: VpcLinkStatus? = nil, statusMessage: String? = nil, targetArns: [String]? = nil) {
            self.status = status
            self.name = name
            self.id = id
            self.description = description
            self.targetArns = targetArns
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case name = "name"
            case id = "id"
            case description = "description"
            case targetArns = "targetArns"
            case statusMessage = "statusMessage"
        }
    }

    public struct DeleteDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationVersion", location: .uri(locationName: "doc_version"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The version identifier of a to-be-deleted documentation snapshot.
        public let documentationVersion: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(documentationVersion: String, restApiId: String) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationVersion = "doc_version"
            case restApiId = "restapi_id"
        }
    }

    public struct GetDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationVersion", location: .uri(locationName: "doc_version"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The version identifier of the to-be-retrieved documentation snapshot.
        public let documentationVersion: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(documentationVersion: String, restApiId: String) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationVersion = "doc_version"
            case restApiId = "restapi_id"
        }
    }

    public enum IntegrationType: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case aws = "AWS"
        case mock = "MOCK"
        case httpProxy = "HTTP_PROXY"
        case awsProxy = "AWS_PROXY"
        public var description: String { return self.rawValue }
    }

    public struct GetRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(restApiId: String) {
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
        }
    }

    public struct CanarySettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "useStageCache", required: false, type: .boolean), 
            AWSShapeMember(label: "stageVariableOverrides", required: false, type: .map), 
            AWSShapeMember(label: "percentTraffic", required: false, type: .double)
        ]
        /// The ID of the canary deployment.
        public let deploymentId: String?
        /// A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
        public let useStageCache: Bool?
        /// Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
        public let stageVariableOverrides: [String: String]?
        /// The percent (0-100) of traffic diverted to a canary deployment.
        public let percentTraffic: Double?

        public init(deploymentId: String? = nil, percentTraffic: Double? = nil, stageVariableOverrides: [String: String]? = nil, useStageCache: Bool? = nil) {
            self.deploymentId = deploymentId
            self.useStageCache = useStageCache
            self.stageVariableOverrides = stageVariableOverrides
            self.percentTraffic = percentTraffic
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case useStageCache = "useStageCache"
            case stageVariableOverrides = "stageVariableOverrides"
            case percentTraffic = "percentTraffic"
        }
    }

    public struct CreateVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "targetArns", required: true, type: .list)
        ]
        /// The description of the VPC link.
        public let description: String?
        /// [Required] The name used to label and identify the VPC link.
        public let name: String
        /// [Required] The ARNs of network load balancers of the VPC targeted by the VPC link. The network load balancers must be owned by the same AWS account of the API owner.
        public let targetArns: [String]

        public init(description: String? = nil, name: String, targetArns: [String]) {
            self.description = description
            self.name = name
            self.targetArns = targetArns
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case targetArns = "targetArns"
        }
    }

    public struct BasePathMappings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [BasePathMapping]?
        public let position: String?

        public init(items: [BasePathMapping]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct GetRestApisRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, position: String? = nil) {
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
        }
    }

    public struct DocumentationVersions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [DocumentationVersion]?

        public init(items: [DocumentationVersion]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct DeleteGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(responseType: GatewayResponseType, restApiId: String) {
            self.responseType = responseType
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case responseType = "response_type"
            case restApiId = "restapi_id"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list), 
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resource_arn"), required: true, type: .string)
        ]
        /// [Required] The Tag keys to delete.
        public let tagKeys: [String]
        /// [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded. At present, Stage is the only taggable resource.
        public let resourceArn: String

        public init(resourceArn: String, tagKeys: [String]) {
            self.tagKeys = tagKeys
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "tagKeys"
            case resourceArn = "resource_arn"
        }
    }

    public enum CacheClusterStatus: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case available = "AVAILABLE"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case notAvailable = "NOT_AVAILABLE"
        case flushInProgress = "FLUSH_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum UnauthorizedCacheControlHeaderStrategy: String, CustomStringConvertible, Codable {
        case failWith403 = "FAIL_WITH_403"
        case succeedWithResponseHeader = "SUCCEED_WITH_RESPONSE_HEADER"
        case succeedWithoutResponseHeader = "SUCCEED_WITHOUT_RESPONSE_HEADER"
        public var description: String { return self.rawValue }
    }

    public struct GetSdkTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, position: String? = nil) {
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
        }
    }

    public enum LocationStatusType: String, CustomStringConvertible, Codable {
        case documented = "DOCUMENTED"
        case undocumented = "UNDOCUMENTED"
        public var description: String { return self.rawValue }
    }

    public struct GetClientCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(limit: Int32? = nil, position: String? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct TestInvokeMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pathWithQueryString", required: false, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "stageVariables", required: false, type: .map), 
            AWSShapeMember(label: "body", required: false, type: .string), 
            AWSShapeMember(label: "headers", required: false, type: .map), 
            AWSShapeMember(label: "multiValueHeaders", required: false, type: .map), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "clientCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        public let pathWithQueryString: String?
        /// [Required] Specifies a test invoke method request's HTTP method.
        public let httpMethod: String
        /// A key-value map of stage variables to simulate an invocation on a deployed Stage.
        public let stageVariables: [String: String]?
        /// The simulated request body of an incoming invocation request.
        public let body: String?
        /// A key-value map of headers to simulate an incoming invocation request.
        public let headers: [String: String]?
        /// The headers as a map from string to list of values to simulate an incoming invocation request.
        public let multiValueHeaders: [String: [String]]?
        /// [Required] Specifies a test invoke method request's resource ID.
        public let resourceId: String
        /// A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
        public let clientCertificateId: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(body: String? = nil, clientCertificateId: String? = nil, headers: [String: String]? = nil, httpMethod: String, multiValueHeaders: [String: [String]]? = nil, pathWithQueryString: String? = nil, resourceId: String, restApiId: String, stageVariables: [String: String]? = nil) {
            self.pathWithQueryString = pathWithQueryString
            self.httpMethod = httpMethod
            self.stageVariables = stageVariables
            self.body = body
            self.headers = headers
            self.multiValueHeaders = multiValueHeaders
            self.resourceId = resourceId
            self.clientCertificateId = clientCertificateId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case pathWithQueryString = "pathWithQueryString"
            case httpMethod = "http_method"
            case stageVariables = "stageVariables"
            case body = "body"
            case headers = "headers"
            case multiValueHeaders = "multiValueHeaders"
            case resourceId = "resource_id"
            case clientCertificateId = "clientCertificateId"
            case restApiId = "restapi_id"
        }
    }

    public struct Authorizers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [Authorizer]?
        public let position: String?

        public init(items: [Authorizer]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct CreateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterSize", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string), 
            AWSShapeMember(label: "documentationVersion", required: false, type: .string), 
            AWSShapeMember(label: "tracingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "variables", required: false, type: .map), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "cacheClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "canarySettings", required: false, type: .structure), 
            AWSShapeMember(label: "stageName", required: true, type: .string)
        ]
        /// The description of the Stage resource.
        public let description: String?
        /// The stage's cache cluster size.
        public let cacheClusterSize: CacheClusterSize?
        /// [Required] The identifier of the Deployment resource for the Stage resource.
        public let deploymentId: String
        /// The version of the associated API documentation.
        public let documentationVersion: String?
        /// Specifies whether active tracing with X-ray is enabled for the Stage.
        public let tracingEnabled: Bool?
        /// A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let variables: [String: String]?
        /// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.
        public let tags: [String: String]?
        /// Whether cache clustering is enabled for the stage.
        public let cacheClusterEnabled: Bool?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The canary deployment settings of this stage.
        public let canarySettings: CanarySettings?
        /// [Required] The name for the Stage resource.
        public let stageName: String

        public init(cacheClusterEnabled: Bool? = nil, cacheClusterSize: CacheClusterSize? = nil, canarySettings: CanarySettings? = nil, deploymentId: String, description: String? = nil, documentationVersion: String? = nil, restApiId: String, stageName: String, tags: [String: String]? = nil, tracingEnabled: Bool? = nil, variables: [String: String]? = nil) {
            self.description = description
            self.cacheClusterSize = cacheClusterSize
            self.deploymentId = deploymentId
            self.documentationVersion = documentationVersion
            self.tracingEnabled = tracingEnabled
            self.variables = variables
            self.tags = tags
            self.cacheClusterEnabled = cacheClusterEnabled
            self.restApiId = restApiId
            self.canarySettings = canarySettings
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case cacheClusterSize = "cacheClusterSize"
            case deploymentId = "deploymentId"
            case documentationVersion = "documentationVersion"
            case tracingEnabled = "tracingEnabled"
            case variables = "variables"
            case tags = "tags"
            case cacheClusterEnabled = "cacheClusterEnabled"
            case restApiId = "restapi_id"
            case canarySettings = "canarySettings"
            case stageName = "stageName"
        }
    }

    public struct UpdateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", location: .uri(locationName: "deployment_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// The replacement identifier for the Deployment resource to change information about.
        public let deploymentId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(deploymentId: String, patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deployment_id"
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct SdkResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "body", required: false, type: .blob), 
            AWSShapeMember(label: "contentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type"), required: false, type: .string)
        ]
        /// The binary blob response to GetSdk, which contains the generated SDK.
        public let body: Data?
        /// The content-disposition header value in the HTTP response.
        public let contentDisposition: String?
        /// The content-type header value in the HTTP response.
        public let contentType: String?

        public init(body: Data? = nil, contentDisposition: String? = nil, contentType: String? = nil) {
            self.body = body
            self.contentDisposition = contentDisposition
            self.contentType = contentType
        }

        private enum CodingKeys: String, CodingKey {
            case body = "body"
            case contentDisposition = "Content-Disposition"
            case contentType = "Content-Type"
        }
    }

    public enum VpcLinkStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case pending = "PENDING"
        case deleting = "DELETING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(patchOperations: [PatchOperation]? = nil, responseType: GatewayResponseType, restApiId: String) {
            self.restApiId = restApiId
            self.responseType = responseType
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case responseType = "response_type"
            case patchOperations = "patchOperations"
        }
    }

    public struct UpdateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The name of the Stage resource to change information about.
        public let stageName: String

        public init(patchOperations: [PatchOperation]? = nil, restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
            case stageName = "stage_name"
        }
    }

    public struct RestApis: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [RestApi]?
        public let position: String?

        public init(items: [RestApi]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct DeleteVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcLinkId", location: .uri(locationName: "vpclink_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let vpcLinkId: String

        public init(vpcLinkId: String) {
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcLinkId = "vpclink_id"
        }
    }

    public enum CacheClusterSize: String, CustomStringConvertible, Codable {
        case cacheClusterSize05 = "0.5"
        case cacheClusterSize16 = "1.6"
        case cacheClusterSize61 = "6.1"
        case cacheClusterSize135 = "13.5"
        case cacheClusterSize284 = "28.4"
        case cacheClusterSize582 = "58.2"
        case cacheClusterSize118 = "118"
        case cacheClusterSize237 = "237"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationPartId", location: .uri(locationName: "part_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the to-be-deleted documentation part.
        public let documentationPartId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(documentationPartId: String, restApiId: String) {
            self.documentationPartId = documentationPartId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationPartId = "part_id"
            case restApiId = "restapi_id"
        }
    }

    public struct MethodResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseModels", required: false, type: .map), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "statusCode", required: false, type: .string)
        ]
        /// Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
        public let responseModels: [String: String]?
        /// A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern method.response.header.{name}, where name is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in integration.response.header.{name}, a static value enclosed within a pair of single quotes (e.g., 'application/json'), or a JSON expression from the back-end response payload in the form of integration.response.body.{JSON-expression}, where JSON-expression is a valid JSON expression without the $ prefix.)
        public let responseParameters: [String: Bool]?
        /// The method response's status code.
        public let statusCode: String?

        public init(responseModels: [String: String]? = nil, responseParameters: [String: Bool]? = nil, statusCode: String? = nil) {
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case statusCode = "statusCode"
        }
    }

    public struct GetAccountRequest: AWSShape {

        public init() {
        }

    }

    public struct ImportDocumentationPartsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "mode", location: .querystring(locationName: "mode"), required: false, type: .enum), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// A query parameter to indicate whether to overwrite (OVERWRITE) any existing DocumentationParts definition or to merge (MERGE) the new definition into the existing one. The default value is MERGE.
        public let mode: PutMode?
        /// [Required] Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.
        public let body: Data
        /// A query parameter to specify whether to rollback the documentation importation (true) or not (false) when a warning is encountered. The default value is false.
        public let failOnWarnings: Bool?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(body: Data, failOnWarnings: Bool? = nil, mode: PutMode? = nil, restApiId: String) {
            self.mode = mode
            self.body = body
            self.failOnWarnings = failOnWarnings
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case mode = "mode"
            case body = "body"
            case failOnWarnings = "failonwarnings"
            case restApiId = "restapi_id"
        }
    }

    public struct Template: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The Apache Velocity Template Language (VTL) template content used for the template resource.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct RestApi: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "policy", required: false, type: .string), 
            AWSShapeMember(label: "apiKeySource", required: false, type: .enum), 
            AWSShapeMember(label: "minimumCompressionSize", required: false, type: .integer), 
            AWSShapeMember(label: "binaryMediaTypes", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "warnings", required: false, type: .list), 
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The API's identifier. This identifier is unique across all of your APIs in API Gateway.
        public let id: String?
        /// A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
        public let policy: String?
        /// The source of the API key for metering requests according to a usage plan. Valid values are: HEADER to read the API key from the X-API-Key header of a request. AUTHORIZER to read the API key from the UsageIdentifierKey from a custom authorizer. 
        public let apiKeySource: ApiKeySourceType?
        /// A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        public let minimumCompressionSize: Int32?
        /// The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        public let binaryMediaTypes: [String]?
        /// The API's name.
        public let name: String?
        /// The timestamp when the API was created.
        public let createdDate: TimeStamp?
        /// The warning messages reported when failonwarnings is turned on during API import.
        public let warnings: [String]?
        /// The endpoint configuration of this RestApi showing the endpoint types of the API. 
        public let endpointConfiguration: EndpointConfiguration?
        /// A version identifier for the API.
        public let version: String?
        /// The API's description.
        public let description: String?

        public init(apiKeySource: ApiKeySourceType? = nil, binaryMediaTypes: [String]? = nil, createdDate: TimeStamp? = nil, description: String? = nil, endpointConfiguration: EndpointConfiguration? = nil, id: String? = nil, minimumCompressionSize: Int32? = nil, name: String? = nil, policy: String? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.id = id
            self.policy = policy
            self.apiKeySource = apiKeySource
            self.minimumCompressionSize = minimumCompressionSize
            self.binaryMediaTypes = binaryMediaTypes
            self.name = name
            self.createdDate = createdDate
            self.warnings = warnings
            self.endpointConfiguration = endpointConfiguration
            self.version = version
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case policy = "policy"
            case apiKeySource = "apiKeySource"
            case minimumCompressionSize = "minimumCompressionSize"
            case binaryMediaTypes = "binaryMediaTypes"
            case name = "name"
            case createdDate = "createdDate"
            case warnings = "warnings"
            case endpointConfiguration = "endpointConfiguration"
            case version = "version"
            case description = "description"
        }
    }

    public struct CreateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "regionalCertificateName", required: false, type: .string), 
            AWSShapeMember(label: "domainName", required: true, type: .string), 
            AWSShapeMember(label: "regionalCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateBody", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateName", required: false, type: .string), 
            AWSShapeMember(label: "certificateChain", required: false, type: .string), 
            AWSShapeMember(label: "certificatePrivateKey", required: false, type: .string)
        ]
        /// The endpoint configuration of this DomainName showing the endpoint types of the domain name. 
        public let endpointConfiguration: EndpointConfiguration?
        /// The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
        public let regionalCertificateName: String?
        /// [Required] The name of the DomainName resource.
        public let domainName: String
        /// The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let regionalCertificateArn: String?
        /// [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.
        public let certificateBody: String?
        /// The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let certificateArn: String?
        /// The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
        public let certificateName: String?
        /// [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.
        public let certificateChain: String?
        /// [Deprecated] Your edge-optimized endpoint's domain name certificate's private key.
        public let certificatePrivateKey: String?

        public init(certificateArn: String? = nil, certificateBody: String? = nil, certificateChain: String? = nil, certificateName: String? = nil, certificatePrivateKey: String? = nil, domainName: String, endpointConfiguration: EndpointConfiguration? = nil, regionalCertificateArn: String? = nil, regionalCertificateName: String? = nil) {
            self.endpointConfiguration = endpointConfiguration
            self.regionalCertificateName = regionalCertificateName
            self.domainName = domainName
            self.regionalCertificateArn = regionalCertificateArn
            self.certificateBody = certificateBody
            self.certificateArn = certificateArn
            self.certificateName = certificateName
            self.certificateChain = certificateChain
            self.certificatePrivateKey = certificatePrivateKey
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfiguration = "endpointConfiguration"
            case regionalCertificateName = "regionalCertificateName"
            case domainName = "domainName"
            case regionalCertificateArn = "regionalCertificateArn"
            case certificateBody = "certificateBody"
            case certificateArn = "certificateArn"
            case certificateName = "certificateName"
            case certificateChain = "certificateChain"
            case certificatePrivateKey = "certificatePrivateKey"
        }
    }

    public struct CreateDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationVersion", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "stageName", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The version identifier of the new snapshot.
        public let documentationVersion: String
        /// A description about the new documentation snapshot.
        public let description: String?
        /// The stage name to be associated with the new documentation snapshot.
        public let stageName: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(description: String? = nil, documentationVersion: String, restApiId: String, stageName: String? = nil) {
            self.documentationVersion = documentationVersion
            self.description = description
            self.stageName = stageName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationVersion = "documentationVersion"
            case description = "description"
            case stageName = "stageName"
            case restApiId = "restapi_id"
        }
    }

    public struct UsagePlans: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [UsagePlan]?

        public init(items: [UsagePlan]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct Usage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startDate", required: false, type: .string), 
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "usagePlanId", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "values"), required: false, type: .map), 
            AWSShapeMember(label: "endDate", required: false, type: .string)
        ]
        /// The starting date of the usage data.
        public let startDate: String?
        public let position: String?
        /// The plan Id associated with this usage data.
        public let usagePlanId: String?
        /// The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, {..., "values" : { "{api_key}" : [ [0, 100], [10, 90], [100, 10]]}, where {api_key} stands for an API key value and the daily log entry is of the format [used quota, remaining quota].
        public let items: [String: [[Int64]]]?
        /// The ending date of the usage data.
        public let endDate: String?

        public init(endDate: String? = nil, items: [String: [[Int64]]]? = nil, position: String? = nil, startDate: String? = nil, usagePlanId: String? = nil) {
            self.startDate = startDate
            self.position = position
            self.usagePlanId = usagePlanId
            self.items = items
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case startDate = "startDate"
            case position = "position"
            case usagePlanId = "usagePlanId"
            case items = "values"
            case endDate = "endDate"
        }
    }

    public struct UpdateRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestValidatorId", location: .uri(locationName: "requestvalidator_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of RequestValidator to be updated.
        public let requestValidatorId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(patchOperations: [PatchOperation]? = nil, requestValidatorId: String, restApiId: String) {
            self.requestValidatorId = requestValidatorId
            self.patchOperations = patchOperations
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case requestValidatorId = "requestvalidator_id"
            case patchOperations = "patchOperations"
            case restApiId = "restapi_id"
        }
    }

    public struct GetDocumentationPartsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locationStatus", location: .querystring(locationName: "locationStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "nameQuery", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "path", location: .querystring(locationName: "path"), required: false, type: .string), 
            AWSShapeMember(label: "type", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The status of the API documentation parts to retrieve. Valid values are DOCUMENTED for retrieving DocumentationPart resources with content and UNDOCUMENTED for DocumentationPart resources without content.
        public let locationStatus: LocationStatusType?
        /// The name of API entities of the to-be-retrieved documentation parts.
        public let nameQuery: String?
        /// The path of API entities of the to-be-retrieved documentation parts.
        public let path: String?
        /// The type of API entities of the to-be-retrieved documentation parts. 
        public let `type`: DocumentationPartType?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, locationStatus: LocationStatusType? = nil, nameQuery: String? = nil, path: String? = nil, position: String? = nil, restApiId: String, type: DocumentationPartType? = nil) {
            self.locationStatus = locationStatus
            self.nameQuery = nameQuery
            self.path = path
            self.`type` = `type`
            self.restApiId = restApiId
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case locationStatus = "locationStatus"
            case nameQuery = "name"
            case path = "path"
            case `type` = "type"
            case restApiId = "restapi_id"
            case limit = "limit"
            case position = "position"
        }
    }

    public struct GetUsagePlansRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "keyId", location: .querystring(locationName: "keyId"), required: false, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The identifier of the API key associated with the usage plans.
        public let keyId: String?

        public init(keyId: String? = nil, limit: Int32? = nil, position: String? = nil) {
            self.position = position
            self.limit = limit
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
            case keyId = "keyId"
        }
    }

    public struct UsagePlanKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The name of a usage plan key.
        public let name: String?
        /// The Id of a usage plan key.
        public let id: String?
        /// The type of a usage plan key. Currently, the valid key type is API_KEY.
        public let `type`: String?
        /// The value of a usage plan key.
        public let value: String?

        public init(id: String? = nil, name: String? = nil, type: String? = nil, value: String? = nil) {
            self.name = name
            self.id = id
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case id = "id"
            case `type` = "type"
            case value = "value"
        }
    }

    public struct DeleteStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the Stage resource to delete.
        public let stageName: String

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case stageName = "stage_name"
        }
    }

    public struct RequestValidator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "validateRequestParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "validateRequestBody", required: false, type: .boolean), 
            AWSShapeMember(label: "id", required: false, type: .string)
        ]
        /// A Boolean flag to indicate whether to validate request parameters (true) or not (false).
        public let validateRequestParameters: Bool?
        /// The name of this RequestValidator
        public let name: String?
        /// A Boolean flag to indicate whether to validate a request body according to the configured Model schema.
        public let validateRequestBody: Bool?
        /// The identifier of this RequestValidator.
        public let id: String?

        public init(id: String? = nil, name: String? = nil, validateRequestBody: Bool? = nil, validateRequestParameters: Bool? = nil) {
            self.validateRequestParameters = validateRequestParameters
            self.name = name
            self.validateRequestBody = validateRequestBody
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case validateRequestParameters = "validateRequestParameters"
            case name = "name"
            case validateRequestBody = "validateRequestBody"
            case id = "id"
        }
    }

    public struct GetDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationPartId", location: .uri(locationName: "part_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let documentationPartId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(documentationPartId: String, restApiId: String) {
            self.documentationPartId = documentationPartId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationPartId = "part_id"
            case restApiId = "restapi_id"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resource_arn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .map)
        ]
        /// [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded. At present, Stage is the only taggable resource.
        public let resourceArn: String
        /// [Required] The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource_arn"
            case tags = "tags"
        }
    }

    public struct UpdateUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyId", location: .uri(locationName: "keyId"), required: true, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.
        public let keyId: String
        /// [Required] The Id of the usage plan associated with the usage data.
        public let usagePlanId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(keyId: String, patchOperations: [PatchOperation]? = nil, usagePlanId: String) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "keyId"
            case usagePlanId = "usageplanId"
            case patchOperations = "patchOperations"
        }
    }

    public struct UpdateIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] Represents an update integration request's resource identifier.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Represents an update integration request's HTTP method.
        public let httpMethod: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(httpMethod: String, patchOperations: [PatchOperation]? = nil, resourceId: String, restApiId: String) {
            self.resourceId = resourceId
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
            case httpMethod = "http_method"
            case patchOperations = "patchOperations"
        }
    }

    public struct UpdateIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] Specifies an update integration response request's status code.
        public let statusCode: String
        /// [Required] Specifies an update integration response request's resource identifier.
        public let resourceId: String
        /// [Required] Specifies an update integration response request's HTTP method.
        public let httpMethod: String

        public init(httpMethod: String, patchOperations: [PatchOperation]? = nil, resourceId: String, restApiId: String, statusCode: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
            case statusCode = "status_code"
            case resourceId = "resource_id"
            case httpMethod = "http_method"
        }
    }

    public struct CreateDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "location", required: true, type: .structure), 
            AWSShapeMember(label: "properties", required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The location of the targeted API entity of the to-be-created documentation part.
        public let location: DocumentationPartLocation
        /// [Required] The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.
        public let properties: String

        public init(location: DocumentationPartLocation, properties: String, restApiId: String) {
            self.restApiId = restApiId
            self.location = location
            self.properties = properties
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case location = "location"
            case properties = "properties"
        }
    }

    public struct MethodSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requireAuthorizationForCacheControl", required: false, type: .boolean), 
            AWSShapeMember(label: "metricsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "cacheDataEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "dataTraceEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "loggingLevel", required: false, type: .string), 
            AWSShapeMember(label: "throttlingRateLimit", required: false, type: .double), 
            AWSShapeMember(label: "throttlingBurstLimit", required: false, type: .integer), 
            AWSShapeMember(label: "cacheTtlInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "cachingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "unauthorizedCacheControlHeaderStrategy", required: false, type: .enum)
        ]
        /// Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is /{method_setting_key}/caching/requireAuthorizationForCacheControl, and the value is a Boolean.
        public let requireAuthorizationForCacheControl: Bool?
        /// Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is /{method_setting_key}/metrics/enabled, and the value is a Boolean.
        public let metricsEnabled: Bool?
        /// Specifies whether the cached responses are encrypted. The PATCH path for this setting is /{method_setting_key}/caching/dataEncrypted, and the value is a Boolean.
        public let cacheDataEncrypted: Bool?
        /// Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is /{method_setting_key}/logging/dataTrace, and the value is a Boolean.
        public let dataTraceEnabled: Bool?
        /// Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is /{method_setting_key}/logging/loglevel, and the available levels are OFF, ERROR, and INFO.
        public let loggingLevel: String?
        /// Specifies the throttling rate limit. The PATCH path for this setting is /{method_setting_key}/throttling/rateLimit, and the value is a double.
        public let throttlingRateLimit: Double?
        /// Specifies the throttling burst limit. The PATCH path for this setting is /{method_setting_key}/throttling/burstLimit, and the value is an integer.
        public let throttlingBurstLimit: Int32?
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is /{method_setting_key}/caching/ttlInSeconds, and the value is an integer.
        public let cacheTtlInSeconds: Int32?
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is /{method_setting_key}/caching/enabled, and the value is a Boolean.
        public let cachingEnabled: Bool?
        /// Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is /{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy, and the available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
        public let unauthorizedCacheControlHeaderStrategy: UnauthorizedCacheControlHeaderStrategy?

        public init(cacheDataEncrypted: Bool? = nil, cacheTtlInSeconds: Int32? = nil, cachingEnabled: Bool? = nil, dataTraceEnabled: Bool? = nil, loggingLevel: String? = nil, metricsEnabled: Bool? = nil, requireAuthorizationForCacheControl: Bool? = nil, throttlingBurstLimit: Int32? = nil, throttlingRateLimit: Double? = nil, unauthorizedCacheControlHeaderStrategy: UnauthorizedCacheControlHeaderStrategy? = nil) {
            self.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl
            self.metricsEnabled = metricsEnabled
            self.cacheDataEncrypted = cacheDataEncrypted
            self.dataTraceEnabled = dataTraceEnabled
            self.loggingLevel = loggingLevel
            self.throttlingRateLimit = throttlingRateLimit
            self.throttlingBurstLimit = throttlingBurstLimit
            self.cacheTtlInSeconds = cacheTtlInSeconds
            self.cachingEnabled = cachingEnabled
            self.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case requireAuthorizationForCacheControl = "requireAuthorizationForCacheControl"
            case metricsEnabled = "metricsEnabled"
            case cacheDataEncrypted = "cacheDataEncrypted"
            case dataTraceEnabled = "dataTraceEnabled"
            case loggingLevel = "loggingLevel"
            case throttlingRateLimit = "throttlingRateLimit"
            case throttlingBurstLimit = "throttlingBurstLimit"
            case cacheTtlInSeconds = "cacheTtlInSeconds"
            case cachingEnabled = "cachingEnabled"
            case unauthorizedCacheControlHeaderStrategy = "unauthorizedCacheControlHeaderStrategy"
        }
    }

    public struct GetModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.limit = limit
            self.position = position
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
            case restApiId = "restapi_id"
        }
    }

    public struct Method: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "requestModels", required: false, type: .map), 
            AWSShapeMember(label: "methodResponses", required: false, type: .map), 
            AWSShapeMember(label: "operationName", required: false, type: .string), 
            AWSShapeMember(label: "authorizerId", required: false, type: .string), 
            AWSShapeMember(label: "httpMethod", required: false, type: .string), 
            AWSShapeMember(label: "apiKeyRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "methodIntegration", required: false, type: .structure), 
            AWSShapeMember(label: "requestValidatorId", required: false, type: .string), 
            AWSShapeMember(label: "authorizationType", required: false, type: .string), 
            AWSShapeMember(label: "authorizationScopes", required: false, type: .list)
        ]
        /// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
        public let requestParameters: [String: Bool]?
        /// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
        public let requestModels: [String: String]?
        /// Gets a method response associated with a given HTTP status code.   The collection of method responses are encapsulated in a key-value map, where the key is a response's HTTP status code and the value is a MethodResponse resource that specifies the response returned to the caller from the back end through the integration response. Example: Get a 200 OK response of a GET method Request  GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T215008Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response The successful response returns a 200 OK status code and a payload similar to the following: { "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true }, "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.operator": false, "method.response.header.operand_2": false, "method.response.header.operand_1": false }, "statusCode": "200" }    AWS CLI 
        public let methodResponses: [String: MethodResponse]?
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in PetStore example.
        public let operationName: String?
        /// The identifier of an Authorizer to use on this method. The authorizationType must be CUSTOM.
        public let authorizerId: String?
        /// The method's HTTP verb.
        public let httpMethod: String?
        /// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
        public let apiKeyRequired: Bool?
        /// Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.   Example:  Request  GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T213210Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response The successful response returns a 200 OK status code and a payload similar to the following: { "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true } ], "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:responses": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "0cjtch", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestTemplates": { "application/json": "{\n \"a\": \"$input.params('operand1')\",\n \"b\": \"$input.params('operand2')\", \n \"op\": \"$input.params('operator')\" \n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:Calc/invocations", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.operator": "integration.response.body.op", "method.response.header.operand_2": "integration.response.body.b", "method.response.header.operand_1": "integration.response.body.a" }, "responseTemplates": { "application/json": "#set($res = $input.path('$'))\n{\n \"result\": \"$res.a, $res.b, $res.op => $res.c\",\n \"a\" : \"$res.a\",\n \"b\" : \"$res.b\",\n \"op\" : \"$res.op\",\n \"c\" : \"$res.c\"\n}" }, "selectionPattern": "", "statusCode": "200" } } }    AWS CLI 
        public let methodIntegration: Integration?
        /// The identifier of a RequestValidator for request validation.
        public let requestValidatorId: String?
        /// The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public let authorizationType: String?
        /// A list of authorization scopes configured on the method. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
        public let authorizationScopes: [String]?

        public init(apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: String? = nil, authorizerId: String? = nil, httpMethod: String? = nil, methodIntegration: Integration? = nil, methodResponses: [String: MethodResponse]? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: Bool]? = nil, requestValidatorId: String? = nil) {
            self.requestParameters = requestParameters
            self.requestModels = requestModels
            self.methodResponses = methodResponses
            self.operationName = operationName
            self.authorizerId = authorizerId
            self.httpMethod = httpMethod
            self.apiKeyRequired = apiKeyRequired
            self.methodIntegration = methodIntegration
            self.requestValidatorId = requestValidatorId
            self.authorizationType = authorizationType
            self.authorizationScopes = authorizationScopes
        }

        private enum CodingKeys: String, CodingKey {
            case requestParameters = "requestParameters"
            case requestModels = "requestModels"
            case methodResponses = "methodResponses"
            case operationName = "operationName"
            case authorizerId = "authorizerId"
            case httpMethod = "httpMethod"
            case apiKeyRequired = "apiKeyRequired"
            case methodIntegration = "methodIntegration"
            case requestValidatorId = "requestValidatorId"
            case authorizationType = "authorizationType"
            case authorizationScopes = "authorizationScopes"
        }
    }

    public struct DomainNames: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [DomainName]?

        public init(items: [DomainName]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct DeleteRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(restApiId: String) {
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
        }
    }

    public struct ApiKeyIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ids", required: false, type: .list), 
            AWSShapeMember(label: "warnings", required: false, type: .list)
        ]
        /// A list of all the ApiKey identifiers.
        public let ids: [String]?
        /// A list of warning messages.
        public let warnings: [String]?

        public init(ids: [String]? = nil, warnings: [String]? = nil) {
            self.ids = ids
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
            case warnings = "warnings"
        }
    }

    public struct GetRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestValidatorId", location: .uri(locationName: "requestvalidator_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the RequestValidator to be retrieved.
        public let requestValidatorId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(requestValidatorId: String, restApiId: String) {
            self.requestValidatorId = requestValidatorId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case requestValidatorId = "requestvalidator_id"
            case restApiId = "restapi_id"
        }
    }

    public struct GetVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcLinkId", location: .uri(locationName: "vpclink_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let vpcLinkId: String

        public init(vpcLinkId: String) {
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcLinkId = "vpclink_id"
        }
    }

    public enum ApiKeySourceType: String, CustomStringConvertible, Codable {
        case header = "HEADER"
        case authorizer = "AUTHORIZER"
        public var description: String { return self.rawValue }
    }

    public struct PutGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map)
        ]
        /// The HTTP status code of the GatewayResponse.
        public let statusCode: String?
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType
        /// Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseParameters: [String: String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseTemplates: [String: String]?

        public init(responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, responseType: GatewayResponseType, restApiId: String, statusCode: String? = nil) {
            self.statusCode = statusCode
            self.responseType = responseType
            self.responseParameters = responseParameters
            self.restApiId = restApiId
            self.responseTemplates = responseTemplates
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
            case responseType = "response_type"
            case responseParameters = "responseParameters"
            case restApiId = "restapi_id"
            case responseTemplates = "responseTemplates"
        }
    }

    public struct GetBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "basePath", location: .uri(locationName: "base_path"), required: true, type: .string), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify any base path name after the domain name.
        public let basePath: String
        /// [Required] The domain name of the BasePathMapping resource to be described.
        public let domainName: String

        public init(basePath: String, domainName: String) {
            self.basePath = basePath
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case basePath = "base_path"
            case domainName = "domain_name"
        }
    }

    public enum PutMode: String, CustomStringConvertible, Codable {
        case merge = "merge"
        case overwrite = "overwrite"
        public var description: String { return self.rawValue }
    }

    public struct DocumentationParts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [DocumentationPart]?

        public init(items: [DocumentationPart]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct PutMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "responseModels", required: false, type: .map), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in integration.response.header.{name}, a static value enclosed within a pair of single quotes (e.g., 'application/json'), or a JSON expression from the back-end response payload in the form of integration.response.body.{JSON-expression}, where JSON-expression is a valid JSON expression without the $ prefix.)
        public let responseParameters: [String: Bool]?
        /// Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
        public let responseModels: [String: String]?
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The method response's status code.
        public let statusCode: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(httpMethod: String, resourceId: String, responseModels: [String: String]? = nil, responseParameters: [String: Bool]? = nil, restApiId: String, statusCode: String) {
            self.resourceId = resourceId
            self.responseParameters = responseParameters
            self.responseModels = responseModels
            self.httpMethod = httpMethod
            self.statusCode = statusCode
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case responseParameters = "responseParameters"
            case responseModels = "responseModels"
            case httpMethod = "http_method"
            case statusCode = "status_code"
            case restApiId = "restapi_id"
        }
    }

    public struct UpdateRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public enum Op: String, CustomStringConvertible, Codable {
        case add = "add"
        case remove = "remove"
        case replace = "replace"
        case move = "move"
        case copy = "copy"
        case test = "test"
        public var description: String { return self.rawValue }
    }

    public struct UpdateClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientCertificateId", location: .uri(locationName: "clientcertificate_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The identifier of the ClientCertificate resource to be updated.
        public let clientCertificateId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(clientCertificateId: String, patchOperations: [PatchOperation]? = nil) {
            self.clientCertificateId = clientCertificateId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case clientCertificateId = "clientcertificate_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct Integration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestTemplates", required: false, type: .map), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "httpMethod", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "timeoutInMillis", required: false, type: .integer), 
            AWSShapeMember(label: "passthroughBehavior", required: false, type: .string), 
            AWSShapeMember(label: "cacheKeyParameters", required: false, type: .list), 
            AWSShapeMember(label: "integrationResponses", required: false, type: .map), 
            AWSShapeMember(label: "credentials", required: false, type: .string), 
            AWSShapeMember(label: "uri", required: false, type: .string), 
            AWSShapeMember(label: "connectionType", required: false, type: .enum), 
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "cacheNamespace", required: false, type: .string)
        ]
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        public let requestTemplates: [String: String]?
        /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
        public let requestParameters: [String: String]?
        /// Specifies the integration's HTTP method type.
        public let httpMethod: String?
        /// Specifies an API method integration type. The valid value is one of the following:  AWS: for integrating the API method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. AWS_PROXY: for integrating the API method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as the Lambda proxy integration. HTTP: for integrating the API method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration. HTTP_PROXY: for integrating the API method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as the HTTP proxy integration. MOCK: for integrating the API method request with API Gateway as a "loop-back" endpoint without invoking any backend.  For the HTTP and HTTP proxy integrations, each integration can specify a protocol (http/https), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a connectionType of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
        public let `type`: IntegrationType?
        /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a request payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a request payload from a binary blob to a Base64-encoded string.  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
        public let contentHandling: ContentHandlingStrategy?
        /// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
        public let timeoutInMillis: Int32?
        ///   Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in requestTemplates. The valid value is one of the following:    WHEN_NO_MATCH: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request.   WHEN_NO_TEMPLATES: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response.   NEVER: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.   
        public let passthroughBehavior: String?
        /// Specifies the integration's cache key parameters.
        public let cacheKeyParameters: [String]?
        /// Specifies the integration's responses.   Example: Get integration responses of a method Request  GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160607T191449Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160607/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}  Response The successful response returns 200 OK status and a payload as follows: { "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" }    Creating an API 
        public let integrationResponses: [String: IntegrationResponse]?
        /// Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*. To use resource-based permissions on supported AWS services, specify null.
        public let credentials: String?
        /// Specifies Uniform Resource Identifier (URI) of the integration endpoint.   For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.    For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key} 
        public let uri: String?
        /// The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
        public let connectionType: ConnectionType?
        /// The (id) of the VpcLink used for the integration when connectionType=VPC_LINK and undefined, otherwise.
        public let connectionId: String?
        /// Specifies the integration's cache namespace.
        public let cacheNamespace: String?

        public init(cacheKeyParameters: [String]? = nil, cacheNamespace: String? = nil, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandling: ContentHandlingStrategy? = nil, credentials: String? = nil, httpMethod: String? = nil, integrationResponses: [String: IntegrationResponse]? = nil, passthroughBehavior: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, timeoutInMillis: Int32? = nil, type: IntegrationType? = nil, uri: String? = nil) {
            self.requestTemplates = requestTemplates
            self.requestParameters = requestParameters
            self.httpMethod = httpMethod
            self.`type` = `type`
            self.contentHandling = contentHandling
            self.timeoutInMillis = timeoutInMillis
            self.passthroughBehavior = passthroughBehavior
            self.cacheKeyParameters = cacheKeyParameters
            self.integrationResponses = integrationResponses
            self.credentials = credentials
            self.uri = uri
            self.connectionType = connectionType
            self.connectionId = connectionId
            self.cacheNamespace = cacheNamespace
        }

        private enum CodingKeys: String, CodingKey {
            case requestTemplates = "requestTemplates"
            case requestParameters = "requestParameters"
            case httpMethod = "httpMethod"
            case `type` = "type"
            case contentHandling = "contentHandling"
            case timeoutInMillis = "timeoutInMillis"
            case passthroughBehavior = "passthroughBehavior"
            case cacheKeyParameters = "cacheKeyParameters"
            case integrationResponses = "integrationResponses"
            case credentials = "credentials"
            case uri = "uri"
            case connectionType = "connectionType"
            case connectionId = "connectionId"
            case cacheNamespace = "cacheNamespace"
        }
    }

    public struct GetClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientCertificateId", location: .uri(locationName: "clientcertificate_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the ClientCertificate resource to be described.
        public let clientCertificateId: String

        public init(clientCertificateId: String) {
            self.clientCertificateId = clientCertificateId
        }

        private enum CodingKeys: String, CodingKey {
            case clientCertificateId = "clientcertificate_id"
        }
    }

    public struct GetUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// [Required] The identifier of the UsagePlan resource to be retrieved.
        public let usagePlanId: String

        public init(usagePlanId: String) {
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
        }
    }

    public struct GetModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string), 
            AWSShapeMember(label: "flatten", location: .querystring(locationName: "flatten"), required: false, type: .boolean)
        ]
        /// [Required] The RestApi identifier under which the Model exists.
        public let restApiId: String
        /// [Required] The name of the model as an identifier.
        public let modelName: String
        /// A query parameter of a Boolean value to resolve (true) all external model references and returns a flattened model schema or not (false) The default is false.
        public let flatten: Bool?

        public init(flatten: Bool? = nil, modelName: String, restApiId: String) {
            self.restApiId = restApiId
            self.modelName = modelName
            self.flatten = flatten
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case modelName = "model_name"
            case flatten = "flatten"
        }
    }

    public struct TestInvokeAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pathWithQueryString", required: false, type: .string), 
            AWSShapeMember(label: "body", required: false, type: .string), 
            AWSShapeMember(label: "headers", required: false, type: .map), 
            AWSShapeMember(label: "stageVariables", required: false, type: .map), 
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string), 
            AWSShapeMember(label: "additionalContext", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "multiValueHeaders", required: false, type: .map)
        ]
        /// [Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        public let pathWithQueryString: String?
        /// [Optional] The simulated request body of an incoming invocation request.
        public let body: String?
        /// [Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
        public let headers: [String: String]?
        /// A key-value map of stage variables to simulate an invocation on a deployed Stage.
        public let stageVariables: [String: String]?
        /// [Required] Specifies a test invoke authorizer request's Authorizer ID.
        public let authorizerId: String
        /// [Optional] A key-value map of additional context variables.
        public let additionalContext: [String: String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Optional] The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.
        public let multiValueHeaders: [String: [String]]?

        public init(additionalContext: [String: String]? = nil, authorizerId: String, body: String? = nil, headers: [String: String]? = nil, multiValueHeaders: [String: [String]]? = nil, pathWithQueryString: String? = nil, restApiId: String, stageVariables: [String: String]? = nil) {
            self.pathWithQueryString = pathWithQueryString
            self.body = body
            self.headers = headers
            self.stageVariables = stageVariables
            self.authorizerId = authorizerId
            self.additionalContext = additionalContext
            self.restApiId = restApiId
            self.multiValueHeaders = multiValueHeaders
        }

        private enum CodingKeys: String, CodingKey {
            case pathWithQueryString = "pathWithQueryString"
            case body = "body"
            case headers = "headers"
            case stageVariables = "stageVariables"
            case authorizerId = "authorizer_id"
            case additionalContext = "additionalContext"
            case restApiId = "restapi_id"
            case multiValueHeaders = "multiValueHeaders"
        }
    }

    public struct GatewayResponses: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// Returns the entire collection, because of no pagination support.
        public let items: [GatewayResponse]?
        public let position: String?

        public init(items: [GatewayResponse]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct GetIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a get integration response request's resource identifier.
        public let resourceId: String
        /// [Required] Specifies a get integration response request's HTTP method.
        public let httpMethod: String
        /// [Required] Specifies a get integration response request's status code.
        public let statusCode: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(httpMethod: String, resourceId: String, restApiId: String, statusCode: String) {
            self.resourceId = resourceId
            self.httpMethod = httpMethod
            self.statusCode = statusCode
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case httpMethod = "http_method"
            case statusCode = "status_code"
            case restApiId = "restapi_id"
        }
    }

    public struct StageKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", required: false, type: .string), 
            AWSShapeMember(label: "stageName", required: false, type: .string)
        ]
        /// The string identifier of the associated RestApi.
        public let restApiId: String?
        /// The stage name associated with the stage key.
        public let stageName: String?

        public init(restApiId: String? = nil, stageName: String? = nil) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restApiId"
            case stageName = "stageName"
        }
    }

    public struct UpdateBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "basePath", location: .uri(locationName: "base_path"), required: true, type: .string)
        ]
        /// [Required] The domain name of the BasePathMapping resource to change.
        public let domainName: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The base path of the BasePathMapping resource to change.
        public let basePath: String

        public init(basePath: String, domainName: String, patchOperations: [PatchOperation]? = nil) {
            self.domainName = domainName
            self.patchOperations = patchOperations
            self.basePath = basePath
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
            case patchOperations = "patchOperations"
            case basePath = "base_path"
        }
    }

    public struct GetIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a get integration request's HTTP method.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies a get integration request's resource identifier
        public let resourceId: String

        public init(httpMethod: String, resourceId: String, restApiId: String) {
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct CreateUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "throttle", required: false, type: .structure), 
            AWSShapeMember(label: "apiStages", required: false, type: .list), 
            AWSShapeMember(label: "quota", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The throttling limits of the usage plan.
        public let throttle: ThrottleSettings?
        /// The associated API stages of the usage plan.
        public let apiStages: [ApiStage]?
        /// The quota of the usage plan.
        public let quota: QuotaSettings?
        /// [Required] The name of the usage plan.
        public let name: String
        /// The description of the usage plan.
        public let description: String?

        public init(apiStages: [ApiStage]? = nil, description: String? = nil, name: String, quota: QuotaSettings? = nil, throttle: ThrottleSettings? = nil) {
            self.throttle = throttle
            self.apiStages = apiStages
            self.quota = quota
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case throttle = "throttle"
            case apiStages = "apiStages"
            case quota = "quota"
            case name = "name"
            case description = "description"
        }
    }

    public struct ExportResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "body", required: false, type: .blob)
        ]
        /// The content-disposition header value in the HTTP response.
        public let contentDisposition: String?
        /// The content-type header value in the HTTP response. This will correspond to a valid 'accept' type in the request.
        public let contentType: String?
        /// The binary blob response to GetExport, which contains the export.
        public let body: Data?

        public init(body: Data? = nil, contentDisposition: String? = nil, contentType: String? = nil) {
            self.contentDisposition = contentDisposition
            self.contentType = contentType
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case contentDisposition = "Content-Disposition"
            case contentType = "Content-Type"
            case body = "body"
        }
    }

    public struct RequestValidators: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [RequestValidator]?
        public let position: String?

        public init(items: [RequestValidator]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct DeleteMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String

        public init(httpMethod: String, resourceId: String, restApiId: String) {
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct Stages: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        /// The current page of elements from this collection.
        public let item: [Stage]?

        public init(item: [Stage]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportApiKeysRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "format", location: .querystring(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean)
        ]
        /// A query parameter to specify the input format to imported API keys. Currently, only the csv format is supported.
        public let format: ApiKeysFormat
        /// The payload of the POST request to import API keys. For the payload format, see API Key File Format.
        public let body: Data
        /// A query parameter to indicate whether to rollback ApiKey importation (true) or not (false) when error is encountered.
        public let failOnWarnings: Bool?

        public init(body: Data, failOnWarnings: Bool? = nil, format: ApiKeysFormat) {
            self.format = format
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case format = "format"
            case body = "body"
            case failOnWarnings = "failonwarnings"
        }
    }

    public struct TestInvokeMethodResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .integer), 
            AWSShapeMember(label: "latency", required: false, type: .long), 
            AWSShapeMember(label: "log", required: false, type: .string), 
            AWSShapeMember(label: "headers", required: false, type: .map), 
            AWSShapeMember(label: "multiValueHeaders", required: false, type: .map), 
            AWSShapeMember(label: "body", required: false, type: .string)
        ]
        /// The HTTP status code.
        public let status: Int32?
        /// The execution latency of the test invoke request.
        public let latency: Int64?
        /// The API Gateway execution log for the test invoke request.
        public let log: String?
        /// The headers of the HTTP response.
        public let headers: [String: String]?
        /// The headers of the HTTP response as a map from string to list of values.
        public let multiValueHeaders: [String: [String]]?
        /// The body of the HTTP response.
        public let body: String?

        public init(body: String? = nil, headers: [String: String]? = nil, latency: Int64? = nil, log: String? = nil, multiValueHeaders: [String: [String]]? = nil, status: Int32? = nil) {
            self.status = status
            self.latency = latency
            self.log = log
            self.headers = headers
            self.multiValueHeaders = multiValueHeaders
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case latency = "latency"
            case log = "log"
            case headers = "headers"
            case multiValueHeaders = "multiValueHeaders"
            case body = "body"
        }
    }

    public struct DeleteRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestValidatorId", location: .uri(locationName: "requestvalidator_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the RequestValidator to be deleted.
        public let requestValidatorId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(requestValidatorId: String, restApiId: String) {
            self.requestValidatorId = requestValidatorId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case requestValidatorId = "requestvalidator_id"
            case restApiId = "restapi_id"
        }
    }

    public struct GetAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Authorizer resource.
        public let authorizerId: String

        public init(authorizerId: String, restApiId: String) {
            self.restApiId = restApiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case authorizerId = "authorizer_id"
        }
    }

    public struct GetExportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accepts", location: .header(locationName: "Accept"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "exportType", location: .uri(locationName: "export_type"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "parameters", required: false, type: .map)
        ]
        /// The content-type of the export, for example application/json. Currently application/json and application/yaml are supported for exportType ofoas30 and swagger. This should be specified in the Accept header for direct API requests.
        public let accepts: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.
        public let exportType: String
        /// [Required] The name of the Stage that will be exported.
        public let stageName: String
        /// A key-value map of query string parameters that specify properties of the export, depending on the requested exportType. For exportType oas30 and swagger, any combination of the following parameters are supported: extensions='integrations' or extensions='apigateway' will export the API with x-amazon-apigateway-integration extensions. extensions='authorizers' will export the API with x-amazon-apigateway-authorizer extensions. postman will export the API with Postman extensions, allowing for import to the Postman tool
        public let parameters: [String: String]?

        public init(accepts: String? = nil, exportType: String, parameters: [String: String]? = nil, restApiId: String, stageName: String) {
            self.accepts = accepts
            self.restApiId = restApiId
            self.exportType = exportType
            self.stageName = stageName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case accepts = "Accept"
            case restApiId = "restapi_id"
            case exportType = "export_type"
            case stageName = "stage_name"
            case parameters = "parameters"
        }
    }

    public struct GetDomainNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(limit: Int32? = nil, position: String? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct GatewayResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultResponse", required: false, type: .boolean), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "responseType", required: false, type: .enum), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "statusCode", required: false, type: .string)
        ]
        /// A Boolean flag to indicate whether this GatewayResponse is the default gateway response (true) or not (false). A default gateway response is one generated by API Gateway without any customization by an API developer. 
        public let defaultResponse: Bool?
        /// Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseParameters: [String: String]?
        /// The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType?
        /// Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseTemplates: [String: String]?
        /// The HTTP status code for this GatewayResponse.
        public let statusCode: String?

        public init(defaultResponse: Bool? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, responseType: GatewayResponseType? = nil, statusCode: String? = nil) {
            self.defaultResponse = defaultResponse
            self.responseParameters = responseParameters
            self.responseType = responseType
            self.responseTemplates = responseTemplates
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case defaultResponse = "defaultResponse"
            case responseParameters = "responseParameters"
            case responseType = "responseType"
            case responseTemplates = "responseTemplates"
            case statusCode = "statusCode"
        }
    }

    public struct CreateBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "basePath", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", required: true, type: .string), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "stage", required: false, type: .string)
        ]
        /// The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify a base path name after the domain name.
        public let basePath: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The domain name of the BasePathMapping resource to create.
        public let domainName: String
        /// The name of the API's stage that you want to use for this mapping. Leave this blank if you do not want callers to explicitly specify the stage name after any base path name.
        public let stage: String?

        public init(basePath: String? = nil, domainName: String, restApiId: String, stage: String? = nil) {
            self.basePath = basePath
            self.restApiId = restApiId
            self.domainName = domainName
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case basePath = "basePath"
            case restApiId = "restApiId"
            case domainName = "domain_name"
            case stage = "stage"
        }
    }

    public struct UpdateDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "documentationPartId", location: .uri(locationName: "part_id"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the to-be-updated documentation part.
        public let documentationPartId: String

        public init(documentationPartId: String, patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.patchOperations = patchOperations
            self.restApiId = restApiId
            self.documentationPartId = documentationPartId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case restApiId = "restapi_id"
            case documentationPartId = "part_id"
        }
    }

    public struct IntegrationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "selectionPattern", required: false, type: .string), 
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map)
        ]
        /// Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
        public let responseTemplates: [String: String]?
        /// Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the .+ regex to match error response. However, make sure that the error response does not contain any newline (\n) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.
        public let selectionPattern: String?
        /// Specifies the status code that is used to map the integration response to an existing MethodResponse.
        public let statusCode: String?
        /// Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
        public let contentHandling: ContentHandlingStrategy?
        /// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.
        public let responseParameters: [String: String]?

        public init(contentHandling: ContentHandlingStrategy? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, selectionPattern: String? = nil, statusCode: String? = nil) {
            self.responseTemplates = responseTemplates
            self.selectionPattern = selectionPattern
            self.statusCode = statusCode
            self.contentHandling = contentHandling
            self.responseParameters = responseParameters
        }

        private enum CodingKeys: String, CodingKey {
            case responseTemplates = "responseTemplates"
            case selectionPattern = "selectionPattern"
            case statusCode = "statusCode"
            case contentHandling = "contentHandling"
            case responseParameters = "responseParameters"
        }
    }

    public struct UpdateAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(patchOperations: [PatchOperation]? = nil) {
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
        }
    }

    public struct GetGatewayResponsesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The GatewayResponses collection does not support pagination and the limit does not apply here.
        public let limit: Int32?

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case restApiId = "restapi_id"
            case limit = "limit"
        }
    }

    public struct GetSdkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sdkType", location: .uri(locationName: "sdk_type"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "parameters", required: false, type: .map)
        ]
        /// [Required] The language for the generated SDK. Currently java, javascript, android, objectivec (for iOS), swift (for iOS), and ruby are supported.
        public let sdkType: String
        /// [Required] The name of the Stage that the SDK will use.
        public let stageName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A string-to-string key-value map of query parameters sdkType-dependent properties of the SDK. For sdkType of objectivec or swift, a parameter named classPrefix is required. For sdkType of android, parameters named groupId, artifactId, artifactVersion, and invokerPackage are required. For sdkType of java, parameters named serviceName and javaPackageName are required. 
        public let parameters: [String: String]?

        public init(parameters: [String: String]? = nil, restApiId: String, sdkType: String, stageName: String) {
            self.sdkType = sdkType
            self.stageName = stageName
            self.restApiId = restApiId
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case sdkType = "sdk_type"
            case stageName = "stage_name"
            case restApiId = "restapi_id"
            case parameters = "parameters"
        }
    }

    public struct GetApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeValue", location: .querystring(locationName: "includeValue"), required: false, type: .boolean), 
            AWSShapeMember(label: "apiKey", location: .uri(locationName: "api_Key"), required: true, type: .string)
        ]
        /// A boolean flag to specify whether (true) or not (false) the result contains the key value.
        public let includeValue: Bool?
        /// [Required] The identifier of the ApiKey resource.
        public let apiKey: String

        public init(apiKey: String, includeValue: Bool? = nil) {
            self.includeValue = includeValue
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case includeValue = "includeValue"
            case apiKey = "api_Key"
        }
    }

    public struct Authorizer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerCredentials", required: false, type: .string), 
            AWSShapeMember(label: "identityValidationExpression", required: false, type: .string), 
            AWSShapeMember(label: "authorizerUri", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "authorizerResultTtlInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "authType", required: false, type: .string), 
            AWSShapeMember(label: "identitySource", required: false, type: .string), 
            AWSShapeMember(label: "providerARNs", required: false, type: .list)
        ]
        /// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        public let authorizerCredentials: String?
        /// A validation expression for the incoming identity token. For TOKEN authorizers, this value is a regular expression. API Gateway will match the aud field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the REQUEST authorizer.
        public let identityValidationExpression: String?
        /// Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN or REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form arn:aws:apigateway:{region}:lambda:path/{service_api}, where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
        public let authorizerUri: String?
        /// The identifier for the authorizer resource.
        public let id: String?
        /// The authorizer type. Valid values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, and COGNITO_USER_POOLS for using an Amazon Cognito user pool.
        public let `type`: AuthorizerType?
        /// [Required] The name of the authorizer.
        public let name: String?
        /// The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
        public let authorizerResultTtlInSeconds: Int32?
        /// Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        public let authType: String?
        /// The identity source for which authorization is requested. For a TOKEN or COGNITO_USER_POOLS authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is Auth, the header mapping expression is method.request.header.Auth.For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
        public let identitySource: String?
        /// A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}. For a TOKEN or REQUEST authorizer, this is not defined. 
        public let providerARNs: [String]?

        public init(authType: String? = nil, authorizerCredentials: String? = nil, authorizerResultTtlInSeconds: Int32? = nil, authorizerUri: String? = nil, id: String? = nil, identitySource: String? = nil, identityValidationExpression: String? = nil, name: String? = nil, providerARNs: [String]? = nil, type: AuthorizerType? = nil) {
            self.authorizerCredentials = authorizerCredentials
            self.identityValidationExpression = identityValidationExpression
            self.authorizerUri = authorizerUri
            self.id = id
            self.`type` = `type`
            self.name = name
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authType = authType
            self.identitySource = identitySource
            self.providerARNs = providerARNs
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentials = "authorizerCredentials"
            case identityValidationExpression = "identityValidationExpression"
            case authorizerUri = "authorizerUri"
            case id = "id"
            case `type` = "type"
            case name = "name"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authType = "authType"
            case identitySource = "identitySource"
            case providerARNs = "providerARNs"
        }
    }

    public struct Stage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "cacheClusterSize", required: false, type: .enum), 
            AWSShapeMember(label: "documentationVersion", required: false, type: .string), 
            AWSShapeMember(label: "methodSettings", required: false, type: .map), 
            AWSShapeMember(label: "canarySettings", required: false, type: .structure), 
            AWSShapeMember(label: "webAclArn", required: false, type: .string), 
            AWSShapeMember(label: "variables", required: false, type: .map), 
            AWSShapeMember(label: "clientCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterStatus", required: false, type: .enum), 
            AWSShapeMember(label: "stageName", required: false, type: .string), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "tracingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "accessLogSettings", required: false, type: .structure)
        ]
        /// The timestamp when the stage last updated.
        public let lastUpdatedDate: TimeStamp?
        /// The size of the cache cluster for the stage, if enabled.
        public let cacheClusterSize: CacheClusterSize?
        /// The version of the associated API documentation.
        public let documentationVersion: String?
        /// A map that defines the method settings for a Stage resource. Keys (designated as /{method_setting_key below) are method paths defined as {resource_path}/{http_method} for an individual method override, or /\*/\* for overriding all methods in the stage. 
        public let methodSettings: [String: MethodSetting]?
        /// Settings for the canary deployment in this stage.
        public let canarySettings: CanarySettings?
        /// The ARN of the WebAcl associated with the Stage.
        public let webAclArn: String?
        /// A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let variables: [String: String]?
        /// The identifier of a client certificate for an API stage.
        public let clientCertificateId: String?
        /// The status of the cache cluster for the stage, if enabled.
        public let cacheClusterStatus: CacheClusterStatus?
        /// The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway.
        public let stageName: String?
        /// The identifier of the Deployment that the stage points to.
        public let deploymentId: String?
        /// Specifies whether a cache cluster is enabled for the stage.
        public let cacheClusterEnabled: Bool?
        /// The timestamp when the stage was created.
        public let createdDate: TimeStamp?
        /// The collection of tags. Each tag element is associated with a given resource.
        public let tags: [String: String]?
        /// The stage's description.
        public let description: String?
        /// Specifies whether active tracing with X-ray is enabled for the Stage.
        public let tracingEnabled: Bool?
        /// Settings for logging access in this stage.
        public let accessLogSettings: AccessLogSettings?

        public init(accessLogSettings: AccessLogSettings? = nil, cacheClusterEnabled: Bool? = nil, cacheClusterSize: CacheClusterSize? = nil, cacheClusterStatus: CacheClusterStatus? = nil, canarySettings: CanarySettings? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, deploymentId: String? = nil, description: String? = nil, documentationVersion: String? = nil, lastUpdatedDate: TimeStamp? = nil, methodSettings: [String: MethodSetting]? = nil, stageName: String? = nil, tags: [String: String]? = nil, tracingEnabled: Bool? = nil, variables: [String: String]? = nil, webAclArn: String? = nil) {
            self.lastUpdatedDate = lastUpdatedDate
            self.cacheClusterSize = cacheClusterSize
            self.documentationVersion = documentationVersion
            self.methodSettings = methodSettings
            self.canarySettings = canarySettings
            self.webAclArn = webAclArn
            self.variables = variables
            self.clientCertificateId = clientCertificateId
            self.cacheClusterStatus = cacheClusterStatus
            self.stageName = stageName
            self.deploymentId = deploymentId
            self.cacheClusterEnabled = cacheClusterEnabled
            self.createdDate = createdDate
            self.tags = tags
            self.description = description
            self.tracingEnabled = tracingEnabled
            self.accessLogSettings = accessLogSettings
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedDate = "lastUpdatedDate"
            case cacheClusterSize = "cacheClusterSize"
            case documentationVersion = "documentationVersion"
            case methodSettings = "methodSettings"
            case canarySettings = "canarySettings"
            case webAclArn = "webAclArn"
            case variables = "variables"
            case clientCertificateId = "clientCertificateId"
            case cacheClusterStatus = "cacheClusterStatus"
            case stageName = "stageName"
            case deploymentId = "deploymentId"
            case cacheClusterEnabled = "cacheClusterEnabled"
            case createdDate = "createdDate"
            case tags = "tags"
            case description = "description"
            case tracingEnabled = "tracingEnabled"
            case accessLogSettings = "accessLogSettings"
        }
    }

    public struct DeleteBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "basePath", location: .uri(locationName: "base_path"), required: true, type: .string)
        ]
        /// [Required] The domain name of the BasePathMapping resource to delete.
        public let domainName: String
        /// [Required] The base path name of the BasePathMapping resource to delete.
        public let basePath: String

        public init(basePath: String, domainName: String) {
            self.domainName = domainName
            self.basePath = basePath
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
            case basePath = "base_path"
        }
    }

    public struct GetModelTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The name of the model for which to generate a template.
        public let modelName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(modelName: String, restApiId: String) {
            self.modelName = modelName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "model_name"
            case restApiId = "restapi_id"
        }
    }

    public struct TestInvokeAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "log", required: false, type: .string), 
            AWSShapeMember(label: "authorization", required: false, type: .map), 
            AWSShapeMember(label: "principalId", required: false, type: .string), 
            AWSShapeMember(label: "claims", required: false, type: .map), 
            AWSShapeMember(label: "policy", required: false, type: .string), 
            AWSShapeMember(label: "clientStatus", required: false, type: .integer), 
            AWSShapeMember(label: "latency", required: false, type: .long)
        ]
        /// The API Gateway execution log for the test authorizer request.
        public let log: String?
        public let authorization: [String: [String]]?
        /// The principal identity returned by the Authorizer
        public let principalId: String?
        /// The open identity claims, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.
        public let claims: [String: String]?
        /// The JSON policy document returned by the Authorizer
        public let policy: String?
        /// The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.
        public let clientStatus: Int32?
        /// The execution latency of the test authorizer request.
        public let latency: Int64?

        public init(authorization: [String: [String]]? = nil, claims: [String: String]? = nil, clientStatus: Int32? = nil, latency: Int64? = nil, log: String? = nil, policy: String? = nil, principalId: String? = nil) {
            self.log = log
            self.authorization = authorization
            self.principalId = principalId
            self.claims = claims
            self.policy = policy
            self.clientStatus = clientStatus
            self.latency = latency
        }

        private enum CodingKeys: String, CodingKey {
            case log = "log"
            case authorization = "authorization"
            case principalId = "principalId"
            case claims = "claims"
            case policy = "policy"
            case clientStatus = "clientStatus"
            case latency = "latency"
        }
    }

    public struct SdkType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationProperties", required: false, type: .list), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "friendlyName", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// A list of configuration properties of an SdkType.
        public let configurationProperties: [SdkConfigurationProperty]?
        /// The identifier of an SdkType instance.
        public let id: String?
        /// The user-friendly name of an SdkType instance.
        public let friendlyName: String?
        /// The description of an SdkType.
        public let description: String?

        public init(configurationProperties: [SdkConfigurationProperty]? = nil, description: String? = nil, friendlyName: String? = nil, id: String? = nil) {
            self.configurationProperties = configurationProperties
            self.id = id
            self.friendlyName = friendlyName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case configurationProperties = "configurationProperties"
            case id = "id"
            case friendlyName = "friendlyName"
            case description = "description"
        }
    }

    public struct Models: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [Model]?
        public let position: String?

        public init(items: [Model]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct GetVpcLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(limit: Int32? = nil, position: String? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct FlushStageCacheRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the stage to flush its cache.
        public let stageName: String

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case stageName = "stage_name"
        }
    }

    public struct DeleteIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a delete integration response request's status code.
        public let statusCode: String
        /// [Required] Specifies a delete integration response request's HTTP method.
        public let httpMethod: String
        /// [Required] Specifies a delete integration response request's resource identifier.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(httpMethod: String, resourceId: String, restApiId: String, statusCode: String) {
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.resourceId = resourceId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
        }
    }

    public struct PatchOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "from", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "op", required: false, type: .enum), 
            AWSShapeMember(label: "path", required: false, type: .string)
        ]
        /// The copy update operation's source as identified by a JSON-Pointer value referencing the location within the targeted resource to copy the value from. For example, to promote a canary deployment, you copy the canary deployment ID to the affiliated deployment ID by calling a PATCH request on a Stage resource with "op":"copy", "from":"/canarySettings/deploymentId" and "path":"/deploymentId".
        public let from: String?
        /// The new target value of the update operation. It is applicable for the add or replace operation. When using AWS CLI to update a property of a JSON value, enclose the JSON object with a pair of single quotes in a Linux shell, e.g., '{"a": ...}'. In a Windows shell, see Using JSON for Parameters.
        public let value: String?
        ///  An update operation to be performed with this PATCH request. The valid value can be add, remove, replace or copy. Not all valid operations are supported for a given resource. Support of the operations depends on specific operational contexts. Attempts to apply an unsupported operation on a resource will return an error message.
        public let op: Op?
        /// The op operation's target, as identified by a JSON Pointer value that references a location within the targeted resource. For example, if the target resource has an updateable property of {"name":"value"}, the path for this property is /name. If the name property value is a JSON object (e.g., {"name": {"child/name": "child-value"}}), the path for the child/name property will be /name/child~1name. Any slash ("/") character appearing in path names must be escaped with "~1", as shown in the example above. Each op operation can have only one path associated with it.
        public let path: String?

        public init(from: String? = nil, op: Op? = nil, path: String? = nil, value: String? = nil) {
            self.from = from
            self.value = value
            self.op = op
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case from = "from"
            case value = "value"
            case op = "op"
            case path = "path"
        }
    }

    public struct GetStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The name of the Stage resource to get information about.
        public let stageName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(restApiId: String, stageName: String) {
            self.stageName = stageName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case stageName = "stage_name"
            case restApiId = "restapi_id"
        }
    }

    public struct GetDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "embed", location: .querystring(locationName: "embed"), required: false, type: .list), 
            AWSShapeMember(label: "deploymentId", location: .uri(locationName: "deployment_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A query parameter to retrieve the specified embedded resources of the returned Deployment resource in the response. In a REST API call, this embed parameter value is a list of comma-separated strings, as in GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the "apisummary" string. For example, GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary.
        public let embed: [String]?
        /// [Required] The identifier of the Deployment resource to get information about.
        public let deploymentId: String

        public init(deploymentId: String, embed: [String]? = nil, restApiId: String) {
            self.restApiId = restApiId
            self.embed = embed
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case embed = "embed"
            case deploymentId = "deployment_id"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "apiSummary", required: false, type: .map), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp)
        ]
        /// The identifier for the deployment resource.
        public let id: String?
        /// A summary of the RestApi at the date and time that the deployment resource was created.
        public let apiSummary: [String: [String: MethodSnapshot]]?
        /// The description for the deployment resource.
        public let description: String?
        /// The date and time that the deployment resource was created.
        public let createdDate: TimeStamp?

        public init(apiSummary: [String: [String: MethodSnapshot]]? = nil, createdDate: TimeStamp? = nil, description: String? = nil, id: String? = nil) {
            self.id = id
            self.apiSummary = apiSummary
            self.description = description
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case apiSummary = "apiSummary"
            case description = "description"
            case createdDate = "createdDate"
        }
    }

    public struct FlushStageAuthorizersCacheRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The name of the stage to flush.
        public let stageName: String
        /// The string identifier of the associated RestApi.
        public let restApiId: String

        public init(restApiId: String, stageName: String) {
            self.stageName = stageName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case stageName = "stage_name"
            case restApiId = "restapi_id"
        }
    }

    public struct GetDocumentationVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case restApiId = "restapi_id"
            case limit = "limit"
        }
    }

    public struct UpdateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The name of the DomainName resource to be changed.
        public let domainName: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(domainName: String, patchOperations: [PatchOperation]? = nil) {
            self.domainName = domainName
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
            case patchOperations = "patchOperations"
        }
    }

    public struct GetRequestValidatorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.limit = limit
            self.restApiId = restApiId
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case restApiId = "restapi_id"
            case position = "position"
        }
    }

    public struct GenerateClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The description of the ClientCertificate.
        public let description: String?

        public init(description: String? = nil) {
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
        }
    }

    public struct DeleteModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the model to delete.
        public let modelName: String

        public init(modelName: String, restApiId: String) {
            self.restApiId = restApiId
            self.modelName = modelName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case modelName = "model_name"
        }
    }

    public struct MethodSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizationType", required: false, type: .string), 
            AWSShapeMember(label: "apiKeyRequired", required: false, type: .boolean)
        ]
        /// The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public let authorizationType: String?
        /// Specifies whether the method requires a valid ApiKey.
        public let apiKeyRequired: Bool?

        public init(apiKeyRequired: Bool? = nil, authorizationType: String? = nil) {
            self.authorizationType = authorizationType
            self.apiKeyRequired = apiKeyRequired
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationType = "authorizationType"
            case apiKeyRequired = "apiKeyRequired"
        }
    }

    public struct DocumentationPart: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "properties", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure)
        ]
        /// A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of x-amazon-apigateway-documentation.
        public let properties: String?
        /// The DocumentationPart identifier, generated by API Gateway when the DocumentationPart is created.
        public let id: String?
        /// The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.
        public let location: DocumentationPartLocation?

        public init(id: String? = nil, location: DocumentationPartLocation? = nil, properties: String? = nil) {
            self.properties = properties
            self.id = id
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case properties = "properties"
            case id = "id"
            case location = "location"
        }
    }

    public struct UpdateApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "apiKey", location: .uri(locationName: "api_Key"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The identifier of the ApiKey resource to be updated.
        public let apiKey: String

        public init(apiKey: String, patchOperations: [PatchOperation]? = nil) {
            self.patchOperations = patchOperations
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case apiKey = "api_Key"
        }
    }

    public enum ContentHandlingStrategy: String, CustomStringConvertible, Codable {
        case convertToBinary = "CONVERT_TO_BINARY"
        case convertToText = "CONVERT_TO_TEXT"
        public var description: String { return self.rawValue }
    }

    public enum AuthorizerType: String, CustomStringConvertible, Codable {
        case token = "TOKEN"
        case request = "REQUEST"
        case cognitoUserPools = "COGNITO_USER_POOLS"
        public var description: String { return self.rawValue }
    }

    public struct CreateApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageKeys", required: false, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "customerId", required: false, type: .string), 
            AWSShapeMember(label: "generateDistinctId", required: false, type: .boolean), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
        public let stageKeys: [StageKey]?
        /// The description of the ApiKey.
        public let description: String?
        /// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        public let customerId: String?
        /// Specifies whether (true) or not (false) the key identifier is distinct from the created API key value.
        public let generateDistinctId: Bool?
        /// Specifies whether the ApiKey can be used by callers.
        public let enabled: Bool?
        /// Specifies a value of the API key.
        public let value: String?
        /// The name of the ApiKey.
        public let name: String?

        public init(customerId: String? = nil, description: String? = nil, enabled: Bool? = nil, generateDistinctId: Bool? = nil, name: String? = nil, stageKeys: [StageKey]? = nil, value: String? = nil) {
            self.stageKeys = stageKeys
            self.description = description
            self.customerId = customerId
            self.generateDistinctId = generateDistinctId
            self.enabled = enabled
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case stageKeys = "stageKeys"
            case description = "description"
            case customerId = "customerId"
            case generateDistinctId = "generateDistinctId"
            case enabled = "enabled"
            case value = "value"
            case name = "name"
        }
    }

    public enum ConnectionType: String, CustomStringConvertible, Codable {
        case internet = "INTERNET"
        case vpcLink = "VPC_LINK"
        public var description: String { return self.rawValue }
    }

    public struct UsagePlanKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [UsagePlanKey]?

        public init(items: [UsagePlanKey]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct UpdateUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The Id of the to-be-updated usage plan.
        public let usagePlanId: String

        public init(patchOperations: [PatchOperation]? = nil, usagePlanId: String) {
            self.patchOperations = patchOperations
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case usagePlanId = "usageplanId"
        }
    }

    public struct Resources: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [Resource]?

        public init(items: [Resource]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct GetDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.restApiId = restApiId
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case limit = "limit"
            case position = "position"
        }
    }

    public struct PutIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "credentials", required: false, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "integrationHttpMethod", location: .body(locationName: "httpMethod"), required: false, type: .string), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "passthroughBehavior", required: false, type: .string), 
            AWSShapeMember(label: "cacheKeyParameters", required: false, type: .list), 
            AWSShapeMember(label: "requestTemplates", required: false, type: .map), 
            AWSShapeMember(label: "cacheNamespace", required: false, type: .string), 
            AWSShapeMember(label: "uri", required: false, type: .string), 
            AWSShapeMember(label: "timeoutInMillis", required: false, type: .integer), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "connectionType", required: false, type: .enum), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map)
        ]
        /// The (id) of the VpcLink used for the integration when connectionType=VPC_LINK and undefined, otherwise.
        public let connectionId: String?
        /// [Required] Specifies a put integration request's HTTP method.
        public let httpMethod: String
        /// Specifies whether credentials are required for a put integration.
        public let credentials: String?
        /// [Required] Specifies a put integration input's type.
        public let `type`: IntegrationType
        /// Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.
        public let integrationHttpMethod: String?
        /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a request payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a request payload from a binary blob to a Base64-encoded string.  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
        public let contentHandling: ContentHandlingStrategy?
        /// Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.   WHEN_NO_MATCH passes the request body for unmapped content types through to the integration back end without transformation. NEVER rejects unmapped content types with an HTTP 415 'Unsupported Media Type' response. WHEN_NO_TEMPLATES allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response. 
        public let passthroughBehavior: String?
        /// Specifies a put integration input's cache key parameters.
        public let cacheKeyParameters: [String]?
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        public let requestTemplates: [String: String]?
        /// Specifies a put integration input's cache namespace.
        public let cacheNamespace: String?
        /// Specifies Uniform Resource Identifier (URI) of the integration endpoint.   For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.    For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key} 
        public let uri: String?
        /// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
        public let timeoutInMillis: Int32?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies a put integration request's resource ID.
        public let resourceId: String
        /// The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
        public let connectionType: ConnectionType?
        /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
        public let requestParameters: [String: String]?

        public init(cacheKeyParameters: [String]? = nil, cacheNamespace: String? = nil, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandling: ContentHandlingStrategy? = nil, credentials: String? = nil, httpMethod: String, integrationHttpMethod: String? = nil, passthroughBehavior: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, resourceId: String, restApiId: String, timeoutInMillis: Int32? = nil, type: IntegrationType, uri: String? = nil) {
            self.connectionId = connectionId
            self.httpMethod = httpMethod
            self.credentials = credentials
            self.`type` = `type`
            self.integrationHttpMethod = integrationHttpMethod
            self.contentHandling = contentHandling
            self.passthroughBehavior = passthroughBehavior
            self.cacheKeyParameters = cacheKeyParameters
            self.requestTemplates = requestTemplates
            self.cacheNamespace = cacheNamespace
            self.uri = uri
            self.timeoutInMillis = timeoutInMillis
            self.restApiId = restApiId
            self.resourceId = resourceId
            self.connectionType = connectionType
            self.requestParameters = requestParameters
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case httpMethod = "http_method"
            case credentials = "credentials"
            case `type` = "type"
            case integrationHttpMethod = "httpMethod"
            case contentHandling = "contentHandling"
            case passthroughBehavior = "passthroughBehavior"
            case cacheKeyParameters = "cacheKeyParameters"
            case requestTemplates = "requestTemplates"
            case cacheNamespace = "cacheNamespace"
            case uri = "uri"
            case timeoutInMillis = "timeoutInMillis"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
            case connectionType = "connectionType"
            case requestParameters = "requestParameters"
        }
    }

    public struct ClientCertificates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [ClientCertificate]?

        public init(items: [ClientCertificate]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct Model: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentType", required: false, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The content-type for the model.
        public let contentType: String?
        /// The schema for the model. For application/json models, this should be JSON schema draft 4 model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
        public let schema: String?
        /// The description of the model.
        public let description: String?
        /// The identifier for the model resource.
        public let id: String?
        /// The name of the model. Must be an alphanumeric string.
        public let name: String?

        public init(contentType: String? = nil, description: String? = nil, id: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.schema = schema
            self.description = description
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case schema = "schema"
            case description = "description"
            case id = "id"
            case name = "name"
        }
    }

    public struct GetDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The name of the DomainName resource.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
        }
    }

    public struct DeleteApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKey", location: .uri(locationName: "api_Key"), required: true, type: .string)
        ]
        /// [Required] The identifier of the ApiKey resource to be deleted.
        public let apiKey: String

        public init(apiKey: String) {
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "api_Key"
        }
    }

    public struct ApiKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "customerId", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "stageKeys", required: false, type: .list), 
            AWSShapeMember(label: "id", required: false, type: .string)
        ]
        /// The description of the API Key.
        public let description: String?
        /// Specifies whether the API Key can be used by callers.
        public let enabled: Bool?
        /// The timestamp when the API Key was last updated.
        public let lastUpdatedDate: TimeStamp?
        /// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        public let customerId: String?
        /// The name of the API Key.
        public let name: String?
        /// The value of the API Key.
        public let value: String?
        /// The timestamp when the API Key was created.
        public let createdDate: TimeStamp?
        /// A list of Stage resources that are associated with the ApiKey resource.
        public let stageKeys: [String]?
        /// The identifier of the API Key.
        public let id: String?

        public init(createdDate: TimeStamp? = nil, customerId: String? = nil, description: String? = nil, enabled: Bool? = nil, id: String? = nil, lastUpdatedDate: TimeStamp? = nil, name: String? = nil, stageKeys: [String]? = nil, value: String? = nil) {
            self.description = description
            self.enabled = enabled
            self.lastUpdatedDate = lastUpdatedDate
            self.customerId = customerId
            self.name = name
            self.value = value
            self.createdDate = createdDate
            self.stageKeys = stageKeys
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case enabled = "enabled"
            case lastUpdatedDate = "lastUpdatedDate"
            case customerId = "customerId"
            case name = "name"
            case value = "value"
            case createdDate = "createdDate"
            case stageKeys = "stageKeys"
            case id = "id"
        }
    }

    public enum ApiKeysFormat: String, CustomStringConvertible, Codable {
        case csv = "csv"
        public var description: String { return self.rawValue }
    }

    public struct DocumentationVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The description of the API documentation snapshot.
        public let description: String?
        /// The date when the API documentation snapshot is created.
        public let createdDate: TimeStamp?
        /// The version identifier of the API documentation snapshot.
        public let version: String?

        public init(createdDate: TimeStamp? = nil, description: String? = nil, version: String? = nil) {
            self.description = description
            self.createdDate = createdDate
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case createdDate = "createdDate"
            case version = "version"
        }
    }

    public struct GetApiKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "includeValues", location: .querystring(locationName: "includeValues"), required: false, type: .boolean), 
            AWSShapeMember(label: "nameQuery", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "customerId", location: .querystring(locationName: "customerId"), required: false, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// A boolean flag to specify whether (true) or not (false) the result contains key values.
        public let includeValues: Bool?
        /// The name of queried API keys.
        public let nameQuery: String?
        /// The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.
        public let customerId: String?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(customerId: String? = nil, includeValues: Bool? = nil, limit: Int32? = nil, nameQuery: String? = nil, position: String? = nil) {
            self.limit = limit
            self.includeValues = includeValues
            self.nameQuery = nameQuery
            self.customerId = customerId
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case includeValues = "includeValues"
            case nameQuery = "name"
            case customerId = "customerId"
            case position = "position"
        }
    }

    public struct CreateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "contentType", required: true, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string)
        ]
        /// [Required] The RestApi identifier under which the Model will be created.
        public let restApiId: String
        /// The description of the model.
        public let description: String?
        /// [Required] The name of the model. Must be alphanumeric.
        public let name: String
        /// [Required] The content-type for the model.
        public let contentType: String
        /// The schema for the model. For application/json models, this should be JSON schema draft 4 model.
        public let schema: String?

        public init(contentType: String, description: String? = nil, name: String, restApiId: String, schema: String? = nil) {
            self.restApiId = restApiId
            self.description = description
            self.name = name
            self.contentType = contentType
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case description = "description"
            case name = "name"
            case contentType = "contentType"
            case schema = "schema"
        }
    }

    public struct UpdateDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "documentationVersion", location: .uri(locationName: "doc_version"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi..
        public let restApiId: String
        /// [Required] The version identifier of the to-be-updated documentation version.
        public let documentationVersion: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(documentationVersion: String, patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.restApiId = restApiId
            self.documentationVersion = documentationVersion
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case documentationVersion = "doc_version"
            case patchOperations = "patchOperations"
        }
    }

    public struct DomainName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "regionalCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "regionalCertificateName", required: false, type: .string), 
            AWSShapeMember(label: "certificateName", required: false, type: .string), 
            AWSShapeMember(label: "regionalDomainName", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateUploadDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "distributionHostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "distributionDomainName", required: false, type: .string), 
            AWSShapeMember(label: "domainName", required: false, type: .string), 
            AWSShapeMember(label: "regionalHostedZoneId", required: false, type: .string)
        ]
        /// The reference to an AWS-managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.
        public let regionalCertificateArn: String?
        /// The name of the certificate that will be used for validating the regional domain name.
        public let regionalCertificateName: String?
        /// The name of the certificate that will be used by edge-optimized endpoint for this domain name.
        public let certificateName: String?
        /// The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.
        public let regionalDomainName: String?
        /// The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let certificateArn: String?
        /// The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        public let certificateUploadDate: TimeStamp?
        /// The endpoint configuration of this DomainName showing the endpoint types of the domain name. 
        public let endpointConfiguration: EndpointConfiguration?
        /// The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is Z2FDTNDATAQYW2 for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. 
        public let distributionHostedZoneId: String?
        /// The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.
        public let distributionDomainName: String?
        /// The custom domain name as an API host name, for example, my-api.example.com.
        public let domainName: String?
        /// The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. 
        public let regionalHostedZoneId: String?

        public init(certificateArn: String? = nil, certificateName: String? = nil, certificateUploadDate: TimeStamp? = nil, distributionDomainName: String? = nil, distributionHostedZoneId: String? = nil, domainName: String? = nil, endpointConfiguration: EndpointConfiguration? = nil, regionalCertificateArn: String? = nil, regionalCertificateName: String? = nil, regionalDomainName: String? = nil, regionalHostedZoneId: String? = nil) {
            self.regionalCertificateArn = regionalCertificateArn
            self.regionalCertificateName = regionalCertificateName
            self.certificateName = certificateName
            self.regionalDomainName = regionalDomainName
            self.certificateArn = certificateArn
            self.certificateUploadDate = certificateUploadDate
            self.endpointConfiguration = endpointConfiguration
            self.distributionHostedZoneId = distributionHostedZoneId
            self.distributionDomainName = distributionDomainName
            self.domainName = domainName
            self.regionalHostedZoneId = regionalHostedZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case regionalCertificateArn = "regionalCertificateArn"
            case regionalCertificateName = "regionalCertificateName"
            case certificateName = "certificateName"
            case regionalDomainName = "regionalDomainName"
            case certificateArn = "certificateArn"
            case certificateUploadDate = "certificateUploadDate"
            case endpointConfiguration = "endpointConfiguration"
            case distributionHostedZoneId = "distributionHostedZoneId"
            case distributionDomainName = "distributionDomainName"
            case domainName = "domainName"
            case regionalHostedZoneId = "regionalHostedZoneId"
        }
    }

    public struct PutIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "selectionPattern", required: false, type: .string), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
        public let contentHandling: ContentHandlingStrategy?
        /// Specifies the selection pattern of a put integration response.
        public let selectionPattern: String?
        /// Specifies a put integration response's templates.
        public let responseTemplates: [String: String]?
        /// [Required] Specifies a put integration response request's HTTP method.
        public let httpMethod: String
        /// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name must be a valid and unique response header name and JSON-expression a valid JSON expression without the $ prefix.
        public let responseParameters: [String: String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies the status code that is used to map the integration response to an existing MethodResponse.
        public let statusCode: String
        /// [Required] Specifies a put integration response request's resource identifier.
        public let resourceId: String

        public init(contentHandling: ContentHandlingStrategy? = nil, httpMethod: String, resourceId: String, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, restApiId: String, selectionPattern: String? = nil, statusCode: String) {
            self.contentHandling = contentHandling
            self.selectionPattern = selectionPattern
            self.responseTemplates = responseTemplates
            self.httpMethod = httpMethod
            self.responseParameters = responseParameters
            self.restApiId = restApiId
            self.statusCode = statusCode
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandling = "contentHandling"
            case selectionPattern = "selectionPattern"
            case responseTemplates = "responseTemplates"
            case httpMethod = "http_method"
            case responseParameters = "responseParameters"
            case restApiId = "restapi_id"
            case statusCode = "status_code"
            case resourceId = "resource_id"
        }
    }

    public enum DocumentationPartType: String, CustomStringConvertible, Codable {
        case api = "API"
        case authorizer = "AUTHORIZER"
        case model = "MODEL"
        case resource = "RESOURCE"
        case method = "METHOD"
        case pathParameter = "PATH_PARAMETER"
        case queryParameter = "QUERY_PARAMETER"
        case requestHeader = "REQUEST_HEADER"
        case requestBody = "REQUEST_BODY"
        case response = "RESPONSE"
        case responseHeader = "RESPONSE_HEADER"
        case responseBody = "RESPONSE_BODY"
        public var description: String { return self.rawValue }
    }

    public struct GetStagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "deploymentId", location: .querystring(locationName: "deploymentId"), required: false, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The stages' deployment identifiers.
        public let deploymentId: String?

        public init(deploymentId: String? = nil, restApiId: String) {
            self.restApiId = restApiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case deploymentId = "deploymentId"
        }
    }

    public struct UpdateMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string)
        ]
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String

        public init(httpMethod: String, patchOperations: [PatchOperation]? = nil, resourceId: String, restApiId: String) {
            self.resourceId = resourceId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.httpMethod = httpMethod
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
            case httpMethod = "http_method"
        }
    }

    public struct PutRestApiRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean), 
            AWSShapeMember(label: "mode", location: .querystring(locationName: "mode"), required: false, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "body", required: true, type: .blob)
        ]
        /// A query parameter to indicate whether to rollback the API update (true) or not (false) when a warning is encountered. The default value is false.
        public let failOnWarnings: Bool?
        /// The mode query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default, the update mode is "merge".
        public let mode: PutMode?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set ignore=documentation as a parameters value, as in the AWS CLI command of aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'.
        public let parameters: [String: String]?
        /// [Required] The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 2MB.
        public let body: Data

        public init(body: Data, failOnWarnings: Bool? = nil, mode: PutMode? = nil, parameters: [String: String]? = nil, restApiId: String) {
            self.failOnWarnings = failOnWarnings
            self.mode = mode
            self.restApiId = restApiId
            self.parameters = parameters
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case failOnWarnings = "failonwarnings"
            case mode = "mode"
            case restApiId = "restapi_id"
            case parameters = "parameters"
            case body = "body"
        }
    }

    public struct CreateUsagePlanKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyId", required: true, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "keyType", required: true, type: .string)
        ]
        /// [Required] The identifier of a UsagePlanKey resource for a plan customer.
        public let keyId: String
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String
        /// [Required] The type of a UsagePlanKey resource for a plan customer.
        public let keyType: String

        public init(keyId: String, keyType: String, usagePlanId: String) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
            self.keyType = keyType
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "keyId"
            case usagePlanId = "usageplanId"
            case keyType = "keyType"
        }
    }

    public struct DeleteClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientCertificateId", location: .uri(locationName: "clientcertificate_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the ClientCertificate resource to be deleted.
        public let clientCertificateId: String

        public init(clientCertificateId: String) {
            self.clientCertificateId = clientCertificateId
        }

        private enum CodingKeys: String, CodingKey {
            case clientCertificateId = "clientcertificate_id"
        }
    }

    public struct ApiStage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "throttle", required: false, type: .map), 
            AWSShapeMember(label: "apiId", required: false, type: .string), 
            AWSShapeMember(label: "stage", required: false, type: .string)
        ]
        /// Map containing method level throttling information for API stage in a usage plan.
        public let throttle: [String: ThrottleSettings]?
        /// API Id of the associated API stage in a usage plan.
        public let apiId: String?
        /// API stage name of the associated API stage in a usage plan.
        public let stage: String?

        public init(apiId: String? = nil, stage: String? = nil, throttle: [String: ThrottleSettings]? = nil) {
            self.throttle = throttle
            self.apiId = apiId
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case throttle = "throttle"
            case apiId = "apiId"
            case stage = "stage"
        }
    }

    public struct EndpointConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "types", required: false, type: .list)
        ]
        /// A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is "EDGE". For a regional API and its custom domain name, the endpoint type is REGIONAL. For a private API, the endpoint type is PRIVATE.
        public let types: [EndpointType]?

        public init(types: [EndpointType]? = nil) {
            self.types = types
        }

        private enum CodingKeys: String, CodingKey {
            case types = "types"
        }
    }

    public struct UpdateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the model to update.
        public let modelName: String

        public init(modelName: String, patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.patchOperations = patchOperations
            self.restApiId = restApiId
            self.modelName = modelName
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case restApiId = "restapi_id"
            case modelName = "model_name"
        }
    }

    public struct BasePathMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", required: false, type: .string), 
            AWSShapeMember(label: "basePath", required: false, type: .string), 
            AWSShapeMember(label: "stage", required: false, type: .string)
        ]
        /// The string identifier of the associated RestApi.
        public let restApiId: String?
        /// The base path name that callers of the API must provide as part of the URL after the domain name.
        public let basePath: String?
        /// The name of the associated stage.
        public let stage: String?

        public init(basePath: String? = nil, restApiId: String? = nil, stage: String? = nil) {
            self.restApiId = restApiId
            self.basePath = basePath
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restApiId"
            case basePath = "basePath"
            case stage = "stage"
        }
    }

    public struct GetGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(responseType: GatewayResponseType, restApiId: String) {
            self.responseType = responseType
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case responseType = "response_type"
            case restApiId = "restapi_id"
        }
    }

    public struct DocumentationPartIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "warnings", required: false, type: .list), 
            AWSShapeMember(label: "ids", required: false, type: .list)
        ]
        /// A list of warning messages reported during import of documentation parts.
        public let warnings: [String]?
        /// A list of the returned documentation part identifiers.
        public let ids: [String]?

        public init(ids: [String]? = nil, warnings: [String]? = nil) {
            self.warnings = warnings
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case warnings = "warnings"
            case ids = "ids"
        }
    }

    public struct ApiKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "warnings", required: false, type: .list), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// A list of warning messages logged during the import of API keys when the failOnWarnings option is set to true.
        public let warnings: [String]?
        /// The current page of elements from this collection.
        public let items: [ApiKey]?
        public let position: String?

        public init(items: [ApiKey]? = nil, position: String? = nil, warnings: [String]? = nil) {
            self.warnings = warnings
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case warnings = "warnings"
            case items = "item"
            case position = "position"
        }
    }

    public struct GetUsagePlanKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyId", location: .uri(locationName: "keyId"), required: true, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// [Required] The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public let keyId: String
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String

        public init(keyId: String, usagePlanId: String) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "keyId"
            case usagePlanId = "usageplanId"
        }
    }

    public struct PutMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizationType", required: true, type: .string), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "operationName", required: false, type: .string), 
            AWSShapeMember(label: "requestValidatorId", required: false, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "requestModels", required: false, type: .map), 
            AWSShapeMember(label: "apiKeyRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "authorizationScopes", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "authorizerId", required: false, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string)
        ]
        /// [Required] The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public let authorizationType: String
        /// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
        public let requestParameters: [String: Bool]?
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in PetStore example.
        public let operationName: String?
        /// The identifier of a RequestValidator for validating the method request.
        public let requestValidatorId: String?
        /// [Required] The Resource identifier for the new Method resource.
        public let resourceId: String
        /// Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
        public let requestModels: [String: String]?
        /// Specifies whether the method required a valid ApiKey.
        public let apiKeyRequired: Bool?
        /// A list of authorization scopes configured on the method. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
        public let authorizationScopes: [String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
        public let authorizerId: String?
        /// [Required] Specifies the method request's HTTP method type.
        public let httpMethod: String

        public init(apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: String, authorizerId: String? = nil, httpMethod: String, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: Bool]? = nil, requestValidatorId: String? = nil, resourceId: String, restApiId: String) {
            self.authorizationType = authorizationType
            self.requestParameters = requestParameters
            self.operationName = operationName
            self.requestValidatorId = requestValidatorId
            self.resourceId = resourceId
            self.requestModels = requestModels
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.restApiId = restApiId
            self.authorizerId = authorizerId
            self.httpMethod = httpMethod
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationType = "authorizationType"
            case requestParameters = "requestParameters"
            case operationName = "operationName"
            case requestValidatorId = "requestValidatorId"
            case resourceId = "resource_id"
            case requestModels = "requestModels"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case restApiId = "restapi_id"
            case authorizerId = "authorizerId"
            case httpMethod = "http_method"
        }
    }

    public struct GetResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "embed", location: .querystring(locationName: "embed"), required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier for the Resource resource.
        public let resourceId: String
        /// A query parameter to retrieve the specified resources embedded in the returned Resource representation in the response. This embed parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the "methods" string. For example, GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods.
        public let embed: [String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(embed: [String]? = nil, resourceId: String, restApiId: String) {
            self.resourceId = resourceId
            self.embed = embed
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case embed = "embed"
            case restApiId = "restapi_id"
        }
    }

    public struct ClientCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pemEncodedCertificate", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "clientCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "expirationDate", required: false, type: .timestamp)
        ]
        /// The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .
        public let pemEncodedCertificate: String?
        /// The description of the client certificate.
        public let description: String?
        /// The identifier of the client certificate.
        public let clientCertificateId: String?
        /// The timestamp when the client certificate was created.
        public let createdDate: TimeStamp?
        /// The timestamp when the client certificate will expire.
        public let expirationDate: TimeStamp?

        public init(clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, expirationDate: TimeStamp? = nil, pemEncodedCertificate: String? = nil) {
            self.pemEncodedCertificate = pemEncodedCertificate
            self.description = description
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.expirationDate = expirationDate
        }

        private enum CodingKeys: String, CodingKey {
            case pemEncodedCertificate = "pemEncodedCertificate"
            case description = "description"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case expirationDate = "expirationDate"
        }
    }

    public struct SdkTypes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [SdkType]?

        public init(items: [SdkType]? = nil, position: String? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct DeleteAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the Authorizer resource.
        public let authorizerId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(authorizerId: String, restApiId: String) {
            self.authorizerId = authorizerId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerId = "authorizer_id"
            case restApiId = "restapi_id"
        }
    }

    public enum QuotaPeriodType: String, CustomStringConvertible, Codable {
        case day = "DAY"
        case week = "WEEK"
        case month = "MONTH"
        public var description: String { return self.rawValue }
    }

    public struct DeleteUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// [Required] The Id of the to-be-deleted usage plan.
        public let usagePlanId: String

        public init(usagePlanId: String) {
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
        }
    }

    public enum EndpointType: String, CustomStringConvertible, Codable {
        case regional = "REGIONAL"
        case edge = "EDGE"
        case `private` = "PRIVATE"
        public var description: String { return self.rawValue }
    }

    public struct GetAuthorizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.position = position
            self.limit = limit
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
            case restApiId = "restapi_id"
        }
    }

    public struct GetUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "startDate", location: .querystring(locationName: "startDate"), required: true, type: .string), 
            AWSShapeMember(label: "keyId", location: .querystring(locationName: "keyId"), required: false, type: .string), 
            AWSShapeMember(label: "endDate", location: .querystring(locationName: "endDate"), required: true, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The Id of the usage plan associated with the usage data.
        public let usagePlanId: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The starting date (e.g., 2016-01-01) of the usage data.
        public let startDate: String
        /// The Id of the API key associated with the resultant usage data.
        public let keyId: String?
        /// [Required] The ending date (e.g., 2016-12-31) of the usage data.
        public let endDate: String

        public init(endDate: String, keyId: String? = nil, limit: Int32? = nil, position: String? = nil, startDate: String, usagePlanId: String) {
            self.position = position
            self.usagePlanId = usagePlanId
            self.limit = limit
            self.startDate = startDate
            self.keyId = keyId
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case usagePlanId = "usageplanId"
            case limit = "limit"
            case startDate = "startDate"
            case keyId = "keyId"
            case endDate = "endDate"
        }
    }

    public struct UpdateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The identifier of the Authorizer resource.
        public let authorizerId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(authorizerId: String, patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.authorizerId = authorizerId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerId = "authorizer_id"
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct CreateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "providerARNs", required: false, type: .list), 
            AWSShapeMember(label: "authorizerResultTtlInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "authorizerCredentials", required: false, type: .string), 
            AWSShapeMember(label: "identitySource", required: false, type: .string), 
            AWSShapeMember(label: "identityValidationExpression", required: false, type: .string), 
            AWSShapeMember(label: "authType", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "authorizerUri", required: false, type: .string)
        ]
        /// [Required] The authorizer type. Valid values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, and COGNITO_USER_POOLS for using an Amazon Cognito user pool.
        public let `type`: AuthorizerType
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}. For a TOKEN or REQUEST authorizer, this is not defined. 
        public let providerARNs: [String]?
        /// The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
        public let authorizerResultTtlInSeconds: Int32?
        /// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        public let authorizerCredentials: String?
        /// The identity source for which authorization is requested. For a TOKEN or COGNITO_USER_POOLS authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is Auth, the header mapping expression is method.request.header.Auth.For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
        public let identitySource: String?
        /// A validation expression for the incoming identity token. For TOKEN authorizers, this value is a regular expression. API Gateway will match the aud field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the REQUEST authorizer.
        public let identityValidationExpression: String?
        /// Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        public let authType: String?
        /// [Required] The name of the authorizer.
        public let name: String
        /// Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN or REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form arn:aws:apigateway:{region}:lambda:path/{service_api}, where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
        public let authorizerUri: String?

        public init(authType: String? = nil, authorizerCredentials: String? = nil, authorizerResultTtlInSeconds: Int32? = nil, authorizerUri: String? = nil, identitySource: String? = nil, identityValidationExpression: String? = nil, name: String, providerARNs: [String]? = nil, restApiId: String, type: AuthorizerType) {
            self.`type` = `type`
            self.restApiId = restApiId
            self.providerARNs = providerARNs
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerCredentials = authorizerCredentials
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.authType = authType
            self.name = name
            self.authorizerUri = authorizerUri
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case restApiId = "restapi_id"
            case providerARNs = "providerARNs"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerCredentials = "authorizerCredentials"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case authType = "authType"
            case name = "name"
            case authorizerUri = "authorizerUri"
        }
    }

    public struct CreateResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pathPart", required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "parentId", location: .uri(locationName: "parent_id"), required: true, type: .string)
        ]
        /// The last path segment for this resource.
        public let pathPart: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The parent resource's identifier.
        public let parentId: String

        public init(parentId: String, pathPart: String, restApiId: String) {
            self.pathPart = pathPart
            self.restApiId = restApiId
            self.parentId = parentId
        }

        private enum CodingKeys: String, CodingKey {
            case pathPart = "pathPart"
            case restApiId = "restapi_id"
            case parentId = "parent_id"
        }
    }

    public struct UsagePlan: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiStages", required: false, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "throttle", required: false, type: .structure), 
            AWSShapeMember(label: "productCode", required: false, type: .string), 
            AWSShapeMember(label: "quota", required: false, type: .structure), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The associated API stages of a usage plan.
        public let apiStages: [ApiStage]?
        /// The description of a usage plan.
        public let description: String?
        /// The request throttle limits of a usage plan.
        public let throttle: ThrottleSettings?
        /// The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
        public let productCode: String?
        /// The maximum number of permitted requests per a given unit time interval.
        public let quota: QuotaSettings?
        /// The identifier of a UsagePlan resource.
        public let id: String?
        /// The name of a usage plan.
        public let name: String?

        public init(apiStages: [ApiStage]? = nil, description: String? = nil, id: String? = nil, name: String? = nil, productCode: String? = nil, quota: QuotaSettings? = nil, throttle: ThrottleSettings? = nil) {
            self.apiStages = apiStages
            self.description = description
            self.throttle = throttle
            self.productCode = productCode
            self.quota = quota
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case apiStages = "apiStages"
            case description = "description"
            case throttle = "throttle"
            case productCode = "productCode"
            case quota = "quota"
            case id = "id"
            case name = "name"
        }
    }

    public struct Deployments: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [Deployment]?
        public let position: String?

        public init(items: [Deployment]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct DeleteMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The status code identifier for the MethodResponse resource.
        public let statusCode: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The Resource identifier for the MethodResponse resource.
        public let resourceId: String

        public init(httpMethod: String, resourceId: String, restApiId: String, statusCode: String) {
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct DeleteIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a delete integration request's HTTP method.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies a delete integration request's resource identifier.
        public let resourceId: String

        public init(httpMethod: String, resourceId: String, restApiId: String) {
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "parentId", required: false, type: .string), 
            AWSShapeMember(label: "resourceMethods", required: false, type: .map), 
            AWSShapeMember(label: "pathPart", required: false, type: .string)
        ]
        /// The resource's identifier.
        public let id: String?
        /// The full path for this resource.
        public let path: String?
        /// The parent resource's identifier.
        public let parentId: String?
        /// Gets an API resource's method of a given HTTP verb.  The resource methods are a map of methods indexed by methods' HTTP verbs enabled on the resource. This method map is included in the 200 OK response of the GET /restapis/{restapi_id}/resources/{resource_id} or GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods request. Example: Get the GET method of an API resource Request GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20170223T031827Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20170223/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response { "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html", "name": "method", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true } ], "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET", "name": "GET", "title": "GET" }, "integration:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "method:integration": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "method:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "methodresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}", "templated": true } }, "apiKeyRequired": false, "authorizationType": "NONE", "httpMethod": "GET", "_embedded": { "method:integration": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "3kzxbg5sa2", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestParameters": { "integration.request.header.Content-Type": "'application/x-amz-json-1.1'" }, "requestTemplates": { "application/json": "{\n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-east-1:kinesis:action/ListStreams", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" } } }, "method:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" } } } If the OPTIONS is enabled on the resource, you can follow the example here to get that method. Just replace the GET of the last path segment in the request URL with OPTIONS.   
        public let resourceMethods: [String: Method]?
        /// The last path segment for this resource.
        public let pathPart: String?

        public init(id: String? = nil, parentId: String? = nil, path: String? = nil, pathPart: String? = nil, resourceMethods: [String: Method]? = nil) {
            self.id = id
            self.path = path
            self.parentId = parentId
            self.resourceMethods = resourceMethods
            self.pathPart = pathPart
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case path = "path"
            case parentId = "parentId"
            case resourceMethods = "resourceMethods"
            case pathPart = "pathPart"
        }
    }

    public struct GetResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "embed", location: .querystring(locationName: "embed"), required: false, type: .list)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A query parameter used to retrieve the specified resources embedded in the returned Resources resource in the response. This embed parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the "methods" string. For example, GET /restapis/{restapi_id}/resources?embed=methods.
        public let embed: [String]?

        public init(embed: [String]? = nil, limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.limit = limit
            self.position = position
            self.restApiId = restApiId
            self.embed = embed
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
            case restApiId = "restapi_id"
            case embed = "embed"
        }
    }

    public struct CreateRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "binaryMediaTypes", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "policy", required: false, type: .string), 
            AWSShapeMember(label: "minimumCompressionSize", required: false, type: .integer), 
            AWSShapeMember(label: "cloneFrom", required: false, type: .string), 
            AWSShapeMember(label: "apiKeySource", required: false, type: .enum), 
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure)
        ]
        /// The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        public let binaryMediaTypes: [String]?
        /// A version identifier for the API.
        public let version: String?
        /// [Required] The name of the RestApi.
        public let name: String
        /// The description of the RestApi.
        public let description: String?
        /// A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
        public let policy: String?
        /// A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        public let minimumCompressionSize: Int32?
        /// The ID of the RestApi that you want to clone from.
        public let cloneFrom: String?
        /// The source of the API key for metering requests according to a usage plan. Valid values are: HEADER to read the API key from the X-API-Key header of a request. AUTHORIZER to read the API key from the UsageIdentifierKey from a custom authorizer. 
        public let apiKeySource: ApiKeySourceType?
        /// The endpoint configuration of this RestApi showing the endpoint types of the API. 
        public let endpointConfiguration: EndpointConfiguration?

        public init(apiKeySource: ApiKeySourceType? = nil, binaryMediaTypes: [String]? = nil, cloneFrom: String? = nil, description: String? = nil, endpointConfiguration: EndpointConfiguration? = nil, minimumCompressionSize: Int32? = nil, name: String, policy: String? = nil, version: String? = nil) {
            self.binaryMediaTypes = binaryMediaTypes
            self.version = version
            self.name = name
            self.description = description
            self.policy = policy
            self.minimumCompressionSize = minimumCompressionSize
            self.cloneFrom = cloneFrom
            self.apiKeySource = apiKeySource
            self.endpointConfiguration = endpointConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case binaryMediaTypes = "binaryMediaTypes"
            case version = "version"
            case name = "name"
            case description = "description"
            case policy = "policy"
            case minimumCompressionSize = "minimumCompressionSize"
            case cloneFrom = "cloneFrom"
            case apiKeySource = "apiKeySource"
            case endpointConfiguration = "endpointConfiguration"
        }
    }

    public struct CreateRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "validateRequestBody", required: false, type: .boolean), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "validateRequestParameters", required: false, type: .boolean)
        ]
        /// The name of the to-be-created RequestValidator.
        public let name: String?
        /// A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (true) or not (false).
        public let validateRequestBody: Bool?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A Boolean flag to indicate whether to validate request parameters, true, or not false.
        public let validateRequestParameters: Bool?

        public init(name: String? = nil, restApiId: String, validateRequestBody: Bool? = nil, validateRequestParameters: Bool? = nil) {
            self.name = name
            self.validateRequestBody = validateRequestBody
            self.restApiId = restApiId
            self.validateRequestParameters = validateRequestParameters
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case validateRequestBody = "validateRequestBody"
            case restApiId = "restapi_id"
            case validateRequestParameters = "validateRequestParameters"
        }
    }

    public struct GetBasePathMappingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// [Required] The domain name of a BasePathMapping resource.
        public let domainName: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(domainName: String, limit: Int32? = nil, position: String? = nil) {
            self.domainName = domainName
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
            case limit = "limit"
            case position = "position"
        }
    }

    public struct ThrottleSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "burstLimit", required: false, type: .integer), 
            AWSShapeMember(label: "rateLimit", required: false, type: .double)
        ]
        /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
        public let burstLimit: Int32?
        /// The API request steady-state rate limit.
        public let rateLimit: Double?

        public init(burstLimit: Int32? = nil, rateLimit: Double? = nil) {
            self.burstLimit = burstLimit
            self.rateLimit = rateLimit
        }

        private enum CodingKeys: String, CodingKey {
            case burstLimit = "burstLimit"
            case rateLimit = "rateLimit"
        }
    }

    public struct GetMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// [Required] Specifies the method request's HTTP method type.
        public let httpMethod: String

        public init(httpMethod: String, resourceId: String, restApiId: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
            case httpMethod = "http_method"
        }
    }

    public struct DocumentationPartLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "method", required: false, type: .string), 
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum)
        ]
        /// The name of the targeted API entity. It is a valid and required field for the API entity types of AUTHORIZER, MODEL, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY and RESPONSE_HEADER. It is an invalid field for any other entity type.
        public let name: String?
        /// The HTTP verb of a method. It is a valid field for the API entity types of METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is * for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other location attributes, the child entity's method attribute must match that of the parent entity exactly.
        public let method: String?
        /// The HTTP status code of a response. It is a valid field for the API entity types of RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is * for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other location attributes, the child entity's statusCode attribute must match that of the parent entity exactly.
        public let statusCode: String?
        /// The URL path of the target. It is a valid field for the API entity types of RESOURCE, METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is / for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other location attributes, the child entity's path attribute must match that of the parent entity as a prefix.
        public let path: String?
        /// [Required] The type of API entity to which the documentation content applies. Valid values are API, AUTHORIZER, MODEL, RESOURCE, METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. Content inheritance does not apply to any entity of the API, AUTHORIZER, METHOD, MODEL, REQUEST_BODY, or RESOURCE type.
        public let `type`: DocumentationPartType

        public init(method: String? = nil, name: String? = nil, path: String? = nil, statusCode: String? = nil, type: DocumentationPartType) {
            self.name = name
            self.method = method
            self.statusCode = statusCode
            self.path = path
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case method = "method"
            case statusCode = "statusCode"
            case path = "path"
            case `type` = "type"
        }
    }

    public struct DeleteUsagePlanKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "keyId", location: .uri(locationName: "keyId"), required: true, type: .string)
        ]
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String
        /// [Required] The Id of the UsagePlanKey resource to be deleted.
        public let keyId: String

        public init(keyId: String, usagePlanId: String) {
            self.usagePlanId = usagePlanId
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
            case keyId = "keyId"
        }
    }

    public struct DeploymentCanarySettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageVariableOverrides", required: false, type: .map), 
            AWSShapeMember(label: "percentTraffic", required: false, type: .double), 
            AWSShapeMember(label: "useStageCache", required: false, type: .boolean)
        ]
        /// A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
        public let stageVariableOverrides: [String: String]?
        /// The percentage (0.0-100.0) of traffic routed to the canary deployment.
        public let percentTraffic: Double?
        /// A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
        public let useStageCache: Bool?

        public init(percentTraffic: Double? = nil, stageVariableOverrides: [String: String]? = nil, useStageCache: Bool? = nil) {
            self.stageVariableOverrides = stageVariableOverrides
            self.percentTraffic = percentTraffic
            self.useStageCache = useStageCache
        }

        private enum CodingKeys: String, CodingKey {
            case stageVariableOverrides = "stageVariableOverrides"
            case percentTraffic = "percentTraffic"
            case useStageCache = "useStageCache"
        }
    }

    public struct GetSdkTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "sdktype_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the queried SdkType instance.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "sdktype_id"
        }
    }

    public struct Tags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// The collection of tags. Each tag element is associated with a given resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct Account: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "throttleSettings", required: false, type: .structure), 
            AWSShapeMember(label: "cloudwatchRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "features", required: false, type: .list), 
            AWSShapeMember(label: "apiKeyVersion", required: false, type: .string)
        ]
        /// Specifies the API request limits configured for the current Account.
        public let throttleSettings: ThrottleSettings?
        /// The ARN of an Amazon CloudWatch role for the current Account. 
        public let cloudwatchRoleArn: String?
        /// A list of features supported for the account. When usage plans are enabled, the features list will include an entry of "UsagePlans".
        public let features: [String]?
        /// The version of the API keys used for the account.
        public let apiKeyVersion: String?

        public init(apiKeyVersion: String? = nil, cloudwatchRoleArn: String? = nil, features: [String]? = nil, throttleSettings: ThrottleSettings? = nil) {
            self.throttleSettings = throttleSettings
            self.cloudwatchRoleArn = cloudwatchRoleArn
            self.features = features
            self.apiKeyVersion = apiKeyVersion
        }

        private enum CodingKeys: String, CodingKey {
            case throttleSettings = "throttleSettings"
            case cloudwatchRoleArn = "cloudwatchRoleArn"
            case features = "features"
            case apiKeyVersion = "apiKeyVersion"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageDescription", required: false, type: .string), 
            AWSShapeMember(label: "canarySettings", required: false, type: .structure), 
            AWSShapeMember(label: "tracingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "cacheClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "stageName", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterSize", required: false, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "variables", required: false, type: .map), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The description of the Stage resource for the Deployment resource to create.
        public let stageDescription: String?
        /// The input configuration for the canary deployment when the deployment is a canary release deployment. 
        public let canarySettings: DeploymentCanarySettings?
        /// Specifies whether active tracing with X-ray is enabled for the Stage.
        public let tracingEnabled: Bool?
        /// Enables a cache cluster for the Stage resource specified in the input.
        public let cacheClusterEnabled: Bool?
        /// The name of the Stage resource for the Deployment resource to create.
        public let stageName: String?
        /// Specifies the cache cluster size for the Stage resource specified in the input, if a cache cluster is enabled.
        public let cacheClusterSize: CacheClusterSize?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let variables: [String: String]?
        /// The description for the Deployment resource to create.
        public let description: String?

        public init(cacheClusterEnabled: Bool? = nil, cacheClusterSize: CacheClusterSize? = nil, canarySettings: DeploymentCanarySettings? = nil, description: String? = nil, restApiId: String, stageDescription: String? = nil, stageName: String? = nil, tracingEnabled: Bool? = nil, variables: [String: String]? = nil) {
            self.stageDescription = stageDescription
            self.canarySettings = canarySettings
            self.tracingEnabled = tracingEnabled
            self.cacheClusterEnabled = cacheClusterEnabled
            self.stageName = stageName
            self.cacheClusterSize = cacheClusterSize
            self.restApiId = restApiId
            self.variables = variables
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case stageDescription = "stageDescription"
            case canarySettings = "canarySettings"
            case tracingEnabled = "tracingEnabled"
            case cacheClusterEnabled = "cacheClusterEnabled"
            case stageName = "stageName"
            case cacheClusterSize = "cacheClusterSize"
            case restApiId = "restapi_id"
            case variables = "variables"
            case description = "description"
        }
    }

    public struct DeleteDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The name of the DomainName resource to be deleted.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
        }
    }

}