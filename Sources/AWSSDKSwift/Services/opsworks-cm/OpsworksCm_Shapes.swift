// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension OpsworksCm {

    public struct DescribeAccountAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The attributes that are currently set for the account. 
        public var attributes: [AccountAttribute]? = nil

        public init() {}

        public init(attributes: [AccountAttribute]? = nil) {
            self.attributes = attributes
        }

    }

    public struct DescribeEventsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains the response to a DescribeEvents request. 
        public var serverEvents: [ServerEvent]? = nil
        /// NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call DescribeEvents again, and assign the token from the previous results as the value of the nextToken parameter. If there are no more results, the response object's nextToken parameter value is null. Setting a nextToken value that was not returned in your previous results causes an InvalidNextTokenException to occur. 
        public var nextToken: String? = nil

        public init() {}

        public init(serverEvents: [ServerEvent]? = nil, nextToken: String? = nil) {
            self.serverEvents = serverEvents
            self.nextToken = nextToken
        }

    }

    public struct AssociateNodeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains a token which can be passed to the DescribeNodeAssociationStatus API call to get the status of the association request. 
        public var nodeAssociationStatusToken: String? = nil

        public init() {}

        public init(nodeAssociationStatusToken: String? = nil) {
            self.nodeAssociationStatusToken = nodeAssociationStatusToken
        }

    }

    public struct CreateServerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The engine model, or option. Valid values include Single. 
        public var engineModel: String? = nil
        /// Optional engine attributes on a specified server.   Attributes accepted in a createServer request:     CHEF_PIVOTAL_KEY: A base64-encoded RSA private key that is not stored by AWS OpsWorks for Chef. This private key is required to access the Chef API. When no CHEF_PIVOTAL_KEY is set, one is generated and returned in the response.     CHEF_DELIVERY_ADMIN_PASSWORD: The password for the administrative user in the Chef Automate GUI. The password length is a minimum of eight characters, and a maximum of 32. The password can contain letters, numbers, and special characters (!/@#$%^&amp;+=_). The password must contain at least one lower case letter, one upper case letter, one number, and one special character. When no CHEF_DELIVERY_ADMIN_PASSWORD is set, one is generated and returned in the response.  
        public var engineAttributes: [EngineAttribute]? = nil
        ///  If you specify this field, AWS OpsWorks for Chef Automate creates the server by using the backup represented by BackupId. 
        public var backupId: String? = nil
        ///  The service role that the AWS OpsWorks for Chef Automate service backend uses to work with your account. Although the AWS OpsWorks management console typically creates the service role for you, if you are using the AWS CLI or API commands, run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-stuff/latest/service-role-creation.yaml. This template creates a CloudFormation stack that includes the service role that you need. 
        public var serviceRoleArn: String = ""
        ///  A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups must be within the VPC that is specified by SubnetIds.   If you do not specify this parameter, AWS OpsWorks for Chef Automate creates one new security group that uses TCP ports 22 and 443, open to 0.0.0.0/0 (everyone). 
        public var securityGroupIds: [String]? = nil
        ///  The Amazon EC2 instance type to use. Valid values must be specified in the following format: ^([cm][34]|t2).* For example, m4.large. Valid values are t2.medium, m4.large, or m4.2xlarge. 
        public var instanceType: String = ""
        ///  The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks for Chef Automate deletes the oldest backups if this number is exceeded. The default value is 1. 
        public var backupRetentionCount: Int32? = nil
        ///  The IDs of subnets in which to launch the server EC2 instance.   Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled.   EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled.  For more information about supported Amazon EC2 platforms, see Supported Platforms.
        public var subnetIds: [String]? = nil
        ///  The start time for a one-hour period during which AWS OpsWorks for Chef Automate backs up application-level data on your server if automated backups are enabled. Valid values must be specified in one of the following formats:     HH:MM for daily backups    DDD:HH:MM for weekly backups   The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.  Example: 08:00, which represents a daily start time of 08:00 UTC.  Example: Mon:08:00, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)
        public var preferredBackupWindow: String? = nil
        ///  The major release version of the engine that you want to use. Values depend on the engine that you choose. 
        public var engineVersion: String? = nil
        ///  The ARN of the instance profile that your Amazon EC2 instances use. Although the AWS OpsWorks console typically creates the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml. This template creates a CloudFormation stack that includes the instance profile you need. 
        public var instanceProfileArn: String = ""
        ///  The start time for a one-hour period each week during which AWS OpsWorks for Chef Automate performs maintenance on the instance. Valid values must be specified in the following format: DDD:HH:MM. The specified time is in coordinated universal time (UTC). The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See TimeWindowDefinition for more information.   Example: Mon:08:00, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.) 
        public var preferredMaintenanceWindow: String? = nil
        ///  The name of the server. The server name must be unique within your AWS account, within each region. Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters. 
        public var serverName: String = ""
        ///  The configuration management engine to use. Valid values include Chef. 
        public var engine: String? = nil
        ///  Enable or disable scheduled backups. Valid values are true or false. The default value is true. 
        public var disableAutomatedBackup: Bool? = nil
        ///  The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH. 
        public var keyPair: String? = nil
        ///  Associate a public IP address with a server that you are launching. Valid values are true or false. The default value is true. 
        public var associatePublicIpAddress: Bool? = nil

        public init() {}

        public init(engineModel: String? = nil, engineAttributes: [EngineAttribute]? = nil, backupId: String? = nil, serviceRoleArn: String, securityGroupIds: [String]? = nil, instanceType: String, backupRetentionCount: Int32? = nil, subnetIds: [String]? = nil, preferredBackupWindow: String? = nil, engineVersion: String? = nil, instanceProfileArn: String, preferredMaintenanceWindow: String? = nil, serverName: String, engine: String? = nil, disableAutomatedBackup: Bool? = nil, keyPair: String? = nil, associatePublicIpAddress: Bool? = nil) {
            self.engineModel = engineModel
            self.engineAttributes = engineAttributes
            self.backupId = backupId
            self.serviceRoleArn = serviceRoleArn
            self.securityGroupIds = securityGroupIds
            self.instanceType = instanceType
            self.backupRetentionCount = backupRetentionCount
            self.subnetIds = subnetIds
            self.preferredBackupWindow = preferredBackupWindow
            self.engineVersion = engineVersion
            self.instanceProfileArn = instanceProfileArn
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.serverName = serverName
            self.engine = engine
            self.disableAutomatedBackup = disableAutomatedBackup
            self.keyPair = keyPair
            self.associatePublicIpAddress = associatePublicIpAddress
        }

    }

    public struct CreateBackupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the server that you want to back up. 
        public var serverName: String = ""
        ///  A user-defined description of the backup. 
        public var description: String? = nil

        public init() {}

        public init(serverName: String, description: String? = nil) {
            self.serverName = serverName
            self.description = description
        }

    }

    public struct UpdateServerEngineAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the engine attribute to update. 
        public var attributeName: String = ""
        /// The value to set for the attribute. 
        public var attributeValue: String? = nil
        /// The name of the server to update. 
        public var serverName: String = ""

        public init() {}

        public init(attributeName: String, attributeValue: String? = nil, serverName: String) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.serverName = serverName
        }

    }

    public struct AssociateNodeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the Chef client node. 
        public var nodeName: String = ""
        /// Engine attributes used for associating the node.   Attributes accepted in a AssociateNode request:     CHEF_ORGANIZATION: The Chef organization with which the node is associated. By default only one organization named default can exist.     CHEF_NODE_PUBLIC_KEY: A PEM-formatted public key. This key is required for the chef-client agent to access the Chef API.   
        public var engineAttributes: [EngineAttribute] = []
        /// The name of the server with which to associate the node. 
        public var serverName: String = ""

        public init() {}

        public init(nodeName: String, engineAttributes: [EngineAttribute], serverName: String) {
            self.nodeName = nodeName
            self.engineAttributes = engineAttributes
            self.serverName = serverName
        }

    }

    public struct AccountAttribute: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The maximum allowed value. 
        public var maximum: Int32? = nil
        ///  The attribute name. The following are supported attribute names.     ServerLimit: The number of current servers/maximum number of servers allowed. By default, you can have a maximum of 10 servers.     ManualBackupLimit: The number of current manual backups/maximum number of backups allowed. By default, you can have a maximum of 50 manual backups saved.   
        public var name: String? = nil
        ///  The current usage, such as the current number of servers that are associated with the account. 
        public var used: Int32? = nil

        public init() {}

        public init(maximum: Int32? = nil, name: String? = nil, used: Int32? = nil) {
            self.maximum = maximum
            self.name = name
            self.used = used
        }

    }

    public struct StartMaintenanceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains the response to a StartMaintenance request. 
        public var server: Server? = nil

        public init() {}

        public init(server: Server? = nil) {
            self.server = server
        }

    }

    public struct CreateBackupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Backup created by request.
        public var backup: Backup? = nil

        public init() {}

        public init(backup: Backup? = nil) {
            self.backup = backup
        }

    }

    public struct DescribeNodeAssociationStatusRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var nodeAssociationStatusToken: String = ""
        /// The name of the server from which to disassociate the node. 
        public var serverName: String = ""

        public init() {}

        public init(nodeAssociationStatusToken: String, serverName: String) {
            self.nodeAssociationStatusToken = nodeAssociationStatusToken
            self.serverName = serverName
        }

    }

    public struct StartMaintenanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the server on which to run maintenance. 
        public var serverName: String = ""

        public init() {}

        public init(serverName: String) {
            self.serverName = serverName
        }

    }

    public struct UpdateServerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains the response to a UpdateServer request. 
        public var server: Server? = nil

        public init() {}

        public init(server: Server? = nil) {
            self.server = server
        }

    }

    public struct DisassociateNodeResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains a token which can be passed to the DescribeNodeAssociationStatus API call to get the status of the disassociation request. 
        public var nodeAssociationStatusToken: String? = nil

        public init() {}

        public init(nodeAssociationStatusToken: String? = nil) {
            self.nodeAssociationStatusToken = nodeAssociationStatusToken
        }

    }

    public struct DescribeServersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results. 
        public var maxResults: Int32? = nil
        /// NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call DescribeServers again, and assign the token from the previous results as the value of the nextToken parameter. If there are no more results, the response object's nextToken parameter value is null. Setting a nextToken value that was not returned in your previous results causes an InvalidNextTokenException to occur. 
        public var nextToken: String? = nil
        /// Describes the server with the specified ServerName.
        public var serverName: String? = nil

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, serverName: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serverName = serverName
        }

    }

    public struct ServerEvent: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon S3 URL of the event's log file.
        public var logUrl: String? = nil
        /// The time when the event occurred. 
        public var createdAt: Date? = nil
        /// A human-readable informational or status message.
        public var message: String? = nil
        /// The name of the server on or for which the event occurred. 
        public var serverName: String? = nil

        public init() {}

        public init(logUrl: String? = nil, createdAt: Date? = nil, message: String? = nil, serverName: String? = nil) {
            self.logUrl = logUrl
            self.createdAt = createdAt
            self.message = message
            self.serverName = serverName
        }

    }

    public struct DescribeBackupsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Returns backups for the server with the specified ServerName. 
        public var serverName: String? = nil
        /// Describes a single backup. 
        public var backupId: String? = nil
        /// NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call DescribeBackups again, and assign the token from the previous results as the value of the nextToken parameter. If there are no more results, the response object's nextToken parameter value is null. Setting a nextToken value that was not returned in your previous results causes an InvalidNextTokenException to occur.
        public var nextToken: String? = nil
        /// To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results. 
        public var maxResults: Int32? = nil

        public init() {}

        public init(serverName: String? = nil, backupId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.serverName = serverName
            self.backupId = backupId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct RestoreServerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct Backup: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The engine model that is obtained from the server when the backup is created. 
        public var engineModel: String? = nil
        ///  The service role ARN that is obtained from the server when the backup is created. 
        public var serviceRoleArn: String? = nil
        ///  This field is deprecated and is no longer used. 
        public var s3DataSize: Int32? = nil
        ///  The generated ID of the backup. Example: myServerName-yyyyMMddHHmmssSSS 
        public var backupId: String? = nil
        ///  The security group IDs that are obtained from the server when the backup is created. 
        public var securityGroupIds: [String]? = nil
        ///  The version of AWS OpsWorks for Chef Automate-specific tools that is obtained from the server when the backup is created. 
        public var toolsVersion: String? = nil
        ///  The instance type that is obtained from the server when the backup is created. 
        public var instanceType: String? = nil
        ///  A user-provided description for a manual backup. This field is empty for automated backups. 
        public var description: String? = nil
        ///  The preferred backup period that is obtained from the server when the backup is created. 
        public var preferredBackupWindow: String? = nil
        /// The status of a backup while in progress. 
        public var status: String? = nil
        ///  The time stamp when the backup was created in the database. Example: 2016-07-29T13:38:47.520Z 
        public var createdAt: Date? = nil
        ///  The engine version that is obtained from the server when the backup is created. 
        public var engineVersion: String? = nil
        ///  The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored, you are not required to provide the InstanceProfileArn again if you restore a backup. 
        public var instanceProfileArn: String? = nil
        ///  The preferred maintenance period that is obtained from the server when the backup is created. 
        public var preferredMaintenanceWindow: String? = nil
        ///  The name of the server from which the backup was made. 
        public var serverName: String? = nil
        ///  The subnet IDs that are obtained from the server when the backup is created. 
        public var subnetIds: [String]? = nil
        ///  The backup type. Valid values are automated or manual. 
        public var backupType: String? = nil
        ///  The engine type that is obtained from the server when the backup is created. 
        public var engine: String? = nil
        ///  This field is deprecated and is no longer used. 
        public var s3DataUrl: String? = nil
        ///  The Amazon S3 URL of the backup's log file. 
        public var s3LogUrl: String? = nil
        ///  The IAM user ARN of the requester for manual backups. This field is empty for automated backups. 
        public var userArn: String? = nil
        ///  An informational message about backup status. 
        public var statusDescription: String? = nil
        /// The ARN of the backup. 
        public var backupArn: String? = nil
        ///  The key pair that is obtained from the server when the backup is created. 
        public var keyPair: String? = nil

        public init() {}

        public init(engineModel: String? = nil, serviceRoleArn: String? = nil, s3DataSize: Int32? = nil, backupId: String? = nil, securityGroupIds: [String]? = nil, toolsVersion: String? = nil, instanceType: String? = nil, description: String? = nil, preferredBackupWindow: String? = nil, status: String? = nil, createdAt: Date? = nil, engineVersion: String? = nil, instanceProfileArn: String? = nil, preferredMaintenanceWindow: String? = nil, serverName: String? = nil, subnetIds: [String]? = nil, backupType: String? = nil, engine: String? = nil, s3DataUrl: String? = nil, s3LogUrl: String? = nil, userArn: String? = nil, statusDescription: String? = nil, backupArn: String? = nil, keyPair: String? = nil) {
            self.engineModel = engineModel
            self.serviceRoleArn = serviceRoleArn
            self.s3DataSize = s3DataSize
            self.backupId = backupId
            self.securityGroupIds = securityGroupIds
            self.toolsVersion = toolsVersion
            self.instanceType = instanceType
            self.description = description
            self.preferredBackupWindow = preferredBackupWindow
            self.status = status
            self.createdAt = createdAt
            self.engineVersion = engineVersion
            self.instanceProfileArn = instanceProfileArn
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.serverName = serverName
            self.subnetIds = subnetIds
            self.backupType = backupType
            self.engine = engine
            self.s3DataUrl = s3DataUrl
            self.s3LogUrl = s3LogUrl
            self.userArn = userArn
            self.statusDescription = statusDescription
            self.backupArn = backupArn
            self.keyPair = keyPair
        }

    }

    public struct DeleteServerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the server to delete.
        public var serverName: String = ""

        public init() {}

        public init(serverName: String) {
            self.serverName = serverName
        }

    }

    public struct DisassociateNodeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the Chef client node. 
        public var nodeName: String = ""
        /// Engine attributes used for disassociating the node.   Attributes accepted in a DisassociateNode request:     CHEF_ORGANIZATION: The Chef organization with which the node was associated. By default only one organization named default can exist.   
        public var engineAttributes: [EngineAttribute]? = nil
        /// The name of the server from which to disassociate the node. 
        public var serverName: String = ""

        public init() {}

        public init(nodeName: String, engineAttributes: [EngineAttribute]? = nil, serverName: String) {
            self.nodeName = nodeName
            self.engineAttributes = engineAttributes
            self.serverName = serverName
        }

    }

    public struct Server: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ARN of the server. 
        public var serverArn: String? = nil
        /// The engine model of the server. The valid value in this release is Single. 
        public var engineModel: String? = nil
        /// The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks for Chef Automate; they are returned only as part of the result of createServer().   Attributes returned in a createServer response:     CHEF_PIVOTAL_KEY: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.    CHEF_STARTER_KIT: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.  
        public var engineAttributes: [EngineAttribute]? = nil
        /// The service role ARN used to create the server. 
        public var serviceRoleArn: String? = nil
        ///  The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console. 
        public var securityGroupIds: [String]? = nil
        ///  The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console. 
        public var instanceType: String? = nil
        /// The number of automated backups to keep. 
        public var backupRetentionCount: Int32? = nil
        ///  The subnet IDs specified in a CreateServer request. 
        public var subnetIds: [String]? = nil
        /// The preferred backup period specified for the server. 
        public var preferredBackupWindow: String? = nil
        /// Time stamp of server creation. Example 2016-07-29T13:38:47.520Z 
        public var createdAt: Date? = nil
        /// The engine version of the server. Because Chef is the engine available in this release, the valid value for EngineVersion is 12. 
        public var engineVersion: String? = nil
        /// The instance profile ARN of the server. 
        public var instanceProfileArn: String? = nil
        ///  Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results). 
        public var statusReason: String? = nil
        /// The preferred maintenance period specified for the server. 
        public var preferredMaintenanceWindow: String? = nil
        /// The name of the server. 
        public var serverName: String? = nil
        /// The engine type of the server. The valid value in this release is Chef. 
        public var engine: String? = nil
        /// The status of the most recent server maintenance run. Shows SUCCESS or FAILED. 
        public var maintenanceStatus: String? = nil
        /// The ARN of the CloudFormation stack that was used to create the server. 
        public var cloudFormationStackArn: String? = nil
        ///  The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state. 
        public var status: String? = nil
        /// Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount. 
        public var disableAutomatedBackup: Bool? = nil
        ///  A DNS name that can be used to access the engine. Example: myserver-asdfghjkl.us-east-1.opsworks.io 
        public var endpoint: String? = nil
        /// Associate a public IP address with a server that you are launching. 
        public var associatePublicIpAddress: Bool? = nil
        /// The key pair associated with the server. 
        public var keyPair: String? = nil

        public init() {}

        public init(serverArn: String? = nil, engineModel: String? = nil, engineAttributes: [EngineAttribute]? = nil, serviceRoleArn: String? = nil, securityGroupIds: [String]? = nil, instanceType: String? = nil, backupRetentionCount: Int32? = nil, subnetIds: [String]? = nil, preferredBackupWindow: String? = nil, createdAt: Date? = nil, engineVersion: String? = nil, instanceProfileArn: String? = nil, statusReason: String? = nil, preferredMaintenanceWindow: String? = nil, serverName: String? = nil, engine: String? = nil, maintenanceStatus: String? = nil, cloudFormationStackArn: String? = nil, status: String? = nil, disableAutomatedBackup: Bool? = nil, endpoint: String? = nil, associatePublicIpAddress: Bool? = nil, keyPair: String? = nil) {
            self.serverArn = serverArn
            self.engineModel = engineModel
            self.engineAttributes = engineAttributes
            self.serviceRoleArn = serviceRoleArn
            self.securityGroupIds = securityGroupIds
            self.instanceType = instanceType
            self.backupRetentionCount = backupRetentionCount
            self.subnetIds = subnetIds
            self.preferredBackupWindow = preferredBackupWindow
            self.createdAt = createdAt
            self.engineVersion = engineVersion
            self.instanceProfileArn = instanceProfileArn
            self.statusReason = statusReason
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.serverName = serverName
            self.engine = engine
            self.maintenanceStatus = maintenanceStatus
            self.cloudFormationStackArn = cloudFormationStackArn
            self.status = status
            self.disableAutomatedBackup = disableAutomatedBackup
            self.endpoint = endpoint
            self.associatePublicIpAddress = associatePublicIpAddress
            self.keyPair = keyPair
        }

    }

    public struct DescribeEventsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results. 
        public var maxResults: Int32? = nil
        /// NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call DescribeEvents again, and assign the token from the previous results as the value of the nextToken parameter. If there are no more results, the response object's nextToken parameter value is null. Setting a nextToken value that was not returned in your previous results causes an InvalidNextTokenException to occur. 
        public var nextToken: String? = nil
        /// The name of the server for which you want to view events.
        public var serverName: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, serverName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serverName = serverName
        }

    }

    public struct DescribeServersResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains the response to a DescribeServers request. 
        public var servers: [Server]? = nil
        /// NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call DescribeServers again, and assign the token from the previous results as the value of the nextToken parameter. If there are no more results, the response object's nextToken parameter value is null. Setting a nextToken value that was not returned in your previous results causes an InvalidNextTokenException to occur. 
        public var nextToken: String? = nil

        public init() {}

        public init(servers: [Server]? = nil, nextToken: String? = nil) {
            self.servers = servers
            self.nextToken = nextToken
        }

    }

    public struct RestoreServerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The name of the server that you want to restore. 
        public var serverName: String = ""
        ///  The type of the instance to create. Valid values must be specified in the following format: ^([cm][34]|t2).* For example, m4.large. Valid values are t2.medium, m4.large, and m4.2xlarge. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup. 
        public var instanceType: String? = nil
        ///  The ID of the backup that you want to use to restore a server. 
        public var backupId: String = ""
        ///  The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key. 
        public var keyPair: String? = nil

        public init() {}

        public init(serverName: String, instanceType: String? = nil, backupId: String, keyPair: String? = nil) {
            self.serverName = serverName
            self.instanceType = instanceType
            self.backupId = backupId
            self.keyPair = keyPair
        }

    }

    public struct DescribeBackupsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call DescribeBackups again, and assign the token from the previous results as the value of the nextToken parameter. If there are no more results, the response object's nextToken parameter value is null. Setting a nextToken value that was not returned in your previous results causes an InvalidNextTokenException to occur. 
        public var nextToken: String? = nil
        /// Contains the response to a DescribeBackups request. 
        public var backups: [Backup]? = nil

        public init() {}

        public init(nextToken: String? = nil, backups: [Backup]? = nil) {
            self.nextToken = nextToken
            self.backups = backups
        }

    }

    public struct DescribeAccountAttributesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeNodeAssociationStatusResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status of the association or disassociation request.   Possible values:     SUCCESS: The association or disassociation succeeded.     FAILED: The association or disassociation failed.     IN_PROGRESS: The association or disassociation is still in progress.   
        public var nodeAssociationStatus: String? = nil

        public init() {}

        public init(nodeAssociationStatus: String? = nil) {
            self.nodeAssociationStatus = nodeAssociationStatus
        }

    }

    public struct DeleteBackupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs. Backup IDs are in the format ServerName-yyyyMMddHHmmssSSS. 
        public var backupId: String = ""

        public init() {}

        public init(backupId: String) {
            self.backupId = backupId
        }

    }

    public struct EngineAttribute: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value of the engine attribute. 
        public var value: String? = nil
        /// The name of the engine attribute. 
        public var name: String? = nil

        public init() {}

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

    }

    public struct UpdateServerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var preferredBackupWindow: String? = nil
        /// The name of the server to update. 
        public var serverName: String = ""
        /// Setting DisableAutomatedBackup to true disables automated or scheduled backups. Automated backups are enabled by default. 
        public var disableAutomatedBackup: Bool? = nil
        /// Sets the number of automated backups that you want to keep. 
        public var backupRetentionCount: Int32? = nil
        public var preferredMaintenanceWindow: String? = nil

        public init() {}

        public init(preferredBackupWindow: String? = nil, serverName: String, disableAutomatedBackup: Bool? = nil, backupRetentionCount: Int32? = nil, preferredMaintenanceWindow: String? = nil) {
            self.preferredBackupWindow = preferredBackupWindow
            self.serverName = serverName
            self.disableAutomatedBackup = disableAutomatedBackup
            self.backupRetentionCount = backupRetentionCount
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
        }

    }

    public struct DeleteServerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DeleteBackupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CreateServerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The server that is created by the request. 
        public var server: Server? = nil

        public init() {}

        public init(server: Server? = nil) {
            self.server = server
        }

    }

    public struct UpdateServerEngineAttributesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains the response to an UpdateServerEngineAttributes request. 
        public var server: Server? = nil

        public init() {}

        public init(server: Server? = nil) {
            self.server = server
        }

    }

}