// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
AWS OpsWorks for Chef Automate  AWS OpsWorks for Chef Automate is a service that runs and manages configuration management servers.   Glossary of terms     Server: A configuration management server that can be highly-available. The configuration manager runs on your instances by using various AWS services, such as Amazon Elastic Compute Cloud (EC2), and potentially Amazon Relational Database Service (RDS). A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks for Chef Automate, you do not start or stop servers. After you create servers, they continue to run until they are deleted.    Engine: The specific configuration manager that you want to use (such as Chef) is the engine.    Backup: This is an application-level backup of the data that the configuration manager stores. A backup creates a .tar.gz file that is stored in an Amazon Simple Storage Service (S3) bucket in your account. AWS OpsWorks for Chef Automate creates the S3 bucket when you launch the first instance. A backup maintains a snapshot of all of a server's important attributes at the time of the backup.    Events: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, etc. When you delete a server, the server's events are also deleted.    AccountAttributes: Every account has attributes that are assigned in the AWS OpsWorks for Chef Automate database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account.     Endpoints  AWS OpsWorks for Chef Automate supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Chef servers can only be accessed or managed within the endpoint in which they are created.   opsworks-cm.us-east-1.amazonaws.com   opsworks-cm.us-west-2.amazonaws.com   opsworks-cm.eu-west-1.amazonaws.com    Throttling limits  All API operations allow for five requests per second with a burst of 10 requests per second.
*/
public struct OpsworksCm {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "OpsWorksCM_V2016_11_01",
            service: "opsworks-cm",
            endpoint: endpoint
        )
    }

    ///   Describes backups. The results are ordered by time, with newest backups first. If you do not specify a BackupId or ServerName, the command returns all backups.   This operation is synchronous.   A ResourceNotFoundException is thrown when the backup does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func describeBackups(_ input: DescribeBackupsRequest) throws -> DescribeBackupsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeBackups", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Creates an application-level backup of a server. While the server is in the BACKING_UP state, the server cannot be changed, and no additional backup can be created.   Backups can be created for servers in RUNNING, HEALTHY, and UNHEALTHY states. By default, you can create a maximum of 50 manual backups.   This operation is asynchronous.   A LimitExceededException is thrown when the maximum number of manual backups is reached. An InvalidStateException is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY. A ResourceNotFoundException is thrown when the server is not found. A ValidationException is thrown when parameters of the request are not valid. 
    public func createBackup(_ input: CreateBackupRequest) throws -> CreateBackupResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateBackup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous.   An InvalidStateException is thrown when a backup deletion is already in progress. A ResourceNotFoundException is thrown when the backup does not exist. A ValidationException is thrown when parameters of the request are not valid. 
    public func deleteBackup(_ input: DeleteBackupRequest) throws -> DeleteBackupResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteBackup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Restores a backup to a server that is in a CONNECTION_LOST, HEALTHY, RUNNING, UNHEALTHY, or TERMINATED state. When you run RestoreServer, the server's EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains the existing server endpoint, so configuration management of the server's client devices (nodes) should continue to work.   This operation is asynchronous.   An InvalidStateException is thrown when the server is not in a valid state. A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func restoreServer(_ input: RestoreServerRequest) throws -> RestoreServerResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "RestoreServer", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Creates and immedately starts a new server. The server is ready to use when it is in the HEALTHY state. By default, you can create a maximum of 10 servers.   This operation is asynchronous.   A LimitExceededException is thrown when you have created the maximum number of servers (10). A ResourceAlreadyExistsException is thrown when a server with the same name already exists in the account. A ResourceNotFoundException is thrown when you specify a backup ID that is not valid or is for a backup that does not exist. A ValidationException is thrown when parameters of the request are not valid.   If you do not specify a security group by adding the SecurityGroupIds parameter, AWS OpsWorks creates a new security group. The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.  By default, the Chef Server is accessible from any IP address. We recommend that you update your security group rules to allow access from known IP addresses and address ranges only. To edit security group rules, open Security Groups in the navigation pane of the EC2 management console. 
    public func createServer(_ input: CreateServerRequest) throws -> CreateServerResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateServer", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying cause of maintenance failure has been resolved. The server is in an UNDER_MAINTENANCE state while maintenance is in progress.   Maintenance can only be started on servers in HEALTHY and UNHEALTHY states. Otherwise, an InvalidStateException is thrown. A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func startMaintenance(_ input: StartMaintenanceRequest) throws -> StartMaintenanceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "StartMaintenance", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Disassociates a node from a Chef server, and removes the node from the Chef server's managed nodes. After a node is disassociated, the node key pair is no longer valid for accessing the Chef API. For more information about how to associate a node, see AssociateNode.  A node can can only be disassociated from a server that is in a HEALTHY state. Otherwise, an InvalidStateException is thrown. A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func disassociateNode(_ input: DisassociateNodeRequest) throws -> DisassociateNodeResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DisassociateNode", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Returns the current status of an existing association or disassociation request.   A ResourceNotFoundException is thrown when no recent association or disassociation request with the specified token is found, or when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func describeNodeAssociationStatus(_ input: DescribeNodeAssociationStatusRequest) throws -> DescribeNodeAssociationStatusResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeNodeAssociationStatus", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Describes your account attributes, and creates requests to increase limits before they are reached or exceeded.   This operation is synchronous. 
    public func describeAccountAttributes(_ input: DescribeAccountAttributesRequest) throws -> DescribeAccountAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeAccountAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Updates engine-specific attributes on a specified server. The server enters the MODIFYING state when this operation is in progress. Only one update can occur at a time. You can use this command to reset the Chef server's private key (CHEF_PIVOTAL_KEY).   This operation is asynchronous.   This operation can only be called for servers in HEALTHY or UNHEALTHY states. Otherwise, an InvalidStateException is raised. A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func updateServerEngineAttributes(_ input: UpdateServerEngineAttributesRequest) throws -> UpdateServerEngineAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateServerEngineAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Lists all configuration management servers that are identified with your account. Only the stored results from Amazon DynamoDB are returned. AWS OpsWorks for Chef Automate does not query other services.   This operation is synchronous.   A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func describeServers(_ input: DescribeServersRequest) throws -> DescribeServersResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeServers", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Updates settings for a server.   This operation is synchronous. 
    public func updateServer(_ input: UpdateServerRequest) throws -> UpdateServerResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateServer", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Describes events for a specified server. Results are ordered by time, with newest events first.   This operation is synchronous.   A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. 
    public func describeEvents(_ input: DescribeEventsRequest) throws -> DescribeEventsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeEvents", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Associates a new node with the Chef server. This command is an alternative to knife bootstrap. For more information about how to disassociate a node, see DisassociateNode.  A node can can only be associated with servers that are in a HEALTHY state. Otherwise, an InvalidStateException is thrown. A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid. The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance.   Example: aws opsworks-cm associate-node --server-name MyServer --node-name MyManagedNode --engine-attributes "Name=MyOrganization,Value=default" "Name=Chef_node_public_key,Value=Public_key_contents" 
    public func associateNode(_ input: AssociateNodeRequest) throws -> AssociateNodeResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "AssociateNode", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///   Deletes the server and the underlying AWS CloudFormation stack (including the server's EC2 instance). When you run this command, the server state is updated to DELETING. After the server is deleted, it is no longer returned by DescribeServer requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted.   This operation is asynchronous.   An InvalidStateException is thrown when a server deletion is already in progress. A ResourceNotFoundException is thrown when the server does not exist. A ValidationException is raised when parameters of the request are not valid.   
    public func deleteServer(_ input: DeleteServerRequest) throws -> DeleteServerResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteServer", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try OpsworksCmResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}