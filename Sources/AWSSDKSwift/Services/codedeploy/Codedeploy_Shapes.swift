// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Codedeploy {

    public struct RevisionLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Location", required: false, type: .structure), 
            AWSShapeMember(label: "gitHubLocation", required: false, type: .structure), 
            AWSShapeMember(label: "revisionType", required: false, type: .enum), 
            AWSShapeMember(label: "string", required: false, type: .structure)
        ]
        /// Information about the location of a revision stored in Amazon S3. 
        public let s3Location: S3Location?
        /// Information about the location of application artifacts stored in GitHub.
        public let gitHubLocation: GitHubLocation?
        /// The type of application revision:   S3: An application revision stored in Amazon S3.   GitHub: An application revision stored in GitHub (EC2/On-premises deployments only)   String: A YAML-formatted or JSON-formatted string (AWS Lambda deployments only)  
        public let revisionType: RevisionLocationType?
        /// Information about the location of an AWS Lambda deployment revision stored as a RawString.
        public let string: RawString?

        public init(s3Location: S3Location? = nil, gitHubLocation: GitHubLocation? = nil, revisionType: RevisionLocationType? = nil, string: RawString? = nil) {
            self.s3Location = s3Location
            self.gitHubLocation = gitHubLocation
            self.revisionType = revisionType
            self.string = string
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
            case gitHubLocation = "gitHubLocation"
            case revisionType = "revisionType"
            case string = "string"
        }
    }

    public struct GetDeploymentConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigInfo", required: false, type: .structure)
        ]
        /// Information about the deployment configuration.
        public let deploymentConfigInfo: DeploymentConfigInfo?

        public init(deploymentConfigInfo: DeploymentConfigInfo? = nil) {
            self.deploymentConfigInfo = deploymentConfigInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigInfo = "deploymentConfigInfo"
        }
    }

    public enum RegistrationStatus: String, CustomStringConvertible, Codable {
        case registered = "Registered"
        case deregistered = "Deregistered"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        /// A unique deployment ID.
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct ListGitHubAccountTokenNamesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An identifier returned from the previous ListGitHubAccountTokenNames call. It can be used to return the next set of names in the list. 
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct GetDeploymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentInfo", required: false, type: .structure)
        ]
        /// Information about the deployment.
        public let deploymentInfo: DeploymentInfo?

        public init(deploymentInfo: DeploymentInfo? = nil) {
            self.deploymentInfo = deploymentInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentInfo = "deploymentInfo"
        }
    }

    public struct SkipWaitTimeForInstanceTerminationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        /// The ID of the blue/green deployment for which you want to skip the instance termination wait time.
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct BatchGetDeploymentInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instancesSummary", required: false, type: .list), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// Information about the instance.
        public let instancesSummary: [InstanceSummary]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(instancesSummary: [InstanceSummary]? = nil, errorMessage: String? = nil) {
            self.instancesSummary = instancesSummary
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case instancesSummary = "instancesSummary"
            case errorMessage = "errorMessage"
        }
    }

    public struct GetDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        /// A deployment ID associated with the applicable IAM user or AWS account.
        public let deploymentId: String

        public init(deploymentId: String) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct DeploymentStyle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentOption", required: false, type: .enum)
        ]
        /// Indicates whether to run an in-place deployment or a blue/green deployment.
        public let deploymentType: DeploymentType?
        /// Indicates whether to route deployment traffic behind a load balancer.
        public let deploymentOption: DeploymentOption?

        public init(deploymentType: DeploymentType? = nil, deploymentOption: DeploymentOption? = nil) {
            self.deploymentType = deploymentType
            self.deploymentOption = deploymentOption
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentType = "deploymentType"
            case deploymentOption = "deploymentOption"
        }
    }

    public struct DeploymentInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "creator", required: false, type: .enum), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "revision", required: false, type: .structure), 
            AWSShapeMember(label: "previousRevision", required: false, type: .structure), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "deploymentOverview", required: false, type: .structure), 
            AWSShapeMember(label: "targetInstances", required: false, type: .structure), 
            AWSShapeMember(label: "completeTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "instanceTerminationWaitTimeStarted", required: false, type: .boolean), 
            AWSShapeMember(label: "rollbackInfo", required: false, type: .structure), 
            AWSShapeMember(label: "ignoreApplicationStopFailures", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "additionalDeploymentStatusInfo", required: false, type: .string), 
            AWSShapeMember(label: "deploymentStatusMessages", required: false, type: .list), 
            AWSShapeMember(label: "updateOutdatedInstancesOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "fileExistsBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "errorInformation", required: false, type: .structure), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp)
        ]
        /// The deployment group name.
        public let deploymentGroupName: String?
        /// Information about the load balancer used in the deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// The means by which the deployment was created:   user: A user created the deployment.   autoscaling: Auto Scaling created the deployment.   codeDeployRollback: A rollback process created the deployment.  
        public let creator: DeploymentCreator?
        /// Information about blue/green deployment options for this deployment.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// Information about the location of stored application artifacts and the service from which to retrieve them.
        public let revision: RevisionLocation?
        /// Information about the application revision that was deployed to the deployment group before the most recent successful deployment.
        public let previousRevision: RevisionLocation?
        /// The destination platform type for the deployment (Lambda or Server).
        public let computePlatform: ComputePlatform?
        /// The deployment ID.
        public let deploymentId: String?
        /// A summary of the deployment status of the instances in the deployment.
        public let deploymentOverview: DeploymentOverview?
        /// Information about the instances that belong to the replacement environment in a blue/green deployment.
        public let targetInstances: TargetInstances?
        /// A timestamp indicating when the deployment was complete.
        public let completeTime: TimeStamp?
        /// Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified; otherwise, 'true' as soon as the termination wait period starts.
        public let instanceTerminationWaitTimeStarted: Bool?
        /// Information about a deployment rollback.
        public let rollbackInfo: RollbackInfo?
        /// If true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        public let ignoreApplicationStopFailures: Bool?
        /// A comment about the deployment.
        public let description: String?
        /// Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
        public let additionalDeploymentStatusInfo: String?
        /// Messages that contain information about the status of a deployment.
        public let deploymentStatusMessages: [String]?
        /// Indicates whether only instances that are not running the latest application revision are to be deployed to.
        public let updateOutdatedInstancesOnly: Bool?
        /// The application name.
        public let applicationName: String?
        /// The current state of the deployment as a whole.
        public let status: DeploymentStatus?
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.   DISALLOW: The deployment fails. This is also the default behavior if no option is specified.   OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.   RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.  
        public let fileExistsBehavior: FileExistsBehavior?
        /// Information about any error associated with this deployment.
        public let errorInformation: ErrorInformation?
        /// Information about the automatic rollback configuration associated with the deployment.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// A timestamp indicating when the deployment was created.
        public let createTime: TimeStamp?
        /// A timestamp indicating when the deployment was deployed to the deployment group. In some cases, the reported value of the start time may be later than the complete time. This is due to differences in the clock settings of back-end servers that participate in the deployment process.
        public let startTime: TimeStamp?

        public init(deploymentGroupName: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, creator: DeploymentCreator? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, revision: RevisionLocation? = nil, previousRevision: RevisionLocation? = nil, computePlatform: ComputePlatform? = nil, deploymentId: String? = nil, deploymentOverview: DeploymentOverview? = nil, targetInstances: TargetInstances? = nil, completeTime: TimeStamp? = nil, instanceTerminationWaitTimeStarted: Bool? = nil, rollbackInfo: RollbackInfo? = nil, ignoreApplicationStopFailures: Bool? = nil, description: String? = nil, additionalDeploymentStatusInfo: String? = nil, deploymentStatusMessages: [String]? = nil, updateOutdatedInstancesOnly: Bool? = nil, applicationName: String? = nil, status: DeploymentStatus? = nil, deploymentConfigName: String? = nil, deploymentStyle: DeploymentStyle? = nil, fileExistsBehavior: FileExistsBehavior? = nil, errorInformation: ErrorInformation? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, createTime: TimeStamp? = nil, startTime: TimeStamp? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.loadBalancerInfo = loadBalancerInfo
            self.creator = creator
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.revision = revision
            self.previousRevision = previousRevision
            self.computePlatform = computePlatform
            self.deploymentId = deploymentId
            self.deploymentOverview = deploymentOverview
            self.targetInstances = targetInstances
            self.completeTime = completeTime
            self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
            self.rollbackInfo = rollbackInfo
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.description = description
            self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
            self.deploymentStatusMessages = deploymentStatusMessages
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
            self.applicationName = applicationName
            self.status = status
            self.deploymentConfigName = deploymentConfigName
            self.deploymentStyle = deploymentStyle
            self.fileExistsBehavior = fileExistsBehavior
            self.errorInformation = errorInformation
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.createTime = createTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case loadBalancerInfo = "loadBalancerInfo"
            case creator = "creator"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case revision = "revision"
            case previousRevision = "previousRevision"
            case computePlatform = "computePlatform"
            case deploymentId = "deploymentId"
            case deploymentOverview = "deploymentOverview"
            case targetInstances = "targetInstances"
            case completeTime = "completeTime"
            case instanceTerminationWaitTimeStarted = "instanceTerminationWaitTimeStarted"
            case rollbackInfo = "rollbackInfo"
            case ignoreApplicationStopFailures = "ignoreApplicationStopFailures"
            case description = "description"
            case additionalDeploymentStatusInfo = "additionalDeploymentStatusInfo"
            case deploymentStatusMessages = "deploymentStatusMessages"
            case updateOutdatedInstancesOnly = "updateOutdatedInstancesOnly"
            case applicationName = "applicationName"
            case status = "status"
            case deploymentConfigName = "deploymentConfigName"
            case deploymentStyle = "deploymentStyle"
            case fileExistsBehavior = "fileExistsBehavior"
            case errorInformation = "errorInformation"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case createTime = "createTime"
            case startTime = "startTime"
        }
    }

    public enum GreenFleetProvisioningAction: String, CustomStringConvertible, Codable {
        case discoverExisting = "DISCOVER_EXISTING"
        case copyAutoScalingGroup = "COPY_AUTO_SCALING_GROUP"
        public var description: String { return self.rawValue }
    }

    public enum ComputePlatform: String, CustomStringConvertible, Codable {
        case server = "Server"
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct DeleteGitHubAccountTokenInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tokenName", required: false, type: .string)
        ]
        /// The name of the GitHub account connection to delete.
        public let tokenName: String?

        public init(tokenName: String? = nil) {
            self.tokenName = tokenName
        }

        private enum CodingKeys: String, CodingKey {
            case tokenName = "tokenName"
        }
    }

    public struct TimeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "start", required: false, type: .timestamp), 
            AWSShapeMember(label: "end", required: false, type: .timestamp)
        ]
        /// The start time of the time range.  Specify null to leave the start time open-ended. 
        public let start: TimeStamp?
        /// The end time of the time range.  Specify null to leave the end time open-ended. 
        public let end: TimeStamp?

        public init(start: TimeStamp? = nil, end: TimeStamp? = nil) {
            self.start = start
            self.end = end
        }

        private enum CodingKeys: String, CodingKey {
            case start = "start"
            case end = "end"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The tag's value.
        public let value: String?
        /// The tag's key.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct BatchGetOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The names of the on-premises instances about which to get information.
        public let instanceNames: [String]

        public init(instanceNames: [String]) {
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
        }
    }

    public enum DeploymentType: String, CustomStringConvertible, Codable {
        case inPlace = "IN_PLACE"
        case blueGreen = "BLUE_GREEN"
        public var description: String { return self.rawValue }
    }

    public enum AutoRollbackEvent: String, CustomStringConvertible, Codable {
        case deploymentFailure = "DEPLOYMENT_FAILURE"
        case deploymentStopOnAlarm = "DEPLOYMENT_STOP_ON_ALARM"
        case deploymentStopOnRequest = "DEPLOYMENT_STOP_ON_REQUEST"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationRevisionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revisions", required: true, type: .list), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// Information to get about the application revisions, including type and location.
        public let revisions: [RevisionLocation]
        /// The name of an AWS CodeDeploy application about which to get revision information.
        public let applicationName: String

        public init(revisions: [RevisionLocation], applicationName: String) {
            self.revisions = revisions
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revisions = "revisions"
            case applicationName = "applicationName"
        }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The on-premises instance tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        public let `type`: TagFilterType?
        /// The on-premises instance tag filter value.
        public let value: String?
        /// The on-premises instance tag filter key.
        public let key: String?

        public init(type: TagFilterType? = nil, value: String? = nil, key: String? = nil) {
            self.`type` = `type`
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
            case key = "Key"
        }
    }

    public struct PutLifecycleEventHookExecutionStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "lifecycleEventHookExecutionId", required: false, type: .string)
        ]
        /// The ID of the deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event.
        public let deploymentId: String?
        /// The result of a Lambda function that validates a deployment lifecycle event (Succeeded or Failed).
        public let status: LifecycleEventStatus?
        /// The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is specified in the hooks section of the AppSpec file.
        public let lifecycleEventHookExecutionId: String?

        public init(deploymentId: String? = nil, status: LifecycleEventStatus? = nil, lifecycleEventHookExecutionId: String? = nil) {
            self.deploymentId = deploymentId
            self.status = status
            self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case status = "status"
            case lifecycleEventHookExecutionId = "lifecycleEventHookExecutionId"
        }
    }

    public enum DeploymentCreator: String, CustomStringConvertible, Codable {
        case user = "user"
        case autoscaling = "autoscaling"
        case codedeployrollback = "codeDeployRollback"
        public var description: String { return self.rawValue }
    }

    public struct ErrorInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "code", required: false, type: .enum), 
            AWSShapeMember(label: "message", required: false, type: .string)
        ]
        /// For information about additional error codes, see Error Codes for AWS CodeDeploy in the AWS CodeDeploy User Guide. The error code:   APPLICATION_MISSING: The application was missing. This error code will most likely be raised if the application is deleted after the deployment is created but before it is started.   DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code will most likely be raised if the deployment group is deleted after the deployment is created but before it is started.   HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.   HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.   IAM_ROLE_MISSING: The service role cannot be accessed.   IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.   INTERNAL_ERROR: There was an internal error.   NO_EC2_SUBSCRIPTION: The calling account is not subscribed to the Amazon EC2 service.   NO_INSTANCES: No instance were specified, or no instance can be found.   OVER_MAX_INSTANCES: The maximum number of instance was exceeded.   THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.   TIMEOUT: The deployment has timed out.   REVISION_MISSING: The revision ID was missing. This error code will most likely be raised if the revision is deleted after the deployment is created but before it is started.  
        public let code: ErrorCode?
        /// An accompanying error message.
        public let message: String?

        public init(code: ErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ListApplicationRevisionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "s3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "s3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "sortBy", required: false, type: .enum), 
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "deployed", required: false, type: .enum)
        ]
        /// An identifier returned from the previous list application revisions call. It can be used to return the next set of applications in the list.
        public let nextToken: String?
        /// The order in which to sort the list results:   ascending: ascending order.   descending: descending order.   If not specified, the results will be sorted in ascending order. If set to null, the results will be sorted in an arbitrary order.
        public let sortOrder: SortOrder?
        /// A key prefix for the set of Amazon S3 objects to limit the search for revisions.
        public let s3KeyPrefix: String?
        /// An Amazon S3 bucket name to limit the search for revisions. If set to null, all of the user's buckets will be searched.
        public let s3Bucket: String?
        /// The column name to use to sort the list results:   registerTime: Sort by the time the revisions were registered with AWS CodeDeploy.   firstUsedTime: Sort by the time the revisions were first used in a deployment.   lastUsedTime: Sort by the time the revisions were last used in a deployment.   If not specified or set to null, the results will be returned in an arbitrary order.
        public let sortBy: ApplicationRevisionSortBy?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String
        /// Whether to list revisions based on whether the revision is the target revision of an deployment group:   include: List revisions that are target revisions of a deployment group.   exclude: Do not list revisions that are target revisions of a deployment group.   ignore: List all revisions.  
        public let deployed: ListStateFilterAction?

        public init(nextToken: String? = nil, sortOrder: SortOrder? = nil, s3KeyPrefix: String? = nil, s3Bucket: String? = nil, sortBy: ApplicationRevisionSortBy? = nil, applicationName: String, deployed: ListStateFilterAction? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
            self.s3KeyPrefix = s3KeyPrefix
            self.s3Bucket = s3Bucket
            self.sortBy = sortBy
            self.applicationName = applicationName
            self.deployed = deployed
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case sortOrder = "sortOrder"
            case s3KeyPrefix = "s3KeyPrefix"
            case s3Bucket = "s3Bucket"
            case sortBy = "sortBy"
            case applicationName = "applicationName"
            case deployed = "deployed"
        }
    }

    public struct BatchGetDeploymentsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentsInfo", required: false, type: .list)
        ]
        /// Information about the deployments.
        public let deploymentsInfo: [DeploymentInfo]?

        public init(deploymentsInfo: [DeploymentInfo]? = nil) {
            self.deploymentsInfo = deploymentsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentsInfo = "deploymentsInfo"
        }
    }

    public struct CreateApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        ///  The destination platform type for the deployment (Lambda or Server).
        public let computePlatform: ComputePlatform?
        /// The name of the application. This name must be unique with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(computePlatform: ComputePlatform? = nil, applicationName: String) {
            self.computePlatform = computePlatform
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case computePlatform = "computePlatform"
            case applicationName = "applicationName"
        }
    }

    public struct UpdateDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hooksNotCleanedUp", required: false, type: .list)
        ]
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account.
        public let hooksNotCleanedUp: [AutoScalingGroup]?

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

        private enum CodingKeys: String, CodingKey {
            case hooksNotCleanedUp = "hooksNotCleanedUp"
        }
    }

    public struct Alarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct CreateDeploymentConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigId", required: false, type: .string)
        ]
        /// A unique deployment configuration ID.
        public let deploymentConfigId: String?

        public init(deploymentConfigId: String? = nil) {
            self.deploymentConfigId = deploymentConfigId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigId = "deploymentConfigId"
        }
    }

    public struct GetOnPremisesInstanceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceInfo", required: false, type: .structure)
        ]
        /// Information about the on-premises instance.
        public let instanceInfo: InstanceInfo?

        public init(instanceInfo: InstanceInfo? = nil) {
            self.instanceInfo = instanceInfo
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInfo = "instanceInfo"
        }
    }

    public struct GetDeploymentInstanceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSummary", required: false, type: .structure)
        ]
        /// Information about the instance.
        public let instanceSummary: InstanceSummary?

        public init(instanceSummary: InstanceSummary? = nil) {
            self.instanceSummary = instanceSummary
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSummary = "instanceSummary"
        }
    }

    public struct DeploymentReadyOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actionOnTimeout", required: false, type: .enum), 
            AWSShapeMember(label: "waitTimeInMinutes", required: false, type: .integer)
        ]
        /// Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.   CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.   STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using ContinueDeployment. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.  
        public let actionOnTimeout: DeploymentReadyAction?
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout
        public let waitTimeInMinutes: Int32?

        public init(actionOnTimeout: DeploymentReadyAction? = nil, waitTimeInMinutes: Int32? = nil) {
            self.actionOnTimeout = actionOnTimeout
            self.waitTimeInMinutes = waitTimeInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnTimeout = "actionOnTimeout"
            case waitTimeInMinutes = "waitTimeInMinutes"
        }
    }

    public struct RollbackInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rollbackDeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "rollbackTriggeringDeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "rollbackMessage", required: false, type: .string)
        ]
        /// The ID of the deployment rollback.
        public let rollbackDeploymentId: String?
        /// The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        public let rollbackTriggeringDeploymentId: String?
        /// Information describing the status of a deployment rollback; for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded. 
        public let rollbackMessage: String?

        public init(rollbackDeploymentId: String? = nil, rollbackTriggeringDeploymentId: String? = nil, rollbackMessage: String? = nil) {
            self.rollbackDeploymentId = rollbackDeploymentId
            self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
            self.rollbackMessage = rollbackMessage
        }

        private enum CodingKeys: String, CodingKey {
            case rollbackDeploymentId = "rollbackDeploymentId"
            case rollbackTriggeringDeploymentId = "rollbackTriggeringDeploymentId"
            case rollbackMessage = "rollbackMessage"
        }
    }

    public struct TargetGroupInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes. 
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct TimeBasedCanary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "canaryInterval", required: false, type: .integer), 
            AWSShapeMember(label: "canaryPercentage", required: false, type: .integer)
        ]
        /// The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.
        public let canaryInterval: Int32?
        /// The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.
        public let canaryPercentage: Int32?

        public init(canaryInterval: Int32? = nil, canaryPercentage: Int32? = nil) {
            self.canaryInterval = canaryInterval
            self.canaryPercentage = canaryPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case canaryInterval = "canaryInterval"
            case canaryPercentage = "canaryPercentage"
        }
    }

    public struct ListDeploymentsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "createTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "includeOnlyStatuses", required: false, type: .list), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
        public let nextToken: String?
        /// A time range (start and end) for returning a subset of the list of deployments.
        public let createTimeRange: TimeRange?
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String?
        /// A subset of deployments to list by status:   Created: Include created deployments in the resulting list.   Queued: Include queued deployments in the resulting list.   In Progress: Include in-progress deployments in the resulting list.   Succeeded: Include successful deployments in the resulting list.   Failed: Include failed deployments in the resulting list.   Stopped: Include stopped deployments in the resulting list.  
        public let includeOnlyStatuses: [DeploymentStatus]?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String?

        public init(nextToken: String? = nil, createTimeRange: TimeRange? = nil, deploymentGroupName: String? = nil, includeOnlyStatuses: [DeploymentStatus]? = nil, applicationName: String? = nil) {
            self.nextToken = nextToken
            self.createTimeRange = createTimeRange
            self.deploymentGroupName = deploymentGroupName
            self.includeOnlyStatuses = includeOnlyStatuses
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case createTimeRange = "createTimeRange"
            case deploymentGroupName = "deploymentGroupName"
            case includeOnlyStatuses = "includeOnlyStatuses"
            case applicationName = "applicationName"
        }
    }

    public struct BatchGetDeploymentsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentIds", required: true, type: .list)
        ]
        /// A list of deployment IDs, separated by spaces.
        public let deploymentIds: [String]

        public init(deploymentIds: [String]) {
            self.deploymentIds = deploymentIds
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentIds = "deploymentIds"
        }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case blue = "Blue"
        case green = "Green"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hooksNotCleanedUp", required: false, type: .list)
        ]
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
        public let hooksNotCleanedUp: [AutoScalingGroup]?

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

        private enum CodingKeys: String, CodingKey {
            case hooksNotCleanedUp = "hooksNotCleanedUp"
        }
    }

    public struct ListApplicationRevisionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revisions", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of locations that contain the matching revisions.
        public let revisions: [RevisionLocation]?
        /// If a large amount of information is returned, an identifier will also be returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
        public let nextToken: String?

        public init(revisions: [RevisionLocation]? = nil, nextToken: String? = nil) {
            self.revisions = revisions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case revisions = "revisions"
            case nextToken = "nextToken"
        }
    }

    public struct ListOnPremisesInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceNames", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of matching on-premises instance names.
        public let instanceNames: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
        public let nextToken: String?

        public init(instanceNames: [String]? = nil, nextToken: String? = nil) {
            self.instanceNames = instanceNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
            case nextToken = "nextToken"
        }
    }

    public struct ListDeploymentConfigsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An identifier returned from the previous list deployment configurations call. It can be used to return the next set of deployment configurations in the list. 
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public enum InstanceAction: String, CustomStringConvertible, Codable {
        case terminate = "TERMINATE"
        case keepAlive = "KEEP_ALIVE"
        public var description: String { return self.rawValue }
    }

    public enum EC2TagFilterType: String, CustomStringConvertible, Codable {
        case keyOnly = "KEY_ONLY"
        case valueOnly = "VALUE_ONLY"
        case keyAndValue = "KEY_AND_VALUE"
        public var description: String { return self.rawValue }
    }

    public enum LifecycleErrorCode: String, CustomStringConvertible, Codable {
        case success = "Success"
        case scriptmissing = "ScriptMissing"
        case scriptnotexecutable = "ScriptNotExecutable"
        case scripttimedout = "ScriptTimedOut"
        case scriptfailed = "ScriptFailed"
        case unknownerror = "UnknownError"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationsInfo", required: false, type: .list)
        ]
        /// Information about the applications.
        public let applicationsInfo: [ApplicationInfo]?

        public init(applicationsInfo: [ApplicationInfo]? = nil) {
            self.applicationsInfo = applicationsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case applicationsInfo = "applicationsInfo"
        }
    }

    public struct BlueGreenDeploymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "terminateBlueInstancesOnDeploymentSuccess", required: false, type: .structure), 
            AWSShapeMember(label: "greenFleetProvisioningOption", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentReadyOption", required: false, type: .structure)
        ]
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment.
        public let terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption?
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment.
        public let greenFleetProvisioningOption: GreenFleetProvisioningOption?
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        public let deploymentReadyOption: DeploymentReadyOption?

        public init(terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption? = nil, greenFleetProvisioningOption: GreenFleetProvisioningOption? = nil, deploymentReadyOption: DeploymentReadyOption? = nil) {
            self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
            self.greenFleetProvisioningOption = greenFleetProvisioningOption
            self.deploymentReadyOption = deploymentReadyOption
        }

        private enum CodingKeys: String, CodingKey {
            case terminateBlueInstancesOnDeploymentSuccess = "terminateBlueInstancesOnDeploymentSuccess"
            case greenFleetProvisioningOption = "greenFleetProvisioningOption"
            case deploymentReadyOption = "deploymentReadyOption"
        }
    }

    public struct RawString: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "content", required: false, type: .string), 
            AWSShapeMember(label: "sha256", required: false, type: .string)
        ]
        /// The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events.
        public let content: String?
        /// The SHA256 hash value of the revision that is specified as a RawString.
        public let sha256: String?

        public init(content: String? = nil, sha256: String? = nil) {
            self.content = content
            self.sha256 = sha256
        }

        private enum CodingKeys: String, CodingKey {
            case content = "content"
            case sha256 = "sha256"
        }
    }

    public struct BatchGetDeploymentGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupsInfo", required: false, type: .list), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// Information about the deployment groups.
        public let deploymentGroupsInfo: [DeploymentGroupInfo]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(deploymentGroupsInfo: [DeploymentGroupInfo]? = nil, errorMessage: String? = nil) {
            self.deploymentGroupsInfo = deploymentGroupsInfo
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupsInfo = "deploymentGroupsInfo"
            case errorMessage = "errorMessage"
        }
    }

    public struct ContinueDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string)
        ]
        /// The deployment ID of the blue/green deployment for which you want to start rerouting traffic to the replacement environment.
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
        }
    }

    public struct DeleteDeploymentConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: true, type: .string)
        ]
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        public let deploymentConfigName: String

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
        }
    }

    public struct AutoScalingGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "hook", required: false, type: .string)
        ]
        /// The Auto Scaling group name.
        public let name: String?
        /// An Auto Scaling lifecycle event hook name.
        public let hook: String?

        public init(name: String? = nil, hook: String? = nil) {
            self.name = name
            self.hook = hook
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case hook = "hook"
        }
    }

    public struct ListDeploymentGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
        public let nextToken: String?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(nextToken: String? = nil, applicationName: String) {
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case applicationName = "applicationName"
        }
    }

    public struct ListDeploymentInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceStatusFilter", required: false, type: .list), 
            AWSShapeMember(label: "instanceTypeFilter", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        /// A subset of instances to list by status:   Pending: Include those instance with pending deployments.   InProgress: Include those instance where deployments are still in progress.   Succeeded: Include those instances with successful deployments.   Failed: Include those instance with failed deployments.   Skipped: Include those instance with skipped deployments.   Unknown: Include those instance with deployments in an unknown state.  
        public let instanceStatusFilter: [InstanceStatus]?
        /// The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
        public let instanceTypeFilter: [InstanceType]?
        /// An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
        public let nextToken: String?
        /// The unique ID of a deployment.
        public let deploymentId: String

        public init(instanceStatusFilter: [InstanceStatus]? = nil, instanceTypeFilter: [InstanceType]? = nil, nextToken: String? = nil, deploymentId: String) {
            self.instanceStatusFilter = instanceStatusFilter
            self.instanceTypeFilter = instanceTypeFilter
            self.nextToken = nextToken
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStatusFilter = "instanceStatusFilter"
            case instanceTypeFilter = "instanceTypeFilter"
            case nextToken = "nextToken"
            case deploymentId = "deploymentId"
        }
    }

    public struct TimeBasedLinear: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "linearPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "linearInterval", required: false, type: .integer)
        ]
        /// The percentage of traffic that is shifted at the start of each increment of a TimeBasedLinear deployment.
        public let linearPercentage: Int32?
        /// The number of minutes between each incremental traffic shift of a TimeBasedLinear deployment.
        public let linearInterval: Int32?

        public init(linearPercentage: Int32? = nil, linearInterval: Int32? = nil) {
            self.linearPercentage = linearPercentage
            self.linearInterval = linearInterval
        }

        private enum CodingKeys: String, CodingKey {
            case linearPercentage = "linearPercentage"
            case linearInterval = "linearInterval"
        }
    }

    public enum StopStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public enum RevisionLocationType: String, CustomStringConvertible, Codable {
        case s3 = "S3"
        case github = "GitHub"
        case string = "String"
        public var description: String { return self.rawValue }
    }

    public enum TriggerEventType: String, CustomStringConvertible, Codable {
        case deploymentstart = "DeploymentStart"
        case deploymentsuccess = "DeploymentSuccess"
        case deploymentfailure = "DeploymentFailure"
        case deploymentstop = "DeploymentStop"
        case deploymentrollback = "DeploymentRollback"
        case deploymentready = "DeploymentReady"
        case instancestart = "InstanceStart"
        case instancesuccess = "InstanceSuccess"
        case instancefailure = "InstanceFailure"
        case instanceready = "InstanceReady"
        public var description: String { return self.rawValue }
    }

    public struct DeleteGitHubAccountTokenOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tokenName", required: false, type: .string)
        ]
        /// The name of the GitHub account connection that was deleted.
        public let tokenName: String?

        public init(tokenName: String? = nil) {
            self.tokenName = tokenName
        }

        private enum CodingKeys: String, CodingKey {
            case tokenName = "tokenName"
        }
    }

    public enum ListStateFilterAction: String, CustomStringConvertible, Codable {
        case include = "include"
        case exclude = "exclude"
        case ignore = "ignore"
        public var description: String { return self.rawValue }
    }

    public struct DeleteApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
        }
    }

    public struct LoadBalancerInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetGroupInfoList", required: false, type: .list), 
            AWSShapeMember(label: "elbInfoList", required: false, type: .list)
        ]
        /// An array containing information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.   Adding more than one target group to the array is not supported.  
        public let targetGroupInfoList: [TargetGroupInfo]?
        /// An array containing information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.   Adding more than one load balancer to the array is not supported.  
        public let elbInfoList: [ELBInfo]?

        public init(targetGroupInfoList: [TargetGroupInfo]? = nil, elbInfoList: [ELBInfo]? = nil) {
            self.targetGroupInfoList = targetGroupInfoList
            self.elbInfoList = elbInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupInfoList = "targetGroupInfoList"
            case elbInfoList = "elbInfoList"
        }
    }

    public struct CreateDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "serviceRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "alarmConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesTagSet", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "triggerConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesInstanceTagFilters", required: false, type: .list), 
            AWSShapeMember(label: "ec2TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure)
        ]
        /// The name of a new deployment group for the specified application.
        public let deploymentGroupName: String
        /// A service role ARN that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
        public let serviceRoleArn: String
        /// Information about groups of tags applied to EC2 instances. The deployment group will include only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
        public let ec2TagSet: EC2TagSet?
        /// Information about the load balancer used in a deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// Information to add about Amazon CloudWatch alarms when the deployment group is created.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// Information about groups of tags applied to on-premises instances. The deployment group will include only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        public let onPremisesTagSet: OnPremisesTagSet?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String
        /// A list of associated Auto Scaling groups.
        public let autoScalingGroups: [String]?
        /// If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or the deployment group. For more information about the predefined deployment configurations in AWS CodeDeploy, see Working with Deployment Groups in AWS CodeDeploy in the AWS CodeDeploy User Guide.
        public let deploymentConfigName: String?
        /// Information about triggers to create when the deployment group is created. For examples, see Create a Trigger for an AWS CodeDeploy Event in the AWS CodeDeploy User Guide.
        public let triggerConfigurations: [TriggerConfig]?
        /// Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The on-premises instance tags on which to filter. The deployment group will include on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// The Amazon EC2 tags on which to filter. The deployment group will include EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Configuration information for an automatic rollback that is added when a deployment group is created.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?

        public init(deploymentGroupName: String, serviceRoleArn: String, ec2TagSet: EC2TagSet? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, onPremisesTagSet: OnPremisesTagSet? = nil, applicationName: String, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.serviceRoleArn = serviceRoleArn
            self.ec2TagSet = ec2TagSet
            self.loadBalancerInfo = loadBalancerInfo
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.onPremisesTagSet = onPremisesTagSet
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case serviceRoleArn = "serviceRoleArn"
            case ec2TagSet = "ec2TagSet"
            case loadBalancerInfo = "loadBalancerInfo"
            case alarmConfiguration = "alarmConfiguration"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case onPremisesTagSet = "onPremisesTagSet"
            case applicationName = "applicationName"
            case autoScalingGroups = "autoScalingGroups"
            case deploymentConfigName = "deploymentConfigName"
            case triggerConfigurations = "triggerConfigurations"
            case deploymentStyle = "deploymentStyle"
            case onPremisesInstanceTagFilters = "onPremisesInstanceTagFilters"
            case ec2TagFilters = "ec2TagFilters"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
        }
    }

    public struct BatchGetDeploymentInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: true, type: .string), 
            AWSShapeMember(label: "instanceIds", required: true, type: .list)
        ]
        /// The unique ID of a deployment.
        public let deploymentId: String
        /// The unique IDs of instances in the deployment group.
        public let instanceIds: [String]

        public init(deploymentId: String, instanceIds: [String]) {
            self.deploymentId = deploymentId
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case instanceIds = "instanceIds"
        }
    }

    public struct BatchGetOnPremisesInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceInfos", required: false, type: .list)
        ]
        /// Information about the on-premises instances.
        public let instanceInfos: [InstanceInfo]?

        public init(instanceInfos: [InstanceInfo]? = nil) {
            self.instanceInfos = instanceInfos
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInfos = "instanceInfos"
        }
    }

    public enum LifecycleEventStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct StopDeploymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]
        /// The status of the stop deployment operation:   Pending: The stop operation is pending.   Succeeded: The stop operation was successful.  
        public let status: StopStatus?
        /// An accompanying status message.
        public let statusMessage: String?

        public init(status: StopStatus? = nil, statusMessage: String? = nil) {
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case statusMessage = "statusMessage"
        }
    }

    public struct OnPremisesTagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "onPremisesTagSetList", required: false, type: .list)
        ]
        /// A list containing other lists of on-premises instance tag groups. In order for an instance to be included in the deployment group, it must be identified by all the tag groups in the list.
        public let onPremisesTagSetList: [[TagFilter]]?

        public init(onPremisesTagSetList: [[TagFilter]]? = nil) {
            self.onPremisesTagSetList = onPremisesTagSetList
        }

        private enum CodingKeys: String, CodingKey {
            case onPremisesTagSetList = "onPremisesTagSetList"
        }
    }

    public struct AutoRollbackConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean)
        ]
        /// The event type or types that trigger a rollback.
        public let events: [AutoRollbackEvent]?
        /// Indicates whether a defined automatic rollback configuration is currently enabled.
        public let enabled: Bool?

        public init(events: [AutoRollbackEvent]? = nil, enabled: Bool? = nil) {
            self.events = events
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
            case enabled = "enabled"
        }
    }

    public struct ListDeploymentGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroups", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// A list of corresponding deployment group names.
        public let deploymentGroups: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
        public let nextToken: String?
        /// The application name.
        public let applicationName: String?

        public init(deploymentGroups: [String]? = nil, nextToken: String? = nil, applicationName: String? = nil) {
            self.deploymentGroups = deploymentGroups
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroups = "deploymentGroups"
            case nextToken = "nextToken"
            case applicationName = "applicationName"
        }
    }

    public enum FileExistsBehavior: String, CustomStringConvertible, Codable {
        case disallow = "DISALLOW"
        case overwrite = "OVERWRITE"
        case retain = "RETAIN"
        public var description: String { return self.rawValue }
    }

    public struct AddTagsToOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The tag key-value pairs to add to the on-premises instances. Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.
        public let tags: [Tag]
        /// The names of the on-premises instances to which to add tags.
        public let instanceNames: [String]

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case instanceNames = "instanceNames"
        }
    }

    public enum InstanceStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public enum TrafficRoutingType: String, CustomStringConvertible, Codable {
        case timebasedcanary = "TimeBasedCanary"
        case timebasedlinear = "TimeBasedLinear"
        case allatonce = "AllAtOnce"
        public var description: String { return self.rawValue }
    }

    public struct ListDeploymentConfigsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfigsList", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
        public let nextToken: String?
        /// A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
        public let deploymentConfigsList: [String]?

        public init(nextToken: String? = nil, deploymentConfigsList: [String]? = nil) {
            self.nextToken = nextToken
            self.deploymentConfigsList = deploymentConfigsList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case deploymentConfigsList = "deploymentConfigsList"
        }
    }

    public struct GitHubLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "repository", required: false, type: .string)
        ]
        /// The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
        public let commitId: String?
        /// The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision.  Specified as account/repository.
        public let repository: String?

        public init(commitId: String? = nil, repository: String? = nil) {
            self.commitId = commitId
            self.repository = repository
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case repository = "repository"
        }
    }

    public struct CreateDeploymentConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: true, type: .string), 
            AWSShapeMember(label: "minimumHealthyHosts", required: false, type: .structure), 
            AWSShapeMember(label: "trafficRoutingConfig", required: false, type: .structure), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum)
        ]
        /// The name of the deployment configuration to create.
        public let deploymentConfigName: String
        /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:   HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.   FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.   The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
        public let minimumHealthyHosts: MinimumHealthyHosts?
        /// The configuration that specifies how the deployment traffic will be routed.
        public let trafficRoutingConfig: TrafficRoutingConfig?
        /// The destination platform type for the deployment (Lambda or Server&gt;).
        public let computePlatform: ComputePlatform?

        public init(deploymentConfigName: String, minimumHealthyHosts: MinimumHealthyHosts? = nil, trafficRoutingConfig: TrafficRoutingConfig? = nil, computePlatform: ComputePlatform? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
            self.trafficRoutingConfig = trafficRoutingConfig
            self.computePlatform = computePlatform
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
            case minimumHealthyHosts = "minimumHealthyHosts"
            case trafficRoutingConfig = "trafficRoutingConfig"
            case computePlatform = "computePlatform"
        }
    }

    public struct ListOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagFilters", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "registrationStatus", required: false, type: .enum)
        ]
        /// The on-premises instance tags that will be used to restrict the corresponding on-premises instance names returned.
        public let tagFilters: [TagFilter]?
        /// An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
        public let nextToken: String?
        /// The registration status of the on-premises instances:   Deregistered: Include deregistered on-premises instances in the resulting list.   Registered: Include registered on-premises instances in the resulting list.  
        public let registrationStatus: RegistrationStatus?

        public init(tagFilters: [TagFilter]? = nil, nextToken: String? = nil, registrationStatus: RegistrationStatus? = nil) {
            self.tagFilters = tagFilters
            self.nextToken = nextToken
            self.registrationStatus = registrationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case tagFilters = "tagFilters"
            case nextToken = "nextToken"
            case registrationStatus = "registrationStatus"
        }
    }

    public struct RegisterApplicationRevisionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "revision", required: true, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// A comment about the revision.
        public let description: String?
        /// Information about the application revision to register, including type and location.
        public let revision: RevisionLocation
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(description: String? = nil, revision: RevisionLocation, applicationName: String) {
            self.description = description
            self.revision = revision
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case revision = "revision"
            case applicationName = "applicationName"
        }
    }

    public struct CreateApplicationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationId", required: false, type: .string)
        ]
        /// A unique application ID.
        public let applicationId: String?

        public init(applicationId: String? = nil) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "applicationId"
        }
    }

    public struct RemoveTagsFromOnPremisesInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The tag key-value pairs to remove from the on-premises instances.
        public let tags: [Tag]
        /// The names of the on-premises instances from which to remove tags.
        public let instanceNames: [String]

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case instanceNames = "instanceNames"
        }
    }

    public struct RevisionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "genericRevisionInfo", required: false, type: .structure), 
            AWSShapeMember(label: "revisionLocation", required: false, type: .structure)
        ]
        /// Information about an application revision, including usage details and associated deployment groups.
        public let genericRevisionInfo: GenericRevisionInfo?
        /// Information about the location and type of an application revision.
        public let revisionLocation: RevisionLocation?

        public init(genericRevisionInfo: GenericRevisionInfo? = nil, revisionLocation: RevisionLocation? = nil) {
            self.genericRevisionInfo = genericRevisionInfo
            self.revisionLocation = revisionLocation
        }

        private enum CodingKeys: String, CodingKey {
            case genericRevisionInfo = "genericRevisionInfo"
            case revisionLocation = "revisionLocation"
        }
    }

    public struct InvalidInstanceIdException: AWSShape {

    }

    public struct EC2TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        public let `type`: EC2TagFilterType?
        /// The tag filter value.
        public let value: String?
        /// The tag filter key.
        public let key: String?

        public init(type: EC2TagFilterType? = nil, value: String? = nil, key: String? = nil) {
            self.`type` = `type`
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeploymentGroupInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastSuccessfulDeployment", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentGroupId", required: false, type: .string), 
            AWSShapeMember(label: "alarmConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesTagSet", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "triggerConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "lastAttemptedDeployment", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesInstanceTagFilters", required: false, type: .list), 
            AWSShapeMember(label: "ec2TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "targetRevision", required: false, type: .structure)
        ]
        /// Information about the most recent successful deployment to the deployment group.
        public let lastSuccessfulDeployment: LastDeploymentInfo?
        /// The deployment group name.
        public let deploymentGroupName: String?
        /// A service role ARN.
        public let serviceRoleArn: String?
        /// Information about groups of tags applied to an EC2 instance. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
        public let ec2TagSet: EC2TagSet?
        /// Information about the load balancer to use in a deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// The deployment group ID.
        public let deploymentGroupId: String?
        /// A list of alarms associated with the deployment group.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        public let onPremisesTagSet: OnPremisesTagSet?
        /// The application name.
        public let applicationName: String?
        /// A list of associated Auto Scaling groups.
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about triggers associated with the deployment group.
        public let triggerConfigurations: [TriggerConfig]?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The destination platform type for the deployment group (Lambda or Server).
        public let computePlatform: ComputePlatform?
        /// Information about the most recent attempted deployment to the deployment group.
        public let lastAttemptedDeployment: LastDeploymentInfo?
        /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Information about the automatic rollback configuration associated with the deployment group.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// Information about the deployment group's target revision, including type and location.
        public let targetRevision: RevisionLocation?

        public init(lastSuccessfulDeployment: LastDeploymentInfo? = nil, deploymentGroupName: String? = nil, serviceRoleArn: String? = nil, ec2TagSet: EC2TagSet? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, deploymentGroupId: String? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, onPremisesTagSet: OnPremisesTagSet? = nil, applicationName: String? = nil, autoScalingGroups: [AutoScalingGroup]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, computePlatform: ComputePlatform? = nil, lastAttemptedDeployment: LastDeploymentInfo? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, targetRevision: RevisionLocation? = nil) {
            self.lastSuccessfulDeployment = lastSuccessfulDeployment
            self.deploymentGroupName = deploymentGroupName
            self.serviceRoleArn = serviceRoleArn
            self.ec2TagSet = ec2TagSet
            self.loadBalancerInfo = loadBalancerInfo
            self.deploymentGroupId = deploymentGroupId
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.onPremisesTagSet = onPremisesTagSet
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.computePlatform = computePlatform
            self.lastAttemptedDeployment = lastAttemptedDeployment
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.targetRevision = targetRevision
        }

        private enum CodingKeys: String, CodingKey {
            case lastSuccessfulDeployment = "lastSuccessfulDeployment"
            case deploymentGroupName = "deploymentGroupName"
            case serviceRoleArn = "serviceRoleArn"
            case ec2TagSet = "ec2TagSet"
            case loadBalancerInfo = "loadBalancerInfo"
            case deploymentGroupId = "deploymentGroupId"
            case alarmConfiguration = "alarmConfiguration"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case onPremisesTagSet = "onPremisesTagSet"
            case applicationName = "applicationName"
            case autoScalingGroups = "autoScalingGroups"
            case deploymentConfigName = "deploymentConfigName"
            case triggerConfigurations = "triggerConfigurations"
            case deploymentStyle = "deploymentStyle"
            case computePlatform = "computePlatform"
            case lastAttemptedDeployment = "lastAttemptedDeployment"
            case onPremisesInstanceTagFilters = "onPremisesInstanceTagFilters"
            case ec2TagFilters = "ec2TagFilters"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case targetRevision = "targetRevision"
        }
    }

    public struct PutLifecycleEventHookExecutionStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lifecycleEventHookExecutionId", required: false, type: .string)
        ]
        /// The execution ID of the lifecycle event hook. A hook is specified in the hooks section of the deployment's AppSpec file.
        public let lifecycleEventHookExecutionId: String?

        public init(lifecycleEventHookExecutionId: String? = nil) {
            self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleEventHookExecutionId = "lifecycleEventHookExecutionId"
        }
    }

    public struct ListApplicationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct StopDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: true, type: .string), 
            AWSShapeMember(label: "autoRollbackEnabled", required: false, type: .boolean)
        ]
        /// The unique ID of a deployment.
        public let deploymentId: String
        /// Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.
        public let autoRollbackEnabled: Bool?

        public init(deploymentId: String, autoRollbackEnabled: Bool? = nil) {
            self.deploymentId = deploymentId
            self.autoRollbackEnabled = autoRollbackEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case autoRollbackEnabled = "autoRollbackEnabled"
        }
    }

    public enum ApplicationRevisionSortBy: String, CustomStringConvertible, Codable {
        case registertime = "registerTime"
        case firstusedtime = "firstUsedTime"
        case lastusedtime = "lastUsedTime"
        public var description: String { return self.rawValue }
    }

    public struct InstanceInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "iamSessionArn", required: false, type: .string), 
            AWSShapeMember(label: "instanceName", required: false, type: .string), 
            AWSShapeMember(label: "deregisterTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "registerTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "instanceArn", required: false, type: .string), 
            AWSShapeMember(label: "iamUserArn", required: false, type: .string)
        ]
        /// The ARN of the IAM session associated with the on-premises instance.
        public let iamSessionArn: String?
        /// The name of the on-premises instance.
        public let instanceName: String?
        /// If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
        public let deregisterTime: TimeStamp?
        /// The tags currently associated with the on-premises instance.
        public let tags: [Tag]?
        /// The time at which the on-premises instance was registered.
        public let registerTime: TimeStamp?
        /// The ARN of the on-premises instance.
        public let instanceArn: String?
        /// The IAM user ARN associated with the on-premises instance.
        public let iamUserArn: String?

        public init(iamSessionArn: String? = nil, instanceName: String? = nil, deregisterTime: TimeStamp? = nil, tags: [Tag]? = nil, registerTime: TimeStamp? = nil, instanceArn: String? = nil, iamUserArn: String? = nil) {
            self.iamSessionArn = iamSessionArn
            self.instanceName = instanceName
            self.deregisterTime = deregisterTime
            self.tags = tags
            self.registerTime = registerTime
            self.instanceArn = instanceArn
            self.iamUserArn = iamUserArn
        }

        private enum CodingKeys: String, CodingKey {
            case iamSessionArn = "iamSessionArn"
            case instanceName = "instanceName"
            case deregisterTime = "deregisterTime"
            case tags = "tags"
            case registerTime = "registerTime"
            case instanceArn = "instanceArn"
            case iamUserArn = "iamUserArn"
        }
    }

    public struct ListApplicationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "applications", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications, will also be returned. in the list.
        public let nextToken: String?
        /// A list of application names.
        public let applications: [String]?

        public init(nextToken: String? = nil, applications: [String]? = nil) {
            self.nextToken = nextToken
            self.applications = applications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case applications = "applications"
        }
    }

    public struct Diagnostics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scriptName", required: false, type: .string), 
            AWSShapeMember(label: "errorCode", required: false, type: .enum), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "logTail", required: false, type: .string)
        ]
        /// The name of the script.
        public let scriptName: String?
        /// The associated error code:   Success: The specified script ran.   ScriptMissing: The specified script was not found in the specified location.   ScriptNotExecutable: The specified script is not a recognized executable file type.   ScriptTimedOut: The specified script did not finish running in the specified time period.   ScriptFailed: The specified script failed to run as expected.   UnknownError: The specified script did not run for an unknown reason.  
        public let errorCode: LifecycleErrorCode?
        /// The message associated with the error.
        public let message: String?
        /// The last portion of the diagnostic log. If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.
        public let logTail: String?

        public init(scriptName: String? = nil, errorCode: LifecycleErrorCode? = nil, message: String? = nil, logTail: String? = nil) {
            self.scriptName = scriptName
            self.errorCode = errorCode
            self.message = message
            self.logTail = logTail
        }

        private enum CodingKeys: String, CodingKey {
            case scriptName = "scriptName"
            case errorCode = "errorCode"
            case message = "message"
            case logTail = "logTail"
        }
    }

    public struct GenericRevisionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "firstUsedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastUsedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "registerTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "deploymentGroups", required: false, type: .list)
        ]
        /// A comment about the revision.
        public let description: String?
        /// When the revision was first used by AWS CodeDeploy.
        public let firstUsedTime: TimeStamp?
        /// When the revision was last used by AWS CodeDeploy.
        public let lastUsedTime: TimeStamp?
        /// When the revision was registered with AWS CodeDeploy.
        public let registerTime: TimeStamp?
        /// The deployment groups for which this is the current target revision.
        public let deploymentGroups: [String]?

        public init(description: String? = nil, firstUsedTime: TimeStamp? = nil, lastUsedTime: TimeStamp? = nil, registerTime: TimeStamp? = nil, deploymentGroups: [String]? = nil) {
            self.description = description
            self.firstUsedTime = firstUsedTime
            self.lastUsedTime = lastUsedTime
            self.registerTime = registerTime
            self.deploymentGroups = deploymentGroups
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case firstUsedTime = "firstUsedTime"
            case lastUsedTime = "lastUsedTime"
            case registerTime = "registerTime"
            case deploymentGroups = "deploymentGroups"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ascending"
        case descending = "descending"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationNames", required: true, type: .list)
        ]
        /// A list of application names separated by spaces.
        public let applicationNames: [String]

        public init(applicationNames: [String]) {
            self.applicationNames = applicationNames
        }

        private enum CodingKeys: String, CodingKey {
            case applicationNames = "applicationNames"
        }
    }

    public struct GetApplicationRevisionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revision", required: true, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// Information about the application revision to get, including type and location.
        public let revision: RevisionLocation
        /// The name of the application that corresponds to the revision.
        public let applicationName: String

        public init(revision: RevisionLocation, applicationName: String) {
            self.revision = revision
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revision = "revision"
            case applicationName = "applicationName"
        }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case deploymentGroupMissing = "DEPLOYMENT_GROUP_MISSING"
        case applicationMissing = "APPLICATION_MISSING"
        case revisionMissing = "REVISION_MISSING"
        case iamRoleMissing = "IAM_ROLE_MISSING"
        case iamRolePermissions = "IAM_ROLE_PERMISSIONS"
        case noEc2Subscription = "NO_EC2_SUBSCRIPTION"
        case overMaxInstances = "OVER_MAX_INSTANCES"
        case noInstances = "NO_INSTANCES"
        case timeout = "TIMEOUT"
        case healthConstraintsInvalid = "HEALTH_CONSTRAINTS_INVALID"
        case healthConstraints = "HEALTH_CONSTRAINTS"
        case internalError = "INTERNAL_ERROR"
        case throttled = "THROTTLED"
        case alarmActive = "ALARM_ACTIVE"
        case agentIssue = "AGENT_ISSUE"
        case autoScalingIamRolePermissions = "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
        case autoScalingConfiguration = "AUTO_SCALING_CONFIGURATION"
        case manualStop = "MANUAL_STOP"
        case missingBlueGreenDeploymentConfiguration = "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
        case missingElbInformation = "MISSING_ELB_INFORMATION"
        case missingGithubToken = "MISSING_GITHUB_TOKEN"
        case elasticLoadBalancingInvalid = "ELASTIC_LOAD_BALANCING_INVALID"
        case elbInvalidInstance = "ELB_INVALID_INSTANCE"
        case invalidLambdaConfiguration = "INVALID_LAMBDA_CONFIGURATION"
        case invalidLambdaFunction = "INVALID_LAMBDA_FUNCTION"
        case hookExecutionFailure = "HOOK_EXECUTION_FAILURE"
        public var description: String { return self.rawValue }
    }

    public struct ApplicationInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "linkedToGitHub", required: false, type: .boolean), 
            AWSShapeMember(label: "gitHubAccountName", required: false, type: .string), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "applicationName", required: false, type: .string), 
            AWSShapeMember(label: "applicationId", required: false, type: .string)
        ]
        /// The destination platform type for deployment of the application (Lambda or Server).
        public let computePlatform: ComputePlatform?
        /// True if the user has authenticated with GitHub for the specified application; otherwise, false.
        public let linkedToGitHub: Bool?
        /// The name for a connection to a GitHub account.
        public let gitHubAccountName: String?
        /// The time at which the application was created.
        public let createTime: TimeStamp?
        /// The application name.
        public let applicationName: String?
        /// The application ID.
        public let applicationId: String?

        public init(computePlatform: ComputePlatform? = nil, linkedToGitHub: Bool? = nil, gitHubAccountName: String? = nil, createTime: TimeStamp? = nil, applicationName: String? = nil, applicationId: String? = nil) {
            self.computePlatform = computePlatform
            self.linkedToGitHub = linkedToGitHub
            self.gitHubAccountName = gitHubAccountName
            self.createTime = createTime
            self.applicationName = applicationName
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case computePlatform = "computePlatform"
            case linkedToGitHub = "linkedToGitHub"
            case gitHubAccountName = "gitHubAccountName"
            case createTime = "createTime"
            case applicationName = "applicationName"
            case applicationId = "applicationId"
        }
    }

    public enum MinimumHealthyHostsType: String, CustomStringConvertible, Codable {
        case hostCount = "HOST_COUNT"
        case fleetPercent = "FLEET_PERCENT"
        public var description: String { return self.rawValue }
    }

    public struct GetDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupInfo", required: false, type: .structure)
        ]
        /// Information about the deployment group.
        public let deploymentGroupInfo: DeploymentGroupInfo?

        public init(deploymentGroupInfo: DeploymentGroupInfo? = nil) {
            self.deploymentGroupInfo = deploymentGroupInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupInfo = "deploymentGroupInfo"
        }
    }

    public struct BlueInstanceTerminationOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", required: false, type: .enum), 
            AWSShapeMember(label: "terminationWaitTimeInMinutes", required: false, type: .integer)
        ]
        /// The action to take on instances in the original environment after a successful blue/green deployment.   TERMINATE: Instances are terminated after a specified wait time.   KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.  
        public let action: InstanceAction?
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment. The maximum setting is 2880 minutes (2 days).
        public let terminationWaitTimeInMinutes: Int32?

        public init(action: InstanceAction? = nil, terminationWaitTimeInMinutes: Int32? = nil) {
            self.action = action
            self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case terminationWaitTimeInMinutes = "terminationWaitTimeInMinutes"
        }
    }

    public struct TriggerConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "triggerEvents", required: false, type: .list), 
            AWSShapeMember(label: "triggerName", required: false, type: .string), 
            AWSShapeMember(label: "triggerTargetArn", required: false, type: .string)
        ]
        /// The event type or types for which notifications are triggered.
        public let triggerEvents: [TriggerEventType]?
        /// The name of the notification trigger.
        public let triggerName: String?
        /// The ARN of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        public let triggerTargetArn: String?

        public init(triggerEvents: [TriggerEventType]? = nil, triggerName: String? = nil, triggerTargetArn: String? = nil) {
            self.triggerEvents = triggerEvents
            self.triggerName = triggerName
            self.triggerTargetArn = triggerTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case triggerEvents = "triggerEvents"
            case triggerName = "triggerName"
            case triggerTargetArn = "triggerTargetArn"
        }
    }

    public enum BundleType: String, CustomStringConvertible, Codable {
        case tar = "tar"
        case tgz = "tgz"
        case zip = "zip"
        case yaml = "YAML"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct TrafficRoutingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "timeBasedLinear", required: false, type: .structure), 
            AWSShapeMember(label: "timeBasedCanary", required: false, type: .structure)
        ]
        /// The type of traffic shifting (TimeBasedCanary or TimeBasedLinear) used by a deployment configuration .
        public let `type`: TrafficRoutingType?
        /// A configuration that shifts traffic from one version of a Lambda function to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions are specified in the deployment's AppSpec file.
        public let timeBasedLinear: TimeBasedLinear?
        /// A configuration that shifts traffic from one version of a Lambda function to another in two increments. The original and target Lambda function versions are specified in the deployment's AppSpec file.
        public let timeBasedCanary: TimeBasedCanary?

        public init(type: TrafficRoutingType? = nil, timeBasedLinear: TimeBasedLinear? = nil, timeBasedCanary: TimeBasedCanary? = nil) {
            self.`type` = `type`
            self.timeBasedLinear = timeBasedLinear
            self.timeBasedCanary = timeBasedCanary
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case timeBasedLinear = "timeBasedLinear"
            case timeBasedCanary = "timeBasedCanary"
        }
    }

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case created = "Created"
        case queued = "Queued"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case stopped = "Stopped"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public struct ListGitHubAccountTokenNamesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "tokenNameList", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent ListGitHubAccountTokenNames call to return the next set of names in the list. 
        public let nextToken: String?
        /// A list of names of connections to GitHub accounts.
        public let tokenNameList: [String]?

        public init(nextToken: String? = nil, tokenNameList: [String]? = nil) {
            self.nextToken = nextToken
            self.tokenNameList = tokenNameList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tokenNameList = "tokenNameList"
        }
    }

    public struct GetDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case applicationName = "applicationName"
        }
    }

    public struct AlarmConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "alarms", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ignorePollAlarmFailure", required: false, type: .boolean)
        ]
        /// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
        public let alarms: [Alarm]?
        /// Indicates whether the alarm configuration is enabled.
        public let enabled: Bool?
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.   true: The deployment will proceed even if alarm status information can't be retrieved from Amazon CloudWatch.   false: The deployment will stop if alarm status information can't be retrieved from Amazon CloudWatch.  
        public let ignorePollAlarmFailure: Bool?

        public init(alarms: [Alarm]? = nil, enabled: Bool? = nil, ignorePollAlarmFailure: Bool? = nil) {
            self.alarms = alarms
            self.enabled = enabled
            self.ignorePollAlarmFailure = ignorePollAlarmFailure
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "alarms"
            case enabled = "enabled"
            case ignorePollAlarmFailure = "ignorePollAlarmFailure"
        }
    }

    public struct BatchGetDeploymentGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupNames", required: true, type: .list), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The deployment groups' names.
        public let deploymentGroupNames: [String]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupNames: [String], applicationName: String) {
            self.deploymentGroupNames = deploymentGroupNames
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupNames = "deploymentGroupNames"
            case applicationName = "applicationName"
        }
    }

    public struct CreateDeploymentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revision", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "targetInstances", required: false, type: .structure), 
            AWSShapeMember(label: "ignoreApplicationStopFailures", required: false, type: .boolean), 
            AWSShapeMember(label: "deploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "updateOutdatedInstancesOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "fileExistsBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The type and location of the revision to deploy.
        public let revision: RevisionLocation?
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account. If not specified, the value configured in the deployment group will be used as the default. If the deployment group does not have a deployment configuration associated with it, then CodeDeployDefault.OneAtATime will be used by default.
        public let deploymentConfigName: String?
        /// Information about the instances that will belong to the replacement environment in a blue/green deployment.
        public let targetInstances: TargetInstances?
        /// If set to true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If set to false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to fail to an instance, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        public let ignoreApplicationStopFailures: Bool?
        /// The name of the deployment group.
        public let deploymentGroupName: String?
        /// Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.
        public let updateOutdatedInstancesOnly: Bool?
        /// A comment about the deployment.
        public let description: String?
        /// Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment. The fileExistsBehavior parameter takes any of the following values:   DISALLOW: The deployment fails. This is also the default behavior if no option is specified.   OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.   RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.  
        public let fileExistsBehavior: FileExistsBehavior?
        /// Configuration information for an automatic rollback that is added when a deployment is created.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(revision: RevisionLocation? = nil, deploymentConfigName: String? = nil, targetInstances: TargetInstances? = nil, ignoreApplicationStopFailures: Bool? = nil, deploymentGroupName: String? = nil, updateOutdatedInstancesOnly: Bool? = nil, description: String? = nil, fileExistsBehavior: FileExistsBehavior? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, applicationName: String) {
            self.revision = revision
            self.deploymentConfigName = deploymentConfigName
            self.targetInstances = targetInstances
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.deploymentGroupName = deploymentGroupName
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
            self.description = description
            self.fileExistsBehavior = fileExistsBehavior
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revision = "revision"
            case deploymentConfigName = "deploymentConfigName"
            case targetInstances = "targetInstances"
            case ignoreApplicationStopFailures = "ignoreApplicationStopFailures"
            case deploymentGroupName = "deploymentGroupName"
            case updateOutdatedInstancesOnly = "updateOutdatedInstancesOnly"
            case description = "description"
            case fileExistsBehavior = "fileExistsBehavior"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
            case applicationName = "applicationName"
        }
    }

    public struct GetApplicationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: false, type: .structure)
        ]
        /// Information about the application.
        public let application: ApplicationInfo?

        public init(application: ApplicationInfo? = nil) {
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bundleType", required: false, type: .enum), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "bucket", required: false, type: .string), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "eTag", required: false, type: .string)
        ]
        /// The file type of the application revision. Must be one of the following:   tar: A tar archive file.   tgz: A compressed tar archive file.   zip: A zip archive file.  
        public let bundleType: BundleType?
        /// A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision. If the version is not specified, the system will use the most recent version by default.
        public let version: String?
        /// The name of the Amazon S3 bucket where the application revision is stored.
        public let bucket: String?
        /// The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        public let key: String?
        /// The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision. If the ETag is not specified as an input parameter, ETag validation of the object will be skipped.
        public let eTag: String?

        public init(bundleType: BundleType? = nil, version: String? = nil, bucket: String? = nil, key: String? = nil, eTag: String? = nil) {
            self.bundleType = bundleType
            self.version = version
            self.bucket = bucket
            self.key = key
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case bundleType = "bundleType"
            case version = "version"
            case bucket = "bucket"
            case key = "key"
            case eTag = "eTag"
        }
    }

    public struct ELBInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// For blue/green deployments, the name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct GetDeploymentConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentConfigName", required: true, type: .string)
        ]
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        public let deploymentConfigName: String

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentConfigName = "deploymentConfigName"
        }
    }

    public enum TagFilterType: String, CustomStringConvertible, Codable {
        case keyOnly = "KEY_ONLY"
        case valueOnly = "VALUE_ONLY"
        case keyAndValue = "KEY_AND_VALUE"
        public var description: String { return self.rawValue }
    }

    public struct ListDeploymentsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deployments", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of deployment IDs.
        public let deployments: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
        public let nextToken: String?

        public init(deployments: [String]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deployments = "deployments"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupName = "deploymentGroupName"
            case applicationName = "applicationName"
        }
    }

    public struct ListDeploymentInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "instancesList", required: false, type: .list)
        ]
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
        public let nextToken: String?
        /// A list of instance IDs.
        public let instancesList: [String]?

        public init(nextToken: String? = nil, instancesList: [String]? = nil) {
            self.nextToken = nextToken
            self.instancesList = instancesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case instancesList = "instancesList"
        }
    }

    public struct LastDeploymentInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp)
        ]
        /// The deployment ID.
        public let deploymentId: String?
        /// The status of the most recent deployment.
        public let status: DeploymentStatus?
        /// A timestamp indicating when the most recent deployment to the deployment group completed.
        public let endTime: TimeStamp?
        /// A timestamp indicating when the most recent deployment to the deployment group started.
        public let createTime: TimeStamp?

        public init(deploymentId: String? = nil, status: DeploymentStatus? = nil, endTime: TimeStamp? = nil, createTime: TimeStamp? = nil) {
            self.deploymentId = deploymentId
            self.status = status
            self.endTime = endTime
            self.createTime = createTime
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case status = "status"
            case endTime = "endTime"
            case createTime = "createTime"
        }
    }

    public struct DeregisterOnPremisesInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the on-premises instance to deregister.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct BatchGetApplicationRevisionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revisions", required: false, type: .list), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// Additional information about the revisions, including the type and location.
        public let revisions: [RevisionInfo]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?
        /// The name of the application that corresponds to the revisions.
        public let applicationName: String?

        public init(revisions: [RevisionInfo]? = nil, errorMessage: String? = nil, applicationName: String? = nil) {
            self.revisions = revisions
            self.errorMessage = errorMessage
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revisions = "revisions"
            case errorMessage = "errorMessage"
            case applicationName = "applicationName"
        }
    }

    public struct GetApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationName", required: true, type: .string)
        ]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "applicationName"
        }
    }

    public struct GetOnPremisesInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the on-premises instance about which to get information.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetApplicationRevisionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "revision", required: false, type: .structure), 
            AWSShapeMember(label: "revisionInfo", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// Additional information about the revision, including type and location.
        public let revision: RevisionLocation?
        /// General information about the revision.
        public let revisionInfo: GenericRevisionInfo?
        /// The name of the application that corresponds to the revision.
        public let applicationName: String?

        public init(revision: RevisionLocation? = nil, revisionInfo: GenericRevisionInfo? = nil, applicationName: String? = nil) {
            self.revision = revision
            self.revisionInfo = revisionInfo
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case revision = "revision"
            case revisionInfo = "revisionInfo"
            case applicationName = "applicationName"
        }
    }

    public struct GreenFleetProvisioningOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", required: false, type: .enum)
        ]
        /// The method used to add instances to a replacement environment.   DISCOVER_EXISTING: Use instances that already exist or will be created manually.   COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.  
        public let action: GreenFleetProvisioningAction?

        public init(action: GreenFleetProvisioningAction? = nil) {
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
        }
    }

    public struct DeploymentOverview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InProgress", required: false, type: .long), 
            AWSShapeMember(label: "Pending", required: false, type: .long), 
            AWSShapeMember(label: "Skipped", required: false, type: .long), 
            AWSShapeMember(label: "Succeeded", required: false, type: .long), 
            AWSShapeMember(label: "Ready", required: false, type: .long), 
            AWSShapeMember(label: "Failed", required: false, type: .long)
        ]
        /// The number of instances in which the deployment is in progress.
        public let inProgress: Int64?
        /// The number of instances in the deployment in a pending state.
        public let pending: Int64?
        /// The number of instances in the deployment in a skipped state.
        public let skipped: Int64?
        /// The number of instances in the deployment to which revisions have been successfully deployed.
        public let succeeded: Int64?
        /// The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
        public let ready: Int64?
        /// The number of instances in the deployment in a failed state.
        public let failed: Int64?

        public init(inProgress: Int64? = nil, pending: Int64? = nil, skipped: Int64? = nil, succeeded: Int64? = nil, ready: Int64? = nil, failed: Int64? = nil) {
            self.inProgress = inProgress
            self.pending = pending
            self.skipped = skipped
            self.succeeded = succeeded
            self.ready = ready
            self.failed = failed
        }

        private enum CodingKeys: String, CodingKey {
            case inProgress = "InProgress"
            case pending = "Pending"
            case skipped = "Skipped"
            case succeeded = "Succeeded"
            case ready = "Ready"
            case failed = "Failed"
        }
    }

    public struct UpdateApplicationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "applicationName", required: false, type: .string)
        ]
        /// The new name to give the application.
        public let newApplicationName: String?
        /// The current name of the application you want to change.
        public let applicationName: String?

        public init(newApplicationName: String? = nil, applicationName: String? = nil) {
            self.newApplicationName = newApplicationName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case newApplicationName = "newApplicationName"
            case applicationName = "applicationName"
        }
    }

    public struct UpdateDeploymentGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "loadBalancerInfo", required: false, type: .structure), 
            AWSShapeMember(label: "newDeploymentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "alarmConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "blueGreenDeploymentConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "onPremisesTagSet", required: false, type: .structure), 
            AWSShapeMember(label: "applicationName", required: true, type: .string), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "triggerConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "deploymentStyle", required: false, type: .structure), 
            AWSShapeMember(label: "currentDeploymentGroupName", required: true, type: .string), 
            AWSShapeMember(label: "onPremisesInstanceTagFilters", required: false, type: .list), 
            AWSShapeMember(label: "ec2TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "autoRollbackConfiguration", required: false, type: .structure)
        ]
        /// A replacement ARN for the service role, if you want to change it.
        public let serviceRoleArn: String?
        /// Information about groups of tags applied to on-premises instances. The deployment group will include only EC2 instances identified by all the tag groups.
        public let ec2TagSet: EC2TagSet?
        /// Information about the load balancer used in a deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// The new name of the deployment group, if you want to change it.
        public let newDeploymentGroupName: String?
        /// Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// Information about an on-premises instance tag set. The deployment group will include only on-premises instances identified by all the tag groups.
        public let onPremisesTagSet: OnPremisesTagSet?
        /// The application name corresponding to the deployment group to update.
        public let applicationName: String
        /// The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.
        public let autoScalingGroups: [String]?
        /// The replacement deployment configuration name to use, if you want to change it.
        public let deploymentConfigName: String?
        /// Information about triggers to change when the deployment group is updated. For examples, see Modify Triggers in an AWS CodeDeploy Deployment Group in the AWS CodeDeploy User Guide.
        public let triggerConfigurations: [TriggerConfig]?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The current name of the deployment group.
        public let currentDeploymentGroupName: String
        /// The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?

        public init(serviceRoleArn: String? = nil, ec2TagSet: EC2TagSet? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, newDeploymentGroupName: String? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, onPremisesTagSet: OnPremisesTagSet? = nil, applicationName: String, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, currentDeploymentGroupName: String, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.ec2TagSet = ec2TagSet
            self.loadBalancerInfo = loadBalancerInfo
            self.newDeploymentGroupName = newDeploymentGroupName
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.onPremisesTagSet = onPremisesTagSet
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.currentDeploymentGroupName = currentDeploymentGroupName
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRoleArn = "serviceRoleArn"
            case ec2TagSet = "ec2TagSet"
            case loadBalancerInfo = "loadBalancerInfo"
            case newDeploymentGroupName = "newDeploymentGroupName"
            case alarmConfiguration = "alarmConfiguration"
            case blueGreenDeploymentConfiguration = "blueGreenDeploymentConfiguration"
            case onPremisesTagSet = "onPremisesTagSet"
            case applicationName = "applicationName"
            case autoScalingGroups = "autoScalingGroups"
            case deploymentConfigName = "deploymentConfigName"
            case triggerConfigurations = "triggerConfigurations"
            case deploymentStyle = "deploymentStyle"
            case currentDeploymentGroupName = "currentDeploymentGroupName"
            case onPremisesInstanceTagFilters = "onPremisesInstanceTagFilters"
            case ec2TagFilters = "ec2TagFilters"
            case autoRollbackConfiguration = "autoRollbackConfiguration"
        }
    }

    public struct EC2TagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ec2TagSetList", required: false, type: .list)
        ]
        /// A list containing other lists of EC2 instance tag groups. In order for an instance to be included in the deployment group, it must be identified by all the tag groups in the list.
        public let ec2TagSetList: [[EC2TagFilter]]?

        public init(ec2TagSetList: [[EC2TagFilter]]? = nil) {
            self.ec2TagSetList = ec2TagSetList
        }

        private enum CodingKeys: String, CodingKey {
            case ec2TagSetList = "ec2TagSetList"
        }
    }

    public struct CreateDeploymentGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentGroupId", required: false, type: .string)
        ]
        /// A unique deployment group ID.
        public let deploymentGroupId: String?

        public init(deploymentGroupId: String? = nil) {
            self.deploymentGroupId = deploymentGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentGroupId = "deploymentGroupId"
        }
    }

    public struct InstanceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "instanceType", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "lifecycleEvents", required: false, type: .list)
        ]
        /// The instance ID.
        public let instanceId: String?
        /// The deployment status for this instance:   Pending: The deployment is pending for this instance.   In Progress: The deployment is in progress for this instance.   Succeeded: The deployment has succeeded for this instance.   Failed: The deployment has failed for this instance.   Skipped: The deployment has been skipped for this instance.   Unknown: The deployment status is unknown for this instance.  
        public let status: InstanceStatus?
        /// Information about which environment an instance belongs to in a blue/green deployment.   BLUE: The instance is part of the original environment.   GREEN: The instance is part of the replacement environment.  
        public let instanceType: InstanceType?
        /// A timestamp indicating when the instance information was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The deployment ID.
        public let deploymentId: String?
        /// A list of lifecycle events for this instance.
        public let lifecycleEvents: [LifecycleEvent]?

        public init(instanceId: String? = nil, status: InstanceStatus? = nil, instanceType: InstanceType? = nil, lastUpdatedAt: TimeStamp? = nil, deploymentId: String? = nil, lifecycleEvents: [LifecycleEvent]? = nil) {
            self.instanceId = instanceId
            self.status = status
            self.instanceType = instanceType
            self.lastUpdatedAt = lastUpdatedAt
            self.deploymentId = deploymentId
            self.lifecycleEvents = lifecycleEvents
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case status = "status"
            case instanceType = "instanceType"
            case lastUpdatedAt = "lastUpdatedAt"
            case deploymentId = "deploymentId"
            case lifecycleEvents = "lifecycleEvents"
        }
    }

    public struct RegisterOnPremisesInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "iamSessionArn", required: false, type: .string), 
            AWSShapeMember(label: "iamUserArn", required: false, type: .string), 
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The ARN of the IAM session to associate with the on-premises instance.
        public let iamSessionArn: String?
        /// The ARN of the IAM user to associate with the on-premises instance.
        public let iamUserArn: String?
        /// The name of the on-premises instance to register.
        public let instanceName: String

        public init(iamSessionArn: String? = nil, iamUserArn: String? = nil, instanceName: String) {
            self.iamSessionArn = iamSessionArn
            self.iamUserArn = iamUserArn
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case iamSessionArn = "iamSessionArn"
            case iamUserArn = "iamUserArn"
            case instanceName = "instanceName"
        }
    }

    public enum DeploymentOption: String, CustomStringConvertible, Codable {
        case withTrafficControl = "WITH_TRAFFIC_CONTROL"
        case withoutTrafficControl = "WITHOUT_TRAFFIC_CONTROL"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentReadyAction: String, CustomStringConvertible, Codable {
        case continueDeployment = "CONTINUE_DEPLOYMENT"
        case stopDeployment = "STOP_DEPLOYMENT"
        public var description: String { return self.rawValue }
    }

    public struct DeploymentConfigInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "computePlatform", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentConfigName", required: false, type: .string), 
            AWSShapeMember(label: "minimumHealthyHosts", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentConfigId", required: false, type: .string), 
            AWSShapeMember(label: "trafficRoutingConfig", required: false, type: .structure), 
            AWSShapeMember(label: "createTime", required: false, type: .timestamp)
        ]
        /// The destination platform type for the deployment (Lambda or Server).
        public let computePlatform: ComputePlatform?
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about the number or percentage of minimum healthy instance.
        public let minimumHealthyHosts: MinimumHealthyHosts?
        /// The deployment configuration ID.
        public let deploymentConfigId: String?
        /// The configuration specifying how the deployment traffic will be routed. Only deployments with a Lambda compute platform can specify this.
        public let trafficRoutingConfig: TrafficRoutingConfig?
        /// The time at which the deployment configuration was created.
        public let createTime: TimeStamp?

        public init(computePlatform: ComputePlatform? = nil, deploymentConfigName: String? = nil, minimumHealthyHosts: MinimumHealthyHosts? = nil, deploymentConfigId: String? = nil, trafficRoutingConfig: TrafficRoutingConfig? = nil, createTime: TimeStamp? = nil) {
            self.computePlatform = computePlatform
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
            self.deploymentConfigId = deploymentConfigId
            self.trafficRoutingConfig = trafficRoutingConfig
            self.createTime = createTime
        }

        private enum CodingKeys: String, CodingKey {
            case computePlatform = "computePlatform"
            case deploymentConfigName = "deploymentConfigName"
            case minimumHealthyHosts = "minimumHealthyHosts"
            case deploymentConfigId = "deploymentConfigId"
            case trafficRoutingConfig = "trafficRoutingConfig"
            case createTime = "createTime"
        }
    }

    public struct LifecycleEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diagnostics", required: false, type: .structure), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "lifecycleEventName", required: false, type: .string)
        ]
        /// Diagnostic information about the deployment lifecycle event.
        public let diagnostics: Diagnostics?
        /// The deployment lifecycle event status:   Pending: The deployment lifecycle event is pending.   InProgress: The deployment lifecycle event is in progress.   Succeeded: The deployment lifecycle event ran successfully.   Failed: The deployment lifecycle event has failed.   Skipped: The deployment lifecycle event has been skipped.   Unknown: The deployment lifecycle event is unknown.  
        public let status: LifecycleEventStatus?
        /// A timestamp indicating when the deployment lifecycle event ended.
        public let endTime: TimeStamp?
        /// A timestamp indicating when the deployment lifecycle event started.
        public let startTime: TimeStamp?
        /// The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
        public let lifecycleEventName: String?

        public init(diagnostics: Diagnostics? = nil, status: LifecycleEventStatus? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, lifecycleEventName: String? = nil) {
            self.diagnostics = diagnostics
            self.status = status
            self.endTime = endTime
            self.startTime = startTime
            self.lifecycleEventName = lifecycleEventName
        }

        private enum CodingKeys: String, CodingKey {
            case diagnostics = "diagnostics"
            case status = "status"
            case endTime = "endTime"
            case startTime = "startTime"
            case lifecycleEventName = "lifecycleEventName"
        }
    }

    public struct TargetInstances: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagFilters", required: false, type: .list), 
            AWSShapeMember(label: "ec2TagSet", required: false, type: .structure), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list)
        ]
        /// The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as ec2TagSet.
        public let tagFilters: [EC2TagFilter]?
        /// Information about the groups of EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as tagFilters.
        public let ec2TagSet: EC2TagSet?
        /// The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        public let autoScalingGroups: [String]?

        public init(tagFilters: [EC2TagFilter]? = nil, ec2TagSet: EC2TagSet? = nil, autoScalingGroups: [String]? = nil) {
            self.tagFilters = tagFilters
            self.ec2TagSet = ec2TagSet
            self.autoScalingGroups = autoScalingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case tagFilters = "tagFilters"
            case ec2TagSet = "ec2TagSet"
            case autoScalingGroups = "autoScalingGroups"
        }
    }

    public struct GetDeploymentInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceId", required: true, type: .string), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string)
        ]
        /// The unique ID of an instance in the deployment group.
        public let instanceId: String
        /// The unique ID of a deployment.
        public let deploymentId: String

        public init(instanceId: String, deploymentId: String) {
            self.instanceId = instanceId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case deploymentId = "deploymentId"
        }
    }

    public struct MinimumHealthyHosts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .integer)
        ]
        /// The minimum healthy instance type:   HOST_COUNT: The minimum number of healthy instance as an absolute value.   FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.   In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment will be successful if six or more instances are deployed to successfully; otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment will be successful if four or more instance are deployed to successfully; otherwise, the deployment fails.  In a call to the get deployment configuration operation, CodeDeployDefault.OneAtATime will return a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy will try to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment still succeeds.  For more information, see AWS CodeDeploy Instance Health in the AWS CodeDeploy User Guide.
        public let `type`: MinimumHealthyHostsType?
        /// The minimum healthy instance value.
        public let value: Int32?

        public init(type: MinimumHealthyHostsType? = nil, value: Int32? = nil) {
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case value = "value"
        }
    }

}