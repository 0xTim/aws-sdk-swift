// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Codedeploy {

    public struct RevisionLocation: Serializable, Initializable {
        /// Information about the location of application artifacts stored in Amazon S3. 
        var s3Location: S3Location? = nil
        /// Information about the location of application artifacts stored in GitHub.
        var gitHubLocation: GitHubLocation? = nil
        /// The type of application revision:   S3: An application revision stored in Amazon S3.   GitHub: An application revision stored in GitHub.  
        var revisionType: String? = nil

        public init() {}

        public init(s3Location: S3Location? = nil, gitHubLocation: GitHubLocation? = nil, revisionType: String? = nil) {
            self.s3Location = s3Location
            self.gitHubLocation = gitHubLocation
            self.revisionType = revisionType
        }

    }

    public struct GetDeploymentConfigOutput: Serializable, Initializable {
        /// Information about the deployment configuration.
        var deploymentConfigInfo: DeploymentConfigInfo? = nil

        public init() {}

        public init(deploymentConfigInfo: DeploymentConfigInfo? = nil) {
            self.deploymentConfigInfo = deploymentConfigInfo
        }

    }

    public struct CreateDeploymentOutput: Serializable, Initializable {
        /// A unique deployment ID.
        var deploymentId: String? = nil

        public init() {}

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

    }

    public struct SkipWaitTimeForInstanceTerminationInput: Serializable, Initializable {
        /// The ID of the blue/green deployment for which you want to skip the instance termination wait time.
        var deploymentId: String? = nil

        public init() {}

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

    }

    public struct GetDeploymentOutput: Serializable, Initializable {
        /// Information about the deployment.
        var deploymentInfo: DeploymentInfo? = nil

        public init() {}

        public init(deploymentInfo: DeploymentInfo? = nil) {
            self.deploymentInfo = deploymentInfo
        }

    }

    public struct BatchGetDeploymentInstancesOutput: Serializable, Initializable {
        /// Information about the instance.
        var instancesSummary: [InstanceSummary]? = nil
        /// Information about errors that may have occurred during the API call.
        var errorMessage: String? = nil

        public init() {}

        public init(instancesSummary: [InstanceSummary]? = nil, errorMessage: String? = nil) {
            self.instancesSummary = instancesSummary
            self.errorMessage = errorMessage
        }

    }

    public struct GetDeploymentInput: Serializable, Initializable {
        /// A deployment ID associated with the applicable IAM user or AWS account.
        var deploymentId: String = ""

        public init() {}

        public init(deploymentId: String) {
            self.deploymentId = deploymentId
        }

    }

    public struct DeploymentStyle: Serializable, Initializable {
        /// Indicates whether to run a standard deployment or a blue/green deployment.
        var deploymentType: String? = nil
        /// Indicates whether to route deployment traffic behind a load balancer.
        var deploymentOption: String? = nil

        public init() {}

        public init(deploymentType: String? = nil, deploymentOption: String? = nil) {
            self.deploymentType = deploymentType
            self.deploymentOption = deploymentOption
        }

    }

    public struct DeploymentInfo: Serializable, Initializable {
        /// Information about the instances that belong to the replacement environment in a blue/green deployment.
        var targetInstances: TargetInstances? = nil
        /// A timestamp indicating when the deployment was complete.
        var completeTime: Date? = nil
        /// The deployment group name.
        var deploymentGroupName: String? = nil
        /// Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified; otherwise, 'true' as soon as the termination wait period starts.
        var instanceTerminationWaitTimeStarted: Bool? = nil
        /// Information about a deployment rollback.
        var rollbackInfo: RollbackInfo? = nil
        /// A comment about the deployment.
        var description: String? = nil
        /// If true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        var ignoreApplicationStopFailures: Bool? = nil
        /// Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
        var additionalDeploymentStatusInfo: String? = nil
        /// The means by which the deployment was created:   user: A user created the deployment.   autoscaling: Auto Scaling created the deployment.   codeDeployRollback: A rollback process created the deployment.  
        var creator: String? = nil
        /// Information about the load balancer used in this blue/green deployment.
        var loadBalancerInfo: LoadBalancerInfo? = nil
        /// Information about blue/green deployment options for this deployment.
        var blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil
        /// The application name.
        var applicationName: String? = nil
        /// Indicates whether only instances that are not running the latest application revision are to be deployed to.
        var updateOutdatedInstancesOnly: Bool? = nil
        /// Information about the location of stored application artifacts and the service from which to retrieve them.
        var revision: RevisionLocation? = nil
        /// The current state of the deployment as a whole.
        var status: String? = nil
        /// The deployment configuration name.
        var deploymentConfigName: String? = nil
        /// Information about the type of deployment, either standard or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        var deploymentStyle: DeploymentStyle? = nil
        /// The deployment ID.
        var deploymentId: String? = nil
        /// Information about any error associated with this deployment.
        var errorInformation: ErrorInformation? = nil
        /// Information about the automatic rollback configuration associated with the deployment.
        var autoRollbackConfiguration: AutoRollbackConfiguration? = nil
        /// A summary of the deployment status of the instances in the deployment.
        var deploymentOverview: DeploymentOverview? = nil
        /// A timestamp indicating when the deployment was created.
        var createTime: Date? = nil
        /// A timestamp indicating when the deployment was deployed to the deployment group. In some cases, the reported value of the start time may be later than the complete time. This is due to differences in the clock settings of back-end servers that participate in the deployment process.
        var startTime: Date? = nil

        public init() {}

        public init(targetInstances: TargetInstances? = nil, completeTime: Date? = nil, deploymentGroupName: String? = nil, instanceTerminationWaitTimeStarted: Bool? = nil, rollbackInfo: RollbackInfo? = nil, description: String? = nil, ignoreApplicationStopFailures: Bool? = nil, additionalDeploymentStatusInfo: String? = nil, creator: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String? = nil, updateOutdatedInstancesOnly: Bool? = nil, revision: RevisionLocation? = nil, status: String? = nil, deploymentConfigName: String? = nil, deploymentStyle: DeploymentStyle? = nil, deploymentId: String? = nil, errorInformation: ErrorInformation? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, deploymentOverview: DeploymentOverview? = nil, createTime: Date? = nil, startTime: Date? = nil) {
            self.targetInstances = targetInstances
            self.completeTime = completeTime
            self.deploymentGroupName = deploymentGroupName
            self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
            self.rollbackInfo = rollbackInfo
            self.description = description
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
            self.creator = creator
            self.loadBalancerInfo = loadBalancerInfo
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
            self.revision = revision
            self.status = status
            self.deploymentConfigName = deploymentConfigName
            self.deploymentStyle = deploymentStyle
            self.deploymentId = deploymentId
            self.errorInformation = errorInformation
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.deploymentOverview = deploymentOverview
            self.createTime = createTime
            self.startTime = startTime
        }

    }

    public struct BatchGetApplicationRevisionsInput: Serializable, Initializable {
        /// Information to get about the application revisions, including type and location.
        var revisions: [RevisionLocation] = []
        /// The name of an AWS CodeDeploy application about which to get revision information.
        var applicationName: String = ""

        public init() {}

        public init(revisions: [RevisionLocation], applicationName: String) {
            self.revisions = revisions
            self.applicationName = applicationName
        }

    }

    public struct TimeRange: Serializable, Initializable {
        /// The start time of the time range.  Specify null to leave the start time open-ended. 
        var start: Date? = nil
        /// The end time of the time range.  Specify null to leave the end time open-ended. 
        var end: Date? = nil

        public init() {}

        public init(start: Date? = nil, end: Date? = nil) {
            self.start = start
            self.end = end
        }

    }

    public struct BatchGetOnPremisesInstancesInput: Serializable, Initializable {
        /// The names of the on-premises instances about which to get information.
        var instanceNames: [String]? = nil

        public init() {}

        public init(instanceNames: [String]? = nil) {
            self.instanceNames = instanceNames
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The tag's value.
        var value: String? = nil
        /// The tag's key.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct TagFilter: Serializable, Initializable {
        /// The on-premises instance tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        var type: String? = nil
        /// The on-premises instance tag filter value.
        var value: String? = nil
        /// The on-premises instance tag filter key.
        var key: String? = nil

        public init() {}

        public init(type: String? = nil, value: String? = nil, key: String? = nil) {
            self.type = type
            self.value = value
            self.key = key
        }

    }

    public struct ErrorInformation: Serializable, Initializable {
        /// For information about additional error codes, see Error Codes for AWS CodeDeploy in the AWS CodeDeploy User Guide. The error code:   APPLICATION_MISSING: The application was missing. This error code will most likely be raised if the application is deleted after the deployment is created but before it is started.   DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code will most likely be raised if the deployment group is deleted after the deployment is created but before it is started.   HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.   HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.   IAM_ROLE_MISSING: The service role cannot be accessed.   IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.   INTERNAL_ERROR: There was an internal error.   NO_EC2_SUBSCRIPTION: The calling account is not subscribed to the Amazon EC2 service.   NO_INSTANCES: No instance were specified, or no instance can be found.   OVER_MAX_INSTANCES: The maximum number of instance was exceeded.   THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.   TIMEOUT: The deployment has timed out.   REVISION_MISSING: The revision ID was missing. This error code will most likely be raised if the revision is deleted after the deployment is created but before it is started.  
        var code: String? = nil
        /// An accompanying error message.
        var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct ListApplicationRevisionsInput: Serializable, Initializable {
        /// An identifier returned from the previous list application revisions call. It can be used to return the next set of applications in the list.
        var nextToken: String? = nil
        /// The order in which to sort the list results:   ascending: ascending order.   descending: descending order.   If not specified, the results will be sorted in ascending order. If set to null, the results will be sorted in an arbitrary order.
        var sortOrder: String? = nil
        /// A key prefix for the set of Amazon S3 objects to limit the search for revisions.
        var s3KeyPrefix: String? = nil
        /// An Amazon S3 bucket name to limit the search for revisions. If set to null, all of the user's buckets will be searched.
        var s3Bucket: String? = nil
        /// The column name to use to sort the list results:   registerTime: Sort by the time the revisions were registered with AWS CodeDeploy.   firstUsedTime: Sort by the time the revisions were first used in a deployment.   lastUsedTime: Sort by the time the revisions were last used in a deployment.   If not specified or set to null, the results will be returned in an arbitrary order.
        var sortBy: String? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""
        /// Whether to list revisions based on whether the revision is the target revision of an deployment group:   include: List revisions that are target revisions of a deployment group.   exclude: Do not list revisions that are target revisions of a deployment group.   ignore: List all revisions.  
        var deployed: String? = nil

        public init() {}

        public init(nextToken: String? = nil, sortOrder: String? = nil, s3KeyPrefix: String? = nil, s3Bucket: String? = nil, sortBy: String? = nil, applicationName: String, deployed: String? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
            self.s3KeyPrefix = s3KeyPrefix
            self.s3Bucket = s3Bucket
            self.sortBy = sortBy
            self.applicationName = applicationName
            self.deployed = deployed
        }

    }

    public struct BatchGetDeploymentsOutput: Serializable, Initializable {
        /// Information about the deployments.
        var deploymentsInfo: [DeploymentInfo]? = nil

        public init() {}

        public init(deploymentsInfo: [DeploymentInfo]? = nil) {
            self.deploymentsInfo = deploymentsInfo
        }

    }

    public struct CreateApplicationInput: Serializable, Initializable {
        /// The name of the application. This name must be unique with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

    }

    public struct UpdateDeploymentGroupOutput: Serializable, Initializable {
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account.
        var hooksNotCleanedUp: [AutoScalingGroup]? = nil

        public init() {}

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

    }

    public struct Alarm: Serializable, Initializable {
        /// The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
        var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct CreateDeploymentConfigOutput: Serializable, Initializable {
        /// A unique deployment configuration ID.
        var deploymentConfigId: String? = nil

        public init() {}

        public init(deploymentConfigId: String? = nil) {
            self.deploymentConfigId = deploymentConfigId
        }

    }

    public struct GetOnPremisesInstanceOutput: Serializable, Initializable {
        /// Information about the on-premises instance.
        var instanceInfo: InstanceInfo? = nil

        public init() {}

        public init(instanceInfo: InstanceInfo? = nil) {
            self.instanceInfo = instanceInfo
        }

    }

    public struct GetDeploymentInstanceOutput: Serializable, Initializable {
        /// Information about the instance.
        var instanceSummary: InstanceSummary? = nil

        public init() {}

        public init(instanceSummary: InstanceSummary? = nil) {
            self.instanceSummary = instanceSummary
        }

    }

    public struct DeploymentReadyOption: Serializable, Initializable {
        /// Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.   CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.   STOP_DEPLOYMENT: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.  
        var actionOnTimeout: String? = nil
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout
        var waitTimeInMinutes: Int32? = nil

        public init() {}

        public init(actionOnTimeout: String? = nil, waitTimeInMinutes: Int32? = nil) {
            self.actionOnTimeout = actionOnTimeout
            self.waitTimeInMinutes = waitTimeInMinutes
        }

    }

    public struct RollbackInfo: Serializable, Initializable {
        /// The ID of the deployment rollback.
        var rollbackDeploymentId: String? = nil
        /// The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        var rollbackTriggeringDeploymentId: String? = nil
        /// Information describing the status of a deployment rollback; for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded. 
        var rollbackMessage: String? = nil

        public init() {}

        public init(rollbackDeploymentId: String? = nil, rollbackTriggeringDeploymentId: String? = nil, rollbackMessage: String? = nil) {
            self.rollbackDeploymentId = rollbackDeploymentId
            self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
            self.rollbackMessage = rollbackMessage
        }

    }

    public struct ListDeploymentsInput: Serializable, Initializable {
        /// An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
        var nextToken: String? = nil
        /// A time range (start and end) for returning a subset of the list of deployments.
        var createTimeRange: TimeRange? = nil
        /// The name of an existing deployment group for the specified application.
        var deploymentGroupName: String? = nil
        /// A subset of deployments to list by status:   Created: Include created deployments in the resulting list.   Queued: Include queued deployments in the resulting list.   In Progress: Include in-progress deployments in the resulting list.   Succeeded: Include successful deployments in the resulting list.   Failed: Include failed deployments in the resulting list.   Stopped: Include stopped deployments in the resulting list.  
        var includeOnlyStatuses: [String]? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String? = nil

        public init() {}

        public init(nextToken: String? = nil, createTimeRange: TimeRange? = nil, deploymentGroupName: String? = nil, includeOnlyStatuses: [String]? = nil, applicationName: String? = nil) {
            self.nextToken = nextToken
            self.createTimeRange = createTimeRange
            self.deploymentGroupName = deploymentGroupName
            self.includeOnlyStatuses = includeOnlyStatuses
            self.applicationName = applicationName
        }

    }

    public struct BatchGetDeploymentsInput: Serializable, Initializable {
        /// A list of deployment IDs, separated by spaces.
        var deploymentIds: [String]? = nil

        public init() {}

        public init(deploymentIds: [String]? = nil) {
            self.deploymentIds = deploymentIds
        }

    }

    public struct DeleteDeploymentGroupOutput: Serializable, Initializable {
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
        var hooksNotCleanedUp: [AutoScalingGroup]? = nil

        public init() {}

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

    }

    public struct ListApplicationRevisionsOutput: Serializable, Initializable {
        /// A list of locations that contain the matching revisions.
        var revisions: [RevisionLocation]? = nil
        /// If a large amount of information is returned, an identifier will also be returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
        var nextToken: String? = nil

        public init() {}

        public init(revisions: [RevisionLocation]? = nil, nextToken: String? = nil) {
            self.revisions = revisions
            self.nextToken = nextToken
        }

    }

    public struct ListOnPremisesInstancesOutput: Serializable, Initializable {
        /// The list of matching on-premises instance names.
        var instanceNames: [String]? = nil
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
        var nextToken: String? = nil

        public init() {}

        public init(instanceNames: [String]? = nil, nextToken: String? = nil) {
            self.instanceNames = instanceNames
            self.nextToken = nextToken
        }

    }

    public struct ListDeploymentConfigsInput: Serializable, Initializable {
        /// An identifier returned from the previous list deployment configurations call. It can be used to return the next set of deployment configurations in the list. 
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct BatchGetApplicationsOutput: Serializable, Initializable {
        /// Information about the applications.
        var applicationsInfo: [ApplicationInfo]? = nil

        public init() {}

        public init(applicationsInfo: [ApplicationInfo]? = nil) {
            self.applicationsInfo = applicationsInfo
        }

    }

    public struct BlueGreenDeploymentConfiguration: Serializable, Initializable {
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment.
        var terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption? = nil
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment.
        var greenFleetProvisioningOption: GreenFleetProvisioningOption? = nil
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        var deploymentReadyOption: DeploymentReadyOption? = nil

        public init() {}

        public init(terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption? = nil, greenFleetProvisioningOption: GreenFleetProvisioningOption? = nil, deploymentReadyOption: DeploymentReadyOption? = nil) {
            self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
            self.greenFleetProvisioningOption = greenFleetProvisioningOption
            self.deploymentReadyOption = deploymentReadyOption
        }

    }

    public struct BatchGetDeploymentGroupsOutput: Serializable, Initializable {
        /// Information about the deployment groups.
        var deploymentGroupsInfo: [DeploymentGroupInfo]? = nil
        /// Information about errors that may have occurred during the API call.
        var errorMessage: String? = nil

        public init() {}

        public init(deploymentGroupsInfo: [DeploymentGroupInfo]? = nil, errorMessage: String? = nil) {
            self.deploymentGroupsInfo = deploymentGroupsInfo
            self.errorMessage = errorMessage
        }

    }

    public struct ContinueDeploymentInput: Serializable, Initializable {
        /// The deployment ID of the blue/green deployment for which you want to start rerouting traffic to the replacement environment.
        var deploymentId: String? = nil

        public init() {}

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

    }

    public struct DeleteDeploymentConfigInput: Serializable, Initializable {
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        var deploymentConfigName: String = ""

        public init() {}

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

    }

    public struct AutoScalingGroup: Serializable, Initializable {
        /// The Auto Scaling group name.
        var name: String? = nil
        /// An Auto Scaling lifecycle event hook name.
        var hook: String? = nil

        public init() {}

        public init(name: String? = nil, hook: String? = nil) {
            self.name = name
            self.hook = hook
        }

    }

    public struct ListDeploymentGroupsInput: Serializable, Initializable {
        /// An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
        var nextToken: String? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(nextToken: String? = nil, applicationName: String) {
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

    }

    public struct ListDeploymentInstancesInput: Serializable, Initializable {
        /// A subset of instances to list by status:   Pending: Include those instance with pending deployments.   InProgress: Include those instance where deployments are still in progress.   Succeeded: Include those instances with successful deployments.   Failed: Include those instance with failed deployments.   Skipped: Include those instance with skipped deployments.   Unknown: Include those instance with deployments in an unknown state.  
        var instanceStatusFilter: [String]? = nil
        /// The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
        var instanceTypeFilter: [String]? = nil
        /// An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
        var nextToken: String? = nil
        /// The unique ID of a deployment.
        var deploymentId: String = ""

        public init() {}

        public init(instanceStatusFilter: [String]? = nil, instanceTypeFilter: [String]? = nil, nextToken: String? = nil, deploymentId: String) {
            self.instanceStatusFilter = instanceStatusFilter
            self.instanceTypeFilter = instanceTypeFilter
            self.nextToken = nextToken
            self.deploymentId = deploymentId
        }

    }

    public struct DeleteApplicationInput: Serializable, Initializable {
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

    }

    public struct CreateDeploymentGroupInput: Serializable, Initializable {
        /// The name of a new deployment group for the specified application.
        var deploymentGroupName: String = ""
        /// A service role ARN that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
        var serviceRoleArn: String = ""
        /// Information about the load balancer used in a blue/green deployment.
        var loadBalancerInfo: LoadBalancerInfo? = nil
        /// Information to add about Amazon CloudWatch alarms when the deployment group is created. 
        var alarmConfiguration: AlarmConfiguration? = nil
        /// Information about blue/green deployment options for a deployment group.
        var blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""
        /// A list of associated Auto Scaling groups.
        var autoScalingGroups: [String]? = nil
        /// If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or the deployment group. For more information about the predefined deployment configurations in AWS CodeDeploy, see see Working with Deployment Groups in AWS CodeDeploy in the AWS CodeDeploy User Guide.
        var deploymentConfigName: String? = nil
        /// Information about triggers to create when the deployment group is created. For examples, see Create a Trigger for an AWS CodeDeploy Event in the AWS CodeDeploy User Guide.
        var triggerConfigurations: [TriggerConfig]? = nil
        /// Information about the type of deployment, standard or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
        var deploymentStyle: DeploymentStyle? = nil
        /// The Amazon EC2 tags on which to filter.
        var ec2TagFilters: [EC2TagFilter]? = nil
        /// The on-premises instance tags on which to filter.
        var onPremisesInstanceTagFilters: [TagFilter]? = nil
        /// Configuration information for an automatic rollback that is added when a deployment group is created.
        var autoRollbackConfiguration: AutoRollbackConfiguration? = nil

        public init() {}

        public init(deploymentGroupName: String, serviceRoleArn: String, loadBalancerInfo: LoadBalancerInfo? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, ec2TagFilters: [EC2TagFilter]? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.serviceRoleArn = serviceRoleArn
            self.loadBalancerInfo = loadBalancerInfo
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.ec2TagFilters = ec2TagFilters
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
        }

    }

    public struct LoadBalancerInfo: Serializable, Initializable {
        /// An array containing information about the load balancer in Elastic Load Balancing to use in a blue/green deployment.
        var elbInfoList: [ELBInfo]? = nil

        public init() {}

        public init(elbInfoList: [ELBInfo]? = nil) {
            self.elbInfoList = elbInfoList
        }

    }

    public struct BatchGetDeploymentInstancesInput: Serializable, Initializable {
        /// The unique ID of a deployment.
        var deploymentId: String = ""
        /// The unique IDs of instances in the deployment group.
        var instanceIds: [String] = []

        public init() {}

        public init(deploymentId: String, instanceIds: [String]) {
            self.deploymentId = deploymentId
            self.instanceIds = instanceIds
        }

    }

    public struct BatchGetOnPremisesInstancesOutput: Serializable, Initializable {
        /// Information about the on-premises instances.
        var instanceInfos: [InstanceInfo]? = nil

        public init() {}

        public init(instanceInfos: [InstanceInfo]? = nil) {
            self.instanceInfos = instanceInfos
        }

    }

    public struct StopDeploymentOutput: Serializable, Initializable {
        /// The status of the stop deployment operation:   Pending: The stop operation is pending.   Succeeded: The stop operation was successful.  
        var status: String? = nil
        /// An accompanying status message.
        var statusMessage: String? = nil

        public init() {}

        public init(status: String? = nil, statusMessage: String? = nil) {
            self.status = status
            self.statusMessage = statusMessage
        }

    }

    public struct AutoRollbackConfiguration: Serializable, Initializable {
        /// The event type or types that trigger a rollback.
        var events: [String]? = nil
        /// Indicates whether a defined automatic rollback configuration is currently enabled.
        var enabled: Bool? = nil

        public init() {}

        public init(events: [String]? = nil, enabled: Bool? = nil) {
            self.events = events
            self.enabled = enabled
        }

    }

    public struct ListDeploymentConfigsOutput: Serializable, Initializable {
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
        var nextToken: String? = nil
        /// A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
        var deploymentConfigsList: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, deploymentConfigsList: [String]? = nil) {
            self.nextToken = nextToken
            self.deploymentConfigsList = deploymentConfigsList
        }

    }

    public struct GitHubLocation: Serializable, Initializable {
        /// The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
        var commitId: String? = nil
        /// The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision.  Specified as account/repository.
        var repository: String? = nil

        public init() {}

        public init(commitId: String? = nil, repository: String? = nil) {
            self.commitId = commitId
            self.repository = repository
        }

    }

    public struct CreateDeploymentConfigInput: Serializable, Initializable {
        /// The name of the deployment configuration to create.
        var deploymentConfigName: String = ""
        /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:   HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.   FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.   The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
        var minimumHealthyHosts: MinimumHealthyHosts? = nil

        public init() {}

        public init(deploymentConfigName: String, minimumHealthyHosts: MinimumHealthyHosts? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
        }

    }

    public struct ListDeploymentGroupsOutput: Serializable, Initializable {
        /// A list of corresponding deployment group names.
        var deploymentGroups: [String]? = nil
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
        var nextToken: String? = nil
        /// The application name.
        var applicationName: String? = nil

        public init() {}

        public init(deploymentGroups: [String]? = nil, nextToken: String? = nil, applicationName: String? = nil) {
            self.deploymentGroups = deploymentGroups
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

    }

    public struct AddTagsToOnPremisesInstancesInput: Serializable, Initializable {
        /// The tag key-value pairs to add to the on-premises instances. Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.
        var tags: [Tag] = []
        /// The names of the on-premises instances to which to add tags.
        var instanceNames: [String] = []

        public init() {}

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

    }

    public struct ListOnPremisesInstancesInput: Serializable, Initializable {
        /// The on-premises instance tags that will be used to restrict the corresponding on-premises instance names returned.
        var tagFilters: [TagFilter]? = nil
        /// An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
        var nextToken: String? = nil
        /// The registration status of the on-premises instances:   Deregistered: Include deregistered on-premises instances in the resulting list.   Registered: Include registered on-premises instances in the resulting list.  
        var registrationStatus: String? = nil

        public init() {}

        public init(tagFilters: [TagFilter]? = nil, nextToken: String? = nil, registrationStatus: String? = nil) {
            self.tagFilters = tagFilters
            self.nextToken = nextToken
            self.registrationStatus = registrationStatus
        }

    }

    public struct RegisterApplicationRevisionInput: Serializable, Initializable {
        /// A comment about the revision.
        var description: String? = nil
        /// Information about the application revision to register, including type and location.
        var revision: RevisionLocation = RevisionLocation()
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(description: String? = nil, revision: RevisionLocation, applicationName: String) {
            self.description = description
            self.revision = revision
            self.applicationName = applicationName
        }

    }

    public struct CreateApplicationOutput: Serializable, Initializable {
        /// A unique application ID.
        var applicationId: String? = nil

        public init() {}

        public init(applicationId: String? = nil) {
            self.applicationId = applicationId
        }

    }

    public struct RemoveTagsFromOnPremisesInstancesInput: Serializable, Initializable {
        /// The tag key-value pairs to remove from the on-premises instances.
        var tags: [Tag] = []
        /// The names of the on-premises instances from which to remove tags.
        var instanceNames: [String] = []

        public init() {}

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

    }

    public struct RevisionInfo: Serializable, Initializable {
        /// Information about an application revision, including usage details and associated deployment groups.
        var genericRevisionInfo: GenericRevisionInfo? = nil
        /// Information about the location and type of an application revision.
        var revisionLocation: RevisionLocation? = nil

        public init() {}

        public init(genericRevisionInfo: GenericRevisionInfo? = nil, revisionLocation: RevisionLocation? = nil) {
            self.genericRevisionInfo = genericRevisionInfo
            self.revisionLocation = revisionLocation
        }

    }

    public struct EC2TagFilter: Serializable, Initializable {
        /// The tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        var type: String? = nil
        /// The tag filter value.
        var value: String? = nil
        /// The tag filter key.
        var key: String? = nil

        public init() {}

        public init(type: String? = nil, value: String? = nil, key: String? = nil) {
            self.type = type
            self.value = value
            self.key = key
        }

    }

    public struct DeploymentGroupInfo: Serializable, Initializable {
        /// The deployment group name.
        var deploymentGroupName: String? = nil
        /// A service role ARN.
        var serviceRoleArn: String? = nil
        /// Information about the load balancer to use in a blue/green deployment.
        var loadBalancerInfo: LoadBalancerInfo? = nil
        /// The deployment group ID.
        var deploymentGroupId: String? = nil
        /// A list of alarms associated with the deployment group.
        var alarmConfiguration: AlarmConfiguration? = nil
        /// Information about blue/green deployment options for a deployment group.
        var blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil
        /// The application name.
        var applicationName: String? = nil
        /// A list of associated Auto Scaling groups.
        var autoScalingGroups: [AutoScalingGroup]? = nil
        /// The deployment configuration name.
        var deploymentConfigName: String? = nil
        /// Information about triggers associated with the deployment group.
        var triggerConfigurations: [TriggerConfig]? = nil
        /// Information about the type of deployment, either standard or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        var deploymentStyle: DeploymentStyle? = nil
        /// The on-premises instance tags on which to filter.
        var onPremisesInstanceTagFilters: [TagFilter]? = nil
        /// The Amazon EC2 tags on which to filter.
        var ec2TagFilters: [EC2TagFilter]? = nil
        /// Information about the automatic rollback configuration associated with the deployment group.
        var autoRollbackConfiguration: AutoRollbackConfiguration? = nil
        /// Information about the deployment group's target revision, including type and location.
        var targetRevision: RevisionLocation? = nil

        public init() {}

        public init(deploymentGroupName: String? = nil, serviceRoleArn: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, deploymentGroupId: String? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String? = nil, autoScalingGroups: [AutoScalingGroup]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, targetRevision: RevisionLocation? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.serviceRoleArn = serviceRoleArn
            self.loadBalancerInfo = loadBalancerInfo
            self.deploymentGroupId = deploymentGroupId
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.targetRevision = targetRevision
        }

    }

    public struct ListApplicationsInput: Serializable, Initializable {
        /// An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct StopDeploymentInput: Serializable, Initializable {
        /// The unique ID of a deployment.
        var deploymentId: String = ""
        /// Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.
        var autoRollbackEnabled: Bool? = nil

        public init() {}

        public init(deploymentId: String, autoRollbackEnabled: Bool? = nil) {
            self.deploymentId = deploymentId
            self.autoRollbackEnabled = autoRollbackEnabled
        }

    }

    public struct InstanceInfo: Serializable, Initializable {
        /// The ARN of the IAM session associated with the on-premises instance.
        var iamSessionArn: String? = nil
        /// The name of the on-premises instance.
        var instanceName: String? = nil
        /// If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
        var deregisterTime: Date? = nil
        /// The tags currently associated with the on-premises instance.
        var tags: [Tag]? = nil
        /// The time at which the on-premises instance was registered.
        var registerTime: Date? = nil
        /// The ARN of the on-premises instance.
        var instanceArn: String? = nil
        /// The IAM user ARN associated with the on-premises instance.
        var iamUserArn: String? = nil

        public init() {}

        public init(iamSessionArn: String? = nil, instanceName: String? = nil, deregisterTime: Date? = nil, tags: [Tag]? = nil, registerTime: Date? = nil, instanceArn: String? = nil, iamUserArn: String? = nil) {
            self.iamSessionArn = iamSessionArn
            self.instanceName = instanceName
            self.deregisterTime = deregisterTime
            self.tags = tags
            self.registerTime = registerTime
            self.instanceArn = instanceArn
            self.iamUserArn = iamUserArn
        }

    }

    public struct ListApplicationsOutput: Serializable, Initializable {
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications, will also be returned. in the list.
        var nextToken: String? = nil
        /// A list of application names.
        var applications: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, applications: [String]? = nil) {
            self.nextToken = nextToken
            self.applications = applications
        }

    }

    public struct Diagnostics: Serializable, Initializable {
        /// The name of the script.
        var scriptName: String? = nil
        /// The message associated with the error.
        var message: String? = nil
        /// The associated error code:   Success: The specified script ran.   ScriptMissing: The specified script was not found in the specified location.   ScriptNotExecutable: The specified script is not a recognized executable file type.   ScriptTimedOut: The specified script did not finish running in the specified time period.   ScriptFailed: The specified script failed to run as expected.   UnknownError: The specified script did not run for an unknown reason.  
        var errorCode: String? = nil
        /// The last portion of the diagnostic log. If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.
        var logTail: String? = nil

        public init() {}

        public init(scriptName: String? = nil, message: String? = nil, errorCode: String? = nil, logTail: String? = nil) {
            self.scriptName = scriptName
            self.message = message
            self.errorCode = errorCode
            self.logTail = logTail
        }

    }

    public struct GenericRevisionInfo: Serializable, Initializable {
        /// A comment about the revision.
        var description: String? = nil
        /// When the revision was first used by AWS CodeDeploy.
        var firstUsedTime: Date? = nil
        /// When the revision was last used by AWS CodeDeploy.
        var lastUsedTime: Date? = nil
        /// When the revision was registered with AWS CodeDeploy.
        var registerTime: Date? = nil
        /// The deployment groups for which this is the current target revision.
        var deploymentGroups: [String]? = nil

        public init() {}

        public init(description: String? = nil, firstUsedTime: Date? = nil, lastUsedTime: Date? = nil, registerTime: Date? = nil, deploymentGroups: [String]? = nil) {
            self.description = description
            self.firstUsedTime = firstUsedTime
            self.lastUsedTime = lastUsedTime
            self.registerTime = registerTime
            self.deploymentGroups = deploymentGroups
        }

    }

    public struct BatchGetApplicationsInput: Serializable, Initializable {
        /// A list of application names separated by spaces.
        var applicationNames: [String]? = nil

        public init() {}

        public init(applicationNames: [String]? = nil) {
            self.applicationNames = applicationNames
        }

    }

    public struct GetApplicationRevisionInput: Serializable, Initializable {
        /// Information about the application revision to get, including type and location.
        var revision: RevisionLocation = RevisionLocation()
        /// The name of the application that corresponds to the revision.
        var applicationName: String = ""

        public init() {}

        public init(revision: RevisionLocation, applicationName: String) {
            self.revision = revision
            self.applicationName = applicationName
        }

    }

    public struct ApplicationInfo: Serializable, Initializable {
        /// True if the user has authenticated with GitHub for the specified application; otherwise, false.
        var linkedToGitHub: Bool? = nil
        /// The time at which the application was created.
        var createTime: Date? = nil
        /// The application name.
        var applicationName: String? = nil
        /// The application ID.
        var applicationId: String? = nil

        public init() {}

        public init(linkedToGitHub: Bool? = nil, createTime: Date? = nil, applicationName: String? = nil, applicationId: String? = nil) {
            self.linkedToGitHub = linkedToGitHub
            self.createTime = createTime
            self.applicationName = applicationName
            self.applicationId = applicationId
        }

    }

    public struct GetDeploymentGroupOutput: Serializable, Initializable {
        /// Information about the deployment group.
        var deploymentGroupInfo: DeploymentGroupInfo? = nil

        public init() {}

        public init(deploymentGroupInfo: DeploymentGroupInfo? = nil) {
            self.deploymentGroupInfo = deploymentGroupInfo
        }

    }

    public struct BlueInstanceTerminationOption: Serializable, Initializable {
        /// The action to take on instances in the original environment after a successful blue/green deployment.   TERMINATE: Instances are terminated after a specified wait time.   KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.  
        var action: String? = nil
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        var terminationWaitTimeInMinutes: Int32? = nil

        public init() {}

        public init(action: String? = nil, terminationWaitTimeInMinutes: Int32? = nil) {
            self.action = action
            self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
        }

    }

    public struct TriggerConfig: Serializable, Initializable {
        /// The event type or types for which notifications are triggered.
        var triggerEvents: [String]? = nil
        /// The name of the notification trigger.
        var triggerName: String? = nil
        /// The ARN of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        var triggerTargetArn: String? = nil

        public init() {}

        public init(triggerEvents: [String]? = nil, triggerName: String? = nil, triggerTargetArn: String? = nil) {
            self.triggerEvents = triggerEvents
            self.triggerName = triggerName
            self.triggerTargetArn = triggerTargetArn
        }

    }

    public struct GetDeploymentGroupInput: Serializable, Initializable {
        /// The name of an existing deployment group for the specified application.
        var deploymentGroupName: String = ""
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

    }

    public struct AlarmConfiguration: Serializable, Initializable {
        /// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
        var alarms: [Alarm]? = nil
        /// Indicates whether the alarm configuration is enabled.
        var enabled: Bool? = nil
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.   true: The deployment will proceed even if alarm status information can't be retrieved from Amazon CloudWatch.   false: The deployment will stop if alarm status information can't be retrieved from Amazon CloudWatch.  
        var ignorePollAlarmFailure: Bool? = nil

        public init() {}

        public init(alarms: [Alarm]? = nil, enabled: Bool? = nil, ignorePollAlarmFailure: Bool? = nil) {
            self.alarms = alarms
            self.enabled = enabled
            self.ignorePollAlarmFailure = ignorePollAlarmFailure
        }

    }

    public struct BatchGetDeploymentGroupsInput: Serializable, Initializable {
        /// The deployment groups' names.
        var deploymentGroupNames: [String] = []
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(deploymentGroupNames: [String], applicationName: String) {
            self.deploymentGroupNames = deploymentGroupNames
            self.applicationName = applicationName
        }

    }

    public struct CreateDeploymentInput: Serializable, Initializable {
        /// The type and location of the revision to deploy.
        var revision: RevisionLocation? = nil
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account. If not specified, the value configured in the deployment group will be used as the default. If the deployment group does not have a deployment configuration associated with it, then CodeDeployDefault.OneAtATime will be used by default.
        var deploymentConfigName: String? = nil
        /// Information about the instances that will belong to the replacement environment in a blue/green deployment.
        var targetInstances: TargetInstances? = nil
        /// If set to true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If set to false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to fail to an instance, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        var ignoreApplicationStopFailures: Bool? = nil
        /// The name of the deployment group.
        var deploymentGroupName: String? = nil
        /// Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.
        var updateOutdatedInstancesOnly: Bool? = nil
        /// A comment about the deployment.
        var description: String? = nil
        /// Configuration information for an automatic rollback that is added when a deployment is created.
        var autoRollbackConfiguration: AutoRollbackConfiguration? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(revision: RevisionLocation? = nil, deploymentConfigName: String? = nil, targetInstances: TargetInstances? = nil, ignoreApplicationStopFailures: Bool? = nil, deploymentGroupName: String? = nil, updateOutdatedInstancesOnly: Bool? = nil, description: String? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, applicationName: String) {
            self.revision = revision
            self.deploymentConfigName = deploymentConfigName
            self.targetInstances = targetInstances
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.deploymentGroupName = deploymentGroupName
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
            self.description = description
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.applicationName = applicationName
        }

    }

    public struct S3Location: Serializable, Initializable {
        /// The file type of the application revision. Must be one of the following:   tar: A tar archive file.   tgz: A compressed tar archive file.   zip: A zip archive file.  
        var bundleType: String? = nil
        /// A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision. If the version is not specified, the system will use the most recent version by default.
        var version: String? = nil
        /// The name of the Amazon S3 bucket where the application revision is stored.
        var bucket: String? = nil
        /// The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        var key: String? = nil
        /// The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision. If the ETag is not specified as an input parameter, ETag validation of the object will be skipped.
        var eTag: String? = nil

        public init() {}

        public init(bundleType: String? = nil, version: String? = nil, bucket: String? = nil, key: String? = nil, eTag: String? = nil) {
            self.bundleType = bundleType
            self.version = version
            self.bucket = bucket
            self.key = key
            self.eTag = eTag
        }

    }

    public struct GetApplicationOutput: Serializable, Initializable {
        /// Information about the application.
        var application: ApplicationInfo? = nil

        public init() {}

        public init(application: ApplicationInfo? = nil) {
            self.application = application
        }

    }

    public struct ELBInfo: Serializable, Initializable {
        /// The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment.
        var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct GetDeploymentConfigInput: Serializable, Initializable {
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        var deploymentConfigName: String = ""

        public init() {}

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

    }

    public struct ListDeploymentsOutput: Serializable, Initializable {
        /// A list of deployment IDs.
        var deployments: [String]? = nil
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
        var nextToken: String? = nil

        public init() {}

        public init(deployments: [String]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

    }

    public struct DeleteDeploymentGroupInput: Serializable, Initializable {
        /// The name of an existing deployment group for the specified application.
        var deploymentGroupName: String = ""
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

    }

    public struct ListDeploymentInstancesOutput: Serializable, Initializable {
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
        var nextToken: String? = nil
        /// A list of instance IDs.
        var instancesList: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, instancesList: [String]? = nil) {
            self.nextToken = nextToken
            self.instancesList = instancesList
        }

    }

    public struct DeregisterOnPremisesInstanceInput: Serializable, Initializable {
        /// The name of the on-premises instance to deregister.
        var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct BatchGetApplicationRevisionsOutput: Serializable, Initializable {
        /// Additional information about the revisions, including the type and location.
        var revisions: [RevisionInfo]? = nil
        /// Information about errors that may have occurred during the API call.
        var errorMessage: String? = nil
        /// The name of the application that corresponds to the revisions.
        var applicationName: String? = nil

        public init() {}

        public init(revisions: [RevisionInfo]? = nil, errorMessage: String? = nil, applicationName: String? = nil) {
            self.revisions = revisions
            self.errorMessage = errorMessage
            self.applicationName = applicationName
        }

    }

    public struct GetApplicationInput: Serializable, Initializable {
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

    }

    public struct GetOnPremisesInstanceInput: Serializable, Initializable {
        /// The name of the on-premises instance about which to get information.
        var instanceName: String = ""

        public init() {}

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

    }

    public struct GetApplicationRevisionOutput: Serializable, Initializable {
        /// Additional information about the revision, including type and location.
        var revision: RevisionLocation? = nil
        /// General information about the revision.
        var revisionInfo: GenericRevisionInfo? = nil
        /// The name of the application that corresponds to the revision.
        var applicationName: String? = nil

        public init() {}

        public init(revision: RevisionLocation? = nil, revisionInfo: GenericRevisionInfo? = nil, applicationName: String? = nil) {
            self.revision = revision
            self.revisionInfo = revisionInfo
            self.applicationName = applicationName
        }

    }

    public struct GreenFleetProvisioningOption: Serializable, Initializable {
        /// The method used to add instances to a replacement environment.   DISCOVER_EXISTING: Use instances that already exist or will be created manually.   COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.  
        var action: String? = nil

        public init() {}

        public init(action: String? = nil) {
            self.action = action
        }

    }

    public struct DeploymentOverview: Serializable, Initializable {
        /// The number of instances in which the deployment is in progress.
        var inProgress: Int64? = nil
        /// The number of instances in the deployment in a pending state.
        var pending: Int64? = nil
        /// The number of instances in the deployment in a skipped state.
        var skipped: Int64? = nil
        /// The number of instances in the deployment to which revisions have been successfully deployed.
        var succeeded: Int64? = nil
        /// The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
        var ready: Int64? = nil
        /// The number of instances in the deployment in a failed state.
        var failed: Int64? = nil

        public init() {}

        public init(inProgress: Int64? = nil, pending: Int64? = nil, skipped: Int64? = nil, succeeded: Int64? = nil, ready: Int64? = nil, failed: Int64? = nil) {
            self.inProgress = inProgress
            self.pending = pending
            self.skipped = skipped
            self.succeeded = succeeded
            self.ready = ready
            self.failed = failed
        }

    }

    public struct UpdateApplicationInput: Serializable, Initializable {
        /// The new name to give the application.
        var newApplicationName: String? = nil
        /// The current name of the application you want to change.
        var applicationName: String? = nil

        public init() {}

        public init(newApplicationName: String? = nil, applicationName: String? = nil) {
            self.newApplicationName = newApplicationName
            self.applicationName = applicationName
        }

    }

    public struct UpdateDeploymentGroupInput: Serializable, Initializable {
        /// A replacement ARN for the service role, if you want to change it.
        var serviceRoleArn: String? = nil
        /// The new name of the deployment group, if you want to change it.
        var newDeploymentGroupName: String? = nil
        /// Information about the load balancer used in a blue/green deployment.
        var loadBalancerInfo: LoadBalancerInfo? = nil
        /// Information to add or change about Amazon CloudWatch alarms when the deployment group is updated. 
        var alarmConfiguration: AlarmConfiguration? = nil
        /// Information about blue/green deployment options for a deployment group.
        var blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil
        /// The application name corresponding to the deployment group to update.
        var applicationName: String = ""
        /// The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.
        var autoScalingGroups: [String]? = nil
        /// The replacement deployment configuration name to use, if you want to change it.
        var deploymentConfigName: String? = nil
        /// Information about triggers to change when the deployment group is updated. For examples, see Modify Triggers in an AWS CodeDeploy Deployment Group in the AWS CodeDeploy User Guide.
        var triggerConfigurations: [TriggerConfig]? = nil
        /// Information about the type of deployment, either standard or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        var deploymentStyle: DeploymentStyle? = nil
        /// The current name of the deployment group.
        var currentDeploymentGroupName: String = ""
        /// The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        var onPremisesInstanceTagFilters: [TagFilter]? = nil
        /// The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        var ec2TagFilters: [EC2TagFilter]? = nil
        /// Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
        var autoRollbackConfiguration: AutoRollbackConfiguration? = nil

        public init() {}

        public init(serviceRoleArn: String? = nil, newDeploymentGroupName: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, currentDeploymentGroupName: String, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.newDeploymentGroupName = newDeploymentGroupName
            self.loadBalancerInfo = loadBalancerInfo
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.currentDeploymentGroupName = currentDeploymentGroupName
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
        }

    }

    public struct CreateDeploymentGroupOutput: Serializable, Initializable {
        /// A unique deployment group ID.
        var deploymentGroupId: String? = nil

        public init() {}

        public init(deploymentGroupId: String? = nil) {
            self.deploymentGroupId = deploymentGroupId
        }

    }

    public struct InstanceSummary: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String? = nil
        /// The deployment status for this instance:   Pending: The deployment is pending for this instance.   In Progress: The deployment is in progress for this instance.   Succeeded: The deployment has succeeded for this instance.   Failed: The deployment has failed for this instance.   Skipped: The deployment has been skipped for this instance.   Unknown: The deployment status is unknown for this instance.  
        var status: String? = nil
        /// Information about which environment an instance belongs to in a blue/green deployment.   BLUE: The instance is part of the original environment.   GREEN: The instance is part of the replacement environment.  
        var instanceType: String? = nil
        /// A timestamp indicating when the instance information was last updated.
        var lastUpdatedAt: Date? = nil
        /// The deployment ID.
        var deploymentId: String? = nil
        /// A list of lifecycle events for this instance.
        var lifecycleEvents: [LifecycleEvent]? = nil

        public init() {}

        public init(instanceId: String? = nil, status: String? = nil, instanceType: String? = nil, lastUpdatedAt: Date? = nil, deploymentId: String? = nil, lifecycleEvents: [LifecycleEvent]? = nil) {
            self.instanceId = instanceId
            self.status = status
            self.instanceType = instanceType
            self.lastUpdatedAt = lastUpdatedAt
            self.deploymentId = deploymentId
            self.lifecycleEvents = lifecycleEvents
        }

    }

    public struct RegisterOnPremisesInstanceInput: Serializable, Initializable {
        /// The ARN of the IAM session to associate with the on-premises instance.
        var iamSessionArn: String? = nil
        /// The ARN of the IAM user to associate with the on-premises instance.
        var iamUserArn: String? = nil
        /// The name of the on-premises instance to register.
        var instanceName: String = ""

        public init() {}

        public init(iamSessionArn: String? = nil, iamUserArn: String? = nil, instanceName: String) {
            self.iamSessionArn = iamSessionArn
            self.iamUserArn = iamUserArn
            self.instanceName = instanceName
        }

    }

    public struct DeploymentConfigInfo: Serializable, Initializable {
        /// The deployment configuration name.
        var deploymentConfigName: String? = nil
        /// Information about the number or percentage of minimum healthy instance.
        var minimumHealthyHosts: MinimumHealthyHosts? = nil
        /// The time at which the deployment configuration was created.
        var createTime: Date? = nil
        /// The deployment configuration ID.
        var deploymentConfigId: String? = nil

        public init() {}

        public init(deploymentConfigName: String? = nil, minimumHealthyHosts: MinimumHealthyHosts? = nil, createTime: Date? = nil, deploymentConfigId: String? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
            self.createTime = createTime
            self.deploymentConfigId = deploymentConfigId
        }

    }

    public struct LifecycleEvent: Serializable, Initializable {
        /// Diagnostic information about the deployment lifecycle event.
        var diagnostics: Diagnostics? = nil
        /// The deployment lifecycle event status:   Pending: The deployment lifecycle event is pending.   InProgress: The deployment lifecycle event is in progress.   Succeeded: The deployment lifecycle event ran successfully.   Failed: The deployment lifecycle event has failed.   Skipped: The deployment lifecycle event has been skipped.   Unknown: The deployment lifecycle event is unknown.  
        var status: String? = nil
        /// A timestamp indicating when the deployment lifecycle event ended.
        var endTime: Date? = nil
        /// A timestamp indicating when the deployment lifecycle event started.
        var startTime: Date? = nil
        /// The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
        var lifecycleEventName: String? = nil

        public init() {}

        public init(diagnostics: Diagnostics? = nil, status: String? = nil, endTime: Date? = nil, startTime: Date? = nil, lifecycleEventName: String? = nil) {
            self.diagnostics = diagnostics
            self.status = status
            self.endTime = endTime
            self.startTime = startTime
            self.lifecycleEventName = lifecycleEventName
        }

    }

    public struct TargetInstances: Serializable, Initializable {
        /// The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment.
        var tagFilters: [EC2TagFilter]? = nil
        /// The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        var autoScalingGroups: [String]? = nil

        public init() {}

        public init(tagFilters: [EC2TagFilter]? = nil, autoScalingGroups: [String]? = nil) {
            self.tagFilters = tagFilters
            self.autoScalingGroups = autoScalingGroups
        }

    }

    public struct GetDeploymentInstanceInput: Serializable, Initializable {
        /// The unique ID of an instance in the deployment group.
        var instanceId: String = ""
        /// The unique ID of a deployment.
        var deploymentId: String = ""

        public init() {}

        public init(instanceId: String, deploymentId: String) {
            self.instanceId = instanceId
            self.deploymentId = deploymentId
        }

    }

    public struct MinimumHealthyHosts: Serializable, Initializable {
        /// The minimum healthy instance type:   HOST_COUNT: The minimum number of healthy instance as an absolute value.   FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.   In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment will be successful if six or more instances are deployed to successfully; otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment will be successful if four or more instance are deployed to successfully; otherwise, the deployment fails.  In a call to the get deployment configuration operation, CodeDeployDefault.OneAtATime will return a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy will try to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment still succeeds. 
        var type: String? = nil
        /// The minimum healthy instance value.
        var value: Int32? = nil

        public init() {}

        public init(type: String? = nil, value: Int32? = nil) {
            self.type = type
            self.value = value
        }

    }

}