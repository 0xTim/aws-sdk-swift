// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Cloudformation {

    public struct DescribeStacksInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack, which are not always interchangeable:   Running stacks: You can specify either the stack's name or its unique stack ID.   Deleted stacks: You must specify the unique stack ID.   Default: There is no default value.
        public var stackName: String? = nil
        /// A string that identifies the next page of stacks that you want to retrieve.
        public var nextToken: String? = nil

        public init() {}

        public init(stackName: String? = nil, nextToken: String? = nil) {
            self.stackName = stackName
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeleteStackInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack.
        public var stackName: String = ""
        /// For stacks in the DELETE_FAILED state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, AWS CloudFormation deletes the stack but does not delete the retained resources. Retaining resources is useful when you cannot delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.
        public var retainResources: [String]? = nil
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to delete the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
        public var roleARN: String? = nil

        public init() {}

        public init(stackName: String, retainResources: [String]? = nil, roleARN: String? = nil) {
            self.stackName = stackName
            self.retainResources = retainResources
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            if let retainResources = dictionary["RetainResources"] as? [String] {
                self.retainResources = retainResources
            }
            self.roleARN = dictionary["RoleARN"] as? String
        }
    }

    public struct GetStackPolicyOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Structure containing the stack policy body. (For more information, go to  Prevent Updates to Stack Resources in the AWS CloudFormation User Guide.)
        public var stackPolicyBody: String? = nil

        public init() {}

        public init(stackPolicyBody: String? = nil) {
            self.stackPolicyBody = stackPolicyBody
        }

        public init(dictionary: [String: Any]) throws {
            self.stackPolicyBody = dictionary["StackPolicyBody"] as? String
        }
    }

    public struct ResourceChange: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// For the Modify action, a list of ResourceChangeDetail structures that describes the changes that AWS CloudFormation will make to the resource. 
        public var details: [ResourceChangeDetail]? = nil
        /// The action that AWS CloudFormation takes on the resource, such as Add (adds a new resource), Modify (changes a resource), or Remove (deletes a resource).
        public var action: String? = nil
        /// The resource's logical ID, which is defined in the stack's template.
        public var logicalResourceId: String? = nil
        /// The type of AWS CloudFormation resource, such as AWS::S3::Bucket.
        public var resourceType: String? = nil
        /// For the Modify action, indicates whether AWS CloudFormation will replace the resource by creating a new one and deleting the old one. This value depends on the value of the RequiresRecreation property in the ResourceTargetDefinition structure. For example, if the RequiresRecreation field is Always and the Evaluation field is Static, Replacement is True. If the RequiresRecreation field is Always and the Evaluation field is Dynamic, Replacement is Conditionally. If you have multiple changes with different RequiresRecreation values, the Replacement value depends on the change with the most impact. A RequiresRecreation value of Always has the most impact, followed by Conditionally, and then Never.
        public var replacement: String? = nil
        /// The resource's physical ID (resource name). Resources that you are adding don't have physical IDs because they haven't been created.
        public var physicalResourceId: String? = nil
        /// For the Modify action, indicates which resource attribute is triggering this update, such as a change in the resource attribute's Metadata, Properties, or Tags.
        public var scope: [String]? = nil

        public init() {}

        public init(details: [ResourceChangeDetail]? = nil, action: String? = nil, logicalResourceId: String? = nil, resourceType: String? = nil, replacement: String? = nil, physicalResourceId: String? = nil, scope: [String]? = nil) {
            self.details = details
            self.action = action
            self.logicalResourceId = logicalResourceId
            self.resourceType = resourceType
            self.replacement = replacement
            self.physicalResourceId = physicalResourceId
            self.scope = scope
        }

        public init(dictionary: [String: Any]) throws {
            if let details = dictionary["Details"] as? [[String: Any]] {
                self.details = try details.map({ try ResourceChangeDetail(dictionary: $0) })
            }
            self.action = dictionary["Action"] as? String
            self.logicalResourceId = dictionary["LogicalResourceId"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            self.replacement = dictionary["Replacement"] as? String
            self.physicalResourceId = dictionary["PhysicalResourceId"] as? String
            if let scope = dictionary["Scope"] as? [String] {
                self.scope = scope
            }
        }
    }

    public struct StackSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        public var lastUpdatedTime: Date? = nil
        /// The time the stack was deleted.
        public var deletionTime: Date? = nil
        /// Unique stack identifier.
        public var stackId: String? = nil
        /// The current status of the stack.
        public var stackStatus: String = ""
        /// The time the stack was created.
        public var creationTime: Date = Date()
        /// Success/Failure message associated with the stack status.
        public var stackStatusReason: String? = nil
        /// The name associated with the stack.
        public var stackName: String = ""
        /// The template description of the template used to create the stack.
        public var templateDescription: String? = nil

        public init() {}

        public init(lastUpdatedTime: Date? = nil, deletionTime: Date? = nil, stackId: String? = nil, stackStatus: String, creationTime: Date, stackStatusReason: String? = nil, stackName: String, templateDescription: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.deletionTime = deletionTime
            self.stackId = stackId
            self.stackStatus = stackStatus
            self.creationTime = creationTime
            self.stackStatusReason = stackStatusReason
            self.stackName = stackName
            self.templateDescription = templateDescription
        }

        public init(dictionary: [String: Any]) throws {
            self.lastUpdatedTime = dictionary["LastUpdatedTime"] as? Date
            self.deletionTime = dictionary["DeletionTime"] as? Date
            self.stackId = dictionary["StackId"] as? String
            guard let stackStatus = dictionary["StackStatus"] as? String else { throw InitializableError.missingRequiredParam("StackStatus") }
            self.stackStatus = stackStatus
            guard let creationTime = dictionary["CreationTime"] as? Date else { throw InitializableError.missingRequiredParam("CreationTime") }
            self.creationTime = creationTime
            self.stackStatusReason = dictionary["StackStatusReason"] as? String
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            self.templateDescription = dictionary["TemplateDescription"] as? String
        }
    }

    public struct CreateChangeSetOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique ID of the stack.
        public var stackId: String? = nil
        /// The Amazon Resource Name (ARN) of the change set.
        public var id: String? = nil

        public init() {}

        public init(stackId: String? = nil, id: String? = nil) {
            self.stackId = stackId
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.stackId = dictionary["StackId"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct Stack: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Current status of the stack.
        public var stackStatus: String = ""
        /// A list of Tags that specify information about the stack.
        public var tags: [Tag]? = nil
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that is associated with the stack. During a stack operation, AWS CloudFormation uses this role's credentials to make calls on your behalf.
        public var roleARN: String? = nil
        /// Boolean to enable or disable rollback on stack creation failures:    true: disable rollback    false: enable rollback  
        public var disableRollback: Bool? = nil
        /// The time at which the stack was created.
        public var creationTime: Date = Date()
        /// A list of output structures.
        public var outputs: [Output]? = nil
        /// Success/failure message associated with the stack status.
        public var stackStatusReason: String? = nil
        /// SNS topic ARNs to which stack related events are published.
        public var notificationARNs: [String]? = nil
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        public var lastUpdatedTime: Date? = nil
        /// A user-defined description associated with the stack.
        public var description: String? = nil
        /// A list of Parameter structures.
        public var parameters: [Parameter]? = nil
        /// Unique identifier of the stack.
        public var stackId: String? = nil
        /// The unique ID of the change set.
        public var changeSetId: String? = nil
        /// The amount of time within which stack creation should complete.
        public var timeoutInMinutes: Int32? = nil
        /// The name associated with the stack.
        public var stackName: String = ""
        /// The capabilities allowed in the stack.
        public var capabilities: [String]? = nil

        public init() {}

        public init(stackStatus: String, tags: [Tag]? = nil, roleARN: String? = nil, disableRollback: Bool? = nil, creationTime: Date, outputs: [Output]? = nil, stackStatusReason: String? = nil, notificationARNs: [String]? = nil, lastUpdatedTime: Date? = nil, description: String? = nil, parameters: [Parameter]? = nil, stackId: String? = nil, changeSetId: String? = nil, timeoutInMinutes: Int32? = nil, stackName: String, capabilities: [String]? = nil) {
            self.stackStatus = stackStatus
            self.tags = tags
            self.roleARN = roleARN
            self.disableRollback = disableRollback
            self.creationTime = creationTime
            self.outputs = outputs
            self.stackStatusReason = stackStatusReason
            self.notificationARNs = notificationARNs
            self.lastUpdatedTime = lastUpdatedTime
            self.description = description
            self.parameters = parameters
            self.stackId = stackId
            self.changeSetId = changeSetId
            self.timeoutInMinutes = timeoutInMinutes
            self.stackName = stackName
            self.capabilities = capabilities
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackStatus = dictionary["StackStatus"] as? String else { throw InitializableError.missingRequiredParam("StackStatus") }
            self.stackStatus = stackStatus
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.roleARN = dictionary["RoleARN"] as? String
            self.disableRollback = dictionary["DisableRollback"] as? Bool
            guard let creationTime = dictionary["CreationTime"] as? Date else { throw InitializableError.missingRequiredParam("CreationTime") }
            self.creationTime = creationTime
            if let outputs = dictionary["Outputs"] as? [[String: Any]] {
                self.outputs = try outputs.map({ try Output(dictionary: $0) })
            }
            self.stackStatusReason = dictionary["StackStatusReason"] as? String
            if let notificationARNs = dictionary["NotificationARNs"] as? [String] {
                self.notificationARNs = notificationARNs
            }
            self.lastUpdatedTime = dictionary["LastUpdatedTime"] as? Date
            self.description = dictionary["Description"] as? String
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            self.stackId = dictionary["StackId"] as? String
            self.changeSetId = dictionary["ChangeSetId"] as? String
            self.timeoutInMinutes = dictionary["TimeoutInMinutes"] as? Int32
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
        }
    }

    public struct UpdateStackInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Structure containing a new stack policy body. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both. You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you do not specify a stack policy, the current policy that is associated with the stack is unchanged.
        public var stackPolicyBody: String? = nil
        /// Key-value pairs to associate with this stack. AWS CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 10 tags. If you don't specify this parameter, AWS CloudFormation doesn't modify the stack's tags. If you specify an empty value, AWS CloudFormation removes all associated tags.
        public var tags: [Tag]? = nil
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to update the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
        public var roleARN: String? = nil
        /// Structure containing the temporary overriding stack policy body. You can specify either the StackPolicyDuringUpdateBody or the StackPolicyDuringUpdateURL parameter, but not both. If you want to update protected resources, specify a temporary overriding stack policy during this update. If you do not specify a stack policy, the current policy that is associated with the stack will be used.
        public var stackPolicyDuringUpdateBody: String? = nil
        /// Reuse the existing template that is associated with the stack that you are updating.
        public var usePreviousTemplate: Bool? = nil
        /// Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same region as the stack. You can specify either the StackPolicyDuringUpdateBody or the StackPolicyDuringUpdateURL parameter, but not both. If you want to update protected resources, specify a temporary overriding stack policy during this update. If you do not specify a stack policy, the current policy that is associated with the stack will be used.
        public var stackPolicyDuringUpdateURL: String? = nil
        /// Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both. You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you do not specify a stack policy, the current policy that is associated with the stack is unchanged.
        public var stackPolicyURL: String? = nil
        /// Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that AWS CloudFormation associates with the stack. Specify an empty list to remove all notification topics.
        public var notificationARNs: [String]? = nil
        /// A list of Parameter structures that specify input parameters for the stack. For more information, see the Parameter data type.
        public var parameters: [Parameter]? = nil
        /// The template resource types that you have permissions to work with for this update stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. If the list of resource types doesn't include a resource that you're updating, the stack update fails. By default, AWS CloudFormation grants permissions to all resource types. AWS Identity and Access Management (IAM) uses this parameter for AWS CloudFormation-specific condition keys in IAM policies. For more information, see Controlling Access with AWS Identity and Access Management.
        public var resourceTypes: [String]? = nil
        /// Location of file containing the template body. The URL must point to a template that is located in an Amazon S3 bucket. For more information, go to Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
        public var templateURL: String? = nil
        /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to Template Anatomy in the AWS CloudFormation User Guide.) Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
        public var templateBody: String? = nil
        /// The name or unique stack ID of the stack to update.
        public var stackName: String = ""
        /// A list of values that you must specify before AWS CloudFormation can update certain stacks. Some stack templates might include resources that can affect permissions in your AWS account, for example, by creating new AWS Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge their capabilities by specifying this parameter. The only valid values are CAPABILITY_IAM and CAPABILITY_NAMED_IAM. The following resources require you to specify this parameter:  AWS::IAM::AccessKey,  AWS::IAM::Group,  AWS::IAM::InstanceProfile,  AWS::IAM::Policy,  AWS::IAM::Role,  AWS::IAM::User, and  AWS::IAM::UserToGroupAddition. If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary. If you have IAM resources, you can specify either capability. If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM. If you don't specify this parameter, this action returns an InsufficientCapabilities error. For more information, see Acknowledging IAM Resources in AWS CloudFormation Templates.
        public var capabilities: [String]? = nil

        public init() {}

        public init(stackPolicyBody: String? = nil, tags: [Tag]? = nil, roleARN: String? = nil, stackPolicyDuringUpdateBody: String? = nil, usePreviousTemplate: Bool? = nil, stackPolicyDuringUpdateURL: String? = nil, stackPolicyURL: String? = nil, notificationARNs: [String]? = nil, parameters: [Parameter]? = nil, resourceTypes: [String]? = nil, templateURL: String? = nil, templateBody: String? = nil, stackName: String, capabilities: [String]? = nil) {
            self.stackPolicyBody = stackPolicyBody
            self.tags = tags
            self.roleARN = roleARN
            self.stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody
            self.usePreviousTemplate = usePreviousTemplate
            self.stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL
            self.stackPolicyURL = stackPolicyURL
            self.notificationARNs = notificationARNs
            self.parameters = parameters
            self.resourceTypes = resourceTypes
            self.templateURL = templateURL
            self.templateBody = templateBody
            self.stackName = stackName
            self.capabilities = capabilities
        }

        public init(dictionary: [String: Any]) throws {
            self.stackPolicyBody = dictionary["StackPolicyBody"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.roleARN = dictionary["RoleARN"] as? String
            self.stackPolicyDuringUpdateBody = dictionary["StackPolicyDuringUpdateBody"] as? String
            self.usePreviousTemplate = dictionary["UsePreviousTemplate"] as? Bool
            self.stackPolicyDuringUpdateURL = dictionary["StackPolicyDuringUpdateURL"] as? String
            self.stackPolicyURL = dictionary["StackPolicyURL"] as? String
            if let notificationARNs = dictionary["NotificationARNs"] as? [String] {
                self.notificationARNs = notificationARNs
            }
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            if let resourceTypes = dictionary["ResourceTypes"] as? [String] {
                self.resourceTypes = resourceTypes
            }
            self.templateURL = dictionary["TemplateURL"] as? String
            self.templateBody = dictionary["TemplateBody"] as? String
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
        }
    }

    public struct ListExportsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A string (provided by the ListExports response output) that identifies the next page of exported output values that you asked to retrieve.
        public var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ParameterDeclaration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of parameter.
        public var parameterType: String? = nil
        /// Flag that indicates whether the parameter value is shown as plain text in logs and in the AWS Management Console.
        public var noEcho: Bool? = nil
        /// The criteria that AWS CloudFormation uses to validate parameter values.
        public var parameterConstraints: ParameterConstraints? = nil
        /// The default value of the parameter.
        public var defaultValue: String? = nil
        /// The name that is associated with the parameter.
        public var parameterKey: String? = nil
        /// The description that is associate with the parameter.
        public var description: String? = nil

        public init() {}

        public init(parameterType: String? = nil, noEcho: Bool? = nil, parameterConstraints: ParameterConstraints? = nil, defaultValue: String? = nil, parameterKey: String? = nil, description: String? = nil) {
            self.parameterType = parameterType
            self.noEcho = noEcho
            self.parameterConstraints = parameterConstraints
            self.defaultValue = defaultValue
            self.parameterKey = parameterKey
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterType = dictionary["ParameterType"] as? String
            self.noEcho = dictionary["NoEcho"] as? Bool
            if let parameterConstraints = dictionary["ParameterConstraints"] as? [String: Any] { self.parameterConstraints = try Cloudformation.ParameterConstraints(dictionary: parameterConstraints) }
            self.defaultValue = dictionary["DefaultValue"] as? String
            self.parameterKey = dictionary["ParameterKey"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct StackResourceDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The content of the Metadata attribute declared for the resource. For more information, see Metadata Attribute in the AWS CloudFormation User Guide.
        public var metadata: String? = nil
        /// Current status of the resource.
        public var resourceStatus: String = ""
        /// Unique identifier of the stack.
        public var stackId: String? = nil
        /// Type of resource. ((For more information, go to  AWS Resource Types Reference in the AWS CloudFormation User Guide.)
        public var resourceType: String = ""
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by AWS CloudFormation.
        public var physicalResourceId: String? = nil
        /// The logical name of the resource specified in the template.
        public var logicalResourceId: String = ""
        /// Time the status was updated.
        public var lastUpdatedTimestamp: Date = Date()
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: String? = nil
        /// The name associated with the stack.
        public var stackName: String? = nil
        /// User defined description associated with the resource.
        public var description: String? = nil

        public init() {}

        public init(metadata: String? = nil, resourceStatus: String, stackId: String? = nil, resourceType: String, physicalResourceId: String? = nil, logicalResourceId: String, lastUpdatedTimestamp: Date, resourceStatusReason: String? = nil, stackName: String? = nil, description: String? = nil) {
            self.metadata = metadata
            self.resourceStatus = resourceStatus
            self.stackId = stackId
            self.resourceType = resourceType
            self.physicalResourceId = physicalResourceId
            self.logicalResourceId = logicalResourceId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceStatusReason = resourceStatusReason
            self.stackName = stackName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.metadata = dictionary["Metadata"] as? String
            guard let resourceStatus = dictionary["ResourceStatus"] as? String else { throw InitializableError.missingRequiredParam("ResourceStatus") }
            self.resourceStatus = resourceStatus
            self.stackId = dictionary["StackId"] as? String
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
            self.physicalResourceId = dictionary["PhysicalResourceId"] as? String
            guard let logicalResourceId = dictionary["LogicalResourceId"] as? String else { throw InitializableError.missingRequiredParam("LogicalResourceId") }
            self.logicalResourceId = logicalResourceId
            guard let lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("LastUpdatedTimestamp") }
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceStatusReason = dictionary["ResourceStatusReason"] as? String
            self.stackName = dictionary["StackName"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ListImportsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A string (provided by the ListImports response output) that identifies the next page of stacks that are importing the specified exported output value. 
        public var nextToken: String? = nil
        /// The name of the exported output value. AWS CloudFormation returns the stack names that are importing this value. 
        public var exportName: String = ""

        public init() {}

        public init(nextToken: String? = nil, exportName: String) {
            self.nextToken = nextToken
            self.exportName = exportName
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let exportName = dictionary["ExportName"] as? String else { throw InitializableError.missingRequiredParam("ExportName") }
            self.exportName = exportName
        }
    }

    public struct ListChangeSetsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the output exceeds 1 MB, a string that identifies the next page of change sets. If there is no additional page, this value is null.
        public var nextToken: String? = nil
        /// A list of ChangeSetSummary structures that provides the ID and status of each change set for the specified stack.
        public var summaries: [ChangeSetSummary]? = nil

        public init() {}

        public init(nextToken: String? = nil, summaries: [ChangeSetSummary]? = nil) {
            self.nextToken = nextToken
            self.summaries = summaries
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let summaries = dictionary["Summaries"] as? [[String: Any]] {
                self.summaries = try summaries.map({ try ChangeSetSummary(dictionary: $0) })
            }
        }
    }

    public struct DescribeStacksOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of stack structures.
        public var stacks: [Stack]? = nil
        /// If the output exceeds 1 MB in size, a string that identifies the next page of stacks. If no additional page exists, this value is null.
        public var nextToken: String? = nil

        public init() {}

        public init(stacks: [Stack]? = nil, nextToken: String? = nil) {
            self.stacks = stacks
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let stacks = dictionary["Stacks"] as? [[String: Any]] {
                self.stacks = try stacks.map({ try Stack(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ExecuteChangeSetInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If you specified the name of a change set, specify the stack name or ID (ARN) that is associated with the change set you want to execute.
        public var stackName: String? = nil
        /// The name or ARN of the change set that you want use to update the specified stack.
        public var changeSetName: String = ""

        public init() {}

        public init(stackName: String? = nil, changeSetName: String) {
            self.stackName = stackName
            self.changeSetName = changeSetName
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            guard let changeSetName = dictionary["ChangeSetName"] as? String else { throw InitializableError.missingRequiredParam("ChangeSetName") }
            self.changeSetName = changeSetName
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  Required. A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
        public var value: String? = nil
        ///  Required. A string used to identify this tag. You can specify a maximum of 128 characters for a tag key. Tags owned by Amazon Web Services (AWS) have the reserved prefix: aws:.
        public var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct ListStackResourcesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of StackResourceSummary structures.
        public var stackResourceSummaries: [StackResourceSummary]? = nil
        /// If the output exceeds 1 MB, a string that identifies the next page of stack resources. If no additional page exists, this value is null.
        public var nextToken: String? = nil

        public init() {}

        public init(stackResourceSummaries: [StackResourceSummary]? = nil, nextToken: String? = nil) {
            self.stackResourceSummaries = stackResourceSummaries
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let stackResourceSummaries = dictionary["StackResourceSummaries"] as? [[String: Any]] {
                self.stackResourceSummaries = try stackResourceSummaries.map({ try StackResourceSummary(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct TemplateParameter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Flag indicating whether the parameter should be displayed as plain text in logs and UIs.
        public var noEcho: Bool? = nil
        /// The default value associated with the parameter.
        public var defaultValue: String? = nil
        /// The name associated with the parameter.
        public var parameterKey: String? = nil
        /// User defined description associated with the parameter.
        public var description: String? = nil

        public init() {}

        public init(noEcho: Bool? = nil, defaultValue: String? = nil, parameterKey: String? = nil, description: String? = nil) {
            self.noEcho = noEcho
            self.defaultValue = defaultValue
            self.parameterKey = parameterKey
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.noEcho = dictionary["NoEcho"] as? Bool
            self.defaultValue = dictionary["DefaultValue"] as? String
            self.parameterKey = dictionary["ParameterKey"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeAccountLimitsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A string that identifies the next page of limits that you want to retrieve.
        public var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ValidateTemplateOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of resources that generated the values in the Capabilities response element.
        public var capabilitiesReason: String? = nil
        /// A list of the transforms that are declared in the template.
        public var declaredTransforms: [String]? = nil
        /// A list of TemplateParameter structures.
        public var parameters: [TemplateParameter]? = nil
        /// The capabilities found within the template. If your template contains IAM resources, you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when you use the CreateStack or UpdateStack actions with your template; otherwise, those actions return an InsufficientCapabilities error. For more information, see Acknowledging IAM Resources in AWS CloudFormation Templates.
        public var capabilities: [String]? = nil
        /// The description found within the template.
        public var description: String? = nil

        public init() {}

        public init(capabilitiesReason: String? = nil, declaredTransforms: [String]? = nil, parameters: [TemplateParameter]? = nil, capabilities: [String]? = nil, description: String? = nil) {
            self.capabilitiesReason = capabilitiesReason
            self.declaredTransforms = declaredTransforms
            self.parameters = parameters
            self.capabilities = capabilities
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.capabilitiesReason = dictionary["CapabilitiesReason"] as? String
            if let declaredTransforms = dictionary["DeclaredTransforms"] as? [String] {
                self.declaredTransforms = declaredTransforms
            }
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try TemplateParameter(dictionary: $0) })
            }
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ResourceChangeDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A ResourceTargetDefinition structure that describes the field that AWS CloudFormation will change and whether the resource will be recreated.
        public var target: ResourceTargetDefinition? = nil
        /// The identity of the entity that triggered this change. This entity is a member of the group that is specified by the ChangeSource field. For example, if you modified the value of the KeyPairName parameter, the CausingEntity is the name of the parameter (KeyPairName). If the ChangeSource value is DirectModification, no value is given for CausingEntity.
        public var causingEntity: String? = nil
        /// The group to which the CausingEntity value belongs. There are five entity groups:    ResourceReference entities are Ref intrinsic functions that refer to resources in the template, such as { "Ref" : "MyEC2InstanceResource" }.    ParameterReference entities are Ref intrinsic functions that get template parameter values, such as { "Ref" : "MyPasswordParameter" }.    ResourceAttribute entities are Fn::GetAtt intrinsic functions that get resource attribute values, such as { "Fn::GetAtt" : [ "MyEC2InstanceResource", "PublicDnsName" ] }.    DirectModification entities are changes that are made directly to the template.    Automatic entities are AWS::CloudFormation::Stack resource types, which are also known as nested stacks. If you made no changes to the AWS::CloudFormation::Stack resource, AWS CloudFormation sets the ChangeSource to Automatic because the nested stack's template might have changed. Changes to a nested stack's template aren't visible to AWS CloudFormation until you run an update on the parent stack.  
        public var changeSource: String? = nil
        /// Indicates whether AWS CloudFormation can determine the target value, and whether the target value will change before you execute a change set. For Static evaluations, AWS CloudFormation can determine that the target value will change, and its value. For example, if you directly modify the InstanceType property of an EC2 instance, AWS CloudFormation knows that this property value will change, and its value, so this is a Static evaluation. For Dynamic evaluations, cannot determine the target value because it depends on the result of an intrinsic function, such as a Ref or Fn::GetAtt intrinsic function, when the stack is updated. For example, if your template includes a reference to a resource that is conditionally recreated, the value of the reference (the physical ID of the resource) might change, depending on if the resource is recreated. If the resource is recreated, it will have a new physical ID, so all references to that resource will also be updated.
        public var evaluation: String? = nil

        public init() {}

        public init(target: ResourceTargetDefinition? = nil, causingEntity: String? = nil, changeSource: String? = nil, evaluation: String? = nil) {
            self.target = target
            self.causingEntity = causingEntity
            self.changeSource = changeSource
            self.evaluation = evaluation
        }

        public init(dictionary: [String: Any]) throws {
            if let target = dictionary["Target"] as? [String: Any] { self.target = try Cloudformation.ResourceTargetDefinition(dictionary: target) }
            self.causingEntity = dictionary["CausingEntity"] as? String
            self.changeSource = dictionary["ChangeSource"] as? String
            self.evaluation = dictionary["Evaluation"] as? String
        }
    }

    public struct ListStacksInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A string that identifies the next page of stacks that you want to retrieve.
        public var nextToken: String? = nil
        /// Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the StackStatus parameter of the Stack data type.
        public var stackStatusFilter: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, stackStatusFilter: [String]? = nil) {
            self.nextToken = nextToken
            self.stackStatusFilter = stackStatusFilter
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let stackStatusFilter = dictionary["StackStatusFilter"] as? [String] {
                self.stackStatusFilter = stackStatusFilter
            }
        }
    }

    public struct ExecuteChangeSetOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SignalResourceInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID.
        public var uniqueId: String = ""
        /// The status of the signal, which is either success or failure. A failure signal causes AWS CloudFormation to immediately fail the stack creation or update.
        public var status: String = ""
        /// The stack name or unique stack ID that includes the resource that you want to signal.
        public var stackName: String = ""
        /// The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template.
        public var logicalResourceId: String = ""

        public init() {}

        public init(uniqueId: String, status: String, stackName: String, logicalResourceId: String) {
            self.uniqueId = uniqueId
            self.status = status
            self.stackName = stackName
            self.logicalResourceId = logicalResourceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let uniqueId = dictionary["UniqueId"] as? String else { throw InitializableError.missingRequiredParam("UniqueId") }
            self.uniqueId = uniqueId
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            guard let logicalResourceId = dictionary["LogicalResourceId"] as? String else { throw InitializableError.missingRequiredParam("LogicalResourceId") }
            self.logicalResourceId = logicalResourceId
        }
    }

    public struct DeleteChangeSetOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeStackResourceInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack, which are not always interchangeable:   Running stacks: You can specify either the stack's name or its unique stack ID.   Deleted stacks: You must specify the unique stack ID.   Default: There is no default value.
        public var stackName: String = ""
        /// The logical name of the resource as specified in the template. Default: There is no default value.
        public var logicalResourceId: String = ""

        public init() {}

        public init(stackName: String, logicalResourceId: String) {
            self.stackName = stackName
            self.logicalResourceId = logicalResourceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            guard let logicalResourceId = dictionary["LogicalResourceId"] as? String else { throw InitializableError.missingRequiredParam("LogicalResourceId") }
            self.logicalResourceId = logicalResourceId
        }
    }

    public struct DescribeStackEventsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack, which are not always interchangeable:   Running stacks: You can specify either the stack's name or its unique stack ID.   Deleted stacks: You must specify the unique stack ID.   Default: There is no default value.
        public var stackName: String? = nil
        /// A string that identifies the next page of events that you want to retrieve.
        public var nextToken: String? = nil

        public init() {}

        public init(stackName: String? = nil, nextToken: String? = nil) {
            self.stackName = stackName
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetTemplateSummaryInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the stack ID that is associated with the stack, which are not always interchangeable. For running stacks, you can specify either the stack's name or its unique stack ID. For deleted stack, you must specify the unique stack ID. Conditional: You must specify only one of the following parameters: StackName, TemplateBody, or TemplateURL.
        public var stackName: String? = nil
        /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket. For more information about templates, see Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must specify only one of the following parameters: StackName, TemplateBody, or TemplateURL.
        public var templateURL: String? = nil
        /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must specify only one of the following parameters: StackName, TemplateBody, or TemplateURL.
        public var templateBody: String? = nil

        public init() {}

        public init(stackName: String? = nil, templateURL: String? = nil, templateBody: String? = nil) {
            self.stackName = stackName
            self.templateURL = templateURL
            self.templateBody = templateBody
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            self.templateURL = dictionary["TemplateURL"] as? String
            self.templateBody = dictionary["TemplateBody"] as? String
        }
    }

    public struct EstimateTemplateCostInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of Parameter structures that specify input parameters.
        public var parameters: [Parameter]? = nil
        /// Location of file containing the template body. The URL must point to a template that is located in an Amazon S3 bucket. For more information, go to Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
        public var templateURL: String? = nil
        /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to Template Anatomy in the AWS CloudFormation User Guide.) Conditional: You must pass TemplateBody or TemplateURL. If both are passed, only TemplateBody is used.
        public var templateBody: String? = nil

        public init() {}

        public init(parameters: [Parameter]? = nil, templateURL: String? = nil, templateBody: String? = nil) {
            self.parameters = parameters
            self.templateURL = templateURL
            self.templateBody = templateBody
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            self.templateURL = dictionary["TemplateURL"] as? String
            self.templateBody = dictionary["TemplateBody"] as? String
        }
    }

    public struct DescribeChangeSetInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe.
        public var stackName: String? = nil
        /// A string (provided by the DescribeChangeSet response output) that identifies the next page of information that you want to retrieve.
        public var nextToken: String? = nil
        /// The name or Amazon Resource Name (ARN) of the change set that you want to describe.
        public var changeSetName: String = ""

        public init() {}

        public init(stackName: String? = nil, nextToken: String? = nil, changeSetName: String) {
            self.stackName = stackName
            self.nextToken = nextToken
            self.changeSetName = changeSetName
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            guard let changeSetName = dictionary["ChangeSetName"] as? String else { throw InitializableError.missingRequiredParam("ChangeSetName") }
            self.changeSetName = changeSetName
        }
    }

    public struct ValidateTemplateInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket. For more information, go to Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
        public var templateURL: String? = nil
        /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
        public var templateBody: String? = nil

        public init() {}

        public init(templateURL: String? = nil, templateBody: String? = nil) {
            self.templateURL = templateURL
            self.templateBody = templateBody
        }

        public init(dictionary: [String: Any]) throws {
            self.templateURL = dictionary["TemplateURL"] as? String
            self.templateBody = dictionary["TemplateBody"] as? String
        }
    }

    public struct Parameter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value associated with the parameter.
        public var parameterValue: String? = nil
        /// During a stack update, use the existing parameter value that the stack is using for a given parameter key. If you specify true, do not specify a parameter value.
        public var usePreviousValue: Bool? = nil
        /// The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
        public var parameterKey: String? = nil

        public init() {}

        public init(parameterValue: String? = nil, usePreviousValue: Bool? = nil, parameterKey: String? = nil) {
            self.parameterValue = parameterValue
            self.usePreviousValue = usePreviousValue
            self.parameterKey = parameterKey
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterValue = dictionary["ParameterValue"] as? String
            self.usePreviousValue = dictionary["UsePreviousValue"] as? Bool
            self.parameterKey = dictionary["ParameterKey"] as? String
        }
    }

    public struct ContinueUpdateRollbackOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListExportsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the output exceeds 100 exported output values, a string that identifies the next page of exports. If there is no additional page, this value is null.
        public var nextToken: String? = nil
        /// The output for the ListExports action.
        public var exports: [Export]? = nil

        public init() {}

        public init(nextToken: String? = nil, exports: [Export]? = nil) {
            self.nextToken = nextToken
            self.exports = exports
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let exports = dictionary["Exports"] as? [[String: Any]] {
                self.exports = try exports.map({ try Export(dictionary: $0) })
            }
        }
    }

    public struct ListImportsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of stack names that are importing the specified exported output value. 
        public var imports: [String]? = nil
        /// A string that identifies the next page of exports. If there is no additional page, this value is null.
        public var nextToken: String? = nil

        public init() {}

        public init(imports: [String]? = nil, nextToken: String? = nil) {
            self.imports = imports
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let imports = dictionary["Imports"] as? [String] {
                self.imports = imports
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct CreateStackOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Unique identifier of the stack.
        public var stackId: String? = nil

        public init() {}

        public init(stackId: String? = nil) {
            self.stackId = stackId
        }

        public init(dictionary: [String: Any]) throws {
            self.stackId = dictionary["StackId"] as? String
        }
    }

    public struct Change: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of entity that AWS CloudFormation changes. Currently, the only entity type is Resource.
        public var type: String? = nil
        /// A ResourceChange structure that describes the resource and action that AWS CloudFormation will perform.
        public var resourceChange: ResourceChange? = nil

        public init() {}

        public init(type: String? = nil, resourceChange: ResourceChange? = nil) {
            self.type = type
            self.resourceChange = resourceChange
        }

        public init(dictionary: [String: Any]) throws {
            self.type = dictionary["Type"] as? String
            if let resourceChange = dictionary["ResourceChange"] as? [String: Any] { self.resourceChange = try Cloudformation.ResourceChange(dictionary: resourceChange) }
        }
    }

    public struct ContinueUpdateRollbackInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique ID of the stack that you want to continue rolling back.  Don't specify the name of a nested stack (a stack that was created by using the AWS::CloudFormation::Stack resource). Instead, use this operation on the parent stack (the stack that contains the AWS::CloudFormation::Stack resource). 
        public var stackName: String = ""
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to roll back the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
        public var roleARN: String? = nil
        /// A list of the logical IDs of the resources that AWS CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the UPDATE_FAILED state because a rollback failed. You can't specify resources that are in the UPDATE_FAILED state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the DescribeStackResources action, and view the resource status reason.   Specify this property to skip rolling back resources that AWS CloudFormation can't successfully roll back. We recommend that you  troubleshoot resources before skipping them. AWS CloudFormation sets the status of the specified resources to UPDATE_COMPLETE and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don't, subsequent stack updates might fail, and the stack will become unrecoverable.   Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources.  To specify resources in a nested stack, use the following format: NestedStackName.ResourceLogicalID. You can specify a nested stack resource (the logical ID of an AWS::CloudFormation::Stack resource) only if it's in one of the following states: DELETE_IN_PROGRESS, DELETE_COMPLETE, or DELETE_FAILED. 
        public var resourcesToSkip: [String]? = nil

        public init() {}

        public init(stackName: String, roleARN: String? = nil, resourcesToSkip: [String]? = nil) {
            self.stackName = stackName
            self.roleARN = roleARN
            self.resourcesToSkip = resourcesToSkip
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            self.roleARN = dictionary["RoleARN"] as? String
            if let resourcesToSkip = dictionary["ResourcesToSkip"] as? [String] {
                self.resourcesToSkip = resourcesToSkip
            }
        }
    }

    public struct CreateStackInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Structure containing the stack policy body. For more information, go to  Prevent Updates to Stack Resources in the AWS CloudFormation User Guide. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
        public var stackPolicyBody: String? = nil
        /// Key-value pairs to associate with this stack. AWS CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 10 tags can be specified.
        public var tags: [Tag]? = nil
        /// Determines what action will be taken if stack creation fails. This must be one of: DO_NOTHING, ROLLBACK, or DELETE. You can specify either OnFailure or DisableRollback, but not both. Default: ROLLBACK 
        public var onFailure: String? = nil
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
        public var roleARN: String? = nil
        /// Set to true to disable rollback of the stack if stack creation failed. You can specify either DisableRollback or OnFailure, but not both. Default: false 
        public var disableRollback: Bool? = nil
        /// Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
        public var stackPolicyURL: String? = nil
        /// The Simple Notification Service (SNS) topic ARNs to publish stack related events. You can find your SNS topic ARNs using the SNS console or your Command Line Interface (CLI).
        public var notificationARNs: [String]? = nil
        /// A list of Parameter structures that specify input parameters for the stack. For more information, see the Parameter data type.
        public var parameters: [Parameter]? = nil
        /// The template resource types that you have permissions to work with for this create stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. Use the following syntax to describe template resource types: AWS::* (for all AWS resource), Custom::* (for all custom resources), Custom::logical_ID  (for a specific custom resource), AWS::service_name::* (for all resources of a particular AWS service), and AWS::service_name::resource_logical_ID  (for a specific AWS resource). If the list of resource types doesn't include a resource that you're creating, the stack creation fails. By default, AWS CloudFormation grants permissions to all resource types. AWS Identity and Access Management (IAM) uses this parameter for AWS CloudFormation-specific condition keys in IAM policies. For more information, see Controlling Access with AWS Identity and Access Management.
        public var resourceTypes: [String]? = nil
        /// The amount of time that can pass before the stack status becomes CREATE_FAILED; if DisableRollback is not set or is set to false, the stack will be rolled back.
        public var timeoutInMinutes: Int32? = nil
        /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket. For more information, go to the Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
        public var templateURL: String? = nil
        /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to Template Anatomy in the AWS CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
        public var templateBody: String? = nil
        /// The name that is associated with the stack. The name must be unique in the region in which you are creating the stack.  A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetic character and cannot be longer than 128 characters. 
        public var stackName: String = ""
        /// A list of values that you must specify before AWS CloudFormation can create certain stacks. Some stack templates might include resources that can affect permissions in your AWS account, for example, by creating new AWS Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge their capabilities by specifying this parameter. The only valid values are CAPABILITY_IAM and CAPABILITY_NAMED_IAM. The following resources require you to specify this parameter:  AWS::IAM::AccessKey,  AWS::IAM::Group,  AWS::IAM::InstanceProfile,  AWS::IAM::Policy,  AWS::IAM::Role,  AWS::IAM::User, and  AWS::IAM::UserToGroupAddition. If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary. If you have IAM resources, you can specify either capability. If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM. If you don't specify this parameter, this action returns an InsufficientCapabilities error. For more information, see Acknowledging IAM Resources in AWS CloudFormation Templates.
        public var capabilities: [String]? = nil

        public init() {}

        public init(stackPolicyBody: String? = nil, tags: [Tag]? = nil, onFailure: String? = nil, roleARN: String? = nil, disableRollback: Bool? = nil, stackPolicyURL: String? = nil, notificationARNs: [String]? = nil, parameters: [Parameter]? = nil, resourceTypes: [String]? = nil, timeoutInMinutes: Int32? = nil, templateURL: String? = nil, templateBody: String? = nil, stackName: String, capabilities: [String]? = nil) {
            self.stackPolicyBody = stackPolicyBody
            self.tags = tags
            self.onFailure = onFailure
            self.roleARN = roleARN
            self.disableRollback = disableRollback
            self.stackPolicyURL = stackPolicyURL
            self.notificationARNs = notificationARNs
            self.parameters = parameters
            self.resourceTypes = resourceTypes
            self.timeoutInMinutes = timeoutInMinutes
            self.templateURL = templateURL
            self.templateBody = templateBody
            self.stackName = stackName
            self.capabilities = capabilities
        }

        public init(dictionary: [String: Any]) throws {
            self.stackPolicyBody = dictionary["StackPolicyBody"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.onFailure = dictionary["OnFailure"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            self.disableRollback = dictionary["DisableRollback"] as? Bool
            self.stackPolicyURL = dictionary["StackPolicyURL"] as? String
            if let notificationARNs = dictionary["NotificationARNs"] as? [String] {
                self.notificationARNs = notificationARNs
            }
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            if let resourceTypes = dictionary["ResourceTypes"] as? [String] {
                self.resourceTypes = resourceTypes
            }
            self.timeoutInMinutes = dictionary["TimeoutInMinutes"] as? Int32
            self.templateURL = dictionary["TemplateURL"] as? String
            self.templateBody = dictionary["TemplateBody"] as? String
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
        }
    }

    public struct SetStackPolicyInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or unique stack ID that you want to associate a policy with.
        public var stackName: String = ""
        /// Structure containing the stack policy body. For more information, go to  Prevent Updates to Stack Resources in the AWS CloudFormation User Guide. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
        public var stackPolicyBody: String? = nil
        /// Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
        public var stackPolicyURL: String? = nil

        public init() {}

        public init(stackName: String, stackPolicyBody: String? = nil, stackPolicyURL: String? = nil) {
            self.stackName = stackName
            self.stackPolicyBody = stackPolicyBody
            self.stackPolicyURL = stackPolicyURL
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            self.stackPolicyBody = dictionary["StackPolicyBody"] as? String
            self.stackPolicyURL = dictionary["StackPolicyURL"] as? String
        }
    }

    public struct DescribeStackResourcesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of StackResource structures.
        public var stackResources: [StackResource]? = nil

        public init() {}

        public init(stackResources: [StackResource]? = nil) {
            self.stackResources = stackResources
        }

        public init(dictionary: [String: Any]) throws {
            if let stackResources = dictionary["StackResources"] as? [[String: Any]] {
                self.stackResources = try stackResources.map({ try StackResource(dictionary: $0) })
            }
        }
    }

    public struct Export: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The stack that contains the exported output name and value.
        public var exportingStackId: String? = nil
        /// The value of the exported output, such as a resource physical ID. This value is defined in the Export field in the associated stack's Outputs section.
        public var value: String? = nil
        /// The name of exported output value. Use this name and the Fn::ImportValue function to import the associated value into other stacks. The name is defined in the Export field in the associated stack's Outputs section.
        public var name: String? = nil

        public init() {}

        public init(exportingStackId: String? = nil, value: String? = nil, name: String? = nil) {
            self.exportingStackId = exportingStackId
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.exportingStackId = dictionary["ExportingStackId"] as? String
            self.value = dictionary["Value"] as? String
            self.name = dictionary["Name"] as? String
        }
    }

    public struct GetTemplateSummaryOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value that is defined for the Metadata property of the template.
        public var metadata: String? = nil
        /// The list of resources that generated the values in the Capabilities response element.
        public var capabilitiesReason: String? = nil
        /// A list of parameter declarations that describe various properties for each parameter.
        public var parameters: [ParameterDeclaration]? = nil
        /// A list of all the template resource types that are defined in the template, such as AWS::EC2::Instance, AWS::Dynamo::Table, and Custom::MyCustomInstance.
        public var resourceTypes: [String]? = nil
        /// The AWS template format version, which identifies the capabilities of the template.
        public var version: String? = nil
        /// A list of the transforms that are declared in the template.
        public var declaredTransforms: [String]? = nil
        /// The capabilities found within the template. If your template contains IAM resources, you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when you use the CreateStack or UpdateStack actions with your template; otherwise, those actions return an InsufficientCapabilities error. For more information, see Acknowledging IAM Resources in AWS CloudFormation Templates.
        public var capabilities: [String]? = nil
        /// The value that is defined in the Description property of the template.
        public var description: String? = nil

        public init() {}

        public init(metadata: String? = nil, capabilitiesReason: String? = nil, parameters: [ParameterDeclaration]? = nil, resourceTypes: [String]? = nil, version: String? = nil, declaredTransforms: [String]? = nil, capabilities: [String]? = nil, description: String? = nil) {
            self.metadata = metadata
            self.capabilitiesReason = capabilitiesReason
            self.parameters = parameters
            self.resourceTypes = resourceTypes
            self.version = version
            self.declaredTransforms = declaredTransforms
            self.capabilities = capabilities
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.metadata = dictionary["Metadata"] as? String
            self.capabilitiesReason = dictionary["CapabilitiesReason"] as? String
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try ParameterDeclaration(dictionary: $0) })
            }
            if let resourceTypes = dictionary["ResourceTypes"] as? [String] {
                self.resourceTypes = resourceTypes
            }
            self.version = dictionary["Version"] as? String
            if let declaredTransforms = dictionary["DeclaredTransforms"] as? [String] {
                self.declaredTransforms = declaredTransforms
            }
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ListStacksOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the output exceeds 1 MB in size, a string that identifies the next page of stacks. If no additional page exists, this value is null.
        public var nextToken: String? = nil
        /// A list of StackSummary structures containing information about the specified stacks.
        public var stackSummaries: [StackSummary]? = nil

        public init() {}

        public init(nextToken: String? = nil, stackSummaries: [StackSummary]? = nil) {
            self.nextToken = nextToken
            self.stackSummaries = stackSummaries
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let stackSummaries = dictionary["StackSummaries"] as? [[String: Any]] {
                self.stackSummaries = try stackSummaries.map({ try StackSummary(dictionary: $0) })
            }
        }
    }

    public struct AccountLimit: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value that is associated with the account limit name.
        public var value: Int32? = nil
        /// The name of the account limit. Currently, the only account limit is StackLimit.
        public var name: String? = nil

        public init() {}

        public init(value: Int32? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? Int32
            self.name = dictionary["Name"] as? String
        }
    }

    public struct DescribeStackResourcesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack, which are not always interchangeable:   Running stacks: You can specify either the stack's name or its unique stack ID.   Deleted stacks: You must specify the unique stack ID.   Default: There is no default value. Required: Conditional. If you do not specify StackName, you must specify PhysicalResourceId.
        public var stackName: String? = nil
        /// The logical name of the resource as specified in the template. Default: There is no default value.
        public var logicalResourceId: String? = nil
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by AWS CloudFormation. For example, for an Amazon Elastic Compute Cloud (EC2) instance, PhysicalResourceId corresponds to the InstanceId. You can pass the EC2 InstanceId to DescribeStackResources to find which stack the instance belongs to and what other resources are part of the stack. Required: Conditional. If you do not specify PhysicalResourceId, you must specify StackName. Default: There is no default value.
        public var physicalResourceId: String? = nil

        public init() {}

        public init(stackName: String? = nil, logicalResourceId: String? = nil, physicalResourceId: String? = nil) {
            self.stackName = stackName
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            self.logicalResourceId = dictionary["LogicalResourceId"] as? String
            self.physicalResourceId = dictionary["PhysicalResourceId"] as? String
        }
    }

    public struct DescribeChangeSetOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the change set execution status is AVAILABLE, you can execute the change set. If you can’t execute the change set, the status indicates why. For example, a change set might be in an UNAVAILABLE state because AWS CloudFormation is still creating it or in an OBSOLETE state because the stack was already updated.
        public var executionStatus: String? = nil
        /// A list of Change structures that describes the resources AWS CloudFormation changes if you execute the change set.
        public var changes: [Change]? = nil
        /// If you execute the change set, the tags that will be associated with the stack.
        public var tags: [Tag]? = nil
        /// The start time when the change set was created, in UTC.
        public var creationTime: Date? = nil
        /// The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.
        public var notificationARNs: [String]? = nil
        /// Information about the change set.
        public var description: String? = nil
        /// A description of the change set's status. For example, if your attempt to create a change set failed, AWS CloudFormation shows the error message.
        public var statusReason: String? = nil
        /// The current status of the change set, such as CREATE_IN_PROGRESS, CREATE_COMPLETE, or FAILED.
        public var status: String? = nil
        /// A list of Parameter structures that describes the input parameters and their values used to create the change set. For more information, see the Parameter data type.
        public var parameters: [Parameter]? = nil
        /// The ARN of the stack that is associated with the change set.
        public var stackId: String? = nil
        /// The name of the change set.
        public var changeSetName: String? = nil
        /// The ARN of the change set.
        public var changeSetId: String? = nil
        /// The name of the stack that is associated with the change set.
        public var stackName: String? = nil
        /// If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.
        public var nextToken: String? = nil
        /// If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.
        public var capabilities: [String]? = nil

        public init() {}

        public init(executionStatus: String? = nil, changes: [Change]? = nil, tags: [Tag]? = nil, creationTime: Date? = nil, notificationARNs: [String]? = nil, description: String? = nil, statusReason: String? = nil, status: String? = nil, parameters: [Parameter]? = nil, stackId: String? = nil, changeSetName: String? = nil, changeSetId: String? = nil, stackName: String? = nil, nextToken: String? = nil, capabilities: [String]? = nil) {
            self.executionStatus = executionStatus
            self.changes = changes
            self.tags = tags
            self.creationTime = creationTime
            self.notificationARNs = notificationARNs
            self.description = description
            self.statusReason = statusReason
            self.status = status
            self.parameters = parameters
            self.stackId = stackId
            self.changeSetName = changeSetName
            self.changeSetId = changeSetId
            self.stackName = stackName
            self.nextToken = nextToken
            self.capabilities = capabilities
        }

        public init(dictionary: [String: Any]) throws {
            self.executionStatus = dictionary["ExecutionStatus"] as? String
            if let changes = dictionary["Changes"] as? [[String: Any]] {
                self.changes = try changes.map({ try Change(dictionary: $0) })
            }
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.creationTime = dictionary["CreationTime"] as? Date
            if let notificationARNs = dictionary["NotificationARNs"] as? [String] {
                self.notificationARNs = notificationARNs
            }
            self.description = dictionary["Description"] as? String
            self.statusReason = dictionary["StatusReason"] as? String
            self.status = dictionary["Status"] as? String
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            self.stackId = dictionary["StackId"] as? String
            self.changeSetName = dictionary["ChangeSetName"] as? String
            self.changeSetId = dictionary["ChangeSetId"] as? String
            self.stackName = dictionary["StackName"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
        }
    }

    public struct ListStackResourcesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack, which are not always interchangeable:   Running stacks: You can specify either the stack's name or its unique stack ID.   Deleted stacks: You must specify the unique stack ID.   Default: There is no default value.
        public var stackName: String = ""
        /// A string that identifies the next page of stack resources that you want to retrieve.
        public var nextToken: String? = nil

        public init() {}

        public init(stackName: String, nextToken: String? = nil) {
            self.stackName = stackName
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct EstimateTemplateCostOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An AWS Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
        public var url: String? = nil

        public init() {}

        public init(url: String? = nil) {
            self.url = url
        }

        public init(dictionary: [String: Any]) throws {
            self.url = dictionary["Url"] as? String
        }
    }

    public struct UpdateStackOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Unique identifier of the stack.
        public var stackId: String? = nil

        public init() {}

        public init(stackId: String? = nil) {
            self.stackId = stackId
        }

        public init(dictionary: [String: Any]) throws {
            self.stackId = dictionary["StackId"] as? String
        }
    }

    public struct CreateChangeSetInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A unique identifier for this CreateChangeSet request. Specify this token if you plan to retry requests so that AWS CloudFormation knows that you're not attempting to create another change set with the same name. You might retry CreateChangeSet requests to ensure that AWS CloudFormation successfully received them.
        public var clientToken: String? = nil
        /// The type of change set operation. To create a change set for a new stack, specify CREATE. To create a change set for an existing stack, specify UPDATE. If you create a change set for a new stack, AWS Cloudformation creates a stack with a unique stack ID, but no template or resources. The stack will be in the  REVIEW_IN_PROGRESS  state until you execute the change set. By default, AWS CloudFormation specifies UPDATE. You can't use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
        public var changeSetType: String? = nil
        /// Key-value pairs to associate with this stack. AWS CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 10 tags.
        public var tags: [Tag]? = nil
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes when executing the change set. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
        public var roleARN: String? = nil
        /// Whether to reuse the template that is associated with the stack to create the change set.
        public var usePreviousTemplate: Bool? = nil
        /// A description to help you identify this change set.
        public var description: String? = nil
        /// The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that AWS CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list.
        public var notificationARNs: [String]? = nil
        /// A list of Parameter structures that specify input parameters for the change set. For more information, see the Parameter data type.
        public var parameters: [Parameter]? = nil
        /// The name of the change set. The name must be unique among all change sets that are associated with the specified stack. A change set name can contain only alphanumeric, case sensitive characters and hyphens. It must start with an alphabetic character and cannot exceed 128 characters.
        public var changeSetName: String = ""
        /// The template resource types that you have permissions to work with if you execute this change set, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. If the list of resource types doesn't include a resource type that you're updating, the stack update fails. By default, AWS CloudFormation grants permissions to all resource types. AWS Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for AWS CloudFormation. For more information, see Controlling Access with AWS Identity and Access Management in the AWS CloudFormation User Guide.
        public var resourceTypes: [String]? = nil
        /// The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that is located in an S3 bucket. AWS CloudFormation generates the change set by comparing this template with the stack that you specified. Conditional: You must specify only TemplateBody or TemplateURL.
        public var templateURL: String? = nil
        /// A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. AWS CloudFormation generates the change set by comparing this template with the template of the stack that you specified. Conditional: You must specify only TemplateBody or TemplateURL.
        public var templateBody: String? = nil
        /// The name or the unique ID of the stack for which you are creating a change set. AWS CloudFormation generates the change set by comparing this stack's information with the information that you submit, such as a modified template or different parameter input values.
        public var stackName: String = ""
        /// A list of values that you must specify before AWS CloudFormation can update certain stacks. Some stack templates might include resources that can affect permissions in your AWS account, for example, by creating new AWS Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge their capabilities by specifying this parameter. The only valid values are CAPABILITY_IAM and CAPABILITY_NAMED_IAM. The following resources require you to specify this parameter:  AWS::IAM::AccessKey,  AWS::IAM::Group,  AWS::IAM::InstanceProfile,  AWS::IAM::Policy,  AWS::IAM::Role,  AWS::IAM::User, and  AWS::IAM::UserToGroupAddition. If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary. If you have IAM resources, you can specify either capability. If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM. If you don't specify this parameter, this action returns an InsufficientCapabilities error. For more information, see Acknowledging IAM Resources in AWS CloudFormation Templates.
        public var capabilities: [String]? = nil

        public init() {}

        public init(clientToken: String? = nil, changeSetType: String? = nil, tags: [Tag]? = nil, roleARN: String? = nil, usePreviousTemplate: Bool? = nil, description: String? = nil, notificationARNs: [String]? = nil, parameters: [Parameter]? = nil, changeSetName: String, resourceTypes: [String]? = nil, templateURL: String? = nil, templateBody: String? = nil, stackName: String, capabilities: [String]? = nil) {
            self.clientToken = clientToken
            self.changeSetType = changeSetType
            self.tags = tags
            self.roleARN = roleARN
            self.usePreviousTemplate = usePreviousTemplate
            self.description = description
            self.notificationARNs = notificationARNs
            self.parameters = parameters
            self.changeSetName = changeSetName
            self.resourceTypes = resourceTypes
            self.templateURL = templateURL
            self.templateBody = templateBody
            self.stackName = stackName
            self.capabilities = capabilities
        }

        public init(dictionary: [String: Any]) throws {
            self.clientToken = dictionary["ClientToken"] as? String
            self.changeSetType = dictionary["ChangeSetType"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.roleARN = dictionary["RoleARN"] as? String
            self.usePreviousTemplate = dictionary["UsePreviousTemplate"] as? Bool
            self.description = dictionary["Description"] as? String
            if let notificationARNs = dictionary["NotificationARNs"] as? [String] {
                self.notificationARNs = notificationARNs
            }
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            guard let changeSetName = dictionary["ChangeSetName"] as? String else { throw InitializableError.missingRequiredParam("ChangeSetName") }
            self.changeSetName = changeSetName
            if let resourceTypes = dictionary["ResourceTypes"] as? [String] {
                self.resourceTypes = resourceTypes
            }
            self.templateURL = dictionary["TemplateURL"] as? String
            self.templateBody = dictionary["TemplateBody"] as? String
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            if let capabilities = dictionary["Capabilities"] as? [String] {
                self.capabilities = capabilities
            }
        }
    }

    public struct ListChangeSetsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets.
        public var stackName: String = ""
        /// A string (provided by the ListChangeSets response output) that identifies the next page of change sets that you want to retrieve.
        public var nextToken: String? = nil

        public init() {}

        public init(stackName: String, nextToken: String? = nil) {
            self.stackName = stackName
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetTemplateInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack, which are not always interchangeable:   Running stacks: You can specify either the stack's name or its unique stack ID.   Deleted stacks: You must specify the unique stack ID.   Default: There is no default value.
        public var stackName: String? = nil
        /// The name or Amazon Resource Name (ARN) of a change set for which AWS CloudFormation returns the associated template. If you specify a name, you must also specify the StackName.
        public var changeSetName: String? = nil
        /// For templates that include transforms, the stage of the template that AWS CloudFormation returns. To get the user-submitted template, specify Original. To get the template after AWS CloudFormation has processed all transforms, specify Processed.  If the template doesn't include transforms, Original and Processed return the same template. By default, AWS CloudFormation specifies Original. 
        public var templateStage: String? = nil

        public init() {}

        public init(stackName: String? = nil, changeSetName: String? = nil, templateStage: String? = nil) {
            self.stackName = stackName
            self.changeSetName = changeSetName
            self.templateStage = templateStage
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            self.changeSetName = dictionary["ChangeSetName"] as? String
            self.templateStage = dictionary["TemplateStage"] as? String
        }
    }

    public struct DescribeStackEventsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.
        public var nextToken: String? = nil
        /// A list of StackEvents structures.
        public var stackEvents: [StackEvent]? = nil

        public init() {}

        public init(nextToken: String? = nil, stackEvents: [StackEvent]? = nil) {
            self.nextToken = nextToken
            self.stackEvents = stackEvents
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let stackEvents = dictionary["StackEvents"] as? [[String: Any]] {
                self.stackEvents = try stackEvents.map({ try StackEvent(dictionary: $0) })
            }
        }
    }

    public struct StackEvent: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Time the status was updated.
        public var timestamp: Date = Date()
        /// Current status of the resource.
        public var resourceStatus: String? = nil
        /// The unique ID name of the instance of the stack.
        public var stackId: String = ""
        /// The unique ID of this event.
        public var eventId: String = ""
        /// Type of resource. (For more information, go to  AWS Resource Types Reference in the AWS CloudFormation User Guide.)
        public var resourceType: String? = nil
        /// The logical name of the resource specified in the template.
        public var logicalResourceId: String? = nil
        /// The name or unique identifier associated with the physical instance of the resource.
        public var physicalResourceId: String? = nil
        /// BLOB of the properties used to create the resource.
        public var resourceProperties: String? = nil
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: String? = nil
        /// The name associated with a stack.
        public var stackName: String = ""

        public init() {}

        public init(timestamp: Date, resourceStatus: String? = nil, stackId: String, eventId: String, resourceType: String? = nil, logicalResourceId: String? = nil, physicalResourceId: String? = nil, resourceProperties: String? = nil, resourceStatusReason: String? = nil, stackName: String) {
            self.timestamp = timestamp
            self.resourceStatus = resourceStatus
            self.stackId = stackId
            self.eventId = eventId
            self.resourceType = resourceType
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.resourceProperties = resourceProperties
            self.resourceStatusReason = resourceStatusReason
            self.stackName = stackName
        }

        public init(dictionary: [String: Any]) throws {
            guard let timestamp = dictionary["Timestamp"] as? Date else { throw InitializableError.missingRequiredParam("Timestamp") }
            self.timestamp = timestamp
            self.resourceStatus = dictionary["ResourceStatus"] as? String
            guard let stackId = dictionary["StackId"] as? String else { throw InitializableError.missingRequiredParam("StackId") }
            self.stackId = stackId
            guard let eventId = dictionary["EventId"] as? String else { throw InitializableError.missingRequiredParam("EventId") }
            self.eventId = eventId
            self.resourceType = dictionary["ResourceType"] as? String
            self.logicalResourceId = dictionary["LogicalResourceId"] as? String
            self.physicalResourceId = dictionary["PhysicalResourceId"] as? String
            self.resourceProperties = dictionary["ResourceProperties"] as? String
            self.resourceStatusReason = dictionary["ResourceStatusReason"] as? String
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
        }
    }

    public struct ChangeSetSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The state of the change set, such as CREATE_IN_PROGRESS, CREATE_COMPLETE, or FAILED.
        public var status: String? = nil
        /// A description of the change set's status. For example, if your change set is in the FAILED state, AWS CloudFormation shows the error message.
        public var statusReason: String? = nil
        /// If the change set execution status is AVAILABLE, you can execute the change set. If you can’t execute the change set, the status indicates why. For example, a change set might be in an UNAVAILABLE state because AWS CloudFormation is still creating it or in an OBSOLETE state because the stack was already updated.
        public var executionStatus: String? = nil
        /// The ID of the stack with which the change set is associated.
        public var stackId: String? = nil
        /// The name of the change set.
        public var changeSetName: String? = nil
        /// The ID of the change set.
        public var changeSetId: String? = nil
        /// The start time when the change set was created, in UTC.
        public var creationTime: Date? = nil
        /// The name of the stack with which the change set is associated.
        public var stackName: String? = nil
        /// Descriptive information about the change set.
        public var description: String? = nil

        public init() {}

        public init(status: String? = nil, statusReason: String? = nil, executionStatus: String? = nil, stackId: String? = nil, changeSetName: String? = nil, changeSetId: String? = nil, creationTime: Date? = nil, stackName: String? = nil, description: String? = nil) {
            self.status = status
            self.statusReason = statusReason
            self.executionStatus = executionStatus
            self.stackId = stackId
            self.changeSetName = changeSetName
            self.changeSetId = changeSetId
            self.creationTime = creationTime
            self.stackName = stackName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.statusReason = dictionary["StatusReason"] as? String
            self.executionStatus = dictionary["ExecutionStatus"] as? String
            self.stackId = dictionary["StackId"] as? String
            self.changeSetName = dictionary["ChangeSetName"] as? String
            self.changeSetId = dictionary["ChangeSetId"] as? String
            self.creationTime = dictionary["CreationTime"] as? Date
            self.stackName = dictionary["StackName"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct Output: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value associated with the output.
        public var outputValue: String? = nil
        /// The key associated with the output.
        public var outputKey: String? = nil
        /// User defined description associated with the output.
        public var description: String? = nil

        public init() {}

        public init(outputValue: String? = nil, outputKey: String? = nil, description: String? = nil) {
            self.outputValue = outputValue
            self.outputKey = outputKey
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.outputValue = dictionary["OutputValue"] as? String
            self.outputKey = dictionary["OutputKey"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ParameterConstraints: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of values that are permitted for a parameter.
        public var allowedValues: [String]? = nil

        public init() {}

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

        public init(dictionary: [String: Any]) throws {
            if let allowedValues = dictionary["AllowedValues"] as? [String] {
                self.allowedValues = allowedValues
            }
        }
    }

    public struct ResourceTargetDefinition: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the Attribute value is Properties, indicates whether a change to this property causes the resource to be recreated. The value can be Never, Always, or Conditionally. To determine the conditions for a Conditionally recreation, see the update behavior for that property in the AWS CloudFormation User Guide.
        public var requiresRecreation: String? = nil
        /// If the Attribute value is Properties, the name of the property. For all other attributes, the value is null.
        public var name: String? = nil
        /// Indicates which resource attribute is triggering this update, such as a change in the resource attribute's Metadata, Properties, or Tags.
        public var attribute: String? = nil

        public init() {}

        public init(requiresRecreation: String? = nil, name: String? = nil, attribute: String? = nil) {
            self.requiresRecreation = requiresRecreation
            self.name = name
            self.attribute = attribute
        }

        public init(dictionary: [String: Any]) throws {
            self.requiresRecreation = dictionary["RequiresRecreation"] as? String
            self.name = dictionary["Name"] as? String
            self.attribute = dictionary["Attribute"] as? String
        }
    }

    public struct StackResourceSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Type of resource. (For more information, go to  AWS Resource Types Reference in the AWS CloudFormation User Guide.)
        public var resourceType: String = ""
        /// The name or unique identifier that corresponds to a physical instance ID of the resource.
        public var physicalResourceId: String? = nil
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: String? = nil
        /// Current status of the resource.
        public var resourceStatus: String = ""
        /// The logical name of the resource specified in the template.
        public var logicalResourceId: String = ""
        /// Time the status was updated.
        public var lastUpdatedTimestamp: Date = Date()

        public init() {}

        public init(resourceType: String, physicalResourceId: String? = nil, resourceStatusReason: String? = nil, resourceStatus: String, logicalResourceId: String, lastUpdatedTimestamp: Date) {
            self.resourceType = resourceType
            self.physicalResourceId = physicalResourceId
            self.resourceStatusReason = resourceStatusReason
            self.resourceStatus = resourceStatus
            self.logicalResourceId = logicalResourceId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
            self.physicalResourceId = dictionary["PhysicalResourceId"] as? String
            self.resourceStatusReason = dictionary["ResourceStatusReason"] as? String
            guard let resourceStatus = dictionary["ResourceStatus"] as? String else { throw InitializableError.missingRequiredParam("ResourceStatus") }
            self.resourceStatus = resourceStatus
            guard let logicalResourceId = dictionary["LogicalResourceId"] as? String else { throw InitializableError.missingRequiredParam("LogicalResourceId") }
            self.logicalResourceId = logicalResourceId
            guard let lastUpdatedTimestamp = dictionary["LastUpdatedTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("LastUpdatedTimestamp") }
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
        }
    }

    public struct CancelUpdateStackInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or the unique stack ID that is associated with the stack.
        public var stackName: String = ""

        public init() {}

        public init(stackName: String) {
            self.stackName = stackName
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
        }
    }

    public struct GetStackPolicyInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name or unique stack ID that is associated with the stack whose policy you want to get.
        public var stackName: String = ""

        public init() {}

        public init(stackName: String) {
            self.stackName = stackName
        }

        public init(dictionary: [String: Any]) throws {
            guard let stackName = dictionary["StackName"] as? String else { throw InitializableError.missingRequiredParam("StackName") }
            self.stackName = stackName
        }
    }

    public struct StackResource: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Time the status was updated.
        public var timestamp: Date = Date()
        /// Current status of the resource.
        public var resourceStatus: String = ""
        /// Unique identifier of the stack.
        public var stackId: String? = nil
        /// Type of resource. (For more information, go to  AWS Resource Types Reference in the AWS CloudFormation User Guide.)
        public var resourceType: String = ""
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by AWS CloudFormation.
        public var physicalResourceId: String? = nil
        /// The logical name of the resource specified in the template.
        public var logicalResourceId: String = ""
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: String? = nil
        /// The name associated with the stack.
        public var stackName: String? = nil
        /// User defined description associated with the resource.
        public var description: String? = nil

        public init() {}

        public init(timestamp: Date, resourceStatus: String, stackId: String? = nil, resourceType: String, physicalResourceId: String? = nil, logicalResourceId: String, resourceStatusReason: String? = nil, stackName: String? = nil, description: String? = nil) {
            self.timestamp = timestamp
            self.resourceStatus = resourceStatus
            self.stackId = stackId
            self.resourceType = resourceType
            self.physicalResourceId = physicalResourceId
            self.logicalResourceId = logicalResourceId
            self.resourceStatusReason = resourceStatusReason
            self.stackName = stackName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let timestamp = dictionary["Timestamp"] as? Date else { throw InitializableError.missingRequiredParam("Timestamp") }
            self.timestamp = timestamp
            guard let resourceStatus = dictionary["ResourceStatus"] as? String else { throw InitializableError.missingRequiredParam("ResourceStatus") }
            self.resourceStatus = resourceStatus
            self.stackId = dictionary["StackId"] as? String
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
            self.physicalResourceId = dictionary["PhysicalResourceId"] as? String
            guard let logicalResourceId = dictionary["LogicalResourceId"] as? String else { throw InitializableError.missingRequiredParam("LogicalResourceId") }
            self.logicalResourceId = logicalResourceId
            self.resourceStatusReason = dictionary["ResourceStatusReason"] as? String
            self.stackName = dictionary["StackName"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeAccountLimitsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the output exceeds 1 MB in size, a string that identifies the next page of limits. If no additional page exists, this value is null.
        public var nextToken: String? = nil
        /// An account limit structure that contain a list of AWS CloudFormation account limits and their values.
        public var accountLimits: [AccountLimit]? = nil

        public init() {}

        public init(nextToken: String? = nil, accountLimits: [AccountLimit]? = nil) {
            self.nextToken = nextToken
            self.accountLimits = accountLimits
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let accountLimits = dictionary["AccountLimits"] as? [[String: Any]] {
                self.accountLimits = try accountLimits.map({ try AccountLimit(dictionary: $0) })
            }
        }
    }

    public struct DeleteChangeSetInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If you specified the name of a change set to delete, specify the stack name or ID (ARN) that is associated with it.
        public var stackName: String? = nil
        /// The name or Amazon Resource Name (ARN) of the change set that you want to delete.
        public var changeSetName: String = ""

        public init() {}

        public init(stackName: String? = nil, changeSetName: String) {
            self.stackName = stackName
            self.changeSetName = changeSetName
        }

        public init(dictionary: [String: Any]) throws {
            self.stackName = dictionary["StackName"] as? String
            guard let changeSetName = dictionary["ChangeSetName"] as? String else { throw InitializableError.missingRequiredParam("ChangeSetName") }
            self.changeSetName = changeSetName
        }
    }

    public struct GetTemplateOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The stage of the template that you can retrieve. For stacks, the Original and Processed templates are always available. For change sets, the Original template is always available. After AWS CloudFormation finishes creating the change set, the Processed template becomes available.
        public var stagesAvailable: [String]? = nil
        /// Structure containing the template body. (For more information, go to Template Anatomy in the AWS CloudFormation User Guide.) AWS CloudFormation returns the same template that was used when the stack was created.
        public var templateBody: String? = nil

        public init() {}

        public init(stagesAvailable: [String]? = nil, templateBody: String? = nil) {
            self.stagesAvailable = stagesAvailable
            self.templateBody = templateBody
        }

        public init(dictionary: [String: Any]) throws {
            if let stagesAvailable = dictionary["StagesAvailable"] as? [String] {
                self.stagesAvailable = stagesAvailable
            }
            self.templateBody = dictionary["TemplateBody"] as? String
        }
    }

    public struct DescribeStackResourceOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A StackResourceDetail structure containing the description of the specified resource in the specified stack.
        public var stackResourceDetail: StackResourceDetail? = nil

        public init() {}

        public init(stackResourceDetail: StackResourceDetail? = nil) {
            self.stackResourceDetail = stackResourceDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let stackResourceDetail = dictionary["StackResourceDetail"] as? [String: Any] { self.stackResourceDetail = try Cloudformation.StackResourceDetail(dictionary: stackResourceDetail) }
        }
    }

}