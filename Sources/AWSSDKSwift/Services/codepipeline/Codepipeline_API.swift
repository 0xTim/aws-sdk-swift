// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
AWS CodePipeline  Overview  This is the AWS CodePipeline API Reference. This guide provides descriptions of the actions and data types for AWS CodePipeline. Some functionality for your pipeline is only configurable through the API. For additional information, see the AWS CodePipeline User Guide. You can use the AWS CodePipeline API to work with pipelines, stages, actions, gates, and transitions, as described below.  Pipelines are models of automated release processes. Each pipeline is uniquely named, and consists of actions, gates, and stages.  You can work with pipelines by calling:    CreatePipeline, which creates a uniquely-named pipeline.    DeletePipeline, which deletes the specified pipeline.    GetPipeline, which returns information about a pipeline structure.    GetPipelineExecution, which returns information about a specific execution of a pipeline.    GetPipelineState, which returns information about the current state of the stages and actions of a pipeline.    ListPipelines, which gets a summary of all of the pipelines associated with your account.    StartPipelineExecution, which runs the the most recent revision of an artifact through the pipeline.    UpdatePipeline, which updates a pipeline with edits or changes to the structure of the pipeline.   Pipelines include stages, which are logical groupings of gates and actions. Each stage contains one or more actions that must complete before the next stage begins. A stage will result in success or failure. If a stage fails, then the pipeline stops at that stage and will remain stopped until either a new version of an artifact appears in the source location, or a user takes action to re-run the most recent artifact through the pipeline. You can call GetPipelineState, which displays the status of a pipeline, including the status of stages in the pipeline, or GetPipeline, which returns the entire structure of the pipeline, including the stages of that pipeline. For more information about the structure of stages and actions, also refer to the AWS CodePipeline Pipeline Structure Reference. Pipeline stages include actions, which are categorized into categories such as source or build actions performed within a stage of a pipeline. For example, you can use a source action to import artifacts into a pipeline from a source such as Amazon S3. Like stages, you do not work with actions directly in most cases, but you do define and interact with actions when working with pipeline operations such as CreatePipeline and GetPipelineState.  Pipelines also include transitions, which allow the transition of artifacts from one stage to the next in a pipeline after the actions in one stage complete. You can work with transitions by calling:    DisableStageTransition, which prevents artifacts from transitioning to the next stage in a pipeline.    EnableStageTransition, which enables transition of artifacts between stages in a pipeline.     Using the API to integrate with AWS CodePipeline  For third-party integrators or developers who want to create their own integrations with AWS CodePipeline, the expected sequence varies from the standard API user. In order to integrate with AWS CodePipeline, developers will need to work with the following items:  Jobs, which are instances of an action. For example, a job for a source action might import a revision of an artifact from a source.  You can work with jobs by calling:    AcknowledgeJob, which confirms whether a job worker has received the specified job,    GetJobDetails, which returns the details of a job,    PollForJobs, which determines whether there are any jobs to act upon,     PutJobFailureResult, which provides details of a job failure, and    PutJobSuccessResult, which provides details of a job success.    Third party jobs, which are instances of an action created by a partner action and integrated into AWS CodePipeline. Partner actions are created by members of the AWS Partner Network. You can work with third party jobs by calling:    AcknowledgeThirdPartyJob, which confirms whether a job worker has received the specified job,    GetThirdPartyJobDetails, which requests the details of a job for a partner action,    PollForThirdPartyJobs, which determines whether there are any jobs to act upon,     PutThirdPartyJobFailureResult, which provides details of a job failure, and    PutThirdPartyJobSuccessResult, which provides details of a job success.  
*/
public struct Codepipeline {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "CodePipeline_20150709",
            service: "codepipeline",
            endpoint: endpoint
        )
    }

    ///  Returns information about any jobs for AWS CodePipeline to act upon.  When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. Additionally, this API returns any secret values defined for the action. 
    public func pollForJobs(_ input: PollForJobsInput) throws -> PollForJobsOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "PollForJobs", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Prevents artifacts in a pipeline from transitioning to the next stage in the pipeline.
    public func disableStageTransition(_ input: DisableStageTransitionInput) throws {
        _ = try request.invoke(operation: "DisableStageTransition", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Confirms a job worker has received the specified job. Only used for partner actions.
    public func acknowledgeThirdPartyJob(_ input: AcknowledgeThirdPartyJobInput) throws -> AcknowledgeThirdPartyJobOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "AcknowledgeThirdPartyJob", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Requests the details of a job for a third party action. Only used for partner actions.  When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. Additionally, this API returns any secret values defined for the action. 
    public func getThirdPartyJobDetails(_ input: GetThirdPartyJobDetailsInput) throws -> GetThirdPartyJobDetailsOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetThirdPartyJobDetails", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the state of a pipeline, including the stages and actions.
    public func getPipelineState(_ input: GetPipelineStateInput) throws -> GetPipelineStateOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetPipelineState", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about a specified job and whether that job has been received by the job worker. Only used for custom actions.
    public func acknowledgeJob(_ input: AcknowledgeJobInput) throws -> AcknowledgeJobOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "AcknowledgeJob", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a new custom action that can be used in all pipelines associated with the AWS account. Only used for custom actions.
    public func createCustomActionType(_ input: CreateCustomActionTypeInput) throws -> CreateCustomActionTypeOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateCustomActionType", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Determines whether there are any third party jobs for a job worker to act on. Only used for partner actions.  When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. 
    public func pollForThirdPartyJobs(_ input: PollForThirdPartyJobsInput) throws -> PollForThirdPartyJobsOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "PollForThirdPartyJobs", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Provides the response to a manual approval request to AWS CodePipeline. Valid responses include Approved and Rejected.
    public func putApprovalResult(_ input: PutApprovalResultInput) throws -> PutApprovalResultOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutApprovalResult", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about an execution of a pipeline, including details about artifacts, the pipeline execution ID, and the name, version, and status of the pipeline.
    public func getPipelineExecution(_ input: GetPipelineExecutionInput) throws -> GetPipelineExecutionOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetPipelineExecution", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about a job. Only used for custom actions.  When this API is called, AWS CodePipeline returns temporary credentials for the Amazon S3 bucket used to store artifacts for the pipeline, if the action requires access to that Amazon S3 bucket for input or output artifacts. Additionally, this API returns any secret values defined for the action. 
    public func getJobDetails(_ input: GetJobDetailsInput) throws -> GetJobDetailsOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetJobDetails", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns the metadata, structure, stages, and actions of a pipeline. Can be used to return the entire structure of a pipeline in JSON format, which can then be modified and used to update the pipeline structure with UpdatePipeline.
    public func getPipeline(_ input: GetPipelineInput) throws -> GetPipelineOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetPipeline", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Gets a summary of all of the pipelines associated with your account.
    public func listPipelines(_ input: ListPipelinesInput) throws -> ListPipelinesOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListPipelines", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Updates a specified pipeline with edits or changes to its structure. Use a JSON file with the pipeline structure in conjunction with UpdatePipeline to provide the full structure of the pipeline. Updating the pipeline increases the version number of the pipeline by 1.
    public func updatePipeline(_ input: UpdatePipelineInput) throws -> UpdatePipelineOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdatePipeline", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Provides information to AWS CodePipeline about new revisions to a source.
    public func putActionRevision(_ input: PutActionRevisionInput) throws -> PutActionRevisionOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "PutActionRevision", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a pipeline.
    public func createPipeline(_ input: CreatePipelineInput) throws -> CreatePipelineOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreatePipeline", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Marks a custom action as deleted. PollForJobs for the custom action will fail after the action is marked for deletion. Only used for custom actions.  You cannot recreate a custom action after it has been deleted unless you increase the version number of the action. 
    public func deleteCustomActionType(_ input: DeleteCustomActionTypeInput) throws {
        _ = try request.invoke(operation: "DeleteCustomActionType", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Enables artifacts in a pipeline to transition to a stage in a pipeline.
    public func enableStageTransition(_ input: EnableStageTransitionInput) throws {
        _ = try request.invoke(operation: "EnableStageTransition", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Deletes the specified pipeline.
    public func deletePipeline(_ input: DeletePipelineInput) throws {
        _ = try request.invoke(operation: "DeletePipeline", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Resumes the pipeline execution by retrying the last failed actions in a stage.
    public func retryStageExecution(_ input: RetryStageExecutionInput) throws -> RetryStageExecutionOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "RetryStageExecution", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Represents the success of a third party job as returned to the pipeline by a job worker. Only used for partner actions.
    public func putThirdPartyJobSuccessResult(_ input: PutThirdPartyJobSuccessResultInput) throws {
        _ = try request.invoke(operation: "PutThirdPartyJobSuccessResult", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Represents the failure of a third party job as returned to the pipeline by a job worker. Only used for partner actions.
    public func putThirdPartyJobFailureResult(_ input: PutThirdPartyJobFailureResultInput) throws {
        _ = try request.invoke(operation: "PutThirdPartyJobFailureResult", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Gets a summary of all AWS CodePipeline action types associated with your account.
    public func listActionTypes(_ input: ListActionTypesInput) throws -> ListActionTypesOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListActionTypes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Starts the specified pipeline. Specifically, it begins processing the latest commit to the source location specified as part of the pipeline.
    public func startPipelineExecution(_ input: StartPipelineExecutionInput) throws -> StartPipelineExecutionOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "StartPipelineExecution", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CodepipelineResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Represents the success of a job as returned to the pipeline by a job worker. Only used for custom actions.
    public func putJobSuccessResult(_ input: PutJobSuccessResultInput) throws {
        _ = try request.invoke(operation: "PutJobSuccessResult", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Represents the failure of a job as returned to the pipeline by a job worker. Only used for custom actions.
    public func putJobFailureResult(_ input: PutJobFailureResultInput) throws {
        _ = try request.invoke(operation: "PutJobFailureResult", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }


}