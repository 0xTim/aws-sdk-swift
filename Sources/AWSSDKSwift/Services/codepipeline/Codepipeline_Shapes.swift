// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Codepipeline {

    public struct ActionContext: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the action within the context of a job.
        public var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct PipelineSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time of the last update to the pipeline, in timestamp format.
        public var updated: Date? = nil
        /// The name of the pipeline.
        public var name: String? = nil
        /// The version number of the pipeline.
        public var version: Int32? = nil
        /// The date and time the pipeline was created, in timestamp format.
        public var created: Date? = nil

        public init() {}

        public init(updated: Date? = nil, name: String? = nil, version: Int32? = nil, created: Date? = nil) {
            self.updated = updated
            self.name = name
            self.version = version
            self.created = created
        }

    }

    public struct FailureDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of the failure.
        public var type: String = ""
        /// The message about the failure.
        public var message: String = ""
        /// The external ID of the run of the action that failed.
        public var externalExecutionId: String? = nil

        public init() {}

        public init(type: String, message: String, externalExecutionId: String? = nil) {
            self.type = type
            self.message = message
            self.externalExecutionId = externalExecutionId
        }

    }

    public struct ListActionTypesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Provides details of the action types.
        public var actionTypes: [ActionType] = []
        /// If the amount of returned information is significantly large, an identifier is also returned which can be used in a subsequent list action types call to return the next set of action types in the list.
        public var nextToken: String? = nil

        public init() {}

        public init(actionTypes: [ActionType], nextToken: String? = nil) {
            self.actionTypes = actionTypes
            self.nextToken = nextToken
        }

    }

    public struct GetJobDetailsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique system-generated ID for the job.
        public var jobId: String = ""

        public init() {}

        public init(jobId: String) {
            self.jobId = jobId
        }

    }

    public struct CurrentRevision: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The revision ID of the current version of an artifact.
        public var revision: String = ""
        /// The change identifier for the current revision.
        public var changeIdentifier: String = ""
        /// The date and time when the most recent revision of the artifact was created, in timestamp format.
        public var created: Date? = nil
        /// The summary of the most recent revision of the artifact.
        public var revisionSummary: String? = nil

        public init() {}

        public init(revision: String, changeIdentifier: String, created: Date? = nil, revisionSummary: String? = nil) {
            self.revision = revision
            self.changeIdentifier = changeIdentifier
            self.created = created
            self.revisionSummary = revisionSummary
        }

    }

    public struct PutActionRevisionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the current workflow state of the pipeline.
        public var pipelineExecutionId: String? = nil
        /// Indicates whether the artifact revision was previously used in an execution of the specified pipeline.
        public var newRevision: Bool? = nil

        public init() {}

        public init(pipelineExecutionId: String? = nil, newRevision: Bool? = nil) {
            self.pipelineExecutionId = pipelineExecutionId
            self.newRevision = newRevision
        }

    }

    public struct RetryStageExecutionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the current workflow execution in the failed stage.
        public var pipelineExecutionId: String? = nil

        public init() {}

        public init(pipelineExecutionId: String? = nil) {
            self.pipelineExecutionId = pipelineExecutionId
        }

    }

    public struct ArtifactDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The minimum number of artifacts allowed for the action type.
        public var minimumCount: Int32 = 0
        /// The maximum number of artifacts allowed for the action type.
        public var maximumCount: Int32 = 0

        public init() {}

        public init(minimumCount: Int32, maximumCount: Int32) {
            self.minimumCount = minimumCount
            self.maximumCount = maximumCount
        }

    }

    public struct ErrorDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The system ID or error number code of the error.
        public var code: String? = nil
        /// The text of the error message.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct ActionConfigurationProperty: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the action configuration property.
        public var name: String = ""
        /// Whether the configuration property is a key.
        public var key: Bool = false
        /// Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs. When updating a pipeline, passing * * * * * without changing any other values of the action will preserve the prior value of the secret.
        public var secret: Bool = false
        /// The description of the action configuration property that will be displayed to users.
        public var description: String? = nil
        /// Whether the configuration property is a required value.
        public var required: Bool = false
        /// The type of the configuration property.
        public var type: String? = nil
        /// Indicates that the proprety will be used in conjunction with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret. If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to additional restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
        public var queryable: Bool? = nil

        public init() {}

        public init(name: String, key: Bool, secret: Bool, description: String? = nil, required: Bool, type: String? = nil, queryable: Bool? = nil) {
            self.name = name
            self.key = key
            self.secret = secret
            self.description = description
            self.required = required
            self.type = type
            self.queryable = queryable
        }

    }

    public struct StageContext: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the stage.
        public var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct StageExecution: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status of the stage, or for a completed stage, the last status of the stage.
        public var status: String = ""
        /// The ID of the pipeline execution associated with the stage.
        public var pipelineExecutionId: String = ""

        public init() {}

        public init(status: String, pipelineExecutionId: String) {
            self.status = status
            self.pipelineExecutionId = pipelineExecutionId
        }

    }

    public struct ActionExecution: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A summary of the run of the action.
        public var summary: String? = nil
        /// The status of the action, or for a completed action, the last status of the action.
        public var status: String? = nil
        /// The ARN of the user who last changed the pipeline.
        public var lastUpdatedBy: String? = nil
        /// The external ID of the run of the action.
        public var externalExecutionId: String? = nil
        /// The URL of a resource external to AWS that will be used when running the action, for example an external repository URL.
        public var externalExecutionUrl: String? = nil
        /// The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the GetPipelineState command and is used to validate that the approval request corresponding to this token is still valid.
        public var token: String? = nil
        /// The details of an error returned by a URL external to AWS.
        public var errorDetails: ErrorDetails? = nil
        /// A percentage of completeness of the action as it runs.
        public var percentComplete: Int32? = nil
        /// The last status change of the action.
        public var lastStatusChange: Date? = nil

        public init() {}

        public init(summary: String? = nil, status: String? = nil, lastUpdatedBy: String? = nil, externalExecutionId: String? = nil, externalExecutionUrl: String? = nil, token: String? = nil, errorDetails: ErrorDetails? = nil, percentComplete: Int32? = nil, lastStatusChange: Date? = nil) {
            self.summary = summary
            self.status = status
            self.lastUpdatedBy = lastUpdatedBy
            self.externalExecutionId = externalExecutionId
            self.externalExecutionUrl = externalExecutionUrl
            self.token = token
            self.errorDetails = errorDetails
            self.percentComplete = percentComplete
            self.lastStatusChange = lastStatusChange
        }

    }

    public struct StartPipelineExecutionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline to start.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StageState: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The state of the inbound transition, which is either enabled or disabled.
        public var inboundTransitionState: TransitionState? = nil
        /// The state of the stage.
        public var actionStates: [ActionState]? = nil
        /// The name of the stage.
        public var stageName: String? = nil
        /// Information about the latest execution in the stage, including its ID and status.
        public var latestExecution: StageExecution? = nil

        public init() {}

        public init(inboundTransitionState: TransitionState? = nil, actionStates: [ActionState]? = nil, stageName: String? = nil, latestExecution: StageExecution? = nil) {
            self.inboundTransitionState = inboundTransitionState
            self.actionStates = actionStates
            self.stageName = stageName
            self.latestExecution = latestExecution
        }

    }

    public struct PutActionRevisionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the stage that contains the action that will act upon the revision.
        public var stageName: String = ""
        /// The name of the action that will process the revision.
        public var actionName: String = ""
        /// The name of the pipeline that will start processing the revision to the source.
        public var pipelineName: String = ""
        public var actionRevision: ActionRevision = ActionRevision()

        public init() {}

        public init(stageName: String, actionName: String, pipelineName: String, actionRevision: ActionRevision) {
            self.stageName = stageName
            self.actionName = actionName
            self.pipelineName = pipelineName
            self.actionRevision = actionRevision
        }

    }

    public struct PutThirdPartyJobFailureResultInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var failureDetails: FailureDetails = FailureDetails()
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientToken: String = ""
        /// The ID of the job that failed. This is the same ID returned from PollForThirdPartyJobs.
        public var jobId: String = ""

        public init() {}

        public init(failureDetails: FailureDetails, clientToken: String, jobId: String) {
            self.failureDetails = failureDetails
            self.clientToken = clientToken
            self.jobId = jobId
        }

    }

    public struct Artifact: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The artifact's revision ID. Depending on the type of object, this could be a commit ID (GitHub) or a revision ID (Amazon S3).
        public var revision: String? = nil
        /// The artifact's name.
        public var name: String? = nil
        /// The location of an artifact.
        public var location: ArtifactLocation? = nil

        public init() {}

        public init(revision: String? = nil, name: String? = nil, location: ArtifactLocation? = nil) {
            self.revision = revision
            self.name = name
            self.location = location
        }

    }

    public struct JobData: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var actionTypeId: ActionTypeId? = nil
        public var actionConfiguration: ActionConfiguration? = nil
        public var artifactCredentials: AWSSessionCredentials? = nil
        /// The output of the job.
        public var outputArtifacts: [Artifact]? = nil
        public var encryptionKey: EncryptionKey? = nil
        /// A system-generated token, such as a AWS CodeDeploy deployment ID, that a job requires in order to continue the job asynchronously.
        public var continuationToken: String? = nil
        /// The artifact supplied to the job.
        public var inputArtifacts: [Artifact]? = nil
        public var pipelineContext: PipelineContext? = nil

        public init() {}

        public init(actionTypeId: ActionTypeId? = nil, actionConfiguration: ActionConfiguration? = nil, artifactCredentials: AWSSessionCredentials? = nil, outputArtifacts: [Artifact]? = nil, encryptionKey: EncryptionKey? = nil, continuationToken: String? = nil, inputArtifacts: [Artifact]? = nil, pipelineContext: PipelineContext? = nil) {
            self.actionTypeId = actionTypeId
            self.actionConfiguration = actionConfiguration
            self.artifactCredentials = artifactCredentials
            self.outputArtifacts = outputArtifacts
            self.encryptionKey = encryptionKey
            self.continuationToken = continuationToken
            self.inputArtifacts = inputArtifacts
            self.pipelineContext = pipelineContext
        }

    }

    public struct PutApprovalResultInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the stage that contains the action.
        public var stageName: String = ""
        /// The name of the action for which approval is requested.
        public var actionName: String = ""
        /// Represents information about the result of the approval request.
        public var result: ApprovalResult = ApprovalResult()
        /// The name of the pipeline that contains the action. 
        public var pipelineName: String = ""
        /// The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the GetPipelineState action and is used to validate that the approval request corresponding to this token is still valid.
        public var token: String = ""

        public init() {}

        public init(stageName: String, actionName: String, result: ApprovalResult, pipelineName: String, token: String) {
            self.stageName = stageName
            self.actionName = actionName
            self.result = result
            self.pipelineName = pipelineName
            self.token = token
        }

    }

    public struct ArtifactLocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of artifact in the location.
        public var type: String? = nil
        /// The Amazon S3 bucket that contains the artifact.
        public var s3Location: S3ArtifactLocation? = nil

        public init() {}

        public init(type: String? = nil, s3Location: S3ArtifactLocation? = nil) {
            self.type = type
            self.s3Location = s3Location
        }

    }

    public struct GetPipelineExecutionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline about which you want to get execution details.
        public var pipelineName: String = ""
        /// The ID of the pipeline execution about which you want to get execution details.
        public var pipelineExecutionId: String = ""

        public init() {}

        public init(pipelineName: String, pipelineExecutionId: String) {
            self.pipelineName = pipelineName
            self.pipelineExecutionId = pipelineExecutionId
        }

    }

    public struct DisableStageTransitionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies whether artifacts will be prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).
        public var transitionType: String = ""
        /// The name of the stage where you want to disable the inbound or outbound transition of artifacts.
        public var stageName: String = ""
        /// The reason given to the user why a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
        public var reason: String = ""
        /// The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
        public var pipelineName: String = ""

        public init() {}

        public init(transitionType: String, stageName: String, reason: String, pipelineName: String) {
            self.transitionType = transitionType
            self.stageName = stageName
            self.reason = reason
            self.pipelineName = pipelineName
        }

    }

    public struct GetJobDetailsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The details of the job.  If AWSSessionCredentials is used, a long-running job can call GetJobDetails again to obtain new credentials. 
        public var jobDetails: JobDetails? = nil

        public init() {}

        public init(jobDetails: JobDetails? = nil) {
            self.jobDetails = jobDetails
        }

    }

    public struct AcknowledgeJobOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Whether the job worker has received the specified job.
        public var status: String? = nil

        public init() {}

        public init(status: String? = nil) {
            self.status = status
        }

    }

    public struct PipelineExecution: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status of the pipeline execution.   InProgress: The pipeline execution is currently running.   Succeeded: The pipeline execution completed successfully.    Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution caught up and continued through the pipeline instead.    Failed: The pipeline did not complete successfully.  
        public var status: String? = nil
        /// The version number of the pipeline that was executed.
        public var pipelineVersion: Int32? = nil
        /// The ID of the pipeline execution.
        public var pipelineExecutionId: String? = nil
        /// The name of the pipeline that was executed.
        public var pipelineName: String? = nil
        /// A list of ArtifactRevision objects included in a pipeline execution.
        public var artifactRevisions: [ArtifactRevision]? = nil

        public init() {}

        public init(status: String? = nil, pipelineVersion: Int32? = nil, pipelineExecutionId: String? = nil, pipelineName: String? = nil, artifactRevisions: [ArtifactRevision]? = nil) {
            self.status = status
            self.pipelineVersion = pipelineVersion
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineName = pipelineName
            self.artifactRevisions = artifactRevisions
        }

    }

    public struct AcknowledgeJobInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the PollForJobs request that returned this job.
        public var nonce: String = ""
        /// The unique system-generated ID of the job for which you want to confirm receipt.
        public var jobId: String = ""

        public init() {}

        public init(nonce: String, jobId: String) {
            self.nonce = nonce
            self.jobId = jobId
        }

    }

    public struct JobDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique system-generated ID of the job.
        public var id: String? = nil
        /// The AWS account ID associated with the job.
        public var accountId: String? = nil
        public var data: JobData? = nil

        public init() {}

        public init(id: String? = nil, accountId: String? = nil, data: JobData? = nil) {
            self.id = id
            self.accountId = accountId
            self.data = data
        }

    }

    public struct S3ArtifactLocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the Amazon S3 bucket.
        public var bucketName: String = ""
        /// The key of the object in the Amazon S3 bucket, which uniquely identifies the object in the bucket.
        public var objectKey: String = ""

        public init() {}

        public init(bucketName: String, objectKey: String) {
            self.bucketName = bucketName
            self.objectKey = objectKey
        }

    }

    public struct CreateCustomActionTypeOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var actionType: ActionType = ActionType()

        public init() {}

        public init(actionType: ActionType) {
            self.actionType = actionType
        }

    }

    public struct ActionTypeId: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The creator of the action being called.
        public var owner: String = ""
        /// A string that identifies the action type.
        public var version: String = ""
        /// The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy.
        public var provider: String = ""
        /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.
        public var category: String = ""

        public init() {}

        public init(owner: String, version: String, provider: String, category: String) {
            self.owner = owner
            self.version = version
            self.provider = provider
            self.category = category
        }

    }

    public struct GetThirdPartyJobDetailsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientToken: String = ""
        /// The unique system-generated ID used for identifying the job.
        public var jobId: String = ""

        public init() {}

        public init(clientToken: String, jobId: String) {
            self.clientToken = clientToken
            self.jobId = jobId
        }

    }

    public struct PutThirdPartyJobSuccessResultInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var executionDetails: ExecutionDetails? = nil
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientToken: String = ""
        /// A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs will use this token in order to identify the running instance of the action. It can be reused to return additional information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
        public var continuationToken: String? = nil
        public var currentRevision: CurrentRevision? = nil
        /// The ID of the job that successfully completed. This is the same ID returned from PollForThirdPartyJobs.
        public var jobId: String = ""

        public init() {}

        public init(executionDetails: ExecutionDetails? = nil, clientToken: String, continuationToken: String? = nil, currentRevision: CurrentRevision? = nil, jobId: String) {
            self.executionDetails = executionDetails
            self.clientToken = clientToken
            self.continuationToken = continuationToken
            self.currentRevision = currentRevision
            self.jobId = jobId
        }

    }

    public struct DeleteCustomActionTypeInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The provider of the service used in the custom action, such as AWS CodeDeploy.
        public var provider: String = ""
        /// The version of the custom action to delete.
        public var version: String = ""
        /// The category of the custom action that you want to delete, such as source or deploy.
        public var category: String = ""

        public init() {}

        public init(provider: String, version: String, category: String) {
            self.provider = provider
            self.version = version
            self.category = category
        }

    }

    public struct StageDeclaration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Reserved for future use.
        public var blockers: [BlockerDeclaration]? = nil
        /// The name of the stage.
        public var name: String = ""
        /// The actions included in a stage.
        public var actions: [ActionDeclaration] = []

        public init() {}

        public init(blockers: [BlockerDeclaration]? = nil, name: String, actions: [ActionDeclaration]) {
            self.blockers = blockers
            self.name = name
            self.actions = actions
        }

    }

    public struct AWSSessionCredentials: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the session.
        public var sessionToken: String = ""
        /// The access key for the session.
        public var accessKeyId: String = ""
        /// The secret access key for the session.
        public var secretAccessKey: String = ""

        public init() {}

        public init(sessionToken: String, accessKeyId: String, secretAccessKey: String) {
            self.sessionToken = sessionToken
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
        }

    }

    public struct EncryptionKey: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID used to identify the key. For an AWS KMS key, this is the key ID or key ARN.
        public var id: String = ""
        /// The type of encryption key, such as an AWS Key Management Service (AWS KMS) key. When creating or updating a pipeline, the value must be set to 'KMS'.
        public var type: String = ""

        public init() {}

        public init(id: String, type: String) {
            self.id = id
            self.type = type
        }

    }

    public struct EnableStageTransitionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.
        public var pipelineName: String = ""
        /// Specifies whether artifacts will be allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already-processed artifacts will be allowed to transition to the next stage (outbound).
        public var transitionType: String = ""
        /// The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).
        public var stageName: String = ""

        public init() {}

        public init(pipelineName: String, transitionType: String, stageName: String) {
            self.pipelineName = pipelineName
            self.transitionType = transitionType
            self.stageName = stageName
        }

    }

    public struct InputArtifact: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the artifact to be worked on, for example, "My App". The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct PollForJobsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the jobs to take action on.
        public var jobs: [Job]? = nil

        public init() {}

        public init(jobs: [Job]? = nil) {
            self.jobs = jobs
        }

    }

    public struct ActionDeclaration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The configuration information for the action type.
        public var actionTypeId: ActionTypeId = ActionTypeId()
        /// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
        public var roleArn: String? = nil
        /// The action declaration's name.
        public var name: String = ""
        /// The order in which actions are run.
        public var runOrder: Int32? = nil
        /// The name or ID of the result of the action declaration, such as a test or build artifact.
        public var outputArtifacts: [OutputArtifact]? = nil
        /// The name or ID of the artifact consumed by the action, such as a test or build artifact.
        public var inputArtifacts: [InputArtifact]? = nil
        /// The action declaration's configuration.
        public var configuration: [String: String]? = nil

        public init() {}

        public init(actionTypeId: ActionTypeId, roleArn: String? = nil, name: String, runOrder: Int32? = nil, outputArtifacts: [OutputArtifact]? = nil, inputArtifacts: [InputArtifact]? = nil, configuration: [String: String]? = nil) {
            self.actionTypeId = actionTypeId
            self.roleArn = roleArn
            self.name = name
            self.runOrder = runOrder
            self.outputArtifacts = outputArtifacts
            self.inputArtifacts = inputArtifacts
            self.configuration = configuration
        }

    }

    public struct GetPipelineStateOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time the pipeline was last updated, in timestamp format.
        public var updated: Date? = nil
        /// The version number of the pipeline.  A newly-created pipeline is always assigned a version number of 1. 
        public var pipelineVersion: Int32? = nil
        /// A list of the pipeline stage output information, including stage name, state, most recent run details, whether the stage is disabled, and other data.
        public var stageStates: [StageState]? = nil
        /// The date and time the pipeline was created, in timestamp format.
        public var created: Date? = nil
        /// The name of the pipeline for which you want to get the state.
        public var pipelineName: String? = nil

        public init() {}

        public init(updated: Date? = nil, pipelineVersion: Int32? = nil, stageStates: [StageState]? = nil, created: Date? = nil, pipelineName: String? = nil) {
            self.updated = updated
            self.pipelineVersion = pipelineVersion
            self.stageStates = stageStates
            self.created = created
            self.pipelineName = pipelineName
        }

    }

    public struct PutJobSuccessResultInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The execution details of the successful job, such as the actions taken by the job worker.
        public var executionDetails: ExecutionDetails? = nil
        /// A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs will use this token in order to identify the running instance of the action. It can be reused to return additional information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
        public var continuationToken: String? = nil
        /// The ID of the current revision of the artifact successfully worked upon by the job.
        public var currentRevision: CurrentRevision? = nil
        /// The unique system-generated ID of the job that succeeded. This is the same ID returned from PollForJobs.
        public var jobId: String = ""

        public init() {}

        public init(executionDetails: ExecutionDetails? = nil, continuationToken: String? = nil, currentRevision: CurrentRevision? = nil, jobId: String) {
            self.executionDetails = executionDetails
            self.continuationToken = continuationToken
            self.currentRevision = currentRevision
            self.jobId = jobId
        }

    }

    public struct OutputArtifact: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the output of an artifact, such as "My App". The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions. Output artifact names must be unique within a pipeline.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct DeletePipelineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline to be deleted.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct PipelineDeclaration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var artifactStore: ArtifactStore = ArtifactStore()
        /// The name of the action to be performed.
        public var name: String = ""
        /// The stage in which to perform the action.
        public var stages: [StageDeclaration] = []
        /// The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn.
        public var roleArn: String = ""
        /// The version number of the pipeline. A new pipeline always has a version number of 1. This number is automatically incremented when a pipeline is updated.
        public var version: Int32? = nil

        public init() {}

        public init(artifactStore: ArtifactStore, name: String, stages: [StageDeclaration], roleArn: String, version: Int32? = nil) {
            self.artifactStore = artifactStore
            self.name = name
            self.stages = stages
            self.roleArn = roleArn
            self.version = version
        }

    }

    public struct ThirdPartyJobDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier used to identify the job details in AWS CodePipeline.
        public var id: String? = nil
        /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an AcknowledgeThirdPartyJob request.
        public var nonce: String? = nil
        /// The data to be returned by the third party job worker.
        public var data: ThirdPartyJobData? = nil

        public init() {}

        public init(id: String? = nil, nonce: String? = nil, data: ThirdPartyJobData? = nil) {
            self.id = id
            self.nonce = nonce
            self.data = data
        }

    }

    public struct ActionState: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A URL link for more information about the state of the action, such as a deployment group details page.
        public var entityUrl: String? = nil
        /// The name of the action.
        public var actionName: String? = nil
        public var currentRevision: ActionRevision? = nil
        /// A URL link for more information about the revision, such as a commit details page.
        public var revisionUrl: String? = nil
        public var latestExecution: ActionExecution? = nil

        public init() {}

        public init(entityUrl: String? = nil, actionName: String? = nil, currentRevision: ActionRevision? = nil, revisionUrl: String? = nil, latestExecution: ActionExecution? = nil) {
            self.entityUrl = entityUrl
            self.actionName = actionName
            self.currentRevision = currentRevision
            self.revisionUrl = revisionUrl
            self.latestExecution = latestExecution
        }

    }

    public struct PollForJobsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var actionTypeId: ActionTypeId = ActionTypeId()
        /// A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value will be returned.
        public var queryParam: [String: String]? = nil
        /// The maximum number of jobs to return in a poll for jobs call.
        public var maxBatchSize: Int32? = nil

        public init() {}

        public init(actionTypeId: ActionTypeId, queryParam: [String: String]? = nil, maxBatchSize: Int32? = nil) {
            self.actionTypeId = actionTypeId
            self.queryParam = queryParam
            self.maxBatchSize = maxBatchSize
        }

    }

    public struct ThirdPartyJob: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier used to identify the job in AWS CodePipeline.
        public var jobId: String? = nil
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientId: String? = nil

        public init() {}

        public init(jobId: String? = nil, clientId: String? = nil) {
            self.jobId = jobId
            self.clientId = clientId
        }

    }

    public struct ArtifactRevision: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Summary information about the most recent revision of the artifact. For GitHub and AWS CodeCommit repositories, the commit message. For Amazon S3 buckets or actions, the user-provided content of a codepipeline-artifact-revision-summary key specified in the object metadata.
        public var revisionSummary: String? = nil
        /// The name of an artifact. This name might be system-generated, such as "MyApp", or might be defined by the user when an action is created.
        public var name: String? = nil
        /// The date and time when the most recent revision of the artifact was created, in timestamp format.
        public var created: Date? = nil
        /// An additional identifier for a revision, such as a commit date or, for artifacts stored in Amazon S3 buckets, the ETag value.
        public var revisionChangeIdentifier: String? = nil
        /// The revision ID of the artifact.
        public var revisionId: String? = nil
        /// The commit ID for the artifact revision. For artifacts stored in GitHub or AWS CodeCommit repositories, the commit ID is linked to a commit details page.
        public var revisionUrl: String? = nil

        public init() {}

        public init(revisionSummary: String? = nil, name: String? = nil, created: Date? = nil, revisionChangeIdentifier: String? = nil, revisionId: String? = nil, revisionUrl: String? = nil) {
            self.revisionSummary = revisionSummary
            self.name = name
            self.created = created
            self.revisionChangeIdentifier = revisionChangeIdentifier
            self.revisionId = revisionId
            self.revisionUrl = revisionUrl
        }

    }

    public struct ListPipelinesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that was returned from the previous list pipelines call, which can be used to return the next set of pipelines in the list.
        public var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct ActionRevision: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the most recent version of the action was created, in timestamp format.
        public var created: Date = Date()
        /// The unique identifier of the change that set the state to this revision, for example a deployment ID or timestamp.
        public var revisionChangeId: String = ""
        /// The system-generated unique ID that identifies the revision number of the action.
        public var revisionId: String = ""

        public init() {}

        public init(created: Date, revisionChangeId: String, revisionId: String) {
            self.created = created
            self.revisionChangeId = revisionChangeId
            self.revisionId = revisionId
        }

    }

    public struct RetryStageExecutionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The scope of the retry attempt. Currently, the only supported value is FAILED_ACTIONS.
        public var retryMode: String = ""
        /// The ID of the pipeline execution in the failed stage to be retried. Use the GetPipelineState action to retrieve the current pipelineExecutionId of the failed stage
        public var pipelineExecutionId: String = ""
        /// The name of the failed stage to be retried.
        public var stageName: String = ""
        /// The name of the pipeline that contains the failed stage.
        public var pipelineName: String = ""

        public init() {}

        public init(retryMode: String, pipelineExecutionId: String, stageName: String, pipelineName: String) {
            self.retryMode = retryMode
            self.pipelineExecutionId = pipelineExecutionId
            self.stageName = stageName
            self.pipelineName = pipelineName
        }

    }

    public struct TransitionState: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Whether the transition between stages is enabled (true) or disabled (false).
        public var enabled: Bool? = nil
        /// The user-specified reason why the transition between two stages of a pipeline was disabled.
        public var disabledReason: String? = nil
        /// The timestamp when the transition state was last changed.
        public var lastChangedAt: Date? = nil
        /// The ID of the user who last changed the transition state.
        public var lastChangedBy: String? = nil

        public init() {}

        public init(enabled: Bool? = nil, disabledReason: String? = nil, lastChangedAt: Date? = nil, lastChangedBy: String? = nil) {
            self.enabled = enabled
            self.disabledReason = disabledReason
            self.lastChangedAt = lastChangedAt
            self.lastChangedBy = lastChangedBy
        }

    }

    public struct PipelineContext: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline. This is a user-specified value. Pipeline names must be unique across all pipeline names under an Amazon Web Services account.
        public var pipelineName: String? = nil
        public var action: ActionContext? = nil
        /// The stage of the pipeline.
        public var stage: StageContext? = nil

        public init() {}

        public init(pipelineName: String? = nil, action: ActionContext? = nil, stage: StageContext? = nil) {
            self.pipelineName = pipelineName
            self.action = action
            self.stage = stage
        }

    }

    public struct PollForThirdPartyJobsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var actionTypeId: ActionTypeId = ActionTypeId()
        /// The maximum number of jobs to return in a poll for jobs call.
        public var maxBatchSize: Int32? = nil

        public init() {}

        public init(actionTypeId: ActionTypeId, maxBatchSize: Int32? = nil) {
            self.actionTypeId = actionTypeId
            self.maxBatchSize = maxBatchSize
        }

    }

    public struct PollForThirdPartyJobsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the jobs to take action on.
        public var jobs: [ThirdPartyJob]? = nil

        public init() {}

        public init(jobs: [ThirdPartyJob]? = nil) {
            self.jobs = jobs
        }

    }

    public struct PutJobFailureResultInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The details about the failure of a job.
        public var failureDetails: FailureDetails = FailureDetails()
        /// The unique system-generated ID of the job that failed. This is the same ID returned from PollForJobs.
        public var jobId: String = ""

        public init() {}

        public init(failureDetails: FailureDetails, jobId: String) {
            self.failureDetails = failureDetails
            self.jobId = jobId
        }

    }

    public struct ArtifactStore: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of the artifact store, such as S3.
        public var type: String = ""
        /// The location for storing the artifacts for a pipeline, such as an S3 bucket or folder.
        public var location: String = ""
        /// The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If this is undefined, the default key for Amazon S3 is used.
        public var encryptionKey: EncryptionKey? = nil

        public init() {}

        public init(type: String, location: String, encryptionKey: EncryptionKey? = nil) {
            self.type = type
            self.location = location
            self.encryptionKey = encryptionKey
        }

    }

    public struct PutApprovalResultOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The timestamp showing when the approval or rejection was submitted.
        public var approvedAt: Date? = nil

        public init() {}

        public init(approvedAt: Date? = nil) {
            self.approvedAt = approvedAt
        }

    }

    public struct GetPipelineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline for which you want to get information. Pipeline names must be unique under an Amazon Web Services (AWS) user account.
        public var name: String = ""
        /// The version number of the pipeline. If you do not specify a version, defaults to the most current version.
        public var version: Int32? = nil

        public init() {}

        public init(name: String, version: Int32? = nil) {
            self.name = name
            self.version = version
        }

    }

    public struct ActionType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The details of the input artifact for the action, such as its commit ID.
        public var inputArtifactDetails: ArtifactDetails = ArtifactDetails()
        public var id: ActionTypeId = ActionTypeId()
        /// The configuration properties for the action type.
        public var actionConfigurationProperties: [ActionConfigurationProperty]? = nil
        /// The settings for the action type.
        public var settings: ActionTypeSettings? = nil
        /// The details of the output artifact of the action, such as its commit ID.
        public var outputArtifactDetails: ArtifactDetails = ArtifactDetails()

        public init() {}

        public init(inputArtifactDetails: ArtifactDetails, id: ActionTypeId, actionConfigurationProperties: [ActionConfigurationProperty]? = nil, settings: ActionTypeSettings? = nil, outputArtifactDetails: ArtifactDetails) {
            self.inputArtifactDetails = inputArtifactDetails
            self.id = id
            self.actionConfigurationProperties = actionConfigurationProperties
            self.settings = settings
            self.outputArtifactDetails = outputArtifactDetails
        }

    }

    public struct GetPipelineExecutionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Represents information about the execution of a pipeline.
        public var pipelineExecution: PipelineExecution? = nil

        public init() {}

        public init(pipelineExecution: PipelineExecution? = nil) {
            self.pipelineExecution = pipelineExecution
        }

    }

    public struct ThirdPartyJobData: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var actionTypeId: ActionTypeId? = nil
        public var actionConfiguration: ActionConfiguration? = nil
        public var artifactCredentials: AWSSessionCredentials? = nil
        /// The name of the artifact that will be the result of the action, if any. This name might be system-generated, such as "MyBuiltApp", or might be defined by the user when the action is created.
        public var outputArtifacts: [Artifact]? = nil
        /// The encryption key used to encrypt and decrypt data in the artifact store for the pipeline, such as an AWS Key Management Service (AWS KMS) key. This is optional and might not be present.
        public var encryptionKey: EncryptionKey? = nil
        /// A system-generated token, such as a AWS CodeDeploy deployment ID, that a job requires in order to continue the job asynchronously.
        public var continuationToken: String? = nil
        /// The name of the artifact that will be worked upon by the action, if any. This name might be system-generated, such as "MyApp", or might be defined by the user when the action is created. The input artifact name must match the name of an output artifact generated by an action in an earlier action or stage of the pipeline.
        public var inputArtifacts: [Artifact]? = nil
        public var pipelineContext: PipelineContext? = nil

        public init() {}

        public init(actionTypeId: ActionTypeId? = nil, actionConfiguration: ActionConfiguration? = nil, artifactCredentials: AWSSessionCredentials? = nil, outputArtifacts: [Artifact]? = nil, encryptionKey: EncryptionKey? = nil, continuationToken: String? = nil, inputArtifacts: [Artifact]? = nil, pipelineContext: PipelineContext? = nil) {
            self.actionTypeId = actionTypeId
            self.actionConfiguration = actionConfiguration
            self.artifactCredentials = artifactCredentials
            self.outputArtifacts = outputArtifacts
            self.encryptionKey = encryptionKey
            self.continuationToken = continuationToken
            self.inputArtifacts = inputArtifacts
            self.pipelineContext = pipelineContext
        }

    }

    public struct GetPipelineOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pipeline: PipelineDeclaration? = nil

        public init() {}

        public init(pipeline: PipelineDeclaration? = nil) {
            self.pipeline = pipeline
        }

    }

    public struct ActionConfiguration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The configuration data for the action.
        public var configuration: [String: String]? = nil

        public init() {}

        public init(configuration: [String: String]? = nil) {
            self.configuration = configuration
        }

    }

    public struct CreatePipelineOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pipeline: PipelineDeclaration? = nil

        public init() {}

        public init(pipeline: PipelineDeclaration? = nil) {
            self.pipeline = pipeline
        }

    }

    public struct StartPipelineExecutionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique system-generated ID of the pipeline execution that was started.
        public var pipelineExecutionId: String? = nil

        public init() {}

        public init(pipelineExecutionId: String? = nil) {
            self.pipelineExecutionId = pipelineExecutionId
        }

    }

    public struct GetPipelineStateInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline about which you want to get information.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct ActionTypeSettings: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
        public var revisionUrlTemplate: String? = nil
        /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
        public var thirdPartyConfigurationUrl: String? = nil
        /// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
        public var executionUrlTemplate: String? = nil
        /// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display within the pipeline.
        public var entityUrlTemplate: String? = nil

        public init() {}

        public init(revisionUrlTemplate: String? = nil, thirdPartyConfigurationUrl: String? = nil, executionUrlTemplate: String? = nil, entityUrlTemplate: String? = nil) {
            self.revisionUrlTemplate = revisionUrlTemplate
            self.thirdPartyConfigurationUrl = thirdPartyConfigurationUrl
            self.executionUrlTemplate = executionUrlTemplate
            self.entityUrlTemplate = entityUrlTemplate
        }

    }

    public struct AcknowledgeThirdPartyJobOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status information for the third party job, if any.
        public var status: String? = nil

        public init() {}

        public init(status: String? = nil) {
            self.status = status
        }

    }

    public struct CreateCustomActionTypeInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var inputArtifactDetails: ArtifactDetails = ArtifactDetails()
        public var settings: ActionTypeSettings? = nil
        public var outputArtifactDetails: ArtifactDetails = ArtifactDetails()
        /// The configuration properties for the custom action.  You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see Create a Custom Action for a Pipeline. 
        public var configurationProperties: [ActionConfigurationProperty]? = nil
        /// The version identifier of the custom action.
        public var version: String = ""
        /// The provider of the service used in the custom action, such as AWS CodeDeploy.
        public var provider: String = ""
        /// The category of the custom action, such as a build action or a test action.  Although Source and Approval are listed as valid values, they are not currently functional. These values are reserved for future use. 
        public var category: String = ""

        public init() {}

        public init(inputArtifactDetails: ArtifactDetails, settings: ActionTypeSettings? = nil, outputArtifactDetails: ArtifactDetails, configurationProperties: [ActionConfigurationProperty]? = nil, version: String, provider: String, category: String) {
            self.inputArtifactDetails = inputArtifactDetails
            self.settings = settings
            self.outputArtifactDetails = outputArtifactDetails
            self.configurationProperties = configurationProperties
            self.version = version
            self.provider = provider
            self.category = category
        }

    }

    public struct ApprovalResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The summary of the current status of the approval request.
        public var summary: String = ""
        /// The response submitted by a reviewer assigned to an approval action request.
        public var status: String = ""

        public init() {}

        public init(summary: String, status: String) {
            self.summary = summary
            self.status = status
        }

    }

    public struct BlockerDeclaration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Reserved for future use.
        public var type: String = ""
        /// Reserved for future use.
        public var name: String = ""

        public init() {}

        public init(type: String, name: String) {
            self.type = type
            self.name = name
        }

    }

    public struct ListActionTypesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.
        public var nextToken: String? = nil
        /// Filters the list of action types to those created by a specified entity.
        public var actionOwnerFilter: String? = nil

        public init() {}

        public init(nextToken: String? = nil, actionOwnerFilter: String? = nil) {
            self.nextToken = nextToken
            self.actionOwnerFilter = actionOwnerFilter
        }

    }

    public struct CreatePipelineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pipeline: PipelineDeclaration = PipelineDeclaration()

        public init() {}

        public init(pipeline: PipelineDeclaration) {
            self.pipeline = pipeline
        }

    }

    public struct UpdatePipelineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the pipeline to be updated.
        public var pipeline: PipelineDeclaration = PipelineDeclaration()

        public init() {}

        public init(pipeline: PipelineDeclaration) {
            self.pipeline = pipeline
        }

    }

    public struct Job: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the AWS account to use when performing the job.
        public var accountId: String? = nil
        /// Additional data about a job.
        public var data: JobData? = nil
        /// The unique system-generated ID of the job.
        public var id: String? = nil
        /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an AcknowledgeJob request.
        public var nonce: String? = nil

        public init() {}

        public init(accountId: String? = nil, data: JobData? = nil, id: String? = nil, nonce: String? = nil) {
            self.accountId = accountId
            self.data = data
            self.id = id
            self.nonce = nonce
        }

    }

    public struct UpdatePipelineOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The structure of the updated pipeline.
        public var pipeline: PipelineDeclaration? = nil

        public init() {}

        public init(pipeline: PipelineDeclaration? = nil) {
            self.pipeline = pipeline
        }

    }

    public struct ExecutionDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The summary of the current status of the actions.
        public var summary: String? = nil
        /// The percentage of work completed on the action, represented on a scale of zero to one hundred percent.
        public var percentComplete: Int32? = nil
        /// The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.
        public var externalExecutionId: String? = nil

        public init() {}

        public init(summary: String? = nil, percentComplete: Int32? = nil, externalExecutionId: String? = nil) {
            self.summary = summary
            self.percentComplete = percentComplete
            self.externalExecutionId = externalExecutionId
        }

    }

    public struct GetThirdPartyJobDetailsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The details of the job, including any protected values defined for the job.
        public var jobDetails: ThirdPartyJobDetails? = nil

        public init() {}

        public init(jobDetails: ThirdPartyJobDetails? = nil) {
            self.jobDetails = jobDetails
        }

    }

    public struct AcknowledgeThirdPartyJobInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a GetThirdPartyJobDetails request.
        public var nonce: String = ""
        /// The unique system-generated ID of the job.
        public var jobId: String = ""
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientToken: String = ""

        public init() {}

        public init(nonce: String, jobId: String, clientToken: String) {
            self.nonce = nonce
            self.jobId = jobId
            self.clientToken = clientToken
        }

    }

    public struct ListPipelinesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the amount of returned information is significantly large, an identifier is also returned which can be used in a subsequent list pipelines call to return the next set of pipelines in the list.
        public var nextToken: String? = nil
        /// The list of pipelines.
        public var pipelines: [PipelineSummary]? = nil

        public init() {}

        public init(nextToken: String? = nil, pipelines: [PipelineSummary]? = nil) {
            self.nextToken = nextToken
            self.pipelines = pipelines
        }

    }

}