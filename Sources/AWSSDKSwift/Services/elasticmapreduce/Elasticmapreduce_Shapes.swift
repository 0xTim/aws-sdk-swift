// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Elasticmapreduce {

    public struct InstanceFleetStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// A code representing the instance fleet status.
        public let state: InstanceFleetState?
        /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
        public let timeline: InstanceFleetTimeline?
        /// Provides status change reason details for the instance fleet.
        public let stateChangeReason: InstanceFleetStateChangeReason?

        public init(state: InstanceFleetState? = nil, timeline: InstanceFleetTimeline? = nil, stateChangeReason: InstanceFleetStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public enum AutoScalingPolicyStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case user_request = "USER_REQUEST"
        case provision_failure = "PROVISION_FAILURE"
        case cleanup_failure = "CLEANUP_FAILURE"
        public var description: String { return self.rawValue }
    }

    public enum InstanceFleetType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public struct JobFlowInstancesDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "HadoopVersion", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "KeepJobFlowAliveWhenNoSteps", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "MasterInstanceType", required: true, type: .string), 
            AWSShapeMember(label: "MasterPublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "SlaveInstanceType", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean)
        ]
        /// The Amazon EC2 instance identifier of the master node.
        public let masterInstanceId: String?
        /// The Hadoop version for the cluster.
        public let hadoopVersion: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour that an m1.small runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int32?
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public let ec2SubnetId: String?
        /// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
        public let ec2KeyName: String?
        /// Specifies whether the cluster should remain available after completing all steps.
        public let keepJobFlowAliveWhenNoSteps: Bool?
        /// Details about the instance groups in a cluster.
        public let instanceGroups: [InstanceGroupDetail]?
        /// The Amazon EC2 master node instance type.
        public let masterInstanceType: String
        /// The DNS name of the master node.
        public let masterPublicDnsName: String?
        /// The Amazon EC2 Availability Zone for the cluster.
        public let placement: PlacementType?
        /// The Amazon EC2 slave node instance type.
        public let slaveInstanceType: String
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and slave node. If the value is greater than 1, one instance is the master node and all others are slave nodes.
        public let instanceCount: Int32
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public let terminationProtected: Bool?

        public init(masterInstanceId: String? = nil, hadoopVersion: String? = nil, normalizedInstanceHours: Int32? = nil, ec2SubnetId: String? = nil, ec2KeyName: String? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, instanceGroups: [InstanceGroupDetail]? = nil, masterInstanceType: String, masterPublicDnsName: String? = nil, placement: PlacementType? = nil, slaveInstanceType: String, instanceCount: Int32, terminationProtected: Bool? = nil) {
            self.masterInstanceId = masterInstanceId
            self.hadoopVersion = hadoopVersion
            self.normalizedInstanceHours = normalizedInstanceHours
            self.ec2SubnetId = ec2SubnetId
            self.ec2KeyName = ec2KeyName
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.instanceGroups = instanceGroups
            self.masterInstanceType = masterInstanceType
            self.masterPublicDnsName = masterPublicDnsName
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.instanceCount = instanceCount
            self.terminationProtected = terminationProtected
        }

        private enum CodingKeys: String, CodingKey {
            case masterInstanceId = "MasterInstanceId"
            case hadoopVersion = "HadoopVersion"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case ec2SubnetId = "Ec2SubnetId"
            case ec2KeyName = "Ec2KeyName"
            case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
            case instanceGroups = "InstanceGroups"
            case masterInstanceType = "MasterInstanceType"
            case masterPublicDnsName = "MasterPublicDnsName"
            case placement = "Placement"
            case slaveInstanceType = "SlaveInstanceType"
            case instanceCount = "InstanceCount"
            case terminationProtected = "TerminationProtected"
        }
    }

    public enum AdjustmentType: String, CustomStringConvertible, Codable {
        case change_in_capacity = "CHANGE_IN_CAPACITY"
        case percent_change_in_capacity = "PERCENT_CHANGE_IN_CAPACITY"
        case exact_capacity = "EXACT_CAPACITY"
        public var description: String { return self.rawValue }
    }

    public struct PutAutoScalingPolicyOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure)
        ]
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public let instanceGroupId: String?
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String?
        /// The automatic scaling policy definition.
        public let autoScalingPolicy: AutoScalingPolicyDescription?

        public init(instanceGroupId: String? = nil, clusterId: String? = nil, autoScalingPolicy: AutoScalingPolicyDescription? = nil) {
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
            self.autoScalingPolicy = autoScalingPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case clusterId = "ClusterId"
            case autoScalingPolicy = "AutoScalingPolicy"
        }
    }

    public enum SpotProvisioningTimeoutAction: String, CustomStringConvertible, Codable {
        case switch_to_on_demand = "SWITCH_TO_ON_DEMAND"
        case terminate_cluster = "TERMINATE_CLUSTER"
        public var description: String { return self.rawValue }
    }

    public struct ListStepsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "StepIds", required: false, type: .list), 
            AWSShapeMember(label: "StepStates", required: false, type: .list), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The filter to limit the step list based on the identifier of the steps.
        public let stepIds: [String]?
        /// The filter to limit the step list based on certain states.
        public let stepStates: [StepState]?
        /// The identifier of the cluster for which to list the steps.
        public let clusterId: String

        public init(marker: String? = nil, stepIds: [String]? = nil, stepStates: [StepState]? = nil, clusterId: String) {
            self.marker = marker
            self.stepIds = stepIds
            self.stepStates = stepStates
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case stepIds = "StepIds"
            case stepStates = "StepStates"
            case clusterId = "ClusterId"
        }
    }

    public struct SimpleScalingPolicyConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer), 
            AWSShapeMember(label: "CoolDown", required: false, type: .integer), 
            AWSShapeMember(label: "AdjustmentType", required: false, type: .enum)
        ]
        /// The amount by which to scale in or scale out, based on the specified AdjustmentType. A positive value adds to the instance group's EC2 instance count while a negative number removes instances. If AdjustmentType is set to EXACT_CAPACITY, the number should only be a positive integer. If AdjustmentType is set to PERCENT_CHANGE_IN_CAPACITY, the value should express the percentage as a decimal. For example, -0.20 indicates a decrease in 20% increments of cluster capacity.
        public let scalingAdjustment: Int32
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
        public let coolDown: Int32?
        /// The way in which EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) each time the scaling activity is triggered. CHANGE_IN_CAPACITY is the default. CHANGE_IN_CAPACITY indicates that the EC2 instance count increments or decrements by ScalingAdjustment, which should be expressed as an integer. PERCENT_CHANGE_IN_CAPACITY indicates the instance count increments or decrements by the percentage specified by ScalingAdjustment, which should be expressed as a decimal. For example, 0.20 indicates an increase in 20% increments of cluster capacity. EXACT_CAPACITY indicates the scaling activity results in an instance group with the number of EC2 instances specified by ScalingAdjustment, which should be expressed as a positive integer.
        public let adjustmentType: AdjustmentType?

        public init(scalingAdjustment: Int32, coolDown: Int32? = nil, adjustmentType: AdjustmentType? = nil) {
            self.scalingAdjustment = scalingAdjustment
            self.coolDown = coolDown
            self.adjustmentType = adjustmentType
        }

        private enum CodingKeys: String, CodingKey {
            case scalingAdjustment = "ScalingAdjustment"
            case coolDown = "CoolDown"
            case adjustmentType = "AdjustmentType"
        }
    }

    public struct InstanceFleet: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceTypeSpecifications", required: false, type: .list), 
            AWSShapeMember(label: "LaunchSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisionedOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetType", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionedSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedOnDemandCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetOnDemandCapacity: Int32?
        /// The current status of the instance fleet. 
        public let status: InstanceFleetStatus?
        /// The specification for the instance types that comprise an instance fleet. Up to five unique instance specifications may be defined for each instance fleet. 
        public let instanceTypeSpecifications: [InstanceTypeSpecification]?
        /// Describes the launch specification for an instance fleet. 
        public let launchSpecifications: InstanceFleetProvisioningSpecifications?
        /// The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
        public let provisionedOnDemandCapacity: Int32?
        /// A friendly name for the instance fleet.
        public let name: String?
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK. 
        public let instanceFleetType: InstanceFleetType?
        /// The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
        public let provisionedSpotCapacity: Int32?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedSpotCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetSpotCapacity: Int32?
        /// The unique identifier of the instance fleet.
        public let id: String?

        public init(targetOnDemandCapacity: Int32? = nil, status: InstanceFleetStatus? = nil, instanceTypeSpecifications: [InstanceTypeSpecification]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, provisionedOnDemandCapacity: Int32? = nil, name: String? = nil, instanceFleetType: InstanceFleetType? = nil, provisionedSpotCapacity: Int32? = nil, targetSpotCapacity: Int32? = nil, id: String? = nil) {
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.status = status
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.launchSpecifications = launchSpecifications
            self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
            self.name = name
            self.instanceFleetType = instanceFleetType
            self.provisionedSpotCapacity = provisionedSpotCapacity
            self.targetSpotCapacity = targetSpotCapacity
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case status = "Status"
            case instanceTypeSpecifications = "InstanceTypeSpecifications"
            case launchSpecifications = "LaunchSpecifications"
            case provisionedOnDemandCapacity = "ProvisionedOnDemandCapacity"
            case name = "Name"
            case instanceFleetType = "InstanceFleetType"
            case provisionedSpotCapacity = "ProvisionedSpotCapacity"
            case targetSpotCapacity = "TargetSpotCapacity"
            case id = "Id"
        }
    }

    public struct InstanceGroupStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// The current state of the instance group.
        public let state: InstanceGroupState?
        /// The timeline of the instance group status over time.
        public let timeline: InstanceGroupTimeline?
        /// The status change reason details for the instance group.
        public let stateChangeReason: InstanceGroupStateChangeReason?

        public init(state: InstanceGroupState? = nil, timeline: InstanceGroupTimeline? = nil, stateChangeReason: InstanceGroupStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct CreateSecurityConfigurationOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp)
        ]
        /// The name of the security configuration.
        public let name: String
        /// The date and time the security configuration was created.
        public let creationDateTime: TimeStamp

        public init(name: String, creationDateTime: TimeStamp) {
            self.name = name
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDateTime = "CreationDateTime"
        }
    }

    public enum InstanceGroupType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public struct FailureDetails: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "LogFile", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
        public let reason: String?
        /// The path to the log file where the step failure root cause was originally recorded.
        public let logFile: String?
        /// The descriptive message including the error the EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
        public let message: String?

        public init(reason: String? = nil, logFile: String? = nil, message: String? = nil) {
            self.reason = reason
            self.logFile = logFile
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case logFile = "LogFile"
            case message = "Message"
        }
    }

    public struct ListClustersInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterStates", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CreatedBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedAfter", required: false, type: .timestamp)
        ]
        /// The cluster state filters to apply when listing clusters.
        public let clusterStates: [ClusterState]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The creation date and time end value filter for listing clusters.
        public let createdBefore: TimeStamp?
        /// The creation date and time beginning value filter for listing clusters.
        public let createdAfter: TimeStamp?

        public init(clusterStates: [ClusterState]? = nil, marker: String? = nil, createdBefore: TimeStamp? = nil, createdAfter: TimeStamp? = nil) {
            self.clusterStates = clusterStates
            self.marker = marker
            self.createdBefore = createdBefore
            self.createdAfter = createdAfter
        }

        private enum CodingKeys: String, CodingKey {
            case clusterStates = "ClusterStates"
            case marker = "Marker"
            case createdBefore = "CreatedBefore"
            case createdAfter = "CreatedAfter"
        }
    }

    public struct ClusterStateChangeReason: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The programmatic code for the state change reason.
        public let code: ClusterStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public let message: String?

        public init(code: ClusterStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct VolumeSpecification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: true, type: .string), 
            AWSShapeMember(label: "SizeInGB", required: true, type: .integer)
        ]
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public let iops: Int32?
        /// The volume type. Volume types supported are gp2, io1, standard.
        public let volumeType: String
        /// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        public let sizeInGB: Int32

        public init(iops: Int32? = nil, volumeType: String, sizeInGB: Int32) {
            self.iops = iops
            self.volumeType = volumeType
            self.sizeInGB = sizeInGB
        }

        private enum CodingKeys: String, CodingKey {
            case iops = "Iops"
            case volumeType = "VolumeType"
            case sizeInGB = "SizeInGB"
        }
    }

    public struct Application: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .map)
        ]
        /// The version of the application.
        public let version: String?
        /// The name of the application.
        public let name: String?
        /// Arguments for Amazon EMR to pass to the application.
        public let args: [String]?
        /// This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
        public let additionalInfo: [String: String]?

        public init(version: String? = nil, name: String? = nil, args: [String]? = nil, additionalInfo: [String: String]? = nil) {
            self.version = version
            self.name = name
            self.args = args
            self.additionalInfo = additionalInfo
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case name = "Name"
            case args = "Args"
            case additionalInfo = "AdditionalInfo"
        }
    }

    public struct DescribeJobFlowsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlows", required: false, type: .list)
        ]
        /// A list of job flows matching the parameters supplied.
        public let jobFlows: [JobFlowDetail]?

        public init(jobFlows: [JobFlowDetail]? = nil) {
            self.jobFlows = jobFlows
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlows = "JobFlows"
        }
    }

    public struct CloudWatchAlarmDefinition: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: false, type: .string)
        ]
        /// The value against which the specified statistic is compared.
        public let threshold: Double
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        public let metricName: String
        /// The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify 300.
        public let period: Int32
        /// The number of periods, expressed in seconds using Period, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public let evaluationPeriods: Int32?
        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        public let comparisonOperator: ComparisonOperator
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public let statistic: Statistic?
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public let unit: Unit?
        /// A CloudWatch metric dimension.
        public let dimensions: [MetricDimension]?
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public let namespace: String?

        public init(threshold: Double, metricName: String, period: Int32, evaluationPeriods: Int32? = nil, comparisonOperator: ComparisonOperator, statistic: Statistic? = nil, unit: Unit? = nil, dimensions: [MetricDimension]? = nil, namespace: String? = nil) {
            self.threshold = threshold
            self.metricName = metricName
            self.period = period
            self.evaluationPeriods = evaluationPeriods
            self.comparisonOperator = comparisonOperator
            self.statistic = statistic
            self.unit = unit
            self.dimensions = dimensions
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case threshold = "Threshold"
            case metricName = "MetricName"
            case period = "Period"
            case evaluationPeriods = "EvaluationPeriods"
            case comparisonOperator = "ComparisonOperator"
            case statistic = "Statistic"
            case unit = "Unit"
            case dimensions = "Dimensions"
            case namespace = "Namespace"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// A user-defined value, which is optional in a tag. For more information, see Tagging Amazon EMR Resources. 
        public let value: String?
        /// A user-defined key, which is the minimum required information for a valid tag. For more information, see Tagging Amazon EMR Resources. 
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeSecurityConfigurationOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp)
        ]
        /// The security configuration details in JSON format.
        public let securityConfiguration: String?
        /// The name of the security configuration.
        public let name: String?
        /// The date and time the security configuration was created
        public let creationDateTime: TimeStamp?

        public init(securityConfiguration: String? = nil, name: String? = nil, creationDateTime: TimeStamp? = nil) {
            self.securityConfiguration = securityConfiguration
            self.name = name
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case securityConfiguration = "SecurityConfiguration"
            case name = "Name"
            case creationDateTime = "CreationDateTime"
        }
    }

    public struct CancelStepsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelStepsInfoList", required: false, type: .list)
        ]
        /// A list of CancelStepsInfo, which shows the status of specified cancel requests for each StepID specified.
        public let cancelStepsInfoList: [CancelStepsInfo]?

        public init(cancelStepsInfoList: [CancelStepsInfo]? = nil) {
            self.cancelStepsInfoList = cancelStepsInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case cancelStepsInfoList = "CancelStepsInfoList"
        }
    }

    public struct InstanceFleetProvisioningSpecifications: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotSpecification", required: true, type: .structure)
        ]
        /// The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.
        public let spotSpecification: SpotProvisioningSpecification

        public init(spotSpecification: SpotProvisioningSpecification) {
            self.spotSpecification = spotSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case spotSpecification = "SpotSpecification"
        }
    }

    public struct PutAutoScalingPolicyInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingPolicy", required: true, type: .structure)
        ]
        /// Specifies the ID of the instance group to which the automatic scaling policy is applied.
        public let instanceGroupId: String
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String
        /// Specifies the definition of the automatic scaling policy.
        public let autoScalingPolicy: AutoScalingPolicy

        public init(instanceGroupId: String, clusterId: String, autoScalingPolicy: AutoScalingPolicy) {
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
            self.autoScalingPolicy = autoScalingPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case clusterId = "ClusterId"
            case autoScalingPolicy = "AutoScalingPolicy"
        }
    }

    public struct ClusterTimeline: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the cluster was ready to execute steps.
        public let readyDateTime: TimeStamp?
        /// The creation date and time of the cluster.
        public let creationDateTime: TimeStamp?
        /// The date and time when the cluster was terminated.
        public let endDateTime: TimeStamp?

        public init(readyDateTime: TimeStamp? = nil, creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case readyDateTime = "ReadyDateTime"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
        }
    }

    public struct AddJobFlowStepsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepIds", required: false, type: .list)
        ]
        /// The identifiers of the list of steps added to the job flow.
        public let stepIds: [String]?

        public init(stepIds: [String]? = nil) {
            self.stepIds = stepIds
        }

        private enum CodingKeys: String, CodingKey {
            case stepIds = "StepIds"
        }
    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsVolumes", required: false, type: .list), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "PublicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string)
        ]
        /// The list of EBS volumes that are attached to this instance.
        public let ebsVolumes: [EbsVolume]?
        /// The unique identifier of the instance fleet to which an EC2 instance belongs.
        public let instanceFleetId: String?
        /// The identifier of the instance group to which this instance belongs.
        public let instanceGroupId: String?
        /// The current status of the instance.
        public let status: InstanceStatus?
        /// The instance purchasing option. Valid values are ON_DEMAND or SPOT. 
        public let market: MarketType?
        /// The unique identifier for the instance in Amazon EMR.
        public let id: String?
        /// The public IP address of the instance.
        public let publicIpAddress: String?
        /// The public DNS name of the instance.
        public let publicDnsName: String?
        /// The private DNS name of the instance.
        public let privateDnsName: String?
        /// The EC2 instance type, for example m3.xlarge.
        public let instanceType: String?
        /// The unique identifier of the instance in Amazon EC2.
        public let ec2InstanceId: String?
        /// The private IP address of the instance.
        public let privateIpAddress: String?

        public init(ebsVolumes: [EbsVolume]? = nil, instanceFleetId: String? = nil, instanceGroupId: String? = nil, status: InstanceStatus? = nil, market: MarketType? = nil, id: String? = nil, publicIpAddress: String? = nil, publicDnsName: String? = nil, privateDnsName: String? = nil, instanceType: String? = nil, ec2InstanceId: String? = nil, privateIpAddress: String? = nil) {
            self.ebsVolumes = ebsVolumes
            self.instanceFleetId = instanceFleetId
            self.instanceGroupId = instanceGroupId
            self.status = status
            self.market = market
            self.id = id
            self.publicIpAddress = publicIpAddress
            self.publicDnsName = publicDnsName
            self.privateDnsName = privateDnsName
            self.instanceType = instanceType
            self.ec2InstanceId = ec2InstanceId
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case ebsVolumes = "EbsVolumes"
            case instanceFleetId = "InstanceFleetId"
            case instanceGroupId = "InstanceGroupId"
            case status = "Status"
            case market = "Market"
            case id = "Id"
            case publicIpAddress = "PublicIpAddress"
            case publicDnsName = "PublicDnsName"
            case privateDnsName = "PrivateDnsName"
            case instanceType = "InstanceType"
            case ec2InstanceId = "Ec2InstanceId"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct ScalingAction: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "SimpleScalingPolicyConfiguration", required: true, type: .structure)
        ]
        /// Not available for instance groups. Instance groups use the market type specified for the group.
        public let market: MarketType?
        /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
        public let simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration

        public init(market: MarketType? = nil, simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration) {
            self.market = market
            self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case market = "Market"
            case simpleScalingPolicyConfiguration = "SimpleScalingPolicyConfiguration"
        }
    }

    public struct Step: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Config", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
        public let actionOnFailure: ActionOnFailure?
        /// The current execution status details of the cluster step.
        public let status: StepStatus?
        /// The name of the cluster step.
        public let name: String?
        /// The Hadoop job configuration of the cluster step.
        public let config: HadoopStepConfig?
        /// The identifier of the cluster step.
        public let id: String?

        public init(actionOnFailure: ActionOnFailure? = nil, status: StepStatus? = nil, name: String? = nil, config: HadoopStepConfig? = nil, id: String? = nil) {
            self.actionOnFailure = actionOnFailure
            self.status = status
            self.name = name
            self.config = config
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case status = "Status"
            case name = "Name"
            case config = "Config"
            case id = "Id"
        }
    }

    public enum Unit: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case seconds = "SECONDS"
        case micro_seconds = "MICRO_SECONDS"
        case milli_seconds = "MILLI_SECONDS"
        case bytes = "BYTES"
        case kilo_bytes = "KILO_BYTES"
        case mega_bytes = "MEGA_BYTES"
        case giga_bytes = "GIGA_BYTES"
        case tera_bytes = "TERA_BYTES"
        case bits = "BITS"
        case kilo_bits = "KILO_BITS"
        case mega_bits = "MEGA_BITS"
        case giga_bits = "GIGA_BITS"
        case tera_bits = "TERA_BITS"
        case percent = "PERCENT"
        case count = "COUNT"
        case bytes_per_second = "BYTES_PER_SECOND"
        case kilo_bytes_per_second = "KILO_BYTES_PER_SECOND"
        case mega_bytes_per_second = "MEGA_BYTES_PER_SECOND"
        case giga_bytes_per_second = "GIGA_BYTES_PER_SECOND"
        case tera_bytes_per_second = "TERA_BYTES_PER_SECOND"
        case bits_per_second = "BITS_PER_SECOND"
        case kilo_bits_per_second = "KILO_BITS_PER_SECOND"
        case mega_bits_per_second = "MEGA_BITS_PER_SECOND"
        case giga_bits_per_second = "GIGA_BITS_PER_SECOND"
        case tera_bits_per_second = "TERA_BITS_PER_SECOND"
        case count_per_second = "COUNT_PER_SECOND"
        public var description: String { return self.rawValue }
    }

    public enum CancelStepsRequestStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct CreateSecurityConfigurationInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityConfiguration", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The security configuration details in JSON format.
        public let securityConfiguration: String
        /// The name of the security configuration.
        public let name: String

        public init(securityConfiguration: String, name: String) {
            self.securityConfiguration = securityConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case securityConfiguration = "SecurityConfiguration"
            case name = "Name"
        }
    }

    public struct ListInstanceGroupsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The identifier of the cluster for which to list the instance groups.
        public let clusterId: String

        public init(marker: String? = nil, clusterId: String) {
            self.marker = marker
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterId = "ClusterId"
        }
    }

    public struct InstanceGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "ShrinkPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "RequestedInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceGroupType", required: false, type: .enum), 
            AWSShapeMember(label: "EbsBlockDevices", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RunningInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// The bid price for each EC2 instance in the instance group when launching nodes as Spot Instances, expressed in USD.
        public let bidPrice: String?
        /// Policy for customizing shrink operations.
        public let shrinkPolicy: ShrinkPolicy?
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public let ebsOptimized: Bool?
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public let autoScalingPolicy: AutoScalingPolicyDescription?
        /// The EC2 instance type for all instances in the instance group.
        public let instanceType: String?
        /// The identifier of the instance group.
        public let id: String?
        /// The current status of the instance group.
        public let status: InstanceGroupStatus?
        /// The target number of instances for the instance group.
        public let requestedInstanceCount: Int32?
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public let instanceGroupType: InstanceGroupType?
        /// The EBS block devices that are mapped to this instance group.
        public let ebsBlockDevices: [EbsBlockDevice]?
        /// The name of the instance group.
        public let name: String?
        /// The number of instances currently running in this instance group.
        public let runningInstanceCount: Int32?
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public let market: MarketType?
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public let configurations: [Configuration]?

        public init(bidPrice: String? = nil, shrinkPolicy: ShrinkPolicy? = nil, ebsOptimized: Bool? = nil, autoScalingPolicy: AutoScalingPolicyDescription? = nil, instanceType: String? = nil, id: String? = nil, status: InstanceGroupStatus? = nil, requestedInstanceCount: Int32? = nil, instanceGroupType: InstanceGroupType? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, name: String? = nil, runningInstanceCount: Int32? = nil, market: MarketType? = nil, configurations: [Configuration]? = nil) {
            self.bidPrice = bidPrice
            self.shrinkPolicy = shrinkPolicy
            self.ebsOptimized = ebsOptimized
            self.autoScalingPolicy = autoScalingPolicy
            self.instanceType = instanceType
            self.id = id
            self.status = status
            self.requestedInstanceCount = requestedInstanceCount
            self.instanceGroupType = instanceGroupType
            self.ebsBlockDevices = ebsBlockDevices
            self.name = name
            self.runningInstanceCount = runningInstanceCount
            self.market = market
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case bidPrice = "BidPrice"
            case shrinkPolicy = "ShrinkPolicy"
            case ebsOptimized = "EbsOptimized"
            case autoScalingPolicy = "AutoScalingPolicy"
            case instanceType = "InstanceType"
            case id = "Id"
            case status = "Status"
            case requestedInstanceCount = "RequestedInstanceCount"
            case instanceGroupType = "InstanceGroupType"
            case ebsBlockDevices = "EbsBlockDevices"
            case name = "Name"
            case runningInstanceCount = "RunningInstanceCount"
            case market = "Market"
            case configurations = "Configurations"
        }
    }

    public enum InstanceCollectionType: String, CustomStringConvertible, Codable {
        case instance_fleet = "INSTANCE_FLEET"
        case instance_group = "INSTANCE_GROUP"
        public var description: String { return self.rawValue }
    }

    public struct AddTagsOutput: AWSShape {
        /// The key for the payload

    }

    public struct InstanceFleetConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceTypeConfigs", required: false, type: .list), 
            AWSShapeMember(label: "LaunchSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetType", required: true, type: .enum), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer)
        ]
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetOnDemandCapacity: Int32?
        /// The instance type configurations that define the EC2 instances in the instance fleet.
        public let instanceTypeConfigs: [InstanceTypeConfig]?
        /// The launch specification for the instance fleet.
        public let launchSpecifications: InstanceFleetProvisioningSpecifications?
        /// The friendly name of the instance fleet.
        public let name: String?
        /// The node type that the instance fleet hosts. Valid values are MASTER,CORE,and TASK.
        public let instanceFleetType: InstanceFleetType
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetSpotCapacity: Int32?

        public init(targetOnDemandCapacity: Int32? = nil, instanceTypeConfigs: [InstanceTypeConfig]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, name: String? = nil, instanceFleetType: InstanceFleetType, targetSpotCapacity: Int32? = nil) {
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.instanceTypeConfigs = instanceTypeConfigs
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.instanceFleetType = instanceFleetType
            self.targetSpotCapacity = targetSpotCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case instanceTypeConfigs = "InstanceTypeConfigs"
            case launchSpecifications = "LaunchSpecifications"
            case name = "Name"
            case instanceFleetType = "InstanceFleetType"
            case targetSpotCapacity = "TargetSpotCapacity"
        }
    }

    public struct ListInstanceFleetsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The unique identifier of the cluster.
        public let clusterId: String

        public init(marker: String? = nil, clusterId: String) {
            self.marker = marker
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterId = "ClusterId"
        }
    }

    public enum StepState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case cancel_pending = "CANCEL_PENDING"
        case running = "RUNNING"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public struct Command: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "ScriptPath", required: false, type: .string)
        ]
        /// The name of the command.
        public let name: String?
        /// Arguments for Amazon EMR to pass to the command for execution.
        public let args: [String]?
        /// The Amazon S3 location of the command script.
        public let scriptPath: String?

        public init(name: String? = nil, args: [String]? = nil, scriptPath: String? = nil) {
            self.name = name
            self.args = args
            self.scriptPath = scriptPath
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case args = "Args"
            case scriptPath = "ScriptPath"
        }
    }

    public struct AutoScalingPolicyStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// Indicates the status of the automatic scaling policy.
        public let state: AutoScalingPolicyState?
        /// The reason for a change in status.
        public let stateChangeReason: AutoScalingPolicyStateChangeReason?

        public init(state: AutoScalingPolicyState? = nil, stateChangeReason: AutoScalingPolicyStateChangeReason? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct ListInstanceFleetsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleets", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of instance fleets for the cluster and given filters.
        public let instanceFleets: [InstanceFleet]?

        public init(marker: String? = nil, instanceFleets: [InstanceFleet]? = nil) {
            self.marker = marker
            self.instanceFleets = instanceFleets
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case instanceFleets = "InstanceFleets"
        }
    }

    public struct DescribeStepOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Step", required: false, type: .structure)
        ]
        /// The step details for the requested step identifier.
        public let step: Step?

        public init(step: Step? = nil) {
            self.step = step
        }

        private enum CodingKeys: String, CodingKey {
            case step = "Step"
        }
    }

    public struct PlacementType: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. AvailabilityZones is used for instance fleets, while AvailabilityZone (singular) is used for uniform instance groups.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public let availabilityZones: [String]?
        /// The Amazon EC2 Availability Zone for the cluster. AvailabilityZone is used for uniform instance groups, while AvailabilityZones (plural) is used for instance fleets.
        public let availabilityZone: String?

        public init(availabilityZones: [String]? = nil, availabilityZone: String? = nil) {
            self.availabilityZones = availabilityZones
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct MetricDimension: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The dimension value.
        public let value: String?
        /// The dimension name.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeleteSecurityConfigurationInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the security configuration.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StepConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HadoopJarStep", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum)
        ]
        /// The JAR file used for the step.
        public let hadoopJarStep: HadoopJarStepConfig
        /// The name of the step.
        public let name: String
        /// The action to take if the step fails.
        public let actionOnFailure: ActionOnFailure?

        public init(hadoopJarStep: HadoopJarStepConfig, name: String, actionOnFailure: ActionOnFailure? = nil) {
            self.hadoopJarStep = hadoopJarStep
            self.name = name
            self.actionOnFailure = actionOnFailure
        }

        private enum CodingKeys: String, CodingKey {
            case hadoopJarStep = "HadoopJarStep"
            case name = "Name"
            case actionOnFailure = "ActionOnFailure"
        }
    }

    public enum ClusterState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case waiting = "WAITING"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case terminated_with_errors = "TERMINATED_WITH_ERRORS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeClusterOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// This output contains the details for the requested cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct ListInstancesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceGroupTypes", required: false, type: .list), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceStates", required: false, type: .list)
        ]
        /// The identifier of the instance group for which to list the instances.
        public let instanceGroupId: String?
        /// The unique identifier of the instance fleet.
        public let instanceFleetId: String?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The node type of the instance fleet. For example MASTER, CORE, or TASK.
        public let instanceFleetType: InstanceFleetType?
        /// The type of instance group for which to list the instances.
        public let instanceGroupTypes: [InstanceGroupType]?
        /// The identifier of the cluster for which to list the instances.
        public let clusterId: String
        /// A list of instance states that will filter the instances returned with this request.
        public let instanceStates: [InstanceState]?

        public init(instanceGroupId: String? = nil, instanceFleetId: String? = nil, marker: String? = nil, instanceFleetType: InstanceFleetType? = nil, instanceGroupTypes: [InstanceGroupType]? = nil, clusterId: String, instanceStates: [InstanceState]? = nil) {
            self.instanceGroupId = instanceGroupId
            self.instanceFleetId = instanceFleetId
            self.marker = marker
            self.instanceFleetType = instanceFleetType
            self.instanceGroupTypes = instanceGroupTypes
            self.clusterId = clusterId
            self.instanceStates = instanceStates
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case instanceFleetId = "InstanceFleetId"
            case marker = "Marker"
            case instanceFleetType = "InstanceFleetType"
            case instanceGroupTypes = "InstanceGroupTypes"
            case clusterId = "ClusterId"
            case instanceStates = "InstanceStates"
        }
    }

    public struct Ec2InstanceAttributes: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmrManagedSlaveSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedMasterSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "RequestedEc2AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalMasterSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ServiceAccessSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalSlaveSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "RequestedEc2SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "Ec2AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string)
        ]
        /// The identifier of the Amazon EC2 security group for the slave nodes.
        public let emrManagedSlaveSecurityGroup: String?
        /// The IAM role that was specified when the cluster was launched. The EC2 instances of the cluster assume this role.
        public let iamInstanceProfile: String?
        /// To launch the cluster in Amazon VPC, set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster is launched in the normal AWS cloud, outside of a VPC. Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus, you cannot specify the cc1.4xlarge instance type for nodes of a cluster launched in a VPC.
        public let ec2SubnetId: String?
        /// The identifier of the Amazon EC2 security group for the master node.
        public let emrManagedMasterSecurityGroup: String?
        /// Applies to clusters configured with the The list of availability zones to choose from. The service will choose the availability zone with the best mix of available capacity and lowest cost to launch the cluster. If you do not specify this value, the cluster is launched in any availability zone that the customer account has access to.
        public let requestedEc2AvailabilityZones: [String]?
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public let additionalMasterSecurityGroups: [String]?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public let serviceAccessSecurityGroup: String?
        /// A list of additional Amazon EC2 security group IDs for the slave nodes.
        public let additionalSlaveSecurityGroups: [String]?
        /// Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances. Amazon EMR chooses the EC2 subnet with the best performance and cost characteristics from among the list of RequestedEc2SubnetIds and launches all cluster instances within that subnet. If this value is not specified, and the account supports EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses Requested
        public let requestedEc2SubnetIds: [String]?
        /// The Availability Zone in which the cluster will run. 
        public let ec2AvailabilityZone: String?
        /// The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
        public let ec2KeyName: String?

        public init(emrManagedSlaveSecurityGroup: String? = nil, iamInstanceProfile: String? = nil, ec2SubnetId: String? = nil, emrManagedMasterSecurityGroup: String? = nil, requestedEc2AvailabilityZones: [String]? = nil, additionalMasterSecurityGroups: [String]? = nil, serviceAccessSecurityGroup: String? = nil, additionalSlaveSecurityGroups: [String]? = nil, requestedEc2SubnetIds: [String]? = nil, ec2AvailabilityZone: String? = nil, ec2KeyName: String? = nil) {
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.iamInstanceProfile = iamInstanceProfile
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.requestedEc2SubnetIds = requestedEc2SubnetIds
            self.ec2AvailabilityZone = ec2AvailabilityZone
            self.ec2KeyName = ec2KeyName
        }

        private enum CodingKeys: String, CodingKey {
            case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
            case iamInstanceProfile = "IamInstanceProfile"
            case ec2SubnetId = "Ec2SubnetId"
            case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
            case requestedEc2AvailabilityZones = "RequestedEc2AvailabilityZones"
            case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
            case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
            case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
            case requestedEc2SubnetIds = "RequestedEc2SubnetIds"
            case ec2AvailabilityZone = "Ec2AvailabilityZone"
            case ec2KeyName = "Ec2KeyName"
        }
    }

    public struct EbsVolume: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "Device", required: false, type: .string)
        ]
        /// The volume identifier of the EBS volume.
        public let volumeId: String?
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public let device: String?

        public init(volumeId: String? = nil, device: String? = nil) {
            self.volumeId = volumeId
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
            case device = "Device"
        }
    }

    public struct ListSecurityConfigurationsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SecurityConfigurations", required: false, type: .list)
        ]
        /// A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
        public let marker: String?
        /// The creation date and time, and name, of each security configuration.
        public let securityConfigurations: [SecurityConfigurationSummary]?

        public init(marker: String? = nil, securityConfigurations: [SecurityConfigurationSummary]? = nil) {
            self.marker = marker
            self.securityConfigurations = securityConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case securityConfigurations = "SecurityConfigurations"
        }
    }

    public struct StepTimeline: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the cluster step execution started.
        public let startDateTime: TimeStamp?
        /// The date and time when the cluster step was created.
        public let creationDateTime: TimeStamp?
        /// The date and time when the cluster step execution completed or failed.
        public let endDateTime: TimeStamp?

        public init(startDateTime: TimeStamp? = nil, creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil) {
            self.startDateTime = startDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case startDateTime = "StartDateTime"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
        }
    }

    public struct InstanceStateChangeReason: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The programmable code for the state change reason.
        public let code: InstanceStateChangeReasonCode?
        /// The status change reason description.
        public let message: String?

        public init(code: InstanceStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public enum JobFlowExecutionState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case waiting = "WAITING"
        case shutting_down = "SHUTTING_DOWN"
        case terminated = "TERMINATED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct AutoScalingPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: true, type: .list), 
            AWSShapeMember(label: "Constraints", required: true, type: .structure)
        ]
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public let rules: [ScalingRule]
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public let constraints: ScalingConstraints

        public init(rules: [ScalingRule], constraints: ScalingConstraints) {
            self.rules = rules
            self.constraints = constraints
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case constraints = "Constraints"
        }
    }

    public struct Configuration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "Properties", required: false, type: .map)
        ]
        /// The classification within a configuration.
        public let classification: String?
        /// A list of additional configurations to apply within a configuration object.
        public let configurations: [Configuration]?
        /// A set of properties specified within a configuration classification.
        public let properties: [String: String]?

        public init(classification: String? = nil, configurations: [Configuration]? = nil, properties: [String: String]? = nil) {
            self.classification = classification
            self.configurations = configurations
            self.properties = properties
        }

        private enum CodingKeys: String, CodingKey {
            case classification = "Classification"
            case configurations = "Configurations"
            case properties = "Properties"
        }
    }

    public struct CancelStepsInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StepId", required: false, type: .string)
        ]
        /// The reason for the failure if the CancelSteps request fails.
        public let reason: String?
        /// The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
        public let status: CancelStepsRequestStatus?
        /// The encrypted StepId of a step.
        public let stepId: String?

        public init(reason: String? = nil, status: CancelStepsRequestStatus? = nil, stepId: String? = nil) {
            self.reason = reason
            self.status = status
            self.stepId = stepId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case status = "Status"
            case stepId = "StepId"
        }
    }

    public struct RemoveTagsOutput: AWSShape {
        /// The key for the payload

    }

    public enum ScaleDownBehavior: String, CustomStringConvertible, Codable {
        case terminate_at_instance_hour = "TERMINATE_AT_INSTANCE_HOUR"
        case terminate_at_task_completion = "TERMINATE_AT_TASK_COMPLETION"
        public var description: String { return self.rawValue }
    }

    public struct AutoScalingPolicyStateChangeReason: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The code indicating the reason for the change in status.USER_REQUEST indicates that the scaling policy status was changed by a user. PROVISION_FAILURE indicates that the status change was because the policy failed to provision. CLEANUP_FAILURE indicates an error.
        public let code: AutoScalingPolicyStateChangeReasonCode?
        /// A friendly, more verbose message that accompanies an automatic scaling policy state change.
        public let message: String?

        public init(code: AutoScalingPolicyStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct InstanceFleetStateChangeReason: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// A code corresponding to the reason the state change occurred.
        public let code: InstanceFleetStateChangeReasonCode?
        /// An explanatory message.
        public let message: String?

        public init(code: InstanceFleetStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct ScalingRule: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Trigger", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The conditions that trigger an automatic scaling activity.
        public let action: ScalingAction
        /// The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
        public let name: String
        /// The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
        public let trigger: ScalingTrigger
        /// A friendly, more verbose description of the automatic scaling rule.
        public let description: String?

        public init(action: ScalingAction, name: String, trigger: ScalingTrigger, description: String? = nil) {
            self.action = action
            self.name = name
            self.trigger = trigger
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case name = "Name"
            case trigger = "Trigger"
            case description = "Description"
        }
    }

    public enum InstanceFleetState: String, CustomStringConvertible, Codable {
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case resizing = "RESIZING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceGroupStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internal_error = "INTERNAL_ERROR"
        case validation_error = "VALIDATION_ERROR"
        case instance_failure = "INSTANCE_FAILURE"
        case cluster_terminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct ListSecurityConfigurationsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The pagination token that indicates the set of results to retrieve.
        public let marker: String?

        public init(marker: String? = nil) {
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
        }
    }

    public enum MarketType: String, CustomStringConvertible, Codable {
        case on_demand = "ON_DEMAND"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public struct JobFlowDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "SupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "AmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean), 
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "JobFlowRole", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Instances", required: true, type: .structure), 
            AWSShapeMember(label: "ExecutionStatusDetail", required: true, type: .structure)
        ]
        /// A list of steps run by the job flow.
        public let steps: [StepDetail]?
        /// A list of strings set by third party software when the job flow is launched. If you are not using third party software to manage the job flow this value is empty.
        public let supportedProducts: [String]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// The version of the AMI used to initialize Amazon EC2 instances in the job flow. For a list of AMI versions currently supported by Amazon EMR, see AMI Versions Supported in EMR in the Amazon EMR Developer Guide. 
        public let amiVersion: String?
        /// Specifies whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to false, only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action.
        public let visibleToAllUsers: Bool?
        /// The job flow identifier.
        public let jobFlowId: String
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
        public let jobFlowRole: String?
        /// A list of the bootstrap actions run by the job flow.
        public let bootstrapActions: [BootstrapActionDetail]?
        /// The name of the job flow.
        public let name: String
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// The location in Amazon S3 where log files for the job are stored.
        public let logUri: String?
        /// Describes the Amazon EC2 instances of the job flow.
        public let instances: JobFlowInstancesDetail
        /// Describes the execution status of the job flow.
        public let executionStatusDetail: JobFlowExecutionStatusDetail

        public init(steps: [StepDetail]? = nil, supportedProducts: [String]? = nil, autoScalingRole: String? = nil, amiVersion: String? = nil, visibleToAllUsers: Bool? = nil, jobFlowId: String, serviceRole: String? = nil, jobFlowRole: String? = nil, bootstrapActions: [BootstrapActionDetail]? = nil, name: String, scaleDownBehavior: ScaleDownBehavior? = nil, logUri: String? = nil, instances: JobFlowInstancesDetail, executionStatusDetail: JobFlowExecutionStatusDetail) {
            self.steps = steps
            self.supportedProducts = supportedProducts
            self.autoScalingRole = autoScalingRole
            self.amiVersion = amiVersion
            self.visibleToAllUsers = visibleToAllUsers
            self.jobFlowId = jobFlowId
            self.serviceRole = serviceRole
            self.jobFlowRole = jobFlowRole
            self.bootstrapActions = bootstrapActions
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.logUri = logUri
            self.instances = instances
            self.executionStatusDetail = executionStatusDetail
        }

        private enum CodingKeys: String, CodingKey {
            case steps = "Steps"
            case supportedProducts = "SupportedProducts"
            case autoScalingRole = "AutoScalingRole"
            case amiVersion = "AmiVersion"
            case visibleToAllUsers = "VisibleToAllUsers"
            case jobFlowId = "JobFlowId"
            case serviceRole = "ServiceRole"
            case jobFlowRole = "JobFlowRole"
            case bootstrapActions = "BootstrapActions"
            case name = "Name"
            case scaleDownBehavior = "ScaleDownBehavior"
            case logUri = "LogUri"
            case instances = "Instances"
            case executionStatusDetail = "ExecutionStatusDetail"
        }
    }

    public struct InstanceGroupTimeline: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the instance group became ready to perform tasks.
        public let readyDateTime: TimeStamp?
        /// The creation date and time of the instance group.
        public let creationDateTime: TimeStamp?
        /// The date and time when the instance group terminated.
        public let endDateTime: TimeStamp?

        public init(readyDateTime: TimeStamp? = nil, creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case readyDateTime = "ReadyDateTime"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
        }
    }

    public struct ScalingTrigger: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchAlarmDefinition", required: true, type: .structure)
        ]
        /// The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
        public let cloudWatchAlarmDefinition: CloudWatchAlarmDefinition

        public init(cloudWatchAlarmDefinition: CloudWatchAlarmDefinition) {
            self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchAlarmDefinition = "CloudWatchAlarmDefinition"
        }
    }

    public enum ClusterStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internal_error = "INTERNAL_ERROR"
        case validation_error = "VALIDATION_ERROR"
        case instance_failure = "INSTANCE_FAILURE"
        case bootstrap_failure = "BOOTSTRAP_FAILURE"
        case user_request = "USER_REQUEST"
        case step_failure = "STEP_FAILURE"
        case all_steps_completed = "ALL_STEPS_COMPLETED"
        public var description: String { return self.rawValue }
    }

    public struct BootstrapActionDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BootstrapActionConfig", required: false, type: .structure)
        ]
        /// A description of the bootstrap action.
        public let bootstrapActionConfig: BootstrapActionConfig?

        public init(bootstrapActionConfig: BootstrapActionConfig? = nil) {
            self.bootstrapActionConfig = bootstrapActionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case bootstrapActionConfig = "BootstrapActionConfig"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greater_than_or_equal = "GREATER_THAN_OR_EQUAL"
        case greater_than = "GREATER_THAN"
        case less_than = "LESS_THAN"
        case less_than_or_equal = "LESS_THAN_OR_EQUAL"
        public var description: String { return self.rawValue }
    }

    public struct DescribeJobFlowsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowStates", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowIds", required: false, type: .list), 
            AWSShapeMember(label: "CreatedBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedAfter", required: false, type: .timestamp)
        ]
        /// Return only job flows whose state is contained in this list.
        public let jobFlowStates: [JobFlowExecutionState]?
        /// Return only job flows whose job flow ID is contained in this list.
        public let jobFlowIds: [String]?
        /// Return only job flows created before this date and time.
        public let createdBefore: TimeStamp?
        /// Return only job flows created after this date and time.
        public let createdAfter: TimeStamp?

        public init(jobFlowStates: [JobFlowExecutionState]? = nil, jobFlowIds: [String]? = nil, createdBefore: TimeStamp? = nil, createdAfter: TimeStamp? = nil) {
            self.jobFlowStates = jobFlowStates
            self.jobFlowIds = jobFlowIds
            self.createdBefore = createdBefore
            self.createdAfter = createdAfter
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowStates = "JobFlowStates"
            case jobFlowIds = "JobFlowIds"
            case createdBefore = "CreatedBefore"
            case createdAfter = "CreatedAfter"
        }
    }

    public enum InstanceRoleType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public struct EbsBlockDeviceConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "VolumesPerInstance", required: false, type: .integer)
        ]
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public let volumeSpecification: VolumeSpecification
        /// Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group
        public let volumesPerInstance: Int32?

        public init(volumeSpecification: VolumeSpecification, volumesPerInstance: Int32? = nil) {
            self.volumeSpecification = volumeSpecification
            self.volumesPerInstance = volumesPerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSpecification = "VolumeSpecification"
            case volumesPerInstance = "VolumesPerInstance"
        }
    }

    public struct SetTerminationProtectionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list), 
            AWSShapeMember(label: "TerminationProtected", required: true, type: .boolean)
        ]
        ///  A list of strings that uniquely identify the clusters to protect. This identifier is returned by RunJobFlow and can also be obtained from DescribeJobFlows . 
        public let jobFlowIds: [String]
        /// A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
        public let terminationProtected: Bool

        public init(jobFlowIds: [String], terminationProtected: Bool) {
            self.jobFlowIds = jobFlowIds
            self.terminationProtected = terminationProtected
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
            case terminationProtected = "TerminationProtected"
        }
    }

    public struct RemoveTagsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon EMR resource identifier from which tags will be removed. This value must be a cluster identifier.
        public let resourceId: String
        /// A list of tag keys to remove from a resource.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagKeys = "TagKeys"
        }
    }

    public struct InstanceStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// The current state of the instance.
        public let state: InstanceState?
        /// The timeline of the instance status over time.
        public let timeline: InstanceTimeline?
        /// The details of the status change reason for the instance.
        public let stateChangeReason: InstanceStateChangeReason?

        public init(state: InstanceState? = nil, timeline: InstanceTimeline? = nil, stateChangeReason: InstanceStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct StepSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Config", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
        public let actionOnFailure: ActionOnFailure?
        /// The current execution status details of the cluster step.
        public let status: StepStatus?
        /// The name of the cluster step.
        public let name: String?
        /// The Hadoop job configuration of the cluster step.
        public let config: HadoopStepConfig?
        /// The identifier of the cluster step.
        public let id: String?

        public init(actionOnFailure: ActionOnFailure? = nil, status: StepStatus? = nil, name: String? = nil, config: HadoopStepConfig? = nil, id: String? = nil) {
            self.actionOnFailure = actionOnFailure
            self.status = status
            self.name = name
            self.config = config
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case status = "Status"
            case name = "Name"
            case config = "Config"
            case id = "Id"
        }
    }

    public struct BootstrapActionConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ScriptBootstrapAction", required: true, type: .structure)
        ]
        /// The name of the bootstrap action.
        public let name: String
        /// The script run by the bootstrap action.
        public let scriptBootstrapAction: ScriptBootstrapActionConfig

        public init(name: String, scriptBootstrapAction: ScriptBootstrapActionConfig) {
            self.name = name
            self.scriptBootstrapAction = scriptBootstrapAction
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case scriptBootstrapAction = "ScriptBootstrapAction"
        }
    }

    public struct AddInstanceGroupsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupIds", required: false, type: .list)
        ]
        /// The job flow ID in which the instance groups are added.
        public let jobFlowId: String?
        /// Instance group IDs of the newly created instance groups.
        public let instanceGroupIds: [String]?

        public init(jobFlowId: String? = nil, instanceGroupIds: [String]? = nil) {
            self.jobFlowId = jobFlowId
            self.instanceGroupIds = instanceGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
            case instanceGroupIds = "InstanceGroupIds"
        }
    }

    public enum StepStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct ListInstancesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Instances", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of instances for the cluster and given filters.
        public let instances: [Instance]?

        public init(marker: String? = nil, instances: [Instance]? = nil) {
            self.marker = marker
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case instances = "Instances"
        }
    }

    public struct InstanceFleetModifyConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFleetId", required: true, type: .string), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer)
        ]
        /// The target capacity of On-Demand units for the instance fleet. For more information see InstanceFleetConfig$TargetOnDemandCapacity.
        public let targetOnDemandCapacity: Int32?
        /// A unique identifier for the instance fleet.
        public let instanceFleetId: String
        /// The target capacity of Spot units for the instance fleet. For more information, see InstanceFleetConfig$TargetSpotCapacity.
        public let targetSpotCapacity: Int32?

        public init(targetOnDemandCapacity: Int32? = nil, instanceFleetId: String, targetSpotCapacity: Int32? = nil) {
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.instanceFleetId = instanceFleetId
            self.targetSpotCapacity = targetSpotCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case instanceFleetId = "InstanceFleetId"
            case targetSpotCapacity = "TargetSpotCapacity"
        }
    }

    public struct ListInstanceGroupsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of instance groups for the cluster and given filters.
        public let instanceGroups: [InstanceGroup]?

        public init(marker: String? = nil, instanceGroups: [InstanceGroup]? = nil) {
            self.marker = marker
            self.instanceGroups = instanceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case instanceGroups = "InstanceGroups"
        }
    }

    public struct SecurityConfigurationSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp)
        ]
        /// The name of the security configuration.
        public let name: String?
        /// The date and time the security configuration was created.
        public let creationDateTime: TimeStamp?

        public init(name: String? = nil, creationDateTime: TimeStamp? = nil) {
            self.name = name
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDateTime = "CreationDateTime"
        }
    }

    public struct AddInstanceFleetOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string)
        ]
        /// The unique identifier of the cluster.
        public let clusterId: String?
        /// The unique identifier of the instance fleet.
        public let instanceFleetId: String?

        public init(clusterId: String? = nil, instanceFleetId: String? = nil) {
            self.clusterId = clusterId
            self.instanceFleetId = instanceFleetId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleetId = "InstanceFleetId"
        }
    }

    public struct ListBootstrapActionsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The bootstrap actions associated with the cluster.
        public let bootstrapActions: [Command]?

        public init(marker: String? = nil, bootstrapActions: [Command]? = nil) {
            self.marker = marker
            self.bootstrapActions = bootstrapActions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case bootstrapActions = "BootstrapActions"
        }
    }

    public struct CancelStepsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepIds", required: false, type: .list), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string)
        ]
        /// The list of StepIDs to cancel. Use ListSteps to get steps and their states for the specified cluster.
        public let stepIds: [String]?
        /// The ClusterID for which specified steps will be canceled. Use RunJobFlow and ListClusters to get ClusterIDs. 
        public let clusterId: String?

        public init(stepIds: [String]? = nil, clusterId: String? = nil) {
            self.stepIds = stepIds
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case stepIds = "StepIds"
            case clusterId = "ClusterId"
        }
    }

    public struct ModifyInstanceFleetInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceFleet", required: true, type: .structure)
        ]
        /// The unique identifier of the cluster.
        public let clusterId: String
        /// The unique identifier of the instance fleet.
        public let instanceFleet: InstanceFleetModifyConfig

        public init(clusterId: String, instanceFleet: InstanceFleetModifyConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleet = "InstanceFleet"
        }
    }

    public struct JobFlowInstancesConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleets", required: false, type: .list), 
            AWSShapeMember(label: "HadoopVersion", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedMasterSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "KeepJobFlowAliveWhenNoSteps", required: false, type: .boolean), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "MasterInstanceType", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedSlaveSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalMasterSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "SlaveInstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "ServiceAccessSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalSlaveSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean)
        ]
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  Describes the EC2 instances and instance configurations for clusters that use the instance fleet configuration.
        public let instanceFleets: [InstanceFleetConfig]?
        /// The Hadoop version for the cluster. Valid inputs are "0.18" (deprecated), "0.20" (deprecated), "0.20.205" (deprecated), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
        public let hadoopVersion: String?
        /// Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster launches in the normal Amazon Web Services cloud, outside of an Amazon VPC, if the account launching the cluster supports EC2 Classic networks in the region where the cluster launches. Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus you cannot specify the cc1.4xlarge instance type for clusters launched in an Amazon VPC.
        public let ec2SubnetId: String?
        /// The identifier of the Amazon EC2 security group for the master node.
        public let emrManagedMasterSecurityGroup: String?
        /// Specifies whether the cluster should remain available after completing all steps.
        public let keepJobFlowAliveWhenNoSteps: Bool?
        /// The name of the EC2 key pair that can be used to ssh to the master node as the user called "hadoop."
        public let ec2KeyName: String?
        /// Configuration for the instance groups in a cluster.
        public let instanceGroups: [InstanceGroupConfig]?
        /// The EC2 instance type of the master node.
        public let masterInstanceType: String?
        /// The identifier of the Amazon EC2 security group for the slave nodes.
        public let emrManagedSlaveSecurityGroup: String?
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public let additionalMasterSecurityGroups: [String]?
        /// The Availability Zone in which the cluster runs.
        public let placement: PlacementType?
        /// The EC2 instance type of the slave nodes.
        public let slaveInstanceType: String?
        /// Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public let ec2SubnetIds: [String]?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public let serviceAccessSecurityGroup: String?
        /// A list of additional Amazon EC2 security group IDs for the slave nodes.
        public let additionalSlaveSecurityGroups: [String]?
        /// The number of EC2 instances in the cluster.
        public let instanceCount: Int32?
        /// Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
        public let terminationProtected: Bool?

        public init(instanceFleets: [InstanceFleetConfig]? = nil, hadoopVersion: String? = nil, ec2SubnetId: String? = nil, emrManagedMasterSecurityGroup: String? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, ec2KeyName: String? = nil, instanceGroups: [InstanceGroupConfig]? = nil, masterInstanceType: String? = nil, emrManagedSlaveSecurityGroup: String? = nil, additionalMasterSecurityGroups: [String]? = nil, placement: PlacementType? = nil, slaveInstanceType: String? = nil, ec2SubnetIds: [String]? = nil, serviceAccessSecurityGroup: String? = nil, additionalSlaveSecurityGroups: [String]? = nil, instanceCount: Int32? = nil, terminationProtected: Bool? = nil) {
            self.instanceFleets = instanceFleets
            self.hadoopVersion = hadoopVersion
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.ec2KeyName = ec2KeyName
            self.instanceGroups = instanceGroups
            self.masterInstanceType = masterInstanceType
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.ec2SubnetIds = ec2SubnetIds
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.instanceCount = instanceCount
            self.terminationProtected = terminationProtected
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleets = "InstanceFleets"
            case hadoopVersion = "HadoopVersion"
            case ec2SubnetId = "Ec2SubnetId"
            case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
            case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
            case ec2KeyName = "Ec2KeyName"
            case instanceGroups = "InstanceGroups"
            case masterInstanceType = "MasterInstanceType"
            case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
            case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
            case placement = "Placement"
            case slaveInstanceType = "SlaveInstanceType"
            case ec2SubnetIds = "Ec2SubnetIds"
            case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
            case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
            case instanceCount = "InstanceCount"
            case terminationProtected = "TerminationProtected"
        }
    }

    public struct InstanceTypeConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "BidPriceAsPercentageOfOnDemandPrice", required: false, type: .double), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "EbsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. This value is 1 for a master instance fleet, and must be greater than 0 for core and task instance fleets. 
        public let weightedCapacity: Int32?
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%. 
        public let bidPrice: String?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number between 0 and 1000 (for example, 20 specifies 20%). If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public let bidPriceAsPercentageOfOnDemandPrice: Double?
        /// An EC2 instance type, such as m3.xlarge. 
        public let instanceType: String
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType. 
        public let ebsConfiguration: EbsConfiguration?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
        public let configurations: [Configuration]?

        public init(weightedCapacity: Int32? = nil, bidPrice: String? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, instanceType: String, ebsConfiguration: EbsConfiguration? = nil, configurations: [Configuration]? = nil) {
            self.weightedCapacity = weightedCapacity
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.instanceType = instanceType
            self.ebsConfiguration = ebsConfiguration
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case weightedCapacity = "WeightedCapacity"
            case bidPrice = "BidPrice"
            case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
            case instanceType = "InstanceType"
            case ebsConfiguration = "EbsConfiguration"
            case configurations = "Configurations"
        }
    }

    public enum InstanceGroupState: String, CustomStringConvertible, Codable {
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case resizing = "RESIZING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case arrested = "ARRESTED"
        case shutting_down = "SHUTTING_DOWN"
        case ended = "ENDED"
        public var description: String { return self.rawValue }
    }

    public struct TerminateJobFlowsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list)
        ]
        /// A list of job flows to be shutdown.
        public let jobFlowIds: [String]

        public init(jobFlowIds: [String]) {
            self.jobFlowIds = jobFlowIds
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
        }
    }

    public struct HadoopJarStepConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MainClass", required: false, type: .string), 
            AWSShapeMember(label: "Jar", required: true, type: .string), 
            AWSShapeMember(label: "Properties", required: false, type: .list), 
            AWSShapeMember(label: "Args", required: false, type: .list)
        ]
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        public let mainClass: String?
        /// A path to a JAR file run during the step.
        public let jar: String
        /// A list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public let properties: [KeyValue]?
        /// A list of command line arguments passed to the JAR file's main function when executed.
        public let args: [String]?

        public init(mainClass: String? = nil, jar: String, properties: [KeyValue]? = nil, args: [String]? = nil) {
            self.mainClass = mainClass
            self.jar = jar
            self.properties = properties
            self.args = args
        }

        private enum CodingKeys: String, CodingKey {
            case mainClass = "MainClass"
            case jar = "Jar"
            case properties = "Properties"
            case args = "Args"
        }
    }

    public struct ShrinkPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceResizePolicy", required: false, type: .structure), 
            AWSShapeMember(label: "DecommissionTimeout", required: false, type: .integer)
        ]
        /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
        public let instanceResizePolicy: InstanceResizePolicy?
        /// The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
        public let decommissionTimeout: Int32?

        public init(instanceResizePolicy: InstanceResizePolicy? = nil, decommissionTimeout: Int32? = nil) {
            self.instanceResizePolicy = instanceResizePolicy
            self.decommissionTimeout = decommissionTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case instanceResizePolicy = "InstanceResizePolicy"
            case decommissionTimeout = "DecommissionTimeout"
        }
    }

    public struct ListBootstrapActionsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The cluster identifier for the bootstrap actions to list.
        public let clusterId: String

        public init(marker: String? = nil, clusterId: String) {
            self.marker = marker
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusterId = "ClusterId"
        }
    }

    public enum InstanceStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internal_error = "INTERNAL_ERROR"
        case validation_error = "VALIDATION_ERROR"
        case instance_failure = "INSTANCE_FAILURE"
        case bootstrap_failure = "BOOTSTRAP_FAILURE"
        case cluster_terminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct InstanceFleetTimeline: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The time and date the instance fleet was ready to run jobs.
        public let readyDateTime: TimeStamp?
        /// The time and date the instance fleet was created.
        public let creationDateTime: TimeStamp?
        /// The time and date the instance fleet terminated.
        public let endDateTime: TimeStamp?

        public init(readyDateTime: TimeStamp? = nil, creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case readyDateTime = "ReadyDateTime"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
        }
    }

    public struct ScalingConstraints: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: true, type: .integer)
        ]
        /// The upper boundary of EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
        public let maxCapacity: Int32
        /// The lower boundary of EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
        public let minCapacity: Int32

        public init(maxCapacity: Int32, minCapacity: Int32) {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
        }
    }

    public struct AutoScalingPolicyDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Rules", required: false, type: .list), 
            AWSShapeMember(label: "Constraints", required: false, type: .structure)
        ]
        /// The status of an automatic scaling policy. 
        public let status: AutoScalingPolicyStatus?
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public let rules: [ScalingRule]?
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public let constraints: ScalingConstraints?

        public init(status: AutoScalingPolicyStatus? = nil, rules: [ScalingRule]? = nil, constraints: ScalingConstraints? = nil) {
            self.status = status
            self.rules = rules
            self.constraints = constraints
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case rules = "Rules"
            case constraints = "Constraints"
        }
    }

    public struct SupportedProductConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Args", required: false, type: .list)
        ]
        /// The name of the product configuration.
        public let name: String?
        /// The list of user-supplied arguments.
        public let args: [String]?

        public init(name: String? = nil, args: [String]? = nil) {
            self.name = name
            self.args = args
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case args = "Args"
        }
    }

    public struct InstanceTypeSpecification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "EbsBlockDevices", required: false, type: .list), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "BidPriceAsPercentageOfOnDemandPrice", required: false, type: .double), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
        public let weightedCapacity: Int32?
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD.
        public let bidPrice: String?
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType.
        public let ebsBlockDevices: [EbsBlockDevice]?
        /// Evaluates to TRUE when the specified InstanceType is EBS-optimized.
        public let ebsOptimized: Bool?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%).
        public let bidPriceAsPercentageOfOnDemandPrice: Double?
        /// The EC2 instance type, for example m3.xlarge.
        public let instanceType: String?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
        public let configurations: [Configuration]?

        public init(weightedCapacity: Int32? = nil, bidPrice: String? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, ebsOptimized: Bool? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, instanceType: String? = nil, configurations: [Configuration]? = nil) {
            self.weightedCapacity = weightedCapacity
            self.bidPrice = bidPrice
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.instanceType = instanceType
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case weightedCapacity = "WeightedCapacity"
            case bidPrice = "BidPrice"
            case ebsBlockDevices = "EbsBlockDevices"
            case ebsOptimized = "EbsOptimized"
            case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
            case instanceType = "InstanceType"
            case configurations = "Configurations"
        }
    }

    public struct StepExecutionStatusDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum)
        ]
        /// The start date and time of the step.
        public let startDateTime: TimeStamp?
        /// A description of the step's current state.
        public let lastStateChangeReason: String?
        /// The creation date and time of the step.
        public let creationDateTime: TimeStamp
        /// The completion date and time of the step.
        public let endDateTime: TimeStamp?
        /// The state of the step.
        public let state: StepExecutionState

        public init(startDateTime: TimeStamp? = nil, lastStateChangeReason: String? = nil, creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, state: StepExecutionState) {
            self.startDateTime = startDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case startDateTime = "StartDateTime"
            case lastStateChangeReason = "LastStateChangeReason"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case state = "State"
        }
    }

    public enum Statistic: String, CustomStringConvertible, Codable {
        case sample_count = "SAMPLE_COUNT"
        case average = "AVERAGE"
        case sum = "SUM"
        case minimum = "MINIMUM"
        case maximum = "MAXIMUM"
        public var description: String { return self.rawValue }
    }

    public struct RunJobFlowInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "ReleaseLabel", required: false, type: .string), 
            AWSShapeMember(label: "SupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "AmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean), 
            AWSShapeMember(label: "Applications", required: false, type: .list), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "NewSupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowRole", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Instances", required: true, type: .structure), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// A list of steps to run.
        public let steps: [StepConfig]?
        ///  Amazon EMR releases 4.x or later.  The release label for the Amazon EMR release. For Amazon EMR 3.x and 2.x AMIs, use amiVersion instead instead of ReleaseLabel.
        public let releaseLabel: String?
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and greater, use Applications.  A list of strings that indicates third-party software to use. For more information, see Use Third Party Applications with Amazon EMR. Currently supported values are:   "mapr-m3" - launch the job flow using MapR M3 Edition.   "mapr-m5" - launch the job flow using MapR M5 Edition.  
        public let supportedProducts: [String]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// The name of a security configuration to apply to the cluster.
        public let securityConfiguration: String?
        /// A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
        public let tags: [Tag]?
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and greater, use ReleaseLabel.  The version of the Amazon Machine Image (AMI) to use when launching Amazon EC2 instances in the job flow. The following values are valid:   The version number of the AMI to use, for example, "2.0."   If the AMI supports multiple versions of Hadoop (for example, AMI 1.0 supports both Hadoop 0.18 and 0.20) you can use the JobFlowInstancesConfig HadoopVersion parameter to modify the version of Hadoop from the defaults shown above. For details about the AMI versions currently supported by Amazon Elastic MapReduce, see AMI Versions Supported in Elastic MapReduce in the Amazon Elastic MapReduce Developer Guide.   Previously, the EMR AMI version API parameter options allowed you to use latest for the latest AMI version rather than specify a numerical value. Some regions no longer support this deprecated option as they only have a newer release label version of EMR, which requires you to specify an EMR release label release (EMR 4.x or later). 
        public let amiVersion: String?
        /// Whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to false, only the IAM user that created the cluster can view and manage it.
        public let visibleToAllUsers: Bool?
        ///  Amazon EMR releases 4.x or later.  A list of applications for the cluster. Valid values are: "Hadoop", "Hive", "Mahout", "Pig", and "Spark." They are case insensitive.
        public let applications: [Application]?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and greater, use Applications.  A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the Amazon EMR Developer Guide. Supported values are:   "mapr-m3" - launch the cluster using MapR M3 Edition.   "mapr-m5" - launch the cluster using MapR M5 Edition.   "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.   "mapr-m7" - launch the cluster using MapR M7 Edition.   "hunk" - launch the cluster with the Hunk Big Data Analtics Platform.   "hue"- launch the cluster with Hue installed.   "spark" - launch the cluster with Apache Spark installed.   "ganglia" - launch the cluster with the Ganglia Monitoring System installed.  
        public let newSupportedProducts: [SupportedProductConfig]?
        /// Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
        public let jobFlowRole: String?
        /// A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
        public let bootstrapActions: [BootstrapActionConfig]?
        /// The name of the job flow.
        public let name: String
        /// Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// A JSON string for selecting additional features.
        public let additionalInfo: String?
        /// The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
        public let logUri: String?
        /// A specification of the number and type of Amazon EC2 instances.
        public let instances: JobFlowInstancesConfig
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for the EMR cluster you are creating.
        public let configurations: [Configuration]?

        public init(steps: [StepConfig]? = nil, releaseLabel: String? = nil, supportedProducts: [String]? = nil, autoScalingRole: String? = nil, securityConfiguration: String? = nil, tags: [Tag]? = nil, amiVersion: String? = nil, visibleToAllUsers: Bool? = nil, applications: [Application]? = nil, serviceRole: String? = nil, newSupportedProducts: [SupportedProductConfig]? = nil, jobFlowRole: String? = nil, bootstrapActions: [BootstrapActionConfig]? = nil, name: String, scaleDownBehavior: ScaleDownBehavior? = nil, additionalInfo: String? = nil, logUri: String? = nil, instances: JobFlowInstancesConfig, configurations: [Configuration]? = nil) {
            self.steps = steps
            self.releaseLabel = releaseLabel
            self.supportedProducts = supportedProducts
            self.autoScalingRole = autoScalingRole
            self.securityConfiguration = securityConfiguration
            self.tags = tags
            self.amiVersion = amiVersion
            self.visibleToAllUsers = visibleToAllUsers
            self.applications = applications
            self.serviceRole = serviceRole
            self.newSupportedProducts = newSupportedProducts
            self.jobFlowRole = jobFlowRole
            self.bootstrapActions = bootstrapActions
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.additionalInfo = additionalInfo
            self.logUri = logUri
            self.instances = instances
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case steps = "Steps"
            case releaseLabel = "ReleaseLabel"
            case supportedProducts = "SupportedProducts"
            case autoScalingRole = "AutoScalingRole"
            case securityConfiguration = "SecurityConfiguration"
            case tags = "Tags"
            case amiVersion = "AmiVersion"
            case visibleToAllUsers = "VisibleToAllUsers"
            case applications = "Applications"
            case serviceRole = "ServiceRole"
            case newSupportedProducts = "NewSupportedProducts"
            case jobFlowRole = "JobFlowRole"
            case bootstrapActions = "BootstrapActions"
            case name = "Name"
            case scaleDownBehavior = "ScaleDownBehavior"
            case additionalInfo = "AdditionalInfo"
            case logUri = "LogUri"
            case instances = "Instances"
            case configurations = "Configurations"
        }
    }

    public enum ActionOnFailure: String, CustomStringConvertible, Codable {
        case terminate_job_flow = "TERMINATE_JOB_FLOW"
        case terminate_cluster = "TERMINATE_CLUSTER"
        case cancel_and_wait = "CANCEL_AND_WAIT"
        case `continue` = "CONTINUE"
        public var description: String { return self.rawValue }
    }

    public struct RemoveAutoScalingPolicyOutput: AWSShape {
        /// The key for the payload

    }

    public struct AddJobFlowStepsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Steps", required: true, type: .list), 
            AWSShapeMember(label: "JobFlowId", required: true, type: .string)
        ]
        ///  A list of StepConfig to be executed by the job flow. 
        public let steps: [StepConfig]
        /// A string that uniquely identifies the job flow. This identifier is returned by RunJobFlow and can also be obtained from ListClusters. 
        public let jobFlowId: String

        public init(steps: [StepConfig], jobFlowId: String) {
            self.steps = steps
            self.jobFlowId = jobFlowId
        }

        private enum CodingKeys: String, CodingKey {
            case steps = "Steps"
            case jobFlowId = "JobFlowId"
        }
    }

    public enum AutoScalingPolicyState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case attaching = "ATTACHING"
        case attached = "ATTACHED"
        case detaching = "DETACHING"
        case detached = "DETACHED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Cluster: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReleaseLabel", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "Applications", required: false, type: .list), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "Ec2InstanceAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceCollectionType", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RunningAmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "RequestedAmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "MasterPublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "AutoTerminate", required: false, type: .boolean)
        ]
        /// The release label for the Amazon EMR release. For Amazon EMR 3.x and 2.x AMIs, use amiVersion instead instead of ReleaseLabel.
        public let releaseLabel: String?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// The name of the security configuration applied to the cluster.
        public let securityConfiguration: String?
        /// A list of tags associated with a cluster.
        public let tags: [Tag]?
        /// Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and manage the cluster if they have the proper policy permissions set. If this value is false, only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action.
        public let visibleToAllUsers: Bool?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int32?
        /// The applications installed on this cluster.
        public let applications: [Application]?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public let ec2InstanceAttributes: Ec2InstanceAttributes?
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public let instanceCollectionType: InstanceCollectionType?
        /// The unique identifier for the cluster.
        public let id: String?
        /// The current status details about the cluster.
        public let status: ClusterStatus?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// The name of the cluster.
        public let name: String?
        /// The AMI version running on this cluster.
        public let runningAmiVersion: String?
        /// The AMI version requested for this cluster.
        public let requestedAmiVersion: String?
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public let logUri: String?
        /// The public DNS name of the master EC2 instance.
        public let masterPublicDnsName: String?
        /// Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public let terminationProtected: Bool?
        ///  Amazon EMR releases 4.x or later.  The list of Configurations supplied to the EMR cluster.
        public let configurations: [Configuration]?
        /// Specifies whether the cluster should terminate after completing all steps.
        public let autoTerminate: Bool?

        public init(releaseLabel: String? = nil, autoScalingRole: String? = nil, securityConfiguration: String? = nil, tags: [Tag]? = nil, visibleToAllUsers: Bool? = nil, normalizedInstanceHours: Int32? = nil, applications: [Application]? = nil, serviceRole: String? = nil, ec2InstanceAttributes: Ec2InstanceAttributes? = nil, instanceCollectionType: InstanceCollectionType? = nil, id: String? = nil, status: ClusterStatus? = nil, scaleDownBehavior: ScaleDownBehavior? = nil, name: String? = nil, runningAmiVersion: String? = nil, requestedAmiVersion: String? = nil, logUri: String? = nil, masterPublicDnsName: String? = nil, terminationProtected: Bool? = nil, configurations: [Configuration]? = nil, autoTerminate: Bool? = nil) {
            self.releaseLabel = releaseLabel
            self.autoScalingRole = autoScalingRole
            self.securityConfiguration = securityConfiguration
            self.tags = tags
            self.visibleToAllUsers = visibleToAllUsers
            self.normalizedInstanceHours = normalizedInstanceHours
            self.applications = applications
            self.serviceRole = serviceRole
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.instanceCollectionType = instanceCollectionType
            self.id = id
            self.status = status
            self.scaleDownBehavior = scaleDownBehavior
            self.name = name
            self.runningAmiVersion = runningAmiVersion
            self.requestedAmiVersion = requestedAmiVersion
            self.logUri = logUri
            self.masterPublicDnsName = masterPublicDnsName
            self.terminationProtected = terminationProtected
            self.configurations = configurations
            self.autoTerminate = autoTerminate
        }

        private enum CodingKeys: String, CodingKey {
            case releaseLabel = "ReleaseLabel"
            case autoScalingRole = "AutoScalingRole"
            case securityConfiguration = "SecurityConfiguration"
            case tags = "Tags"
            case visibleToAllUsers = "VisibleToAllUsers"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case applications = "Applications"
            case serviceRole = "ServiceRole"
            case ec2InstanceAttributes = "Ec2InstanceAttributes"
            case instanceCollectionType = "InstanceCollectionType"
            case id = "Id"
            case status = "Status"
            case scaleDownBehavior = "ScaleDownBehavior"
            case name = "Name"
            case runningAmiVersion = "RunningAmiVersion"
            case requestedAmiVersion = "RequestedAmiVersion"
            case logUri = "LogUri"
            case masterPublicDnsName = "MasterPublicDnsName"
            case terminationProtected = "TerminationProtected"
            case configurations = "Configurations"
            case autoTerminate = "AutoTerminate"
        }
    }

    public struct StepDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionStatusDetail", required: true, type: .structure), 
            AWSShapeMember(label: "StepConfig", required: true, type: .structure)
        ]
        /// The description of the step status.
        public let executionStatusDetail: StepExecutionStatusDetail
        /// The step configuration.
        public let stepConfig: StepConfig

        public init(executionStatusDetail: StepExecutionStatusDetail, stepConfig: StepConfig) {
            self.executionStatusDetail = executionStatusDetail
            self.stepConfig = stepConfig
        }

        private enum CodingKeys: String, CodingKey {
            case executionStatusDetail = "ExecutionStatusDetail"
            case stepConfig = "StepConfig"
        }
    }

    public struct KeyValue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value part of the identified key.
        public let value: String?
        /// The unique identifier of a key value pair.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeClusterInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// The identifier of the cluster to describe.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct DescribeStepInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "StepId", required: true, type: .string)
        ]
        /// The identifier of the cluster with steps to describe.
        public let clusterId: String
        /// The identifier of the step to describe.
        public let stepId: String

        public init(clusterId: String, stepId: String) {
            self.clusterId = clusterId
            self.stepId = stepId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case stepId = "StepId"
        }
    }

    public enum StepExecutionState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case running = "RUNNING"
        case `continue` = "CONTINUE"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSecurityConfigurationInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the security configuration.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct RunJobFlowOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: false, type: .string)
        ]
        /// An unique identifier for the job flow.
        public let jobFlowId: String?

        public init(jobFlowId: String? = nil) {
            self.jobFlowId = jobFlowId
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
        }
    }

    public enum InstanceState: String, CustomStringConvertible, Codable {
        case awaiting_fulfillment = "AWAITING_FULFILLMENT"
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct AddInstanceGroupsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: true, type: .list)
        ]
        /// Job flow in which to add the instance groups.
        public let jobFlowId: String
        /// Instance groups to add.
        public let instanceGroups: [InstanceGroupConfig]

        public init(jobFlowId: String, instanceGroups: [InstanceGroupConfig]) {
            self.jobFlowId = jobFlowId
            self.instanceGroups = instanceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
            case instanceGroups = "InstanceGroups"
        }
    }

    public struct ClusterSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The details about the current status of the cluster.
        public let status: ClusterStatus?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int32?
        /// The name of the cluster.
        public let name: String?
        /// The unique identifier for the cluster.
        public let id: String?

        public init(status: ClusterStatus? = nil, normalizedInstanceHours: Int32? = nil, name: String? = nil, id: String? = nil) {
            self.status = status
            self.normalizedInstanceHours = normalizedInstanceHours
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct SetVisibleToAllUsersInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: true, type: .boolean)
        ]
        /// Identifiers of the job flows to receive the new visibility setting.
        public let jobFlowIds: [String]
        /// Whether the specified clusters are visible to all IAM users of the AWS account associated with the cluster. If this value is set to True, all IAM users of that AWS account can view and, if they have the proper IAM policy permissions set, manage the clusters. If it is set to False, only the IAM user that created a cluster can view and manage it.
        public let visibleToAllUsers: Bool

        public init(jobFlowIds: [String], visibleToAllUsers: Bool) {
            self.jobFlowIds = jobFlowIds
            self.visibleToAllUsers = visibleToAllUsers
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
            case visibleToAllUsers = "VisibleToAllUsers"
        }
    }

    public struct InstanceGroupModifyConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string), 
            AWSShapeMember(label: "ShrinkPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "EC2InstanceIdsToTerminate", required: false, type: .list)
        ]
        /// Unique ID of the instance group to expand or shrink.
        public let instanceGroupId: String
        /// Policy for customizing shrink operations.
        public let shrinkPolicy: ShrinkPolicy?
        /// Target size for the instance group.
        public let instanceCount: Int32?
        /// The EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
        public let eC2InstanceIdsToTerminate: [String]?

        public init(instanceGroupId: String, shrinkPolicy: ShrinkPolicy? = nil, instanceCount: Int32? = nil, eC2InstanceIdsToTerminate: [String]? = nil) {
            self.instanceGroupId = instanceGroupId
            self.shrinkPolicy = shrinkPolicy
            self.instanceCount = instanceCount
            self.eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case shrinkPolicy = "ShrinkPolicy"
            case instanceCount = "InstanceCount"
            case eC2InstanceIdsToTerminate = "EC2InstanceIdsToTerminate"
        }
    }

    public struct InstanceGroupStateChangeReason: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The programmable code for the state change reason.
        public let code: InstanceGroupStateChangeReasonCode?
        /// The status change reason description.
        public let message: String?

        public init(code: InstanceGroupStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct StepStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]
        /// The reason for the step execution status change.
        public let stateChangeReason: StepStateChangeReason?
        /// The details for the step failure including reason, message, and log file path where the root cause was identified.
        public let failureDetails: FailureDetails?
        /// The execution state of the cluster step.
        public let state: StepState?
        /// The timeline of the cluster step status over time.
        public let timeline: StepTimeline?

        public init(stateChangeReason: StepStateChangeReason? = nil, failureDetails: FailureDetails? = nil, state: StepState? = nil, timeline: StepTimeline? = nil) {
            self.stateChangeReason = stateChangeReason
            self.failureDetails = failureDetails
            self.state = state
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case stateChangeReason = "StateChangeReason"
            case failureDetails = "FailureDetails"
            case state = "State"
            case timeline = "Timeline"
        }
    }

    public struct EbsBlockDevice: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "Device", required: false, type: .string)
        ]
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public let volumeSpecification: VolumeSpecification?
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public let device: String?

        public init(volumeSpecification: VolumeSpecification? = nil, device: String? = nil) {
            self.volumeSpecification = volumeSpecification
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSpecification = "VolumeSpecification"
            case device = "Device"
        }
    }

    public struct StepStateChangeReason: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
        public let code: StepStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public let message: String?

        public init(code: StepStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct ClusterStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]
        /// The current state of the cluster.
        public let state: ClusterState?
        /// A timeline that represents the status of a cluster over the lifetime of the cluster.
        public let timeline: ClusterTimeline?
        /// The reason for the cluster status change.
        public let stateChangeReason: ClusterStateChangeReason?

        public init(state: ClusterState? = nil, timeline: ClusterTimeline? = nil, stateChangeReason: ClusterStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case timeline = "Timeline"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct ModifyInstanceGroupsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list)
        ]
        /// The ID of the cluster to which the instance group belongs.
        public let clusterId: String?
        /// Instance groups to change.
        public let instanceGroups: [InstanceGroupModifyConfig]?

        public init(clusterId: String? = nil, instanceGroups: [InstanceGroupModifyConfig]? = nil) {
            self.clusterId = clusterId
            self.instanceGroups = instanceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceGroups = "InstanceGroups"
        }
    }

    public struct DeleteSecurityConfigurationOutput: AWSShape {
        /// The key for the payload

    }

    public struct ListClustersOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Clusters", required: false, type: .list)
        ]
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The list of clusters for the account based on the given filters.
        public let clusters: [ClusterSummary]?

        public init(marker: String? = nil, clusters: [ClusterSummary]? = nil) {
            self.marker = marker
            self.clusters = clusters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case clusters = "Clusters"
        }
    }

    public struct InstanceGroupConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceRole", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "EbsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Configurations", required: false, type: .list)
        ]
        /// Bid price for each EC2 instance in the instance group when launching nodes as Spot Instances, expressed in USD.
        public let bidPrice: String?
        /// Market type of the EC2 instances used to create a cluster node.
        public let market: MarketType?
        /// The role of the instance group in the cluster.
        public let instanceRole: InstanceRoleType
        /// Friendly name given to the instance group.
        public let name: String?
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public let autoScalingPolicy: AutoScalingPolicy?
        /// Target number of instances for the instance group.
        public let instanceCount: Int32
        /// The EC2 instance type for all instances in the instance group.
        public let instanceType: String
        /// EBS configurations that will be attached to each EC2 instance in the instance group.
        public let ebsConfiguration: EbsConfiguration?
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public let configurations: [Configuration]?

        public init(bidPrice: String? = nil, market: MarketType? = nil, instanceRole: InstanceRoleType, name: String? = nil, autoScalingPolicy: AutoScalingPolicy? = nil, instanceCount: Int32, instanceType: String, ebsConfiguration: EbsConfiguration? = nil, configurations: [Configuration]? = nil) {
            self.bidPrice = bidPrice
            self.market = market
            self.instanceRole = instanceRole
            self.name = name
            self.autoScalingPolicy = autoScalingPolicy
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.ebsConfiguration = ebsConfiguration
            self.configurations = configurations
        }

        private enum CodingKeys: String, CodingKey {
            case bidPrice = "BidPrice"
            case market = "Market"
            case instanceRole = "InstanceRole"
            case name = "Name"
            case autoScalingPolicy = "AutoScalingPolicy"
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case ebsConfiguration = "EbsConfiguration"
            case configurations = "Configurations"
        }
    }

    public struct InstanceGroupDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "InstanceRunningCount", required: true, type: .integer), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "InstanceRequestCount", required: true, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceRole", required: true, type: .enum), 
            AWSShapeMember(label: "Market", required: true, type: .enum), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp)
        ]
        /// Unique identifier for the instance group.
        public let instanceGroupId: String?
        /// Bid price for EC2 Instances when launching nodes as Spot Instances, expressed in USD.
        public let bidPrice: String?
        /// Actual count of running instances.
        public let instanceRunningCount: Int32
        /// The date/time the instance group was terminated.
        public let endDateTime: TimeStamp?
        /// State of instance group. The following values are deprecated: STARTING, TERMINATED, and FAILED.
        public let state: InstanceGroupState
        /// Details regarding the state of the instance group.
        public let lastStateChangeReason: String?
        /// EC2 instance type.
        public let instanceType: String
        /// The date/time the instance group was available to the cluster.
        public let readyDateTime: TimeStamp?
        /// The date/time the instance group was created.
        public let creationDateTime: TimeStamp
        /// Target number of instances to run in the instance group.
        public let instanceRequestCount: Int32
        /// Friendly name for the instance group.
        public let name: String?
        /// Instance group role in the cluster
        public let instanceRole: InstanceRoleType
        /// Market type of the EC2 instances used to create a cluster node.
        public let market: MarketType
        /// The date/time the instance group was started.
        public let startDateTime: TimeStamp?

        public init(instanceGroupId: String? = nil, bidPrice: String? = nil, instanceRunningCount: Int32, endDateTime: TimeStamp? = nil, state: InstanceGroupState, lastStateChangeReason: String? = nil, instanceType: String, readyDateTime: TimeStamp? = nil, creationDateTime: TimeStamp, instanceRequestCount: Int32, name: String? = nil, instanceRole: InstanceRoleType, market: MarketType, startDateTime: TimeStamp? = nil) {
            self.instanceGroupId = instanceGroupId
            self.bidPrice = bidPrice
            self.instanceRunningCount = instanceRunningCount
            self.endDateTime = endDateTime
            self.state = state
            self.lastStateChangeReason = lastStateChangeReason
            self.instanceType = instanceType
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.instanceRequestCount = instanceRequestCount
            self.name = name
            self.instanceRole = instanceRole
            self.market = market
            self.startDateTime = startDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case bidPrice = "BidPrice"
            case instanceRunningCount = "InstanceRunningCount"
            case endDateTime = "EndDateTime"
            case state = "State"
            case lastStateChangeReason = "LastStateChangeReason"
            case instanceType = "InstanceType"
            case readyDateTime = "ReadyDateTime"
            case creationDateTime = "CreationDateTime"
            case instanceRequestCount = "InstanceRequestCount"
            case name = "Name"
            case instanceRole = "InstanceRole"
            case market = "Market"
            case startDateTime = "StartDateTime"
        }
    }

    public struct ListStepsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The filtered list of steps for the cluster.
        public let steps: [StepSummary]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(steps: [StepSummary]? = nil, marker: String? = nil) {
            self.steps = steps
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case steps = "Steps"
            case marker = "Marker"
        }
    }

    public struct HadoopStepConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MainClass", required: false, type: .string), 
            AWSShapeMember(label: "Jar", required: false, type: .string), 
            AWSShapeMember(label: "Properties", required: false, type: .map), 
            AWSShapeMember(label: "Args", required: false, type: .list)
        ]
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
        public let mainClass: String?
        /// The path to the JAR file that runs during the step.
        public let jar: String?
        /// The list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public let properties: [String: String]?
        /// The list of command line arguments to pass to the JAR file's main function for execution.
        public let args: [String]?

        public init(mainClass: String? = nil, jar: String? = nil, properties: [String: String]? = nil, args: [String]? = nil) {
            self.mainClass = mainClass
            self.jar = jar
            self.properties = properties
            self.args = args
        }

        private enum CodingKeys: String, CodingKey {
            case mainClass = "MainClass"
            case jar = "Jar"
            case properties = "Properties"
            case args = "Args"
        }
    }

    public struct EbsConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "EbsBlockDeviceConfigs", required: false, type: .list)
        ]
        /// Indicates whether an Amazon EBS volume is EBS-optimized.
        public let ebsOptimized: Bool?
        /// An array of Amazon EBS volume specifications attached to a cluster instance.
        public let ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]?

        public init(ebsOptimized: Bool? = nil, ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]? = nil) {
            self.ebsOptimized = ebsOptimized
            self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case ebsOptimized = "EbsOptimized"
            case ebsBlockDeviceConfigs = "EbsBlockDeviceConfigs"
        }
    }

    public struct InstanceTimeline: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The date and time when the instance was ready to perform tasks.
        public let readyDateTime: TimeStamp?
        /// The creation date and time of the instance.
        public let creationDateTime: TimeStamp?
        /// The date and time when the instance was terminated.
        public let endDateTime: TimeStamp?

        public init(readyDateTime: TimeStamp? = nil, creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case readyDateTime = "ReadyDateTime"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
        }
    }

    public struct InstanceResizePolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancesToTerminate", required: false, type: .list), 
            AWSShapeMember(label: "InstanceTerminationTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesToProtect", required: false, type: .list)
        ]
        /// Specific list of instances to be terminated when shrinking an instance group.
        public let instancesToTerminate: [String]?
        /// Decommissioning timeout override for the specific list of instances to be terminated.
        public let instanceTerminationTimeout: Int32?
        /// Specific list of instances to be protected when shrinking an instance group.
        public let instancesToProtect: [String]?

        public init(instancesToTerminate: [String]? = nil, instanceTerminationTimeout: Int32? = nil, instancesToProtect: [String]? = nil) {
            self.instancesToTerminate = instancesToTerminate
            self.instanceTerminationTimeout = instanceTerminationTimeout
            self.instancesToProtect = instancesToProtect
        }

        private enum CodingKeys: String, CodingKey {
            case instancesToTerminate = "InstancesToTerminate"
            case instanceTerminationTimeout = "InstanceTerminationTimeout"
            case instancesToProtect = "InstancesToProtect"
        }
    }

    public struct AddTagsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon EMR resource identifier to which tags will be added. This value must be a cluster identifier.
        public let resourceId: String
        /// A list of tags to associate with a cluster and propagate to EC2 instances. Tags are user-defined key/value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
        }
    }

    public enum InstanceFleetStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internal_error = "INTERNAL_ERROR"
        case validation_error = "VALIDATION_ERROR"
        case instance_failure = "INSTANCE_FAILURE"
        case cluster_terminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public struct ScriptBootstrapActionConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: true, type: .string)
        ]
        /// A list of command line arguments to pass to the bootstrap action script.
        public let args: [String]?
        /// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
        public let path: String

        public init(args: [String]? = nil, path: String) {
            self.args = args
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case path = "Path"
        }
    }

    public struct AddInstanceFleetInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceFleet", required: true, type: .structure)
        ]
        /// The unique identifier of the cluster.
        public let clusterId: String
        /// Specifies the configuration of the instance fleet.
        public let instanceFleet: InstanceFleetConfig

        public init(clusterId: String, instanceFleet: InstanceFleetConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleet = "InstanceFleet"
        }
    }

    public struct SpotProvisioningSpecification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeoutDurationMinutes", required: true, type: .integer), 
            AWSShapeMember(label: "TimeoutAction", required: true, type: .enum), 
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer)
        ]
        /// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
        public let timeoutDurationMinutes: Int32
        /// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired. Spot instances are not uprovisioned within the Spot provisioining timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND to fulfill the remaining capacity.
        public let timeoutAction: SpotProvisioningTimeoutAction
        /// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. 
        public let blockDurationMinutes: Int32?

        public init(timeoutDurationMinutes: Int32, timeoutAction: SpotProvisioningTimeoutAction, blockDurationMinutes: Int32? = nil) {
            self.timeoutDurationMinutes = timeoutDurationMinutes
            self.timeoutAction = timeoutAction
            self.blockDurationMinutes = blockDurationMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutDurationMinutes = "TimeoutDurationMinutes"
            case timeoutAction = "TimeoutAction"
            case blockDurationMinutes = "BlockDurationMinutes"
        }
    }

    public struct JobFlowExecutionStatusDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum)
        ]
        /// The date and time when the job flow was ready to start running bootstrap actions.
        public let readyDateTime: TimeStamp?
        /// The start date and time of the job flow.
        public let startDateTime: TimeStamp?
        /// Description of the job flow last changed state.
        public let lastStateChangeReason: String?
        /// The creation date and time of the job flow.
        public let creationDateTime: TimeStamp
        /// The completion date and time of the job flow.
        public let endDateTime: TimeStamp?
        /// The state of the job flow.
        public let state: JobFlowExecutionState

        public init(readyDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil, lastStateChangeReason: String? = nil, creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, state: JobFlowExecutionState) {
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case readyDateTime = "ReadyDateTime"
            case startDateTime = "StartDateTime"
            case lastStateChangeReason = "LastStateChangeReason"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case state = "State"
        }
    }

    public struct RemoveAutoScalingPolicyInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public let instanceGroupId: String
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String

        public init(instanceGroupId: String, clusterId: String) {
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case clusterId = "ClusterId"
        }
    }

}