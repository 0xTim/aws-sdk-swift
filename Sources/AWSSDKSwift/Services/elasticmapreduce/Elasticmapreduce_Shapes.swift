// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Elasticmapreduce {

    public struct InstanceFleetStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A code representing the instance fleet status.
        public var state: String? = nil
        /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
        public var timeline: InstanceFleetTimeline? = nil
        /// Provides status change reason details for the instance fleet.
        public var stateChangeReason: InstanceFleetStateChangeReason? = nil

        public init() {}

        public init(state: String? = nil, timeline: InstanceFleetTimeline? = nil, stateChangeReason: InstanceFleetStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

    }

    public struct JobFlowInstancesDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon EC2 instance identifier of the master node.
        public var masterInstanceId: String? = nil
        /// The Hadoop version for the cluster.
        public var hadoopVersion: String? = nil
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour that an m1.small runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Int32? = nil
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public var ec2SubnetId: String? = nil
        /// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
        public var ec2KeyName: String? = nil
        /// Specifies whether the cluster should remain available after completing all steps.
        public var keepJobFlowAliveWhenNoSteps: Bool? = nil
        /// Details about the instance groups in a cluster.
        public var instanceGroups: [InstanceGroupDetail]? = nil
        /// The Amazon EC2 master node instance type.
        public var masterInstanceType: String = ""
        /// The DNS name of the master node.
        public var masterPublicDnsName: String? = nil
        /// The Amazon EC2 Availability Zone for the cluster.
        public var placement: PlacementType? = nil
        /// The Amazon EC2 slave node instance type.
        public var slaveInstanceType: String = ""
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and slave node. If the value is greater than 1, one instance is the master node and all others are slave nodes.
        public var instanceCount: Int32 = 0
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Bool? = nil

        public init() {}

        public init(masterInstanceId: String? = nil, hadoopVersion: String? = nil, normalizedInstanceHours: Int32? = nil, ec2SubnetId: String? = nil, ec2KeyName: String? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, instanceGroups: [InstanceGroupDetail]? = nil, masterInstanceType: String, masterPublicDnsName: String? = nil, placement: PlacementType? = nil, slaveInstanceType: String, instanceCount: Int32, terminationProtected: Bool? = nil) {
            self.masterInstanceId = masterInstanceId
            self.hadoopVersion = hadoopVersion
            self.normalizedInstanceHours = normalizedInstanceHours
            self.ec2SubnetId = ec2SubnetId
            self.ec2KeyName = ec2KeyName
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.instanceGroups = instanceGroups
            self.masterInstanceType = masterInstanceType
            self.masterPublicDnsName = masterPublicDnsName
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.instanceCount = instanceCount
            self.terminationProtected = terminationProtected
        }

    }

    public struct PutAutoScalingPolicyOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public var instanceGroupId: String? = nil
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public var clusterId: String? = nil
        /// The automatic scaling policy definition.
        public var autoScalingPolicy: AutoScalingPolicyDescription? = nil

        public init() {}

        public init(instanceGroupId: String? = nil, clusterId: String? = nil, autoScalingPolicy: AutoScalingPolicyDescription? = nil) {
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
            self.autoScalingPolicy = autoScalingPolicy
        }

    }

    public struct ListStepsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The filter to limit the step list based on the identifier of the steps.
        public var stepIds: [String]? = nil
        /// The filter to limit the step list based on certain states.
        public var stepStates: [String]? = nil
        /// The identifier of the cluster for which to list the steps.
        public var clusterId: String = ""

        public init() {}

        public init(marker: String? = nil, stepIds: [String]? = nil, stepStates: [String]? = nil, clusterId: String) {
            self.marker = marker
            self.stepIds = stepIds
            self.stepStates = stepStates
            self.clusterId = clusterId
        }

    }

    public struct SimpleScalingPolicyConfiguration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The amount by which to scale in or scale out, based on the specified AdjustmentType. A positive value adds to the instance group's EC2 instance count while a negative number removes instances. If AdjustmentType is set to EXACT_CAPACITY, the number should only be a positive integer. If AdjustmentType is set to PERCENT_CHANGE_IN_CAPACITY, the value should express the percentage as a decimal. For example, -0.20 indicates a decrease in 20% increments of cluster capacity.
        public var scalingAdjustment: Int32 = 0
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
        public var coolDown: Int32? = nil
        /// The way in which EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) each time the scaling activity is triggered. CHANGE_IN_CAPACITY is the default. CHANGE_IN_CAPACITY indicates that the EC2 instance count increments or decrements by ScalingAdjustment, which should be expressed as an integer. PERCENT_CHANGE_IN_CAPACITY indicates the instance count increments or decrements by the percentage specified by ScalingAdjustment, which should be expressed as a decimal. For example, 0.20 indicates an increase in 20% increments of cluster capacity. EXACT_CAPACITY indicates the scaling activity results in an instance group with the number of EC2 instances specified by ScalingAdjustment, which should be expressed as a positive integer.
        public var adjustmentType: String? = nil

        public init() {}

        public init(scalingAdjustment: Int32, coolDown: Int32? = nil, adjustmentType: String? = nil) {
            self.scalingAdjustment = scalingAdjustment
            self.coolDown = coolDown
            self.adjustmentType = adjustmentType
        }

    }

    public struct InstanceFleet: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedOnDemandCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public var targetOnDemandCapacity: Int32? = nil
        /// The current status of the instance fleet. 
        public var status: InstanceFleetStatus? = nil
        /// The specification for the instance types that comprise an instance fleet. Up to five unique instance specifications may be defined for each instance fleet. 
        public var instanceTypeSpecifications: [InstanceTypeSpecification]? = nil
        /// Describes the launch specification for an instance fleet. 
        public var launchSpecifications: InstanceFleetProvisioningSpecifications? = nil
        /// The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
        public var provisionedOnDemandCapacity: Int32? = nil
        /// A friendly name for the instance fleet.
        public var name: String? = nil
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK. 
        public var instanceFleetType: String? = nil
        /// The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
        public var provisionedSpotCapacity: Int32? = nil
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedSpotCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public var targetSpotCapacity: Int32? = nil
        /// The unique identifier of the instance fleet.
        public var id: String? = nil

        public init() {}

        public init(targetOnDemandCapacity: Int32? = nil, status: InstanceFleetStatus? = nil, instanceTypeSpecifications: [InstanceTypeSpecification]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, provisionedOnDemandCapacity: Int32? = nil, name: String? = nil, instanceFleetType: String? = nil, provisionedSpotCapacity: Int32? = nil, targetSpotCapacity: Int32? = nil, id: String? = nil) {
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.status = status
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.launchSpecifications = launchSpecifications
            self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
            self.name = name
            self.instanceFleetType = instanceFleetType
            self.provisionedSpotCapacity = provisionedSpotCapacity
            self.targetSpotCapacity = targetSpotCapacity
            self.id = id
        }

    }

    public struct InstanceGroupStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current state of the instance group.
        public var state: String? = nil
        /// The timeline of the instance group status over time.
        public var timeline: InstanceGroupTimeline? = nil
        /// The status change reason details for the instance group.
        public var stateChangeReason: InstanceGroupStateChangeReason? = nil

        public init() {}

        public init(state: String? = nil, timeline: InstanceGroupTimeline? = nil, stateChangeReason: InstanceGroupStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

    }

    public struct CreateSecurityConfigurationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the security configuration.
        public var name: String = ""
        /// The date and time the security configuration was created.
        public var creationDateTime: Date = Date()

        public init() {}

        public init(name: String, creationDateTime: Date) {
            self.name = name
            self.creationDateTime = creationDateTime
        }

    }

    public struct FailureDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
        public var reason: String? = nil
        /// The path to the log file where the step failure root cause was originally recorded.
        public var logFile: String? = nil
        /// The descriptive message including the error the EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
        public var message: String? = nil

        public init() {}

        public init(reason: String? = nil, logFile: String? = nil, message: String? = nil) {
            self.reason = reason
            self.logFile = logFile
            self.message = message
        }

    }

    public struct ListClustersInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The cluster state filters to apply when listing clusters.
        public var clusterStates: [String]? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The creation date and time end value filter for listing clusters.
        public var createdBefore: Date? = nil
        /// The creation date and time beginning value filter for listing clusters.
        public var createdAfter: Date? = nil

        public init() {}

        public init(clusterStates: [String]? = nil, marker: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil) {
            self.clusterStates = clusterStates
            self.marker = marker
            self.createdBefore = createdBefore
            self.createdAfter = createdAfter
        }

    }

    public struct ClusterStateChangeReason: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The programmatic code for the state change reason.
        public var code: String? = nil
        /// The descriptive message for the state change reason.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct VolumeSpecification: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public var iops: Int32? = nil
        /// The volume type. Volume types supported are gp2, io1, standard.
        public var volumeType: String = ""
        /// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        public var sizeInGB: Int32 = 0

        public init() {}

        public init(iops: Int32? = nil, volumeType: String, sizeInGB: Int32) {
            self.iops = iops
            self.volumeType = volumeType
            self.sizeInGB = sizeInGB
        }

    }

    public struct Application: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The version of the application.
        public var version: String? = nil
        /// The name of the application.
        public var name: String? = nil
        /// Arguments for Amazon EMR to pass to the application.
        public var args: [String]? = nil
        /// This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
        public var additionalInfo: [String: String]? = nil

        public init() {}

        public init(version: String? = nil, name: String? = nil, args: [String]? = nil, additionalInfo: [String: String]? = nil) {
            self.version = version
            self.name = name
            self.args = args
            self.additionalInfo = additionalInfo
        }

    }

    public struct DescribeJobFlowsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of job flows matching the parameters supplied.
        public var jobFlows: [JobFlowDetail]? = nil

        public init() {}

        public init(jobFlows: [JobFlowDetail]? = nil) {
            self.jobFlows = jobFlows
        }

    }

    public struct CloudWatchAlarmDefinition: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value against which the specified statistic is compared.
        public var threshold: Double = 0
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        public var metricName: String = ""
        /// The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify 300.
        public var period: Int32 = 0
        /// The number of periods, expressed in seconds using Period, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public var evaluationPeriods: Int32? = nil
        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        public var comparisonOperator: String = ""
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public var statistic: String? = nil
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public var unit: String? = nil
        /// A CloudWatch metric dimension.
        public var dimensions: [MetricDimension]? = nil
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public var namespace: String? = nil

        public init() {}

        public init(threshold: Double, metricName: String, period: Int32, evaluationPeriods: Int32? = nil, comparisonOperator: String, statistic: String? = nil, unit: String? = nil, dimensions: [MetricDimension]? = nil, namespace: String? = nil) {
            self.threshold = threshold
            self.metricName = metricName
            self.period = period
            self.evaluationPeriods = evaluationPeriods
            self.comparisonOperator = comparisonOperator
            self.statistic = statistic
            self.unit = unit
            self.dimensions = dimensions
            self.namespace = namespace
        }

    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A user-defined value, which is optional in a tag. For more information, see Tagging Amazon EMR Resources. 
        public var value: String? = nil
        /// A user-defined key, which is the minimum required information for a valid tag. For more information, see Tagging Amazon EMR Resources. 
        public var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct DescribeSecurityConfigurationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The security configuration details in JSON format.
        public var securityConfiguration: String? = nil
        /// The name of the security configuration.
        public var name: String? = nil
        /// The date and time the security configuration was created
        public var creationDateTime: Date? = nil

        public init() {}

        public init(securityConfiguration: String? = nil, name: String? = nil, creationDateTime: Date? = nil) {
            self.securityConfiguration = securityConfiguration
            self.name = name
            self.creationDateTime = creationDateTime
        }

    }

    public struct CancelStepsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of CancelStepsInfo, which shows the status of specified cancel requests for each StepID specified.
        public var cancelStepsInfoList: [CancelStepsInfo]? = nil

        public init() {}

        public init(cancelStepsInfoList: [CancelStepsInfo]? = nil) {
            self.cancelStepsInfoList = cancelStepsInfoList
        }

    }

    public struct InstanceFleetProvisioningSpecifications: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.
        public var spotSpecification: SpotProvisioningSpecification = SpotProvisioningSpecification()

        public init() {}

        public init(spotSpecification: SpotProvisioningSpecification) {
            self.spotSpecification = spotSpecification
        }

    }

    public struct PutAutoScalingPolicyInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the ID of the instance group to which the automatic scaling policy is applied.
        public var instanceGroupId: String = ""
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public var clusterId: String = ""
        /// Specifies the definition of the automatic scaling policy.
        public var autoScalingPolicy: AutoScalingPolicy = AutoScalingPolicy()

        public init() {}

        public init(instanceGroupId: String, clusterId: String, autoScalingPolicy: AutoScalingPolicy) {
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
            self.autoScalingPolicy = autoScalingPolicy
        }

    }

    public struct ClusterTimeline: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the cluster was ready to execute steps.
        public var readyDateTime: Date? = nil
        /// The creation date and time of the cluster.
        public var creationDateTime: Date? = nil
        /// The date and time when the cluster was terminated.
        public var endDateTime: Date? = nil

        public init() {}

        public init(readyDateTime: Date? = nil, creationDateTime: Date? = nil, endDateTime: Date? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

    }

    public struct AddJobFlowStepsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifiers of the list of steps added to the job flow.
        public var stepIds: [String]? = nil

        public init() {}

        public init(stepIds: [String]? = nil) {
            self.stepIds = stepIds
        }

    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of EBS volumes that are attached to this instance.
        public var ebsVolumes: [EbsVolume]? = nil
        /// The unique identifier of the instance fleet to which an EC2 instance belongs.
        public var instanceFleetId: String? = nil
        /// The identifier of the instance group to which this instance belongs.
        public var instanceGroupId: String? = nil
        /// The current status of the instance.
        public var status: InstanceStatus? = nil
        /// The instance purchasing option. Valid values are ON_DEMAND or SPOT. 
        public var market: String? = nil
        /// The unique identifier for the instance in Amazon EMR.
        public var id: String? = nil
        /// The public IP address of the instance.
        public var publicIpAddress: String? = nil
        /// The public DNS name of the instance.
        public var publicDnsName: String? = nil
        /// The private DNS name of the instance.
        public var privateDnsName: String? = nil
        /// The EC2 instance type, for example m3.xlarge.
        public var instanceType: String? = nil
        /// The unique identifier of the instance in Amazon EC2.
        public var ec2InstanceId: String? = nil
        /// The private IP address of the instance.
        public var privateIpAddress: String? = nil

        public init() {}

        public init(ebsVolumes: [EbsVolume]? = nil, instanceFleetId: String? = nil, instanceGroupId: String? = nil, status: InstanceStatus? = nil, market: String? = nil, id: String? = nil, publicIpAddress: String? = nil, publicDnsName: String? = nil, privateDnsName: String? = nil, instanceType: String? = nil, ec2InstanceId: String? = nil, privateIpAddress: String? = nil) {
            self.ebsVolumes = ebsVolumes
            self.instanceFleetId = instanceFleetId
            self.instanceGroupId = instanceGroupId
            self.status = status
            self.market = market
            self.id = id
            self.publicIpAddress = publicIpAddress
            self.publicDnsName = publicDnsName
            self.privateDnsName = privateDnsName
            self.instanceType = instanceType
            self.ec2InstanceId = ec2InstanceId
            self.privateIpAddress = privateIpAddress
        }

    }

    public struct ScalingAction: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Not available for instance groups. Instance groups use the market type specified for the group.
        public var market: String? = nil
        /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
        public var simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration = SimpleScalingPolicyConfiguration()

        public init() {}

        public init(market: String? = nil, simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration) {
            self.market = market
            self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
        }

    }

    public struct Step: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
        public var actionOnFailure: String? = nil
        /// The current execution status details of the cluster step.
        public var status: StepStatus? = nil
        /// The name of the cluster step.
        public var name: String? = nil
        /// The Hadoop job configuration of the cluster step.
        public var config: HadoopStepConfig? = nil
        /// The identifier of the cluster step.
        public var id: String? = nil

        public init() {}

        public init(actionOnFailure: String? = nil, status: StepStatus? = nil, name: String? = nil, config: HadoopStepConfig? = nil, id: String? = nil) {
            self.actionOnFailure = actionOnFailure
            self.status = status
            self.name = name
            self.config = config
            self.id = id
        }

    }

    public struct CreateSecurityConfigurationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The security configuration details in JSON format.
        public var securityConfiguration: String = ""
        /// The name of the security configuration.
        public var name: String = ""

        public init() {}

        public init(securityConfiguration: String, name: String) {
            self.securityConfiguration = securityConfiguration
            self.name = name
        }

    }

    public struct ListInstanceGroupsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The identifier of the cluster for which to list the instance groups.
        public var clusterId: String = ""

        public init() {}

        public init(marker: String? = nil, clusterId: String) {
            self.marker = marker
            self.clusterId = clusterId
        }

    }

    public struct InstanceGroup: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The bid price for each EC2 instance in the instance group when launching nodes as Spot Instances, expressed in USD.
        public var bidPrice: String? = nil
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: ShrinkPolicy? = nil
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public var ebsOptimized: Bool? = nil
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public var autoScalingPolicy: AutoScalingPolicyDescription? = nil
        /// The EC2 instance type for all instances in the instance group.
        public var instanceType: String? = nil
        /// The identifier of the instance group.
        public var id: String? = nil
        /// The current status of the instance group.
        public var status: InstanceGroupStatus? = nil
        /// The target number of instances for the instance group.
        public var requestedInstanceCount: Int32? = nil
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public var instanceGroupType: String? = nil
        /// The EBS block devices that are mapped to this instance group.
        public var ebsBlockDevices: [EbsBlockDevice]? = nil
        /// The name of the instance group.
        public var name: String? = nil
        /// The number of instances currently running in this instance group.
        public var runningInstanceCount: Int32? = nil
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public var market: String? = nil
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [Configuration]? = nil

        public init() {}

        public init(bidPrice: String? = nil, shrinkPolicy: ShrinkPolicy? = nil, ebsOptimized: Bool? = nil, autoScalingPolicy: AutoScalingPolicyDescription? = nil, instanceType: String? = nil, id: String? = nil, status: InstanceGroupStatus? = nil, requestedInstanceCount: Int32? = nil, instanceGroupType: String? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, name: String? = nil, runningInstanceCount: Int32? = nil, market: String? = nil, configurations: [Configuration]? = nil) {
            self.bidPrice = bidPrice
            self.shrinkPolicy = shrinkPolicy
            self.ebsOptimized = ebsOptimized
            self.autoScalingPolicy = autoScalingPolicy
            self.instanceType = instanceType
            self.id = id
            self.status = status
            self.requestedInstanceCount = requestedInstanceCount
            self.instanceGroupType = instanceGroupType
            self.ebsBlockDevices = ebsBlockDevices
            self.name = name
            self.runningInstanceCount = runningInstanceCount
            self.market = market
            self.configurations = configurations
        }

    }

    public struct AddTagsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct InstanceFleetConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public var targetOnDemandCapacity: Int32? = nil
        /// The instance type configurations that define the EC2 instances in the instance fleet.
        public var instanceTypeConfigs: [InstanceTypeConfig]? = nil
        /// The launch specification for the instance fleet.
        public var launchSpecifications: InstanceFleetProvisioningSpecifications? = nil
        /// The friendly name of the instance fleet.
        public var name: String? = nil
        /// The node type that the instance fleet hosts. Valid values are MASTER,CORE,and TASK.
        public var instanceFleetType: String = ""
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public var targetSpotCapacity: Int32? = nil

        public init() {}

        public init(targetOnDemandCapacity: Int32? = nil, instanceTypeConfigs: [InstanceTypeConfig]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, name: String? = nil, instanceFleetType: String, targetSpotCapacity: Int32? = nil) {
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.instanceTypeConfigs = instanceTypeConfigs
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.instanceFleetType = instanceFleetType
            self.targetSpotCapacity = targetSpotCapacity
        }

    }

    public struct ListInstanceFleetsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The unique identifier of the cluster.
        public var clusterId: String = ""

        public init() {}

        public init(marker: String? = nil, clusterId: String) {
            self.marker = marker
            self.clusterId = clusterId
        }

    }

    public struct Command: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the command.
        public var name: String? = nil
        /// Arguments for Amazon EMR to pass to the command for execution.
        public var args: [String]? = nil
        /// The Amazon S3 location of the command script.
        public var scriptPath: String? = nil

        public init() {}

        public init(name: String? = nil, args: [String]? = nil, scriptPath: String? = nil) {
            self.name = name
            self.args = args
            self.scriptPath = scriptPath
        }

    }

    public struct AutoScalingPolicyStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Indicates the status of the automatic scaling policy.
        public var state: String? = nil
        /// The reason for a change in status.
        public var stateChangeReason: AutoScalingPolicyStateChangeReason? = nil

        public init() {}

        public init(state: String? = nil, stateChangeReason: AutoScalingPolicyStateChangeReason? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
        }

    }

    public struct ListInstanceFleetsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The list of instance fleets for the cluster and given filters.
        public var instanceFleets: [InstanceFleet]? = nil

        public init() {}

        public init(marker: String? = nil, instanceFleets: [InstanceFleet]? = nil) {
            self.marker = marker
            self.instanceFleets = instanceFleets
        }

    }

    public struct DescribeStepOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The step details for the requested step identifier.
        public var step: Step? = nil

        public init() {}

        public init(step: Step? = nil) {
            self.step = step
        }

    }

    public struct PlacementType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. AvailabilityZones is used for instance fleets, while AvailabilityZone (singular) is used for uniform instance groups.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public var availabilityZones: [String]? = nil
        /// The Amazon EC2 Availability Zone for the cluster. AvailabilityZone is used for uniform instance groups, while AvailabilityZones (plural) is used for instance fleets.
        public var availabilityZone: String? = nil

        public init() {}

        public init(availabilityZones: [String]? = nil, availabilityZone: String? = nil) {
            self.availabilityZones = availabilityZones
            self.availabilityZone = availabilityZone
        }

    }

    public struct MetricDimension: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The dimension value.
        public var value: String? = nil
        /// The dimension name.
        public var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct DeleteSecurityConfigurationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the security configuration.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StepConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JAR file used for the step.
        public var hadoopJarStep: HadoopJarStepConfig = HadoopJarStepConfig()
        /// The name of the step.
        public var name: String = ""
        /// The action to take if the step fails.
        public var actionOnFailure: String? = nil

        public init() {}

        public init(hadoopJarStep: HadoopJarStepConfig, name: String, actionOnFailure: String? = nil) {
            self.hadoopJarStep = hadoopJarStep
            self.name = name
            self.actionOnFailure = actionOnFailure
        }

    }

    public struct DescribeClusterOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This output contains the details for the requested cluster.
        public var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct ListInstancesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of the instance group for which to list the instances.
        public var instanceGroupId: String? = nil
        /// The unique identifier of the instance fleet.
        public var instanceFleetId: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The node type of the instance fleet. For example MASTER, CORE, or TASK.
        public var instanceFleetType: String? = nil
        /// The type of instance group for which to list the instances.
        public var instanceGroupTypes: [String]? = nil
        /// The identifier of the cluster for which to list the instances.
        public var clusterId: String = ""
        /// A list of instance states that will filter the instances returned with this request.
        public var instanceStates: [String]? = nil

        public init() {}

        public init(instanceGroupId: String? = nil, instanceFleetId: String? = nil, marker: String? = nil, instanceFleetType: String? = nil, instanceGroupTypes: [String]? = nil, clusterId: String, instanceStates: [String]? = nil) {
            self.instanceGroupId = instanceGroupId
            self.instanceFleetId = instanceFleetId
            self.marker = marker
            self.instanceFleetType = instanceFleetType
            self.instanceGroupTypes = instanceGroupTypes
            self.clusterId = clusterId
            self.instanceStates = instanceStates
        }

    }

    public struct Ec2InstanceAttributes: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of the Amazon EC2 security group for the slave nodes.
        public var emrManagedSlaveSecurityGroup: String? = nil
        /// The IAM role that was specified when the cluster was launched. The EC2 instances of the cluster assume this role.
        public var iamInstanceProfile: String? = nil
        /// To launch the cluster in Amazon VPC, set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster is launched in the normal AWS cloud, outside of a VPC. Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus, you cannot specify the cc1.4xlarge instance type for nodes of a cluster launched in a VPC.
        public var ec2SubnetId: String? = nil
        /// The identifier of the Amazon EC2 security group for the master node.
        public var emrManagedMasterSecurityGroup: String? = nil
        /// Applies to clusters configured with the The list of availability zones to choose from. The service will choose the availability zone with the best mix of available capacity and lowest cost to launch the cluster. If you do not specify this value, the cluster is launched in any availability zone that the customer account has access to.
        public var requestedEc2AvailabilityZones: [String]? = nil
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public var additionalMasterSecurityGroups: [String]? = nil
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public var serviceAccessSecurityGroup: String? = nil
        /// A list of additional Amazon EC2 security group IDs for the slave nodes.
        public var additionalSlaveSecurityGroups: [String]? = nil
        /// Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances. Amazon EMR chooses the EC2 subnet with the best performance and cost characteristics from among the list of RequestedEc2SubnetIds and launches all cluster instances within that subnet. If this value is not specified, and the account supports EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses Requested
        public var requestedEc2SubnetIds: [String]? = nil
        /// The Availability Zone in which the cluster will run. 
        public var ec2AvailabilityZone: String? = nil
        /// The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
        public var ec2KeyName: String? = nil

        public init() {}

        public init(emrManagedSlaveSecurityGroup: String? = nil, iamInstanceProfile: String? = nil, ec2SubnetId: String? = nil, emrManagedMasterSecurityGroup: String? = nil, requestedEc2AvailabilityZones: [String]? = nil, additionalMasterSecurityGroups: [String]? = nil, serviceAccessSecurityGroup: String? = nil, additionalSlaveSecurityGroups: [String]? = nil, requestedEc2SubnetIds: [String]? = nil, ec2AvailabilityZone: String? = nil, ec2KeyName: String? = nil) {
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.iamInstanceProfile = iamInstanceProfile
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.requestedEc2SubnetIds = requestedEc2SubnetIds
            self.ec2AvailabilityZone = ec2AvailabilityZone
            self.ec2KeyName = ec2KeyName
        }

    }

    public struct EbsVolume: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The volume identifier of the EBS volume.
        public var volumeId: String? = nil
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public var device: String? = nil

        public init() {}

        public init(volumeId: String? = nil, device: String? = nil) {
            self.volumeId = volumeId
            self.device = device
        }

    }

    public struct ListSecurityConfigurationsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
        public var marker: String? = nil
        /// The creation date and time, and name, of each security configuration.
        public var securityConfigurations: [SecurityConfigurationSummary]? = nil

        public init() {}

        public init(marker: String? = nil, securityConfigurations: [SecurityConfigurationSummary]? = nil) {
            self.marker = marker
            self.securityConfigurations = securityConfigurations
        }

    }

    public struct StepTimeline: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the cluster step execution started.
        public var startDateTime: Date? = nil
        /// The date and time when the cluster step was created.
        public var creationDateTime: Date? = nil
        /// The date and time when the cluster step execution completed or failed.
        public var endDateTime: Date? = nil

        public init() {}

        public init(startDateTime: Date? = nil, creationDateTime: Date? = nil, endDateTime: Date? = nil) {
            self.startDateTime = startDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

    }

    public struct InstanceStateChangeReason: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The programmable code for the state change reason.
        public var code: String? = nil
        /// The status change reason description.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct AutoScalingPolicy: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public var rules: [ScalingRule] = []
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public var constraints: ScalingConstraints = ScalingConstraints()

        public init() {}

        public init(rules: [ScalingRule], constraints: ScalingConstraints) {
            self.rules = rules
            self.constraints = constraints
        }

    }

    public struct Configuration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The classification within a configuration.
        public var classification: String? = nil
        /// A list of additional configurations to apply within a configuration object.
        public var configurations: [Configuration]? = nil
        /// A set of properties specified within a configuration classification.
        public var properties: [String: String]? = nil

        public init() {}

        public init(classification: String? = nil, configurations: [Configuration]? = nil, properties: [String: String]? = nil) {
            self.classification = classification
            self.configurations = configurations
            self.properties = properties
        }

    }

    public struct CancelStepsInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The reason for the failure if the CancelSteps request fails.
        public var reason: String? = nil
        /// The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
        public var status: String? = nil
        /// The encrypted StepId of a step.
        public var stepId: String? = nil

        public init() {}

        public init(reason: String? = nil, status: String? = nil, stepId: String? = nil) {
            self.reason = reason
            self.status = status
            self.stepId = stepId
        }

    }

    public struct RemoveTagsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AutoScalingPolicyStateChangeReason: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The code indicating the reason for the change in status.USER_REQUEST indicates that the scaling policy status was changed by a user. PROVISION_FAILURE indicates that the status change was because the policy failed to provision. CLEANUP_FAILURE indicates an error.
        public var code: String? = nil
        /// A friendly, more verbose message that accompanies an automatic scaling policy state change.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct InstanceFleetStateChangeReason: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A code corresponding to the reason the state change occurred.
        public var code: String? = nil
        /// An explanatory message.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct ScalingRule: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The conditions that trigger an automatic scaling activity.
        public var action: ScalingAction = ScalingAction()
        /// The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
        public var name: String = ""
        /// The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
        public var trigger: ScalingTrigger = ScalingTrigger()
        /// A friendly, more verbose description of the automatic scaling rule.
        public var description: String? = nil

        public init() {}

        public init(action: ScalingAction, name: String, trigger: ScalingTrigger, description: String? = nil) {
            self.action = action
            self.name = name
            self.trigger = trigger
            self.description = description
        }

    }

    public struct ListSecurityConfigurationsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the set of results to retrieve.
        public var marker: String? = nil

        public init() {}

        public init(marker: String? = nil) {
            self.marker = marker
        }

    }

    public struct JobFlowDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of steps run by the job flow.
        public var steps: [StepDetail]? = nil
        /// A list of strings set by third party software when the job flow is launched. If you are not using third party software to manage the job flow this value is empty.
        public var supportedProducts: [String]? = nil
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate EC2 instances in an instance group.
        public var autoScalingRole: String? = nil
        /// The version of the AMI used to initialize Amazon EC2 instances in the job flow. For a list of AMI versions currently supported by Amazon EMR, see AMI Versions Supported in EMR in the Amazon EMR Developer Guide. 
        public var amiVersion: String? = nil
        /// Specifies whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to false, only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action.
        public var visibleToAllUsers: Bool? = nil
        /// The job flow identifier.
        public var jobFlowId: String = ""
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public var serviceRole: String? = nil
        /// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
        public var jobFlowRole: String? = nil
        /// A list of the bootstrap actions run by the job flow.
        public var bootstrapActions: [BootstrapActionDetail]? = nil
        /// The name of the job flow.
        public var name: String = ""
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: String? = nil
        /// The location in Amazon S3 where log files for the job are stored.
        public var logUri: String? = nil
        /// Describes the Amazon EC2 instances of the job flow.
        public var instances: JobFlowInstancesDetail = JobFlowInstancesDetail()
        /// Describes the execution status of the job flow.
        public var executionStatusDetail: JobFlowExecutionStatusDetail = JobFlowExecutionStatusDetail()

        public init() {}

        public init(steps: [StepDetail]? = nil, supportedProducts: [String]? = nil, autoScalingRole: String? = nil, amiVersion: String? = nil, visibleToAllUsers: Bool? = nil, jobFlowId: String, serviceRole: String? = nil, jobFlowRole: String? = nil, bootstrapActions: [BootstrapActionDetail]? = nil, name: String, scaleDownBehavior: String? = nil, logUri: String? = nil, instances: JobFlowInstancesDetail, executionStatusDetail: JobFlowExecutionStatusDetail) {
            self.steps = steps
            self.supportedProducts = supportedProducts
            self.autoScalingRole = autoScalingRole
            self.amiVersion = amiVersion
            self.visibleToAllUsers = visibleToAllUsers
            self.jobFlowId = jobFlowId
            self.serviceRole = serviceRole
            self.jobFlowRole = jobFlowRole
            self.bootstrapActions = bootstrapActions
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.logUri = logUri
            self.instances = instances
            self.executionStatusDetail = executionStatusDetail
        }

    }

    public struct InstanceGroupTimeline: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the instance group became ready to perform tasks.
        public var readyDateTime: Date? = nil
        /// The creation date and time of the instance group.
        public var creationDateTime: Date? = nil
        /// The date and time when the instance group terminated.
        public var endDateTime: Date? = nil

        public init() {}

        public init(readyDateTime: Date? = nil, creationDateTime: Date? = nil, endDateTime: Date? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

    }

    public struct ScalingTrigger: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
        public var cloudWatchAlarmDefinition: CloudWatchAlarmDefinition = CloudWatchAlarmDefinition()

        public init() {}

        public init(cloudWatchAlarmDefinition: CloudWatchAlarmDefinition) {
            self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
        }

    }

    public struct BootstrapActionDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A description of the bootstrap action.
        public var bootstrapActionConfig: BootstrapActionConfig? = nil

        public init() {}

        public init(bootstrapActionConfig: BootstrapActionConfig? = nil) {
            self.bootstrapActionConfig = bootstrapActionConfig
        }

    }

    public struct DescribeJobFlowsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Return only job flows whose state is contained in this list.
        public var jobFlowStates: [String]? = nil
        /// Return only job flows whose job flow ID is contained in this list.
        public var jobFlowIds: [String]? = nil
        /// Return only job flows created before this date and time.
        public var createdBefore: Date? = nil
        /// Return only job flows created after this date and time.
        public var createdAfter: Date? = nil

        public init() {}

        public init(jobFlowStates: [String]? = nil, jobFlowIds: [String]? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil) {
            self.jobFlowStates = jobFlowStates
            self.jobFlowIds = jobFlowIds
            self.createdBefore = createdBefore
            self.createdAfter = createdAfter
        }

    }

    public struct EbsBlockDeviceConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public var volumeSpecification: VolumeSpecification = VolumeSpecification()
        /// Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group
        public var volumesPerInstance: Int32? = nil

        public init() {}

        public init(volumeSpecification: VolumeSpecification, volumesPerInstance: Int32? = nil) {
            self.volumeSpecification = volumeSpecification
            self.volumesPerInstance = volumesPerInstance
        }

    }

    public struct SetTerminationProtectionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of strings that uniquely identify the clusters to protect. This identifier is returned by RunJobFlow and can also be obtained from DescribeJobFlows . 
        public var jobFlowIds: [String] = []
        /// A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
        public var terminationProtected: Bool = false

        public init() {}

        public init(jobFlowIds: [String], terminationProtected: Bool) {
            self.jobFlowIds = jobFlowIds
            self.terminationProtected = terminationProtected
        }

    }

    public struct RemoveTagsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon EMR resource identifier from which tags will be removed. This value must be a cluster identifier.
        public var resourceId: String = ""
        /// A list of tag keys to remove from a resource.
        public var tagKeys: [String] = []

        public init() {}

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

    }

    public struct InstanceStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current state of the instance.
        public var state: String? = nil
        /// The timeline of the instance status over time.
        public var timeline: InstanceTimeline? = nil
        /// The details of the status change reason for the instance.
        public var stateChangeReason: InstanceStateChangeReason? = nil

        public init() {}

        public init(state: String? = nil, timeline: InstanceTimeline? = nil, stateChangeReason: InstanceStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

    }

    public struct StepSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This specifies what action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE.
        public var actionOnFailure: String? = nil
        /// The current execution status details of the cluster step.
        public var status: StepStatus? = nil
        /// The name of the cluster step.
        public var name: String? = nil
        /// The Hadoop job configuration of the cluster step.
        public var config: HadoopStepConfig? = nil
        /// The identifier of the cluster step.
        public var id: String? = nil

        public init() {}

        public init(actionOnFailure: String? = nil, status: StepStatus? = nil, name: String? = nil, config: HadoopStepConfig? = nil, id: String? = nil) {
            self.actionOnFailure = actionOnFailure
            self.status = status
            self.name = name
            self.config = config
            self.id = id
        }

    }

    public struct BootstrapActionConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the bootstrap action.
        public var name: String = ""
        /// The script run by the bootstrap action.
        public var scriptBootstrapAction: ScriptBootstrapActionConfig = ScriptBootstrapActionConfig()

        public init() {}

        public init(name: String, scriptBootstrapAction: ScriptBootstrapActionConfig) {
            self.name = name
            self.scriptBootstrapAction = scriptBootstrapAction
        }

    }

    public struct AddInstanceGroupsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The job flow ID in which the instance groups are added.
        public var jobFlowId: String? = nil
        /// Instance group IDs of the newly created instance groups.
        public var instanceGroupIds: [String]? = nil

        public init() {}

        public init(jobFlowId: String? = nil, instanceGroupIds: [String]? = nil) {
            self.jobFlowId = jobFlowId
            self.instanceGroupIds = instanceGroupIds
        }

    }

    public struct ListInstancesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The list of instances for the cluster and given filters.
        public var instances: [Instance]? = nil

        public init() {}

        public init(marker: String? = nil, instances: [Instance]? = nil) {
            self.marker = marker
            self.instances = instances
        }

    }

    public struct InstanceFleetModifyConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The target capacity of On-Demand units for the instance fleet. For more information see InstanceFleetConfig$TargetOnDemandCapacity.
        public var targetOnDemandCapacity: Int32? = nil
        /// A unique identifier for the instance fleet.
        public var instanceFleetId: String = ""
        /// The target capacity of Spot units for the instance fleet. For more information, see InstanceFleetConfig$TargetSpotCapacity.
        public var targetSpotCapacity: Int32? = nil

        public init() {}

        public init(targetOnDemandCapacity: Int32? = nil, instanceFleetId: String, targetSpotCapacity: Int32? = nil) {
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.instanceFleetId = instanceFleetId
            self.targetSpotCapacity = targetSpotCapacity
        }

    }

    public struct ListInstanceGroupsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The list of instance groups for the cluster and given filters.
        public var instanceGroups: [InstanceGroup]? = nil

        public init() {}

        public init(marker: String? = nil, instanceGroups: [InstanceGroup]? = nil) {
            self.marker = marker
            self.instanceGroups = instanceGroups
        }

    }

    public struct SecurityConfigurationSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the security configuration.
        public var name: String? = nil
        /// The date and time the security configuration was created.
        public var creationDateTime: Date? = nil

        public init() {}

        public init(name: String? = nil, creationDateTime: Date? = nil) {
            self.name = name
            self.creationDateTime = creationDateTime
        }

    }

    public struct AddInstanceFleetOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier of the cluster.
        public var clusterId: String? = nil
        /// The unique identifier of the instance fleet.
        public var instanceFleetId: String? = nil

        public init() {}

        public init(clusterId: String? = nil, instanceFleetId: String? = nil) {
            self.clusterId = clusterId
            self.instanceFleetId = instanceFleetId
        }

    }

    public struct ListBootstrapActionsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The bootstrap actions associated with the cluster.
        public var bootstrapActions: [Command]? = nil

        public init() {}

        public init(marker: String? = nil, bootstrapActions: [Command]? = nil) {
            self.marker = marker
            self.bootstrapActions = bootstrapActions
        }

    }

    public struct CancelStepsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of StepIDs to cancel. Use ListSteps to get steps and their states for the specified cluster.
        public var stepIds: [String]? = nil
        /// The ClusterID for which specified steps will be canceled. Use RunJobFlow and ListClusters to get ClusterIDs. 
        public var clusterId: String? = nil

        public init() {}

        public init(stepIds: [String]? = nil, clusterId: String? = nil) {
            self.stepIds = stepIds
            self.clusterId = clusterId
        }

    }

    public struct ModifyInstanceFleetInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier of the cluster.
        public var clusterId: String = ""
        /// The unique identifier of the instance fleet.
        public var instanceFleet: InstanceFleetModifyConfig = InstanceFleetModifyConfig()

        public init() {}

        public init(clusterId: String, instanceFleet: InstanceFleetModifyConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

    }

    public struct JobFlowInstancesConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  Describes the EC2 instances and instance configurations for clusters that use the instance fleet configuration.
        public var instanceFleets: [InstanceFleetConfig]? = nil
        /// The Hadoop version for the cluster. Valid inputs are "0.18" (deprecated), "0.20" (deprecated), "0.20.205" (deprecated), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
        public var hadoopVersion: String? = nil
        /// Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, the cluster launches in the normal Amazon Web Services cloud, outside of an Amazon VPC, if the account launching the cluster supports EC2 Classic networks in the region where the cluster launches. Amazon VPC currently does not support cluster compute quadruple extra large (cc1.4xlarge) instances. Thus you cannot specify the cc1.4xlarge instance type for clusters launched in an Amazon VPC.
        public var ec2SubnetId: String? = nil
        /// The identifier of the Amazon EC2 security group for the master node.
        public var emrManagedMasterSecurityGroup: String? = nil
        /// Specifies whether the cluster should remain available after completing all steps.
        public var keepJobFlowAliveWhenNoSteps: Bool? = nil
        /// The name of the EC2 key pair that can be used to ssh to the master node as the user called "hadoop."
        public var ec2KeyName: String? = nil
        /// Configuration for the instance groups in a cluster.
        public var instanceGroups: [InstanceGroupConfig]? = nil
        /// The EC2 instance type of the master node.
        public var masterInstanceType: String? = nil
        /// The identifier of the Amazon EC2 security group for the slave nodes.
        public var emrManagedSlaveSecurityGroup: String? = nil
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public var additionalMasterSecurityGroups: [String]? = nil
        /// The Availability Zone in which the cluster runs.
        public var placement: PlacementType? = nil
        /// The EC2 instance type of the slave nodes.
        public var slaveInstanceType: String? = nil
        /// Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public var ec2SubnetIds: [String]? = nil
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public var serviceAccessSecurityGroup: String? = nil
        /// A list of additional Amazon EC2 security group IDs for the slave nodes.
        public var additionalSlaveSecurityGroups: [String]? = nil
        /// The number of EC2 instances in the cluster.
        public var instanceCount: Int32? = nil
        /// Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Bool? = nil

        public init() {}

        public init(instanceFleets: [InstanceFleetConfig]? = nil, hadoopVersion: String? = nil, ec2SubnetId: String? = nil, emrManagedMasterSecurityGroup: String? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, ec2KeyName: String? = nil, instanceGroups: [InstanceGroupConfig]? = nil, masterInstanceType: String? = nil, emrManagedSlaveSecurityGroup: String? = nil, additionalMasterSecurityGroups: [String]? = nil, placement: PlacementType? = nil, slaveInstanceType: String? = nil, ec2SubnetIds: [String]? = nil, serviceAccessSecurityGroup: String? = nil, additionalSlaveSecurityGroups: [String]? = nil, instanceCount: Int32? = nil, terminationProtected: Bool? = nil) {
            self.instanceFleets = instanceFleets
            self.hadoopVersion = hadoopVersion
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.ec2KeyName = ec2KeyName
            self.instanceGroups = instanceGroups
            self.masterInstanceType = masterInstanceType
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.ec2SubnetIds = ec2SubnetIds
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.instanceCount = instanceCount
            self.terminationProtected = terminationProtected
        }

    }

    public struct InstanceTypeConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. This value is 1 for a master instance fleet, and must be greater than 0 for core and task instance fleets. 
        public var weightedCapacity: Int32? = nil
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%. 
        public var bidPrice: String? = nil
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number between 0 and 1000 (for example, 20 specifies 20%). If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public var bidPriceAsPercentageOfOnDemandPrice: Double? = nil
        /// An EC2 instance type, such as m3.xlarge. 
        public var instanceType: String = ""
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType. 
        public var ebsConfiguration: EbsConfiguration? = nil
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
        public var configurations: [Configuration]? = nil

        public init() {}

        public init(weightedCapacity: Int32? = nil, bidPrice: String? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, instanceType: String, ebsConfiguration: EbsConfiguration? = nil, configurations: [Configuration]? = nil) {
            self.weightedCapacity = weightedCapacity
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.instanceType = instanceType
            self.ebsConfiguration = ebsConfiguration
            self.configurations = configurations
        }

    }

    public struct TerminateJobFlowsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of job flows to be shutdown.
        public var jobFlowIds: [String] = []

        public init() {}

        public init(jobFlowIds: [String]) {
            self.jobFlowIds = jobFlowIds
        }

    }

    public struct HadoopJarStepConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        public var mainClass: String? = nil
        /// A path to a JAR file run during the step.
        public var jar: String = ""
        /// A list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public var properties: [KeyValue]? = nil
        /// A list of command line arguments passed to the JAR file's main function when executed.
        public var args: [String]? = nil

        public init() {}

        public init(mainClass: String? = nil, jar: String, properties: [KeyValue]? = nil, args: [String]? = nil) {
            self.mainClass = mainClass
            self.jar = jar
            self.properties = properties
            self.args = args
        }

    }

    public struct ShrinkPolicy: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
        public var instanceResizePolicy: InstanceResizePolicy? = nil
        /// The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
        public var decommissionTimeout: Int32? = nil

        public init() {}

        public init(instanceResizePolicy: InstanceResizePolicy? = nil, decommissionTimeout: Int32? = nil) {
            self.instanceResizePolicy = instanceResizePolicy
            self.decommissionTimeout = decommissionTimeout
        }

    }

    public struct ListBootstrapActionsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The cluster identifier for the bootstrap actions to list.
        public var clusterId: String = ""

        public init() {}

        public init(marker: String? = nil, clusterId: String) {
            self.marker = marker
            self.clusterId = clusterId
        }

    }

    public struct InstanceFleetTimeline: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time and date the instance fleet was ready to run jobs.
        public var readyDateTime: Date? = nil
        /// The time and date the instance fleet was created.
        public var creationDateTime: Date? = nil
        /// The time and date the instance fleet terminated.
        public var endDateTime: Date? = nil

        public init() {}

        public init(readyDateTime: Date? = nil, creationDateTime: Date? = nil, endDateTime: Date? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

    }

    public struct ScalingConstraints: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The upper boundary of EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
        public var maxCapacity: Int32 = 0
        /// The lower boundary of EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
        public var minCapacity: Int32 = 0

        public init() {}

        public init(maxCapacity: Int32, minCapacity: Int32) {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

    }

    public struct AutoScalingPolicyDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status of an automatic scaling policy. 
        public var status: AutoScalingPolicyStatus? = nil
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public var rules: [ScalingRule]? = nil
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public var constraints: ScalingConstraints? = nil

        public init() {}

        public init(status: AutoScalingPolicyStatus? = nil, rules: [ScalingRule]? = nil, constraints: ScalingConstraints? = nil) {
            self.status = status
            self.rules = rules
            self.constraints = constraints
        }

    }

    public struct SupportedProductConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the product configuration.
        public var name: String? = nil
        /// The list of user-supplied arguments.
        public var args: [String]? = nil

        public init() {}

        public init(name: String? = nil, args: [String]? = nil) {
            self.name = name
            self.args = args
        }

    }

    public struct InstanceTypeSpecification: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
        public var weightedCapacity: Int32? = nil
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD.
        public var bidPrice: String? = nil
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType.
        public var ebsBlockDevices: [EbsBlockDevice]? = nil
        /// Evaluates to TRUE when the specified InstanceType is EBS-optimized.
        public var ebsOptimized: Bool? = nil
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%).
        public var bidPriceAsPercentageOfOnDemandPrice: Double? = nil
        /// The EC2 instance type, for example m3.xlarge.
        public var instanceType: String? = nil
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
        public var configurations: [Configuration]? = nil

        public init() {}

        public init(weightedCapacity: Int32? = nil, bidPrice: String? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, ebsOptimized: Bool? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, instanceType: String? = nil, configurations: [Configuration]? = nil) {
            self.weightedCapacity = weightedCapacity
            self.bidPrice = bidPrice
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.instanceType = instanceType
            self.configurations = configurations
        }

    }

    public struct StepExecutionStatusDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The start date and time of the step.
        public var startDateTime: Date? = nil
        /// A description of the step's current state.
        public var lastStateChangeReason: String? = nil
        /// The creation date and time of the step.
        public var creationDateTime: Date = Date()
        /// The completion date and time of the step.
        public var endDateTime: Date? = nil
        /// The state of the step.
        public var state: String = ""

        public init() {}

        public init(startDateTime: Date? = nil, lastStateChangeReason: String? = nil, creationDateTime: Date, endDateTime: Date? = nil, state: String) {
            self.startDateTime = startDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.state = state
        }

    }

    public struct RunJobFlowInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of steps to run.
        public var steps: [StepConfig]? = nil
        ///  Amazon EMR releases 4.x or later.  The release label for the Amazon EMR release. For Amazon EMR 3.x and 2.x AMIs, use amiVersion instead instead of ReleaseLabel.
        public var releaseLabel: String? = nil
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and greater, use Applications.  A list of strings that indicates third-party software to use. For more information, see Use Third Party Applications with Amazon EMR. Currently supported values are:   "mapr-m3" - launch the job flow using MapR M3 Edition.   "mapr-m5" - launch the job flow using MapR M5 Edition.  
        public var supportedProducts: [String]? = nil
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public var autoScalingRole: String? = nil
        /// The name of a security configuration to apply to the cluster.
        public var securityConfiguration: String? = nil
        /// A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
        public var tags: [Tag]? = nil
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and greater, use ReleaseLabel.  The version of the Amazon Machine Image (AMI) to use when launching Amazon EC2 instances in the job flow. The following values are valid:   The version number of the AMI to use, for example, "2.0."   If the AMI supports multiple versions of Hadoop (for example, AMI 1.0 supports both Hadoop 0.18 and 0.20) you can use the JobFlowInstancesConfig HadoopVersion parameter to modify the version of Hadoop from the defaults shown above. For details about the AMI versions currently supported by Amazon Elastic MapReduce, see AMI Versions Supported in Elastic MapReduce in the Amazon Elastic MapReduce Developer Guide.   Previously, the EMR AMI version API parameter options allowed you to use latest for the latest AMI version rather than specify a numerical value. Some regions no longer support this deprecated option as they only have a newer release label version of EMR, which requires you to specify an EMR release label release (EMR 4.x or later). 
        public var amiVersion: String? = nil
        /// Whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and (if they have the proper policy permissions set) manage the cluster. If it is set to false, only the IAM user that created the cluster can view and manage it.
        public var visibleToAllUsers: Bool? = nil
        ///  Amazon EMR releases 4.x or later.  A list of applications for the cluster. Valid values are: "Hadoop", "Hive", "Mahout", "Pig", and "Spark." They are case insensitive.
        public var applications: [Application]? = nil
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public var serviceRole: String? = nil
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and greater, use Applications.  A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the Amazon EMR Developer Guide. Supported values are:   "mapr-m3" - launch the cluster using MapR M3 Edition.   "mapr-m5" - launch the cluster using MapR M5 Edition.   "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.   "mapr-m7" - launch the cluster using MapR M7 Edition.   "hunk" - launch the cluster with the Hunk Big Data Analtics Platform.   "hue"- launch the cluster with Hue installed.   "spark" - launch the cluster with Apache Spark installed.   "ganglia" - launch the cluster with the Ganglia Monitoring System installed.  
        public var newSupportedProducts: [SupportedProductConfig]? = nil
        /// Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
        public var jobFlowRole: String? = nil
        /// A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
        public var bootstrapActions: [BootstrapActionConfig]? = nil
        /// The name of the job flow.
        public var name: String = ""
        /// Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: String? = nil
        /// A JSON string for selecting additional features.
        public var additionalInfo: String? = nil
        /// The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
        public var logUri: String? = nil
        /// A specification of the number and type of Amazon EC2 instances.
        public var instances: JobFlowInstancesConfig = JobFlowInstancesConfig()
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for the EMR cluster you are creating.
        public var configurations: [Configuration]? = nil

        public init() {}

        public init(steps: [StepConfig]? = nil, releaseLabel: String? = nil, supportedProducts: [String]? = nil, autoScalingRole: String? = nil, securityConfiguration: String? = nil, tags: [Tag]? = nil, amiVersion: String? = nil, visibleToAllUsers: Bool? = nil, applications: [Application]? = nil, serviceRole: String? = nil, newSupportedProducts: [SupportedProductConfig]? = nil, jobFlowRole: String? = nil, bootstrapActions: [BootstrapActionConfig]? = nil, name: String, scaleDownBehavior: String? = nil, additionalInfo: String? = nil, logUri: String? = nil, instances: JobFlowInstancesConfig, configurations: [Configuration]? = nil) {
            self.steps = steps
            self.releaseLabel = releaseLabel
            self.supportedProducts = supportedProducts
            self.autoScalingRole = autoScalingRole
            self.securityConfiguration = securityConfiguration
            self.tags = tags
            self.amiVersion = amiVersion
            self.visibleToAllUsers = visibleToAllUsers
            self.applications = applications
            self.serviceRole = serviceRole
            self.newSupportedProducts = newSupportedProducts
            self.jobFlowRole = jobFlowRole
            self.bootstrapActions = bootstrapActions
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.additionalInfo = additionalInfo
            self.logUri = logUri
            self.instances = instances
            self.configurations = configurations
        }

    }

    public struct RemoveAutoScalingPolicyOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct AddJobFlowStepsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  A list of StepConfig to be executed by the job flow. 
        public var steps: [StepConfig] = []
        /// A string that uniquely identifies the job flow. This identifier is returned by RunJobFlow and can also be obtained from ListClusters. 
        public var jobFlowId: String = ""

        public init() {}

        public init(steps: [StepConfig], jobFlowId: String) {
            self.steps = steps
            self.jobFlowId = jobFlowId
        }

    }

    public struct Cluster: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The release label for the Amazon EMR release. For Amazon EMR 3.x and 2.x AMIs, use amiVersion instead instead of ReleaseLabel.
        public var releaseLabel: String? = nil
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public var autoScalingRole: String? = nil
        /// The name of the security configuration applied to the cluster.
        public var securityConfiguration: String? = nil
        /// A list of tags associated with a cluster.
        public var tags: [Tag]? = nil
        /// Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to true, all IAM users of that AWS account can view and manage the cluster if they have the proper policy permissions set. If this value is false, only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action.
        public var visibleToAllUsers: Bool? = nil
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Int32? = nil
        /// The applications installed on this cluster.
        public var applications: [Application]? = nil
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public var serviceRole: String? = nil
        /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public var ec2InstanceAttributes: Ec2InstanceAttributes? = nil
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public var instanceCollectionType: String? = nil
        /// The unique identifier for the cluster.
        public var id: String? = nil
        /// The current status details about the cluster.
        public var status: ClusterStatus? = nil
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: String? = nil
        /// The name of the cluster.
        public var name: String? = nil
        /// The AMI version running on this cluster.
        public var runningAmiVersion: String? = nil
        /// The AMI version requested for this cluster.
        public var requestedAmiVersion: String? = nil
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public var logUri: String? = nil
        /// The public DNS name of the master EC2 instance.
        public var masterPublicDnsName: String? = nil
        /// Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public var terminationProtected: Bool? = nil
        ///  Amazon EMR releases 4.x or later.  The list of Configurations supplied to the EMR cluster.
        public var configurations: [Configuration]? = nil
        /// Specifies whether the cluster should terminate after completing all steps.
        public var autoTerminate: Bool? = nil

        public init() {}

        public init(releaseLabel: String? = nil, autoScalingRole: String? = nil, securityConfiguration: String? = nil, tags: [Tag]? = nil, visibleToAllUsers: Bool? = nil, normalizedInstanceHours: Int32? = nil, applications: [Application]? = nil, serviceRole: String? = nil, ec2InstanceAttributes: Ec2InstanceAttributes? = nil, instanceCollectionType: String? = nil, id: String? = nil, status: ClusterStatus? = nil, scaleDownBehavior: String? = nil, name: String? = nil, runningAmiVersion: String? = nil, requestedAmiVersion: String? = nil, logUri: String? = nil, masterPublicDnsName: String? = nil, terminationProtected: Bool? = nil, configurations: [Configuration]? = nil, autoTerminate: Bool? = nil) {
            self.releaseLabel = releaseLabel
            self.autoScalingRole = autoScalingRole
            self.securityConfiguration = securityConfiguration
            self.tags = tags
            self.visibleToAllUsers = visibleToAllUsers
            self.normalizedInstanceHours = normalizedInstanceHours
            self.applications = applications
            self.serviceRole = serviceRole
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.instanceCollectionType = instanceCollectionType
            self.id = id
            self.status = status
            self.scaleDownBehavior = scaleDownBehavior
            self.name = name
            self.runningAmiVersion = runningAmiVersion
            self.requestedAmiVersion = requestedAmiVersion
            self.logUri = logUri
            self.masterPublicDnsName = masterPublicDnsName
            self.terminationProtected = terminationProtected
            self.configurations = configurations
            self.autoTerminate = autoTerminate
        }

    }

    public struct StepDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the step status.
        public var executionStatusDetail: StepExecutionStatusDetail = StepExecutionStatusDetail()
        /// The step configuration.
        public var stepConfig: StepConfig = StepConfig()

        public init() {}

        public init(executionStatusDetail: StepExecutionStatusDetail, stepConfig: StepConfig) {
            self.executionStatusDetail = executionStatusDetail
            self.stepConfig = stepConfig
        }

    }

    public struct KeyValue: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value part of the identified key.
        public var value: String? = nil
        /// The unique identifier of a key value pair.
        public var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct DescribeClusterInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of the cluster to describe.
        public var clusterId: String = ""

        public init() {}

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

    }

    public struct DescribeStepInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of the cluster with steps to describe.
        public var clusterId: String = ""
        /// The identifier of the step to describe.
        public var stepId: String = ""

        public init() {}

        public init(clusterId: String, stepId: String) {
            self.clusterId = clusterId
            self.stepId = stepId
        }

    }

    public struct DescribeSecurityConfigurationInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the security configuration.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct RunJobFlowOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An unique identifier for the job flow.
        public var jobFlowId: String? = nil

        public init() {}

        public init(jobFlowId: String? = nil) {
            self.jobFlowId = jobFlowId
        }

    }

    public struct AddInstanceGroupsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Job flow in which to add the instance groups.
        public var jobFlowId: String = ""
        /// Instance groups to add.
        public var instanceGroups: [InstanceGroupConfig] = []

        public init() {}

        public init(jobFlowId: String, instanceGroups: [InstanceGroupConfig]) {
            self.jobFlowId = jobFlowId
            self.instanceGroups = instanceGroups
        }

    }

    public struct ClusterSummary: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The details about the current status of the cluster.
        public var status: ClusterStatus? = nil
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Int32? = nil
        /// The name of the cluster.
        public var name: String? = nil
        /// The unique identifier for the cluster.
        public var id: String? = nil

        public init() {}

        public init(status: ClusterStatus? = nil, normalizedInstanceHours: Int32? = nil, name: String? = nil, id: String? = nil) {
            self.status = status
            self.normalizedInstanceHours = normalizedInstanceHours
            self.name = name
            self.id = id
        }

    }

    public struct SetVisibleToAllUsersInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Identifiers of the job flows to receive the new visibility setting.
        public var jobFlowIds: [String] = []
        /// Whether the specified clusters are visible to all IAM users of the AWS account associated with the cluster. If this value is set to True, all IAM users of that AWS account can view and, if they have the proper IAM policy permissions set, manage the clusters. If it is set to False, only the IAM user that created a cluster can view and manage it.
        public var visibleToAllUsers: Bool = false

        public init() {}

        public init(jobFlowIds: [String], visibleToAllUsers: Bool) {
            self.jobFlowIds = jobFlowIds
            self.visibleToAllUsers = visibleToAllUsers
        }

    }

    public struct InstanceGroupModifyConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Unique ID of the instance group to expand or shrink.
        public var instanceGroupId: String = ""
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: ShrinkPolicy? = nil
        /// Target size for the instance group.
        public var instanceCount: Int32? = nil
        /// The EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
        public var eC2InstanceIdsToTerminate: [String]? = nil

        public init() {}

        public init(instanceGroupId: String, shrinkPolicy: ShrinkPolicy? = nil, instanceCount: Int32? = nil, eC2InstanceIdsToTerminate: [String]? = nil) {
            self.instanceGroupId = instanceGroupId
            self.shrinkPolicy = shrinkPolicy
            self.instanceCount = instanceCount
            self.eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate
        }

    }

    public struct InstanceGroupStateChangeReason: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The programmable code for the state change reason.
        public var code: String? = nil
        /// The status change reason description.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct StepStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The reason for the step execution status change.
        public var stateChangeReason: StepStateChangeReason? = nil
        /// The details for the step failure including reason, message, and log file path where the root cause was identified.
        public var failureDetails: FailureDetails? = nil
        /// The execution state of the cluster step.
        public var state: String? = nil
        /// The timeline of the cluster step status over time.
        public var timeline: StepTimeline? = nil

        public init() {}

        public init(stateChangeReason: StepStateChangeReason? = nil, failureDetails: FailureDetails? = nil, state: String? = nil, timeline: StepTimeline? = nil) {
            self.stateChangeReason = stateChangeReason
            self.failureDetails = failureDetails
            self.state = state
            self.timeline = timeline
        }

    }

    public struct EbsBlockDevice: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public var volumeSpecification: VolumeSpecification? = nil
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public var device: String? = nil

        public init() {}

        public init(volumeSpecification: VolumeSpecification? = nil, device: String? = nil) {
            self.volumeSpecification = volumeSpecification
            self.device = device
        }

    }

    public struct StepStateChangeReason: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
        public var code: String? = nil
        /// The descriptive message for the state change reason.
        public var message: String? = nil

        public init() {}

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

    }

    public struct ClusterStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current state of the cluster.
        public var state: String? = nil
        /// A timeline that represents the status of a cluster over the lifetime of the cluster.
        public var timeline: ClusterTimeline? = nil
        /// The reason for the cluster status change.
        public var stateChangeReason: ClusterStateChangeReason? = nil

        public init() {}

        public init(state: String? = nil, timeline: ClusterTimeline? = nil, stateChangeReason: ClusterStateChangeReason? = nil) {
            self.state = state
            self.timeline = timeline
            self.stateChangeReason = stateChangeReason
        }

    }

    public struct ModifyInstanceGroupsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the cluster to which the instance group belongs.
        public var clusterId: String? = nil
        /// Instance groups to change.
        public var instanceGroups: [InstanceGroupModifyConfig]? = nil

        public init() {}

        public init(clusterId: String? = nil, instanceGroups: [InstanceGroupModifyConfig]? = nil) {
            self.clusterId = clusterId
            self.instanceGroups = instanceGroups
        }

    }

    public struct DeleteSecurityConfigurationOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ListClustersOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil
        /// The list of clusters for the account based on the given filters.
        public var clusters: [ClusterSummary]? = nil

        public init() {}

        public init(marker: String? = nil, clusters: [ClusterSummary]? = nil) {
            self.marker = marker
            self.clusters = clusters
        }

    }

    public struct InstanceGroupConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Bid price for each EC2 instance in the instance group when launching nodes as Spot Instances, expressed in USD.
        public var bidPrice: String? = nil
        /// Market type of the EC2 instances used to create a cluster node.
        public var market: String? = nil
        /// The role of the instance group in the cluster.
        public var instanceRole: String = ""
        /// Friendly name given to the instance group.
        public var name: String? = nil
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public var autoScalingPolicy: AutoScalingPolicy? = nil
        /// Target number of instances for the instance group.
        public var instanceCount: Int32 = 0
        /// The EC2 instance type for all instances in the instance group.
        public var instanceType: String = ""
        /// EBS configurations that will be attached to each EC2 instance in the instance group.
        public var ebsConfiguration: EbsConfiguration? = nil
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [Configuration]? = nil

        public init() {}

        public init(bidPrice: String? = nil, market: String? = nil, instanceRole: String, name: String? = nil, autoScalingPolicy: AutoScalingPolicy? = nil, instanceCount: Int32, instanceType: String, ebsConfiguration: EbsConfiguration? = nil, configurations: [Configuration]? = nil) {
            self.bidPrice = bidPrice
            self.market = market
            self.instanceRole = instanceRole
            self.name = name
            self.autoScalingPolicy = autoScalingPolicy
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.ebsConfiguration = ebsConfiguration
            self.configurations = configurations
        }

    }

    public struct InstanceGroupDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Unique identifier for the instance group.
        public var instanceGroupId: String? = nil
        /// Bid price for EC2 Instances when launching nodes as Spot Instances, expressed in USD.
        public var bidPrice: String? = nil
        /// Actual count of running instances.
        public var instanceRunningCount: Int32 = 0
        /// The date/time the instance group was terminated.
        public var endDateTime: Date? = nil
        /// State of instance group. The following values are deprecated: STARTING, TERMINATED, and FAILED.
        public var state: String = ""
        /// Details regarding the state of the instance group.
        public var lastStateChangeReason: String? = nil
        /// EC2 instance type.
        public var instanceType: String = ""
        /// The date/time the instance group was available to the cluster.
        public var readyDateTime: Date? = nil
        /// The date/time the instance group was created.
        public var creationDateTime: Date = Date()
        /// Target number of instances to run in the instance group.
        public var instanceRequestCount: Int32 = 0
        /// Friendly name for the instance group.
        public var name: String? = nil
        /// Instance group role in the cluster
        public var instanceRole: String = ""
        /// Market type of the EC2 instances used to create a cluster node.
        public var market: String = ""
        /// The date/time the instance group was started.
        public var startDateTime: Date? = nil

        public init() {}

        public init(instanceGroupId: String? = nil, bidPrice: String? = nil, instanceRunningCount: Int32, endDateTime: Date? = nil, state: String, lastStateChangeReason: String? = nil, instanceType: String, readyDateTime: Date? = nil, creationDateTime: Date, instanceRequestCount: Int32, name: String? = nil, instanceRole: String, market: String, startDateTime: Date? = nil) {
            self.instanceGroupId = instanceGroupId
            self.bidPrice = bidPrice
            self.instanceRunningCount = instanceRunningCount
            self.endDateTime = endDateTime
            self.state = state
            self.lastStateChangeReason = lastStateChangeReason
            self.instanceType = instanceType
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.instanceRequestCount = instanceRequestCount
            self.name = name
            self.instanceRole = instanceRole
            self.market = market
            self.startDateTime = startDateTime
        }

    }

    public struct ListStepsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The filtered list of steps for the cluster.
        public var steps: [StepSummary]? = nil
        /// The pagination token that indicates the next set of results to retrieve.
        public var marker: String? = nil

        public init() {}

        public init(steps: [StepSummary]? = nil, marker: String? = nil) {
            self.steps = steps
            self.marker = marker
        }

    }

    public struct HadoopStepConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
        public var mainClass: String? = nil
        /// The path to the JAR file that runs during the step.
        public var jar: String? = nil
        /// The list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public var properties: [String: String]? = nil
        /// The list of command line arguments to pass to the JAR file's main function for execution.
        public var args: [String]? = nil

        public init() {}

        public init(mainClass: String? = nil, jar: String? = nil, properties: [String: String]? = nil, args: [String]? = nil) {
            self.mainClass = mainClass
            self.jar = jar
            self.properties = properties
            self.args = args
        }

    }

    public struct EbsConfiguration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Indicates whether an Amazon EBS volume is EBS-optimized.
        public var ebsOptimized: Bool? = nil
        /// An array of Amazon EBS volume specifications attached to a cluster instance.
        public var ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]? = nil

        public init() {}

        public init(ebsOptimized: Bool? = nil, ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]? = nil) {
            self.ebsOptimized = ebsOptimized
            self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
        }

    }

    public struct InstanceTimeline: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the instance was ready to perform tasks.
        public var readyDateTime: Date? = nil
        /// The creation date and time of the instance.
        public var creationDateTime: Date? = nil
        /// The date and time when the instance was terminated.
        public var endDateTime: Date? = nil

        public init() {}

        public init(readyDateTime: Date? = nil, creationDateTime: Date? = nil, endDateTime: Date? = nil) {
            self.readyDateTime = readyDateTime
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
        }

    }

    public struct InstanceResizePolicy: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specific list of instances to be terminated when shrinking an instance group.
        public var instancesToTerminate: [String]? = nil
        /// Decommissioning timeout override for the specific list of instances to be terminated.
        public var instanceTerminationTimeout: Int32? = nil
        /// Specific list of instances to be protected when shrinking an instance group.
        public var instancesToProtect: [String]? = nil

        public init() {}

        public init(instancesToTerminate: [String]? = nil, instanceTerminationTimeout: Int32? = nil, instancesToProtect: [String]? = nil) {
            self.instancesToTerminate = instancesToTerminate
            self.instanceTerminationTimeout = instanceTerminationTimeout
            self.instancesToProtect = instancesToProtect
        }

    }

    public struct AddTagsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon EMR resource identifier to which tags will be added. This value must be a cluster identifier.
        public var resourceId: String = ""
        /// A list of tags to associate with a cluster and propagate to EC2 instances. Tags are user-defined key/value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
        public var tags: [Tag] = []

        public init() {}

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

    }

    public struct ScriptBootstrapActionConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of command line arguments to pass to the bootstrap action script.
        public var args: [String]? = nil
        /// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
        public var path: String = ""

        public init() {}

        public init(args: [String]? = nil, path: String) {
            self.args = args
            self.path = path
        }

    }

    public struct AddInstanceFleetInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier of the cluster.
        public var clusterId: String = ""
        /// Specifies the configuration of the instance fleet.
        public var instanceFleet: InstanceFleetConfig = InstanceFleetConfig()

        public init() {}

        public init(clusterId: String, instanceFleet: InstanceFleetConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

    }

    public struct SpotProvisioningSpecification: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
        public var timeoutDurationMinutes: Int32 = 0
        /// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired. Spot instances are not uprovisioned within the Spot provisioining timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND to fulfill the remaining capacity.
        public var timeoutAction: String = ""
        /// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. 
        public var blockDurationMinutes: Int32? = nil

        public init() {}

        public init(timeoutDurationMinutes: Int32, timeoutAction: String, blockDurationMinutes: Int32? = nil) {
            self.timeoutDurationMinutes = timeoutDurationMinutes
            self.timeoutAction = timeoutAction
            self.blockDurationMinutes = blockDurationMinutes
        }

    }

    public struct JobFlowExecutionStatusDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the job flow was ready to start running bootstrap actions.
        public var readyDateTime: Date? = nil
        /// The start date and time of the job flow.
        public var startDateTime: Date? = nil
        /// Description of the job flow last changed state.
        public var lastStateChangeReason: String? = nil
        /// The creation date and time of the job flow.
        public var creationDateTime: Date = Date()
        /// The completion date and time of the job flow.
        public var endDateTime: Date? = nil
        /// The state of the job flow.
        public var state: String = ""

        public init() {}

        public init(readyDateTime: Date? = nil, startDateTime: Date? = nil, lastStateChangeReason: String? = nil, creationDateTime: Date, endDateTime: Date? = nil, state: String) {
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.state = state
        }

    }

    public struct RemoveAutoScalingPolicyInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public var instanceGroupId: String = ""
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public var clusterId: String = ""

        public init() {}

        public init(instanceGroupId: String, clusterId: String) {
            self.instanceGroupId = instanceGroupId
            self.clusterId = clusterId
        }

    }

}