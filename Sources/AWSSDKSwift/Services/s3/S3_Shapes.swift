// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension S3 {

    public struct DeleteBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct MetricsAndOperator: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of tags used when evaluating an AND predicate.
        public var tags: [Tag]? = nil
        /// The prefix used when evaluating an AND predicate.
        public var prefix: String? = nil

        public init() {}

        public init(tags: [Tag]? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct LifecycleExpiration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public var expiredObjectDeleteMarker: Bool? = nil
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public var date: Date? = nil
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public var days: Int32? = nil

        public init() {}

        public init(expiredObjectDeleteMarker: Bool? = nil, date: Date? = nil, days: Int32? = nil) {
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
            self.date = date
            self.days = days
        }

        public init(dictionary: [String: Any]) throws {
            self.expiredObjectDeleteMarker = dictionary["ExpiredObjectDeleteMarker"] as? Bool
            self.date = dictionary["Date"] as? Date
            self.days = dictionary["Days"] as? Int32
        }
    }

    public struct PutBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CORSConfiguration"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        public var cORSConfiguration: CORSConfiguration = CORSConfiguration()
        public var contentMD5: String? = nil

        public init() {}

        public init(bucket: String, cORSConfiguration: CORSConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.cORSConfiguration = cORSConfiguration
            self.contentMD5 = contentMD5
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let cORSConfiguration = dictionary["CORSConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CORSConfiguration") }
            self.cORSConfiguration = try S3.CORSConfiguration(dictionary: cORSConfiguration)
            self.contentMD5 = dictionary["ContentMD5"] as? String
        }
    }

    public struct DeleteBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct Rule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var iD: String? = nil
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public var status: String = ""
        public var abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil
        public var noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil
        public var transition: Transition? = nil
        public var noncurrentVersionTransition: NoncurrentVersionTransition? = nil
        public var expiration: LifecycleExpiration? = nil
        /// Prefix identifying one or more objects to which the rule applies.
        public var prefix: String = ""

        public init() {}

        public init(iD: String? = nil, status: String, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, transition: Transition? = nil, noncurrentVersionTransition: NoncurrentVersionTransition? = nil, expiration: LifecycleExpiration? = nil, prefix: String) {
            self.iD = iD
            self.status = status
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.transition = transition
            self.noncurrentVersionTransition = noncurrentVersionTransition
            self.expiration = expiration
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            self.iD = dictionary["ID"] as? String
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            if let abortIncompleteMultipartUpload = dictionary["AbortIncompleteMultipartUpload"] as? [String: Any] { self.abortIncompleteMultipartUpload = try S3.AbortIncompleteMultipartUpload(dictionary: abortIncompleteMultipartUpload) }
            if let noncurrentVersionExpiration = dictionary["NoncurrentVersionExpiration"] as? [String: Any] { self.noncurrentVersionExpiration = try S3.NoncurrentVersionExpiration(dictionary: noncurrentVersionExpiration) }
            if let transition = dictionary["Transition"] as? [String: Any] { self.transition = try S3.Transition(dictionary: transition) }
            if let noncurrentVersionTransition = dictionary["NoncurrentVersionTransition"] as? [String: Any] { self.noncurrentVersionTransition = try S3.NoncurrentVersionTransition(dictionary: noncurrentVersionTransition) }
            if let expiration = dictionary["Expiration"] as? [String: Any] { self.expiration = try S3.LifecycleExpiration(dictionary: expiration) }
            guard let prefix = dictionary["Prefix"] as? String else { throw InitializableError.missingRequiredParam("Prefix") }
            self.prefix = prefix
        }
    }

    public struct GetBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct GetBucketLifecycleConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct LifecycleRuleAndOperator: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public var tags: [Tag]? = nil
        public var prefix: String? = nil

        public init() {}

        public init(tags: [Tag]? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct GetBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct CopyObjectResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var eTag: String? = nil
        public var lastModified: Date? = nil

        public init() {}

        public init(eTag: String? = nil, lastModified: Date? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.lastModified = dictionary["LastModified"] as? Date
        }
    }

    public struct PutBucketAccelerateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "AccelerateConfiguration"
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// Name of the bucket for which the accelerate configuration is set.
        public var bucket: String = ""
        /// Specifies the Accelerate Configuration you want to set for the bucket.
        public var accelerateConfiguration: AccelerateConfiguration = AccelerateConfiguration()

        public init() {}

        public init(bucket: String, accelerateConfiguration: AccelerateConfiguration) {
            self.bucket = bucket
            self.accelerateConfiguration = accelerateConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let accelerateConfiguration = dictionary["AccelerateConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("AccelerateConfiguration") }
            self.accelerateConfiguration = try S3.AccelerateConfiguration(dictionary: accelerateConfiguration)
        }
    }

    public struct GetBucketLocationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var locationConstraint: String? = nil

        public init() {}

        public init(locationConstraint: String? = nil) {
            self.locationConstraint = locationConstraint
        }

        public init(dictionary: [String: Any]) throws {
            self.locationConstraint = dictionary["LocationConstraint"] as? String
        }
    }

    public struct RedirectAllRequestsTo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name of the host where requests will be redirected.
        public var hostName: String = ""
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: String? = nil

        public init() {}

        public init(hostName: String, protocol: String? = nil) {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostName = dictionary["HostName"] as? String else { throw InitializableError.missingRequiredParam("HostName") }
            self.hostName = hostName
            self.`protocol` = dictionary["Protocol"] as? String
        }
    }

    public struct UploadPartCopyOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CopyPartResult"
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-copy-source-version-id": "CopySourceVersionId", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-charged": "RequestCharged", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5"]
        }
        public var copyPartResult: CopyPartResult? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        /// The version of the source object that was copied, if you have enabled versioning on the source bucket.
        public var copySourceVersionId: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil
        public var requestCharged: String? = nil

        public init() {}

        public init(copyPartResult: CopyPartResult? = nil, sSECustomerKeyMD5: String? = nil, copySourceVersionId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerAlgorithm: String? = nil, serverSideEncryption: String? = nil, requestCharged: String? = nil) {
            self.copyPartResult = copyPartResult
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceVersionId = copySourceVersionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            if let copyPartResult = dictionary["CopyPartResult"] as? [String: Any] { self.copyPartResult = try S3.CopyPartResult(dictionary: copyPartResult) }
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.copySourceVersionId = dictionary["CopySourceVersionId"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct Tagging: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var tagSet: [Tag] = []

        public init() {}

        public init(tagSet: [Tag]) {
            self.tagSet = tagSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let tagSet = dictionary["TagSet"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("TagSet") }
            self.tagSet = try tagSet.map({ try Tag(dictionary: $0) })
        }
    }

    public struct GetBucketAnalyticsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "AnalyticsConfiguration"
        /// The configuration and any analyses for the analytics filter.
        public var analyticsConfiguration: AnalyticsConfiguration? = nil

        public init() {}

        public init(analyticsConfiguration: AnalyticsConfiguration? = nil) {
            self.analyticsConfiguration = analyticsConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let analyticsConfiguration = dictionary["AnalyticsConfiguration"] as? [String: Any] { self.analyticsConfiguration = try S3.AnalyticsConfiguration(dictionary: analyticsConfiguration) }
        }
    }

    public struct Owner: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var iD: String? = nil
        public var displayName: String? = nil

        public init() {}

        public init(iD: String? = nil, displayName: String? = nil) {
            self.iD = iD
            self.displayName = displayName
        }

        public init(dictionary: [String: Any]) throws {
            self.iD = dictionary["ID"] as? String
            self.displayName = dictionary["DisplayName"] as? String
        }
    }

    public struct CreateMultipartUploadOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-charged": "RequestCharged", "x-amz-abort-date": "AbortDate", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-abort-rule-id": "AbortRuleId"]
        }
        /// Name of the bucket to which the multipart upload was initiated.
        public var bucket: String? = nil
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public var abortDate: Date? = nil
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public var abortRuleId: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        /// Object key for which the multipart upload was initiated.
        public var key: String? = nil
        /// ID for the initiated multipart upload.
        public var uploadId: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        public var requestCharged: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil

        public init() {}

        public init(bucket: String? = nil, abortDate: Date? = nil, abortRuleId: String? = nil, sSECustomerKeyMD5: String? = nil, key: String? = nil, uploadId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: String? = nil, serverSideEncryption: String? = nil) {
            self.bucket = bucket
            self.abortDate = abortDate
            self.abortRuleId = abortRuleId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.key = key
            self.uploadId = uploadId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
        }

        public init(dictionary: [String: Any]) throws {
            self.bucket = dictionary["Bucket"] as? String
            self.abortDate = dictionary["AbortDate"] as? Date
            self.abortRuleId = dictionary["AbortRuleId"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.key = dictionary["Key"] as? String
            self.uploadId = dictionary["UploadId"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
        }
    }

    public struct Object: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var lastModified: Date? = nil
        /// The class of storage used to store the object.
        public var storageClass: String? = nil
        public var key: String? = nil
        public var eTag: String? = nil
        public var owner: Owner? = nil
        public var size: Int32? = nil

        public init() {}

        public init(lastModified: Date? = nil, storageClass: String? = nil, key: String? = nil, eTag: String? = nil, owner: Owner? = nil, size: Int32? = nil) {
            self.lastModified = lastModified
            self.storageClass = storageClass
            self.key = key
            self.eTag = eTag
            self.owner = owner
            self.size = size
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModified = dictionary["LastModified"] as? Date
            self.storageClass = dictionary["StorageClass"] as? String
            self.key = dictionary["Key"] as? String
            self.eTag = dictionary["ETag"] as? String
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
            self.size = dictionary["Size"] as? Int32
        }
    }

    public struct CopyObjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-payer": "RequestPayer", "x-amz-copy-source-server-side-encryption-customer-key-MD5": "CopySourceSSECustomerKeyMD5", "x-amz-copy-source-if-modified-since": "CopySourceIfModifiedSince", "x-amz-grant-full-control": "GrantFullControl", "x-amz-acl": "ACL", "Content-Language": "ContentLanguage", "Content-Type": "ContentType", "x-amz-website-redirect-location": "WebsiteRedirectLocation", "x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "Content-Disposition": "ContentDisposition", "x-amz-copy-source-if-none-match": "CopySourceIfNoneMatch", "Content-Encoding": "ContentEncoding", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-grant-read-acp": "GrantReadACP", "x-amz-grant-write-acp": "GrantWriteACP", "x-amz-grant-read": "GrantRead", "x-amz-copy-source": "CopySource", "x-amz-copy-source-server-side-encryption-customer-algorithm": "CopySourceSSECustomerAlgorithm", "x-amz-copy-source-if-match": "CopySourceIfMatch", "x-amz-copy-source-server-side-encryption-customer-key": "CopySourceSSECustomerKey", "x-amz-tagging-directive": "TaggingDirective", "x-amz-metadata-directive": "MetadataDirective", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-tagging": "Tagging", "Expires": "Expires", "x-amz-storage-class": "StorageClass", "x-amz-copy-source-if-unmodified-since": "CopySourceIfUnmodifiedSince", "Cache-Control": "CacheControl"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// The tag-set for the object destination object this value must be used in conjunction with the TaggingDirective. The tag-set must be encoded as URL Query parameters
        public var tagging: String? = nil
        /// Specifies presentational information for the object.
        public var contentDisposition: String? = nil
        /// Copies the object if it has been modified since the specified time.
        public var copySourceIfModifiedSince: Date? = nil
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public var copySourceIfNoneMatch: String? = nil
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public var copySourceIfMatch: String? = nil
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public var copySourceSSECustomerKey: String? = nil
        /// The language the content is in.
        public var contentLanguage: String? = nil
        /// Allows grantee to read the object ACL.
        public var grantReadACP: String? = nil
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public var sSEKMSKeyId: String? = nil
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public var contentEncoding: String? = nil
        /// Allows grantee to write the ACL for the applicable object.
        public var grantWriteACP: String? = nil
        public var key: String = ""
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public var websiteRedirectLocation: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var copySourceSSECustomerKeyMD5: String? = nil
        /// Copies the object if it hasn't been modified since the specified time.
        public var copySourceIfUnmodifiedSince: Date? = nil
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public var sSECustomerKey: String? = nil
        /// Specifies caching behavior along the request/reply chain.
        public var cacheControl: String? = nil
        /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request.
        public var taggingDirective: String? = nil
        public var requestPayer: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public var grantFullControl: String? = nil
        /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.
        public var metadataDirective: String? = nil
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public var copySource: String = ""
        /// The canned ACL to apply to the object.
        public var aCL: String? = nil
        /// A map of metadata to store with the object in S3.
        public var metadata: [String: String]? = nil
        /// The date and time at which the object is no longer cacheable.
        public var expires: Date? = nil
        /// A standard MIME type describing the format of the object data.
        public var contentType: String? = nil
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public var storageClass: String? = nil
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public var copySourceSSECustomerAlgorithm: String? = nil
        /// Allows grantee to read the object data and its metadata.
        public var grantRead: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil

        public init() {}

        public init(bucket: String, tagging: String? = nil, contentDisposition: String? = nil, copySourceIfModifiedSince: Date? = nil, copySourceIfNoneMatch: String? = nil, copySourceIfMatch: String? = nil, copySourceSSECustomerKey: String? = nil, contentLanguage: String? = nil, grantReadACP: String? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, contentEncoding: String? = nil, grantWriteACP: String? = nil, key: String, websiteRedirectLocation: String? = nil, copySourceSSECustomerKeyMD5: String? = nil, copySourceIfUnmodifiedSince: Date? = nil, sSECustomerKey: String? = nil, cacheControl: String? = nil, taggingDirective: String? = nil, requestPayer: String? = nil, sSECustomerKeyMD5: String? = nil, grantFullControl: String? = nil, metadataDirective: String? = nil, copySource: String, aCL: String? = nil, metadata: [String: String]? = nil, expires: Date? = nil, contentType: String? = nil, storageClass: String? = nil, copySourceSSECustomerAlgorithm: String? = nil, grantRead: String? = nil, serverSideEncryption: String? = nil) {
            self.bucket = bucket
            self.tagging = tagging
            self.contentDisposition = contentDisposition
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.copySourceIfMatch = copySourceIfMatch
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.contentLanguage = contentLanguage
            self.grantReadACP = grantReadACP
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentEncoding = contentEncoding
            self.grantWriteACP = grantWriteACP
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.sSECustomerKey = sSECustomerKey
            self.cacheControl = cacheControl
            self.taggingDirective = taggingDirective
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.grantFullControl = grantFullControl
            self.metadataDirective = metadataDirective
            self.copySource = copySource
            self.aCL = aCL
            self.metadata = metadata
            self.expires = expires
            self.contentType = contentType
            self.storageClass = storageClass
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.grantRead = grantRead
            self.serverSideEncryption = serverSideEncryption
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.tagging = dictionary["Tagging"] as? String
            self.contentDisposition = dictionary["ContentDisposition"] as? String
            self.copySourceIfModifiedSince = dictionary["CopySourceIfModifiedSince"] as? Date
            self.copySourceIfNoneMatch = dictionary["CopySourceIfNoneMatch"] as? String
            self.copySourceIfMatch = dictionary["CopySourceIfMatch"] as? String
            self.copySourceSSECustomerKey = dictionary["CopySourceSSECustomerKey"] as? String
            self.contentLanguage = dictionary["ContentLanguage"] as? String
            self.grantReadACP = dictionary["GrantReadACP"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.contentEncoding = dictionary["ContentEncoding"] as? String
            self.grantWriteACP = dictionary["GrantWriteACP"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.websiteRedirectLocation = dictionary["WebsiteRedirectLocation"] as? String
            self.copySourceSSECustomerKeyMD5 = dictionary["CopySourceSSECustomerKeyMD5"] as? String
            self.copySourceIfUnmodifiedSince = dictionary["CopySourceIfUnmodifiedSince"] as? Date
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            self.cacheControl = dictionary["CacheControl"] as? String
            self.taggingDirective = dictionary["TaggingDirective"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.grantFullControl = dictionary["GrantFullControl"] as? String
            self.metadataDirective = dictionary["MetadataDirective"] as? String
            guard let copySource = dictionary["CopySource"] as? String else { throw InitializableError.missingRequiredParam("CopySource") }
            self.copySource = copySource
            self.aCL = dictionary["ACL"] as? String
            if let metadata = dictionary["Metadata"] as? [String: String] {
                self.metadata = metadata
            }
            self.expires = dictionary["Expires"] as? Date
            self.contentType = dictionary["ContentType"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            self.copySourceSSECustomerAlgorithm = dictionary["CopySourceSSECustomerAlgorithm"] as? String
            self.grantRead = dictionary["GrantRead"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
        }
    }

    public struct GetBucketLocationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct Grant: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the permission given to the grantee.
        public var permission: String? = nil
        public var grantee: Grantee? = nil

        public init() {}

        public init(permission: String? = nil, grantee: Grantee? = nil) {
            self.permission = permission
            self.grantee = grantee
        }

        public init(dictionary: [String: Any]) throws {
            self.permission = dictionary["Permission"] as? String
            if let grantee = dictionary["Grantee"] as? [String: Any] { self.grantee = try S3.Grantee(dictionary: grantee) }
        }
    }

    public struct InventoryDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        public var s3BucketDestination: InventoryS3BucketDestination = InventoryS3BucketDestination()

        public init() {}

        public init(s3BucketDestination: InventoryS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        public init(dictionary: [String: Any]) throws {
            guard let s3BucketDestination = dictionary["S3BucketDestination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3BucketDestination") }
            self.s3BucketDestination = try S3.InventoryS3BucketDestination(dictionary: s3BucketDestination)
        }
    }

    public struct ListObjectsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["marker": "Marker", "prefix": "Prefix", "max-keys": "MaxKeys", "delimiter": "Delimiter", "encoding-type": "EncodingType"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public var maxKeys: Int32? = nil
        /// Specifies the key to start with when listing objects in a bucket.
        public var marker: String? = nil
        /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
        public var requestPayer: String? = nil
        /// Limits the response to keys that begin with the specified prefix.
        public var prefix: String? = nil
        /// A delimiter is a character you use to group keys.
        public var delimiter: String? = nil
        public var encodingType: String? = nil

        public init() {}

        public init(bucket: String, maxKeys: Int32? = nil, marker: String? = nil, requestPayer: String? = nil, prefix: String? = nil, delimiter: String? = nil, encodingType: String? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.marker = marker
            self.requestPayer = requestPayer
            self.prefix = prefix
            self.delimiter = delimiter
            self.encodingType = encodingType
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.maxKeys = dictionary["MaxKeys"] as? Int32
            self.marker = dictionary["Marker"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.prefix = dictionary["Prefix"] as? String
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
        }
    }

    public struct PutBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "AnalyticsConfiguration"
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket to which an analytics configuration is stored.
        public var bucket: String = ""
        /// The configuration and any analyses for the analytics filter.
        public var analyticsConfiguration: AnalyticsConfiguration = AnalyticsConfiguration()
        /// The identifier used to represent an analytics configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, analyticsConfiguration: AnalyticsConfiguration, id: String) {
            self.bucket = bucket
            self.analyticsConfiguration = analyticsConfiguration
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let analyticsConfiguration = dictionary["AnalyticsConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("AnalyticsConfiguration") }
            self.analyticsConfiguration = try S3.AnalyticsConfiguration(dictionary: analyticsConfiguration)
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CloudFunctionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var cloudFunction: String? = nil
        public var invocationRole: String? = nil
        public var events: [String]? = nil
        public var event: String? = nil
        public var id: String? = nil

        public init() {}

        public init(cloudFunction: String? = nil, invocationRole: String? = nil, events: [String]? = nil, event: String? = nil, id: String? = nil) {
            self.cloudFunction = cloudFunction
            self.invocationRole = invocationRole
            self.events = events
            self.event = event
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.cloudFunction = dictionary["CloudFunction"] as? String
            self.invocationRole = dictionary["InvocationRole"] as? String
            if let events = dictionary["Events"] as? [String] {
                self.events = events
            }
            self.event = dictionary["Event"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct HeadObjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["If-Modified-Since": "IfModifiedSince", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "Range": "Range", "x-amz-request-payer": "RequestPayer", "If-Match": "IfMatch", "If-Unmodified-Since": "IfUnmodifiedSince", "If-None-Match": "IfNoneMatch", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5"]
        }
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId", "partNumber": "PartNumber"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public var sSECustomerKey: String? = nil
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public var ifUnmodifiedSince: Date? = nil
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
        public var partNumber: Int32? = nil
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public var range: String? = nil
        public var requestPayer: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// VersionId used to reference a specific version of the object.
        public var versionId: String? = nil
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public var ifNoneMatch: String? = nil
        public var key: String = ""
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public var ifModifiedSince: Date? = nil
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public var ifMatch: String? = nil

        public init() {}

        public init(bucket: String, sSECustomerKey: String? = nil, ifUnmodifiedSince: Date? = nil, partNumber: Int32? = nil, range: String? = nil, requestPayer: String? = nil, sSECustomerKeyMD5: String? = nil, versionId: String? = nil, sSECustomerAlgorithm: String? = nil, ifNoneMatch: String? = nil, key: String, ifModifiedSince: Date? = nil, ifMatch: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.partNumber = partNumber
            self.range = range
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.versionId = versionId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.ifNoneMatch = ifNoneMatch
            self.key = key
            self.ifModifiedSince = ifModifiedSince
            self.ifMatch = ifMatch
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            self.ifUnmodifiedSince = dictionary["IfUnmodifiedSince"] as? Date
            self.partNumber = dictionary["PartNumber"] as? Int32
            self.range = dictionary["Range"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.ifNoneMatch = dictionary["IfNoneMatch"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.ifModifiedSince = dictionary["IfModifiedSince"] as? Date
            self.ifMatch = dictionary["IfMatch"] as? String
        }
    }

    public struct GetBucketRequestPaymentOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies who pays for the download and request fees.
        public var payer: String? = nil

        public init() {}

        public init(payer: String? = nil) {
            self.payer = payer
        }

        public init(dictionary: [String: Any]) throws {
            self.payer = dictionary["Payer"] as? String
        }
    }

    public struct AbortMultipartUploadOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-charged": "RequestCharged"]
        }
        public var requestCharged: String? = nil

        public init() {}

        public init(requestCharged: String? = nil) {
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct PutObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Tagging"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var contentMD5: String? = nil
        public var tagging: Tagging = Tagging()
        public var key: String = ""
        public var versionId: String? = nil

        public init() {}

        public init(bucket: String, contentMD5: String? = nil, tagging: Tagging, key: String, versionId: String? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.tagging = tagging
            self.key = key
            self.versionId = versionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let tagging = dictionary["Tagging"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tagging") }
            self.tagging = try S3.Tagging(dictionary: tagging)
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.versionId = dictionary["VersionId"] as? String
        }
    }

    public struct CompletedMultipartUpload: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var parts: [CompletedPart]? = nil

        public init() {}

        public init(parts: [CompletedPart]? = nil) {
            self.parts = parts
        }

        public init(dictionary: [String: Any]) throws {
            if let parts = dictionary["Parts"] as? [[String: Any]] {
                self.parts = try parts.map({ try CompletedPart(dictionary: $0) })
            }
        }
    }

    public struct GetObjectOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Body"
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-tagging-count": "TagCount", "accept-ranges": "AcceptRanges", "Content-Language": "ContentLanguage", "Content-Type": "ContentType", "x-amz-website-redirect-location": "WebsiteRedirectLocation", "x-amz-server-side-encryption": "ServerSideEncryption", "Content-Disposition": "ContentDisposition", "x-amz-request-charged": "RequestCharged", "ETag": "ETag", "Content-Encoding": "ContentEncoding", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-mp-parts-count": "PartsCount", "Content-Length": "ContentLength", "x-amz-version-id": "VersionId", "x-amz-delete-marker": "DeleteMarker", "Last-Modified": "LastModified", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-storage-class": "StorageClass", "Expires": "Expires", "Content-Range": "ContentRange", "x-amz-replication-status": "ReplicationStatus", "x-amz-restore": "Restore", "x-amz-missing-meta": "MissingMeta", "x-amz-expiration": "Expiration", "Cache-Control": "CacheControl"]
        }
        /// The count of parts this object has.
        public var partsCount: Int32? = nil
        /// Specifies presentational information for the object.
        public var contentDisposition: String? = nil
        /// Version of the object.
        public var versionId: String? = nil
        public var replicationStatus: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// The language the content is in.
        public var contentLanguage: String? = nil
        /// The number of tags, if any, on the object.
        public var tagCount: Int32? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public var restore: String? = nil
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public var contentEncoding: String? = nil
        /// Size of the body in bytes.
        public var contentLength: Int64? = nil
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public var expiration: String? = nil
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public var websiteRedirectLocation: String? = nil
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public var eTag: String? = nil
        /// Object data.
        public var body: Data? = nil
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public var missingMeta: Int32? = nil
        /// Specifies caching behavior along the request/reply chain.
        public var cacheControl: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        public var acceptRanges: String? = nil
        /// Last modified date of the object
        public var lastModified: Date? = nil
        /// A map of metadata to store with the object in S3.
        public var metadata: [String: String]? = nil
        /// The date and time at which the object is no longer cacheable.
        public var expires: Date? = nil
        /// The portion of the object returned in the response.
        public var contentRange: String? = nil
        /// A standard MIME type describing the format of the object data.
        public var contentType: String? = nil
        public var storageClass: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil
        public var requestCharged: String? = nil
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public var deleteMarker: Bool? = nil

        public init() {}

        public init(partsCount: Int32? = nil, contentDisposition: String? = nil, versionId: String? = nil, replicationStatus: String? = nil, sSEKMSKeyId: String? = nil, contentLanguage: String? = nil, tagCount: Int32? = nil, sSECustomerAlgorithm: String? = nil, restore: String? = nil, contentEncoding: String? = nil, contentLength: Int64? = nil, expiration: String? = nil, websiteRedirectLocation: String? = nil, eTag: String? = nil, body: Data? = nil, missingMeta: Int32? = nil, cacheControl: String? = nil, sSECustomerKeyMD5: String? = nil, acceptRanges: String? = nil, lastModified: Date? = nil, metadata: [String: String]? = nil, expires: Date? = nil, contentRange: String? = nil, contentType: String? = nil, storageClass: String? = nil, serverSideEncryption: String? = nil, requestCharged: String? = nil, deleteMarker: Bool? = nil) {
            self.partsCount = partsCount
            self.contentDisposition = contentDisposition
            self.versionId = versionId
            self.replicationStatus = replicationStatus
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentLanguage = contentLanguage
            self.tagCount = tagCount
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.restore = restore
            self.contentEncoding = contentEncoding
            self.contentLength = contentLength
            self.expiration = expiration
            self.websiteRedirectLocation = websiteRedirectLocation
            self.eTag = eTag
            self.body = body
            self.missingMeta = missingMeta
            self.cacheControl = cacheControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acceptRanges = acceptRanges
            self.lastModified = lastModified
            self.metadata = metadata
            self.expires = expires
            self.contentRange = contentRange
            self.contentType = contentType
            self.storageClass = storageClass
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.partsCount = dictionary["PartsCount"] as? Int32
            self.contentDisposition = dictionary["ContentDisposition"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.replicationStatus = dictionary["ReplicationStatus"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.contentLanguage = dictionary["ContentLanguage"] as? String
            self.tagCount = dictionary["TagCount"] as? Int32
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.restore = dictionary["Restore"] as? String
            self.contentEncoding = dictionary["ContentEncoding"] as? String
            self.contentLength = dictionary["ContentLength"] as? Int64
            self.expiration = dictionary["Expiration"] as? String
            self.websiteRedirectLocation = dictionary["WebsiteRedirectLocation"] as? String
            self.eTag = dictionary["ETag"] as? String
            self.body = dictionary["Body"] as? Data
            self.missingMeta = dictionary["MissingMeta"] as? Int32
            self.cacheControl = dictionary["CacheControl"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.acceptRanges = dictionary["AcceptRanges"] as? String
            self.lastModified = dictionary["LastModified"] as? Date
            if let metadata = dictionary["Metadata"] as? [String: String] {
                self.metadata = metadata
            }
            self.expires = dictionary["Expires"] as? Date
            self.contentRange = dictionary["ContentRange"] as? String
            self.contentType = dictionary["ContentType"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
            self.deleteMarker = dictionary["DeleteMarker"] as? Bool
        }
    }

    public struct NotificationConfigurationDeprecated: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var queueConfiguration: QueueConfigurationDeprecated? = nil
        public var topicConfiguration: TopicConfigurationDeprecated? = nil
        public var cloudFunctionConfiguration: CloudFunctionConfiguration? = nil

        public init() {}

        public init(queueConfiguration: QueueConfigurationDeprecated? = nil, topicConfiguration: TopicConfigurationDeprecated? = nil, cloudFunctionConfiguration: CloudFunctionConfiguration? = nil) {
            self.queueConfiguration = queueConfiguration
            self.topicConfiguration = topicConfiguration
            self.cloudFunctionConfiguration = cloudFunctionConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let queueConfiguration = dictionary["QueueConfiguration"] as? [String: Any] { self.queueConfiguration = try S3.QueueConfigurationDeprecated(dictionary: queueConfiguration) }
            if let topicConfiguration = dictionary["TopicConfiguration"] as? [String: Any] { self.topicConfiguration = try S3.TopicConfigurationDeprecated(dictionary: topicConfiguration) }
            if let cloudFunctionConfiguration = dictionary["CloudFunctionConfiguration"] as? [String: Any] { self.cloudFunctionConfiguration = try S3.CloudFunctionConfiguration(dictionary: cloudFunctionConfiguration) }
        }
    }

    public struct Transition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The class of storage used to store the object.
        public var storageClass: String? = nil
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public var date: Date? = nil
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public var days: Int32? = nil

        public init() {}

        public init(storageClass: String? = nil, date: Date? = nil, days: Int32? = nil) {
            self.storageClass = storageClass
            self.date = date
            self.days = days
        }

        public init(dictionary: [String: Any]) throws {
            self.storageClass = dictionary["StorageClass"] as? String
            self.date = dictionary["Date"] as? Date
            self.days = dictionary["Days"] as? Int32
        }
    }

    public struct MetricsConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID used to identify the metrics configuration.
        public var id: String = ""
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
        public var filter: MetricsFilter? = nil

        public init() {}

        public init(id: String, filter: MetricsFilter? = nil) {
            self.id = id
            self.filter = filter
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.MetricsFilter(dictionary: filter) }
        }
    }

    public struct Condition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public var httpErrorCodeReturnedEquals: String? = nil
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        public var keyPrefixEquals: String? = nil

        public init() {}

        public init(httpErrorCodeReturnedEquals: String? = nil, keyPrefixEquals: String? = nil) {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }

        public init(dictionary: [String: Any]) throws {
            self.httpErrorCodeReturnedEquals = dictionary["HttpErrorCodeReturnedEquals"] as? String
            self.keyPrefixEquals = dictionary["KeyPrefixEquals"] as? String
        }
    }

    public struct VersioningConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public var mFADelete: String? = nil
        /// The versioning state of the bucket.
        public var status: String? = nil

        public init() {}

        public init(mFADelete: String? = nil, status: String? = nil) {
            self.mFADelete = mFADelete
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            self.mFADelete = dictionary["MFADelete"] as? String
            self.status = dictionary["Status"] as? String
        }
    }

    public struct AccelerateConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The accelerate configuration of the bucket.
        public var status: String? = nil

        public init() {}

        public init(status: String? = nil) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
        }
    }

    public struct PutBucketLoggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "BucketLoggingStatus"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var bucketLoggingStatus: BucketLoggingStatus = BucketLoggingStatus()

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, bucketLoggingStatus: BucketLoggingStatus) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.bucketLoggingStatus = bucketLoggingStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let bucketLoggingStatus = dictionary["BucketLoggingStatus"] as? [String: Any] else { throw InitializableError.missingRequiredParam("BucketLoggingStatus") }
            self.bucketLoggingStatus = try S3.BucketLoggingStatus(dictionary: bucketLoggingStatus)
        }
    }

    public struct GetBucketPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Policy"
        /// The bucket policy as a JSON document.
        public var policy: String? = nil

        public init() {}

        public init(policy: String? = nil) {
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            self.policy = dictionary["Policy"] as? String
        }
    }

    public struct ReplicationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of an IAM role for Amazon S3 to assume when replicating the objects.
        public var role: String = ""
        /// Container for information about a particular replication rule. Replication configuration must have at least one rule and can contain up to 1,000 rules.
        public var rules: [ReplicationRule] = []

        public init() {}

        public init(role: String, rules: [ReplicationRule]) {
            self.role = role
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            guard let role = dictionary["Role"] as? String else { throw InitializableError.missingRequiredParam("Role") }
            self.role = role
            guard let rules = dictionary["Rules"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Rules") }
            self.rules = try rules.map({ try ReplicationRule(dictionary: $0) })
        }
    }

    public struct ObjectVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Date and time the object was last modified.
        public var lastModified: Date? = nil
        /// Size in bytes of the object.
        public var size: Int32? = nil
        /// Version ID of an object.
        public var versionId: String? = nil
        /// The class of storage used to store the object.
        public var storageClass: String? = nil
        /// The object key.
        public var key: String? = nil
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public var isLatest: Bool? = nil
        public var eTag: String? = nil
        public var owner: Owner? = nil

        public init() {}

        public init(lastModified: Date? = nil, size: Int32? = nil, versionId: String? = nil, storageClass: String? = nil, key: String? = nil, isLatest: Bool? = nil, eTag: String? = nil, owner: Owner? = nil) {
            self.lastModified = lastModified
            self.size = size
            self.versionId = versionId
            self.storageClass = storageClass
            self.key = key
            self.isLatest = isLatest
            self.eTag = eTag
            self.owner = owner
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModified = dictionary["LastModified"] as? Date
            self.size = dictionary["Size"] as? Int32
            self.versionId = dictionary["VersionId"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            self.key = dictionary["Key"] as? String
            self.isLatest = dictionary["IsLatest"] as? Bool
            self.eTag = dictionary["ETag"] as? String
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
        }
    }

    public struct GetBucketReplicationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "ReplicationConfiguration"
        public var replicationConfiguration: ReplicationConfiguration? = nil

        public init() {}

        public init(replicationConfiguration: ReplicationConfiguration? = nil) {
            self.replicationConfiguration = replicationConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationConfiguration = dictionary["ReplicationConfiguration"] as? [String: Any] { self.replicationConfiguration = try S3.ReplicationConfiguration(dictionary: replicationConfiguration) }
        }
    }

    public struct PutBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "InventoryConfiguration"
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket where the inventory configuration will be stored.
        public var bucket: String = ""
        /// Specifies the inventory configuration.
        public var inventoryConfiguration: InventoryConfiguration = InventoryConfiguration()
        /// The ID used to identify the inventory configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, inventoryConfiguration: InventoryConfiguration, id: String) {
            self.bucket = bucket
            self.inventoryConfiguration = inventoryConfiguration
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let inventoryConfiguration = dictionary["InventoryConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("InventoryConfiguration") }
            self.inventoryConfiguration = try S3.InventoryConfiguration(dictionary: inventoryConfiguration)
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ListObjectsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var maxKeys: Int32? = nil
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public var isTruncated: Bool? = nil
        public var marker: String? = nil
        public var name: String? = nil
        public var prefix: String? = nil
        public var commonPrefixes: [CommonPrefix]? = nil
        public var contents: [Object]? = nil
        public var delimiter: String? = nil
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public var encodingType: String? = nil
        /// When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
        public var nextMarker: String? = nil

        public init() {}

        public init(maxKeys: Int32? = nil, isTruncated: Bool? = nil, marker: String? = nil, name: String? = nil, prefix: String? = nil, commonPrefixes: [CommonPrefix]? = nil, contents: [Object]? = nil, delimiter: String? = nil, encodingType: String? = nil, nextMarker: String? = nil) {
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.marker = marker
            self.name = name
            self.prefix = prefix
            self.commonPrefixes = commonPrefixes
            self.contents = contents
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.maxKeys = dictionary["MaxKeys"] as? Int32
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.marker = dictionary["Marker"] as? String
            self.name = dictionary["Name"] as? String
            self.prefix = dictionary["Prefix"] as? String
            if let commonPrefixes = dictionary["CommonPrefixes"] as? [[String: Any]] {
                self.commonPrefixes = try commonPrefixes.map({ try CommonPrefix(dictionary: $0) })
            }
            if let contents = dictionary["Contents"] as? [[String: Any]] {
                self.contents = try contents.map({ try Object(dictionary: $0) })
            }
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public struct CompleteMultipartUploadOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-version-id": "VersionId", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-charged": "RequestCharged", "x-amz-expiration": "Expiration", "x-amz-server-side-encryption": "ServerSideEncryption"]
        }
        public var bucket: String? = nil
        public var location: String? = nil
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public var expiration: String? = nil
        /// Version of the object.
        public var versionId: String? = nil
        public var key: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// Entity tag of the object.
        public var eTag: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil
        public var requestCharged: String? = nil

        public init() {}

        public init(bucket: String? = nil, location: String? = nil, expiration: String? = nil, versionId: String? = nil, key: String? = nil, sSEKMSKeyId: String? = nil, eTag: String? = nil, serverSideEncryption: String? = nil, requestCharged: String? = nil) {
            self.bucket = bucket
            self.location = location
            self.expiration = expiration
            self.versionId = versionId
            self.key = key
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            self.bucket = dictionary["Bucket"] as? String
            self.location = dictionary["Location"] as? String
            self.expiration = dictionary["Expiration"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.key = dictionary["Key"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.eTag = dictionary["ETag"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct NotificationConfigurationFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var key: S3KeyFilter? = nil

        public init() {}

        public init(key: S3KeyFilter? = nil) {
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            if let key = dictionary["Key"] as? [String: Any] { self.key = try S3.S3KeyFilter(dictionary: key) }
        }
    }

    public struct PutObjectAclRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "AccessControlPolicy"
        public static var headerParams: [String: String] {
            return ["x-amz-grant-write-acp": "GrantWriteACP", "Content-MD5": "ContentMD5", "x-amz-request-payer": "RequestPayer", "x-amz-grant-write": "GrantWrite", "x-amz-grant-read": "GrantRead", "x-amz-grant-full-control": "GrantFullControl", "x-amz-acl": "ACL", "x-amz-grant-read-acp": "GrantReadACP"]
        }
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var contentMD5: String? = nil
        public var accessControlPolicy: AccessControlPolicy? = nil
        /// Allows grantee to write the ACL for the applicable bucket.
        public var grantWriteACP: String? = nil
        public var requestPayer: String? = nil
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public var grantFullControl: String? = nil
        /// VersionId used to reference a specific version of the object.
        public var versionId: String? = nil
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public var grantWrite: String? = nil
        public var key: String = ""
        /// Allows grantee to read the bucket ACL.
        public var grantReadACP: String? = nil
        /// Allows grantee to list the objects in the bucket.
        public var grantRead: String? = nil
        /// The canned ACL to apply to the object.
        public var aCL: String? = nil

        public init() {}

        public init(bucket: String, contentMD5: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, grantWriteACP: String? = nil, requestPayer: String? = nil, grantFullControl: String? = nil, versionId: String? = nil, grantWrite: String? = nil, key: String, grantReadACP: String? = nil, grantRead: String? = nil, aCL: String? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.accessControlPolicy = accessControlPolicy
            self.grantWriteACP = grantWriteACP
            self.requestPayer = requestPayer
            self.grantFullControl = grantFullControl
            self.versionId = versionId
            self.grantWrite = grantWrite
            self.key = key
            self.grantReadACP = grantReadACP
            self.grantRead = grantRead
            self.aCL = aCL
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.contentMD5 = dictionary["ContentMD5"] as? String
            if let accessControlPolicy = dictionary["AccessControlPolicy"] as? [String: Any] { self.accessControlPolicy = try S3.AccessControlPolicy(dictionary: accessControlPolicy) }
            self.grantWriteACP = dictionary["GrantWriteACP"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.grantFullControl = dictionary["GrantFullControl"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.grantWrite = dictionary["GrantWrite"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.grantReadACP = dictionary["GrantReadACP"] as? String
            self.grantRead = dictionary["GrantRead"] as? String
            self.aCL = dictionary["ACL"] as? String
        }
    }

    public struct TopicConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon SNS topic ARN to which Amazon S3 will publish a message when it detects events of specified type.
        public var topicArn: String = ""
        public var filter: NotificationConfigurationFilter? = nil
        public var events: [String] = []
        public var id: String? = nil

        public init() {}

        public init(topicArn: String, filter: NotificationConfigurationFilter? = nil, events: [String], id: String? = nil) {
            self.topicArn = topicArn
            self.filter = filter
            self.events = events
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let topicArn = dictionary["TopicArn"] as? String else { throw InitializableError.missingRequiredParam("TopicArn") }
            self.topicArn = topicArn
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.NotificationConfigurationFilter(dictionary: filter) }
            guard let events = dictionary["Events"] as? [String] else { throw InitializableError.missingRequiredParam("Events") }
            self.events = events
            self.id = dictionary["Id"] as? String
        }
    }

    public struct RoutingRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        public var redirect: Redirect = Redirect()
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public var condition: Condition? = nil

        public init() {}

        public init(redirect: Redirect, condition: Condition? = nil) {
            self.redirect = redirect
            self.condition = condition
        }

        public init(dictionary: [String: Any]) throws {
            guard let redirect = dictionary["Redirect"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Redirect") }
            self.redirect = try S3.Redirect(dictionary: redirect)
            if let condition = dictionary["Condition"] as? [String: Any] { self.condition = try S3.Condition(dictionary: condition) }
        }
    }

    public struct LifecycleRuleFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// This tag must exist in the object's tag set in order for the rule to apply.
        public var tag: Tag? = nil
        public var and: LifecycleRuleAndOperator? = nil
        /// Prefix identifying one or more objects to which the rule applies.
        public var prefix: String? = nil

        public init() {}

        public init(tag: Tag? = nil, and: LifecycleRuleAndOperator? = nil, prefix: String? = nil) {
            self.tag = tag
            self.and = and
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [String: Any] { self.tag = try S3.Tag(dictionary: tag) }
            if let and = dictionary["And"] as? [String: Any] { self.and = try S3.LifecycleRuleAndOperator(dictionary: and) }
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct IndexDocument: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
        public var suffix: String = ""

        public init() {}

        public init(suffix: String) {
            self.suffix = suffix
        }

        public init(dictionary: [String: Any]) throws {
            guard let suffix = dictionary["Suffix"] as? String else { throw InitializableError.missingRequiredParam("Suffix") }
            self.suffix = suffix
        }
    }

    public struct HeadObjectOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-expiration": "Expiration", "Content-Length": "ContentLength", "Cache-Control": "CacheControl", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "accept-ranges": "AcceptRanges", "x-amz-version-id": "VersionId", "x-amz-delete-marker": "DeleteMarker", "Last-Modified": "LastModified", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "Content-Language": "ContentLanguage", "Content-Type": "ContentType", "x-amz-website-redirect-location": "WebsiteRedirectLocation", "x-amz-storage-class": "StorageClass", "Expires": "Expires", "Content-Disposition": "ContentDisposition", "x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-request-charged": "RequestCharged", "x-amz-replication-status": "ReplicationStatus", "x-amz-restore": "Restore", "x-amz-missing-meta": "MissingMeta", "ETag": "ETag", "Content-Encoding": "ContentEncoding", "x-amz-mp-parts-count": "PartsCount"]
        }
        /// The count of parts this object has.
        public var partsCount: Int32? = nil
        /// Specifies presentational information for the object.
        public var contentDisposition: String? = nil
        /// Version of the object.
        public var versionId: String? = nil
        public var replicationStatus: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// The language the content is in.
        public var contentLanguage: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public var restore: String? = nil
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public var contentEncoding: String? = nil
        /// Size of the body in bytes.
        public var contentLength: Int64? = nil
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public var expiration: String? = nil
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public var websiteRedirectLocation: String? = nil
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public var eTag: String? = nil
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public var missingMeta: Int32? = nil
        /// Specifies caching behavior along the request/reply chain.
        public var cacheControl: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        public var acceptRanges: String? = nil
        /// Last modified date of the object
        public var lastModified: Date? = nil
        /// A map of metadata to store with the object in S3.
        public var metadata: [String: String]? = nil
        /// The date and time at which the object is no longer cacheable.
        public var expires: Date? = nil
        /// A standard MIME type describing the format of the object data.
        public var contentType: String? = nil
        public var storageClass: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil
        public var requestCharged: String? = nil
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public var deleteMarker: Bool? = nil

        public init() {}

        public init(partsCount: Int32? = nil, contentDisposition: String? = nil, versionId: String? = nil, replicationStatus: String? = nil, sSEKMSKeyId: String? = nil, contentLanguage: String? = nil, sSECustomerAlgorithm: String? = nil, restore: String? = nil, contentEncoding: String? = nil, contentLength: Int64? = nil, expiration: String? = nil, websiteRedirectLocation: String? = nil, eTag: String? = nil, missingMeta: Int32? = nil, cacheControl: String? = nil, sSECustomerKeyMD5: String? = nil, acceptRanges: String? = nil, lastModified: Date? = nil, metadata: [String: String]? = nil, expires: Date? = nil, contentType: String? = nil, storageClass: String? = nil, serverSideEncryption: String? = nil, requestCharged: String? = nil, deleteMarker: Bool? = nil) {
            self.partsCount = partsCount
            self.contentDisposition = contentDisposition
            self.versionId = versionId
            self.replicationStatus = replicationStatus
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentLanguage = contentLanguage
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.restore = restore
            self.contentEncoding = contentEncoding
            self.contentLength = contentLength
            self.expiration = expiration
            self.websiteRedirectLocation = websiteRedirectLocation
            self.eTag = eTag
            self.missingMeta = missingMeta
            self.cacheControl = cacheControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acceptRanges = acceptRanges
            self.lastModified = lastModified
            self.metadata = metadata
            self.expires = expires
            self.contentType = contentType
            self.storageClass = storageClass
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.partsCount = dictionary["PartsCount"] as? Int32
            self.contentDisposition = dictionary["ContentDisposition"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.replicationStatus = dictionary["ReplicationStatus"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.contentLanguage = dictionary["ContentLanguage"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.restore = dictionary["Restore"] as? String
            self.contentEncoding = dictionary["ContentEncoding"] as? String
            self.contentLength = dictionary["ContentLength"] as? Int64
            self.expiration = dictionary["Expiration"] as? String
            self.websiteRedirectLocation = dictionary["WebsiteRedirectLocation"] as? String
            self.eTag = dictionary["ETag"] as? String
            self.missingMeta = dictionary["MissingMeta"] as? Int32
            self.cacheControl = dictionary["CacheControl"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.acceptRanges = dictionary["AcceptRanges"] as? String
            self.lastModified = dictionary["LastModified"] as? Date
            if let metadata = dictionary["Metadata"] as? [String: String] {
                self.metadata = metadata
            }
            self.expires = dictionary["Expires"] as? Date
            self.contentType = dictionary["ContentType"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
            self.deleteMarker = dictionary["DeleteMarker"] as? Bool
        }
    }

    public struct CompletedPart: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Entity tag returned when the part was uploaded.
        public var eTag: String? = nil
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        public var partNumber: Int32? = nil

        public init() {}

        public init(eTag: String? = nil, partNumber: Int32? = nil) {
            self.eTag = eTag
            self.partNumber = partNumber
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.partNumber = dictionary["PartNumber"] as? Int32
        }
    }

    public struct GetBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct ListObjectsV2Output: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public var maxKeys: Int32? = nil
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public var startAfter: String? = nil
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public var isTruncated: Bool? = nil
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public var continuationToken: String? = nil
        /// Name of the bucket to list.
        public var name: String? = nil
        /// Limits the response to keys that begin with the specified prefix.
        public var prefix: String? = nil
        /// NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
        public var nextContinuationToken: String? = nil
        /// CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
        public var commonPrefixes: [CommonPrefix]? = nil
        /// Metadata about each object returned.
        public var contents: [Object]? = nil
        /// A delimiter is a character you use to group keys.
        public var delimiter: String? = nil
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public var encodingType: String? = nil
        /// KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys
        public var keyCount: Int32? = nil

        public init() {}

        public init(maxKeys: Int32? = nil, startAfter: String? = nil, isTruncated: Bool? = nil, continuationToken: String? = nil, name: String? = nil, prefix: String? = nil, nextContinuationToken: String? = nil, commonPrefixes: [CommonPrefix]? = nil, contents: [Object]? = nil, delimiter: String? = nil, encodingType: String? = nil, keyCount: Int32? = nil) {
            self.maxKeys = maxKeys
            self.startAfter = startAfter
            self.isTruncated = isTruncated
            self.continuationToken = continuationToken
            self.name = name
            self.prefix = prefix
            self.nextContinuationToken = nextContinuationToken
            self.commonPrefixes = commonPrefixes
            self.contents = contents
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyCount = keyCount
        }

        public init(dictionary: [String: Any]) throws {
            self.maxKeys = dictionary["MaxKeys"] as? Int32
            self.startAfter = dictionary["StartAfter"] as? String
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.continuationToken = dictionary["ContinuationToken"] as? String
            self.name = dictionary["Name"] as? String
            self.prefix = dictionary["Prefix"] as? String
            self.nextContinuationToken = dictionary["NextContinuationToken"] as? String
            if let commonPrefixes = dictionary["CommonPrefixes"] as? [[String: Any]] {
                self.commonPrefixes = try commonPrefixes.map({ try CommonPrefix(dictionary: $0) })
            }
            if let contents = dictionary["Contents"] as? [[String: Any]] {
                self.contents = try contents.map({ try Object(dictionary: $0) })
            }
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
            self.keyCount = dictionary["KeyCount"] as? Int32
        }
    }

    public struct TargetGrant: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Logging permissions assigned to the Grantee for the bucket.
        public var permission: String? = nil
        public var grantee: Grantee? = nil

        public init() {}

        public init(permission: String? = nil, grantee: Grantee? = nil) {
            self.permission = permission
            self.grantee = grantee
        }

        public init(dictionary: [String: Any]) throws {
            self.permission = dictionary["Permission"] as? String
            if let grantee = dictionary["Grantee"] as? [String: Any] { self.grantee = try S3.Grantee(dictionary: grantee) }
        }
    }

    public struct BucketLoggingStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var loggingEnabled: LoggingEnabled? = nil

        public init() {}

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        public init(dictionary: [String: Any]) throws {
            if let loggingEnabled = dictionary["LoggingEnabled"] as? [String: Any] { self.loggingEnabled = try S3.LoggingEnabled(dictionary: loggingEnabled) }
        }
    }

    public struct AnalyticsS3BucketDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon resource name (ARN) of the bucket to which data is exported.
        public var bucket: String = ""
        /// The file format used when exporting data to Amazon S3.
        public var format: String = ""
        /// The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.
        public var bucketAccountId: String? = nil
        /// The prefix to use when exporting data. The exported data begins with this prefix.
        public var prefix: String? = nil

        public init() {}

        public init(bucket: String, format: String, bucketAccountId: String? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.format = format
            self.bucketAccountId = bucketAccountId
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let format = dictionary["Format"] as? String else { throw InitializableError.missingRequiredParam("Format") }
            self.format = format
            self.bucketAccountId = dictionary["BucketAccountId"] as? String
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct PutBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "LifecycleConfiguration"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var lifecycleConfiguration: LifecycleConfiguration? = nil

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, lifecycleConfiguration: LifecycleConfiguration? = nil) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.lifecycleConfiguration = lifecycleConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            if let lifecycleConfiguration = dictionary["LifecycleConfiguration"] as? [String: Any] { self.lifecycleConfiguration = try S3.LifecycleConfiguration(dictionary: lifecycleConfiguration) }
        }
    }

    public struct WebsiteConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var routingRules: [RoutingRule]? = nil
        public var indexDocument: IndexDocument? = nil
        public var errorDocument: ErrorDocument? = nil
        public var redirectAllRequestsTo: RedirectAllRequestsTo? = nil

        public init() {}

        public init(routingRules: [RoutingRule]? = nil, indexDocument: IndexDocument? = nil, errorDocument: ErrorDocument? = nil, redirectAllRequestsTo: RedirectAllRequestsTo? = nil) {
            self.routingRules = routingRules
            self.indexDocument = indexDocument
            self.errorDocument = errorDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
        }

        public init(dictionary: [String: Any]) throws {
            if let routingRules = dictionary["RoutingRules"] as? [[String: Any]] {
                self.routingRules = try routingRules.map({ try RoutingRule(dictionary: $0) })
            }
            if let indexDocument = dictionary["IndexDocument"] as? [String: Any] { self.indexDocument = try S3.IndexDocument(dictionary: indexDocument) }
            if let errorDocument = dictionary["ErrorDocument"] as? [String: Any] { self.errorDocument = try S3.ErrorDocument(dictionary: errorDocument) }
            if let redirectAllRequestsTo = dictionary["RedirectAllRequestsTo"] as? [String: Any] { self.redirectAllRequestsTo = try S3.RedirectAllRequestsTo(dictionary: redirectAllRequestsTo) }
        }
    }

    public struct NotificationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var topicConfigurations: [TopicConfiguration]? = nil
        public var queueConfigurations: [QueueConfiguration]? = nil
        public var lambdaFunctionConfigurations: [LambdaFunctionConfiguration]? = nil

        public init() {}

        public init(topicConfigurations: [TopicConfiguration]? = nil, queueConfigurations: [QueueConfiguration]? = nil, lambdaFunctionConfigurations: [LambdaFunctionConfiguration]? = nil) {
            self.topicConfigurations = topicConfigurations
            self.queueConfigurations = queueConfigurations
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
        }

        public init(dictionary: [String: Any]) throws {
            if let topicConfigurations = dictionary["TopicConfigurations"] as? [[String: Any]] {
                self.topicConfigurations = try topicConfigurations.map({ try TopicConfiguration(dictionary: $0) })
            }
            if let queueConfigurations = dictionary["QueueConfigurations"] as? [[String: Any]] {
                self.queueConfigurations = try queueConfigurations.map({ try QueueConfiguration(dictionary: $0) })
            }
            if let lambdaFunctionConfigurations = dictionary["LambdaFunctionConfigurations"] as? [[String: Any]] {
                self.lambdaFunctionConfigurations = try lambdaFunctionConfigurations.map({ try LambdaFunctionConfiguration(dictionary: $0) })
            }
        }
    }

    public struct AnalyticsFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag to use when evaluating an analytics filter.
        public var tag: Tag? = nil
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        public var and: AnalyticsAndOperator? = nil
        /// The prefix to use when evaluating an analytics filter.
        public var prefix: String? = nil

        public init() {}

        public init(tag: Tag? = nil, and: AnalyticsAndOperator? = nil, prefix: String? = nil) {
            self.tag = tag
            self.and = and
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [String: Any] { self.tag = try S3.Tag(dictionary: tag) }
            if let and = dictionary["And"] as? [String: Any] { self.and = try S3.AnalyticsAndOperator(dictionary: and) }
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct GetBucketAclRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct GetObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var versionId: String? = nil
        public var key: String = ""

        public init() {}

        public init(bucket: String, versionId: String? = nil, key: String) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.versionId = dictionary["VersionId"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct PutBucketLifecycleConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "LifecycleConfiguration"
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        public var lifecycleConfiguration: BucketLifecycleConfiguration? = nil

        public init() {}

        public init(bucket: String, lifecycleConfiguration: BucketLifecycleConfiguration? = nil) {
            self.bucket = bucket
            self.lifecycleConfiguration = lifecycleConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            if let lifecycleConfiguration = dictionary["LifecycleConfiguration"] as? [String: Any] { self.lifecycleConfiguration = try S3.BucketLifecycleConfiguration(dictionary: lifecycleConfiguration) }
        }
    }

    public struct ListObjectVersionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var maxKeys: Int32? = nil
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
        public var isTruncated: Bool? = nil
        public var versionIdMarker: String? = nil
        /// Use this value for the next version id marker parameter in a subsequent request.
        public var nextVersionIdMarker: String? = nil
        public var commonPrefixes: [CommonPrefix]? = nil
        public var delimiter: String? = nil
        /// Marks the last Key returned in a truncated response.
        public var keyMarker: String? = nil
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public var encodingType: String? = nil
        public var name: String? = nil
        public var prefix: String? = nil
        public var deleteMarkers: [DeleteMarkerEntry]? = nil
        /// Use this value for the key marker request parameter in a subsequent request.
        public var nextKeyMarker: String? = nil
        public var versions: [ObjectVersion]? = nil

        public init() {}

        public init(maxKeys: Int32? = nil, isTruncated: Bool? = nil, versionIdMarker: String? = nil, nextVersionIdMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, delimiter: String? = nil, keyMarker: String? = nil, encodingType: String? = nil, name: String? = nil, prefix: String? = nil, deleteMarkers: [DeleteMarkerEntry]? = nil, nextKeyMarker: String? = nil, versions: [ObjectVersion]? = nil) {
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.versionIdMarker = versionIdMarker
            self.nextVersionIdMarker = nextVersionIdMarker
            self.commonPrefixes = commonPrefixes
            self.delimiter = delimiter
            self.keyMarker = keyMarker
            self.encodingType = encodingType
            self.name = name
            self.prefix = prefix
            self.deleteMarkers = deleteMarkers
            self.nextKeyMarker = nextKeyMarker
            self.versions = versions
        }

        public init(dictionary: [String: Any]) throws {
            self.maxKeys = dictionary["MaxKeys"] as? Int32
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.versionIdMarker = dictionary["VersionIdMarker"] as? String
            self.nextVersionIdMarker = dictionary["NextVersionIdMarker"] as? String
            if let commonPrefixes = dictionary["CommonPrefixes"] as? [[String: Any]] {
                self.commonPrefixes = try commonPrefixes.map({ try CommonPrefix(dictionary: $0) })
            }
            self.delimiter = dictionary["Delimiter"] as? String
            self.keyMarker = dictionary["KeyMarker"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
            self.name = dictionary["Name"] as? String
            self.prefix = dictionary["Prefix"] as? String
            if let deleteMarkers = dictionary["DeleteMarkers"] as? [[String: Any]] {
                self.deleteMarkers = try deleteMarkers.map({ try DeleteMarkerEntry(dictionary: $0) })
            }
            self.nextKeyMarker = dictionary["NextKeyMarker"] as? String
            if let versions = dictionary["Versions"] as? [[String: Any]] {
                self.versions = try versions.map({ try ObjectVersion(dictionary: $0) })
            }
        }
    }

    public struct AnalyticsConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier used to represent an analytics configuration.
        public var id: String = ""
        /// If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes.
        public var storageClassAnalysis: StorageClassAnalysis = StorageClassAnalysis()
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public var filter: AnalyticsFilter? = nil

        public init() {}

        public init(id: String, storageClassAnalysis: StorageClassAnalysis, filter: AnalyticsFilter? = nil) {
            self.id = id
            self.storageClassAnalysis = storageClassAnalysis
            self.filter = filter
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let storageClassAnalysis = dictionary["StorageClassAnalysis"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StorageClassAnalysis") }
            self.storageClassAnalysis = try S3.StorageClassAnalysis(dictionary: storageClassAnalysis)
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.AnalyticsFilter(dictionary: filter) }
        }
    }

    public struct GetBucketVersioningOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public var mFADelete: String? = nil
        /// The versioning state of the bucket.
        public var status: String? = nil

        public init() {}

        public init(mFADelete: String? = nil, status: String? = nil) {
            self.mFADelete = mFADelete
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            self.mFADelete = dictionary["MFADelete"] as? String
            self.status = dictionary["Status"] as? String
        }
    }

    public struct InventoryFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The prefix that an object must have to be included in the inventory results.
        public var prefix: String = ""

        public init() {}

        public init(prefix: String) {
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let prefix = dictionary["Prefix"] as? String else { throw InitializableError.missingRequiredParam("Prefix") }
            self.prefix = prefix
        }
    }

    public struct DeleteObjectsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Delete"
        public static var headerParams: [String: String] {
            return ["x-amz-mfa": "MFA", "x-amz-request-payer": "RequestPayer"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public var mFA: String? = nil
        public var requestPayer: String? = nil
        public var delete: Delete = Delete()

        public init() {}

        public init(bucket: String, mFA: String? = nil, requestPayer: String? = nil, delete: Delete) {
            self.bucket = bucket
            self.mFA = mFA
            self.requestPayer = requestPayer
            self.delete = delete
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.mFA = dictionary["MFA"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            guard let delete = dictionary["Delete"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Delete") }
            self.delete = try S3.Delete(dictionary: delete)
        }
    }

    public struct PutBucketVersioningRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "VersioningConfiguration"
        public static var headerParams: [String: String] {
            return ["x-amz-mfa": "MFA", "Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        public var contentMD5: String? = nil
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public var mFA: String? = nil
        public var versioningConfiguration: VersioningConfiguration = VersioningConfiguration()

        public init() {}

        public init(bucket: String, contentMD5: String? = nil, mFA: String? = nil, versioningConfiguration: VersioningConfiguration) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.mFA = mFA
            self.versioningConfiguration = versioningConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.contentMD5 = dictionary["ContentMD5"] as? String
            self.mFA = dictionary["MFA"] as? String
            guard let versioningConfiguration = dictionary["VersioningConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VersioningConfiguration") }
            self.versioningConfiguration = try S3.VersioningConfiguration(dictionary: versioningConfiguration)
        }
    }

    public struct GetObjectAclOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-charged": "RequestCharged"]
        }
        public var owner: Owner? = nil
        /// A list of grants.
        public var grants: [Grant]? = nil
        public var requestCharged: String? = nil

        public init() {}

        public init(owner: Owner? = nil, grants: [Grant]? = nil, requestCharged: String? = nil) {
            self.owner = owner
            self.grants = grants
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
            if let grants = dictionary["Grants"] as? [[String: Any]] {
                self.grants = try grants.map({ try Grant(dictionary: $0) })
            }
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct Delete: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var objects: [ObjectIdentifier] = []
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public var quiet: Bool? = nil

        public init() {}

        public init(objects: [ObjectIdentifier], quiet: Bool? = nil) {
            self.objects = objects
            self.quiet = quiet
        }

        public init(dictionary: [String: Any]) throws {
            guard let objects = dictionary["Objects"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Objects") }
            self.objects = try objects.map({ try ObjectIdentifier(dictionary: $0) })
            self.quiet = dictionary["Quiet"] as? Bool
        }
    }

    public struct ListMultipartUploadsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["upload-id-marker": "UploadIdMarker", "prefix": "Prefix", "max-uploads": "MaxUploads", "delimiter": "Delimiter", "encoding-type": "EncodingType", "key-marker": "KeyMarker"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
        public var uploadIdMarker: String? = nil
        /// Lists in-progress uploads only for those keys that begin with the specified prefix.
        public var prefix: String? = nil
        /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
        public var maxUploads: Int32? = nil
        /// Character you use to group keys.
        public var delimiter: String? = nil
        public var encodingType: String? = nil
        /// Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.
        public var keyMarker: String? = nil

        public init() {}

        public init(bucket: String, uploadIdMarker: String? = nil, prefix: String? = nil, maxUploads: Int32? = nil, delimiter: String? = nil, encodingType: String? = nil, keyMarker: String? = nil) {
            self.bucket = bucket
            self.uploadIdMarker = uploadIdMarker
            self.prefix = prefix
            self.maxUploads = maxUploads
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyMarker = keyMarker
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.uploadIdMarker = dictionary["UploadIdMarker"] as? String
            self.prefix = dictionary["Prefix"] as? String
            self.maxUploads = dictionary["MaxUploads"] as? Int32
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
            self.keyMarker = dictionary["KeyMarker"] as? String
        }
    }

    public struct DeleteObjectsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-charged": "RequestCharged"]
        }
        public var requestCharged: String? = nil
        public var errors: [Error]? = nil
        public var deleted: [DeletedObject]? = nil

        public init() {}

        public init(requestCharged: String? = nil, errors: [Error]? = nil, deleted: [DeletedObject]? = nil) {
            self.requestCharged = requestCharged
            self.errors = errors
            self.deleted = deleted
        }

        public init(dictionary: [String: Any]) throws {
            self.requestCharged = dictionary["RequestCharged"] as? String
            if let errors = dictionary["Errors"] as? [[String: Any]] {
                self.errors = try errors.map({ try Error(dictionary: $0) })
            }
            if let deleted = dictionary["Deleted"] as? [[String: Any]] {
                self.deleted = try deleted.map({ try DeletedObject(dictionary: $0) })
            }
        }
    }

    public struct DeleteBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket from which an analytics configuration is deleted.
        public var bucket: String = ""
        /// The identifier used to represent an analytics configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct DeleteBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct ListBucketAnalyticsConfigurationsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ContinuationToken that represents where this request began.
        public var continuationToken: String? = nil
        /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public var isTruncated: Bool? = nil
        /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
        public var nextContinuationToken: String? = nil
        /// The list of analytics configurations for a bucket.
        public var analyticsConfigurationList: [AnalyticsConfiguration]? = nil

        public init() {}

        public init(continuationToken: String? = nil, isTruncated: Bool? = nil, nextContinuationToken: String? = nil, analyticsConfigurationList: [AnalyticsConfiguration]? = nil) {
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.nextContinuationToken = nextContinuationToken
            self.analyticsConfigurationList = analyticsConfigurationList
        }

        public init(dictionary: [String: Any]) throws {
            self.continuationToken = dictionary["ContinuationToken"] as? String
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.nextContinuationToken = dictionary["NextContinuationToken"] as? String
            if let analyticsConfigurationList = dictionary["AnalyticsConfigurationList"] as? [[String: Any]] {
                self.analyticsConfigurationList = try analyticsConfigurationList.map({ try AnalyticsConfiguration(dictionary: $0) })
            }
        }
    }

    public struct InventorySchedule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies how frequently inventory results are produced.
        public var frequency: String = ""

        public init() {}

        public init(frequency: String) {
            self.frequency = frequency
        }

        public init(dictionary: [String: Any]) throws {
            guard let frequency = dictionary["Frequency"] as? String else { throw InitializableError.missingRequiredParam("Frequency") }
            self.frequency = frequency
        }
    }

    public struct ListMultipartUploadsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name of the bucket to which the multipart upload was initiated.
        public var bucket: String? = nil
        /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
        public var isTruncated: Bool? = nil
        /// The key at or after which the listing began.
        public var keyMarker: String? = nil
        /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
        public var prefix: String? = nil
        /// Upload ID after which listing began.
        public var uploadIdMarker: String? = nil
        public var commonPrefixes: [CommonPrefix]? = nil
        /// Maximum number of multipart uploads that could have been included in the response.
        public var maxUploads: Int32? = nil
        public var uploads: [MultipartUpload]? = nil
        public var delimiter: String? = nil
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public var encodingType: String? = nil
        /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
        public var nextKeyMarker: String? = nil
        /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
        public var nextUploadIdMarker: String? = nil

        public init() {}

        public init(bucket: String? = nil, isTruncated: Bool? = nil, keyMarker: String? = nil, prefix: String? = nil, uploadIdMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, maxUploads: Int32? = nil, uploads: [MultipartUpload]? = nil, delimiter: String? = nil, encodingType: String? = nil, nextKeyMarker: String? = nil, nextUploadIdMarker: String? = nil) {
            self.bucket = bucket
            self.isTruncated = isTruncated
            self.keyMarker = keyMarker
            self.prefix = prefix
            self.uploadIdMarker = uploadIdMarker
            self.commonPrefixes = commonPrefixes
            self.maxUploads = maxUploads
            self.uploads = uploads
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.nextKeyMarker = nextKeyMarker
            self.nextUploadIdMarker = nextUploadIdMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.bucket = dictionary["Bucket"] as? String
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.keyMarker = dictionary["KeyMarker"] as? String
            self.prefix = dictionary["Prefix"] as? String
            self.uploadIdMarker = dictionary["UploadIdMarker"] as? String
            if let commonPrefixes = dictionary["CommonPrefixes"] as? [[String: Any]] {
                self.commonPrefixes = try commonPrefixes.map({ try CommonPrefix(dictionary: $0) })
            }
            self.maxUploads = dictionary["MaxUploads"] as? Int32
            if let uploads = dictionary["Uploads"] as? [[String: Any]] {
                self.uploads = try uploads.map({ try MultipartUpload(dictionary: $0) })
            }
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
            self.nextKeyMarker = dictionary["NextKeyMarker"] as? String
            self.nextUploadIdMarker = dictionary["NextUploadIdMarker"] as? String
        }
    }

    public struct GetBucketMetricsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "MetricsConfiguration"
        /// Specifies the metrics configuration.
        public var metricsConfiguration: MetricsConfiguration? = nil

        public init() {}

        public init(metricsConfiguration: MetricsConfiguration? = nil) {
            self.metricsConfiguration = metricsConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let metricsConfiguration = dictionary["MetricsConfiguration"] as? [String: Any] { self.metricsConfiguration = try S3.MetricsConfiguration(dictionary: metricsConfiguration) }
        }
    }

    public struct ListBucketMetricsConfigurationsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
        public var continuationToken: String? = nil
        /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public var isTruncated: Bool? = nil
        /// The list of metrics configurations for a bucket.
        public var metricsConfigurationList: [MetricsConfiguration]? = nil
        /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public var nextContinuationToken: String? = nil

        public init() {}

        public init(continuationToken: String? = nil, isTruncated: Bool? = nil, metricsConfigurationList: [MetricsConfiguration]? = nil, nextContinuationToken: String? = nil) {
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.metricsConfigurationList = metricsConfigurationList
            self.nextContinuationToken = nextContinuationToken
        }

        public init(dictionary: [String: Any]) throws {
            self.continuationToken = dictionary["ContinuationToken"] as? String
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            if let metricsConfigurationList = dictionary["MetricsConfigurationList"] as? [[String: Any]] {
                self.metricsConfigurationList = try metricsConfigurationList.map({ try MetricsConfiguration(dictionary: $0) })
            }
            self.nextContinuationToken = dictionary["NextContinuationToken"] as? String
        }
    }

    public struct GetBucketAclOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var owner: Owner? = nil
        /// A list of grants.
        public var grants: [Grant]? = nil

        public init() {}

        public init(owner: Owner? = nil, grants: [Grant]? = nil) {
            self.owner = owner
            self.grants = grants
        }

        public init(dictionary: [String: Any]) throws {
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
            if let grants = dictionary["Grants"] as? [[String: Any]] {
                self.grants = try grants.map({ try Grant(dictionary: $0) })
            }
        }
    }

    public struct ListObjectsV2Request: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["continuation-token": "ContinuationToken", "start-after": "StartAfter", "delimiter": "Delimiter", "encoding-type": "EncodingType", "prefix": "Prefix", "fetch-owner": "FetchOwner", "max-keys": "MaxKeys"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// Name of the bucket to list.
        public var bucket: String = ""
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public var maxKeys: Int32? = nil
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public var startAfter: String? = nil
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public var continuationToken: String? = nil
        /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests.
        public var requestPayer: String? = nil
        /// Limits the response to keys that begin with the specified prefix.
        public var prefix: String? = nil
        /// The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true
        public var fetchOwner: Bool? = nil
        /// A delimiter is a character you use to group keys.
        public var delimiter: String? = nil
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public var encodingType: String? = nil

        public init() {}

        public init(bucket: String, maxKeys: Int32? = nil, startAfter: String? = nil, continuationToken: String? = nil, requestPayer: String? = nil, prefix: String? = nil, fetchOwner: Bool? = nil, delimiter: String? = nil, encodingType: String? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.startAfter = startAfter
            self.continuationToken = continuationToken
            self.requestPayer = requestPayer
            self.prefix = prefix
            self.fetchOwner = fetchOwner
            self.delimiter = delimiter
            self.encodingType = encodingType
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.maxKeys = dictionary["MaxKeys"] as? Int32
            self.startAfter = dictionary["StartAfter"] as? String
            self.continuationToken = dictionary["ContinuationToken"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.prefix = dictionary["Prefix"] as? String
            self.fetchOwner = dictionary["FetchOwner"] as? Bool
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
        }
    }

    public struct HeadBucketRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct CreateBucketRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CreateBucketConfiguration"
        public static var headerParams: [String: String] {
            return ["x-amz-grant-write-acp": "GrantWriteACP", "x-amz-grant-write": "GrantWrite", "x-amz-grant-read": "GrantRead", "x-amz-grant-full-control": "GrantFullControl", "x-amz-acl": "ACL", "x-amz-grant-read-acp": "GrantReadACP"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        public var createBucketConfiguration: CreateBucketConfiguration? = nil
        /// Allows grantee to write the ACL for the applicable bucket.
        public var grantWriteACP: String? = nil
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public var grantFullControl: String? = nil
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public var grantWrite: String? = nil
        /// Allows grantee to list the objects in the bucket.
        public var grantRead: String? = nil
        /// The canned ACL to apply to the bucket.
        public var aCL: String? = nil
        /// Allows grantee to read the bucket ACL.
        public var grantReadACP: String? = nil

        public init() {}

        public init(bucket: String, createBucketConfiguration: CreateBucketConfiguration? = nil, grantWriteACP: String? = nil, grantFullControl: String? = nil, grantWrite: String? = nil, grantRead: String? = nil, aCL: String? = nil, grantReadACP: String? = nil) {
            self.bucket = bucket
            self.createBucketConfiguration = createBucketConfiguration
            self.grantWriteACP = grantWriteACP
            self.grantFullControl = grantFullControl
            self.grantWrite = grantWrite
            self.grantRead = grantRead
            self.aCL = aCL
            self.grantReadACP = grantReadACP
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            if let createBucketConfiguration = dictionary["CreateBucketConfiguration"] as? [String: Any] { self.createBucketConfiguration = try S3.CreateBucketConfiguration(dictionary: createBucketConfiguration) }
            self.grantWriteACP = dictionary["GrantWriteACP"] as? String
            self.grantFullControl = dictionary["GrantFullControl"] as? String
            self.grantWrite = dictionary["GrantWrite"] as? String
            self.grantRead = dictionary["GrantRead"] as? String
            self.aCL = dictionary["ACL"] as? String
            self.grantReadACP = dictionary["GrantReadACP"] as? String
        }
    }

    public struct Initiator: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
        public var iD: String? = nil
        /// Name of the Principal.
        public var displayName: String? = nil

        public init() {}

        public init(iD: String? = nil, displayName: String? = nil) {
            self.iD = iD
            self.displayName = displayName
        }

        public init(dictionary: [String: Any]) throws {
            self.iD = dictionary["ID"] as? String
            self.displayName = dictionary["DisplayName"] as? String
        }
    }

    public struct DeleteObjectTaggingOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-version-id": "VersionId"]
        }
        /// The versionId of the object the tag-set was removed from.
        public var versionId: String? = nil

        public init() {}

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
        }
    }

    public struct PutBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "ReplicationConfiguration"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var replicationConfiguration: ReplicationConfiguration = ReplicationConfiguration()

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, replicationConfiguration: ReplicationConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.replicationConfiguration = replicationConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let replicationConfiguration = dictionary["ReplicationConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ReplicationConfiguration") }
            self.replicationConfiguration = try S3.ReplicationConfiguration(dictionary: replicationConfiguration)
        }
    }

    public struct CORSRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public var exposeHeaders: [String]? = nil
        /// Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
        public var allowedMethods: [String] = []
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public var maxAgeSeconds: Int32? = nil
        /// Specifies which headers are allowed in a pre-flight OPTIONS request.
        public var allowedHeaders: [String]? = nil
        /// One or more origins you want customers to be able to access the bucket from.
        public var allowedOrigins: [String] = []

        public init() {}

        public init(exposeHeaders: [String]? = nil, allowedMethods: [String], maxAgeSeconds: Int32? = nil, allowedHeaders: [String]? = nil, allowedOrigins: [String]) {
            self.exposeHeaders = exposeHeaders
            self.allowedMethods = allowedMethods
            self.maxAgeSeconds = maxAgeSeconds
            self.allowedHeaders = allowedHeaders
            self.allowedOrigins = allowedOrigins
        }

        public init(dictionary: [String: Any]) throws {
            if let exposeHeaders = dictionary["ExposeHeaders"] as? [String] {
                self.exposeHeaders = exposeHeaders
            }
            guard let allowedMethods = dictionary["AllowedMethods"] as? [String] else { throw InitializableError.missingRequiredParam("AllowedMethods") }
            self.allowedMethods = allowedMethods
            self.maxAgeSeconds = dictionary["MaxAgeSeconds"] as? Int32
            if let allowedHeaders = dictionary["AllowedHeaders"] as? [String] {
                self.allowedHeaders = allowedHeaders
            }
            guard let allowedOrigins = dictionary["AllowedOrigins"] as? [String] else { throw InitializableError.missingRequiredParam("AllowedOrigins") }
            self.allowedOrigins = allowedOrigins
        }
    }

    public struct CreateMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Cache-Control": "CacheControl", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-grant-write-acp": "GrantWriteACP", "x-amz-request-payer": "RequestPayer", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-grant-read": "GrantRead", "x-amz-grant-full-control": "GrantFullControl", "x-amz-acl": "ACL", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "Content-Language": "ContentLanguage", "Content-Type": "ContentType", "x-amz-storage-class": "StorageClass", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "Content-Disposition": "ContentDisposition", "Expires": "Expires", "x-amz-website-redirect-location": "WebsiteRedirectLocation", "x-amz-server-side-encryption": "ServerSideEncryption", "Content-Encoding": "ContentEncoding", "x-amz-grant-read-acp": "GrantReadACP"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public var sSECustomerKey: String? = nil
        /// Specifies caching behavior along the request/reply chain.
        public var cacheControl: String? = nil
        public var bucket: String = ""
        /// Specifies presentational information for the object.
        public var contentDisposition: String? = nil
        public var requestPayer: String? = nil
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public var grantFullControl: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public var sSEKMSKeyId: String? = nil
        /// Allows grantee to read the object ACL.
        public var grantReadACP: String? = nil
        /// The canned ACL to apply to the object.
        public var aCL: String? = nil
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil
        /// The language the content is in.
        public var contentLanguage: String? = nil
        /// A map of metadata to store with the object in S3.
        public var metadata: [String: String]? = nil
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public var contentEncoding: String? = nil
        /// The date and time at which the object is no longer cacheable.
        public var expires: Date? = nil
        /// Allows grantee to write the ACL for the applicable object.
        public var grantWriteACP: String? = nil
        /// A standard MIME type describing the format of the object data.
        public var contentType: String? = nil
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public var storageClass: String? = nil
        public var key: String = ""
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public var websiteRedirectLocation: String? = nil
        /// Allows grantee to read the object data and its metadata.
        public var grantRead: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil

        public init() {}

        public init(sSECustomerKey: String? = nil, cacheControl: String? = nil, bucket: String, contentDisposition: String? = nil, requestPayer: String? = nil, grantFullControl: String? = nil, sSECustomerKeyMD5: String? = nil, sSEKMSKeyId: String? = nil, grantReadACP: String? = nil, aCL: String? = nil, sSECustomerAlgorithm: String? = nil, contentLanguage: String? = nil, metadata: [String: String]? = nil, contentEncoding: String? = nil, expires: Date? = nil, grantWriteACP: String? = nil, contentType: String? = nil, storageClass: String? = nil, key: String, websiteRedirectLocation: String? = nil, grantRead: String? = nil, serverSideEncryption: String? = nil) {
            self.sSECustomerKey = sSECustomerKey
            self.cacheControl = cacheControl
            self.bucket = bucket
            self.contentDisposition = contentDisposition
            self.requestPayer = requestPayer
            self.grantFullControl = grantFullControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSEKMSKeyId = sSEKMSKeyId
            self.grantReadACP = grantReadACP
            self.aCL = aCL
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentLanguage = contentLanguage
            self.metadata = metadata
            self.contentEncoding = contentEncoding
            self.expires = expires
            self.grantWriteACP = grantWriteACP
            self.contentType = contentType
            self.storageClass = storageClass
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.grantRead = grantRead
            self.serverSideEncryption = serverSideEncryption
        }

        public init(dictionary: [String: Any]) throws {
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            self.cacheControl = dictionary["CacheControl"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.contentDisposition = dictionary["ContentDisposition"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.grantFullControl = dictionary["GrantFullControl"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.grantReadACP = dictionary["GrantReadACP"] as? String
            self.aCL = dictionary["ACL"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.contentLanguage = dictionary["ContentLanguage"] as? String
            if let metadata = dictionary["Metadata"] as? [String: String] {
                self.metadata = metadata
            }
            self.contentEncoding = dictionary["ContentEncoding"] as? String
            self.expires = dictionary["Expires"] as? Date
            self.grantWriteACP = dictionary["GrantWriteACP"] as? String
            self.contentType = dictionary["ContentType"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.websiteRedirectLocation = dictionary["WebsiteRedirectLocation"] as? String
            self.grantRead = dictionary["GrantRead"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-mfa": "MFA", "x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        /// VersionId used to reference a specific version of the object.
        public var versionId: String? = nil
        public var bucket: String = ""
        public var key: String = ""
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public var mFA: String? = nil
        public var requestPayer: String? = nil

        public init() {}

        public init(versionId: String? = nil, bucket: String, key: String, mFA: String? = nil, requestPayer: String? = nil) {
            self.versionId = versionId
            self.bucket = bucket
            self.key = key
            self.mFA = mFA
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.mFA = dictionary["MFA"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct PutObjectAclOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-charged": "RequestCharged"]
        }
        public var requestCharged: String? = nil

        public init() {}

        public init(requestCharged: String? = nil) {
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct ListPartsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-abort-date": "AbortDate", "x-amz-request-charged": "RequestCharged", "x-amz-abort-rule-id": "AbortRuleId"]
        }
        /// Part number after which listing begins.
        public var partNumberMarker: Int32? = nil
        /// Name of the bucket to which the multipart upload was initiated.
        public var bucket: String? = nil
        /// Indicates whether the returned list of parts is truncated.
        public var isTruncated: Bool? = nil
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public var abortDate: Date? = nil
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public var uploadId: String? = nil
        public var owner: Owner? = nil
        public var parts: [Part]? = nil
        /// Identifies who initiated the multipart upload.
        public var initiator: Initiator? = nil
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public var abortRuleId: String? = nil
        /// The class of storage used to store the object.
        public var storageClass: String? = nil
        /// Object key for which the multipart upload was initiated.
        public var key: String? = nil
        /// Maximum number of parts that were allowed in the response.
        public var maxParts: Int32? = nil
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
        public var nextPartNumberMarker: Int32? = nil
        public var requestCharged: String? = nil

        public init() {}

        public init(partNumberMarker: Int32? = nil, bucket: String? = nil, isTruncated: Bool? = nil, abortDate: Date? = nil, uploadId: String? = nil, owner: Owner? = nil, parts: [Part]? = nil, initiator: Initiator? = nil, abortRuleId: String? = nil, storageClass: String? = nil, key: String? = nil, maxParts: Int32? = nil, nextPartNumberMarker: Int32? = nil, requestCharged: String? = nil) {
            self.partNumberMarker = partNumberMarker
            self.bucket = bucket
            self.isTruncated = isTruncated
            self.abortDate = abortDate
            self.uploadId = uploadId
            self.owner = owner
            self.parts = parts
            self.initiator = initiator
            self.abortRuleId = abortRuleId
            self.storageClass = storageClass
            self.key = key
            self.maxParts = maxParts
            self.nextPartNumberMarker = nextPartNumberMarker
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            self.partNumberMarker = dictionary["PartNumberMarker"] as? Int32
            self.bucket = dictionary["Bucket"] as? String
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.abortDate = dictionary["AbortDate"] as? Date
            self.uploadId = dictionary["UploadId"] as? String
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
            if let parts = dictionary["Parts"] as? [[String: Any]] {
                self.parts = try parts.map({ try Part(dictionary: $0) })
            }
            if let initiator = dictionary["Initiator"] as? [String: Any] { self.initiator = try S3.Initiator(dictionary: initiator) }
            self.abortRuleId = dictionary["AbortRuleId"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            self.key = dictionary["Key"] as? String
            self.maxParts = dictionary["MaxParts"] as? Int32
            self.nextPartNumberMarker = dictionary["NextPartNumberMarker"] as? Int32
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct ListBucketInventoryConfigurationsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
        public var continuationToken: String? = nil
        /// Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated.
        public var isTruncated: Bool? = nil
        /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
        public var nextContinuationToken: String? = nil
        /// The list of inventory configurations for a bucket.
        public var inventoryConfigurationList: [InventoryConfiguration]? = nil

        public init() {}

        public init(continuationToken: String? = nil, isTruncated: Bool? = nil, nextContinuationToken: String? = nil, inventoryConfigurationList: [InventoryConfiguration]? = nil) {
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.nextContinuationToken = nextContinuationToken
            self.inventoryConfigurationList = inventoryConfigurationList
        }

        public init(dictionary: [String: Any]) throws {
            self.continuationToken = dictionary["ContinuationToken"] as? String
            self.isTruncated = dictionary["IsTruncated"] as? Bool
            self.nextContinuationToken = dictionary["NextContinuationToken"] as? String
            if let inventoryConfigurationList = dictionary["InventoryConfigurationList"] as? [[String: Any]] {
                self.inventoryConfigurationList = try inventoryConfigurationList.map({ try InventoryConfiguration(dictionary: $0) })
            }
        }
    }

    public struct ListBucketMetricsConfigurationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["continuation-token": "ContinuationToken"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket containing the metrics configurations to retrieve.
        public var bucket: String = ""
        /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public var continuationToken: String? = nil

        public init() {}

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.continuationToken = dictionary["ContinuationToken"] as? String
        }
    }

    public struct TopicConfigurationDeprecated: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
        public var topic: String? = nil
        public var events: [String]? = nil
        /// Bucket event for which to send notifications.
        public var event: String? = nil
        public var id: String? = nil

        public init() {}

        public init(topic: String? = nil, events: [String]? = nil, event: String? = nil, id: String? = nil) {
            self.topic = topic
            self.events = events
            self.event = event
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.topic = dictionary["Topic"] as? String
            if let events = dictionary["Events"] as? [String] {
                self.events = events
            }
            self.event = dictionary["Event"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DeleteBucketRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct StorageClassAnalysis: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A container used to describe how data related to the storage class analysis should be exported.
        public var dataExport: StorageClassAnalysisDataExport? = nil

        public init() {}

        public init(dataExport: StorageClassAnalysisDataExport? = nil) {
            self.dataExport = dataExport
        }

        public init(dictionary: [String: Any]) throws {
            if let dataExport = dictionary["DataExport"] as? [String: Any] { self.dataExport = try S3.StorageClassAnalysisDataExport(dictionary: dataExport) }
        }
    }

    public struct GetBucketNotificationConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// Name of the bucket to get the notification configuration for.
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct CommonPrefix: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var prefix: String? = nil

        public init() {}

        public init(prefix: String? = nil) {
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct GetObjectTorrentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var key: String = ""
        public var requestPayer: String? = nil

        public init() {}

        public init(bucket: String, key: String, requestPayer: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct InventoryS3BucketDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon resource name (ARN) of the bucket where inventory results will be published.
        public var bucket: String = ""
        /// Specifies the output format of the inventory results.
        public var format: String = ""
        /// The ID of the account that owns the destination bucket.
        public var accountId: String? = nil
        /// The prefix that is prepended to all inventory results.
        public var prefix: String? = nil

        public init() {}

        public init(bucket: String, format: String, accountId: String? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.format = format
            self.accountId = accountId
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let format = dictionary["Format"] as? String else { throw InitializableError.missingRequiredParam("Format") }
            self.format = format
            self.accountId = dictionary["AccountId"] as? String
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct GetObjectAclRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// VersionId used to reference a specific version of the object.
        public var versionId: String? = nil
        public var key: String = ""
        public var requestPayer: String? = nil

        public init() {}

        public init(bucket: String, versionId: String? = nil, key: String, requestPayer: String? = nil) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.versionId = dictionary["VersionId"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct AccessControlPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var owner: Owner? = nil
        /// A list of grants.
        public var grants: [Grant]? = nil

        public init() {}

        public init(owner: Owner? = nil, grants: [Grant]? = nil) {
            self.owner = owner
            self.grants = grants
        }

        public init(dictionary: [String: Any]) throws {
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
            if let grants = dictionary["Grants"] as? [[String: Any]] {
                self.grants = try grants.map({ try Grant(dictionary: $0) })
            }
        }
    }

    public struct DeleteBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct CreateBucketOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        public var location: String? = nil

        public init() {}

        public init(location: String? = nil) {
            self.location = location
        }

        public init(dictionary: [String: Any]) throws {
            self.location = dictionary["Location"] as? String
        }
    }

    public struct DeleteBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket containing the inventory configuration to delete.
        public var bucket: String = ""
        /// The ID used to identify the inventory configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct GetBucketWebsiteOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var routingRules: [RoutingRule]? = nil
        public var indexDocument: IndexDocument? = nil
        public var errorDocument: ErrorDocument? = nil
        public var redirectAllRequestsTo: RedirectAllRequestsTo? = nil

        public init() {}

        public init(routingRules: [RoutingRule]? = nil, indexDocument: IndexDocument? = nil, errorDocument: ErrorDocument? = nil, redirectAllRequestsTo: RedirectAllRequestsTo? = nil) {
            self.routingRules = routingRules
            self.indexDocument = indexDocument
            self.errorDocument = errorDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
        }

        public init(dictionary: [String: Any]) throws {
            if let routingRules = dictionary["RoutingRules"] as? [[String: Any]] {
                self.routingRules = try routingRules.map({ try RoutingRule(dictionary: $0) })
            }
            if let indexDocument = dictionary["IndexDocument"] as? [String: Any] { self.indexDocument = try S3.IndexDocument(dictionary: indexDocument) }
            if let errorDocument = dictionary["ErrorDocument"] as? [String: Any] { self.errorDocument = try S3.ErrorDocument(dictionary: errorDocument) }
            if let redirectAllRequestsTo = dictionary["RedirectAllRequestsTo"] as? [String: Any] { self.redirectAllRequestsTo = try S3.RedirectAllRequestsTo(dictionary: redirectAllRequestsTo) }
        }
    }

    public struct LoggingEnabled: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var targetGrants: [TargetGrant]? = nil
        /// This element lets you specify a prefix for the keys that the log files will be stored under.
        public var targetPrefix: String? = nil
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        public var targetBucket: String? = nil

        public init() {}

        public init(targetGrants: [TargetGrant]? = nil, targetPrefix: String? = nil, targetBucket: String? = nil) {
            self.targetGrants = targetGrants
            self.targetPrefix = targetPrefix
            self.targetBucket = targetBucket
        }

        public init(dictionary: [String: Any]) throws {
            if let targetGrants = dictionary["TargetGrants"] as? [[String: Any]] {
                self.targetGrants = try targetGrants.map({ try TargetGrant(dictionary: $0) })
            }
            self.targetPrefix = dictionary["TargetPrefix"] as? String
            self.targetBucket = dictionary["TargetBucket"] as? String
        }
    }

    public struct CORSConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var cORSRules: [CORSRule] = []

        public init() {}

        public init(cORSRules: [CORSRule]) {
            self.cORSRules = cORSRules
        }

        public init(dictionary: [String: Any]) throws {
            guard let cORSRules = dictionary["CORSRules"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("CORSRules") }
            self.cORSRules = try cORSRules.map({ try CORSRule(dictionary: $0) })
        }
    }

    public struct ObjectIdentifier: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// VersionId for the specific version of the object to delete.
        public var versionId: String? = nil
        /// Key name of the object to delete.
        public var key: String = ""

        public init() {}

        public init(versionId: String? = nil, key: String) {
            self.versionId = versionId
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct StorageClassAnalysisDataExport: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The place to store the data for an analysis.
        public var destination: AnalyticsExportDestination = AnalyticsExportDestination()
        /// The version of the output schema to use when exporting data. Must be V_1.
        public var outputSchemaVersion: String = ""

        public init() {}

        public init(destination: AnalyticsExportDestination, outputSchemaVersion: String) {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let destination = dictionary["Destination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Destination") }
            self.destination = try S3.AnalyticsExportDestination(dictionary: destination)
            guard let outputSchemaVersion = dictionary["OutputSchemaVersion"] as? String else { throw InitializableError.missingRequiredParam("OutputSchemaVersion") }
            self.outputSchemaVersion = outputSchemaVersion
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Value of the tag.
        public var value: String = ""
        /// Name of the tag.
        public var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct RestoreObjectOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-charged": "RequestCharged"]
        }
        public var requestCharged: String? = nil

        public init() {}

        public init(requestCharged: String? = nil) {
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct BucketLifecycleConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var rules: [LifecycleRule] = []

        public init() {}

        public init(rules: [LifecycleRule]) {
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            guard let rules = dictionary["Rules"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Rules") }
            self.rules = try rules.map({ try LifecycleRule(dictionary: $0) })
        }
    }

    public struct GetBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket containing the metrics configuration to retrieve.
        public var bucket: String = ""
        /// The ID used to identify the metrics configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct LifecycleRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var iD: String? = nil
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public var status: String = ""
        public var noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil
        public var abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil
        public var expiration: LifecycleExpiration? = nil
        /// Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead.
        public var prefix: String? = nil
        public var transitions: [Transition]? = nil
        public var filter: LifecycleRuleFilter? = nil
        public var noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil

        public init() {}

        public init(iD: String? = nil, status: String, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, expiration: LifecycleExpiration? = nil, prefix: String? = nil, transitions: [Transition]? = nil, filter: LifecycleRuleFilter? = nil, noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil) {
            self.iD = iD
            self.status = status
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.expiration = expiration
            self.prefix = prefix
            self.transitions = transitions
            self.filter = filter
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
        }

        public init(dictionary: [String: Any]) throws {
            self.iD = dictionary["ID"] as? String
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            if let noncurrentVersionExpiration = dictionary["NoncurrentVersionExpiration"] as? [String: Any] { self.noncurrentVersionExpiration = try S3.NoncurrentVersionExpiration(dictionary: noncurrentVersionExpiration) }
            if let abortIncompleteMultipartUpload = dictionary["AbortIncompleteMultipartUpload"] as? [String: Any] { self.abortIncompleteMultipartUpload = try S3.AbortIncompleteMultipartUpload(dictionary: abortIncompleteMultipartUpload) }
            if let expiration = dictionary["Expiration"] as? [String: Any] { self.expiration = try S3.LifecycleExpiration(dictionary: expiration) }
            self.prefix = dictionary["Prefix"] as? String
            if let transitions = dictionary["Transitions"] as? [[String: Any]] {
                self.transitions = try transitions.map({ try Transition(dictionary: $0) })
            }
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.LifecycleRuleFilter(dictionary: filter) }
            if let noncurrentVersionTransitions = dictionary["NoncurrentVersionTransitions"] as? [[String: Any]] {
                self.noncurrentVersionTransitions = try noncurrentVersionTransitions.map({ try NoncurrentVersionTransition(dictionary: $0) })
            }
        }
    }

    public struct GetBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct Bucket: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the bucket.
        public var name: String? = nil
        /// Date the bucket was created.
        public var creationDate: Date? = nil

        public init() {}

        public init(name: String? = nil, creationDate: Date? = nil) {
            self.name = name
            self.creationDate = creationDate
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            self.creationDate = dictionary["CreationDate"] as? Date
        }
    }

    public struct Destination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon resource name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.
        public var bucket: String = ""
        /// The class of storage used to store the object.
        public var storageClass: String? = nil

        public init() {}

        public init(bucket: String, storageClass: String? = nil) {
            self.bucket = bucket
            self.storageClass = storageClass
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.storageClass = dictionary["StorageClass"] as? String
        }
    }

    public struct GlacierJobParameters: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Glacier retrieval tier at which the restore will be processed.
        public var tier: String = ""

        public init() {}

        public init(tier: String) {
            self.tier = tier
        }

        public init(dictionary: [String: Any]) throws {
            guard let tier = dictionary["Tier"] as? String else { throw InitializableError.missingRequiredParam("Tier") }
            self.tier = tier
        }
    }

    public struct PutBucketNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "NotificationConfiguration"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var notificationConfiguration: NotificationConfigurationDeprecated = NotificationConfigurationDeprecated()

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, notificationConfiguration: NotificationConfigurationDeprecated) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let notificationConfiguration = dictionary["NotificationConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NotificationConfiguration") }
            self.notificationConfiguration = try S3.NotificationConfigurationDeprecated(dictionary: notificationConfiguration)
        }
    }

    public struct CompleteMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "MultipartUpload"
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["uploadId": "UploadId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var multipartUpload: CompletedMultipartUpload? = nil
        public var key: String = ""
        public var uploadId: String = ""
        public var requestPayer: String? = nil

        public init() {}

        public init(bucket: String, multipartUpload: CompletedMultipartUpload? = nil, key: String, uploadId: String, requestPayer: String? = nil) {
            self.bucket = bucket
            self.multipartUpload = multipartUpload
            self.key = key
            self.uploadId = uploadId
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            if let multipartUpload = dictionary["MultipartUpload"] as? [String: Any] { self.multipartUpload = try S3.CompletedMultipartUpload(dictionary: multipartUpload) }
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct PutBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "MetricsConfiguration"
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket for which the metrics configuration is set.
        public var bucket: String = ""
        /// Specifies the metrics configuration.
        public var metricsConfiguration: MetricsConfiguration = MetricsConfiguration()
        /// The ID used to identify the metrics configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, metricsConfiguration: MetricsConfiguration, id: String) {
            self.bucket = bucket
            self.metricsConfiguration = metricsConfiguration
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let metricsConfiguration = dictionary["MetricsConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("MetricsConfiguration") }
            self.metricsConfiguration = try S3.MetricsConfiguration(dictionary: metricsConfiguration)
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct Part: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Date and time at which the part was uploaded.
        public var lastModified: Date? = nil
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public var partNumber: Int32? = nil
        /// Entity tag returned when the part was uploaded.
        public var eTag: String? = nil
        /// Size of the uploaded part data.
        public var size: Int32? = nil

        public init() {}

        public init(lastModified: Date? = nil, partNumber: Int32? = nil, eTag: String? = nil, size: Int32? = nil) {
            self.lastModified = lastModified
            self.partNumber = partNumber
            self.eTag = eTag
            self.size = size
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModified = dictionary["LastModified"] as? Date
            self.partNumber = dictionary["PartNumber"] as? Int32
            self.eTag = dictionary["ETag"] as? String
            self.size = dictionary["Size"] as? Int32
        }
    }

    public struct ListBucketsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var buckets: [Bucket]? = nil
        public var owner: Owner? = nil

        public init() {}

        public init(buckets: [Bucket]? = nil, owner: Owner? = nil) {
            self.buckets = buckets
            self.owner = owner
        }

        public init(dictionary: [String: Any]) throws {
            if let buckets = dictionary["Buckets"] as? [[String: Any]] {
                self.buckets = try buckets.map({ try Bucket(dictionary: $0) })
            }
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
        }
    }

    public struct GetBucketAccelerateConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The accelerate configuration of the bucket.
        public var status: String? = nil

        public init() {}

        public init(status: String? = nil) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
        }
    }

    public struct CopyPartResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Entity tag of the object.
        public var eTag: String? = nil
        /// Date and time at which the object was uploaded.
        public var lastModified: Date? = nil

        public init() {}

        public init(eTag: String? = nil, lastModified: Date? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.lastModified = dictionary["LastModified"] as? Date
        }
    }

    public struct NoncurrentVersionExpiration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public var noncurrentDays: Int32? = nil

        public init() {}

        public init(noncurrentDays: Int32? = nil) {
            self.noncurrentDays = noncurrentDays
        }

        public init(dictionary: [String: Any]) throws {
            self.noncurrentDays = dictionary["NoncurrentDays"] as? Int32
        }
    }

    public struct AnalyticsExportDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A destination signifying output to an S3 bucket.
        public var s3BucketDestination: AnalyticsS3BucketDestination = AnalyticsS3BucketDestination()

        public init() {}

        public init(s3BucketDestination: AnalyticsS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        public init(dictionary: [String: Any]) throws {
            guard let s3BucketDestination = dictionary["S3BucketDestination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3BucketDestination") }
            self.s3BucketDestination = try S3.AnalyticsS3BucketDestination(dictionary: s3BucketDestination)
        }
    }

    public struct FilterRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var value: String? = nil
        /// Object key name prefix or suffix identifying one or more objects to which the filtering rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, go to Configuring Event Notifications in the Amazon Simple Storage Service Developer Guide.
        public var name: String? = nil

        public init() {}

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.name = dictionary["Name"] as? String
        }
    }

    public struct ListBucketInventoryConfigurationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["continuation-token": "ContinuationToken"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket containing the inventory configurations to retrieve.
        public var bucket: String = ""
        /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public var continuationToken: String? = nil

        public init() {}

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.continuationToken = dictionary["ContinuationToken"] as? String
        }
    }

    public struct PutBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Policy"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        /// The bucket policy as a JSON document.
        public var policy: String = ""

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, policy: String) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let policy = dictionary["Policy"] as? String else { throw InitializableError.missingRequiredParam("Policy") }
            self.policy = policy
        }
    }

    public struct GetObjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["If-Modified-Since": "IfModifiedSince", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "Range": "Range", "x-amz-request-payer": "RequestPayer", "If-Match": "IfMatch", "If-Unmodified-Since": "IfUnmodifiedSince", "If-None-Match": "IfNoneMatch", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5"]
        }
        public static var queryParams: [String: String] {
            return ["response-content-encoding": "ResponseContentEncoding", "partNumber": "PartNumber", "response-content-language": "ResponseContentLanguage", "versionId": "VersionId", "response-cache-control": "ResponseCacheControl", "response-content-type": "ResponseContentType", "response-content-disposition": "ResponseContentDisposition", "response-expires": "ResponseExpires"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public var sSECustomerKey: String? = nil
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public var ifUnmodifiedSince: Date? = nil
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
        public var partNumber: Int32? = nil
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public var range: String? = nil
        /// Sets the Content-Encoding header of the response.
        public var responseContentEncoding: String? = nil
        public var requestPayer: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// Sets the Content-Language header of the response.
        public var responseContentLanguage: String? = nil
        /// Sets the Expires header of the response.
        public var responseExpires: Date? = nil
        /// VersionId used to reference a specific version of the object.
        public var versionId: String? = nil
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public var ifNoneMatch: String? = nil
        /// Sets the Content-Disposition header of the response
        public var responseContentDisposition: String? = nil
        public var key: String = ""
        /// Sets the Cache-Control header of the response.
        public var responseCacheControl: String? = nil
        /// Sets the Content-Type header of the response.
        public var responseContentType: String? = nil
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public var ifModifiedSince: Date? = nil
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public var ifMatch: String? = nil

        public init() {}

        public init(bucket: String, sSECustomerKey: String? = nil, ifUnmodifiedSince: Date? = nil, partNumber: Int32? = nil, range: String? = nil, responseContentEncoding: String? = nil, requestPayer: String? = nil, sSECustomerKeyMD5: String? = nil, responseContentLanguage: String? = nil, responseExpires: Date? = nil, versionId: String? = nil, sSECustomerAlgorithm: String? = nil, ifNoneMatch: String? = nil, responseContentDisposition: String? = nil, key: String, responseCacheControl: String? = nil, responseContentType: String? = nil, ifModifiedSince: Date? = nil, ifMatch: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.partNumber = partNumber
            self.range = range
            self.responseContentEncoding = responseContentEncoding
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.responseContentLanguage = responseContentLanguage
            self.responseExpires = responseExpires
            self.versionId = versionId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.ifNoneMatch = ifNoneMatch
            self.responseContentDisposition = responseContentDisposition
            self.key = key
            self.responseCacheControl = responseCacheControl
            self.responseContentType = responseContentType
            self.ifModifiedSince = ifModifiedSince
            self.ifMatch = ifMatch
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            self.ifUnmodifiedSince = dictionary["IfUnmodifiedSince"] as? Date
            self.partNumber = dictionary["PartNumber"] as? Int32
            self.range = dictionary["Range"] as? String
            self.responseContentEncoding = dictionary["ResponseContentEncoding"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.responseContentLanguage = dictionary["ResponseContentLanguage"] as? String
            self.responseExpires = dictionary["ResponseExpires"] as? Date
            self.versionId = dictionary["VersionId"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.ifNoneMatch = dictionary["IfNoneMatch"] as? String
            self.responseContentDisposition = dictionary["ResponseContentDisposition"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.responseCacheControl = dictionary["ResponseCacheControl"] as? String
            self.responseContentType = dictionary["ResponseContentType"] as? String
            self.ifModifiedSince = dictionary["IfModifiedSince"] as? Date
            self.ifMatch = dictionary["IfMatch"] as? String
        }
    }

    public struct AbortMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["uploadId": "UploadId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var key: String = ""
        public var uploadId: String = ""
        public var requestPayer: String? = nil

        public init() {}

        public init(bucket: String, key: String, uploadId: String, requestPayer: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.uploadId = uploadId
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct GetObjectTorrentOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Body"
        public static var headerParams: [String: String] {
            return ["x-amz-request-charged": "RequestCharged"]
        }
        public var body: Data? = nil
        public var requestCharged: String? = nil

        public init() {}

        public init(body: Data? = nil, requestCharged: String? = nil) {
            self.body = body
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            self.body = dictionary["Body"] as? Data
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

    public struct NoncurrentVersionTransition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public var noncurrentDays: Int32? = nil
        /// The class of storage used to store the object.
        public var storageClass: String? = nil

        public init() {}

        public init(noncurrentDays: Int32? = nil, storageClass: String? = nil) {
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }

        public init(dictionary: [String: Any]) throws {
            self.noncurrentDays = dictionary["NoncurrentDays"] as? Int32
            self.storageClass = dictionary["StorageClass"] as? String
        }
    }

    public struct UploadPartCopyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer", "x-amz-copy-source": "CopySource", "x-amz-copy-source-server-side-encryption-customer-key-MD5": "CopySourceSSECustomerKeyMD5", "x-amz-copy-source-if-modified-since": "CopySourceIfModifiedSince", "x-amz-copy-source-server-side-encryption-customer-algorithm": "CopySourceSSECustomerAlgorithm", "x-amz-copy-source-if-match": "CopySourceIfMatch", "x-amz-copy-source-server-side-encryption-customer-key": "CopySourceSSECustomerKey", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-copy-source-range": "CopySourceRange", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "x-amz-copy-source-if-none-match": "CopySourceIfNoneMatch", "x-amz-copy-source-if-unmodified-since": "CopySourceIfUnmodifiedSince", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5"]
        }
        public static var queryParams: [String: String] {
            return ["uploadId": "UploadId", "partNumber": "PartNumber"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public var sSECustomerKey: String? = nil
        /// Part number of part being copied. This is a positive integer between 1 and 10,000.
        public var partNumber: Int32 = 0
        /// Copies the object if it has been modified since the specified time.
        public var copySourceIfModifiedSince: Date? = nil
        public var requestPayer: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public var copySourceSSECustomerKey: String? = nil
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public var copySource: String = ""
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public var copySourceIfNoneMatch: String? = nil
        /// Upload ID identifying the multipart upload whose part is being copied.
        public var uploadId: String = ""
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public var copySourceIfMatch: String? = nil
        /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first ten bytes of the source. You can copy a range only if the source object is greater than 5 GB.
        public var copySourceRange: String? = nil
        public var key: String = ""
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var copySourceSSECustomerKeyMD5: String? = nil
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public var copySourceSSECustomerAlgorithm: String? = nil
        /// Copies the object if it hasn't been modified since the specified time.
        public var copySourceIfUnmodifiedSince: Date? = nil

        public init() {}

        public init(bucket: String, sSECustomerKey: String? = nil, partNumber: Int32, copySourceIfModifiedSince: Date? = nil, requestPayer: String? = nil, sSECustomerKeyMD5: String? = nil, copySourceSSECustomerKey: String? = nil, copySource: String, copySourceIfNoneMatch: String? = nil, uploadId: String, sSECustomerAlgorithm: String? = nil, copySourceIfMatch: String? = nil, copySourceRange: String? = nil, key: String, copySourceSSECustomerKeyMD5: String? = nil, copySourceSSECustomerAlgorithm: String? = nil, copySourceIfUnmodifiedSince: Date? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.partNumber = partNumber
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.copySource = copySource
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.uploadId = uploadId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceIfMatch = copySourceIfMatch
            self.copySourceRange = copySourceRange
            self.key = key
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            guard let partNumber = dictionary["PartNumber"] as? Int32 else { throw InitializableError.missingRequiredParam("PartNumber") }
            self.partNumber = partNumber
            self.copySourceIfModifiedSince = dictionary["CopySourceIfModifiedSince"] as? Date
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.copySourceSSECustomerKey = dictionary["CopySourceSSECustomerKey"] as? String
            guard let copySource = dictionary["CopySource"] as? String else { throw InitializableError.missingRequiredParam("CopySource") }
            self.copySource = copySource
            self.copySourceIfNoneMatch = dictionary["CopySourceIfNoneMatch"] as? String
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.copySourceIfMatch = dictionary["CopySourceIfMatch"] as? String
            self.copySourceRange = dictionary["CopySourceRange"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.copySourceSSECustomerKeyMD5 = dictionary["CopySourceSSECustomerKeyMD5"] as? String
            self.copySourceSSECustomerAlgorithm = dictionary["CopySourceSSECustomerAlgorithm"] as? String
            self.copySourceIfUnmodifiedSince = dictionary["CopySourceIfUnmodifiedSince"] as? Date
        }
    }

    public struct PutBucketAclRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "AccessControlPolicy"
        public static var headerParams: [String: String] {
            return ["x-amz-grant-write-acp": "GrantWriteACP", "Content-MD5": "ContentMD5", "x-amz-grant-write": "GrantWrite", "x-amz-grant-read": "GrantRead", "x-amz-grant-full-control": "GrantFullControl", "x-amz-acl": "ACL", "x-amz-grant-read-acp": "GrantReadACP"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        public var contentMD5: String? = nil
        public var accessControlPolicy: AccessControlPolicy? = nil
        /// Allows grantee to write the ACL for the applicable bucket.
        public var grantWriteACP: String? = nil
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public var grantFullControl: String? = nil
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public var grantWrite: String? = nil
        /// Allows grantee to list the objects in the bucket.
        public var grantRead: String? = nil
        /// The canned ACL to apply to the bucket.
        public var aCL: String? = nil
        /// Allows grantee to read the bucket ACL.
        public var grantReadACP: String? = nil

        public init() {}

        public init(bucket: String, contentMD5: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, grantWriteACP: String? = nil, grantFullControl: String? = nil, grantWrite: String? = nil, grantRead: String? = nil, aCL: String? = nil, grantReadACP: String? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.accessControlPolicy = accessControlPolicy
            self.grantWriteACP = grantWriteACP
            self.grantFullControl = grantFullControl
            self.grantWrite = grantWrite
            self.grantRead = grantRead
            self.aCL = aCL
            self.grantReadACP = grantReadACP
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.contentMD5 = dictionary["ContentMD5"] as? String
            if let accessControlPolicy = dictionary["AccessControlPolicy"] as? [String: Any] { self.accessControlPolicy = try S3.AccessControlPolicy(dictionary: accessControlPolicy) }
            self.grantWriteACP = dictionary["GrantWriteACP"] as? String
            self.grantFullControl = dictionary["GrantFullControl"] as? String
            self.grantWrite = dictionary["GrantWrite"] as? String
            self.grantRead = dictionary["GrantRead"] as? String
            self.aCL = dictionary["ACL"] as? String
            self.grantReadACP = dictionary["GrantReadACP"] as? String
        }
    }

    public struct Redirect: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
        public var replaceKeyPrefixWith: String? = nil
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public var httpRedirectCode: String? = nil
        /// The host name to use in the redirect request.
        public var hostName: String? = nil
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: String? = nil
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
        public var replaceKeyWith: String? = nil

        public init() {}

        public init(replaceKeyPrefixWith: String? = nil, httpRedirectCode: String? = nil, hostName: String? = nil, protocol: String? = nil, replaceKeyWith: String? = nil) {
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.httpRedirectCode = httpRedirectCode
            self.hostName = hostName
            self.`protocol` = `protocol`
            self.replaceKeyWith = replaceKeyWith
        }

        public init(dictionary: [String: Any]) throws {
            self.replaceKeyPrefixWith = dictionary["ReplaceKeyPrefixWith"] as? String
            self.httpRedirectCode = dictionary["HttpRedirectCode"] as? String
            self.hostName = dictionary["HostName"] as? String
            self.`protocol` = dictionary["Protocol"] as? String
            self.replaceKeyWith = dictionary["ReplaceKeyWith"] as? String
        }
    }

    public struct MultipartUpload: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The class of storage used to store the object.
        public var storageClass: String? = nil
        /// Key of the object for which the multipart upload was initiated.
        public var key: String? = nil
        /// Upload ID that identifies the multipart upload.
        public var uploadId: String? = nil
        public var owner: Owner? = nil
        /// Date and time at which the multipart upload was initiated.
        public var initiated: Date? = nil
        /// Identifies who initiated the multipart upload.
        public var initiator: Initiator? = nil

        public init() {}

        public init(storageClass: String? = nil, key: String? = nil, uploadId: String? = nil, owner: Owner? = nil, initiated: Date? = nil, initiator: Initiator? = nil) {
            self.storageClass = storageClass
            self.key = key
            self.uploadId = uploadId
            self.owner = owner
            self.initiated = initiated
            self.initiator = initiator
        }

        public init(dictionary: [String: Any]) throws {
            self.storageClass = dictionary["StorageClass"] as? String
            self.key = dictionary["Key"] as? String
            self.uploadId = dictionary["UploadId"] as? String
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
            self.initiated = dictionary["Initiated"] as? Date
            if let initiator = dictionary["Initiator"] as? [String: Any] { self.initiator = try S3.Initiator(dictionary: initiator) }
        }
    }

    public struct ListBucketAnalyticsConfigurationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["continuation-token": "ContinuationToken"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket from which analytics configurations are retrieved.
        public var bucket: String = ""
        /// The ContinuationToken that represents a placeholder from where this request should begin.
        public var continuationToken: String? = nil

        public init() {}

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.continuationToken = dictionary["ContinuationToken"] as? String
        }
    }

    public struct GetBucketLifecycleConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var rules: [LifecycleRule]? = nil

        public init() {}

        public init(rules: [LifecycleRule]? = nil) {
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            if let rules = dictionary["Rules"] as? [[String: Any]] {
                self.rules = try rules.map({ try LifecycleRule(dictionary: $0) })
            }
        }
    }

    public struct GetBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct RequestPaymentConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies who pays for the download and request fees.
        public var payer: String = ""

        public init() {}

        public init(payer: String) {
            self.payer = payer
        }

        public init(dictionary: [String: Any]) throws {
            guard let payer = dictionary["Payer"] as? String else { throw InitializableError.missingRequiredParam("Payer") }
            self.payer = payer
        }
    }

    public struct DeleteObjectOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-version-id": "VersionId", "x-amz-request-charged": "RequestCharged", "x-amz-delete-marker": "DeleteMarker"]
        }
        /// Returns the version ID of the delete marker created as a result of the DELETE operation.
        public var versionId: String? = nil
        public var requestCharged: String? = nil
        /// Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker.
        public var deleteMarker: Bool? = nil

        public init() {}

        public init(versionId: String? = nil, requestCharged: String? = nil, deleteMarker: Bool? = nil) {
            self.versionId = versionId
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
            self.deleteMarker = dictionary["DeleteMarker"] as? Bool
        }
    }

    public struct QueueConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var filter: NotificationConfigurationFilter? = nil
        /// Amazon SQS queue ARN to which Amazon S3 will publish a message when it detects events of specified type.
        public var queueArn: String = ""
        public var events: [String] = []
        public var id: String? = nil

        public init() {}

        public init(filter: NotificationConfigurationFilter? = nil, queueArn: String, events: [String], id: String? = nil) {
            self.filter = filter
            self.queueArn = queueArn
            self.events = events
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.NotificationConfigurationFilter(dictionary: filter) }
            guard let queueArn = dictionary["QueueArn"] as? String else { throw InitializableError.missingRequiredParam("QueueArn") }
            self.queueArn = queueArn
            guard let events = dictionary["Events"] as? [String] else { throw InitializableError.missingRequiredParam("Events") }
            self.events = events
            self.id = dictionary["Id"] as? String
        }
    }

    public struct GetBucketTaggingOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var tagSet: [Tag] = []

        public init() {}

        public init(tagSet: [Tag]) {
            self.tagSet = tagSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let tagSet = dictionary["TagSet"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("TagSet") }
            self.tagSet = try tagSet.map({ try Tag(dictionary: $0) })
        }
    }

    public struct ErrorDocument: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The object key name to use when a 4XX class error occurs.
        public var key: String = ""

        public init() {}

        public init(key: String) {
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct InventoryConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains the optional fields that are included in the inventory results.
        public var optionalFields: [String]? = nil
        /// Contains information about where to publish the inventory results.
        public var destination: InventoryDestination = InventoryDestination()
        /// Specifies whether the inventory is enabled or disabled.
        public var isEnabled: Bool = false
        /// Specifies the schedule for generating inventory results.
        public var schedule: InventorySchedule = InventorySchedule()
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public var filter: InventoryFilter? = nil
        /// Specifies which object version(s) to included in the inventory results.
        public var includedObjectVersions: String = ""
        /// The ID used to identify the inventory configuration.
        public var id: String = ""

        public init() {}

        public init(optionalFields: [String]? = nil, destination: InventoryDestination, isEnabled: Bool, schedule: InventorySchedule, filter: InventoryFilter? = nil, includedObjectVersions: String, id: String) {
            self.optionalFields = optionalFields
            self.destination = destination
            self.isEnabled = isEnabled
            self.schedule = schedule
            self.filter = filter
            self.includedObjectVersions = includedObjectVersions
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let optionalFields = dictionary["OptionalFields"] as? [String] {
                self.optionalFields = optionalFields
            }
            guard let destination = dictionary["Destination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Destination") }
            self.destination = try S3.InventoryDestination(dictionary: destination)
            guard let isEnabled = dictionary["IsEnabled"] as? Bool else { throw InitializableError.missingRequiredParam("IsEnabled") }
            self.isEnabled = isEnabled
            guard let schedule = dictionary["Schedule"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Schedule") }
            self.schedule = try S3.InventorySchedule(dictionary: schedule)
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.InventoryFilter(dictionary: filter) }
            guard let includedObjectVersions = dictionary["IncludedObjectVersions"] as? String else { throw InitializableError.missingRequiredParam("IncludedObjectVersions") }
            self.includedObjectVersions = includedObjectVersions
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct MetricsFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag used when evaluating a metrics filter.
        public var tag: Tag? = nil
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public var and: MetricsAndOperator? = nil
        /// The prefix used when evaluating a metrics filter.
        public var prefix: String? = nil

        public init() {}

        public init(tag: Tag? = nil, and: MetricsAndOperator? = nil, prefix: String? = nil) {
            self.tag = tag
            self.and = and
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [String: Any] { self.tag = try S3.Tag(dictionary: tag) }
            if let and = dictionary["And"] as? [String: Any] { self.and = try S3.MetricsAndOperator(dictionary: and) }
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct PutBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Tagging"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var tagging: Tagging = Tagging()

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, tagging: Tagging) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.tagging = tagging
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let tagging = dictionary["Tagging"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tagging") }
            self.tagging = try S3.Tagging(dictionary: tagging)
        }
    }

    public struct AnalyticsAndOperator: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of tags to use when evaluating an AND predicate.
        public var tags: [Tag]? = nil
        /// The prefix to use when evaluating an AND predicate.
        public var prefix: String? = nil

        public init() {}

        public init(tags: [Tag]? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
            self.prefix = dictionary["Prefix"] as? String
        }
    }

    public struct ListObjectVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["prefix": "Prefix", "version-id-marker": "VersionIdMarker", "max-keys": "MaxKeys", "delimiter": "Delimiter", "encoding-type": "EncodingType", "key-marker": "KeyMarker"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public var maxKeys: Int32? = nil
        /// Limits the response to keys that begin with the specified prefix.
        public var prefix: String? = nil
        /// A delimiter is a character you use to group keys.
        public var delimiter: String? = nil
        public var encodingType: String? = nil
        /// Specifies the key to start with when listing objects in a bucket.
        public var keyMarker: String? = nil
        /// Specifies the object version you want to start listing from.
        public var versionIdMarker: String? = nil

        public init() {}

        public init(bucket: String, maxKeys: Int32? = nil, prefix: String? = nil, delimiter: String? = nil, encodingType: String? = nil, keyMarker: String? = nil, versionIdMarker: String? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.prefix = prefix
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyMarker = keyMarker
            self.versionIdMarker = versionIdMarker
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.maxKeys = dictionary["MaxKeys"] as? Int32
            self.prefix = dictionary["Prefix"] as? String
            self.delimiter = dictionary["Delimiter"] as? String
            self.encodingType = dictionary["EncodingType"] as? String
            self.keyMarker = dictionary["KeyMarker"] as? String
            self.versionIdMarker = dictionary["VersionIdMarker"] as? String
        }
    }

    public struct GetBucketLifecycleOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var rules: [Rule]? = nil

        public init() {}

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            if let rules = dictionary["Rules"] as? [[String: Any]] {
                self.rules = try rules.map({ try Rule(dictionary: $0) })
            }
        }
    }

    public struct DeleteMarkerEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public var isLatest: Bool? = nil
        /// Date and time the object was last modified.
        public var lastModified: Date? = nil
        /// The object key.
        public var key: String? = nil
        /// Version ID of an object.
        public var versionId: String? = nil
        public var owner: Owner? = nil

        public init() {}

        public init(isLatest: Bool? = nil, lastModified: Date? = nil, key: String? = nil, versionId: String? = nil, owner: Owner? = nil) {
            self.isLatest = isLatest
            self.lastModified = lastModified
            self.key = key
            self.versionId = versionId
            self.owner = owner
        }

        public init(dictionary: [String: Any]) throws {
            self.isLatest = dictionary["IsLatest"] as? Bool
            self.lastModified = dictionary["LastModified"] as? Date
            self.key = dictionary["Key"] as? String
            self.versionId = dictionary["VersionId"] as? String
            if let owner = dictionary["Owner"] as? [String: Any] { self.owner = try S3.Owner(dictionary: owner) }
        }
    }

    public struct DeleteBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct ReplicationRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var iD: String? = nil
        /// The rule is ignored if status is not Enabled.
        public var status: String = ""
        public var destination: Destination = Destination()
        /// Object keyname prefix identifying one or more objects to which the rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes are not supported.
        public var prefix: String = ""

        public init() {}

        public init(iD: String? = nil, status: String, destination: Destination, prefix: String) {
            self.iD = iD
            self.status = status
            self.destination = destination
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            self.iD = dictionary["ID"] as? String
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let destination = dictionary["Destination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Destination") }
            self.destination = try S3.Destination(dictionary: destination)
            guard let prefix = dictionary["Prefix"] as? String else { throw InitializableError.missingRequiredParam("Prefix") }
            self.prefix = prefix
        }
    }

    public struct DeleteObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// The versionId of the object that the tag-set will be removed from.
        public var versionId: String? = nil
        public var key: String = ""

        public init() {}

        public init(bucket: String, versionId: String? = nil, key: String) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.versionId = dictionary["VersionId"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct LambdaFunctionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Lambda cloud function ARN that Amazon S3 can invoke when it detects events of the specified type.
        public var lambdaFunctionArn: String = ""
        public var events: [String] = []
        public var filter: NotificationConfigurationFilter? = nil
        public var id: String? = nil

        public init() {}

        public init(lambdaFunctionArn: String, events: [String], filter: NotificationConfigurationFilter? = nil, id: String? = nil) {
            self.lambdaFunctionArn = lambdaFunctionArn
            self.events = events
            self.filter = filter
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let lambdaFunctionArn = dictionary["LambdaFunctionArn"] as? String else { throw InitializableError.missingRequiredParam("LambdaFunctionArn") }
            self.lambdaFunctionArn = lambdaFunctionArn
            guard let events = dictionary["Events"] as? [String] else { throw InitializableError.missingRequiredParam("Events") }
            self.events = events
            if let filter = dictionary["Filter"] as? [String: Any] { self.filter = try S3.NotificationConfigurationFilter(dictionary: filter) }
            self.id = dictionary["Id"] as? String
        }
    }

    public struct GetBucketLoggingOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var loggingEnabled: LoggingEnabled? = nil

        public init() {}

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        public init(dictionary: [String: Any]) throws {
            if let loggingEnabled = dictionary["LoggingEnabled"] as? [String: Any] { self.loggingEnabled = try S3.LoggingEnabled(dictionary: loggingEnabled) }
        }
    }

    public struct UploadPartOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "ETag": "ETag", "x-amz-request-charged": "RequestCharged", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5"]
        }
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// Entity tag for the uploaded object.
        public var eTag: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        public var requestCharged: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil

        public init() {}

        public init(sSECustomerKeyMD5: String? = nil, sSEKMSKeyId: String? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: String? = nil, serverSideEncryption: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
        }

        public init(dictionary: [String: Any]) throws {
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.eTag = dictionary["ETag"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
        }
    }

    public struct GetObjectTaggingOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-version-id": "VersionId"]
        }
        public var versionId: String? = nil
        public var tagSet: [Tag] = []

        public init() {}

        public init(versionId: String? = nil, tagSet: [Tag]) {
            self.versionId = versionId
            self.tagSet = tagSet
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
            guard let tagSet = dictionary["TagSet"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("TagSet") }
            self.tagSet = try tagSet.map({ try Tag(dictionary: $0) })
        }
    }

    public struct GetBucketCorsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var cORSRules: [CORSRule]? = nil

        public init() {}

        public init(cORSRules: [CORSRule]? = nil) {
            self.cORSRules = cORSRules
        }

        public init(dictionary: [String: Any]) throws {
            if let cORSRules = dictionary["CORSRules"] as? [[String: Any]] {
                self.cORSRules = try cORSRules.map({ try CORSRule(dictionary: $0) })
            }
        }
    }

    public struct Error: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var versionId: String? = nil
        public var key: String? = nil
        public var code: String? = nil
        public var message: String? = nil

        public init() {}

        public init(versionId: String? = nil, key: String? = nil, code: String? = nil, message: String? = nil) {
            self.versionId = versionId
            self.key = key
            self.code = code
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
            self.key = dictionary["Key"] as? String
            self.code = dictionary["Code"] as? String
            self.message = dictionary["Message"] as? String
        }
    }

    public struct PutObjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Body"
        public static var headerParams: [String: String] {
            return ["Cache-Control": "CacheControl", "Content-Length": "ContentLength", "x-amz-grant-write-acp": "GrantWriteACP", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-payer": "RequestPayer", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-grant-read": "GrantRead", "x-amz-grant-full-control": "GrantFullControl", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "Content-Language": "ContentLanguage", "x-amz-acl": "ACL", "x-amz-website-redirect-location": "WebsiteRedirectLocation", "x-amz-tagging": "Tagging", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "Content-Disposition": "ContentDisposition", "Content-MD5": "ContentMD5", "Expires": "Expires", "Content-Type": "ContentType", "x-amz-storage-class": "StorageClass", "x-amz-server-side-encryption": "ServerSideEncryption", "Content-Encoding": "ContentEncoding", "x-amz-grant-read-acp": "GrantReadACP"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        /// Name of the bucket to which the PUT operation was initiated.
        public var bucket: String = ""
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public var tagging: String? = nil
        /// Specifies presentational information for the object.
        public var contentDisposition: String? = nil
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public var sSEKMSKeyId: String? = nil
        /// Allows grantee to read the object ACL.
        public var grantReadACP: String? = nil
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil
        /// The language the content is in.
        public var contentLanguage: String? = nil
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public var contentEncoding: String? = nil
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public var contentLength: Int64? = nil
        /// Allows grantee to write the ACL for the applicable object.
        public var grantWriteACP: String? = nil
        /// Object key for which the PUT operation was initiated.
        public var key: String = ""
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public var websiteRedirectLocation: String? = nil
        /// Object data.
        public var body: Data? = nil
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public var sSECustomerKey: String? = nil
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public var contentMD5: String? = nil
        /// Specifies caching behavior along the request/reply chain.
        public var cacheControl: String? = nil
        public var requestPayer: String? = nil
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public var grantFullControl: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// The canned ACL to apply to the object.
        public var aCL: String? = nil
        /// A map of metadata to store with the object in S3.
        public var metadata: [String: String]? = nil
        /// The date and time at which the object is no longer cacheable.
        public var expires: Date? = nil
        /// A standard MIME type describing the format of the object data.
        public var contentType: String? = nil
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public var storageClass: String? = nil
        /// Allows grantee to read the object data and its metadata.
        public var grantRead: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil

        public init() {}

        public init(bucket: String, tagging: String? = nil, contentDisposition: String? = nil, sSEKMSKeyId: String? = nil, grantReadACP: String? = nil, sSECustomerAlgorithm: String? = nil, contentLanguage: String? = nil, contentEncoding: String? = nil, contentLength: Int64? = nil, grantWriteACP: String? = nil, key: String, websiteRedirectLocation: String? = nil, body: Data? = nil, sSECustomerKey: String? = nil, contentMD5: String? = nil, cacheControl: String? = nil, requestPayer: String? = nil, grantFullControl: String? = nil, sSECustomerKeyMD5: String? = nil, aCL: String? = nil, metadata: [String: String]? = nil, expires: Date? = nil, contentType: String? = nil, storageClass: String? = nil, grantRead: String? = nil, serverSideEncryption: String? = nil) {
            self.bucket = bucket
            self.tagging = tagging
            self.contentDisposition = contentDisposition
            self.sSEKMSKeyId = sSEKMSKeyId
            self.grantReadACP = grantReadACP
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentLanguage = contentLanguage
            self.contentEncoding = contentEncoding
            self.contentLength = contentLength
            self.grantWriteACP = grantWriteACP
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.body = body
            self.sSECustomerKey = sSECustomerKey
            self.contentMD5 = contentMD5
            self.cacheControl = cacheControl
            self.requestPayer = requestPayer
            self.grantFullControl = grantFullControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.aCL = aCL
            self.metadata = metadata
            self.expires = expires
            self.contentType = contentType
            self.storageClass = storageClass
            self.grantRead = grantRead
            self.serverSideEncryption = serverSideEncryption
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.tagging = dictionary["Tagging"] as? String
            self.contentDisposition = dictionary["ContentDisposition"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.grantReadACP = dictionary["GrantReadACP"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.contentLanguage = dictionary["ContentLanguage"] as? String
            self.contentEncoding = dictionary["ContentEncoding"] as? String
            self.contentLength = dictionary["ContentLength"] as? Int64
            self.grantWriteACP = dictionary["GrantWriteACP"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.websiteRedirectLocation = dictionary["WebsiteRedirectLocation"] as? String
            self.body = dictionary["Body"] as? Data
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            self.contentMD5 = dictionary["ContentMD5"] as? String
            self.cacheControl = dictionary["CacheControl"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.grantFullControl = dictionary["GrantFullControl"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.aCL = dictionary["ACL"] as? String
            if let metadata = dictionary["Metadata"] as? [String: String] {
                self.metadata = metadata
            }
            self.expires = dictionary["Expires"] as? Date
            self.contentType = dictionary["ContentType"] as? String
            self.storageClass = dictionary["StorageClass"] as? String
            self.grantRead = dictionary["GrantRead"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
        }
    }

    public struct CreateBucketConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        public var locationConstraint: String? = nil

        public init() {}

        public init(locationConstraint: String? = nil) {
            self.locationConstraint = locationConstraint
        }

        public init(dictionary: [String: Any]) throws {
            self.locationConstraint = dictionary["LocationConstraint"] as? String
        }
    }

    public struct GetBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct UploadPartRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Body"
        public static var headerParams: [String: String] {
            return ["Content-Length": "ContentLength", "Content-MD5": "ContentMD5", "x-amz-server-side-encryption-customer-key": "SSECustomerKey", "x-amz-request-payer": "RequestPayer", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5"]
        }
        public static var queryParams: [String: String] {
            return ["uploadId": "UploadId", "partNumber": "PartNumber"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        /// Name of the bucket to which the multipart upload was initiated.
        public var bucket: String = ""
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public var sSECustomerKey: String? = nil
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public var contentMD5: String? = nil
        /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
        public var partNumber: Int32 = 0
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public var contentLength: Int64? = nil
        public var requestPayer: String? = nil
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public var sSECustomerKeyMD5: String? = nil
        /// Object key for which the multipart upload was initiated.
        public var key: String = ""
        /// Upload ID identifying the multipart upload whose part is being uploaded.
        public var uploadId: String = ""
        /// Object data.
        public var body: Data? = nil
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public var sSECustomerAlgorithm: String? = nil

        public init() {}

        public init(bucket: String, sSECustomerKey: String? = nil, contentMD5: String? = nil, partNumber: Int32, contentLength: Int64? = nil, requestPayer: String? = nil, sSECustomerKeyMD5: String? = nil, key: String, uploadId: String, body: Data? = nil, sSECustomerAlgorithm: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.contentMD5 = contentMD5
            self.partNumber = partNumber
            self.contentLength = contentLength
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.key = key
            self.uploadId = uploadId
            self.body = body
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.sSECustomerKey = dictionary["SSECustomerKey"] as? String
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let partNumber = dictionary["PartNumber"] as? Int32 else { throw InitializableError.missingRequiredParam("PartNumber") }
            self.partNumber = partNumber
            self.contentLength = dictionary["ContentLength"] as? Int64
            self.requestPayer = dictionary["RequestPayer"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.body = dictionary["Body"] as? Data
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
        }
    }

    public struct DeletedObject: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var deleteMarkerVersionId: String? = nil
        public var versionId: String? = nil
        public var key: String? = nil
        public var deleteMarker: Bool? = nil

        public init() {}

        public init(deleteMarkerVersionId: String? = nil, versionId: String? = nil, key: String? = nil, deleteMarker: Bool? = nil) {
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.versionId = versionId
            self.key = key
            self.deleteMarker = deleteMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.deleteMarkerVersionId = dictionary["DeleteMarkerVersionId"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.key = dictionary["Key"] as? String
            self.deleteMarker = dictionary["DeleteMarker"] as? Bool
        }
    }

    public struct PutObjectTaggingOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-version-id": "VersionId"]
        }
        public var versionId: String? = nil

        public init() {}

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        public init(dictionary: [String: Any]) throws {
            self.versionId = dictionary["VersionId"] as? String
        }
    }

    public struct GetBucketRequestPaymentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct DeleteBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct S3KeyFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var filterRules: [FilterRule]? = nil

        public init() {}

        public init(filterRules: [FilterRule]? = nil) {
            self.filterRules = filterRules
        }

        public init(dictionary: [String: Any]) throws {
            if let filterRules = dictionary["FilterRules"] as? [[String: Any]] {
                self.filterRules = try filterRules.map({ try FilterRule(dictionary: $0) })
            }
        }
    }

    public struct PutBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "WebsiteConfiguration"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var websiteConfiguration: WebsiteConfiguration = WebsiteConfiguration()

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, websiteConfiguration: WebsiteConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.websiteConfiguration = websiteConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let websiteConfiguration = dictionary["WebsiteConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("WebsiteConfiguration") }
            self.websiteConfiguration = try S3.WebsiteConfiguration(dictionary: websiteConfiguration)
        }
    }

    public struct PutBucketNotificationConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "NotificationConfiguration"
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""
        public var notificationConfiguration: NotificationConfiguration = NotificationConfiguration()

        public init() {}

        public init(bucket: String, notificationConfiguration: NotificationConfiguration) {
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let notificationConfiguration = dictionary["NotificationConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NotificationConfiguration") }
            self.notificationConfiguration = try S3.NotificationConfiguration(dictionary: notificationConfiguration)
        }
    }

    public struct DeleteBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket containing the metrics configuration to delete.
        public var bucket: String = ""
        /// The ID used to identify the metrics configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct AbortIncompleteMultipartUpload: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
        public var daysAfterInitiation: Int32? = nil

        public init() {}

        public init(daysAfterInitiation: Int32? = nil) {
            self.daysAfterInitiation = daysAfterInitiation
        }

        public init(dictionary: [String: Any]) throws {
            self.daysAfterInitiation = dictionary["DaysAfterInitiation"] as? Int32
        }
    }

    public struct RestoreRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Glacier related prameters pertaining to this job.
        public var glacierJobParameters: GlacierJobParameters? = nil
        /// Lifetime of the active copy in days
        public var days: Int32 = 0

        public init() {}

        public init(glacierJobParameters: GlacierJobParameters? = nil, days: Int32) {
            self.glacierJobParameters = glacierJobParameters
            self.days = days
        }

        public init(dictionary: [String: Any]) throws {
            if let glacierJobParameters = dictionary["GlacierJobParameters"] as? [String: Any] { self.glacierJobParameters = try S3.GlacierJobParameters(dictionary: glacierJobParameters) }
            guard let days = dictionary["Days"] as? Int32 else { throw InitializableError.missingRequiredParam("Days") }
            self.days = days
        }
    }

    public struct GetBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket containing the inventory configuration to retrieve.
        public var bucket: String = ""
        /// The ID used to identify the inventory configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct LifecycleConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var rules: [Rule] = []

        public init() {}

        public init(rules: [Rule]) {
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            guard let rules = dictionary["Rules"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Rules") }
            self.rules = try rules.map({ try Rule(dictionary: $0) })
        }
    }

    public struct GetBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["id": "Id"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// The name of the bucket from which an analytics configuration is retrieved.
        public var bucket: String = ""
        /// The identifier used to represent an analytics configuration.
        public var id: String = ""

        public init() {}

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct GetBucketAccelerateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        /// Name of the bucket for which the accelerate configuration is retrieved.
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct GetBucketInventoryConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "InventoryConfiguration"
        /// Specifies the inventory configuration.
        public var inventoryConfiguration: InventoryConfiguration? = nil

        public init() {}

        public init(inventoryConfiguration: InventoryConfiguration? = nil) {
            self.inventoryConfiguration = inventoryConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let inventoryConfiguration = dictionary["InventoryConfiguration"] as? [String: Any] { self.inventoryConfiguration = try S3.InventoryConfiguration(dictionary: inventoryConfiguration) }
        }
    }

    public struct ListPartsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["max-parts": "MaxParts", "uploadId": "UploadId", "part-number-marker": "PartNumberMarker"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
        public var partNumberMarker: Int32? = nil
        public var key: String = ""
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public var uploadId: String = ""
        /// Sets the maximum number of parts to return.
        public var maxParts: Int32? = nil
        public var requestPayer: String? = nil

        public init() {}

        public init(bucket: String, partNumberMarker: Int32? = nil, key: String, uploadId: String, maxParts: Int32? = nil, requestPayer: String? = nil) {
            self.bucket = bucket
            self.partNumberMarker = partNumberMarker
            self.key = key
            self.uploadId = uploadId
            self.maxParts = maxParts
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            self.partNumberMarker = dictionary["PartNumberMarker"] as? Int32
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.maxParts = dictionary["MaxParts"] as? Int32
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct RestoreObjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "RestoreRequest"
        public static var headerParams: [String: String] {
            return ["x-amz-request-payer": "RequestPayer"]
        }
        public static var queryParams: [String: String] {
            return ["versionId": "VersionId"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket", "Key": "Key"]
        }
        public var bucket: String = ""
        public var restoreRequest: RestoreRequest? = nil
        public var key: String = ""
        public var versionId: String? = nil
        public var requestPayer: String? = nil

        public init() {}

        public init(bucket: String, restoreRequest: RestoreRequest? = nil, key: String, versionId: String? = nil, requestPayer: String? = nil) {
            self.bucket = bucket
            self.restoreRequest = restoreRequest
            self.key = key
            self.versionId = versionId
            self.requestPayer = requestPayer
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            if let restoreRequest = dictionary["RestoreRequest"] as? [String: Any] { self.restoreRequest = try S3.RestoreRequest(dictionary: restoreRequest) }
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.versionId = dictionary["VersionId"] as? String
            self.requestPayer = dictionary["RequestPayer"] as? String
        }
    }

    public struct Grantee: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The canonical user ID of the grantee.
        public var iD: String? = nil
        /// Email address of the grantee.
        public var emailAddress: String? = nil
        /// Type of grantee
        public var type: String = ""
        /// Screen name of the grantee.
        public var displayName: String? = nil
        /// URI of the grantee group.
        public var uRI: String? = nil

        public init() {}

        public init(iD: String? = nil, emailAddress: String? = nil, type: String, displayName: String? = nil, uRI: String? = nil) {
            self.iD = iD
            self.emailAddress = emailAddress
            self.type = type
            self.displayName = displayName
            self.uRI = uRI
        }

        public init(dictionary: [String: Any]) throws {
            self.iD = dictionary["ID"] as? String
            self.emailAddress = dictionary["EmailAddress"] as? String
            guard let type = dictionary["Type"] as? String else { throw InitializableError.missingRequiredParam("Type") }
            self.type = type
            self.displayName = dictionary["DisplayName"] as? String
            self.uRI = dictionary["URI"] as? String
        }
    }

    public struct QueueConfigurationDeprecated: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var queue: String? = nil
        public var events: [String]? = nil
        public var event: String? = nil
        public var id: String? = nil

        public init() {}

        public init(queue: String? = nil, events: [String]? = nil, event: String? = nil, id: String? = nil) {
            self.queue = queue
            self.events = events
            self.event = event
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.queue = dictionary["Queue"] as? String
            if let events = dictionary["Events"] as? [String] {
                self.events = events
            }
            self.event = dictionary["Event"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct GetBucketVersioningRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct GetBucketLoggingRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var bucket: String = ""

        public init() {}

        public init(bucket: String) {
            self.bucket = bucket
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
        }
    }

    public struct PutBucketRequestPaymentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "RequestPaymentConfiguration"
        public static var headerParams: [String: String] {
            return ["Content-MD5": "ContentMD5"]
        }
        public static var pathParams: [String: String] {
            return ["Bucket": "Bucket"]
        }
        public var contentMD5: String? = nil
        public var bucket: String = ""
        public var requestPaymentConfiguration: RequestPaymentConfiguration = RequestPaymentConfiguration()

        public init() {}

        public init(contentMD5: String? = nil, bucket: String, requestPaymentConfiguration: RequestPaymentConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.requestPaymentConfiguration = requestPaymentConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.contentMD5 = dictionary["ContentMD5"] as? String
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let requestPaymentConfiguration = dictionary["RequestPaymentConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RequestPaymentConfiguration") }
            self.requestPaymentConfiguration = try S3.RequestPaymentConfiguration(dictionary: requestPaymentConfiguration)
        }
    }

    public struct PutObjectOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-charged": "RequestCharged", "x-amz-version-id": "VersionId", "ETag": "ETag", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-expiration": "Expiration"]
        }
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public var expiration: String? = nil
        /// Version of the object.
        public var versionId: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// Entity tag for the uploaded object.
        public var eTag: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        public var requestCharged: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil

        public init() {}

        public init(expiration: String? = nil, versionId: String? = nil, sSECustomerKeyMD5: String? = nil, sSEKMSKeyId: String? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: String? = nil, serverSideEncryption: String? = nil) {
            self.expiration = expiration
            self.versionId = versionId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
        }

        public init(dictionary: [String: Any]) throws {
            self.expiration = dictionary["Expiration"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.eTag = dictionary["ETag"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
        }
    }

    public struct CopyObjectOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CopyObjectResult"
        public static var headerParams: [String: String] {
            return ["x-amz-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5", "x-amz-copy-source-version-id": "CopySourceVersionId", "x-amz-server-side-encryption": "ServerSideEncryption", "x-amz-server-side-encryption-aws-kms-key-id": "SSEKMSKeyId", "x-amz-request-charged": "RequestCharged", "x-amz-version-id": "VersionId", "x-amz-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm", "x-amz-expiration": "Expiration"]
        }
        public var copyObjectResult: CopyObjectResult? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public var sSECustomerKeyMD5: String? = nil
        /// Version ID of the newly created copy.
        public var versionId: String? = nil
        public var copySourceVersionId: String? = nil
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public var sSEKMSKeyId: String? = nil
        /// If the object expiration is configured, the response includes this header.
        public var expiration: String? = nil
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public var sSECustomerAlgorithm: String? = nil
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public var serverSideEncryption: String? = nil
        public var requestCharged: String? = nil

        public init() {}

        public init(copyObjectResult: CopyObjectResult? = nil, sSECustomerKeyMD5: String? = nil, versionId: String? = nil, copySourceVersionId: String? = nil, sSEKMSKeyId: String? = nil, expiration: String? = nil, sSECustomerAlgorithm: String? = nil, serverSideEncryption: String? = nil, requestCharged: String? = nil) {
            self.copyObjectResult = copyObjectResult
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.versionId = versionId
            self.copySourceVersionId = copySourceVersionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.expiration = expiration
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
        }

        public init(dictionary: [String: Any]) throws {
            if let copyObjectResult = dictionary["CopyObjectResult"] as? [String: Any] { self.copyObjectResult = try S3.CopyObjectResult(dictionary: copyObjectResult) }
            self.sSECustomerKeyMD5 = dictionary["SSECustomerKeyMD5"] as? String
            self.versionId = dictionary["VersionId"] as? String
            self.copySourceVersionId = dictionary["CopySourceVersionId"] as? String
            self.sSEKMSKeyId = dictionary["SSEKMSKeyId"] as? String
            self.expiration = dictionary["Expiration"] as? String
            self.sSECustomerAlgorithm = dictionary["SSECustomerAlgorithm"] as? String
            self.serverSideEncryption = dictionary["ServerSideEncryption"] as? String
            self.requestCharged = dictionary["RequestCharged"] as? String
        }
    }

}