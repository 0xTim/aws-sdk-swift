// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Acm {

    public enum CertificateType: String, CustomStringConvertible, Codable {
        case imported = "IMPORTED"
        case amazonIssued = "AMAZON_ISSUED"
        public var description: String { return self.rawValue }
    }

    public struct RemoveTagsFromCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// The key-value pair that defines the tag to remove.
        public let tags: [Tag]
        /// String that contains the ARN of the ACM Certificate with one or more tags that you want to remove. This must be of the form:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String

        public init(tags: [Tag], certificateArn: String) {
            self.tags = tags
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case certificateArn = "CertificateArn"
        }
    }

    public enum DomainStatus: String, CustomStringConvertible, Codable {
        case pendingValidation = "PENDING_VALIDATION"
        case success = "SUCCESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ListCertificatesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CertificateSummaryList", required: false, type: .list)
        ]
        /// When the list is truncated, this value is present and contains the value to use for the NextToken parameter in a subsequent pagination request.
        public let nextToken: String?
        /// A list of ACM Certificates.
        public let certificateSummaryList: [CertificateSummary]?

        public init(nextToken: String? = nil, certificateSummaryList: [CertificateSummary]? = nil) {
            self.nextToken = nextToken
            self.certificateSummaryList = certificateSummaryList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case certificateSummaryList = "CertificateSummaryList"
        }
    }

    public struct RequestCertificateResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string)
        ]
        /// String that contains the ARN of the issued certificate. This must be of the form:  arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012 
        public let certificateArn: String?

        public init(certificateArn: String? = nil) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public enum CertificateStatus: String, CustomStringConvertible, Codable {
        case pendingValidation = "PENDING_VALIDATION"
        case issued = "ISSUED"
        case inactive = "INACTIVE"
        case expired = "EXPIRED"
        case validationTimedOut = "VALIDATION_TIMED_OUT"
        case revoked = "REVOKED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ImportCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: true, type: .blob), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "PrivateKey", required: true, type: .blob), 
            AWSShapeMember(label: "CertificateChain", required: false, type: .blob)
        ]
        /// The certificate to import. It must meet the following requirements:   Must be PEM-encoded.   Must contain a 1024-bit or 2048-bit RSA public key.   Must be valid at the time of import. You cannot import a certificate before its validity period begins (the certificate's NotBefore date) or after it expires (the certificate's NotAfter date).  
        public let certificate: Data
        /// The Amazon Resource Name (ARN) of an imported certificate to replace. To import a new certificate, omit this field.
        public let certificateArn: String?
        /// The private key that matches the public key in the certificate. It must meet the following requirements:   Must be PEM-encoded.   Must be unencrypted. You cannot import a private key that is protected by a password or passphrase.  
        public let privateKey: Data
        /// The certificate chain. It must be PEM-encoded.
        public let certificateChain: Data?

        public init(certificate: Data, certificateArn: String? = nil, privateKey: Data, certificateChain: Data? = nil) {
            self.certificate = certificate
            self.certificateArn = certificateArn
            self.privateKey = privateKey
            self.certificateChain = certificateChain
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case certificateArn = "CertificateArn"
            case privateKey = "PrivateKey"
            case certificateChain = "CertificateChain"
        }
    }

    public struct ListTagsForCertificateResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The key-value pairs that define the applied tags.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String?
        /// The key of the tag.
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct GetCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// String that contains a certificate ARN in the following format:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public struct DomainValidation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidationDomain", required: false, type: .string), 
            AWSShapeMember(label: "ValidationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "ValidationEmails", required: false, type: .list)
        ]
        /// The domain name that ACM used to send domain validation emails.
        public let validationDomain: String?
        /// The validation status of the domain name.
        public let validationStatus: DomainStatus?
        /// A fully qualified domain name (FQDN) in the certificate. For example, www.example.com or example.com.
        public let domainName: String
        /// A list of email addresses that ACM used to send domain validation emails.
        public let validationEmails: [String]?

        public init(validationDomain: String? = nil, validationStatus: DomainStatus? = nil, domainName: String, validationEmails: [String]? = nil) {
            self.validationDomain = validationDomain
            self.validationStatus = validationStatus
            self.domainName = domainName
            self.validationEmails = validationEmails
        }

        private enum CodingKeys: String, CodingKey {
            case validationDomain = "ValidationDomain"
            case validationStatus = "ValidationStatus"
            case domainName = "DomainName"
            case validationEmails = "ValidationEmails"
        }
    }

    public enum RenewalStatus: String, CustomStringConvertible, Codable {
        case pendingAutoRenewal = "PENDING_AUTO_RENEWAL"
        case pendingValidation = "PENDING_VALIDATION"
        case success = "SUCCESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct AddTagsToCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// The key-value pair that defines the tag. The tag value is optional.
        public let tags: [Tag]
        /// String that contains the ARN of the ACM Certificate to which the tag is to be applied. This must be of the form:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String

        public init(tags: [Tag], certificateArn: String) {
            self.tags = tags
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case certificateArn = "CertificateArn"
        }
    }

    public struct GetCertificateResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "CertificateChain", required: false, type: .string)
        ]
        /// String that contains the ACM Certificate represented by the ARN specified at input.
        public let certificate: String?
        /// The certificate chain that contains the root certificate issued by the certificate authority (CA).
        public let certificateChain: String?

        public init(certificate: String? = nil, certificateChain: String? = nil) {
            self.certificate = certificate
            self.certificateChain = certificateChain
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case certificateChain = "CertificateChain"
        }
    }

    public struct ResendValidationEmailRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidationDomain", required: true, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: true, type: .string), 
            AWSShapeMember(label: "Domain", required: true, type: .string)
        ]
        /// The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the Domain value or a superdomain of the Domain value. For example, if you requested a certificate for site.subdomain.example.com and specify a ValidationDomain of subdomain.example.com, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:   admin@subdomain.example.com   administrator@subdomain.example.com   hostmaster@subdomain.example.com   postmaster@subdomain.example.com   webmaster@subdomain.example.com  
        public let validationDomain: String
        /// String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the RequestCertificate action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form:  arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012 
        public let certificateArn: String
        /// The fully qualified domain name (FQDN) of the certificate that needs to be validated.
        public let domain: String

        public init(validationDomain: String, certificateArn: String, domain: String) {
            self.validationDomain = validationDomain
            self.certificateArn = certificateArn
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case validationDomain = "ValidationDomain"
            case certificateArn = "CertificateArn"
            case domain = "Domain"
        }
    }

    public enum RevocationReason: String, CustomStringConvertible, Codable {
        case unspecified = "UNSPECIFIED"
        case keyCompromise = "KEY_COMPROMISE"
        case caCompromise = "CA_COMPROMISE"
        case affiliationChanged = "AFFILIATION_CHANGED"
        case superceded = "SUPERCEDED"
        case cessationOfOperation = "CESSATION_OF_OPERATION"
        case certificateHold = "CERTIFICATE_HOLD"
        case removeFromCrl = "REMOVE_FROM_CRL"
        case privilegeWithdrawn = "PRIVILEGE_WITHDRAWN"
        case aACompromise = "A_A_COMPROMISE"
        public var description: String { return self.rawValue }
    }

    public struct RenewalSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainValidationOptions", required: true, type: .list), 
            AWSShapeMember(label: "RenewalStatus", required: true, type: .enum)
        ]
        /// Contains information about the validation of each domain name in the certificate, as it pertains to ACM's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request. This field exists only when the certificate type is AMAZON_ISSUED.
        public let domainValidationOptions: [DomainValidation]
        /// The status of ACM's managed renewal of the certificate.
        public let renewalStatus: RenewalStatus

        public init(domainValidationOptions: [DomainValidation], renewalStatus: RenewalStatus) {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainValidationOptions = "DomainValidationOptions"
            case renewalStatus = "RenewalStatus"
        }
    }

    public struct DomainValidationOption: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidationDomain", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// The domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the DomainName value or a superdomain of the DomainName value. For example, if you request a certificate for testing.example.com, you can specify example.com for this value. In that case, ACM sends domain validation emails to the following five addresses:   admin@example.com   administrator@example.com   hostmaster@example.com   postmaster@example.com   webmaster@example.com  
        public let validationDomain: String
        /// A fully qualified domain name (FQDN) in the certificate request.
        public let domainName: String

        public init(validationDomain: String, domainName: String) {
            self.validationDomain = validationDomain
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case validationDomain = "ValidationDomain"
            case domainName = "DomainName"
        }
    }

    public struct CertificateSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "DomainName", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the certificate. This is of the form:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String?
        /// Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.
        public let domainName: String?

        public init(certificateArn: String? = nil, domainName: String? = nil) {
            self.certificateArn = certificateArn
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case domainName = "DomainName"
        }
    }

    public struct DescribeCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the ACM Certificate. The ARN must have the following form:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public enum KeyAlgorithm: String, CustomStringConvertible, Codable {
        case rsa2048 = "RSA_2048"
        case rsa1024 = "RSA_1024"
        case ecPrime256V1 = "EC_prime256v1"
        public var description: String { return self.rawValue }
    }

    public struct ListCertificatesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateStatuses", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", required: false, type: .integer)
        ]
        /// The status or statuses on which to filter the list of ACM Certificates.
        public let certificateStatuses: [CertificateStatus]?
        /// Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the response you just received.
        public let nextToken: String?
        /// Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
        public let maxItems: Int32?

        public init(certificateStatuses: [CertificateStatus]? = nil, nextToken: String? = nil, maxItems: Int32? = nil) {
            self.certificateStatuses = certificateStatuses
            self.nextToken = nextToken
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case certificateStatuses = "CertificateStatuses"
            case nextToken = "NextToken"
            case maxItems = "MaxItems"
        }
    }

    public struct DescribeCertificateResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .structure)
        ]
        /// Metadata about an ACM certificate.
        public let certificate: CertificateDetail?

        public init(certificate: CertificateDetail? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct RequestCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainValidationOptions", required: false, type: .list), 
            AWSShapeMember(label: "SubjectAlternativeNames", required: false, type: .list), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string)
        ]
        /// The domain name that you want ACM to use to send you emails to validate your ownership of the domain.
        public let domainValidationOptions: [DomainValidationOption]?
        /// Additional FQDNs to be included in the Subject Alternative Name extension of the ACM Certificate. For example, add the name www.example.net to a certificate for which the DomainName field is www.example.com if users can reach your site by using either name. The maximum number of domain names that you can add to an ACM Certificate is 100. However, the initial limit is 10 domain names. If you need more than 10 names, you must request a limit increase. For more information, see Limits.
        public let subjectAlternativeNames: [String]?
        ///  Fully qualified domain name (FQDN), such as www.example.com, of the site that you want to secure with an ACM Certificate. Use an asterisk (*) to create a wildcard certificate that protects several sites in the same domain. For example, *.example.com protects www.example.com, site.example.com, and images.example.com.   The maximum length of a DNS name is 253 octets. The name is made up of multiple labels separated by periods. No label can be longer than 63 octets. Consider the following examples:   (63 octets).(63 octets).(63 octets).(61 octets) is legal because the total length is 253 octets (63+1+63+1+63+1+61) and no label exceeds 63 octets.   (64 octets).(63 octets).(63 octets).(61 octets) is not legal because the total length exceeds 253 octets (64+1+63+1+63+1+61) and the first label exceeds 63 octets.   (63 octets).(63 octets).(63 octets).(62 octets) is not legal because the total length of the DNS name (63+1+63+1+63+1+62) exceeds 253 octets. 
        public let domainName: String
        /// Customer chosen string that can be used to distinguish between calls to RequestCertificate. Idempotency tokens time out after one hour. Therefore, if you call RequestCertificate multiple times with the same idempotency token within one hour, ACM recognizes that you are requesting only one certificate and will issue only one. If you change the idempotency token for each call, ACM recognizes that you are requesting multiple certificates.
        public let idempotencyToken: String?

        public init(domainValidationOptions: [DomainValidationOption]? = nil, subjectAlternativeNames: [String]? = nil, domainName: String, idempotencyToken: String? = nil) {
            self.domainValidationOptions = domainValidationOptions
            self.subjectAlternativeNames = subjectAlternativeNames
            self.domainName = domainName
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case domainValidationOptions = "DomainValidationOptions"
            case subjectAlternativeNames = "SubjectAlternativeNames"
            case domainName = "DomainName"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct ImportCertificateResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the imported certificate.
        public let certificateArn: String?

        public init(certificateArn: String? = nil) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public struct ListTagsForCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// String that contains the ARN of the ACM Certificate for which you want to list the tags. This has the following form:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public struct DeleteCertificateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// String that contains the ARN of the ACM Certificate to be deleted. This must be of the form:  arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012  For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public enum FailureReason: String, CustomStringConvertible, Codable {
        case noAvailableContacts = "NO_AVAILABLE_CONTACTS"
        case additionalVerificationRequired = "ADDITIONAL_VERIFICATION_REQUIRED"
        case domainNotAllowed = "DOMAIN_NOT_ALLOWED"
        case invalidPublicDomain = "INVALID_PUBLIC_DOMAIN"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct CertificateDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureReason", required: false, type: .enum), 
            AWSShapeMember(label: "IssuedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "ImportedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "RevokedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "RenewalSummary", required: false, type: .structure), 
            AWSShapeMember(label: "SignatureAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "Serial", required: false, type: .string), 
            AWSShapeMember(label: "RevocationReason", required: false, type: .enum), 
            AWSShapeMember(label: "NotAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "NotBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubjectAlternativeNames", required: false, type: .list), 
            AWSShapeMember(label: "DomainValidationOptions", required: false, type: .list), 
            AWSShapeMember(label: "KeyAlgorithm", required: false, type: .enum), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "DomainName", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "InUseBy", required: false, type: .list), 
            AWSShapeMember(label: "Issuer", required: false, type: .string), 
            AWSShapeMember(label: "Subject", required: false, type: .string)
        ]
        /// The reason the certificate request failed. This value exists only when the certificate status is FAILED. For more information, see Certificate Request Failed in the AWS Certificate Manager User Guide.
        public let failureReason: FailureReason?
        /// The time at which the certificate was issued. This value exists only when the certificate type is AMAZON_ISSUED.
        public let issuedAt: TimeStamp?
        /// The date and time at which the certificate was imported. This value exists only when the certificate type is IMPORTED.
        public let importedAt: TimeStamp?
        /// The time at which the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public let revokedAt: TimeStamp?
        /// Contains information about the status of ACM's managed renewal for the certificate. This field exists only when the certificate type is AMAZON_ISSUED.
        public let renewalSummary: RenewalSummary?
        /// The algorithm that was used to sign the certificate.
        public let signatureAlgorithm: String?
        /// The serial number of the certificate.
        public let serial: String?
        /// The reason the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public let revocationReason: RevocationReason?
        /// The time after which the certificate is not valid.
        public let notAfter: TimeStamp?
        /// The status of the certificate.
        public let status: CertificateStatus?
        /// The time at which the certificate was requested. This value exists only when the certificate type is AMAZON_ISSUED.
        public let createdAt: TimeStamp?
        /// The time before which the certificate is not valid.
        public let notBefore: TimeStamp?
        /// One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website.
        public let subjectAlternativeNames: [String]?
        /// Contains information about the initial validation of each domain name that occurs as a result of the RequestCertificate request. This field exists only when the certificate type is AMAZON_ISSUED.
        public let domainValidationOptions: [DomainValidation]?
        /// The algorithm that was used to generate the key pair (the public and private key).
        public let keyAlgorithm: KeyAlgorithm?
        /// The Amazon Resource Name (ARN) of the certificate. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public let certificateArn: String?
        /// The fully qualified domain name for the certificate, such as www.example.com or example.com.
        public let domainName: String?
        /// The source of the certificate. For certificates provided by ACM, this value is AMAZON_ISSUED. For certificates that you imported with ImportCertificate, this value is IMPORTED. ACM does not provide managed renewal for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see Importing Certificates in the AWS Certificate Manager User Guide.
        public let `type`: CertificateType?
        /// A list of ARNs for the AWS resources that are using the certificate. A certificate can be used by multiple AWS resources.
        public let inUseBy: [String]?
        /// The name of the certificate authority that issued and signed the certificate.
        public let issuer: String?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public let subject: String?

        public init(failureReason: FailureReason? = nil, issuedAt: TimeStamp? = nil, importedAt: TimeStamp? = nil, revokedAt: TimeStamp? = nil, renewalSummary: RenewalSummary? = nil, signatureAlgorithm: String? = nil, serial: String? = nil, revocationReason: RevocationReason? = nil, notAfter: TimeStamp? = nil, status: CertificateStatus? = nil, createdAt: TimeStamp? = nil, notBefore: TimeStamp? = nil, subjectAlternativeNames: [String]? = nil, domainValidationOptions: [DomainValidation]? = nil, keyAlgorithm: KeyAlgorithm? = nil, certificateArn: String? = nil, domainName: String? = nil, type: CertificateType? = nil, inUseBy: [String]? = nil, issuer: String? = nil, subject: String? = nil) {
            self.failureReason = failureReason
            self.issuedAt = issuedAt
            self.importedAt = importedAt
            self.revokedAt = revokedAt
            self.renewalSummary = renewalSummary
            self.signatureAlgorithm = signatureAlgorithm
            self.serial = serial
            self.revocationReason = revocationReason
            self.notAfter = notAfter
            self.status = status
            self.createdAt = createdAt
            self.notBefore = notBefore
            self.subjectAlternativeNames = subjectAlternativeNames
            self.domainValidationOptions = domainValidationOptions
            self.keyAlgorithm = keyAlgorithm
            self.certificateArn = certificateArn
            self.domainName = domainName
            self.`type` = `type`
            self.inUseBy = inUseBy
            self.issuer = issuer
            self.subject = subject
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case issuedAt = "IssuedAt"
            case importedAt = "ImportedAt"
            case revokedAt = "RevokedAt"
            case renewalSummary = "RenewalSummary"
            case signatureAlgorithm = "SignatureAlgorithm"
            case serial = "Serial"
            case revocationReason = "RevocationReason"
            case notAfter = "NotAfter"
            case status = "Status"
            case createdAt = "CreatedAt"
            case notBefore = "NotBefore"
            case subjectAlternativeNames = "SubjectAlternativeNames"
            case domainValidationOptions = "DomainValidationOptions"
            case keyAlgorithm = "KeyAlgorithm"
            case certificateArn = "CertificateArn"
            case domainName = "DomainName"
            case `type` = "Type"
            case inUseBy = "InUseBy"
            case issuer = "Issuer"
            case subject = "Subject"
        }
    }

}