// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Ssm {

    public struct DescribePatchBaselinesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// Each element in the array is a structure containing:  Key: (string, “NAME_PREFIX” or “OWNER”) Value: (array of strings, exactly 1 entry, 1 ≤ length ≤ 255)
        public var filters: [PatchOrchestratorFilter]? = nil
        /// The maximum number of patch baselines to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [PatchOrchestratorFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try PatchOrchestratorFilter(dictionary: $0) })
            }
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribeActivationsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of activations for your AWS account.
        public var activationList: [Activation]? = nil
        ///  The token for the next set of items to return. Use this token to get the next set of results. 
        public var nextToken: String? = nil

        public init() {}

        public init(activationList: [Activation]? = nil, nextToken: String? = nil) {
            self.activationList = activationList
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let activationList = dictionary["ActivationList"] as? [[String: Any]] {
                self.activationList = try activationList.map({ try Activation(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeEffectivePatchesForPatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// An array of patches and patch status.
        public var effectivePatches: [EffectivePatch]? = nil

        public init() {}

        public init(nextToken: String? = nil, effectivePatches: [EffectivePatch]? = nil) {
            self.nextToken = nextToken
            self.effectivePatches = effectivePatches
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let effectivePatches = dictionary["EffectivePatches"] as? [[String: Any]] {
                self.effectivePatches = try effectivePatches.map({ try EffectivePatch(dictionary: $0) })
            }
        }
    }

    public struct UpdateAssociationStatusRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the SSM document.
        public var name: String = ""
        /// The ID of the instance.
        public var instanceId: String = ""
        /// The association status.
        public var associationStatus: AssociationStatus = AssociationStatus()

        public init() {}

        public init(name: String, instanceId: String, associationStatus: AssociationStatus) {
            self.name = name
            self.instanceId = instanceId
            self.associationStatus = associationStatus
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let associationStatus = dictionary["AssociationStatus"] as? [String: Any] else { throw InitializableError.missingRequiredParam("AssociationStatus") }
            self.associationStatus = try Ssm.AssociationStatus(dictionary: associationStatus)
        }
    }

    public struct DeregisterTargetFromMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window the target was removed from.
        public var windowId: String? = nil
        /// The ID of the removed target definition.
        public var windowTargetId: String? = nil

        public init() {}

        public init(windowId: String? = nil, windowTargetId: String? = nil) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            self.windowTargetId = dictionary["WindowTargetId"] as? String
        }
    }

    public struct ParametersFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter.
        public var key: String? = nil
        /// The filter values.
        public var values: [String] = []

        public init() {}

        public init(key: String? = nil, values: [String]) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? String
            guard let values = dictionary["Values"] as? [String] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = values
        }
    }

    public struct ResultAttribute: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Name of the inventory item type. Valid value: “AWS:InstanceInformation”. Default Value: “AWS:InstanceInformation”.
        public var typeName: String = ""

        public init() {}

        public init(typeName: String) {
            self.typeName = typeName
        }

        public init(dictionary: [String: Any]) throws {
            guard let typeName = dictionary["TypeName"] as? String else { throw InitializableError.missingRequiredParam("TypeName") }
            self.typeName = typeName
        }
    }

    public struct DescribePatchGroupsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Each entry in the array contains: PatchGroup: string (1 ≤ length ≤ 256, Regex: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$) PatchBaselineIdentity: A PatchBaselineIdentity element. 
        public var mappings: [PatchGroupPatchBaselineMapping]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(mappings: [PatchGroupPatchBaselineMapping]? = nil, nextToken: String? = nil) {
            self.mappings = mappings
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let mappings = dictionary["Mappings"] as? [[String: Any]] {
                self.mappings = try mappings.map({ try PatchGroupPatchBaselineMapping(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct RegisterTargetWithMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window the target should be registered with.
        public var windowId: String = ""
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public var targets: [Target] = []
        /// User-provided idempotency token.
        public var clientToken: String? = nil
        /// The type of target being registered with the Maintenance Window.
        public var resourceType: String = ""
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public var ownerInformation: String? = nil

        public init() {}

        public init(windowId: String, targets: [Target], clientToken: String? = nil, resourceType: String, ownerInformation: String? = nil) {
            self.windowId = windowId
            self.targets = targets
            self.clientToken = clientToken
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            guard let targets = dictionary["Targets"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Targets") }
            self.targets = try targets.map({ try Target(dictionary: $0) })
            self.clientToken = dictionary["ClientToken"] as? String
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
            self.ownerInformation = dictionary["OwnerInformation"] as? String
        }
    }

    public struct GetDocumentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the SSM document.
        public var name: String = ""
        /// The document version for which you want information.
        public var documentVersion: String? = nil

        public init() {}

        public init(name: String, documentVersion: String? = nil) {
            self.name = name
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct DescribeMaintenanceWindowTargetsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window whose targets should be retrieved.
        public var windowId: String = ""
        /// Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation.
        public var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try MaintenanceWindowFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ListAssociationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        public var associationFilterList: [AssociationFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(associationFilterList: [AssociationFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.associationFilterList = associationFilterList
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let associationFilterList = dictionary["AssociationFilterList"] as? [[String: Any]] {
                self.associationFilterList = try associationFilterList.map({ try AssociationFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetInventorySchemaRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of inventory item to return.
        public var typeName: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(typeName: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.typeName = typeName
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.typeName = dictionary["TypeName"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct CreatePatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Caller-provided idempotency token.
        public var clientToken: String? = nil
        /// A list of explicitly approved patches for the baseline.
        public var approvedPatches: [String]? = nil
        /// The name of the patch baseline.
        public var name: String = ""
        /// A list of explicitly rejected patches for the baseline.
        public var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        public var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        public var globalFilters: PatchFilterGroup? = nil
        /// A description of the patch baseline.
        public var description: String? = nil

        public init() {}

        public init(clientToken: String? = nil, approvedPatches: [String]? = nil, name: String, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil) {
            self.clientToken = clientToken
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.clientToken = dictionary["ClientToken"] as? String
            if let approvedPatches = dictionary["ApprovedPatches"] as? [String] {
                self.approvedPatches = approvedPatches
            }
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            if let rejectedPatches = dictionary["RejectedPatches"] as? [String] {
                self.rejectedPatches = rejectedPatches
            }
            if let approvalRules = dictionary["ApprovalRules"] as? [String: Any] { self.approvalRules = try Ssm.PatchRuleGroup(dictionary: approvalRules) }
            if let globalFilters = dictionary["GlobalFilters"] as? [String: Any] { self.globalFilters = try Ssm.PatchFilterGroup(dictionary: globalFilters) }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window execution the task is part of.
        public var windowExecutionId: String = ""
        /// The ID of the specific task in the Maintenance Window task that should be retrieved.
        public var taskId: String = ""
        /// Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED.
        public var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(windowExecutionId: String, taskId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowExecutionId = dictionary["WindowExecutionId"] as? String else { throw InitializableError.missingRequiredParam("WindowExecutionId") }
            self.windowExecutionId = windowExecutionId
            guard let taskId = dictionary["TaskId"] as? String else { throw InitializableError.missingRequiredParam("TaskId") }
            self.taskId = taskId
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try MaintenanceWindowFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribeInstancePatchesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Each entry in the array is a structure containing: Key (string, 1 ≤ length ≤ 128) Values (array of strings 1 ≤ length ≤ 256)
        public var filters: [PatchOrchestratorFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The ID of the instance whose patch state information should be retrieved.
        public var instanceId: String = ""
        /// The maximum number of patches to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(filters: [PatchOrchestratorFilter]? = nil, nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try PatchOrchestratorFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DeregisterTargetFromMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window the target should be removed from.
        public var windowId: String = ""
        /// The ID of the target definition to remove.
        public var windowTargetId: String = ""

        public init() {}

        public init(windowId: String, windowTargetId: String) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            guard let windowTargetId = dictionary["WindowTargetId"] as? String else { throw InitializableError.missingRequiredParam("WindowTargetId") }
            self.windowTargetId = windowTargetId
        }
    }

    public struct DescribeMaintenanceWindowExecutionTasksRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window execution whose task executions should be retrieved.
        public var windowExecutionId: String = ""
        /// Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED. 
        public var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(windowExecutionId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowExecutionId = windowExecutionId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowExecutionId = dictionary["WindowExecutionId"] as? String else { throw InitializableError.missingRequiredParam("WindowExecutionId") }
            self.windowExecutionId = windowExecutionId
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try MaintenanceWindowFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribeInstancePatchStatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The ID of the instance whose patch state information should be retrieved.
        public var instanceIds: [String] = []
        /// The maximum number of instances to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceIds: [String], maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let instanceIds = dictionary["InstanceIds"] as? [String] else { throw InitializableError.missingRequiredParam("InstanceIds") }
            self.instanceIds = instanceIds
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct SendCommandRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The IAM role that Systems Manager uses to send notifications. 
        public var serviceRoleArn: String? = nil
        /// The name of the S3 bucket where command execution responses should be stored.
        public var outputS3BucketName: String? = nil
        /// Configurations for sending notifications.
        public var notificationConfig: NotificationConfig? = nil
        /// User-specified information about the command, such as a brief description of what the command should do.
        public var comment: String? = nil
        /// (Optional) An array of search criteria that targets instances using a Key;Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call. For more information about how to use Targets, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        public var targets: [Target]? = nil
        /// The directory structure within the S3 bucket where the responses should be stored.
        public var outputS3KeyPrefix: String? = nil
        /// (Optional) The region where the Amazon Simple Storage Service (Amazon S3) output bucket is located. The default value is the region where Run Command is being called.
        public var outputS3Region: String? = nil
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        public var documentHashType: String? = nil
        /// Required. The instance IDs where the command should execute. You can specify a maximum of 50 IDs.
        public var instanceIds: [String]? = nil
        /// The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like “10” or a percentage like “10%”. The default value is 50. For more information about how to use MaxErrors, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        public var maxErrors: String? = nil
        /// The required and optional parameters specified in the SSM document being executed.
        public var parameters: [String: [String]]? = nil
        /// Required. The name of the SSM document to execute. This can be an SSM public document or a custom document.
        public var documentName: String = ""
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        public var documentHash: String? = nil
        /// (Optional) The maximum number of instances that are allowed to execute the command at the same time. You can specify a number such as “10” or a percentage such as “10%”. The default value is 50. For more information about how to use MaxConcurrency, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        public var maxConcurrency: String? = nil
        /// If this time is reached and the command has not already started executing, it will not execute.
        public var timeoutSeconds: Int32? = nil

        public init() {}

        public init(serviceRoleArn: String? = nil, outputS3BucketName: String? = nil, notificationConfig: NotificationConfig? = nil, comment: String? = nil, targets: [Target]? = nil, outputS3KeyPrefix: String? = nil, outputS3Region: String? = nil, documentHashType: String? = nil, instanceIds: [String]? = nil, maxErrors: String? = nil, parameters: [String: [String]]? = nil, documentName: String, documentHash: String? = nil, maxConcurrency: String? = nil, timeoutSeconds: Int32? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.outputS3BucketName = outputS3BucketName
            self.notificationConfig = notificationConfig
            self.comment = comment
            self.targets = targets
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3Region = outputS3Region
            self.documentHashType = documentHashType
            self.instanceIds = instanceIds
            self.maxErrors = maxErrors
            self.parameters = parameters
            self.documentName = documentName
            self.documentHash = documentHash
            self.maxConcurrency = maxConcurrency
            self.timeoutSeconds = timeoutSeconds
        }

        public init(dictionary: [String: Any]) throws {
            self.serviceRoleArn = dictionary["ServiceRoleArn"] as? String
            self.outputS3BucketName = dictionary["OutputS3BucketName"] as? String
            if let notificationConfig = dictionary["NotificationConfig"] as? [String: Any] { self.notificationConfig = try Ssm.NotificationConfig(dictionary: notificationConfig) }
            self.comment = dictionary["Comment"] as? String
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            self.outputS3KeyPrefix = dictionary["OutputS3KeyPrefix"] as? String
            self.outputS3Region = dictionary["OutputS3Region"] as? String
            self.documentHashType = dictionary["DocumentHashType"] as? String
            if let instanceIds = dictionary["InstanceIds"] as? [String] {
                self.instanceIds = instanceIds
            }
            self.maxErrors = dictionary["MaxErrors"] as? String
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let parameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = parameterValueList
                }
                self.parameters = parametersDict
            }
            guard let documentName = dictionary["DocumentName"] as? String else { throw InitializableError.missingRequiredParam("DocumentName") }
            self.documentName = documentName
            self.documentHash = dictionary["DocumentHash"] as? String
            self.maxConcurrency = dictionary["MaxConcurrency"] as? String
            self.timeoutSeconds = dictionary["TimeoutSeconds"] as? Int32
        }
    }

    public struct GetMaintenanceWindowExecutionTaskRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window execution that includes the task.
        public var windowExecutionId: String = ""
        /// The ID of the specific task execution in the Maintenance Window task that should be retrieved.
        public var taskId: String = ""

        public init() {}

        public init(windowExecutionId: String, taskId: String) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowExecutionId = dictionary["WindowExecutionId"] as? String else { throw InitializableError.missingRequiredParam("WindowExecutionId") }
            self.windowExecutionId = windowExecutionId
            guard let taskId = dictionary["TaskId"] as? String else { throw InitializableError.missingRequiredParam("TaskId") }
            self.taskId = taskId
        }
    }

    public struct CommandPlugin: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status of this plugin. You can execute a document with multiple plugins.
        public var status: String? = nil
        /// The time the plugin started executing. 
        public var responseStartDateTime: Date? = nil
        /// The time the plugin stopped executing. Could stop prematurely if, for example, a cancel command was sent. 
        public var responseFinishDateTime: Date? = nil
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript   test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;  i-1234567876543 is the instance ID;  awsrunShellScript is the name of the plugin.
        public var outputS3BucketName: String? = nil
        /// The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent. 
        public var name: String? = nil
        /// Output of the plugin execution.
        public var output: String? = nil
        /// The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty.
        public var standardErrorUrl: String? = nil
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If the Amazon S3 bucket for the command was not specified, then this string is empty.
        public var standardOutputUrl: String? = nil
        /// The name of the region where the output is stored in Amazon S3.
        public var outputS3Region: String? = nil
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript   test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;  i-1234567876543 is the instance ID;  awsrunShellScript is the name of the plugin.
        public var outputS3KeyPrefix: String? = nil
        /// A numeric response code generated after executing the plugin. 
        public var responseCode: Int32? = nil
        /// A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:   Pending – The command has not been sent to the instance.   In Progress – The command has been sent to the instance but has not reached a terminal state.   Success – The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out – The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command’s MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out – Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed – The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Undeliverable – The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command’s MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated – The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public var statusDetails: String? = nil

        public init() {}

        public init(status: String? = nil, responseStartDateTime: Date? = nil, responseFinishDateTime: Date? = nil, outputS3BucketName: String? = nil, name: String? = nil, output: String? = nil, standardErrorUrl: String? = nil, standardOutputUrl: String? = nil, outputS3Region: String? = nil, outputS3KeyPrefix: String? = nil, responseCode: Int32? = nil, statusDetails: String? = nil) {
            self.status = status
            self.responseStartDateTime = responseStartDateTime
            self.responseFinishDateTime = responseFinishDateTime
            self.outputS3BucketName = outputS3BucketName
            self.name = name
            self.output = output
            self.standardErrorUrl = standardErrorUrl
            self.standardOutputUrl = standardOutputUrl
            self.outputS3Region = outputS3Region
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.responseCode = responseCode
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.responseStartDateTime = dictionary["ResponseStartDateTime"] as? Date
            self.responseFinishDateTime = dictionary["ResponseFinishDateTime"] as? Date
            self.outputS3BucketName = dictionary["OutputS3BucketName"] as? String
            self.name = dictionary["Name"] as? String
            self.output = dictionary["Output"] as? String
            self.standardErrorUrl = dictionary["StandardErrorUrl"] as? String
            self.standardOutputUrl = dictionary["StandardOutputUrl"] as? String
            self.outputS3Region = dictionary["OutputS3Region"] as? String
            self.outputS3KeyPrefix = dictionary["OutputS3KeyPrefix"] as? String
            self.responseCode = dictionary["ResponseCode"] as? Int32
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct GetDeployablePatchSnapshotForInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user-defined snapshot ID.
        public var snapshotId: String? = nil
        /// The ID of the instance.
        public var instanceId: String? = nil
        /// A pre-signed Amazon S3 URL that can be used to download the patch snapshot.
        public var snapshotDownloadUrl: String? = nil

        public init() {}

        public init(snapshotId: String? = nil, instanceId: String? = nil, snapshotDownloadUrl: String? = nil) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
            self.snapshotDownloadUrl = snapshotDownloadUrl
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.snapshotDownloadUrl = dictionary["SnapshotDownloadUrl"] as? String
        }
    }

    public struct DeleteActivationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeParametersResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Parameters returned by the request.
        public var parameters: [ParameterMetadata]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(parameters: [ParameterMetadata]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try ParameterMetadata(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeDocumentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the SSM document.
        public var name: String = ""
        /// The document version for which you want information. Can be a specific version or the default version.
        public var documentVersion: String? = nil

        public init() {}

        public init(name: String, documentVersion: String? = nil) {
            self.name = name
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct DescribeInstanceAssociationsStatusResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Status information about the association.
        public var instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]? = nil, nextToken: String? = nil) {
            self.instanceAssociationStatusInfos = instanceAssociationStatusInfos
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceAssociationStatusInfos = dictionary["InstanceAssociationStatusInfos"] as? [[String: Any]] {
                self.instanceAssociationStatusInfos = try instanceAssociationStatusInfos.map({ try InstanceAssociationStatusInfo(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeletePatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline to delete.
        public var baselineId: String = ""

        public init() {}

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
        }
    }

    public struct GetInventoryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// Collection of inventory entities such as a collection of instance inventory. 
        public var entities: [InventoryResultEntity]? = nil

        public init() {}

        public init(nextToken: String? = nil, entities: [InventoryResultEntity]? = nil) {
            self.nextToken = nextToken
            self.entities = entities
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let entities = dictionary["Entities"] as? [[String: Any]] {
                self.entities = try entities.map({ try InventoryResultEntity(dictionary: $0) })
            }
        }
    }

    public struct DescribeInstancePatchStatesForPatchGroupResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// The high-level patch state for the requested instances. 
        public var instancePatchStates: [InstancePatchState]? = nil

        public init() {}

        public init(nextToken: String? = nil, instancePatchStates: [InstancePatchState]? = nil) {
            self.nextToken = nextToken
            self.instancePatchStates = instancePatchStates
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let instancePatchStates = dictionary["InstancePatchStates"] as? [[String: Any]] {
                self.instancePatchStates = try instancePatchStates.map({ try InstancePatchState(dictionary: $0) })
            }
        }
    }

    public struct Command: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public var outputS3BucketName: String? = nil
        /// Configurations for sending notifications about command status changes. 
        public var notificationConfig: NotificationConfig? = nil
        /// The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable.
        public var completedCount: Int32? = nil
        /// An array of search criteria that targets instances using a Key;Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call.
        public var targets: [Target]? = nil
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public var outputS3KeyPrefix: String? = nil
        /// User-specified information about the command, such as a brief description of what the command should do.
        public var comment: String? = nil
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes. 
        public var serviceRole: String? = nil
        /// The region where the Amazon Simple Storage Service (Amazon S3) output bucket is located. The default value is the region where Run Command is being called.
        public var outputS3Region: String? = nil
        /// The instance IDs against which this command was requested.
        public var instanceIds: [String]? = nil
        /// The number of targets for the command.
        public var targetCount: Int32? = nil
        /// The status of the command.
        public var status: String? = nil
        /// The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 50. For more information about how to use MaxErrors, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        public var maxErrors: String? = nil
        /// The date and time the command was requested.
        public var requestedDateTime: Date? = nil
        /// The parameter values to be inserted in the SSM document when executing the command.
        public var parameters: [String: [String]]? = nil
        /// The name of the SSM document requested for execution.
        public var documentName: String? = nil
        /// The maximum number of instances that are allowed to execute the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows). 
        public var maxConcurrency: String? = nil
        /// If this time is reached and the command has not already started executing, it will not execute. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.
        public var expiresAfter: Date? = nil
        /// The number of targets for which the status is Failed or Execution Timed Out.
        public var errorCount: Int32? = nil
        /// A unique identifier for this command.
        public var commandId: String? = nil
        /// A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:   Pending – The command has not been sent to any instances.   In Progress – The command has been sent to at least one instance but has not reached a final state on all instances.   Success – The command successfully executed on all invocations. This is a terminal state.   Delivery Timed Out – The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.   Execution Timed Out – The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.   Failed – The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.   Incomplete – The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Rate Exceeded – The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before executing it on any instance. This is a terminal state.  
        public var statusDetails: String? = nil

        public init() {}

        public init(outputS3BucketName: String? = nil, notificationConfig: NotificationConfig? = nil, completedCount: Int32? = nil, targets: [Target]? = nil, outputS3KeyPrefix: String? = nil, comment: String? = nil, serviceRole: String? = nil, outputS3Region: String? = nil, instanceIds: [String]? = nil, targetCount: Int32? = nil, status: String? = nil, maxErrors: String? = nil, requestedDateTime: Date? = nil, parameters: [String: [String]]? = nil, documentName: String? = nil, maxConcurrency: String? = nil, expiresAfter: Date? = nil, errorCount: Int32? = nil, commandId: String? = nil, statusDetails: String? = nil) {
            self.outputS3BucketName = outputS3BucketName
            self.notificationConfig = notificationConfig
            self.completedCount = completedCount
            self.targets = targets
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.comment = comment
            self.serviceRole = serviceRole
            self.outputS3Region = outputS3Region
            self.instanceIds = instanceIds
            self.targetCount = targetCount
            self.status = status
            self.maxErrors = maxErrors
            self.requestedDateTime = requestedDateTime
            self.parameters = parameters
            self.documentName = documentName
            self.maxConcurrency = maxConcurrency
            self.expiresAfter = expiresAfter
            self.errorCount = errorCount
            self.commandId = commandId
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.outputS3BucketName = dictionary["OutputS3BucketName"] as? String
            if let notificationConfig = dictionary["NotificationConfig"] as? [String: Any] { self.notificationConfig = try Ssm.NotificationConfig(dictionary: notificationConfig) }
            self.completedCount = dictionary["CompletedCount"] as? Int32
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            self.outputS3KeyPrefix = dictionary["OutputS3KeyPrefix"] as? String
            self.comment = dictionary["Comment"] as? String
            self.serviceRole = dictionary["ServiceRole"] as? String
            self.outputS3Region = dictionary["OutputS3Region"] as? String
            if let instanceIds = dictionary["InstanceIds"] as? [String] {
                self.instanceIds = instanceIds
            }
            self.targetCount = dictionary["TargetCount"] as? Int32
            self.status = dictionary["Status"] as? String
            self.maxErrors = dictionary["MaxErrors"] as? String
            self.requestedDateTime = dictionary["RequestedDateTime"] as? Date
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let parameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = parameterValueList
                }
                self.parameters = parametersDict
            }
            self.documentName = dictionary["DocumentName"] as? String
            self.maxConcurrency = dictionary["MaxConcurrency"] as? String
            self.expiresAfter = dictionary["ExpiresAfter"] as? Date
            self.errorCount = dictionary["ErrorCount"] as? Int32
            self.commandId = dictionary["CommandId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct CreateAssociationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The parameters for the documents runtime configuration. 
        public var parameters: [String: [String]]? = nil
        /// The instance ID.
        public var instanceId: String? = nil
        /// The name of the SSM document.
        public var name: String = ""
        /// The document version you want to associate with the target(s). Can be a specific version or the default version.
        public var documentVersion: String? = nil
        /// The targets (either instances or tags) for the association. Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public var targets: [Target]? = nil
        /// An Amazon S3 bucket where you want to store the output details of the request. For example:  "{ \"S3Location\": { \"OutputS3Region\": \"&lt;region&gt;\", \"OutputS3BucketName\": \"bucket name\", \"OutputS3KeyPrefix\": \"folder name\" } }" 
        public var outputLocation: InstanceAssociationOutputLocation? = nil
        /// A cron expression when the association will be applied to the target(s). Supported expressions are every half, 1, 2, 4, 8 or 12 hour(s); every specified day and time of the week. For example: cron(0 0/30 * 1/1 * ? *) to run every thirty minutes; cron(0 0 0/4 1/1 * ? *) to run every four hours; and cron(0 0 10 ? * SUN *) to run every Sunday at 10 a.m.
        public var scheduleExpression: String? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, instanceId: String? = nil, name: String, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.parameters = parameters
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let parameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = parameterValueList
                }
                self.parameters = parametersDict
            }
            self.instanceId = dictionary["InstanceId"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.documentVersion = dictionary["DocumentVersion"] as? String
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            if let outputLocation = dictionary["OutputLocation"] as? [String: Any] { self.outputLocation = try Ssm.InstanceAssociationOutputLocation(dictionary: outputLocation) }
            self.scheduleExpression = dictionary["ScheduleExpression"] as? String
        }
    }

    public struct ModifyDocumentPermissionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The permission type for the document. The permission type can be Share.
        public var permissionType: String = ""
        /// The name of the document that you want to share.
        public var name: String = ""
        /// The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or All. This action has a higher priority than AccountIdsToAdd. If you specify an account ID to add and the same ID to remove, the system removes access to the document.
        public var accountIdsToRemove: [String]? = nil
        /// The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or All.
        public var accountIdsToAdd: [String]? = nil

        public init() {}

        public init(permissionType: String, name: String, accountIdsToRemove: [String]? = nil, accountIdsToAdd: [String]? = nil) {
            self.permissionType = permissionType
            self.name = name
            self.accountIdsToRemove = accountIdsToRemove
            self.accountIdsToAdd = accountIdsToAdd
        }

        public init(dictionary: [String: Any]) throws {
            guard let permissionType = dictionary["PermissionType"] as? String else { throw InitializableError.missingRequiredParam("PermissionType") }
            self.permissionType = permissionType
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            if let accountIdsToRemove = dictionary["AccountIdsToRemove"] as? [String] {
                self.accountIdsToRemove = accountIdsToRemove
            }
            if let accountIdsToAdd = dictionary["AccountIdsToAdd"] as? [String] {
                self.accountIdsToAdd = accountIdsToAdd
            }
        }
    }

    public struct RegisterDefaultPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline that should be the default patch baseline.
        public var baselineId: String = ""

        public init() {}

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
        }
    }

    public struct AddTagsToResourceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PatchComplianceData: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The severity of the patch (for example, Critical, Important, Moderate).
        public var severity: String = ""
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        public var classification: String = ""
        /// The date/time the patch was installed on the instance.
        public var installedTime: Date = Date()
        /// The title of the patch.
        public var title: String = ""
        /// The state of the patch on the instance (INSTALLED, INSTALLED_OTHER, MISSING, NOT_APPLICABLE or FAILED).
        public var state: String = ""
        /// The Microsoft Knowledge Base ID of the patch.
        public var kBId: String = ""

        public init() {}

        public init(severity: String, classification: String, installedTime: Date, title: String, state: String, kBId: String) {
            self.severity = severity
            self.classification = classification
            self.installedTime = installedTime
            self.title = title
            self.state = state
            self.kBId = kBId
        }

        public init(dictionary: [String: Any]) throws {
            guard let severity = dictionary["Severity"] as? String else { throw InitializableError.missingRequiredParam("Severity") }
            self.severity = severity
            guard let classification = dictionary["Classification"] as? String else { throw InitializableError.missingRequiredParam("Classification") }
            self.classification = classification
            guard let installedTime = dictionary["InstalledTime"] as? Date else { throw InitializableError.missingRequiredParam("InstalledTime") }
            self.installedTime = installedTime
            guard let title = dictionary["Title"] as? String else { throw InitializableError.missingRequiredParam("Title") }
            self.title = title
            guard let state = dictionary["State"] as? String else { throw InitializableError.missingRequiredParam("State") }
            self.state = state
            guard let kBId = dictionary["KBId"] as? String else { throw InitializableError.missingRequiredParam("KBId") }
            self.kBId = kBId
        }
    }

    public struct DeregisterTaskFromMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window the task was removed from.
        public var windowId: String? = nil
        /// The ID of the task removed from the Maintenance Window.
        public var windowTaskId: String? = nil

        public init() {}

        public init(windowId: String? = nil, windowTaskId: String? = nil) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            self.windowTaskId = dictionary["WindowTaskId"] as? String
        }
    }

    public struct PatchRuleGroup: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The rules that make up the rule group.
        public var patchRules: [PatchRule] = []

        public init() {}

        public init(patchRules: [PatchRule]) {
            self.patchRules = patchRules
        }

        public init(dictionary: [String: Any]) throws {
            guard let patchRules = dictionary["PatchRules"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("PatchRules") }
            self.patchRules = try patchRules.map({ try PatchRule(dictionary: $0) })
        }
    }

    public struct DescribeMaintenanceWindowTasksRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window whose tasks should be retrieved.
        public var windowId: String = ""
        /// Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType.
        public var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try MaintenanceWindowFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribeAutomationExecutionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// Filters used to limit the scope of executions that are requested.
        public var filters: [AutomationExecutionFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [AutomationExecutionFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try AutomationExecutionFilter(dictionary: $0) })
            }
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the created Maintenance Window.
        public var windowId: String? = nil
        /// The date the Maintenance Window was last modified.
        public var modifiedDate: Date? = nil
        /// The name of the Maintenance Window.
        public var name: String? = nil
        /// Whether the Maintenance Windows is enabled.
        public var enabled: Bool? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public var allowUnassociatedTargets: Bool? = nil
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public var schedule: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        public var duration: Int32? = nil
        /// The date the Maintenance Window was created.
        public var createdDate: Date? = nil

        public init() {}

        public init(windowId: String? = nil, modifiedDate: Date? = nil, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil, createdDate: Date? = nil) {
            self.windowId = windowId
            self.modifiedDate = modifiedDate
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
            self.createdDate = createdDate
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            self.modifiedDate = dictionary["ModifiedDate"] as? Date
            self.name = dictionary["Name"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
            self.allowUnassociatedTargets = dictionary["AllowUnassociatedTargets"] as? Bool
            self.schedule = dictionary["Schedule"] as? String
            self.cutoff = dictionary["Cutoff"] as? Int32
            self.duration = dictionary["Duration"] as? Int32
            self.createdDate = dictionary["CreatedDate"] as? Date
        }
    }

    public struct LoggingInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) The Amazon S3 bucket subfolder. 
        public var s3KeyPrefix: String? = nil
        /// The region where the Amazon S3 bucket is located.
        public var s3Region: String = ""
        /// The name of an Amazon S3 bucket where execution logs are stored .
        public var s3BucketName: String = ""

        public init() {}

        public init(s3KeyPrefix: String? = nil, s3Region: String, s3BucketName: String) {
            self.s3KeyPrefix = s3KeyPrefix
            self.s3Region = s3Region
            self.s3BucketName = s3BucketName
        }

        public init(dictionary: [String: Any]) throws {
            self.s3KeyPrefix = dictionary["S3KeyPrefix"] as? String
            guard let s3Region = dictionary["S3Region"] as? String else { throw InitializableError.missingRequiredParam("S3Region") }
            self.s3Region = s3Region
            guard let s3BucketName = dictionary["S3BucketName"] as? String else { throw InitializableError.missingRequiredParam("S3BucketName") }
            self.s3BucketName = s3BucketName
        }
    }

    public struct InventoryResultItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time inventory item data was captured.
        public var captureTime: String? = nil
        /// Contains all the inventory data of the item type. Results include attribute names and values. 
        public var content: [[String: String]] = []
        /// The schema version for the inventory result item/
        public var schemaVersion: String = ""
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        public var contentHash: String? = nil
        /// The name of the inventory result item type.
        public var typeName: String = ""

        public init() {}

        public init(captureTime: String? = nil, content: [[String: String]], schemaVersion: String, contentHash: String? = nil, typeName: String) {
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.contentHash = contentHash
            self.typeName = typeName
        }

        public init(dictionary: [String: Any]) throws {
            self.captureTime = dictionary["CaptureTime"] as? String
            guard let content = dictionary["Content"] as? [[String: String]] else { throw InitializableError.missingRequiredParam("Content") }
            self.content = content
            guard let schemaVersion = dictionary["SchemaVersion"] as? String else { throw InitializableError.missingRequiredParam("SchemaVersion") }
            self.schemaVersion = schemaVersion
            self.contentHash = dictionary["ContentHash"] as? String
            guard let typeName = dictionary["TypeName"] as? String else { throw InitializableError.missingRequiredParam("TypeName") }
            self.typeName = typeName
        }
    }

    public struct GetPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline to retrieve.
        public var baselineId: String = ""

        public init() {}

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
        }
    }

    public struct DeleteDocumentResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AutomationExecutionMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The IAM role ARN of the user who executed the Automation.
        public var executedBy: String? = nil
        /// The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out, or Cancelled.
        public var automationExecutionStatus: String? = nil
        /// The name of the Automation document used during execution.
        public var documentName: String? = nil
        /// The document version used during the execution.
        public var documentVersion: String? = nil
        /// The time the execution started.&gt;
        public var executionStartTime: Date? = nil
        /// The list of execution outputs as defined in the Automation document.
        public var outputs: [String: [String]]? = nil
        /// An Amazon S3 bucket where execution information is stored.
        public var logFile: String? = nil
        /// The execution ID.
        public var automationExecutionId: String? = nil
        /// The time the execution finished. This is not populated if the execution is still in progress.
        public var executionEndTime: Date? = nil

        public init() {}

        public init(executedBy: String? = nil, automationExecutionStatus: String? = nil, documentName: String? = nil, documentVersion: String? = nil, executionStartTime: Date? = nil, outputs: [String: [String]]? = nil, logFile: String? = nil, automationExecutionId: String? = nil, executionEndTime: Date? = nil) {
            self.executedBy = executedBy
            self.automationExecutionStatus = automationExecutionStatus
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.logFile = logFile
            self.automationExecutionId = automationExecutionId
            self.executionEndTime = executionEndTime
        }

        public init(dictionary: [String: Any]) throws {
            self.executedBy = dictionary["ExecutedBy"] as? String
            self.automationExecutionStatus = dictionary["AutomationExecutionStatus"] as? String
            self.documentName = dictionary["DocumentName"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
            self.executionStartTime = dictionary["ExecutionStartTime"] as? Date
            if let outputs = dictionary["Outputs"] as? [String: Any] {
                var outputsDict: [String: [String]] = [:]
                for (key, value) in outputs {
                    guard let automationParameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    outputsDict[key] = automationParameterValueList
                }
                self.outputs = outputsDict
            }
            self.logFile = dictionary["LogFile"] as? String
            self.automationExecutionId = dictionary["AutomationExecutionId"] as? String
            self.executionEndTime = dictionary["ExecutionEndTime"] as? Date
        }
    }

    public struct DescribeAssociationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the association.
        public var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let associationDescription = dictionary["AssociationDescription"] as? [String: Any] { self.associationDescription = try Ssm.AssociationDescription(dictionary: associationDescription) }
        }
    }

    public struct CreateAssociationBatchRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// One or more associations.
        public var entries: [CreateAssociationBatchRequestEntry] = []

        public init() {}

        public init(entries: [CreateAssociationBatchRequestEntry]) {
            self.entries = entries
        }

        public init(dictionary: [String: Any]) throws {
            guard let entries = dictionary["Entries"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Entries") }
            self.entries = try entries.map({ try CreateAssociationBatchRequestEntry(dictionary: $0) })
        }
    }

    public struct StopAutomationExecutionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct MaintenanceWindowFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter.
        public var key: String? = nil
        /// The filter values.
        public var values: [String]? = nil

        public init() {}

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? String
            if let values = dictionary["Values"] as? [String] {
                self.values = values
            }
        }
    }

    public struct InventoryItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the inventory information was collected.
        public var captureTime: String = ""
        /// The inventory data of the inventory type.
        public var content: [[String: String]]? = nil
        /// The schema version for the inventory item.
        public var schemaVersion: String = ""
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        public var contentHash: String? = nil
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        public var typeName: String = ""

        public init() {}

        public init(captureTime: String, content: [[String: String]]? = nil, schemaVersion: String, contentHash: String? = nil, typeName: String) {
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.contentHash = contentHash
            self.typeName = typeName
        }

        public init(dictionary: [String: Any]) throws {
            guard let captureTime = dictionary["CaptureTime"] as? String else { throw InitializableError.missingRequiredParam("CaptureTime") }
            self.captureTime = captureTime
            if let content = dictionary["Content"] as? [[String: String]] {
                self.content = content
            }
            guard let schemaVersion = dictionary["SchemaVersion"] as? String else { throw InitializableError.missingRequiredParam("SchemaVersion") }
            self.schemaVersion = schemaVersion
            self.contentHash = dictionary["ContentHash"] as? String
            guard let typeName = dictionary["TypeName"] as? String else { throw InitializableError.missingRequiredParam("TypeName") }
            self.typeName = typeName
        }
    }

    public struct DeletePatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the deleted patch baseline.
        public var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
        }
    }

    public struct CancelCommandRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the command you want to cancel.
        public var commandId: String = ""
        /// (Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested.
        public var instanceIds: [String]? = nil

        public init() {}

        public init(commandId: String, instanceIds: [String]? = nil) {
            self.commandId = commandId
            self.instanceIds = instanceIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let commandId = dictionary["CommandId"] as? String else { throw InitializableError.missingRequiredParam("CommandId") }
            self.commandId = commandId
            if let instanceIds = dictionary["InstanceIds"] as? [String] {
                self.instanceIds = instanceIds
            }
        }
    }

    public struct InstanceInformation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The last date the association was successfully run.
        public var lastSuccessfulAssociationExecutionDate: Date? = nil
        /// Indicates whether latest version of the SSM agent is running on your instance. 
        public var isLatestVersion: Bool? = nil
        /// Information about the association.
        public var associationOverview: InstanceAggregatedAssociationOverview? = nil
        /// The IP address of the managed instance.
        public var iPAddress: String? = nil
        /// The type of instance. Instances are either EC2 instances or managed instances. 
        public var resourceType: String? = nil
        /// The version of the OS platform running on your instance. 
        public var platformVersion: String? = nil
        /// The fully qualified host name of the managed instance.
        public var computerName: String? = nil
        /// The status of the association.
        public var associationStatus: String? = nil
        /// The date the association was last executed.
        public var lastAssociationExecutionDate: Date? = nil
        /// The Amazon Identity and Access Management (IAM) role assigned to EC2 instances or managed instances. 
        public var iamRole: String? = nil
        /// The name of the operating system platform running on your instance. 
        public var platformName: String? = nil
        /// The version of the SSM agent running on your Linux instance. 
        public var agentVersion: String? = nil
        /// The name of the managed instance.
        public var name: String? = nil
        /// The instance ID. 
        public var instanceId: String? = nil
        /// Connection status of the SSM agent. 
        public var pingStatus: String? = nil
        /// The date the server or VM was registered with AWS as a managed instance.
        public var registrationDate: Date? = nil
        /// The operating system platform type. 
        public var platformType: String? = nil
        /// The activation ID created by Systems Manager when the server or VM was registered.
        public var activationId: String? = nil
        /// The date and time when agent last pinged Systems Manager service. 
        public var lastPingDateTime: Date? = nil

        public init() {}

        public init(lastSuccessfulAssociationExecutionDate: Date? = nil, isLatestVersion: Bool? = nil, associationOverview: InstanceAggregatedAssociationOverview? = nil, iPAddress: String? = nil, resourceType: String? = nil, platformVersion: String? = nil, computerName: String? = nil, associationStatus: String? = nil, lastAssociationExecutionDate: Date? = nil, iamRole: String? = nil, platformName: String? = nil, agentVersion: String? = nil, name: String? = nil, instanceId: String? = nil, pingStatus: String? = nil, registrationDate: Date? = nil, platformType: String? = nil, activationId: String? = nil, lastPingDateTime: Date? = nil) {
            self.lastSuccessfulAssociationExecutionDate = lastSuccessfulAssociationExecutionDate
            self.isLatestVersion = isLatestVersion
            self.associationOverview = associationOverview
            self.iPAddress = iPAddress
            self.resourceType = resourceType
            self.platformVersion = platformVersion
            self.computerName = computerName
            self.associationStatus = associationStatus
            self.lastAssociationExecutionDate = lastAssociationExecutionDate
            self.iamRole = iamRole
            self.platformName = platformName
            self.agentVersion = agentVersion
            self.name = name
            self.instanceId = instanceId
            self.pingStatus = pingStatus
            self.registrationDate = registrationDate
            self.platformType = platformType
            self.activationId = activationId
            self.lastPingDateTime = lastPingDateTime
        }

        public init(dictionary: [String: Any]) throws {
            self.lastSuccessfulAssociationExecutionDate = dictionary["LastSuccessfulAssociationExecutionDate"] as? Date
            self.isLatestVersion = dictionary["IsLatestVersion"] as? Bool
            if let associationOverview = dictionary["AssociationOverview"] as? [String: Any] { self.associationOverview = try Ssm.InstanceAggregatedAssociationOverview(dictionary: associationOverview) }
            self.iPAddress = dictionary["IPAddress"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            self.platformVersion = dictionary["PlatformVersion"] as? String
            self.computerName = dictionary["ComputerName"] as? String
            self.associationStatus = dictionary["AssociationStatus"] as? String
            self.lastAssociationExecutionDate = dictionary["LastAssociationExecutionDate"] as? Date
            self.iamRole = dictionary["IamRole"] as? String
            self.platformName = dictionary["PlatformName"] as? String
            self.agentVersion = dictionary["AgentVersion"] as? String
            self.name = dictionary["Name"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.pingStatus = dictionary["PingStatus"] as? String
            self.registrationDate = dictionary["RegistrationDate"] as? Date
            self.platformType = dictionary["PlatformType"] as? String
            self.activationId = dictionary["ActivationId"] as? String
            self.lastPingDateTime = dictionary["LastPingDateTime"] as? Date
        }
    }

    public struct DescribeActivationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token to start the list. Use this token to get the next set of results. 
        public var nextToken: String? = nil
        /// A filter to view information about your activations.
        public var filters: [DescribeActivationsFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [DescribeActivationsFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try DescribeActivationsFilter(dictionary: $0) })
            }
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct CreateMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public var allowUnassociatedTargets: Bool = false
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public var schedule: String = ""
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public var cutoff: Int32 = 0
        /// The duration of the Maintenance Window in hours.
        public var duration: Int32 = 0
        /// The name of the Maintenance Window.
        public var name: String = ""
        /// User-provided idempotency token.
        public var clientToken: String? = nil

        public init() {}

        public init(allowUnassociatedTargets: Bool, schedule: String, cutoff: Int32, duration: Int32, name: String, clientToken: String? = nil) {
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.clientToken = clientToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let allowUnassociatedTargets = dictionary["AllowUnassociatedTargets"] as? Bool else { throw InitializableError.missingRequiredParam("AllowUnassociatedTargets") }
            self.allowUnassociatedTargets = allowUnassociatedTargets
            guard let schedule = dictionary["Schedule"] as? String else { throw InitializableError.missingRequiredParam("Schedule") }
            self.schedule = schedule
            guard let cutoff = dictionary["Cutoff"] as? Int32 else { throw InitializableError.missingRequiredParam("Cutoff") }
            self.cutoff = cutoff
            guard let duration = dictionary["Duration"] as? Int32 else { throw InitializableError.missingRequiredParam("Duration") }
            self.duration = duration
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.clientToken = dictionary["ClientToken"] as? String
        }
    }

    public struct CommandInvocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var commandPlugins: [CommandPlugin]? = nil
        /// Configurations for sending notifications about command status changes on a per instance basis.
        public var notificationConfig: NotificationConfig? = nil
        /// User-specified information about the command, such as a brief description of what the command should do.
        public var comment: String? = nil
        /// The URL to the plugin’s StdOut file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        public var standardOutputUrl: String? = nil
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis.
        public var serviceRole: String? = nil
        ///  Gets the trace output sent by the agent. 
        public var traceOutput: String? = nil
        /// Whether or not the invocation succeeded, failed, or is pending.
        public var status: String? = nil
        /// The name of the invocation target. For Amazon EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance.
        public var instanceName: String? = nil
        /// The time and date the request was sent to this instance.
        public var requestedDateTime: Date? = nil
        /// The instance ID in which this invocation was requested.
        public var instanceId: String? = nil
        /// The document name that was requested for execution.
        public var documentName: String? = nil
        /// The URL to the plugin’s StdErr file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        public var standardErrorUrl: String? = nil
        /// The command against which this invocation was requested.
        public var commandId: String? = nil
        /// A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:    Pending – The command has not been sent to the instance.   In Progress – The command has been sent to the instance but has not reached a terminal state.   Success – The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out – The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command’s MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out – Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed – The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Undeliverable – The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command’s MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated – The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public var statusDetails: String? = nil

        public init() {}

        public init(commandPlugins: [CommandPlugin]? = nil, notificationConfig: NotificationConfig? = nil, comment: String? = nil, standardOutputUrl: String? = nil, serviceRole: String? = nil, traceOutput: String? = nil, status: String? = nil, instanceName: String? = nil, requestedDateTime: Date? = nil, instanceId: String? = nil, documentName: String? = nil, standardErrorUrl: String? = nil, commandId: String? = nil, statusDetails: String? = nil) {
            self.commandPlugins = commandPlugins
            self.notificationConfig = notificationConfig
            self.comment = comment
            self.standardOutputUrl = standardOutputUrl
            self.serviceRole = serviceRole
            self.traceOutput = traceOutput
            self.status = status
            self.instanceName = instanceName
            self.requestedDateTime = requestedDateTime
            self.instanceId = instanceId
            self.documentName = documentName
            self.standardErrorUrl = standardErrorUrl
            self.commandId = commandId
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            if let commandPlugins = dictionary["CommandPlugins"] as? [[String: Any]] {
                self.commandPlugins = try commandPlugins.map({ try CommandPlugin(dictionary: $0) })
            }
            if let notificationConfig = dictionary["NotificationConfig"] as? [String: Any] { self.notificationConfig = try Ssm.NotificationConfig(dictionary: notificationConfig) }
            self.comment = dictionary["Comment"] as? String
            self.standardOutputUrl = dictionary["StandardOutputUrl"] as? String
            self.serviceRole = dictionary["ServiceRole"] as? String
            self.traceOutput = dictionary["TraceOutput"] as? String
            self.status = dictionary["Status"] as? String
            self.instanceName = dictionary["InstanceName"] as? String
            self.requestedDateTime = dictionary["RequestedDateTime"] as? Date
            self.instanceId = dictionary["InstanceId"] as? String
            self.documentName = dictionary["DocumentName"] as? String
            self.standardErrorUrl = dictionary["StandardErrorUrl"] as? String
            self.commandId = dictionary["CommandId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct DeregisterManagedInstanceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct FailedCreateAssociation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The source of the failure.
        public var fault: String? = nil
        /// The association.
        public var entry: CreateAssociationBatchRequestEntry? = nil
        /// A description of the failure.
        public var message: String? = nil

        public init() {}

        public init(fault: String? = nil, entry: CreateAssociationBatchRequestEntry? = nil, message: String? = nil) {
            self.fault = fault
            self.entry = entry
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            self.fault = dictionary["Fault"] as? String
            if let entry = dictionary["Entry"] as? [String: Any] { self.entry = try Ssm.CreateAssociationBatchRequestEntry(dictionary: entry) }
            self.message = dictionary["Message"] as? String
        }
    }

    public struct DocumentIdentifier: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The schema version.
        public var schemaVersion: String? = nil
        /// The document type.
        public var documentType: String? = nil
        /// The AWS user account of the person who created the document.
        public var owner: String? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The operating system platform. 
        public var platformTypes: [String]? = nil
        /// The document version.
        public var documentVersion: String? = nil

        public init() {}

        public init(schemaVersion: String? = nil, documentType: String? = nil, owner: String? = nil, name: String? = nil, platformTypes: [String]? = nil, documentVersion: String? = nil) {
            self.schemaVersion = schemaVersion
            self.documentType = documentType
            self.owner = owner
            self.name = name
            self.platformTypes = platformTypes
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.schemaVersion = dictionary["SchemaVersion"] as? String
            self.documentType = dictionary["DocumentType"] as? String
            self.owner = dictionary["Owner"] as? String
            self.name = dictionary["Name"] as? String
            if let platformTypes = dictionary["PlatformTypes"] as? [String] {
                self.platformTypes = platformTypes
            }
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct GetInventorySchemaResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Inventory schemas returned by the request.
        public var schemas: [InventoryItemSchema]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(schemas: [InventoryItemSchema]? = nil, nextToken: String? = nil) {
            self.schemas = schemas
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let schemas = dictionary["Schemas"] as? [[String: Any]] {
                self.schemas = try schemas.map({ try InventoryItemSchema(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeleteMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the deleted Maintenance Window.
        public var windowId: String? = nil

        public init() {}

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
        }
    }

    public struct GetParameterHistoryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public var withDecryption: Bool? = nil
        /// The name of a parameter you want to query.
        public var name: String = ""
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(withDecryption: Bool? = nil, name: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.withDecryption = withDecryption
            self.name = name
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.withDecryption = dictionary["WithDecryption"] as? Bool
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetParameterHistoryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of parameters returned by the request.
        public var parameters: [ParameterHistory]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(parameters: [ParameterHistory]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try ParameterHistory(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ListDocumentVersionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The name of the document about which you want version information.
        public var name: String = ""
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, name: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.name = name
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct Target: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// User-defined criteria for sending commands that target instances that meet the criteria. Key can be tag:&lt;Amazon EC2 tag&gt; or name:&lt;Amazon EC2 instance ID&gt;. For example, tag:ServerRole or name:0123456789012345. For more information about how to send commands that target instances using Key;Value parameters, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        public var key: String? = nil
        /// User-defined criteria that maps to Key. For example, if you specified tag:ServerRole, you could specify value:WebServer to execute a command on instances that include Amazon EC2 tags of ServerRole;WebServer. For more information about how to send commands that target instances using Key;Value parameters, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        public var values: [String]? = nil

        public init() {}

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? String
            if let values = dictionary["Values"] as? [String] {
                self.values = values
            }
        }
    }

    public struct AssociationDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date on which the association was last run.
        public var lastExecutionDate: Date? = nil
        /// The date when the association was last updated.
        public var lastUpdateAssociationDate: Date? = nil
        /// The instances targeted by the request. 
        public var targets: [Target]? = nil
        /// The association status.
        public var status: AssociationStatus? = nil
        /// The association ID.
        public var associationId: String? = nil
        /// A description of the parameters for a document. 
        public var parameters: [String: [String]]? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The ID of the instance.
        public var instanceId: String? = nil
        /// The document version.
        public var documentVersion: String? = nil
        /// An Amazon S3 bucket where you want to store the output details of the request.
        public var outputLocation: InstanceAssociationOutputLocation? = nil
        /// Information about the association.
        public var overview: AssociationOverview? = nil
        /// A cron expression that specifies a schedule when the association runs.
        public var scheduleExpression: String? = nil
        /// The date when the association was made.
        public var date: Date? = nil
        /// The last date on which the association was successfully run.
        public var lastSuccessfulExecutionDate: Date? = nil

        public init() {}

        public init(lastExecutionDate: Date? = nil, lastUpdateAssociationDate: Date? = nil, targets: [Target]? = nil, status: AssociationStatus? = nil, associationId: String? = nil, parameters: [String: [String]]? = nil, name: String? = nil, instanceId: String? = nil, documentVersion: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, overview: AssociationOverview? = nil, scheduleExpression: String? = nil, date: Date? = nil, lastSuccessfulExecutionDate: Date? = nil) {
            self.lastExecutionDate = lastExecutionDate
            self.lastUpdateAssociationDate = lastUpdateAssociationDate
            self.targets = targets
            self.status = status
            self.associationId = associationId
            self.parameters = parameters
            self.name = name
            self.instanceId = instanceId
            self.documentVersion = documentVersion
            self.outputLocation = outputLocation
            self.overview = overview
            self.scheduleExpression = scheduleExpression
            self.date = date
            self.lastSuccessfulExecutionDate = lastSuccessfulExecutionDate
        }

        public init(dictionary: [String: Any]) throws {
            self.lastExecutionDate = dictionary["LastExecutionDate"] as? Date
            self.lastUpdateAssociationDate = dictionary["LastUpdateAssociationDate"] as? Date
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            if let status = dictionary["Status"] as? [String: Any] { self.status = try Ssm.AssociationStatus(dictionary: status) }
            self.associationId = dictionary["AssociationId"] as? String
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let parameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = parameterValueList
                }
                self.parameters = parametersDict
            }
            self.name = dictionary["Name"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
            if let outputLocation = dictionary["OutputLocation"] as? [String: Any] { self.outputLocation = try Ssm.InstanceAssociationOutputLocation(dictionary: outputLocation) }
            if let overview = dictionary["Overview"] as? [String: Any] { self.overview = try Ssm.AssociationOverview(dictionary: overview) }
            self.scheduleExpression = dictionary["ScheduleExpression"] as? String
            self.date = dictionary["Date"] as? Date
            self.lastSuccessfulExecutionDate = dictionary["LastSuccessfulExecutionDate"] as? Date
        }
    }

    public struct InstanceAssociation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The content of the association document for the instance(s).
        public var content: String? = nil
        /// The instance ID.
        public var instanceId: String? = nil
        /// The association ID.
        public var associationId: String? = nil

        public init() {}

        public init(content: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.content = content
            self.instanceId = instanceId
            self.associationId = associationId
        }

        public init(dictionary: [String: Any]) throws {
            self.content = dictionary["Content"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.associationId = dictionary["AssociationId"] as? String
        }
    }

    public struct DeleteParameterResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct InstanceInformationStringFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The filter key name to describe your instances. For example: "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|”AssociationStatus”|”Tag Key”
        public var key: String = ""
        /// The filter values.
        public var values: [String] = []

        public init() {}

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let values = dictionary["Values"] as? [String] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = values
        }
    }

    public struct DeleteDocumentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the SSM document.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct DescribeMaintenanceWindowTargetsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the targets in the Maintenance Window.
        public var targets: [MaintenanceWindowTarget]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(targets: [MaintenanceWindowTarget]? = nil, nextToken: String? = nil) {
            self.targets = targets
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try MaintenanceWindowTarget(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribePatchGroupStateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the patch group whose patch snapshot should be retrieved.
        public var patchGroup: String = ""

        public init() {}

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            guard let patchGroup = dictionary["PatchGroup"] as? String else { throw InitializableError.missingRequiredParam("PatchGroup") }
            self.patchGroup = patchGroup
        }
    }

    public struct UpdatePatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline to update.
        public var baselineId: String = ""
        /// A list of explicitly approved patches for the baseline.
        public var approvedPatches: [String]? = nil
        /// The name of the patch baseline.
        public var name: String? = nil
        /// A list of explicitly rejected patches for the baseline.
        public var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        public var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        public var globalFilters: PatchFilterGroup? = nil
        /// A description of the patch baseline.
        public var description: String? = nil

        public init() {}

        public init(baselineId: String, approvedPatches: [String]? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
            if let approvedPatches = dictionary["ApprovedPatches"] as? [String] {
                self.approvedPatches = approvedPatches
            }
            self.name = dictionary["Name"] as? String
            if let rejectedPatches = dictionary["RejectedPatches"] as? [String] {
                self.rejectedPatches = rejectedPatches
            }
            if let approvalRules = dictionary["ApprovalRules"] as? [String: Any] { self.approvalRules = try Ssm.PatchRuleGroup(dictionary: approvalRules) }
            if let globalFilters = dictionary["GlobalFilters"] as? [String: Any] { self.globalFilters = try Ssm.PatchFilterGroup(dictionary: globalFilters) }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct InventoryFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of filter. Valid values include the following: "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
        public var type: String? = nil
        /// The name of the filter key.
        public var key: String = ""
        /// Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal 
        public var values: [String] = []

        public init() {}

        public init(type: String? = nil, key: String, values: [String]) {
            self.type = type
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            self.type = dictionary["Type"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let values = dictionary["Values"] as? [String] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = values
        }
    }

    public struct ListCommandsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// (Optional) The list of commands requested by the user. 
        public var commands: [Command]? = nil

        public init() {}

        public init(nextToken: String? = nil, commands: [Command]? = nil) {
            self.nextToken = nextToken
            self.commands = commands
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let commands = dictionary["Commands"] as? [[String: Any]] {
                self.commands = try commands.map({ try Command(dictionary: $0) })
            }
        }
    }

    public struct GetPatchBaselineForPatchGroupResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline that should be used for the patch group.
        public var baselineId: String? = nil
        /// The name of the patch group.
        public var patchGroup: String? = nil

        public init() {}

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
            self.patchGroup = dictionary["PatchGroup"] as? String
        }
    }

    public struct DescribeEffectivePatchesForPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline to retrieve the effective patches for.
        public var baselineId: String = ""
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of patches to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(baselineId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.baselineId = baselineId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct RegisterPatchBaselineForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline to register the patch group with.
        public var baselineId: String = ""
        /// The name of the patch group that should be registered with the patch baseline.
        public var patchGroup: String = ""

        public init() {}

        public init(baselineId: String, patchGroup: String) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
            guard let patchGroup = dictionary["PatchGroup"] as? String else { throw InitializableError.missingRequiredParam("PatchGroup") }
            self.patchGroup = patchGroup
        }
    }

    public struct AssociationStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The reason for the status.
        public var message: String = ""
        /// The status.
        public var name: String = ""
        /// The date when the status changed.
        public var date: Date = Date()
        /// A user-defined string.
        public var additionalInfo: String? = nil

        public init() {}

        public init(message: String, name: String, date: Date, additionalInfo: String? = nil) {
            self.message = message
            self.name = name
            self.date = date
            self.additionalInfo = additionalInfo
        }

        public init(dictionary: [String: Any]) throws {
            guard let message = dictionary["Message"] as? String else { throw InitializableError.missingRequiredParam("Message") }
            self.message = message
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let date = dictionary["Date"] as? Date else { throw InitializableError.missingRequiredParam("Date") }
            self.date = date
            self.additionalInfo = dictionary["AdditionalInfo"] as? String
        }
    }

    public struct DescribeInstancePatchStatesForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Each entry in the array is a structure containing: Key (string 1 ≤ length ≤ 200)  Values (array containing a single string)  Type (string “Equal”, “NotEqual”, “LessThan”, “GreaterThan”)
        public var filters: [InstancePatchStateFilter]? = nil
        /// The name of the patch group for which the patch state information should be retrieved.
        public var patchGroup: String = ""
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of patches to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(filters: [InstancePatchStateFilter]? = nil, patchGroup: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.patchGroup = patchGroup
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try InstancePatchStateFilter(dictionary: $0) })
            }
            guard let patchGroup = dictionary["PatchGroup"] as? String else { throw InitializableError.missingRequiredParam("PatchGroup") }
            self.patchGroup = patchGroup
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribeMaintenanceWindowTasksResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// Information about the tasks in the Maintenance Window.
        public var tasks: [MaintenanceWindowTask]? = nil

        public init() {}

        public init(nextToken: String? = nil, tasks: [MaintenanceWindowTask]? = nil) {
            self.nextToken = nextToken
            self.tasks = tasks
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let tasks = dictionary["Tasks"] as? [[String: Any]] {
                self.tasks = try tasks.map({ try MaintenanceWindowTask(dictionary: $0) })
            }
        }
    }

    public struct AutomationExecution: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The key-value map of execution parameters, which were supplied when calling StartAutomationExecution.
        public var parameters: [String: [String]]? = nil
        /// The execution status of the Automation.
        public var automationExecutionStatus: String? = nil
        /// The name of the Automation document used during the execution.
        public var documentName: String? = nil
        /// The version of the document to use during execution.
        public var documentVersion: String? = nil
        /// The time the execution started.
        public var executionStartTime: Date? = nil
        /// The list of execution outputs as defined in the automation document.
        public var outputs: [String: [String]]? = nil
        /// A message describing why an execution has failed, if the status is set to Failed.
        public var failureMessage: String? = nil
        /// The execution ID.
        public var automationExecutionId: String? = nil
        /// A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are executed in order.
        public var stepExecutions: [StepExecution]? = nil
        /// The time the execution finished.
        public var executionEndTime: Date? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, automationExecutionStatus: String? = nil, documentName: String? = nil, documentVersion: String? = nil, executionStartTime: Date? = nil, outputs: [String: [String]]? = nil, failureMessage: String? = nil, automationExecutionId: String? = nil, stepExecutions: [StepExecution]? = nil, executionEndTime: Date? = nil) {
            self.parameters = parameters
            self.automationExecutionStatus = automationExecutionStatus
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.failureMessage = failureMessage
            self.automationExecutionId = automationExecutionId
            self.stepExecutions = stepExecutions
            self.executionEndTime = executionEndTime
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let automationParameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = automationParameterValueList
                }
                self.parameters = parametersDict
            }
            self.automationExecutionStatus = dictionary["AutomationExecutionStatus"] as? String
            self.documentName = dictionary["DocumentName"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
            self.executionStartTime = dictionary["ExecutionStartTime"] as? Date
            if let outputs = dictionary["Outputs"] as? [String: Any] {
                var outputsDict: [String: [String]] = [:]
                for (key, value) in outputs {
                    guard let automationParameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    outputsDict[key] = automationParameterValueList
                }
                self.outputs = outputsDict
            }
            self.failureMessage = dictionary["FailureMessage"] as? String
            self.automationExecutionId = dictionary["AutomationExecutionId"] as? String
            if let stepExecutions = dictionary["StepExecutions"] as? [[String: Any]] {
                self.stepExecutions = try stepExecutions.map({ try StepExecution(dictionary: $0) })
            }
            self.executionEndTime = dictionary["ExecutionEndTime"] as? Date
        }
    }

    public struct MaintenanceWindowTaskParameterValueExpression: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// This field contains an array of 0 or more strings, each 1 to 255 characters in length.
        public var values: [String]? = nil

        public init() {}

        public init(values: [String]? = nil) {
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            if let values = dictionary["Values"] as? [String] {
                self.values = values
            }
        }
    }

    public struct Patch: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        public var classification: String? = nil
        /// The specific product the patch is applicable for (for example, WindowsServer2016).
        public var product: String? = nil
        /// The language of the patch if it’s language-specific.
        public var language: String? = nil
        /// The date the patch was released.
        public var releaseDate: Date? = nil
        /// The title of the patch.
        public var title: String? = nil
        /// The ID of the patch (this is different than the Microsoft Knowledge Base ID).
        public var id: String? = nil
        /// The description of the patch.
        public var description: String? = nil
        /// The product family the patch is applicable for (for example, Windows).
        public var productFamily: String? = nil
        /// The name of the vendor providing the patch.
        public var vendor: String? = nil
        /// The ID of the MSRC bulletin the patch is related to.
        public var msrcNumber: String? = nil
        /// The Microsoft Knowledge Base ID of the patch.
        public var kbNumber: String? = nil
        /// The URL where more information can be obtained about the patch.
        public var contentUrl: String? = nil
        /// The severity of the patch (for example Critical, Important, Moderate).
        public var msrcSeverity: String? = nil

        public init() {}

        public init(classification: String? = nil, product: String? = nil, language: String? = nil, releaseDate: Date? = nil, title: String? = nil, id: String? = nil, description: String? = nil, productFamily: String? = nil, vendor: String? = nil, msrcNumber: String? = nil, kbNumber: String? = nil, contentUrl: String? = nil, msrcSeverity: String? = nil) {
            self.classification = classification
            self.product = product
            self.language = language
            self.releaseDate = releaseDate
            self.title = title
            self.id = id
            self.description = description
            self.productFamily = productFamily
            self.vendor = vendor
            self.msrcNumber = msrcNumber
            self.kbNumber = kbNumber
            self.contentUrl = contentUrl
            self.msrcSeverity = msrcSeverity
        }

        public init(dictionary: [String: Any]) throws {
            self.classification = dictionary["Classification"] as? String
            self.product = dictionary["Product"] as? String
            self.language = dictionary["Language"] as? String
            self.releaseDate = dictionary["ReleaseDate"] as? Date
            self.title = dictionary["Title"] as? String
            self.id = dictionary["Id"] as? String
            self.description = dictionary["Description"] as? String
            self.productFamily = dictionary["ProductFamily"] as? String
            self.vendor = dictionary["Vendor"] as? String
            self.msrcNumber = dictionary["MsrcNumber"] as? String
            self.kbNumber = dictionary["KbNumber"] as? String
            self.contentUrl = dictionary["ContentUrl"] as? String
            self.msrcSeverity = dictionary["MsrcSeverity"] as? String
        }
    }

    public struct DescribeDocumentResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the SSM document.
        public var document: DocumentDescription? = nil

        public init() {}

        public init(document: DocumentDescription? = nil) {
            self.document = document
        }

        public init(dictionary: [String: Any]) throws {
            if let document = dictionary["Document"] as? [String: Any] { self.document = try Ssm.DocumentDescription(dictionary: document) }
        }
    }

    public struct DescribeAutomationExecutionsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// The list of details about each automation execution which has occurred which matches the filter specification, if any.
        public var automationExecutionMetadataList: [AutomationExecutionMetadata]? = nil

        public init() {}

        public init(nextToken: String? = nil, automationExecutionMetadataList: [AutomationExecutionMetadata]? = nil) {
            self.nextToken = nextToken
            self.automationExecutionMetadataList = automationExecutionMetadataList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let automationExecutionMetadataList = dictionary["AutomationExecutionMetadataList"] as? [[String: Any]] {
                self.automationExecutionMetadataList = try automationExecutionMetadataList.map({ try AutomationExecutionMetadata(dictionary: $0) })
            }
        }
    }

    public struct RegisterTaskWithMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The id of the Maintenance Window the task should be added to.
        public var windowId: String = ""
        /// The ARN of the task to execute 
        public var taskArn: String = ""
        /// The role that should be assumed when executing the task.
        public var serviceRoleArn: String = ""
        /// The maximum number of errors allowed before this task stops being scheduled.
        public var maxErrors: String = ""
        /// The type of task being registered.
        public var taskType: String = ""
        /// User-provided idempotency token.
        public var clientToken: String? = nil
        /// The parameters that should be passed to the task when it is executed.
        public var taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public var targets: [Target] = []
        /// A structure containing information about an Amazon S3 bucket to write instance-level logs to. 
        public var loggingInfo: LoggingInfo? = nil
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        public var priority: Int32? = nil
        /// The maximum number of targets this task can be run for in parallel.
        public var maxConcurrency: String = ""

        public init() {}

        public init(windowId: String, taskArn: String, serviceRoleArn: String, maxErrors: String, taskType: String, clientToken: String? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, targets: [Target], loggingInfo: LoggingInfo? = nil, priority: Int32? = nil, maxConcurrency: String) {
            self.windowId = windowId
            self.taskArn = taskArn
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
            self.taskType = taskType
            self.clientToken = clientToken
            self.taskParameters = taskParameters
            self.targets = targets
            self.loggingInfo = loggingInfo
            self.priority = priority
            self.maxConcurrency = maxConcurrency
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            guard let taskArn = dictionary["TaskArn"] as? String else { throw InitializableError.missingRequiredParam("TaskArn") }
            self.taskArn = taskArn
            guard let serviceRoleArn = dictionary["ServiceRoleArn"] as? String else { throw InitializableError.missingRequiredParam("ServiceRoleArn") }
            self.serviceRoleArn = serviceRoleArn
            guard let maxErrors = dictionary["MaxErrors"] as? String else { throw InitializableError.missingRequiredParam("MaxErrors") }
            self.maxErrors = maxErrors
            guard let taskType = dictionary["TaskType"] as? String else { throw InitializableError.missingRequiredParam("TaskType") }
            self.taskType = taskType
            self.clientToken = dictionary["ClientToken"] as? String
            if let taskParameters = dictionary["TaskParameters"] as? [String: Any] {
                var taskParametersDict: [String: MaintenanceWindowTaskParameterValueExpression] = [:]
                for (key, value) in taskParameters {
                    guard let maintenanceWindowTaskParameterValueExpressionDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    taskParametersDict[key] = try MaintenanceWindowTaskParameterValueExpression(dictionary: maintenanceWindowTaskParameterValueExpressionDict)
                }
                self.taskParameters = taskParametersDict
            }
            guard let targets = dictionary["Targets"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Targets") }
            self.targets = try targets.map({ try Target(dictionary: $0) })
            if let loggingInfo = dictionary["LoggingInfo"] as? [String: Any] { self.loggingInfo = try Ssm.LoggingInfo(dictionary: loggingInfo) }
            self.priority = dictionary["Priority"] as? Int32
            guard let maxConcurrency = dictionary["MaxConcurrency"] as? String else { throw InitializableError.missingRequiredParam("MaxConcurrency") }
            self.maxConcurrency = maxConcurrency
        }
    }

    public struct CreateAssociationBatchRequestEntry: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A description of the parameters for a document. 
        public var parameters: [String: [String]]? = nil
        ///  The ID of the instance. 
        public var instanceId: String? = nil
        ///  The name of the configuration document. 
        public var name: String = ""
        /// The document version.
        public var documentVersion: String? = nil
        /// The instances targeted by the request.
        public var targets: [Target]? = nil
        /// An Amazon S3 bucket where you want to store the results of this request.
        public var outputLocation: InstanceAssociationOutputLocation? = nil
        /// A cron expression that specifies a schedule when the association runs.
        public var scheduleExpression: String? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, instanceId: String? = nil, name: String, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.parameters = parameters
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let parameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = parameterValueList
                }
                self.parameters = parametersDict
            }
            self.instanceId = dictionary["InstanceId"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.documentVersion = dictionary["DocumentVersion"] as? String
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            if let outputLocation = dictionary["OutputLocation"] as? [String: Any] { self.outputLocation = try Ssm.InstanceAssociationOutputLocation(dictionary: outputLocation) }
            self.scheduleExpression = dictionary["ScheduleExpression"] as? String
        }
    }

    public struct CancelCommandResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetDefaultPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ParameterHistory: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the query key used for this parameter.
        public var keyId: String? = nil
        /// The name of the parameter.
        public var name: String? = nil
        /// Date the parameter was last changed or updated.
        public var lastModifiedDate: Date? = nil
        /// The type of parameter used.
        public var type: String? = nil
        /// The parameter value.
        public var value: String? = nil
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        public var lastModifiedUser: String? = nil
        /// Information about the parameter.
        public var description: String? = nil

        public init() {}

        public init(keyId: String? = nil, name: String? = nil, lastModifiedDate: Date? = nil, type: String? = nil, value: String? = nil, lastModifiedUser: String? = nil, description: String? = nil) {
            self.keyId = keyId
            self.name = name
            self.lastModifiedDate = lastModifiedDate
            self.type = type
            self.value = value
            self.lastModifiedUser = lastModifiedUser
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.keyId = dictionary["KeyId"] as? String
            self.name = dictionary["Name"] as? String
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.type = dictionary["Type"] as? String
            self.value = dictionary["Value"] as? String
            self.lastModifiedUser = dictionary["LastModifiedUser"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct PatchOrchestratorFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The key for the filter.
        public var key: String? = nil
        /// The value for the filter.
        public var values: [String]? = nil

        public init() {}

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? String
            if let values = dictionary["Values"] as? [String] {
                self.values = values
            }
        }
    }

    public struct UpdateDocumentResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A description of the document that was updated.
        public var documentDescription: DocumentDescription? = nil

        public init() {}

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let documentDescription = dictionary["DocumentDescription"] as? [String: Any] { self.documentDescription = try Ssm.DocumentDescription(dictionary: documentDescription) }
        }
    }

    public struct InventoryItemAttribute: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The data type of the inventory item attribute. 
        public var dataType: String = ""
        /// Name of the inventory item attribute.
        public var name: String = ""

        public init() {}

        public init(dataType: String, name: String) {
            self.dataType = dataType
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let dataType = dictionary["DataType"] as? String else { throw InitializableError.missingRequiredParam("DataType") }
            self.dataType = dataType
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct DocumentDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The SHA1 hash of the document, which you can use for verification purposes.
        public var sha1: String? = nil
        /// The default version.
        public var defaultVersion: String? = nil
        ///  The date when the SSM document was created. 
        public var createdDate: Date? = nil
        /// The AWS user account of the person who created the document.
        public var owner: String? = nil
        /// The type of document. 
        public var documentType: String? = nil
        ///  A description of the document. 
        public var description: String? = nil
        /// The status of the SSM document.
        public var status: String? = nil
        /// A description of the parameters for a document.
        public var parameters: [DocumentParameter]? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The document version.
        public var documentVersion: String? = nil
        /// The schema version.
        public var schemaVersion: String? = nil
        /// The latest version of the document.
        public var latestVersion: String? = nil
        /// The list of OS platforms compatible with this SSM document. 
        public var platformTypes: [String]? = nil
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        public var hash: String? = nil
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        public var hashType: String? = nil

        public init() {}

        public init(sha1: String? = nil, defaultVersion: String? = nil, createdDate: Date? = nil, owner: String? = nil, documentType: String? = nil, description: String? = nil, status: String? = nil, parameters: [DocumentParameter]? = nil, name: String? = nil, documentVersion: String? = nil, schemaVersion: String? = nil, latestVersion: String? = nil, platformTypes: [String]? = nil, hash: String? = nil, hashType: String? = nil) {
            self.sha1 = sha1
            self.defaultVersion = defaultVersion
            self.createdDate = createdDate
            self.owner = owner
            self.documentType = documentType
            self.description = description
            self.status = status
            self.parameters = parameters
            self.name = name
            self.documentVersion = documentVersion
            self.schemaVersion = schemaVersion
            self.latestVersion = latestVersion
            self.platformTypes = platformTypes
            self.hash = hash
            self.hashType = hashType
        }

        public init(dictionary: [String: Any]) throws {
            self.sha1 = dictionary["Sha1"] as? String
            self.defaultVersion = dictionary["DefaultVersion"] as? String
            self.createdDate = dictionary["CreatedDate"] as? Date
            self.owner = dictionary["Owner"] as? String
            self.documentType = dictionary["DocumentType"] as? String
            self.description = dictionary["Description"] as? String
            self.status = dictionary["Status"] as? String
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try DocumentParameter(dictionary: $0) })
            }
            self.name = dictionary["Name"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
            self.schemaVersion = dictionary["SchemaVersion"] as? String
            self.latestVersion = dictionary["LatestVersion"] as? String
            if let platformTypes = dictionary["PlatformTypes"] as? [String] {
                self.platformTypes = platformTypes
            }
            self.hash = dictionary["Hash"] as? String
            self.hashType = dictionary["HashType"] as? String
        }
    }

    public struct DeregisterPatchBaselineForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline to deregister the patch group from.
        public var baselineId: String = ""
        /// The name of the patch group that should be deregistered from the patch baseline.
        public var patchGroup: String = ""

        public init() {}

        public init(baselineId: String, patchGroup: String) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
            guard let patchGroup = dictionary["PatchGroup"] as? String else { throw InitializableError.missingRequiredParam("PatchGroup") }
            self.patchGroup = patchGroup
        }
    }

    public struct InstanceInformationFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter. 
        public var key: String = ""
        /// The filter values.
        public var valueSet: [String] = []

        public init() {}

        public init(key: String, valueSet: [String]) {
            self.key = key
            self.valueSet = valueSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            guard let valueSet = dictionary["valueSet"] as? [String] else { throw InitializableError.missingRequiredParam("valueSet") }
            self.valueSet = valueSet
        }
    }

    public struct DescribeEffectiveInstanceAssociationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The instance ID for which you want to view all associations.
        public var instanceId: String = ""
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ModifyDocumentPermissionResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PatchFilterGroup: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The set of patch filters that make up the group.
        public var patchFilters: [PatchFilter] = []

        public init() {}

        public init(patchFilters: [PatchFilter]) {
            self.patchFilters = patchFilters
        }

        public init(dictionary: [String: Any]) throws {
            guard let patchFilters = dictionary["PatchFilters"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("PatchFilters") }
            self.patchFilters = try patchFilters.map({ try PatchFilter(dictionary: $0) })
        }
    }

    public struct DescribeDocumentPermissionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the document for which you are the owner.
        public var name: String = ""
        /// The permission type for the document. The permission type can be Share.
        public var permissionType: String = ""

        public init() {}

        public init(name: String, permissionType: String) {
            self.name = name
            self.permissionType = permissionType
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let permissionType = dictionary["PermissionType"] as? String else { throw InitializableError.missingRequiredParam("PermissionType") }
            self.permissionType = permissionType
        }
    }

    public struct RegisterPatchBaselineForPatchGroupResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline the patch group was registered with.
        public var baselineId: String? = nil
        /// The name of the patch group registered with the patch baseline.
        public var patchGroup: String? = nil

        public init() {}

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
            self.patchGroup = dictionary["PatchGroup"] as? String
        }
    }

    public struct CommandFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter. For example, requested date and time.
        public var key: String = ""
        /// The filter value. For example: June 30, 2015.
        public var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            guard let value = dictionary["value"] as? String else { throw InitializableError.missingRequiredParam("value") }
            self.value = value
        }
    }

    public struct CreateDocumentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A valid JSON string.
        public var content: String = ""
        /// A name for the SSM document.
        public var name: String = ""
        /// The type of document to create. Valid document types include: Policy, Automation, and Command.
        public var documentType: String? = nil

        public init() {}

        public init(content: String, name: String, documentType: String? = nil) {
            self.content = content
            self.name = name
            self.documentType = documentType
        }

        public init(dictionary: [String: Any]) throws {
            guard let content = dictionary["Content"] as? String else { throw InitializableError.missingRequiredParam("Content") }
            self.content = content
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.documentType = dictionary["DocumentType"] as? String
        }
    }

    public struct RegisterDefaultPatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the default patch baseline.
        public var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
        }
    }

    public struct GetDeployablePatchSnapshotForInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user-defined snapshot ID.
        public var snapshotId: String = ""
        /// The ID of the instance for which the appropriate patch snapshot should be retrieved.
        public var instanceId: String = ""

        public init() {}

        public init(snapshotId: String, instanceId: String) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotId = dictionary["SnapshotId"] as? String else { throw InitializableError.missingRequiredParam("SnapshotId") }
            self.snapshotId = snapshotId
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
        }
    }

    public struct SendCommandResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.
        public var command: Command? = nil

        public init() {}

        public init(command: Command? = nil) {
            self.command = command
        }

        public init(dictionary: [String: Any]) throws {
            if let command = dictionary["Command"] as? [String: Any] { self.command = try Ssm.Command(dictionary: command) }
        }
    }

    public struct DeregisterTaskFromMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window the task should be removed from.
        public var windowId: String = ""
        /// The ID of the task to remove from the Maintenance Window.
        public var windowTaskId: String = ""

        public init() {}

        public init(windowId: String, windowTaskId: String) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            guard let windowTaskId = dictionary["WindowTaskId"] as? String else { throw InitializableError.missingRequiredParam("WindowTaskId") }
            self.windowTaskId = windowTaskId
        }
    }

    public struct GetParametersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public var withDecryption: Bool? = nil
        /// Names of the parameters for which you want to query information.
        public var names: [String] = []

        public init() {}

        public init(withDecryption: Bool? = nil, names: [String]) {
            self.withDecryption = withDecryption
            self.names = names
        }

        public init(dictionary: [String: Any]) throws {
            self.withDecryption = dictionary["WithDecryption"] as? Bool
            guard let names = dictionary["Names"] as? [String] else { throw InitializableError.missingRequiredParam("Names") }
            self.names = names
        }
    }

    public struct ListCommandInvocationsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// (Optional) A list of all invocations. 
        public var commandInvocations: [CommandInvocation]? = nil

        public init() {}

        public init(nextToken: String? = nil, commandInvocations: [CommandInvocation]? = nil) {
            self.nextToken = nextToken
            self.commandInvocations = commandInvocations
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let commandInvocations = dictionary["CommandInvocations"] as? [[String: Any]] {
                self.commandInvocations = try commandInvocations.map({ try CommandInvocation(dictionary: $0) })
            }
        }
    }

    public struct DescribeMaintenanceWindowExecutionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window whose executions should be retrieved.
        public var windowId: String = ""
        /// Each entry in the array is a structure containing: Key (string, 1 ≤ length ≤ 128) Values (array of strings 1 ≤ length ≤ 256) The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.
        public var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try MaintenanceWindowFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ListCommandsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) One or more filters. Use a filter to return a more specific list of results. 
        public var filters: [CommandFilter]? = nil
        /// (Optional) If provided, lists only the specified command.
        public var commandId: String? = nil
        /// (Optional) Lists commands issued against this instance ID.
        public var instanceId: String? = nil
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(filters: [CommandFilter]? = nil, commandId: String? = nil, instanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.commandId = commandId
            self.instanceId = instanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try CommandFilter(dictionary: $0) })
            }
            self.commandId = dictionary["CommandId"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ParameterMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Date the parameter was last changed or updated.
        public var lastModifiedDate: Date? = nil
        /// The ID of the query key used for this parameter.
        public var keyId: String? = nil
        /// The type of parameter. Valid parameter types include the following: String, String list, Secure string.
        public var type: String? = nil
        /// The parameter name.
        public var name: String? = nil
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        public var lastModifiedUser: String? = nil
        /// Description of the parameter actions.
        public var description: String? = nil

        public init() {}

        public init(lastModifiedDate: Date? = nil, keyId: String? = nil, type: String? = nil, name: String? = nil, lastModifiedUser: String? = nil, description: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.keyId = keyId
            self.type = type
            self.name = name
            self.lastModifiedUser = lastModifiedUser
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.keyId = dictionary["KeyId"] as? String
            self.type = dictionary["Type"] as? String
            self.name = dictionary["Name"] as? String
            self.lastModifiedUser = dictionary["LastModifiedUser"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeMaintenanceWindowsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// Optional filters used to narrow down the scope of the returned Maintenance Windows. Supported filter keys are Name and Enabled.
        public var filters: [MaintenanceWindowFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [MaintenanceWindowFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try MaintenanceWindowFilter(dictionary: $0) })
            }
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct UpdatePatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the deleted patch baseline.
        public var baselineId: String? = nil
        /// A list of explicitly approved patches for the baseline.
        public var approvedPatches: [String]? = nil
        /// The date when the patch baseline was last modified.
        public var modifiedDate: Date? = nil
        /// The name of the patch baseline.
        public var name: String? = nil
        /// A list of explicitly rejected patches for the baseline.
        public var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        public var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        public var globalFilters: PatchFilterGroup? = nil
        /// The date when the patch baseline was created.
        public var createdDate: Date? = nil
        /// A description of the Patch Baseline.
        public var description: String? = nil

        public init() {}

        public init(baselineId: String? = nil, approvedPatches: [String]? = nil, modifiedDate: Date? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, createdDate: Date? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.modifiedDate = modifiedDate
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.createdDate = createdDate
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
            if let approvedPatches = dictionary["ApprovedPatches"] as? [String] {
                self.approvedPatches = approvedPatches
            }
            self.modifiedDate = dictionary["ModifiedDate"] as? Date
            self.name = dictionary["Name"] as? String
            if let rejectedPatches = dictionary["RejectedPatches"] as? [String] {
                self.rejectedPatches = rejectedPatches
            }
            if let approvalRules = dictionary["ApprovalRules"] as? [String: Any] { self.approvalRules = try Ssm.PatchRuleGroup(dictionary: approvalRules) }
            if let globalFilters = dictionary["GlobalFilters"] as? [String: Any] { self.globalFilters = try Ssm.PatchFilterGroup(dictionary: globalFilters) }
            self.createdDate = dictionary["CreatedDate"] as? Date
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeInstanceInformationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// One or more filters. Use a filter to return a more specific list of instances.
        public var instanceInformationFilterList: [InstanceInformationFilter]? = nil
        /// One or more filters. Use a filter to return a more specific list of instances.
        public var filters: [InstanceInformationStringFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. 
        public var maxResults: Int32? = nil

        public init() {}

        public init(instanceInformationFilterList: [InstanceInformationFilter]? = nil, filters: [InstanceInformationStringFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.instanceInformationFilterList = instanceInformationFilterList
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceInformationFilterList = dictionary["InstanceInformationFilterList"] as? [[String: Any]] {
                self.instanceInformationFilterList = try instanceInformationFilterList.map({ try InstanceInformationFilter(dictionary: $0) })
            }
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try InstanceInformationStringFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetInventoryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        public var filters: [InventoryFilter]? = nil
        /// The list of inventory item types to return.
        public var resultAttributes: [ResultAttribute]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(filters: [InventoryFilter]? = nil, resultAttributes: [ResultAttribute]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.resultAttributes = resultAttributes
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try InventoryFilter(dictionary: $0) })
            }
            if let resultAttributes = dictionary["ResultAttributes"] as? [[String: Any]] {
                self.resultAttributes = try resultAttributes.map({ try ResultAttribute(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribePatchBaselinesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of PatchBaselineIdentity elements.
        public var baselineIdentities: [PatchBaselineIdentity]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(baselineIdentities: [PatchBaselineIdentity]? = nil, nextToken: String? = nil) {
            self.baselineIdentities = baselineIdentities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let baselineIdentities = dictionary["BaselineIdentities"] as? [[String: Any]] {
                self.baselineIdentities = try baselineIdentities.map({ try PatchBaselineIdentity(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct InstanceAggregatedAssociationOverview: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of associations for the instance(s).
        public var instanceAssociationStatusAggregatedCount: [String: Int32]? = nil
        /// Detailed status information about the aggregated associations.
        public var detailedStatus: String? = nil

        public init() {}

        public init(instanceAssociationStatusAggregatedCount: [String: Int32]? = nil, detailedStatus: String? = nil) {
            self.instanceAssociationStatusAggregatedCount = instanceAssociationStatusAggregatedCount
            self.detailedStatus = detailedStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceAssociationStatusAggregatedCount = dictionary["InstanceAssociationStatusAggregatedCount"] as? [String: Int32] {
                self.instanceAssociationStatusAggregatedCount = instanceAssociationStatusAggregatedCount
            }
            self.detailedStatus = dictionary["DetailedStatus"] as? String
        }
    }

    public struct GetCommandInvocationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin.
        public var pluginName: String? = nil
        /// Duration since ExecutionStartDateTime.
        public var executionElapsedTime: String? = nil
        /// The comment text for the command.
        public var comment: String? = nil
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3 bucket was not specified, then this string is empty.
        public var standardOutputUrl: String? = nil
        /// The status of the parent command for this invocation. This status can be different than StatusDetails.
        public var status: String? = nil
        /// The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        public var instanceId: String? = nil
        /// The first 8,000 characters written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        public var standardErrorContent: String? = nil
        /// The name of the SSM document that was executed. For example, AWS-RunShellScript is an SSM document.
        public var documentName: String? = nil
        /// The URL for the complete text written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        public var standardErrorUrl: String? = nil
        /// The date and time the plugin was finished executing. Date and time are written in ISO 8601 format. For example, August 28, 2016 is represented as 2016-08-28. If the plugin has not started to execute, the string is empty.
        public var executionEndDateTime: String? = nil
        /// The error level response code for the plugin script. If the response code is -1, then the command has not started executing on the instance, or it was not received by the instance.
        public var responseCode: Int32? = nil
        /// The first 24,000 characters written by the plugin to stdout. If the command has not finished executing, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.
        public var standardOutputContent: String? = nil
        /// The parent command ID of the invocation plugin.
        public var commandId: String? = nil
        /// A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:    Pending – The command has not been sent to the instance.   In Progress – The command has been sent to the instance but has not reached a terminal state.   Delayed – The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, the instance was stopped, etc. The system will try to deliver the command again.   Success – The command or plugin was executed successfully. This is a terminal state.   Delivery Timed Out – The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command’s MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out – The command started to execute on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed – The command wasn't executed successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Undeliverable – The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command’s MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated – The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public var statusDetails: String? = nil
        /// The date and time the plugin started executing. Date and time are written in ISO 8601 format. For example, August 28, 2016 is represented as 2016-08-28. If the plugin has not started to execute, the string is empty.
        public var executionStartDateTime: String? = nil

        public init() {}

        public init(pluginName: String? = nil, executionElapsedTime: String? = nil, comment: String? = nil, standardOutputUrl: String? = nil, status: String? = nil, instanceId: String? = nil, standardErrorContent: String? = nil, documentName: String? = nil, standardErrorUrl: String? = nil, executionEndDateTime: String? = nil, responseCode: Int32? = nil, standardOutputContent: String? = nil, commandId: String? = nil, statusDetails: String? = nil, executionStartDateTime: String? = nil) {
            self.pluginName = pluginName
            self.executionElapsedTime = executionElapsedTime
            self.comment = comment
            self.standardOutputUrl = standardOutputUrl
            self.status = status
            self.instanceId = instanceId
            self.standardErrorContent = standardErrorContent
            self.documentName = documentName
            self.standardErrorUrl = standardErrorUrl
            self.executionEndDateTime = executionEndDateTime
            self.responseCode = responseCode
            self.standardOutputContent = standardOutputContent
            self.commandId = commandId
            self.statusDetails = statusDetails
            self.executionStartDateTime = executionStartDateTime
        }

        public init(dictionary: [String: Any]) throws {
            self.pluginName = dictionary["PluginName"] as? String
            self.executionElapsedTime = dictionary["ExecutionElapsedTime"] as? String
            self.comment = dictionary["Comment"] as? String
            self.standardOutputUrl = dictionary["StandardOutputUrl"] as? String
            self.status = dictionary["Status"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.standardErrorContent = dictionary["StandardErrorContent"] as? String
            self.documentName = dictionary["DocumentName"] as? String
            self.standardErrorUrl = dictionary["StandardErrorUrl"] as? String
            self.executionEndDateTime = dictionary["ExecutionEndDateTime"] as? String
            self.responseCode = dictionary["ResponseCode"] as? Int32
            self.standardOutputContent = dictionary["StandardOutputContent"] as? String
            self.commandId = dictionary["CommandId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
            self.executionStartDateTime = dictionary["ExecutionStartDateTime"] as? String
        }
    }

    public struct InventoryItemSchema: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        public var typeName: String = ""
        /// The schema attributes for inventory. This contains data type and attribute name.
        public var attributes: [InventoryItemAttribute] = []
        /// The schema version for the inventory item.
        public var version: String? = nil

        public init() {}

        public init(typeName: String, attributes: [InventoryItemAttribute], version: String? = nil) {
            self.typeName = typeName
            self.attributes = attributes
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            guard let typeName = dictionary["TypeName"] as? String else { throw InitializableError.missingRequiredParam("TypeName") }
            self.typeName = typeName
            guard let attributes = dictionary["Attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Attributes") }
            self.attributes = try attributes.map({ try InventoryItemAttribute(dictionary: $0) })
            self.version = dictionary["Version"] as? String
        }
    }

    public struct UpdateAssociationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the association that was updated.
        public var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let associationDescription = dictionary["AssociationDescription"] as? [String: Any] { self.associationDescription = try Ssm.AssociationDescription(dictionary: associationDescription) }
        }
    }

    public struct UpdateManagedInstanceRoleResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeInstanceInformationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty. 
        public var nextToken: String? = nil
        /// The instance information list.
        public var instanceInformationList: [InstanceInformation]? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceInformationList: [InstanceInformation]? = nil) {
            self.nextToken = nextToken
            self.instanceInformationList = instanceInformationList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let instanceInformationList = dictionary["InstanceInformationList"] as? [[String: Any]] {
                self.instanceInformationList = try instanceInformationList.map({ try InstanceInformation(dictionary: $0) })
            }
        }
    }

    public struct PatchStatus: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
        public var approvalDate: Date? = nil
        /// The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED).
        public var deploymentStatus: String? = nil

        public init() {}

        public init(approvalDate: Date? = nil, deploymentStatus: String? = nil) {
            self.approvalDate = approvalDate
            self.deploymentStatus = deploymentStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.approvalDate = dictionary["ApprovalDate"] as? Date
            self.deploymentStatus = dictionary["DeploymentStatus"] as? String
        }
    }

    public struct StartAutomationExecutionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A key-value map of execution parameters, which match the declared parameters in the Automation document.
        public var parameters: [String: [String]]? = nil
        /// The name of the Automation document to use for this execution.
        public var documentName: String = ""
        /// The version of the Automation document to use for this execution.
        public var documentVersion: String? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, documentName: String, documentVersion: String? = nil) {
            self.parameters = parameters
            self.documentName = documentName
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let automationParameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = automationParameterValueList
                }
                self.parameters = parametersDict
            }
            guard let documentName = dictionary["DocumentName"] as? String else { throw InitializableError.missingRequiredParam("DocumentName") }
            self.documentName = documentName
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct UpdateDocumentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The content in a document that you want to update.
        public var content: String = ""
        /// The name of the document that you want to update.
        public var name: String = ""
        /// The version of the document that you want to update.
        public var documentVersion: String? = nil

        public init() {}

        public init(content: String, name: String, documentVersion: String? = nil) {
            self.content = content
            self.name = name
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let content = dictionary["Content"] as? String else { throw InitializableError.missingRequiredParam("Content") }
            self.content = content
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct GetMaintenanceWindowExecutionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the Maintenance Window finished executing.
        public var endTime: Date? = nil
        /// The ID of the task executions from the Maintenance Window execution.
        public var taskIds: [String]? = nil
        /// The time the Maintenance Window started executing.
        public var startTime: Date? = nil
        /// The status of the Maintenance Window execution.
        public var status: String? = nil
        /// The ID of the Maintenance Window execution.
        public var windowExecutionId: String? = nil
        /// The details explaining the Status. Only available for certain status values.
        public var statusDetails: String? = nil

        public init() {}

        public init(endTime: Date? = nil, taskIds: [String]? = nil, startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, statusDetails: String? = nil) {
            self.endTime = endTime
            self.taskIds = taskIds
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.endTime = dictionary["EndTime"] as? Date
            if let taskIds = dictionary["TaskIds"] as? [String] {
                self.taskIds = taskIds
            }
            self.startTime = dictionary["StartTime"] as? Date
            self.status = dictionary["Status"] as? String
            self.windowExecutionId = dictionary["WindowExecutionId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct DescribePatchGroupStateResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of instances with missing patches from the patch baseline.
        public var instancesWithMissingPatches: Int32? = nil
        /// The number of instances in the patch group.
        public var instances: Int32? = nil
        /// The number of instances with patches that aren’t applicable.
        public var instancesWithNotApplicablePatches: Int32? = nil
        /// The number of instances with installed patches.
        public var instancesWithInstalledPatches: Int32? = nil
        /// The number of instances with patches from the patch baseline that failed to install.
        public var instancesWithFailedPatches: Int32? = nil
        /// The number of instances with patches installed that aren’t defined in the patch baseline.
        public var instancesWithInstalledOtherPatches: Int32? = nil

        public init() {}

        public init(instancesWithMissingPatches: Int32? = nil, instances: Int32? = nil, instancesWithNotApplicablePatches: Int32? = nil, instancesWithInstalledPatches: Int32? = nil, instancesWithFailedPatches: Int32? = nil, instancesWithInstalledOtherPatches: Int32? = nil) {
            self.instancesWithMissingPatches = instancesWithMissingPatches
            self.instances = instances
            self.instancesWithNotApplicablePatches = instancesWithNotApplicablePatches
            self.instancesWithInstalledPatches = instancesWithInstalledPatches
            self.instancesWithFailedPatches = instancesWithFailedPatches
            self.instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatches
        }

        public init(dictionary: [String: Any]) throws {
            self.instancesWithMissingPatches = dictionary["InstancesWithMissingPatches"] as? Int32
            self.instances = dictionary["Instances"] as? Int32
            self.instancesWithNotApplicablePatches = dictionary["InstancesWithNotApplicablePatches"] as? Int32
            self.instancesWithInstalledPatches = dictionary["InstancesWithInstalledPatches"] as? Int32
            self.instancesWithFailedPatches = dictionary["InstancesWithFailedPatches"] as? Int32
            self.instancesWithInstalledOtherPatches = dictionary["InstancesWithInstalledOtherPatches"] as? Int32
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value of the tag.
        public var value: String = ""
        /// The name of the tag.
        public var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct RegisterTaskWithMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The id of the task in the Maintenance Window.
        public var windowTaskId: String? = nil

        public init() {}

        public init(windowTaskId: String? = nil) {
            self.windowTaskId = windowTaskId
        }

        public init(dictionary: [String: Any]) throws {
            self.windowTaskId = dictionary["WindowTaskId"] as? String
        }
    }

    public struct DescribeAssociationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The instance ID.
        public var instanceId: String? = nil
        /// The association ID for which you want information.
        public var associationId: String? = nil

        public init() {}

        public init(name: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.associationId = associationId
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.associationId = dictionary["AssociationId"] as? String
        }
    }

    public struct MaintenanceWindowIdentity: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window.
        public var windowId: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        public var duration: Int32? = nil
        /// The name of the Maintenance Window.
        public var name: String? = nil
        /// Whether the Maintenance Window is enabled.
        public var enabled: Bool? = nil

        public init() {}

        public init(windowId: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil, name: String? = nil, enabled: Bool? = nil) {
            self.windowId = windowId
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.enabled = enabled
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            self.cutoff = dictionary["Cutoff"] as? Int32
            self.duration = dictionary["Duration"] as? Int32
            self.name = dictionary["Name"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
        }
    }

    public struct DeregisterManagedInstanceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID assigned to the managed instance when you registered it using the activation process. 
        public var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
        }
    }

    public struct DocumentDefaultVersionDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the document.
        public var name: String? = nil
        /// The default version of the document.
        public var defaultVersion: String? = nil

        public init() {}

        public init(name: String? = nil, defaultVersion: String? = nil) {
            self.name = name
            self.defaultVersion = defaultVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            self.defaultVersion = dictionary["DefaultVersion"] as? String
        }
    }

    public struct AutomationExecutionFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The aspect of the Automation execution information that should be limited.
        public var key: String = ""
        /// The values used to limit the execution information associated with the filter's key.
        public var values: [String] = []

        public init() {}

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let values = dictionary["Values"] as? [String] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = values
        }
    }

    public struct CreateActivationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance. 
        public var iamRole: String = ""
        /// A user-defined description of the resource that you want to register with Amazon EC2. 
        public var description: String? = nil
        /// Specify the maximum number of managed instances you want to register. The default value is 1 instance.
        public var registrationLimit: Int32? = nil
        /// The name of the registered, managed instance as it will appear in the Amazon EC2 console or when you use the AWS command line tools to list EC2 resources.
        public var defaultInstanceName: String? = nil
        /// The date by which this activation request should expire. The default value is 24 hours.
        public var expirationDate: Date? = nil

        public init() {}

        public init(iamRole: String, description: String? = nil, registrationLimit: Int32? = nil, defaultInstanceName: String? = nil, expirationDate: Date? = nil) {
            self.iamRole = iamRole
            self.description = description
            self.registrationLimit = registrationLimit
            self.defaultInstanceName = defaultInstanceName
            self.expirationDate = expirationDate
        }

        public init(dictionary: [String: Any]) throws {
            guard let iamRole = dictionary["IamRole"] as? String else { throw InitializableError.missingRequiredParam("IamRole") }
            self.iamRole = iamRole
            self.description = dictionary["Description"] as? String
            self.registrationLimit = dictionary["RegistrationLimit"] as? Int32
            self.defaultInstanceName = dictionary["DefaultInstanceName"] as? String
            self.expirationDate = dictionary["ExpirationDate"] as? Date
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The resource ID you want to tag.
        public var resourceId: String = ""
        ///  One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. 
        public var tags: [Tag] = []
        /// Specifies the type of resource you are tagging.
        public var resourceType: String = ""

        public init() {}

        public init(resourceId: String, tags: [Tag], resourceType: String) {
            self.resourceId = resourceId
            self.tags = tags
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
        }
    }

    public struct MaintenanceWindowTask: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Maintenance Window ID where the task is registered.
        public var windowId: String? = nil
        /// The ARN of the task to execute.
        public var taskArn: String? = nil
        /// The role that should be assumed when executing the task
        public var serviceRoleArn: String? = nil
        /// The maximum number of errors allowed before this task stops being scheduled.
        public var maxErrors: String? = nil
        /// The parameters that should be passed to the task when it is executed.
        public var taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil
        /// The task ID.
        public var windowTaskId: String? = nil
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public var targets: [Target]? = nil
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        public var priority: Int32? = nil
        /// Information about an Amazon S3 bucket to write task-level logs to.
        public var loggingInfo: LoggingInfo? = nil
        /// The maximum number of targets this task can be run for in parallel.
        public var maxConcurrency: String? = nil
        /// The type of task.
        public var type: String? = nil

        public init() {}

        public init(windowId: String? = nil, taskArn: String? = nil, serviceRoleArn: String? = nil, maxErrors: String? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String? = nil, targets: [Target]? = nil, priority: Int32? = nil, loggingInfo: LoggingInfo? = nil, maxConcurrency: String? = nil, type: String? = nil) {
            self.windowId = windowId
            self.taskArn = taskArn
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.priority = priority
            self.loggingInfo = loggingInfo
            self.maxConcurrency = maxConcurrency
            self.type = type
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            self.taskArn = dictionary["TaskArn"] as? String
            self.serviceRoleArn = dictionary["ServiceRoleArn"] as? String
            self.maxErrors = dictionary["MaxErrors"] as? String
            if let taskParameters = dictionary["TaskParameters"] as? [String: Any] {
                var taskParametersDict: [String: MaintenanceWindowTaskParameterValueExpression] = [:]
                for (key, value) in taskParameters {
                    guard let maintenanceWindowTaskParameterValueExpressionDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    taskParametersDict[key] = try MaintenanceWindowTaskParameterValueExpression(dictionary: maintenanceWindowTaskParameterValueExpressionDict)
                }
                self.taskParameters = taskParametersDict
            }
            self.windowTaskId = dictionary["WindowTaskId"] as? String
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            self.priority = dictionary["Priority"] as? Int32
            if let loggingInfo = dictionary["LoggingInfo"] as? [String: Any] { self.loggingInfo = try Ssm.LoggingInfo(dictionary: loggingInfo) }
            self.maxConcurrency = dictionary["MaxConcurrency"] as? String
            self.type = dictionary["Type"] as? String
        }
    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the task invocation results per invocation.
        public var windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskInvocationIdentities = windowExecutionTaskInvocationIdentities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let windowExecutionTaskInvocationIdentities = dictionary["WindowExecutionTaskInvocationIdentities"] as? [[String: Any]] {
                self.windowExecutionTaskInvocationIdentities = try windowExecutionTaskInvocationIdentities.map({ try MaintenanceWindowExecutionTaskInvocationIdentity(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeInstancePatchesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// Each entry in the array is a structure containing: Title (string) KBId (string) Classification (string) Severity (string) State (string – “INSTALLED”, “INSTALLED_OTHER”, “MISSING”, “NOT_APPLICABLE”, “FAILED”) InstalledTime (DateTime) InstalledBy (string)
        public var patches: [PatchComplianceData]? = nil

        public init() {}

        public init(nextToken: String? = nil, patches: [PatchComplianceData]? = nil) {
            self.nextToken = nextToken
            self.patches = patches
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let patches = dictionary["Patches"] as? [[String: Any]] {
                self.patches = try patches.map({ try PatchComplianceData(dictionary: $0) })
            }
        }
    }

    public struct RemoveTagsFromResourceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PatchGroupPatchBaselineMapping: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the patch group registered with the patch baseline.
        public var patchGroup: String? = nil
        /// The patch baseline the patch group is registered with.
        public var baselineIdentity: PatchBaselineIdentity? = nil

        public init() {}

        public init(patchGroup: String? = nil, baselineIdentity: PatchBaselineIdentity? = nil) {
            self.patchGroup = patchGroup
            self.baselineIdentity = baselineIdentity
        }

        public init(dictionary: [String: Any]) throws {
            self.patchGroup = dictionary["PatchGroup"] as? String
            if let baselineIdentity = dictionary["BaselineIdentity"] as? [String: Any] { self.baselineIdentity = try Ssm.PatchBaselineIdentity(dictionary: baselineIdentity) }
        }
    }

    public struct CreatePatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the created patch baseline.
        public var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
        }
    }

    public struct DeleteMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window to delete.
        public var windowId: String = ""

        public init() {}

        public init(windowId: String) {
            self.windowId = windowId
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
        }
    }

    public struct DescribePatchGroupsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of patch groups to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetPatchBaselineForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the patch group whose patch baseline should be retrieved.
        public var patchGroup: String = ""

        public init() {}

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            guard let patchGroup = dictionary["PatchGroup"] as? String else { throw InitializableError.missingRequiredParam("PatchGroup") }
            self.patchGroup = patchGroup
        }
    }

    public struct DescribeActivationsFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter.
        public var filterKey: String? = nil
        /// The filter values.
        public var filterValues: [String]? = nil

        public init() {}

        public init(filterKey: String? = nil, filterValues: [String]? = nil) {
            self.filterKey = filterKey
            self.filterValues = filterValues
        }

        public init(dictionary: [String: Any]) throws {
            self.filterKey = dictionary["FilterKey"] as? String
            if let filterValues = dictionary["FilterValues"] as? [String] {
                self.filterValues = filterValues
            }
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The resource ID for which you want to see a list of tags.
        public var resourceId: String = ""
        /// Returns a list of tags for a specific resource type.
        public var resourceType: String = ""

        public init() {}

        public init(resourceId: String, resourceType: String) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
        }
    }

    public struct GetAutomationExecutionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated.
        public var automationExecutionId: String = ""

        public init() {}

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let automationExecutionId = dictionary["AutomationExecutionId"] as? String else { throw InitializableError.missingRequiredParam("AutomationExecutionId") }
            self.automationExecutionId = automationExecutionId
        }
    }

    public struct Parameter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of parameter. Valid values include the following: String, String list, Secure string.
        public var type: String? = nil
        /// The parameter value.
        public var value: String? = nil
        /// The name of the parameter.
        public var name: String? = nil

        public init() {}

        public init(type: String? = nil, value: String? = nil, name: String? = nil) {
            self.type = type
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.type = dictionary["Type"] as? String
            self.value = dictionary["Value"] as? String
            self.name = dictionary["Name"] as? String
        }
    }

    public struct CreateActivationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID number generated by the system when it processed the activation. The activation ID functions like a user name.
        public var activationId: String? = nil
        /// The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID. 
        public var activationCode: String? = nil

        public init() {}

        public init(activationId: String? = nil, activationCode: String? = nil) {
            self.activationId = activationId
            self.activationCode = activationCode
        }

        public init(dictionary: [String: Any]) throws {
            self.activationId = dictionary["ActivationId"] as? String
            self.activationCode = dictionary["ActivationCode"] as? String
        }
    }

    public struct DescribeMaintenanceWindowExecutionTasksResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the task executions.
        public var windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskIdentities = windowExecutionTaskIdentities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let windowExecutionTaskIdentities = dictionary["WindowExecutionTaskIdentities"] as? [[String: Any]] {
                self.windowExecutionTaskIdentities = try windowExecutionTaskIdentities.map({ try MaintenanceWindowExecutionTaskIdentity(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeInstanceAssociationsStatusRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The instance IDs for which you want association status information.
        public var instanceId: String = ""
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct PutParameterResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListDocumentVersionsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The document versions.
        public var documentVersions: [DocumentVersionInfo]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(documentVersions: [DocumentVersionInfo]? = nil, nextToken: String? = nil) {
            self.documentVersions = documentVersions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let documentVersions = dictionary["DocumentVersions"] as? [[String: Any]] {
                self.documentVersions = try documentVersions.map({ try DocumentVersionInfo(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ListInventoryEntriesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        public var filters: [InventoryFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The instance ID for which you want inventory information.
        public var instanceId: String = ""
        /// The type of inventory item for which you want information.
        public var typeName: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, filters: [InventoryFilter]? = nil, nextToken: String? = nil, instanceId: String, typeName: String) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.typeName = typeName
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["MaxResults"] as? Int32
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try InventoryFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let typeName = dictionary["TypeName"] as? String else { throw InitializableError.missingRequiredParam("TypeName") }
            self.typeName = typeName
        }
    }

    public struct UpdateAssociationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An Amazon S3 bucket where you want to store the results of this request.  "{ \"S3Location\": { \"OutputS3Region\": \"&lt;region&gt;\", \"OutputS3BucketName\": \"bucket name\", \"OutputS3KeyPrefix\": \"folder name\" } }" 
        public var outputLocation: InstanceAssociationOutputLocation? = nil
        /// The ID of the association you want to update. 
        public var associationId: String = ""
        /// The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}
        public var parameters: [String: [String]]? = nil
        /// The cron expression used to schedule the association that you want to update. Supported expressions are every half, 1, 2, 4, 8 or 12 hour(s); every specified day and time of the week. For example: cron(0 0/30 * 1/1 * ? *) to run every thirty minutes; cron(0 0 0/4 1/1 * ? *) to run every four hours; and cron(0 0 10 ? * SUN *) to run every Sunday at 10 a.m.
        public var scheduleExpression: String? = nil
        /// The document version you want update for the association. 
        public var documentVersion: String? = nil

        public init() {}

        public init(outputLocation: InstanceAssociationOutputLocation? = nil, associationId: String, parameters: [String: [String]]? = nil, scheduleExpression: String? = nil, documentVersion: String? = nil) {
            self.outputLocation = outputLocation
            self.associationId = associationId
            self.parameters = parameters
            self.scheduleExpression = scheduleExpression
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            if let outputLocation = dictionary["OutputLocation"] as? [String: Any] { self.outputLocation = try Ssm.InstanceAssociationOutputLocation(dictionary: outputLocation) }
            guard let associationId = dictionary["AssociationId"] as? String else { throw InitializableError.missingRequiredParam("AssociationId") }
            self.associationId = associationId
            if let parameters = dictionary["Parameters"] as? [String: Any] {
                var parametersDict: [String: [String]] = [:]
                for (key, value) in parameters {
                    guard let parameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    parametersDict[key] = parameterValueList
                }
                self.parameters = parametersDict
            }
            self.scheduleExpression = dictionary["ScheduleExpression"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct GetCommandInvocationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Required) The parent command ID of the invocation plugin.
        public var commandId: String = ""
        /// (Optional) The name of the plugin for which you want detailed results. If the SSM document contains only one plugin, the name can be omitted and the details will be returned.
        public var pluginName: String? = nil
        /// (Required) The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        public var instanceId: String = ""

        public init() {}

        public init(commandId: String, pluginName: String? = nil, instanceId: String) {
            self.commandId = commandId
            self.pluginName = pluginName
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let commandId = dictionary["CommandId"] as? String else { throw InitializableError.missingRequiredParam("CommandId") }
            self.commandId = commandId
            self.pluginName = dictionary["PluginName"] as? String
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
        }
    }

    public struct MaintenanceWindowExecutionTaskInvocationIdentity: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the invocation started.
        public var startTime: Date? = nil
        /// The status of the task invocation.
        public var status: String? = nil
        /// The ID of the Maintenance Window execution that ran the task.
        public var windowExecutionId: String? = nil
        /// The ID of the task invocation.
        public var invocationId: String? = nil
        /// The parameters that were provided for the invocation when it was executed.
        public var parameters: String? = nil
        /// The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID.
        public var executionId: String? = nil
        /// The time the invocation finished.
        public var endTime: Date? = nil
        /// The ID of the target definition in this Maintenance Window the invocation was performed for.
        public var windowTargetId: String? = nil
        /// The ID of the specific task execution in the Maintenance Window execution.
        public var taskExecutionId: String? = nil
        /// The details explaining the status of the task invocation. Only available for certain Status values. 
        public var statusDetails: String? = nil
        /// User-provided value that was specified when the target was registered with the Maintenance Window. This was also included in any CloudWatch events raised during the task invocation.
        public var ownerInformation: String? = nil

        public init() {}

        public init(startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, invocationId: String? = nil, parameters: String? = nil, executionId: String? = nil, endTime: Date? = nil, windowTargetId: String? = nil, taskExecutionId: String? = nil, statusDetails: String? = nil, ownerInformation: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.invocationId = invocationId
            self.parameters = parameters
            self.executionId = executionId
            self.endTime = endTime
            self.windowTargetId = windowTargetId
            self.taskExecutionId = taskExecutionId
            self.statusDetails = statusDetails
            self.ownerInformation = ownerInformation
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.status = dictionary["Status"] as? String
            self.windowExecutionId = dictionary["WindowExecutionId"] as? String
            self.invocationId = dictionary["InvocationId"] as? String
            self.parameters = dictionary["Parameters"] as? String
            self.executionId = dictionary["ExecutionId"] as? String
            self.endTime = dictionary["EndTime"] as? Date
            self.windowTargetId = dictionary["WindowTargetId"] as? String
            self.taskExecutionId = dictionary["TaskExecutionId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
            self.ownerInformation = dictionary["OwnerInformation"] as? String
        }
    }

    public struct DeleteAssociationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateDocumentDefaultVersionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of a custom document that you want to set as the default version.
        public var description: DocumentDefaultVersionDescription? = nil

        public init() {}

        public init(description: DocumentDefaultVersionDescription? = nil) {
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let description = dictionary["Description"] as? [String: Any] { self.description = try Ssm.DocumentDefaultVersionDescription(dictionary: description) }
        }
    }

    public struct CreateAssociationBatchResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the associations that succeeded.
        public var successful: [AssociationDescription]? = nil
        /// Information about the associations that failed.
        public var failed: [FailedCreateAssociation]? = nil

        public init() {}

        public init(successful: [AssociationDescription]? = nil, failed: [FailedCreateAssociation]? = nil) {
            self.successful = successful
            self.failed = failed
        }

        public init(dictionary: [String: Any]) throws {
            if let successful = dictionary["Successful"] as? [[String: Any]] {
                self.successful = try successful.map({ try AssociationDescription(dictionary: $0) })
            }
            if let failed = dictionary["Failed"] as? [[String: Any]] {
                self.failed = try failed.map({ try FailedCreateAssociation(dictionary: $0) })
            }
        }
    }

    public struct InstancePatchState: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of patches not specified in the patch baseline that are installed on the instance.
        public var installedOtherCount: Int32? = nil
        /// The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install.
        public var failedCount: Int32? = nil
        /// The time the most recent patching operation completed on the instance.
        public var operationEndTime: Date = Date()
        /// The name of the patch group the managed instance belongs to.
        public var patchGroup: String = ""
        /// The ID of the patch baseline used to patch the instance.
        public var baselineId: String = ""
        /// The number of patches from the patch baseline that are applicable for the instance but aren’t currently installed.
        public var missingCount: Int32? = nil
        /// The ID of the managed instance the high-level patch compliance information was collected for.
        public var instanceId: String = ""
        /// The type of patching operation that was performed: SCAN (assess patch compliance state) or INSTALL (install missing patches).
        public var operation: String = ""
        /// The number of patches from the patch baseline that aren’t applicable for the instance and hence aren’t installed on the instance.
        public var notApplicableCount: Int32? = nil
        /// The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected.
        public var snapshotId: String? = nil
        /// The number of patches from the patch baseline that are installed on the instance.
        public var installedCount: Int32? = nil
        /// The time the most recent patching operation was started on the instance.
        public var operationStartTime: Date = Date()
        /// Placeholder information, this field will always be empty in the current release of the service.
        public var ownerInformation: String? = nil

        public init() {}

        public init(installedOtherCount: Int32? = nil, failedCount: Int32? = nil, operationEndTime: Date, patchGroup: String, baselineId: String, missingCount: Int32? = nil, instanceId: String, operation: String, notApplicableCount: Int32? = nil, snapshotId: String? = nil, installedCount: Int32? = nil, operationStartTime: Date, ownerInformation: String? = nil) {
            self.installedOtherCount = installedOtherCount
            self.failedCount = failedCount
            self.operationEndTime = operationEndTime
            self.patchGroup = patchGroup
            self.baselineId = baselineId
            self.missingCount = missingCount
            self.instanceId = instanceId
            self.operation = operation
            self.notApplicableCount = notApplicableCount
            self.snapshotId = snapshotId
            self.installedCount = installedCount
            self.operationStartTime = operationStartTime
            self.ownerInformation = ownerInformation
        }

        public init(dictionary: [String: Any]) throws {
            self.installedOtherCount = dictionary["InstalledOtherCount"] as? Int32
            self.failedCount = dictionary["FailedCount"] as? Int32
            guard let operationEndTime = dictionary["OperationEndTime"] as? Date else { throw InitializableError.missingRequiredParam("OperationEndTime") }
            self.operationEndTime = operationEndTime
            guard let patchGroup = dictionary["PatchGroup"] as? String else { throw InitializableError.missingRequiredParam("PatchGroup") }
            self.patchGroup = patchGroup
            guard let baselineId = dictionary["BaselineId"] as? String else { throw InitializableError.missingRequiredParam("BaselineId") }
            self.baselineId = baselineId
            self.missingCount = dictionary["MissingCount"] as? Int32
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let operation = dictionary["Operation"] as? String else { throw InitializableError.missingRequiredParam("Operation") }
            self.operation = operation
            self.notApplicableCount = dictionary["NotApplicableCount"] as? Int32
            self.snapshotId = dictionary["SnapshotId"] as? String
            self.installedCount = dictionary["InstalledCount"] as? Int32
            guard let operationStartTime = dictionary["OperationStartTime"] as? Date else { throw InitializableError.missingRequiredParam("OperationStartTime") }
            self.operationStartTime = operationStartTime
            self.ownerInformation = dictionary["OwnerInformation"] as? String
        }
    }

    public struct MaintenanceWindowExecutionTaskIdentity: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the task execution started.
        public var startTime: Date? = nil
        /// The status of the task execution.
        public var status: String? = nil
        /// The ID of the Maintenance Window execution that ran the task.
        public var windowExecutionId: String? = nil
        /// The ARN of the executed task.
        public var taskArn: String? = nil
        /// The type of executed task.
        public var taskType: String? = nil
        /// The time the task execution finished.
        public var endTime: Date? = nil
        /// The ID of the specific task execution in the Maintenance Window execution.
        public var taskExecutionId: String? = nil
        /// The details explaining the status of the task execution. Only available for certain status values.
        public var statusDetails: String? = nil

        public init() {}

        public init(startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, taskArn: String? = nil, taskType: String? = nil, endTime: Date? = nil, taskExecutionId: String? = nil, statusDetails: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.taskArn = taskArn
            self.taskType = taskType
            self.endTime = endTime
            self.taskExecutionId = taskExecutionId
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.status = dictionary["Status"] as? String
            self.windowExecutionId = dictionary["WindowExecutionId"] as? String
            self.taskArn = dictionary["TaskArn"] as? String
            self.taskType = dictionary["TaskType"] as? String
            self.endTime = dictionary["EndTime"] as? Date
            self.taskExecutionId = dictionary["TaskExecutionId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct MaintenanceWindowExecution: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time the execution finished.
        public var endTime: Date? = nil
        /// The ID of the Maintenance Window.
        public var windowId: String? = nil
        /// The time the execution started.
        public var startTime: Date? = nil
        /// The status of the execution.
        public var status: String? = nil
        /// The ID of the Maintenance Window execution.
        public var windowExecutionId: String? = nil
        /// The details explaining the Status. Only available for certain status values.
        public var statusDetails: String? = nil

        public init() {}

        public init(endTime: Date? = nil, windowId: String? = nil, startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, statusDetails: String? = nil) {
            self.endTime = endTime
            self.windowId = windowId
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.endTime = dictionary["EndTime"] as? Date
            self.windowId = dictionary["WindowId"] as? String
            self.startTime = dictionary["StartTime"] as? Date
            self.status = dictionary["Status"] as? String
            self.windowExecutionId = dictionary["WindowExecutionId"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct PutInventoryResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListDocumentsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The names of the SSM documents.
        public var documentIdentifiers: [DocumentIdentifier]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(documentIdentifiers: [DocumentIdentifier]? = nil, nextToken: String? = nil) {
            self.documentIdentifiers = documentIdentifiers
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let documentIdentifiers = dictionary["DocumentIdentifiers"] as? [[String: Any]] {
                self.documentIdentifiers = try documentIdentifiers.map({ try DocumentIdentifier(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeAvailablePatchesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// Filters used to scope down the returned patches.
        public var filters: [PatchOrchestratorFilter]? = nil
        /// The maximum number of patches to return (per page).
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [PatchOrchestratorFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try PatchOrchestratorFilter(dictionary: $0) })
            }
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of tags.
        public var tagList: [Tag]? = nil

        public init() {}

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        public init(dictionary: [String: Any]) throws {
            if let tagList = dictionary["TagList"] as? [[String: Any]] {
                self.tagList = try tagList.map({ try Tag(dictionary: $0) })
            }
        }
    }

    public struct StepExecution: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated.
        public var executionEndTime: Date? = nil
        /// The name of this execution step.
        public var stepName: String? = nil
        /// The action this step performs. The action determines the behavior of the step.
        public var action: String? = nil
        /// Fully-resolved values passed into the step before execution.
        public var inputs: [String: String]? = nil
        /// If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated.
        public var executionStartTime: Date? = nil
        /// Returned values from the execution of the step.
        public var outputs: [String: [String]]? = nil
        /// The response code returned by the execution of the step.
        public var responseCode: String? = nil
        /// If a step failed, this message explains why the execution failed.
        public var failureMessage: String? = nil
        /// The execution status for this step. Valid values include: Pending, InProgress, Success, Cancelled, Failed, and TimedOut.
        public var stepStatus: String? = nil
        /// A message associated with the response code for an execution.
        public var response: String? = nil

        public init() {}

        public init(executionEndTime: Date? = nil, stepName: String? = nil, action: String? = nil, inputs: [String: String]? = nil, executionStartTime: Date? = nil, outputs: [String: [String]]? = nil, responseCode: String? = nil, failureMessage: String? = nil, stepStatus: String? = nil, response: String? = nil) {
            self.executionEndTime = executionEndTime
            self.stepName = stepName
            self.action = action
            self.inputs = inputs
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.responseCode = responseCode
            self.failureMessage = failureMessage
            self.stepStatus = stepStatus
            self.response = response
        }

        public init(dictionary: [String: Any]) throws {
            self.executionEndTime = dictionary["ExecutionEndTime"] as? Date
            self.stepName = dictionary["StepName"] as? String
            self.action = dictionary["Action"] as? String
            if let inputs = dictionary["Inputs"] as? [String: String] {
                self.inputs = inputs
            }
            self.executionStartTime = dictionary["ExecutionStartTime"] as? Date
            if let outputs = dictionary["Outputs"] as? [String: Any] {
                var outputsDict: [String: [String]] = [:]
                for (key, value) in outputs {
                    guard let automationParameterValueList = value as? [String] else { throw InitializableError.convertingError }
                    outputsDict[key] = automationParameterValueList
                }
                self.outputs = outputsDict
            }
            self.responseCode = dictionary["ResponseCode"] as? String
            self.failureMessage = dictionary["FailureMessage"] as? String
            self.stepStatus = dictionary["StepStatus"] as? String
            self.response = dictionary["Response"] as? String
        }
    }

    public struct AssociationOverview: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The status of the association. Status can be: Pending, Success, or Failed.
        public var status: String? = nil
        /// Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status.
        public var associationStatusAggregatedCount: [String: Int32]? = nil
        /// A detailed status of the association.
        public var detailedStatus: String? = nil

        public init() {}

        public init(status: String? = nil, associationStatusAggregatedCount: [String: Int32]? = nil, detailedStatus: String? = nil) {
            self.status = status
            self.associationStatusAggregatedCount = associationStatusAggregatedCount
            self.detailedStatus = detailedStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            if let associationStatusAggregatedCount = dictionary["AssociationStatusAggregatedCount"] as? [String: Int32] {
                self.associationStatusAggregatedCount = associationStatusAggregatedCount
            }
            self.detailedStatus = dictionary["DetailedStatus"] as? String
        }
    }

    public struct GetMaintenanceWindowExecutionTaskResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The priority of the task.
        public var priority: Int32? = nil
        /// The role that was assumed when executing the task.
        public var serviceRole: String? = nil
        /// The ID of the specific task execution in the Maintenance Window task that was retrieved.
        public var taskExecutionId: String? = nil
        /// The time the task execution started.
        public var startTime: Date? = nil
        /// The ID of the Maintenance Window execution that includes the task.
        public var windowExecutionId: String? = nil
        /// The ARN of the executed task.
        public var taskArn: String? = nil
        /// The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.
        public var maxErrors: String? = nil
        /// The status of the task.
        public var status: String? = nil
        /// The parameters passed to the task when it was executed. The map has the following format: Key: string, 1 ≤ length ≤ 255 Value: an array of strings where each string 1 ≤ length ≤ 255
        public var taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]? = nil
        /// The time the task execution completed.
        public var endTime: Date? = nil
        /// The defined maximum number of task executions that could be run in parallel.
        public var maxConcurrency: String? = nil
        /// The type of task executed.
        public var type: String? = nil
        /// The details explaining the Status. Only available for certain status values.
        public var statusDetails: String? = nil

        public init() {}

        public init(priority: Int32? = nil, serviceRole: String? = nil, taskExecutionId: String? = nil, startTime: Date? = nil, windowExecutionId: String? = nil, taskArn: String? = nil, maxErrors: String? = nil, status: String? = nil, taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]? = nil, endTime: Date? = nil, maxConcurrency: String? = nil, type: String? = nil, statusDetails: String? = nil) {
            self.priority = priority
            self.serviceRole = serviceRole
            self.taskExecutionId = taskExecutionId
            self.startTime = startTime
            self.windowExecutionId = windowExecutionId
            self.taskArn = taskArn
            self.maxErrors = maxErrors
            self.status = status
            self.taskParameters = taskParameters
            self.endTime = endTime
            self.maxConcurrency = maxConcurrency
            self.type = type
            self.statusDetails = statusDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.priority = dictionary["Priority"] as? Int32
            self.serviceRole = dictionary["ServiceRole"] as? String
            self.taskExecutionId = dictionary["TaskExecutionId"] as? String
            self.startTime = dictionary["StartTime"] as? Date
            self.windowExecutionId = dictionary["WindowExecutionId"] as? String
            self.taskArn = dictionary["TaskArn"] as? String
            self.maxErrors = dictionary["MaxErrors"] as? String
            self.status = dictionary["Status"] as? String
            if let taskParameters = dictionary["TaskParameters"] as? [[String: [String: Any]]] {
                var taskParametersList: [[String: MaintenanceWindowTaskParameterValueExpression]] = []
                var maintenanceWindowTaskParameterValueExpressionDict: [String: MaintenanceWindowTaskParameterValueExpression] = [:]
                for item in taskParameters {
                    for (key, value) in item {
                        maintenanceWindowTaskParameterValueExpressionDict[key] = try MaintenanceWindowTaskParameterValueExpression(dictionary: value)
                    }
                    taskParametersList.append(maintenanceWindowTaskParameterValueExpressionDict)
                }
                self.taskParameters = taskParametersList
            }
            self.endTime = dictionary["EndTime"] as? Date
            self.maxConcurrency = dictionary["MaxConcurrency"] as? String
            self.type = dictionary["Type"] as? String
            self.statusDetails = dictionary["StatusDetails"] as? String
        }
    }

    public struct CreateDocumentResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the SSM document.
        public var documentDescription: DocumentDescription? = nil

        public init() {}

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let documentDescription = dictionary["DocumentDescription"] as? [String: Any] { self.documentDescription = try Ssm.DocumentDescription(dictionary: documentDescription) }
        }
    }

    public struct DescribeMaintenanceWindowExecutionsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the Maintenance Windows execution.
        public var windowExecutions: [MaintenanceWindowExecution]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil

        public init() {}

        public init(windowExecutions: [MaintenanceWindowExecution]? = nil, nextToken: String? = nil) {
            self.windowExecutions = windowExecutions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let windowExecutions = dictionary["WindowExecutions"] as? [[String: Any]] {
                self.windowExecutions = try windowExecutions.map({ try MaintenanceWindowExecution(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ListCommandInvocationsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) If set this returns the response of the command executions and any command output. By default this is set to False. 
        public var details: Bool? = nil
        /// (Optional) One or more filters. Use a filter to return a more specific list of results.
        public var filters: [CommandFilter]? = nil
        /// (Optional) The invocations for a specific command ID.
        public var commandId: String? = nil
        /// (Optional) The command execution details for a specific instance ID.
        public var instanceId: String? = nil
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(details: Bool? = nil, filters: [CommandFilter]? = nil, commandId: String? = nil, instanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.details = details
            self.filters = filters
            self.commandId = commandId
            self.instanceId = instanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["Details"] as? Bool
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try CommandFilter(dictionary: $0) })
            }
            self.commandId = dictionary["CommandId"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetPatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the retrieved patch baseline.
        public var baselineId: String? = nil
        /// A list of explicitly approved patches for the baseline.
        public var approvedPatches: [String]? = nil
        /// The date the patch baseline was last modified.
        public var modifiedDate: Date? = nil
        /// The name of the patch baseline.
        public var name: String? = nil
        /// A list of explicitly rejected patches for the baseline.
        public var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        public var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        public var globalFilters: PatchFilterGroup? = nil
        /// The date the patch baseline was created.
        public var createdDate: Date? = nil
        /// Patch groups included in the patch baseline.
        public var patchGroups: [String]? = nil
        /// A description of the patch baseline.
        public var description: String? = nil

        public init() {}

        public init(baselineId: String? = nil, approvedPatches: [String]? = nil, modifiedDate: Date? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, createdDate: Date? = nil, patchGroups: [String]? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.modifiedDate = modifiedDate
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.createdDate = createdDate
            self.patchGroups = patchGroups
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
            if let approvedPatches = dictionary["ApprovedPatches"] as? [String] {
                self.approvedPatches = approvedPatches
            }
            self.modifiedDate = dictionary["ModifiedDate"] as? Date
            self.name = dictionary["Name"] as? String
            if let rejectedPatches = dictionary["RejectedPatches"] as? [String] {
                self.rejectedPatches = rejectedPatches
            }
            if let approvalRules = dictionary["ApprovalRules"] as? [String: Any] { self.approvalRules = try Ssm.PatchRuleGroup(dictionary: approvalRules) }
            if let globalFilters = dictionary["GlobalFilters"] as? [String: Any] { self.globalFilters = try Ssm.PatchFilterGroup(dictionary: globalFilters) }
            self.createdDate = dictionary["CreatedDate"] as? Date
            if let patchGroups = dictionary["PatchGroups"] as? [String] {
                self.patchGroups = patchGroups
            }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CreateAssociationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the association.
        public var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let associationDescription = dictionary["AssociationDescription"] as? [String: Any] { self.associationDescription = try Ssm.AssociationDescription(dictionary: associationDescription) }
        }
    }

    public struct DescribeMaintenanceWindowsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// Information about the Maintenance Windows.
        public var windowIdentities: [MaintenanceWindowIdentity]? = nil

        public init() {}

        public init(nextToken: String? = nil, windowIdentities: [MaintenanceWindowIdentity]? = nil) {
            self.nextToken = nextToken
            self.windowIdentities = windowIdentities
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let windowIdentities = dictionary["WindowIdentities"] as? [[String: Any]] {
                self.windowIdentities = try windowIdentities.map({ try MaintenanceWindowIdentity(dictionary: $0) })
            }
        }
    }

    public struct DescribeAvailablePatchesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// An array of patches. Each entry in the array is a patch structure.
        public var patches: [Patch]? = nil

        public init() {}

        public init(nextToken: String? = nil, patches: [Patch]? = nil) {
            self.nextToken = nextToken
            self.patches = patches
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let patches = dictionary["Patches"] as? [[String: Any]] {
                self.patches = try patches.map({ try Patch(dictionary: $0) })
            }
        }
    }

    public struct InventoryResultEntity: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID. 
        public var id: String? = nil
        /// The data section in the inventory result entity json.
        public var data: [String: InventoryResultItem]? = nil

        public init() {}

        public init(id: String? = nil, data: [String: InventoryResultItem]? = nil) {
            self.id = id
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            self.id = dictionary["Id"] as? String
            if let data = dictionary["Data"] as? [String: Any] {
                var dataDict: [String: InventoryResultItem] = [:]
                for (key, value) in data {
                    guard let inventoryResultItemDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    dataDict[key] = try InventoryResultItem(dictionary: inventoryResultItemDict)
                }
                self.data = dataDict
            }
        }
    }

    public struct UpdateMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window to update.
        public var windowId: String = ""
        /// The name of the Maintenance Window.
        public var name: String? = nil
        /// Whether the Maintenance Window is enabled.
        public var enabled: Bool? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public var allowUnassociatedTargets: Bool? = nil
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public var schedule: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        public var duration: Int32? = nil

        public init() {}

        public init(windowId: String, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil) {
            self.windowId = windowId
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
            self.name = dictionary["Name"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
            self.allowUnassociatedTargets = dictionary["AllowUnassociatedTargets"] as? Bool
            self.schedule = dictionary["Schedule"] as? String
            self.cutoff = dictionary["Cutoff"] as? Int32
            self.duration = dictionary["Duration"] as? Int32
        }
    }

    public struct DescribeParametersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        public var filters: [ParametersFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [ParametersFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try ParametersFilter(dictionary: $0) })
            }
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct InstancePatchStateFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan.
        public var type: String = ""
        /// The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount.
        public var key: String = ""
        /// The value for the filter, must be an integer greater than or equal to 0.
        public var values: [String] = []

        public init() {}

        public init(type: String, key: String, values: [String]) {
            self.type = type
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            guard let type = dictionary["Type"] as? String else { throw InitializableError.missingRequiredParam("Type") }
            self.type = type
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let values = dictionary["Values"] as? [String] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = values
        }
    }

    public struct GetDocumentResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The contents of the SSM document.
        public var content: String? = nil
        /// The document type.
        public var documentType: String? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The document version.
        public var documentVersion: String? = nil

        public init() {}

        public init(content: String? = nil, documentType: String? = nil, name: String? = nil, documentVersion: String? = nil) {
            self.content = content
            self.documentType = documentType
            self.name = name
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.content = dictionary["Content"] as? String
            self.documentType = dictionary["DocumentType"] as? String
            self.name = dictionary["Name"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

    public struct UpdateManagedInstanceRoleRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the managed instance where you want to update the role.
        public var instanceId: String = ""
        /// The IAM role you want to assign or change.
        public var iamRole: String = ""

        public init() {}

        public init(instanceId: String, iamRole: String) {
            self.instanceId = instanceId
            self.iamRole = iamRole
        }

        public init(dictionary: [String: Any]) throws {
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let iamRole = dictionary["IamRole"] as? String else { throw InitializableError.missingRequiredParam("IamRole") }
            self.iamRole = iamRole
        }
    }

    public struct PatchRule: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The patch filter group that defines the criteria for the rule.
        public var patchFilterGroup: PatchFilterGroup = PatchFilterGroup()
        /// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
        public var approveAfterDays: Int32 = 0

        public init() {}

        public init(patchFilterGroup: PatchFilterGroup, approveAfterDays: Int32) {
            self.patchFilterGroup = patchFilterGroup
            self.approveAfterDays = approveAfterDays
        }

        public init(dictionary: [String: Any]) throws {
            guard let patchFilterGroup = dictionary["PatchFilterGroup"] as? [String: Any] else { throw InitializableError.missingRequiredParam("PatchFilterGroup") }
            self.patchFilterGroup = try Ssm.PatchFilterGroup(dictionary: patchFilterGroup)
            guard let approveAfterDays = dictionary["ApproveAfterDays"] as? Int32 else { throw InitializableError.missingRequiredParam("ApproveAfterDays") }
            self.approveAfterDays = approveAfterDays
        }
    }

    public struct DeregisterPatchBaselineForPatchGroupResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the patch baseline the patch group was deregistered from.
        public var baselineId: String? = nil
        /// The name of the patch group deregistered from the patch baseline.
        public var patchGroup: String? = nil

        public init() {}

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
            self.patchGroup = dictionary["PatchGroup"] as? String
        }
    }

    public struct GetAutomationExecutionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Detailed information about the current state of an automation execution.
        public var automationExecution: AutomationExecution? = nil

        public init() {}

        public init(automationExecution: AutomationExecution? = nil) {
            self.automationExecution = automationExecution
        }

        public init(dictionary: [String: Any]) throws {
            if let automationExecution = dictionary["AutomationExecution"] as? [String: Any] { self.automationExecution = try Ssm.AutomationExecution(dictionary: automationExecution) }
        }
    }

    public struct DescribeEffectiveInstanceAssociationsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// The associations for the requested instance.
        public var associations: [InstanceAssociation]? = nil

        public init() {}

        public init(nextToken: String? = nil, associations: [InstanceAssociation]? = nil) {
            self.nextToken = nextToken
            self.associations = associations
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let associations = dictionary["Associations"] as? [[String: Any]] {
                self.associations = try associations.map({ try InstanceAssociation(dictionary: $0) })
            }
        }
    }

    public struct UpdateAssociationStatusResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the association.
        public var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let associationDescription = dictionary["AssociationDescription"] as? [String: Any] { self.associationDescription = try Ssm.AssociationDescription(dictionary: associationDescription) }
        }
    }

    public struct InstanceAssociationOutputUrl: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The URL of Amazon S3 bucket where you want to store the results of this request.
        public var s3OutputUrl: S3OutputUrl? = nil

        public init() {}

        public init(s3OutputUrl: S3OutputUrl? = nil) {
            self.s3OutputUrl = s3OutputUrl
        }

        public init(dictionary: [String: Any]) throws {
            if let s3OutputUrl = dictionary["S3OutputUrl"] as? [String: Any] { self.s3OutputUrl = try Ssm.S3OutputUrl(dictionary: s3OutputUrl) }
        }
    }

    public struct InstanceAssociationStatusInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Status information about the instance association.
        public var status: String? = nil
        /// The association ID.
        public var associationId: String? = nil
        /// The instance ID where the association was created.
        public var instanceId: String? = nil
        /// The name of the association.
        public var name: String? = nil
        /// The association document verions.
        public var documentVersion: String? = nil
        /// The date the instance association executed. 
        public var executionDate: Date? = nil
        /// Summary information about association execution.
        public var executionSummary: String? = nil
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        public var outputUrl: InstanceAssociationOutputUrl? = nil
        /// An error code returned by the request to create the association.
        public var errorCode: String? = nil
        /// Detailed status information about the instance association.
        public var detailedStatus: String? = nil

        public init() {}

        public init(status: String? = nil, associationId: String? = nil, instanceId: String? = nil, name: String? = nil, documentVersion: String? = nil, executionDate: Date? = nil, executionSummary: String? = nil, outputUrl: InstanceAssociationOutputUrl? = nil, errorCode: String? = nil, detailedStatus: String? = nil) {
            self.status = status
            self.associationId = associationId
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.executionDate = executionDate
            self.executionSummary = executionSummary
            self.outputUrl = outputUrl
            self.errorCode = errorCode
            self.detailedStatus = detailedStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.associationId = dictionary["AssociationId"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.name = dictionary["Name"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
            self.executionDate = dictionary["ExecutionDate"] as? Date
            self.executionSummary = dictionary["ExecutionSummary"] as? String
            if let outputUrl = dictionary["OutputUrl"] as? [String: Any] { self.outputUrl = try Ssm.InstanceAssociationOutputUrl(dictionary: outputUrl) }
            self.errorCode = dictionary["ErrorCode"] as? String
            self.detailedStatus = dictionary["DetailedStatus"] as? String
        }
    }

    public struct S3OutputUrl: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        public var outputUrl: String? = nil

        public init() {}

        public init(outputUrl: String? = nil) {
            self.outputUrl = outputUrl
        }

        public init(dictionary: [String: Any]) throws {
            self.outputUrl = dictionary["OutputUrl"] as? String
        }
    }

    public struct GetMaintenanceWindowExecutionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the Maintenance Window execution that includes the task.
        public var windowExecutionId: String = ""

        public init() {}

        public init(windowExecutionId: String) {
            self.windowExecutionId = windowExecutionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowExecutionId = dictionary["WindowExecutionId"] as? String else { throw InitializableError.missingRequiredParam("WindowExecutionId") }
            self.windowExecutionId = windowExecutionId
        }
    }

    public struct PatchFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The key for the filter (PRODUCT, CLASSIFICATION, MSRC_SEVERITY, PATCH_ID)
        public var key: String = ""
        /// The value for the filter key.
        public var values: [String] = []

        public init() {}

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let values = dictionary["Values"] as? [String] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = values
        }
    }

    public struct GetParametersResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of parameters used by the AWS account.
        public var parameters: [Parameter]? = nil
        /// A list of parameters that are not formatted correctly or do not run when executed.
        public var invalidParameters: [String]? = nil

        public init() {}

        public init(parameters: [Parameter]? = nil, invalidParameters: [String]? = nil) {
            self.parameters = parameters
            self.invalidParameters = invalidParameters
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try Parameter(dictionary: $0) })
            }
            if let invalidParameters = dictionary["InvalidParameters"] as? [String] {
                self.invalidParameters = invalidParameters
            }
        }
    }

    public struct MaintenanceWindowTarget: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Maintenance Window ID where the target is registered.
        public var windowId: String? = nil
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public var targets: [Target]? = nil
        /// The ID of the target.
        public var windowTargetId: String? = nil
        /// The type of target.
        public var resourceType: String? = nil
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public var ownerInformation: String? = nil

        public init() {}

        public init(windowId: String? = nil, targets: [Target]? = nil, windowTargetId: String? = nil, resourceType: String? = nil, ownerInformation: String? = nil) {
            self.windowId = windowId
            self.targets = targets
            self.windowTargetId = windowTargetId
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            self.windowTargetId = dictionary["WindowTargetId"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            self.ownerInformation = dictionary["OwnerInformation"] as? String
        }
    }

    public struct UpdateDocumentDefaultVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of a custom document that you want to set as the default version.
        public var name: String = ""
        /// The version of a custom document that you want to set as the default version.
        public var documentVersion: String = ""

        public init() {}

        public init(name: String, documentVersion: String) {
            self.name = name
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let documentVersion = dictionary["DocumentVersion"] as? String else { throw InitializableError.missingRequiredParam("DocumentVersion") }
            self.documentVersion = documentVersion
        }
    }

    public struct ListAssociationsResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// The associations.
        public var associations: [Association]? = nil

        public init() {}

        public init(nextToken: String? = nil, associations: [Association]? = nil) {
            self.nextToken = nextToken
            self.associations = associations
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let associations = dictionary["Associations"] as? [[String: Any]] {
                self.associations = try associations.map({ try Association(dictionary: $0) })
            }
        }
    }

    public struct DescribeInstancePatchStatesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// The high-level patch state for the requested instances.
        public var instancePatchStates: [InstancePatchState]? = nil

        public init() {}

        public init(nextToken: String? = nil, instancePatchStates: [InstancePatchState]? = nil) {
            self.nextToken = nextToken
            self.instancePatchStates = instancePatchStates
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let instancePatchStates = dictionary["InstancePatchStates"] as? [[String: Any]] {
                self.instancePatchStates = try instancePatchStates.map({ try InstancePatchState(dictionary: $0) })
            }
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The resource ID for which you want to remove tags.
        public var resourceId: String = ""
        /// The type of resource of which you want to remove a tag.
        public var resourceType: String = ""
        /// Tag keys that you want to remove from the specified resource.
        public var tagKeys: [String] = []

        public init() {}

        public init(resourceId: String, resourceType: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let resourceType = dictionary["ResourceType"] as? String else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct S3OutputLocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon S3 bucket subfolder.
        public var outputS3KeyPrefix: String? = nil
        /// The name of the Amazon S3 bucket.
        public var outputS3BucketName: String? = nil
        /// The Amazon S3 region where the association information is stored.
        public var outputS3Region: String? = nil

        public init() {}

        public init(outputS3KeyPrefix: String? = nil, outputS3BucketName: String? = nil, outputS3Region: String? = nil) {
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3BucketName = outputS3BucketName
            self.outputS3Region = outputS3Region
        }

        public init(dictionary: [String: Any]) throws {
            self.outputS3KeyPrefix = dictionary["OutputS3KeyPrefix"] as? String
            self.outputS3BucketName = dictionary["OutputS3BucketName"] as? String
            self.outputS3Region = dictionary["OutputS3Region"] as? String
        }
    }

    public struct GetMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the desired Maintenance Window.
        public var windowId: String = ""

        public init() {}

        public init(windowId: String) {
            self.windowId = windowId
        }

        public init(dictionary: [String: Any]) throws {
            guard let windowId = dictionary["WindowId"] as? String else { throw InitializableError.missingRequiredParam("WindowId") }
            self.windowId = windowId
        }
    }

    public struct UpdateMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the created Maintenance Window.
        public var windowId: String? = nil
        /// The name of the Maintenance Window.
        public var name: String? = nil
        /// Whether the Maintenance Window is enabled.
        public var enabled: Bool? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public var allowUnassociatedTargets: Bool? = nil
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public var schedule: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        public var duration: Int32? = nil

        public init() {}

        public init(windowId: String? = nil, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil) {
            self.windowId = windowId
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
            self.name = dictionary["Name"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
            self.allowUnassociatedTargets = dictionary["AllowUnassociatedTargets"] as? Bool
            self.schedule = dictionary["Schedule"] as? String
            self.cutoff = dictionary["Cutoff"] as? Int32
            self.duration = dictionary["Duration"] as? Int32
        }
    }

    public struct DeleteActivationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the activation that you want to delete.
        public var activationId: String = ""

        public init() {}

        public init(activationId: String) {
            self.activationId = activationId
        }

        public init(dictionary: [String: Any]) throws {
            guard let activationId = dictionary["ActivationId"] as? String else { throw InitializableError.missingRequiredParam("ActivationId") }
            self.activationId = activationId
        }
    }

    public struct PutInventoryRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The inventory items that you want to add or update on instances.
        public var items: [InventoryItem] = []
        /// One or more instance IDs where you want to add or update inventory items.
        public var instanceId: String = ""

        public init() {}

        public init(items: [InventoryItem], instanceId: String) {
            self.items = items
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let items = dictionary["Items"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Items") }
            self.items = try items.map({ try InventoryItem(dictionary: $0) })
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
        }
    }

    public struct DescribeDocumentPermissionResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The account IDs that have permission to use this document. The ID can be either an AWS account or All.
        public var accountIds: [String]? = nil

        public init() {}

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        public init(dictionary: [String: Any]) throws {
            if let accountIds = dictionary["AccountIds"] as? [String] {
                self.accountIds = accountIds
            }
        }
    }

    public struct AssociationFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter.
        public var key: String = ""
        /// The filter value.
        public var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            guard let value = dictionary["value"] as? String else { throw InitializableError.missingRequiredParam("value") }
            self.value = value
        }
    }

    public struct NotificationConfig: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        public var notificationArn: String? = nil
        /// Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. 
        public var notificationType: String? = nil
        /// The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see Monitoring Commands in the Amazon Elastic Compute Cloud User Guide .
        public var notificationEvents: [String]? = nil

        public init() {}

        public init(notificationArn: String? = nil, notificationType: String? = nil, notificationEvents: [String]? = nil) {
            self.notificationArn = notificationArn
            self.notificationType = notificationType
            self.notificationEvents = notificationEvents
        }

        public init(dictionary: [String: Any]) throws {
            self.notificationArn = dictionary["NotificationArn"] as? String
            self.notificationType = dictionary["NotificationType"] as? String
            if let notificationEvents = dictionary["NotificationEvents"] as? [String] {
                self.notificationEvents = notificationEvents
            }
        }
    }

    public struct PutParameterRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the parameter that you want to add to the system
        public var description: String? = nil
        /// The parameter key ID that you want to add to the system.
        public var keyId: String? = nil
        /// The type of parameter that you want to add to the system.
        public var type: String = ""
        /// The name of the parameter that you want to add to the system.
        public var name: String = ""
        /// The parameter value that you want to add to the system.
        public var value: String = ""
        /// Overwrite an existing parameter.
        public var overwrite: Bool? = nil

        public init() {}

        public init(description: String? = nil, keyId: String? = nil, type: String, name: String, value: String, overwrite: Bool? = nil) {
            self.description = description
            self.keyId = keyId
            self.type = type
            self.name = name
            self.value = value
            self.overwrite = overwrite
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            self.keyId = dictionary["KeyId"] as? String
            guard let type = dictionary["Type"] as? String else { throw InitializableError.missingRequiredParam("Type") }
            self.type = type
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            self.overwrite = dictionary["Overwrite"] as? Bool
        }
    }

    public struct PatchBaselineIdentity: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Whether this is the default baseline.
        public var defaultBaseline: Bool? = nil
        /// The ID of the patch baseline.
        public var baselineId: String? = nil
        /// The name of the patch baseline.
        public var baselineName: String? = nil
        /// The description of the patch baseline.
        public var baselineDescription: String? = nil

        public init() {}

        public init(defaultBaseline: Bool? = nil, baselineId: String? = nil, baselineName: String? = nil, baselineDescription: String? = nil) {
            self.defaultBaseline = defaultBaseline
            self.baselineId = baselineId
            self.baselineName = baselineName
            self.baselineDescription = baselineDescription
        }

        public init(dictionary: [String: Any]) throws {
            self.defaultBaseline = dictionary["DefaultBaseline"] as? Bool
            self.baselineId = dictionary["BaselineId"] as? String
            self.baselineName = dictionary["BaselineName"] as? String
            self.baselineDescription = dictionary["BaselineDescription"] as? String
        }
    }

    public struct Association: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date on which the association was last run.
        public var lastExecutionDate: Date? = nil
        /// The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule.
        public var associationId: String? = nil
        /// The ID of the instance.
        public var instanceId: String? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The version of the document used in the association.
        public var documentVersion: String? = nil
        /// The instances targeted by the request to create an association. 
        public var targets: [Target]? = nil
        /// Information about the association.
        public var overview: AssociationOverview? = nil
        /// A cron expression that specifies a schedule when the association runs.
        public var scheduleExpression: String? = nil

        public init() {}

        public init(lastExecutionDate: Date? = nil, associationId: String? = nil, instanceId: String? = nil, name: String? = nil, documentVersion: String? = nil, targets: [Target]? = nil, overview: AssociationOverview? = nil, scheduleExpression: String? = nil) {
            self.lastExecutionDate = lastExecutionDate
            self.associationId = associationId
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.overview = overview
            self.scheduleExpression = scheduleExpression
        }

        public init(dictionary: [String: Any]) throws {
            self.lastExecutionDate = dictionary["LastExecutionDate"] as? Date
            self.associationId = dictionary["AssociationId"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.name = dictionary["Name"] as? String
            self.documentVersion = dictionary["DocumentVersion"] as? String
            if let targets = dictionary["Targets"] as? [[String: Any]] {
                self.targets = try targets.map({ try Target(dictionary: $0) })
            }
            if let overview = dictionary["Overview"] as? [String: Any] { self.overview = try Ssm.AssociationOverview(dictionary: overview) }
            self.scheduleExpression = dictionary["ScheduleExpression"] as? String
        }
    }

    public struct Activation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Identity and Access Management (IAM) role to assign to the managed instance.
        public var iamRole: String? = nil
        /// Whether or not the activation is expired.
        public var expired: Bool? = nil
        /// The maximum number of managed instances that can be registered using this activation.
        public var registrationLimit: Int32? = nil
        /// The date when this activation can no longer be used to register managed instances.
        public var expirationDate: Date? = nil
        /// The ID created by Systems Manager when you submitted the activation.
        public var activationId: String? = nil
        /// The number of managed instances already registered with this activation.
        public var registrationsCount: Int32? = nil
        /// The date the activation was created.
        public var createdDate: Date? = nil
        /// A name for the managed instance when it is created.
        public var defaultInstanceName: String? = nil
        /// A user defined description of the activation.
        public var description: String? = nil

        public init() {}

        public init(iamRole: String? = nil, expired: Bool? = nil, registrationLimit: Int32? = nil, expirationDate: Date? = nil, activationId: String? = nil, registrationsCount: Int32? = nil, createdDate: Date? = nil, defaultInstanceName: String? = nil, description: String? = nil) {
            self.iamRole = iamRole
            self.expired = expired
            self.registrationLimit = registrationLimit
            self.expirationDate = expirationDate
            self.activationId = activationId
            self.registrationsCount = registrationsCount
            self.createdDate = createdDate
            self.defaultInstanceName = defaultInstanceName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.iamRole = dictionary["IamRole"] as? String
            self.expired = dictionary["Expired"] as? Bool
            self.registrationLimit = dictionary["RegistrationLimit"] as? Int32
            self.expirationDate = dictionary["ExpirationDate"] as? Date
            self.activationId = dictionary["ActivationId"] as? String
            self.registrationsCount = dictionary["RegistrationsCount"] as? Int32
            self.createdDate = dictionary["CreatedDate"] as? Date
            self.defaultInstanceName = dictionary["DefaultInstanceName"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct StartAutomationExecutionResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique ID of a newly scheduled automation execution.
        public var automationExecutionId: String? = nil

        public init() {}

        public init(automationExecutionId: String? = nil) {
            self.automationExecutionId = automationExecutionId
        }

        public init(dictionary: [String: Any]) throws {
            self.automationExecutionId = dictionary["AutomationExecutionId"] as? String
        }
    }

    public struct ListDocumentsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        public var documentFilterList: [DocumentFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public var maxResults: Int32? = nil

        public init() {}

        public init(documentFilterList: [DocumentFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.documentFilterList = documentFilterList
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            if let documentFilterList = dictionary["DocumentFilterList"] as? [[String: Any]] {
                self.documentFilterList = try documentFilterList.map({ try DocumentFilter(dictionary: $0) })
            }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ListInventoryEntriesResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time that inventory information was collected for the instance(s).
        public var captureTime: String? = nil
        /// A list of inventory items on the instance(s).
        public var entries: [[String: String]]? = nil
        /// The inventory schema version used by the instance(s).
        public var schemaVersion: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public var nextToken: String? = nil
        /// The instance ID targeted by the request to query inventory information.
        public var instanceId: String? = nil
        /// The type of inventory item returned by the request.
        public var typeName: String? = nil

        public init() {}

        public init(captureTime: String? = nil, entries: [[String: String]]? = nil, schemaVersion: String? = nil, nextToken: String? = nil, instanceId: String? = nil, typeName: String? = nil) {
            self.captureTime = captureTime
            self.entries = entries
            self.schemaVersion = schemaVersion
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.typeName = typeName
        }

        public init(dictionary: [String: Any]) throws {
            self.captureTime = dictionary["CaptureTime"] as? String
            if let entries = dictionary["Entries"] as? [[String: String]] {
                self.entries = entries
            }
            self.schemaVersion = dictionary["SchemaVersion"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.typeName = dictionary["TypeName"] as? String
        }
    }

    public struct DeleteAssociationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the SSM document.
        public var name: String? = nil
        /// The ID of the instance.
        public var instanceId: String? = nil
        /// The association ID that you want to delete.
        public var associationId: String? = nil

        public init() {}

        public init(name: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.associationId = associationId
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.associationId = dictionary["AssociationId"] as? String
        }
    }

    public struct EffectivePatch: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch.
        public var patch: Patch? = nil
        /// The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.
        public var patchStatus: PatchStatus? = nil

        public init() {}

        public init(patch: Patch? = nil, patchStatus: PatchStatus? = nil) {
            self.patch = patch
            self.patchStatus = patchStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let patch = dictionary["Patch"] as? [String: Any] { self.patch = try Ssm.Patch(dictionary: patch) }
            if let patchStatus = dictionary["PatchStatus"] as? [String: Any] { self.patchStatus = try Ssm.PatchStatus(dictionary: patchStatus) }
        }
    }

    public struct DocumentParameter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of parameter. The type can be either “String” or “StringList”.
        public var type: String? = nil
        /// The name of the parameter.
        public var name: String? = nil
        /// If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
        public var defaultValue: String? = nil
        /// A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
        public var description: String? = nil

        public init() {}

        public init(type: String? = nil, name: String? = nil, defaultValue: String? = nil, description: String? = nil) {
            self.type = type
            self.name = name
            self.defaultValue = defaultValue
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.type = dictionary["Type"] as? String
            self.name = dictionary["Name"] as? String
            self.defaultValue = dictionary["DefaultValue"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DeleteParameterRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the parameter to delete.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct StopAutomationExecutionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The execution ID of the Automation to stop.
        public var automationExecutionId: String = ""

        public init() {}

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let automationExecutionId = dictionary["AutomationExecutionId"] as? String else { throw InitializableError.missingRequiredParam("AutomationExecutionId") }
            self.automationExecutionId = automationExecutionId
        }
    }

    public struct DocumentFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the filter.
        public var key: String = ""
        /// The value of the filter.
        public var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            guard let value = dictionary["value"] as? String else { throw InitializableError.missingRequiredParam("value") }
            self.value = value
        }
    }

    public struct GetDefaultPatchBaselineResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the default patch baseline.
        public var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        public init(dictionary: [String: Any]) throws {
            self.baselineId = dictionary["BaselineId"] as? String
        }
    }

    public struct InstanceAssociationOutputLocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An Amazon S3 bucket where you want to store the results of this request.
        public var s3Location: S3OutputLocation? = nil

        public init() {}

        public init(s3Location: S3OutputLocation? = nil) {
            self.s3Location = s3Location
        }

        public init(dictionary: [String: Any]) throws {
            if let s3Location = dictionary["S3Location"] as? [String: Any] { self.s3Location = try Ssm.S3OutputLocation(dictionary: s3Location) }
        }
    }

    public struct RegisterTargetWithMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the target definition in this Maintenance Window.
        public var windowTargetId: String? = nil

        public init() {}

        public init(windowTargetId: String? = nil) {
            self.windowTargetId = windowTargetId
        }

        public init(dictionary: [String: Any]) throws {
            self.windowTargetId = dictionary["WindowTargetId"] as? String
        }
    }

    public struct CreateMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the created Maintenance Window.
        public var windowId: String? = nil

        public init() {}

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

        public init(dictionary: [String: Any]) throws {
            self.windowId = dictionary["WindowId"] as? String
        }
    }

    public struct DocumentVersionInfo: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date the document was created.
        public var createdDate: Date? = nil
        /// The document name.
        public var name: String? = nil
        /// An identifier for the default version of the document.
        public var isDefaultVersion: Bool? = nil
        /// The document version.
        public var documentVersion: String? = nil

        public init() {}

        public init(createdDate: Date? = nil, name: String? = nil, isDefaultVersion: Bool? = nil, documentVersion: String? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.isDefaultVersion = isDefaultVersion
            self.documentVersion = documentVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.createdDate = dictionary["CreatedDate"] as? Date
            self.name = dictionary["Name"] as? String
            self.isDefaultVersion = dictionary["IsDefaultVersion"] as? Bool
            self.documentVersion = dictionary["DocumentVersion"] as? String
        }
    }

}