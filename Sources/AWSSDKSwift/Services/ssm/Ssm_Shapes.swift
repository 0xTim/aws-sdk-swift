// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Ssm {

    public struct DescribePatchBaselinesRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// Each element in the array is a structure containing:  Key: (string, “NAME_PREFIX” or “OWNER”) Value: (array of strings, exactly 1 entry, 1 ≤ length ≤ 255)
        var filters: [PatchOrchestratorFilter]? = nil
        /// The maximum number of patch baselines to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [PatchOrchestratorFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

    }

    public struct DescribeActivationsResult: Serializable, Initializable {
        /// A list of activations for your AWS account.
        var activationList: [Activation]? = nil
        ///  The token for the next set of items to return. Use this token to get the next set of results. 
        var nextToken: String? = nil

        public init() {}

        public init(activationList: [Activation]? = nil, nextToken: String? = nil) {
            self.activationList = activationList
            self.nextToken = nextToken
        }

    }

    public struct DescribeEffectivePatchesForPatchBaselineResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// An array of patches and patch status.
        var effectivePatches: [EffectivePatch]? = nil

        public init() {}

        public init(nextToken: String? = nil, effectivePatches: [EffectivePatch]? = nil) {
            self.nextToken = nextToken
            self.effectivePatches = effectivePatches
        }

    }

    public struct UpdateAssociationStatusRequest: Serializable, Initializable {
        /// The name of the SSM document.
        var name: String = ""
        /// The ID of the instance.
        var instanceId: String = ""
        /// The association status.
        var associationStatus: AssociationStatus = AssociationStatus()

        public init() {}

        public init(name: String, instanceId: String, associationStatus: AssociationStatus) {
            self.name = name
            self.instanceId = instanceId
            self.associationStatus = associationStatus
        }

    }

    public struct DeregisterTargetFromMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the Maintenance Window the target was removed from.
        var windowId: String? = nil
        /// The ID of the removed target definition.
        var windowTargetId: String? = nil

        public init() {}

        public init(windowId: String? = nil, windowTargetId: String? = nil) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

    }

    public struct ParametersFilter: Serializable, Initializable {
        /// The name of the filter.
        var key: String? = nil
        /// The filter values.
        var values: [String] = []

        public init() {}

        public init(key: String? = nil, values: [String]) {
            self.key = key
            self.values = values
        }

    }

    public struct ResultAttribute: Serializable, Initializable {
        /// Name of the inventory item type. Valid value: “AWS:InstanceInformation”. Default Value: “AWS:InstanceInformation”.
        var typeName: String = ""

        public init() {}

        public init(typeName: String) {
            self.typeName = typeName
        }

    }

    public struct DescribePatchGroupsResult: Serializable, Initializable {
        /// Each entry in the array contains: PatchGroup: string (1 ≤ length ≤ 256, Regex: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$) PatchBaselineIdentity: A PatchBaselineIdentity element. 
        var mappings: [PatchGroupPatchBaselineMapping]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(mappings: [PatchGroupPatchBaselineMapping]? = nil, nextToken: String? = nil) {
            self.mappings = mappings
            self.nextToken = nextToken
        }

    }

    public struct RegisterTargetWithMaintenanceWindowRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window the target should be registered with.
        var windowId: String = ""
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        var targets: [Target] = []
        /// User-provided idempotency token.
        var clientToken: String? = nil
        /// The type of target being registered with the Maintenance Window.
        var resourceType: String = ""
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        var ownerInformation: String? = nil

        public init() {}

        public init(windowId: String, targets: [Target], clientToken: String? = nil, resourceType: String, ownerInformation: String? = nil) {
            self.windowId = windowId
            self.targets = targets
            self.clientToken = clientToken
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

    }

    public struct GetDocumentRequest: Serializable, Initializable {
        /// The name of the SSM document.
        var name: String = ""
        /// The document version for which you want information.
        var documentVersion: String? = nil

        public init() {}

        public init(name: String, documentVersion: String? = nil) {
            self.name = name
            self.documentVersion = documentVersion
        }

    }

    public struct DescribeMaintenanceWindowTargetsRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window whose targets should be retrieved.
        var windowId: String = ""
        /// Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation.
        var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ListAssociationsRequest: Serializable, Initializable {
        /// One or more filters. Use a filter to return a more specific list of results.
        var associationFilterList: [AssociationFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(associationFilterList: [AssociationFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.associationFilterList = associationFilterList
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct GetInventorySchemaRequest: Serializable, Initializable {
        /// The type of inventory item to return.
        var typeName: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(typeName: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.typeName = typeName
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct CreatePatchBaselineRequest: Serializable, Initializable {
        /// Caller-provided idempotency token.
        var clientToken: String? = nil
        /// A list of explicitly approved patches for the baseline.
        var approvedPatches: [String]? = nil
        /// The name of the patch baseline.
        var name: String = ""
        /// A list of explicitly rejected patches for the baseline.
        var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        var globalFilters: PatchFilterGroup? = nil
        /// A description of the patch baseline.
        var description: String? = nil

        public init() {}

        public init(clientToken: String? = nil, approvedPatches: [String]? = nil, name: String, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil) {
            self.clientToken = clientToken
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.description = description
        }

    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window execution the task is part of.
        var windowExecutionId: String = ""
        /// The ID of the specific task in the Maintenance Window task that should be retrieved.
        var taskId: String = ""
        /// Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED.
        var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(windowExecutionId: String, taskId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribeInstancePatchesRequest: Serializable, Initializable {
        /// Each entry in the array is a structure containing: Key (string, 1 ≤ length ≤ 128) Values (array of strings 1 ≤ length ≤ 256)
        var filters: [PatchOrchestratorFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The ID of the instance whose patch state information should be retrieved.
        var instanceId: String = ""
        /// The maximum number of patches to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(filters: [PatchOrchestratorFilter]? = nil, nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

    }

    public struct DeregisterTargetFromMaintenanceWindowRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window the target should be removed from.
        var windowId: String = ""
        /// The ID of the target definition to remove.
        var windowTargetId: String = ""

        public init() {}

        public init(windowId: String, windowTargetId: String) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

    }

    public struct DescribeMaintenanceWindowExecutionTasksRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window execution whose task executions should be retrieved.
        var windowExecutionId: String = ""
        /// Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED. 
        var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(windowExecutionId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowExecutionId = windowExecutionId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribeInstancePatchStatesRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The ID of the instance whose patch state information should be retrieved.
        var instanceIds: [String] = []
        /// The maximum number of instances to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceIds: [String], maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.maxResults = maxResults
        }

    }

    public struct SendCommandRequest: Serializable, Initializable {
        /// The IAM role that Systems Manager uses to send notifications. 
        var serviceRoleArn: String? = nil
        /// The name of the S3 bucket where command execution responses should be stored.
        var outputS3BucketName: String? = nil
        /// Configurations for sending notifications.
        var notificationConfig: NotificationConfig? = nil
        /// User-specified information about the command, such as a brief description of what the command should do.
        var comment: String? = nil
        /// (Optional) An array of search criteria that targets instances using a Key;Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call. For more information about how to use Targets, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        var targets: [Target]? = nil
        /// The directory structure within the S3 bucket where the responses should be stored.
        var outputS3KeyPrefix: String? = nil
        /// (Optional) The region where the Amazon Simple Storage Service (Amazon S3) output bucket is located. The default value is the region where Run Command is being called.
        var outputS3Region: String? = nil
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        var documentHashType: String? = nil
        /// Required. The instance IDs where the command should execute. You can specify a maximum of 50 IDs.
        var instanceIds: [String]? = nil
        /// The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like “10” or a percentage like “10%”. The default value is 50. For more information about how to use MaxErrors, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        var maxErrors: String? = nil
        /// The required and optional parameters specified in the SSM document being executed.
        var parameters: [String: [String]]? = nil
        /// Required. The name of the SSM document to execute. This can be an SSM public document or a custom document.
        var documentName: String = ""
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        var documentHash: String? = nil
        /// (Optional) The maximum number of instances that are allowed to execute the command at the same time. You can specify a number such as “10” or a percentage such as “10%”. The default value is 50. For more information about how to use MaxConcurrency, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        var maxConcurrency: String? = nil
        /// If this time is reached and the command has not already started executing, it will not execute.
        var timeoutSeconds: Int32? = nil

        public init() {}

        public init(serviceRoleArn: String? = nil, outputS3BucketName: String? = nil, notificationConfig: NotificationConfig? = nil, comment: String? = nil, targets: [Target]? = nil, outputS3KeyPrefix: String? = nil, outputS3Region: String? = nil, documentHashType: String? = nil, instanceIds: [String]? = nil, maxErrors: String? = nil, parameters: [String: [String]]? = nil, documentName: String, documentHash: String? = nil, maxConcurrency: String? = nil, timeoutSeconds: Int32? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.outputS3BucketName = outputS3BucketName
            self.notificationConfig = notificationConfig
            self.comment = comment
            self.targets = targets
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3Region = outputS3Region
            self.documentHashType = documentHashType
            self.instanceIds = instanceIds
            self.maxErrors = maxErrors
            self.parameters = parameters
            self.documentName = documentName
            self.documentHash = documentHash
            self.maxConcurrency = maxConcurrency
            self.timeoutSeconds = timeoutSeconds
        }

    }

    public struct GetMaintenanceWindowExecutionTaskRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window execution that includes the task.
        var windowExecutionId: String = ""
        /// The ID of the specific task execution in the Maintenance Window task that should be retrieved.
        var taskId: String = ""

        public init() {}

        public init(windowExecutionId: String, taskId: String) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
        }

    }

    public struct CommandPlugin: Serializable, Initializable {
        /// The status of this plugin. You can execute a document with multiple plugins.
        var status: String? = nil
        /// The time the plugin started executing. 
        var responseStartDateTime: Date? = nil
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript   test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;  i-1234567876543 is the instance ID;  awsrunShellScript is the name of the plugin.
        var outputS3BucketName: String? = nil
        /// The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent. 
        var name: String? = nil
        /// Output of the plugin execution.
        var output: String? = nil
        /// The time the plugin stopped executing. Could stop prematurely if, for example, a cancel command was sent. 
        var responseFinishDateTime: Date? = nil
        /// The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty.
        var standardErrorUrl: String? = nil
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If the Amazon S3 bucket for the command was not specified, then this string is empty.
        var standardOutputUrl: String? = nil
        /// The name of the region where the output is stored in Amazon S3.
        var outputS3Region: String? = nil
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript   test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;  i-1234567876543 is the instance ID;  awsrunShellScript is the name of the plugin.
        var outputS3KeyPrefix: String? = nil
        /// A numeric response code generated after executing the plugin. 
        var responseCode: Int32? = nil
        /// A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:   Pending – The command has not been sent to the instance.   In Progress – The command has been sent to the instance but has not reached a terminal state.   Success – The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out – The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command’s MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out – Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed – The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Undeliverable – The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command’s MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated – The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        var statusDetails: String? = nil

        public init() {}

        public init(status: String? = nil, responseStartDateTime: Date? = nil, outputS3BucketName: String? = nil, name: String? = nil, output: String? = nil, responseFinishDateTime: Date? = nil, standardErrorUrl: String? = nil, standardOutputUrl: String? = nil, outputS3Region: String? = nil, outputS3KeyPrefix: String? = nil, responseCode: Int32? = nil, statusDetails: String? = nil) {
            self.status = status
            self.responseStartDateTime = responseStartDateTime
            self.outputS3BucketName = outputS3BucketName
            self.name = name
            self.output = output
            self.responseFinishDateTime = responseFinishDateTime
            self.standardErrorUrl = standardErrorUrl
            self.standardOutputUrl = standardOutputUrl
            self.outputS3Region = outputS3Region
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.responseCode = responseCode
            self.statusDetails = statusDetails
        }

    }

    public struct GetDeployablePatchSnapshotForInstanceResult: Serializable, Initializable {
        /// The user-defined snapshot ID.
        var snapshotId: String? = nil
        /// The ID of the instance.
        var instanceId: String? = nil
        /// A pre-signed Amazon S3 URL that can be used to download the patch snapshot.
        var snapshotDownloadUrl: String? = nil

        public init() {}

        public init(snapshotId: String? = nil, instanceId: String? = nil, snapshotDownloadUrl: String? = nil) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
            self.snapshotDownloadUrl = snapshotDownloadUrl
        }

    }

    public struct DeleteActivationResult: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeParametersResult: Serializable, Initializable {
        /// Parameters returned by the request.
        var parameters: [ParameterMetadata]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(parameters: [ParameterMetadata]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

    }

    public struct DescribeDocumentRequest: Serializable, Initializable {
        /// The name of the SSM document.
        var name: String = ""
        /// The document version for which you want information. Can be a specific version or the default version.
        var documentVersion: String? = nil

        public init() {}

        public init(name: String, documentVersion: String? = nil) {
            self.name = name
            self.documentVersion = documentVersion
        }

    }

    public struct DescribeInstanceAssociationsStatusResult: Serializable, Initializable {
        /// Status information about the association.
        var instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]? = nil, nextToken: String? = nil) {
            self.instanceAssociationStatusInfos = instanceAssociationStatusInfos
            self.nextToken = nextToken
        }

    }

    public struct DeletePatchBaselineRequest: Serializable, Initializable {
        /// The ID of the patch baseline to delete.
        var baselineId: String = ""

        public init() {}

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

    }

    public struct GetInventoryResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// Collection of inventory entities such as a collection of instance inventory. 
        var entities: [InventoryResultEntity]? = nil

        public init() {}

        public init(nextToken: String? = nil, entities: [InventoryResultEntity]? = nil) {
            self.nextToken = nextToken
            self.entities = entities
        }

    }

    public struct DescribeInstancePatchStatesForPatchGroupResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// The high-level patch state for the requested instances. 
        var instancePatchStates: [InstancePatchState]? = nil

        public init() {}

        public init(nextToken: String? = nil, instancePatchStates: [InstancePatchState]? = nil) {
            self.nextToken = nextToken
            self.instancePatchStates = instancePatchStates
        }

    }

    public struct Command: Serializable, Initializable {
        /// Configurations for sending notifications about command status changes. 
        var notificationConfig: NotificationConfig? = nil
        /// The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable.
        var completedCount: Int32? = nil
        /// User-specified information about the command, such as a brief description of what the command should do.
        var comment: String? = nil
        /// An array of search criteria that targets instances using a Key;Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call.
        var targets: [Target]? = nil
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        var outputS3BucketName: String? = nil
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        var outputS3KeyPrefix: String? = nil
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes. 
        var serviceRole: String? = nil
        /// The region where the Amazon Simple Storage Service (Amazon S3) output bucket is located. The default value is the region where Run Command is being called.
        var outputS3Region: String? = nil
        /// The instance IDs against which this command was requested.
        var instanceIds: [String]? = nil
        /// The number of targets for the command.
        var targetCount: Int32? = nil
        /// The status of the command.
        var status: String? = nil
        /// The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 50. For more information about how to use MaxErrors, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        var maxErrors: String? = nil
        /// The date and time the command was requested.
        var requestedDateTime: Date? = nil
        /// The parameter values to be inserted in the SSM document when executing the command.
        var parameters: [String: [String]]? = nil
        /// The name of the SSM document requested for execution.
        var documentName: String? = nil
        /// The maximum number of instances that are allowed to execute the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows). 
        var maxConcurrency: String? = nil
        /// If this time is reached and the command has not already started executing, it will not execute. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.
        var expiresAfter: Date? = nil
        /// The number of targets for which the status is Failed or Execution Timed Out.
        var errorCount: Int32? = nil
        /// A unique identifier for this command.
        var commandId: String? = nil
        /// A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:   Pending – The command has not been sent to any instances.   In Progress – The command has been sent to at least one instance but has not reached a final state on all instances.   Success – The command successfully executed on all invocations. This is a terminal state.   Delivery Timed Out – The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.   Execution Timed Out – The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.   Failed – The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.   Incomplete – The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Rate Exceeded – The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before executing it on any instance. This is a terminal state.  
        var statusDetails: String? = nil

        public init() {}

        public init(notificationConfig: NotificationConfig? = nil, completedCount: Int32? = nil, comment: String? = nil, targets: [Target]? = nil, outputS3BucketName: String? = nil, outputS3KeyPrefix: String? = nil, serviceRole: String? = nil, outputS3Region: String? = nil, instanceIds: [String]? = nil, targetCount: Int32? = nil, status: String? = nil, maxErrors: String? = nil, requestedDateTime: Date? = nil, parameters: [String: [String]]? = nil, documentName: String? = nil, maxConcurrency: String? = nil, expiresAfter: Date? = nil, errorCount: Int32? = nil, commandId: String? = nil, statusDetails: String? = nil) {
            self.notificationConfig = notificationConfig
            self.completedCount = completedCount
            self.comment = comment
            self.targets = targets
            self.outputS3BucketName = outputS3BucketName
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.serviceRole = serviceRole
            self.outputS3Region = outputS3Region
            self.instanceIds = instanceIds
            self.targetCount = targetCount
            self.status = status
            self.maxErrors = maxErrors
            self.requestedDateTime = requestedDateTime
            self.parameters = parameters
            self.documentName = documentName
            self.maxConcurrency = maxConcurrency
            self.expiresAfter = expiresAfter
            self.errorCount = errorCount
            self.commandId = commandId
            self.statusDetails = statusDetails
        }

    }

    public struct CreateAssociationRequest: Serializable, Initializable {
        /// The parameters for the documents runtime configuration. 
        var parameters: [String: [String]]? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The name of the SSM document.
        var name: String = ""
        /// The document version you want to associate with the target(s). Can be a specific version or the default version.
        var documentVersion: String? = nil
        /// The targets (either instances or tags) for the association. Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        var targets: [Target]? = nil
        /// An Amazon S3 bucket where you want to store the output details of the request. For example:  "{ \"S3Location\": { \"OutputS3Region\": \"&lt;region&gt;\", \"OutputS3BucketName\": \"bucket name\", \"OutputS3KeyPrefix\": \"folder name\" } }" 
        var outputLocation: InstanceAssociationOutputLocation? = nil
        /// A cron expression when the association will be applied to the target(s). Supported expressions are every half, 1, 2, 4, 8 or 12 hour(s); every specified day and time of the week. For example: cron(0 0/30 * 1/1 * ? *) to run every thirty minutes; cron(0 0 0/4 1/1 * ? *) to run every four hours; and cron(0 0 10 ? * SUN *) to run every Sunday at 10 a.m.
        var scheduleExpression: String? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, instanceId: String? = nil, name: String, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.parameters = parameters
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

    }

    public struct ModifyDocumentPermissionRequest: Serializable, Initializable {
        /// The permission type for the document. The permission type can be Share.
        var permissionType: String = ""
        /// The name of the document that you want to share.
        var name: String = ""
        /// The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or All. This action has a higher priority than AccountIdsToAdd. If you specify an account ID to add and the same ID to remove, the system removes access to the document.
        var accountIdsToRemove: [String]? = nil
        /// The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or All.
        var accountIdsToAdd: [String]? = nil

        public init() {}

        public init(permissionType: String, name: String, accountIdsToRemove: [String]? = nil, accountIdsToAdd: [String]? = nil) {
            self.permissionType = permissionType
            self.name = name
            self.accountIdsToRemove = accountIdsToRemove
            self.accountIdsToAdd = accountIdsToAdd
        }

    }

    public struct RegisterDefaultPatchBaselineRequest: Serializable, Initializable {
        /// The ID of the patch baseline that should be the default patch baseline.
        var baselineId: String = ""

        public init() {}

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

    }

    public struct AddTagsToResourceResult: Serializable, Initializable {

        public init() {}

    }

    public struct PatchComplianceData: Serializable, Initializable {
        /// The severity of the patch (for example, Critical, Important, Moderate).
        var severity: String = ""
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        var classification: String = ""
        /// The date/time the patch was installed on the instance.
        var installedTime: Date = Date()
        /// The title of the patch.
        var title: String = ""
        /// The state of the patch on the instance (INSTALLED, INSTALLED_OTHER, MISSING, NOT_APPLICABLE or FAILED).
        var state: String = ""
        /// The Microsoft Knowledge Base ID of the patch.
        var kBId: String = ""

        public init() {}

        public init(severity: String, classification: String, installedTime: Date, title: String, state: String, kBId: String) {
            self.severity = severity
            self.classification = classification
            self.installedTime = installedTime
            self.title = title
            self.state = state
            self.kBId = kBId
        }

    }

    public struct DeregisterTaskFromMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the Maintenance Window the task was removed from.
        var windowId: String? = nil
        /// The ID of the task removed from the Maintenance Window.
        var windowTaskId: String? = nil

        public init() {}

        public init(windowId: String? = nil, windowTaskId: String? = nil) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

    }

    public struct PatchRuleGroup: Serializable, Initializable {
        /// The rules that make up the rule group.
        var patchRules: [PatchRule] = []

        public init() {}

        public init(patchRules: [PatchRule]) {
            self.patchRules = patchRules
        }

    }

    public struct DescribeMaintenanceWindowTasksRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window whose tasks should be retrieved.
        var windowId: String = ""
        /// Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType.
        var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribeAutomationExecutionsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// Filters used to limit the scope of executions that are requested.
        var filters: [AutomationExecutionFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [AutomationExecutionFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

    }

    public struct GetMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the created Maintenance Window.
        var windowId: String? = nil
        /// The date the Maintenance Window was last modified.
        var modifiedDate: Date? = nil
        /// The name of the Maintenance Window.
        var name: String? = nil
        /// Whether the Maintenance Windows is enabled.
        var enabled: Bool? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        var allowUnassociatedTargets: Bool? = nil
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        var schedule: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        var duration: Int32? = nil
        /// The date the Maintenance Window was created.
        var createdDate: Date? = nil

        public init() {}

        public init(windowId: String? = nil, modifiedDate: Date? = nil, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil, createdDate: Date? = nil) {
            self.windowId = windowId
            self.modifiedDate = modifiedDate
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
            self.createdDate = createdDate
        }

    }

    public struct LoggingInfo: Serializable, Initializable {
        /// (Optional) The Amazon S3 bucket subfolder. 
        var s3KeyPrefix: String? = nil
        /// The region where the Amazon S3 bucket is located.
        var s3Region: String = ""
        /// The name of an Amazon S3 bucket where execution logs are stored .
        var s3BucketName: String = ""

        public init() {}

        public init(s3KeyPrefix: String? = nil, s3Region: String, s3BucketName: String) {
            self.s3KeyPrefix = s3KeyPrefix
            self.s3Region = s3Region
            self.s3BucketName = s3BucketName
        }

    }

    public struct InventoryResultItem: Serializable, Initializable {
        /// The time inventory item data was captured.
        var captureTime: String? = nil
        /// Contains all the inventory data of the item type. Results include attribute names and values. 
        var content: [[String: String]] = []
        /// The schema version for the inventory result item/
        var schemaVersion: String = ""
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        var contentHash: String? = nil
        /// The name of the inventory result item type.
        var typeName: String = ""

        public init() {}

        public init(captureTime: String? = nil, content: [[String: String]], schemaVersion: String, contentHash: String? = nil, typeName: String) {
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.contentHash = contentHash
            self.typeName = typeName
        }

    }

    public struct GetPatchBaselineRequest: Serializable, Initializable {
        /// The ID of the patch baseline to retrieve.
        var baselineId: String = ""

        public init() {}

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

    }

    public struct DeleteDocumentResult: Serializable, Initializable {

        public init() {}

    }

    public struct AutomationExecutionMetadata: Serializable, Initializable {
        /// The IAM role ARN of the user who executed the Automation.
        var executedBy: String? = nil
        /// The name of the Automation document used during execution.
        var documentName: String? = nil
        /// The document version used during the execution.
        var documentVersion: String? = nil
        /// The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out, or Cancelled.
        var automationExecutionStatus: String? = nil
        /// The time the execution started.&gt;
        var executionStartTime: Date? = nil
        /// The list of execution outputs as defined in the Automation document.
        var outputs: [String: [String]]? = nil
        /// An Amazon S3 bucket where execution information is stored.
        var logFile: String? = nil
        /// The execution ID.
        var automationExecutionId: String? = nil
        /// The time the execution finished. This is not populated if the execution is still in progress.
        var executionEndTime: Date? = nil

        public init() {}

        public init(executedBy: String? = nil, documentName: String? = nil, documentVersion: String? = nil, automationExecutionStatus: String? = nil, executionStartTime: Date? = nil, outputs: [String: [String]]? = nil, logFile: String? = nil, automationExecutionId: String? = nil, executionEndTime: Date? = nil) {
            self.executedBy = executedBy
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.automationExecutionStatus = automationExecutionStatus
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.logFile = logFile
            self.automationExecutionId = automationExecutionId
            self.executionEndTime = executionEndTime
        }

    }

    public struct DescribeAssociationResult: Serializable, Initializable {
        /// Information about the association.
        var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

    }

    public struct CreateAssociationBatchRequest: Serializable, Initializable {
        /// One or more associations.
        var entries: [CreateAssociationBatchRequestEntry] = []

        public init() {}

        public init(entries: [CreateAssociationBatchRequestEntry]) {
            self.entries = entries
        }

    }

    public struct StopAutomationExecutionResult: Serializable, Initializable {

        public init() {}

    }

    public struct MaintenanceWindowFilter: Serializable, Initializable {
        /// The name of the filter.
        var key: String? = nil
        /// The filter values.
        var values: [String]? = nil

        public init() {}

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

    }

    public struct InventoryItem: Serializable, Initializable {
        /// The time the inventory information was collected.
        var captureTime: String = ""
        /// The inventory data of the inventory type.
        var content: [[String: String]]? = nil
        /// The schema version for the inventory item.
        var schemaVersion: String = ""
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        var contentHash: String? = nil
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        var typeName: String = ""

        public init() {}

        public init(captureTime: String, content: [[String: String]]? = nil, schemaVersion: String, contentHash: String? = nil, typeName: String) {
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.contentHash = contentHash
            self.typeName = typeName
        }

    }

    public struct DeletePatchBaselineResult: Serializable, Initializable {
        /// The ID of the deleted patch baseline.
        var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

    }

    public struct CancelCommandRequest: Serializable, Initializable {
        /// The ID of the command you want to cancel.
        var commandId: String = ""
        /// (Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested.
        var instanceIds: [String]? = nil

        public init() {}

        public init(commandId: String, instanceIds: [String]? = nil) {
            self.commandId = commandId
            self.instanceIds = instanceIds
        }

    }

    public struct InstanceInformation: Serializable, Initializable {
        /// The last date the association was successfully run.
        var lastSuccessfulAssociationExecutionDate: Date? = nil
        /// Indicates whether latest version of the SSM agent is running on your instance. 
        var isLatestVersion: Bool? = nil
        /// Information about the association.
        var associationOverview: InstanceAggregatedAssociationOverview? = nil
        /// The IP address of the managed instance.
        var iPAddress: String? = nil
        /// The type of instance. Instances are either EC2 instances or managed instances. 
        var resourceType: String? = nil
        /// The version of the OS platform running on your instance. 
        var platformVersion: String? = nil
        /// The fully qualified host name of the managed instance.
        var computerName: String? = nil
        /// The status of the association.
        var associationStatus: String? = nil
        /// The date the association was last executed.
        var lastAssociationExecutionDate: Date? = nil
        /// The Amazon Identity and Access Management (IAM) role assigned to EC2 instances or managed instances. 
        var iamRole: String? = nil
        /// The name of the operating system platform running on your instance. 
        var platformName: String? = nil
        /// The version of the SSM agent running on your Linux instance. 
        var agentVersion: String? = nil
        /// The name of the managed instance.
        var name: String? = nil
        /// The instance ID. 
        var instanceId: String? = nil
        /// Connection status of the SSM agent. 
        var pingStatus: String? = nil
        /// The date the server or VM was registered with AWS as a managed instance.
        var registrationDate: Date? = nil
        /// The operating system platform type. 
        var platformType: String? = nil
        /// The activation ID created by Systems Manager when the server or VM was registered.
        var activationId: String? = nil
        /// The date and time when agent last pinged Systems Manager service. 
        var lastPingDateTime: Date? = nil

        public init() {}

        public init(lastSuccessfulAssociationExecutionDate: Date? = nil, isLatestVersion: Bool? = nil, associationOverview: InstanceAggregatedAssociationOverview? = nil, iPAddress: String? = nil, resourceType: String? = nil, platformVersion: String? = nil, computerName: String? = nil, associationStatus: String? = nil, lastAssociationExecutionDate: Date? = nil, iamRole: String? = nil, platformName: String? = nil, agentVersion: String? = nil, name: String? = nil, instanceId: String? = nil, pingStatus: String? = nil, registrationDate: Date? = nil, platformType: String? = nil, activationId: String? = nil, lastPingDateTime: Date? = nil) {
            self.lastSuccessfulAssociationExecutionDate = lastSuccessfulAssociationExecutionDate
            self.isLatestVersion = isLatestVersion
            self.associationOverview = associationOverview
            self.iPAddress = iPAddress
            self.resourceType = resourceType
            self.platformVersion = platformVersion
            self.computerName = computerName
            self.associationStatus = associationStatus
            self.lastAssociationExecutionDate = lastAssociationExecutionDate
            self.iamRole = iamRole
            self.platformName = platformName
            self.agentVersion = agentVersion
            self.name = name
            self.instanceId = instanceId
            self.pingStatus = pingStatus
            self.registrationDate = registrationDate
            self.platformType = platformType
            self.activationId = activationId
            self.lastPingDateTime = lastPingDateTime
        }

    }

    public struct DescribeActivationsRequest: Serializable, Initializable {
        /// A token to start the list. Use this token to get the next set of results. 
        var nextToken: String? = nil
        /// A filter to view information about your activations.
        var filters: [DescribeActivationsFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [DescribeActivationsFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

    }

    public struct CreateMaintenanceWindowRequest: Serializable, Initializable {
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        var allowUnassociatedTargets: Bool = false
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        var schedule: String = ""
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        var cutoff: Int32 = 0
        /// The duration of the Maintenance Window in hours.
        var duration: Int32 = 0
        /// The name of the Maintenance Window.
        var name: String = ""
        /// User-provided idempotency token.
        var clientToken: String? = nil

        public init() {}

        public init(allowUnassociatedTargets: Bool, schedule: String, cutoff: Int32, duration: Int32, name: String, clientToken: String? = nil) {
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.clientToken = clientToken
        }

    }

    public struct CommandInvocation: Serializable, Initializable {
        var commandPlugins: [CommandPlugin]? = nil
        /// Configurations for sending notifications about command status changes on a per instance basis.
        var notificationConfig: NotificationConfig? = nil
        /// User-specified information about the command, such as a brief description of what the command should do.
        var comment: String? = nil
        /// The URL to the plugin’s StdOut file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        var standardOutputUrl: String? = nil
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis.
        var serviceRole: String? = nil
        ///  Gets the trace output sent by the agent. 
        var traceOutput: String? = nil
        /// Whether or not the invocation succeeded, failed, or is pending.
        var status: String? = nil
        /// The name of the invocation target. For Amazon EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance.
        var instanceName: String? = nil
        /// The time and date the request was sent to this instance.
        var requestedDateTime: Date? = nil
        /// The instance ID in which this invocation was requested.
        var instanceId: String? = nil
        /// The document name that was requested for execution.
        var documentName: String? = nil
        /// The URL to the plugin’s StdErr file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        var standardErrorUrl: String? = nil
        /// The command against which this invocation was requested.
        var commandId: String? = nil
        /// A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:    Pending – The command has not been sent to the instance.   In Progress – The command has been sent to the instance but has not reached a terminal state.   Success – The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out – The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command’s MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out – Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed – The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Undeliverable – The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command’s MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated – The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        var statusDetails: String? = nil

        public init() {}

        public init(commandPlugins: [CommandPlugin]? = nil, notificationConfig: NotificationConfig? = nil, comment: String? = nil, standardOutputUrl: String? = nil, serviceRole: String? = nil, traceOutput: String? = nil, status: String? = nil, instanceName: String? = nil, requestedDateTime: Date? = nil, instanceId: String? = nil, documentName: String? = nil, standardErrorUrl: String? = nil, commandId: String? = nil, statusDetails: String? = nil) {
            self.commandPlugins = commandPlugins
            self.notificationConfig = notificationConfig
            self.comment = comment
            self.standardOutputUrl = standardOutputUrl
            self.serviceRole = serviceRole
            self.traceOutput = traceOutput
            self.status = status
            self.instanceName = instanceName
            self.requestedDateTime = requestedDateTime
            self.instanceId = instanceId
            self.documentName = documentName
            self.standardErrorUrl = standardErrorUrl
            self.commandId = commandId
            self.statusDetails = statusDetails
        }

    }

    public struct DeregisterManagedInstanceResult: Serializable, Initializable {

        public init() {}

    }

    public struct FailedCreateAssociation: Serializable, Initializable {
        /// The source of the failure.
        var fault: String? = nil
        /// The association.
        var entry: CreateAssociationBatchRequestEntry? = nil
        /// A description of the failure.
        var message: String? = nil

        public init() {}

        public init(fault: String? = nil, entry: CreateAssociationBatchRequestEntry? = nil, message: String? = nil) {
            self.fault = fault
            self.entry = entry
            self.message = message
        }

    }

    public struct DocumentIdentifier: Serializable, Initializable {
        /// The document version.
        var documentVersion: String? = nil
        /// The document type.
        var documentType: String? = nil
        /// The AWS user account of the person who created the document.
        var owner: String? = nil
        /// The name of the SSM document.
        var name: String? = nil
        /// The operating system platform. 
        var platformTypes: [String]? = nil
        /// The schema version.
        var schemaVersion: String? = nil

        public init() {}

        public init(documentVersion: String? = nil, documentType: String? = nil, owner: String? = nil, name: String? = nil, platformTypes: [String]? = nil, schemaVersion: String? = nil) {
            self.documentVersion = documentVersion
            self.documentType = documentType
            self.owner = owner
            self.name = name
            self.platformTypes = platformTypes
            self.schemaVersion = schemaVersion
        }

    }

    public struct GetInventorySchemaResult: Serializable, Initializable {
        /// Inventory schemas returned by the request.
        var schemas: [InventoryItemSchema]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(schemas: [InventoryItemSchema]? = nil, nextToken: String? = nil) {
            self.schemas = schemas
            self.nextToken = nextToken
        }

    }

    public struct DeleteMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the deleted Maintenance Window.
        var windowId: String? = nil

        public init() {}

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

    }

    public struct GetParameterHistoryRequest: Serializable, Initializable {
        /// Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        var withDecryption: Bool? = nil
        /// The name of a parameter you want to query.
        var name: String = ""
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(withDecryption: Bool? = nil, name: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.withDecryption = withDecryption
            self.name = name
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct GetParameterHistoryResult: Serializable, Initializable {
        /// A list of parameters returned by the request.
        var parameters: [ParameterHistory]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(parameters: [ParameterHistory]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

    }

    public struct ListDocumentVersionsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The name of the document about which you want version information.
        var name: String = ""
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, name: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.name = name
            self.maxResults = maxResults
        }

    }

    public struct Target: Serializable, Initializable {
        /// User-defined criteria for sending commands that target instances that meet the criteria. Key can be tag:&lt;Amazon EC2 tag&gt; or name:&lt;Amazon EC2 instance ID&gt;. For example, tag:ServerRole or name:0123456789012345. For more information about how to send commands that target instances using Key;Value parameters, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        var key: String? = nil
        /// User-defined criteria that maps to Key. For example, if you specified tag:ServerRole, you could specify value:WebServer to execute a command on instances that include Amazon EC2 tags of ServerRole;WebServer. For more information about how to send commands that target instances using Key;Value parameters, see Executing a Command Using Amazon EC2 Run Command (Linux) or Executing a Command Using Amazon EC2 Run Command (Windows).
        var values: [String]? = nil

        public init() {}

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

    }

    public struct AssociationDescription: Serializable, Initializable {
        /// The date on which the association was last run.
        var lastExecutionDate: Date? = nil
        /// The date when the association was last updated.
        var lastUpdateAssociationDate: Date? = nil
        /// The instances targeted by the request. 
        var targets: [Target]? = nil
        /// The association status.
        var status: AssociationStatus? = nil
        /// The association ID.
        var associationId: String? = nil
        /// A description of the parameters for a document. 
        var parameters: [String: [String]]? = nil
        /// The name of the SSM document.
        var name: String? = nil
        /// The ID of the instance.
        var instanceId: String? = nil
        /// The document version.
        var documentVersion: String? = nil
        /// An Amazon S3 bucket where you want to store the output details of the request.
        var outputLocation: InstanceAssociationOutputLocation? = nil
        /// Information about the association.
        var overview: AssociationOverview? = nil
        /// A cron expression that specifies a schedule when the association runs.
        var scheduleExpression: String? = nil
        /// The date when the association was made.
        var date: Date? = nil
        /// The last date on which the association was successfully run.
        var lastSuccessfulExecutionDate: Date? = nil

        public init() {}

        public init(lastExecutionDate: Date? = nil, lastUpdateAssociationDate: Date? = nil, targets: [Target]? = nil, status: AssociationStatus? = nil, associationId: String? = nil, parameters: [String: [String]]? = nil, name: String? = nil, instanceId: String? = nil, documentVersion: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, overview: AssociationOverview? = nil, scheduleExpression: String? = nil, date: Date? = nil, lastSuccessfulExecutionDate: Date? = nil) {
            self.lastExecutionDate = lastExecutionDate
            self.lastUpdateAssociationDate = lastUpdateAssociationDate
            self.targets = targets
            self.status = status
            self.associationId = associationId
            self.parameters = parameters
            self.name = name
            self.instanceId = instanceId
            self.documentVersion = documentVersion
            self.outputLocation = outputLocation
            self.overview = overview
            self.scheduleExpression = scheduleExpression
            self.date = date
            self.lastSuccessfulExecutionDate = lastSuccessfulExecutionDate
        }

    }

    public struct InstanceAssociation: Serializable, Initializable {
        /// The content of the association document for the instance(s).
        var content: String? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The association ID.
        var associationId: String? = nil

        public init() {}

        public init(content: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.content = content
            self.instanceId = instanceId
            self.associationId = associationId
        }

    }

    public struct DeleteParameterResult: Serializable, Initializable {

        public init() {}

    }

    public struct InstanceInformationStringFilter: Serializable, Initializable {
        /// The filter key name to describe your instances. For example: "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|”AssociationStatus”|”Tag Key”
        var key: String = ""
        /// The filter values.
        var values: [String] = []

        public init() {}

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

    }

    public struct DeleteDocumentRequest: Serializable, Initializable {
        /// The name of the SSM document.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct DescribeMaintenanceWindowTargetsResult: Serializable, Initializable {
        /// Information about the targets in the Maintenance Window.
        var targets: [MaintenanceWindowTarget]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(targets: [MaintenanceWindowTarget]? = nil, nextToken: String? = nil) {
            self.targets = targets
            self.nextToken = nextToken
        }

    }

    public struct DescribePatchGroupStateRequest: Serializable, Initializable {
        /// The name of the patch group whose patch snapshot should be retrieved.
        var patchGroup: String = ""

        public init() {}

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

    }

    public struct UpdatePatchBaselineRequest: Serializable, Initializable {
        /// The ID of the patch baseline to update.
        var baselineId: String = ""
        /// A list of explicitly approved patches for the baseline.
        var approvedPatches: [String]? = nil
        /// The name of the patch baseline.
        var name: String? = nil
        /// A list of explicitly rejected patches for the baseline.
        var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        var globalFilters: PatchFilterGroup? = nil
        /// A description of the patch baseline.
        var description: String? = nil

        public init() {}

        public init(baselineId: String, approvedPatches: [String]? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.description = description
        }

    }

    public struct InventoryFilter: Serializable, Initializable {
        /// The type of filter. Valid values include the following: "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
        var type: String? = nil
        /// The name of the filter key.
        var key: String = ""
        /// Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal 
        var values: [String] = []

        public init() {}

        public init(type: String? = nil, key: String, values: [String]) {
            self.type = type
            self.key = key
            self.values = values
        }

    }

    public struct ListCommandsResult: Serializable, Initializable {
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// (Optional) The list of commands requested by the user. 
        var commands: [Command]? = nil

        public init() {}

        public init(nextToken: String? = nil, commands: [Command]? = nil) {
            self.nextToken = nextToken
            self.commands = commands
        }

    }

    public struct GetPatchBaselineForPatchGroupResult: Serializable, Initializable {
        /// The ID of the patch baseline that should be used for the patch group.
        var baselineId: String? = nil
        /// The name of the patch group.
        var patchGroup: String? = nil

        public init() {}

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

    }

    public struct DescribeEffectivePatchesForPatchBaselineRequest: Serializable, Initializable {
        /// The ID of the patch baseline to retrieve the effective patches for.
        var baselineId: String = ""
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of patches to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(baselineId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.baselineId = baselineId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct RegisterPatchBaselineForPatchGroupRequest: Serializable, Initializable {
        /// The ID of the patch baseline to register the patch group with.
        var baselineId: String = ""
        /// The name of the patch group that should be registered with the patch baseline.
        var patchGroup: String = ""

        public init() {}

        public init(baselineId: String, patchGroup: String) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

    }

    public struct AssociationStatus: Serializable, Initializable {
        /// The reason for the status.
        var message: String = ""
        /// The status.
        var name: String = ""
        /// The date when the status changed.
        var date: Date = Date()
        /// A user-defined string.
        var additionalInfo: String? = nil

        public init() {}

        public init(message: String, name: String, date: Date, additionalInfo: String? = nil) {
            self.message = message
            self.name = name
            self.date = date
            self.additionalInfo = additionalInfo
        }

    }

    public struct DescribeInstancePatchStatesForPatchGroupRequest: Serializable, Initializable {
        /// Each entry in the array is a structure containing: Key (string 1 ≤ length ≤ 200)  Values (array containing a single string)  Type (string “Equal”, “NotEqual”, “LessThan”, “GreaterThan”)
        var filters: [InstancePatchStateFilter]? = nil
        /// The name of the patch group for which the patch state information should be retrieved.
        var patchGroup: String = ""
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of patches to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(filters: [InstancePatchStateFilter]? = nil, patchGroup: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.patchGroup = patchGroup
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribeMaintenanceWindowTasksResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// Information about the tasks in the Maintenance Window.
        var tasks: [MaintenanceWindowTask]? = nil

        public init() {}

        public init(nextToken: String? = nil, tasks: [MaintenanceWindowTask]? = nil) {
            self.nextToken = nextToken
            self.tasks = tasks
        }

    }

    public struct AutomationExecution: Serializable, Initializable {
        /// The key-value map of execution parameters, which were supplied when calling StartAutomationExecution.
        var parameters: [String: [String]]? = nil
        /// The name of the Automation document used during the execution.
        var documentName: String? = nil
        /// The version of the document to use during execution.
        var documentVersion: String? = nil
        /// The execution status of the Automation.
        var automationExecutionStatus: String? = nil
        /// The time the execution started.
        var executionStartTime: Date? = nil
        /// The list of execution outputs as defined in the automation document.
        var outputs: [String: [String]]? = nil
        /// A message describing why an execution has failed, if the status is set to Failed.
        var failureMessage: String? = nil
        /// The execution ID.
        var automationExecutionId: String? = nil
        /// A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are executed in order.
        var stepExecutions: [StepExecution]? = nil
        /// The time the execution finished.
        var executionEndTime: Date? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, documentName: String? = nil, documentVersion: String? = nil, automationExecutionStatus: String? = nil, executionStartTime: Date? = nil, outputs: [String: [String]]? = nil, failureMessage: String? = nil, automationExecutionId: String? = nil, stepExecutions: [StepExecution]? = nil, executionEndTime: Date? = nil) {
            self.parameters = parameters
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.automationExecutionStatus = automationExecutionStatus
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.failureMessage = failureMessage
            self.automationExecutionId = automationExecutionId
            self.stepExecutions = stepExecutions
            self.executionEndTime = executionEndTime
        }

    }

    public struct MaintenanceWindowTaskParameterValueExpression: Serializable, Initializable {
        /// This field contains an array of 0 or more strings, each 1 to 255 characters in length.
        var values: [String]? = nil

        public init() {}

        public init(values: [String]? = nil) {
            self.values = values
        }

    }

    public struct Patch: Serializable, Initializable {
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        var classification: String? = nil
        /// The specific product the patch is applicable for (for example, WindowsServer2016).
        var product: String? = nil
        /// The language of the patch if it’s language-specific.
        var language: String? = nil
        /// The date the patch was released.
        var releaseDate: Date? = nil
        /// The title of the patch.
        var title: String? = nil
        /// The ID of the patch (this is different than the Microsoft Knowledge Base ID).
        var id: String? = nil
        /// The description of the patch.
        var description: String? = nil
        /// The product family the patch is applicable for (for example, Windows).
        var productFamily: String? = nil
        /// The name of the vendor providing the patch.
        var vendor: String? = nil
        /// The ID of the MSRC bulletin the patch is related to.
        var msrcNumber: String? = nil
        /// The Microsoft Knowledge Base ID of the patch.
        var kbNumber: String? = nil
        /// The URL where more information can be obtained about the patch.
        var contentUrl: String? = nil
        /// The severity of the patch (for example Critical, Important, Moderate).
        var msrcSeverity: String? = nil

        public init() {}

        public init(classification: String? = nil, product: String? = nil, language: String? = nil, releaseDate: Date? = nil, title: String? = nil, id: String? = nil, description: String? = nil, productFamily: String? = nil, vendor: String? = nil, msrcNumber: String? = nil, kbNumber: String? = nil, contentUrl: String? = nil, msrcSeverity: String? = nil) {
            self.classification = classification
            self.product = product
            self.language = language
            self.releaseDate = releaseDate
            self.title = title
            self.id = id
            self.description = description
            self.productFamily = productFamily
            self.vendor = vendor
            self.msrcNumber = msrcNumber
            self.kbNumber = kbNumber
            self.contentUrl = contentUrl
            self.msrcSeverity = msrcSeverity
        }

    }

    public struct DescribeDocumentResult: Serializable, Initializable {
        /// Information about the SSM document.
        var document: DocumentDescription? = nil

        public init() {}

        public init(document: DocumentDescription? = nil) {
            self.document = document
        }

    }

    public struct DescribeAutomationExecutionsResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// The list of details about each automation execution which has occurred which matches the filter specification, if any.
        var automationExecutionMetadataList: [AutomationExecutionMetadata]? = nil

        public init() {}

        public init(nextToken: String? = nil, automationExecutionMetadataList: [AutomationExecutionMetadata]? = nil) {
            self.nextToken = nextToken
            self.automationExecutionMetadataList = automationExecutionMetadataList
        }

    }

    public struct RegisterTaskWithMaintenanceWindowRequest: Serializable, Initializable {
        /// The id of the Maintenance Window the task should be added to.
        var windowId: String = ""
        /// The ARN of the task to execute 
        var taskArn: String = ""
        /// The role that should be assumed when executing the task.
        var serviceRoleArn: String = ""
        /// The maximum number of errors allowed before this task stops being scheduled.
        var maxErrors: String = ""
        /// The type of task being registered.
        var taskType: String = ""
        /// User-provided idempotency token.
        var clientToken: String? = nil
        /// The parameters that should be passed to the task when it is executed.
        var taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        var targets: [Target] = []
        /// A structure containing information about an Amazon S3 bucket to write instance-level logs to. 
        var loggingInfo: LoggingInfo? = nil
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        var priority: Int32? = nil
        /// The maximum number of targets this task can be run for in parallel.
        var maxConcurrency: String = ""

        public init() {}

        public init(windowId: String, taskArn: String, serviceRoleArn: String, maxErrors: String, taskType: String, clientToken: String? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, targets: [Target], loggingInfo: LoggingInfo? = nil, priority: Int32? = nil, maxConcurrency: String) {
            self.windowId = windowId
            self.taskArn = taskArn
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
            self.taskType = taskType
            self.clientToken = clientToken
            self.taskParameters = taskParameters
            self.targets = targets
            self.loggingInfo = loggingInfo
            self.priority = priority
            self.maxConcurrency = maxConcurrency
        }

    }

    public struct CreateAssociationBatchRequestEntry: Serializable, Initializable {
        /// A description of the parameters for a document. 
        var parameters: [String: [String]]? = nil
        ///  The ID of the instance. 
        var instanceId: String? = nil
        ///  The name of the configuration document. 
        var name: String = ""
        /// The document version.
        var documentVersion: String? = nil
        /// The instances targeted by the request.
        var targets: [Target]? = nil
        /// An Amazon S3 bucket where you want to store the results of this request.
        var outputLocation: InstanceAssociationOutputLocation? = nil
        /// A cron expression that specifies a schedule when the association runs.
        var scheduleExpression: String? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, instanceId: String? = nil, name: String, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.parameters = parameters
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

    }

    public struct CancelCommandResult: Serializable, Initializable {

        public init() {}

    }

    public struct GetDefaultPatchBaselineRequest: Serializable, Initializable {

        public init() {}

    }

    public struct ParameterHistory: Serializable, Initializable {
        /// The ID of the query key used for this parameter.
        var keyId: String? = nil
        /// The name of the parameter.
        var name: String? = nil
        /// Date the parameter was last changed or updated.
        var lastModifiedDate: Date? = nil
        /// The type of parameter used.
        var type: String? = nil
        /// The parameter value.
        var value: String? = nil
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        var lastModifiedUser: String? = nil
        /// Information about the parameter.
        var description: String? = nil

        public init() {}

        public init(keyId: String? = nil, name: String? = nil, lastModifiedDate: Date? = nil, type: String? = nil, value: String? = nil, lastModifiedUser: String? = nil, description: String? = nil) {
            self.keyId = keyId
            self.name = name
            self.lastModifiedDate = lastModifiedDate
            self.type = type
            self.value = value
            self.lastModifiedUser = lastModifiedUser
            self.description = description
        }

    }

    public struct PatchOrchestratorFilter: Serializable, Initializable {
        /// The key for the filter.
        var key: String? = nil
        /// The value for the filter.
        var values: [String]? = nil

        public init() {}

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

    }

    public struct UpdateDocumentResult: Serializable, Initializable {
        /// A description of the document that was updated.
        var documentDescription: DocumentDescription? = nil

        public init() {}

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

    }

    public struct InventoryItemAttribute: Serializable, Initializable {
        /// The data type of the inventory item attribute. 
        var dataType: String = ""
        /// Name of the inventory item attribute.
        var name: String = ""

        public init() {}

        public init(dataType: String, name: String) {
            self.dataType = dataType
            self.name = name
        }

    }

    public struct DocumentDescription: Serializable, Initializable {
        /// The SHA1 hash of the document, which you can use for verification purposes.
        var sha1: String? = nil
        /// The default version.
        var defaultVersion: String? = nil
        ///  The date when the SSM document was created. 
        var createdDate: Date? = nil
        /// The AWS user account of the person who created the document.
        var owner: String? = nil
        ///  A description of the document. 
        var description: String? = nil
        /// The type of document. 
        var documentType: String? = nil
        /// The status of the SSM document.
        var status: String? = nil
        /// A description of the parameters for a document.
        var parameters: [DocumentParameter]? = nil
        /// The name of the SSM document.
        var name: String? = nil
        /// The document version.
        var documentVersion: String? = nil
        /// The schema version.
        var schemaVersion: String? = nil
        /// The latest version of the document.
        var latestVersion: String? = nil
        /// The list of OS platforms compatible with this SSM document. 
        var platformTypes: [String]? = nil
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        var hash: String? = nil
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        var hashType: String? = nil

        public init() {}

        public init(sha1: String? = nil, defaultVersion: String? = nil, createdDate: Date? = nil, owner: String? = nil, description: String? = nil, documentType: String? = nil, status: String? = nil, parameters: [DocumentParameter]? = nil, name: String? = nil, documentVersion: String? = nil, schemaVersion: String? = nil, latestVersion: String? = nil, platformTypes: [String]? = nil, hash: String? = nil, hashType: String? = nil) {
            self.sha1 = sha1
            self.defaultVersion = defaultVersion
            self.createdDate = createdDate
            self.owner = owner
            self.description = description
            self.documentType = documentType
            self.status = status
            self.parameters = parameters
            self.name = name
            self.documentVersion = documentVersion
            self.schemaVersion = schemaVersion
            self.latestVersion = latestVersion
            self.platformTypes = platformTypes
            self.hash = hash
            self.hashType = hashType
        }

    }

    public struct DeregisterPatchBaselineForPatchGroupRequest: Serializable, Initializable {
        /// The ID of the patch baseline to deregister the patch group from.
        var baselineId: String = ""
        /// The name of the patch group that should be deregistered from the patch baseline.
        var patchGroup: String = ""

        public init() {}

        public init(baselineId: String, patchGroup: String) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

    }

    public struct InstanceInformationFilter: Serializable, Initializable {
        /// The name of the filter. 
        var key: String = ""
        /// The filter values.
        var valueSet: [String] = []

        public init() {}

        public init(key: String, valueSet: [String]) {
            self.key = key
            self.valueSet = valueSet
        }

    }

    public struct DescribeEffectiveInstanceAssociationsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The instance ID for which you want to view all associations.
        var instanceId: String = ""
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

    }

    public struct ModifyDocumentPermissionResponse: Serializable, Initializable {

        public init() {}

    }

    public struct PatchFilterGroup: Serializable, Initializable {
        /// The set of patch filters that make up the group.
        var patchFilters: [PatchFilter] = []

        public init() {}

        public init(patchFilters: [PatchFilter]) {
            self.patchFilters = patchFilters
        }

    }

    public struct DescribeDocumentPermissionRequest: Serializable, Initializable {
        /// The name of the document for which you are the owner.
        var name: String = ""
        /// The permission type for the document. The permission type can be Share.
        var permissionType: String = ""

        public init() {}

        public init(name: String, permissionType: String) {
            self.name = name
            self.permissionType = permissionType
        }

    }

    public struct RegisterPatchBaselineForPatchGroupResult: Serializable, Initializable {
        /// The ID of the patch baseline the patch group was registered with.
        var baselineId: String? = nil
        /// The name of the patch group registered with the patch baseline.
        var patchGroup: String? = nil

        public init() {}

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

    }

    public struct CommandFilter: Serializable, Initializable {
        /// The name of the filter. For example, requested date and time.
        var key: String = ""
        /// The filter value. For example: June 30, 2015.
        var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

    }

    public struct CreateDocumentRequest: Serializable, Initializable {
        /// A valid JSON string.
        var content: String = ""
        /// A name for the SSM document.
        var name: String = ""
        /// The type of document to create. Valid document types include: Policy, Automation, and Command.
        var documentType: String? = nil

        public init() {}

        public init(content: String, name: String, documentType: String? = nil) {
            self.content = content
            self.name = name
            self.documentType = documentType
        }

    }

    public struct RegisterDefaultPatchBaselineResult: Serializable, Initializable {
        /// The ID of the default patch baseline.
        var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

    }

    public struct GetDeployablePatchSnapshotForInstanceRequest: Serializable, Initializable {
        /// The user-defined snapshot ID.
        var snapshotId: String = ""
        /// The ID of the instance for which the appropriate patch snapshot should be retrieved.
        var instanceId: String = ""

        public init() {}

        public init(snapshotId: String, instanceId: String) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
        }

    }

    public struct SendCommandResult: Serializable, Initializable {
        /// The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.
        var command: Command? = nil

        public init() {}

        public init(command: Command? = nil) {
            self.command = command
        }

    }

    public struct DeregisterTaskFromMaintenanceWindowRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window the task should be removed from.
        var windowId: String = ""
        /// The ID of the task to remove from the Maintenance Window.
        var windowTaskId: String = ""

        public init() {}

        public init(windowId: String, windowTaskId: String) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

    }

    public struct GetParametersRequest: Serializable, Initializable {
        /// Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        var withDecryption: Bool? = nil
        /// Names of the parameters for which you want to query information.
        var names: [String] = []

        public init() {}

        public init(withDecryption: Bool? = nil, names: [String]) {
            self.withDecryption = withDecryption
            self.names = names
        }

    }

    public struct ListCommandInvocationsResult: Serializable, Initializable {
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// (Optional) A list of all invocations. 
        var commandInvocations: [CommandInvocation]? = nil

        public init() {}

        public init(nextToken: String? = nil, commandInvocations: [CommandInvocation]? = nil) {
            self.nextToken = nextToken
            self.commandInvocations = commandInvocations
        }

    }

    public struct DescribeMaintenanceWindowExecutionsRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window whose executions should be retrieved.
        var windowId: String = ""
        /// Each entry in the array is a structure containing: Key (string, 1 ≤ length ≤ 128) Values (array of strings 1 ≤ length ≤ 256) The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.
        var filters: [MaintenanceWindowFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ListCommandsRequest: Serializable, Initializable {
        /// (Optional) One or more filters. Use a filter to return a more specific list of results. 
        var filters: [CommandFilter]? = nil
        /// (Optional) If provided, lists only the specified command.
        var commandId: String? = nil
        /// (Optional) Lists commands issued against this instance ID.
        var instanceId: String? = nil
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(filters: [CommandFilter]? = nil, commandId: String? = nil, instanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.commandId = commandId
            self.instanceId = instanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ParameterMetadata: Serializable, Initializable {
        /// Date the parameter was last changed or updated.
        var lastModifiedDate: Date? = nil
        /// The ID of the query key used for this parameter.
        var keyId: String? = nil
        /// The type of parameter. Valid parameter types include the following: String, String list, Secure string.
        var type: String? = nil
        /// The parameter name.
        var name: String? = nil
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        var lastModifiedUser: String? = nil
        /// Description of the parameter actions.
        var description: String? = nil

        public init() {}

        public init(lastModifiedDate: Date? = nil, keyId: String? = nil, type: String? = nil, name: String? = nil, lastModifiedUser: String? = nil, description: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.keyId = keyId
            self.type = type
            self.name = name
            self.lastModifiedUser = lastModifiedUser
            self.description = description
        }

    }

    public struct DescribeMaintenanceWindowsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// Optional filters used to narrow down the scope of the returned Maintenance Windows. Supported filter keys are Name and Enabled.
        var filters: [MaintenanceWindowFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [MaintenanceWindowFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

    }

    public struct UpdatePatchBaselineResult: Serializable, Initializable {
        /// The ID of the deleted patch baseline.
        var baselineId: String? = nil
        /// The date when the patch baseline was last modified.
        var modifiedDate: Date? = nil
        /// A list of explicitly approved patches for the baseline.
        var approvedPatches: [String]? = nil
        /// The name of the patch baseline.
        var name: String? = nil
        /// A list of explicitly rejected patches for the baseline.
        var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        var globalFilters: PatchFilterGroup? = nil
        /// The date when the patch baseline was created.
        var createdDate: Date? = nil
        /// A description of the Patch Baseline.
        var description: String? = nil

        public init() {}

        public init(baselineId: String? = nil, modifiedDate: Date? = nil, approvedPatches: [String]? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, createdDate: Date? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.modifiedDate = modifiedDate
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.createdDate = createdDate
            self.description = description
        }

    }

    public struct DescribeInstanceInformationRequest: Serializable, Initializable {
        /// One or more filters. Use a filter to return a more specific list of instances.
        var instanceInformationFilterList: [InstanceInformationFilter]? = nil
        /// One or more filters. Use a filter to return a more specific list of instances.
        var filters: [InstanceInformationStringFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. 
        var maxResults: Int32? = nil

        public init() {}

        public init(instanceInformationFilterList: [InstanceInformationFilter]? = nil, filters: [InstanceInformationStringFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.instanceInformationFilterList = instanceInformationFilterList
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct GetInventoryRequest: Serializable, Initializable {
        /// One or more filters. Use a filter to return a more specific list of results.
        var filters: [InventoryFilter]? = nil
        /// The list of inventory item types to return.
        var resultAttributes: [ResultAttribute]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(filters: [InventoryFilter]? = nil, resultAttributes: [ResultAttribute]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.resultAttributes = resultAttributes
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribePatchBaselinesResult: Serializable, Initializable {
        /// An array of PatchBaselineIdentity elements.
        var baselineIdentities: [PatchBaselineIdentity]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(baselineIdentities: [PatchBaselineIdentity]? = nil, nextToken: String? = nil) {
            self.baselineIdentities = baselineIdentities
            self.nextToken = nextToken
        }

    }

    public struct InstanceAggregatedAssociationOverview: Serializable, Initializable {
        /// The number of associations for the instance(s).
        var instanceAssociationStatusAggregatedCount: [String: Int32]? = nil
        /// Detailed status information about the aggregated associations.
        var detailedStatus: String? = nil

        public init() {}

        public init(instanceAssociationStatusAggregatedCount: [String: Int32]? = nil, detailedStatus: String? = nil) {
            self.instanceAssociationStatusAggregatedCount = instanceAssociationStatusAggregatedCount
            self.detailedStatus = detailedStatus
        }

    }

    public struct GetCommandInvocationResult: Serializable, Initializable {
        /// The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin.
        var pluginName: String? = nil
        /// Duration since ExecutionStartDateTime.
        var executionElapsedTime: String? = nil
        /// The comment text for the command.
        var comment: String? = nil
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3 bucket was not specified, then this string is empty.
        var standardOutputUrl: String? = nil
        /// The status of the parent command for this invocation. This status can be different than StatusDetails.
        var status: String? = nil
        /// The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        var instanceId: String? = nil
        /// The first 8,000 characters written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        var standardErrorContent: String? = nil
        /// The name of the SSM document that was executed. For example, AWS-RunShellScript is an SSM document.
        var documentName: String? = nil
        /// The URL for the complete text written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        var standardErrorUrl: String? = nil
        /// The date and time the plugin was finished executing. Date and time are written in ISO 8601 format. For example, August 28, 2016 is represented as 2016-08-28. If the plugin has not started to execute, the string is empty.
        var executionEndDateTime: String? = nil
        /// The error level response code for the plugin script. If the response code is -1, then the command has not started executing on the instance, or it was not received by the instance.
        var responseCode: Int32? = nil
        /// The first 24,000 characters written by the plugin to stdout. If the command has not finished executing, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.
        var standardOutputContent: String? = nil
        /// The parent command ID of the invocation plugin.
        var commandId: String? = nil
        /// A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Monitor Commands (Linux) or Monitor Commands (Windows). StatusDetails can be one of the following values:    Pending – The command has not been sent to the instance.   In Progress – The command has been sent to the instance but has not reached a terminal state.   Delayed – The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, the instance was stopped, etc. The system will try to deliver the command again.   Success – The command or plugin was executed successfully. This is a terminal state.   Delivery Timed Out – The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command’s MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out – The command started to execute on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed – The command wasn't executed successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled – The command was terminated before it was completed. This is a terminal state.   Undeliverable – The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command’s MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated – The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        var statusDetails: String? = nil
        /// The date and time the plugin started executing. Date and time are written in ISO 8601 format. For example, August 28, 2016 is represented as 2016-08-28. If the plugin has not started to execute, the string is empty.
        var executionStartDateTime: String? = nil

        public init() {}

        public init(pluginName: String? = nil, executionElapsedTime: String? = nil, comment: String? = nil, standardOutputUrl: String? = nil, status: String? = nil, instanceId: String? = nil, standardErrorContent: String? = nil, documentName: String? = nil, standardErrorUrl: String? = nil, executionEndDateTime: String? = nil, responseCode: Int32? = nil, standardOutputContent: String? = nil, commandId: String? = nil, statusDetails: String? = nil, executionStartDateTime: String? = nil) {
            self.pluginName = pluginName
            self.executionElapsedTime = executionElapsedTime
            self.comment = comment
            self.standardOutputUrl = standardOutputUrl
            self.status = status
            self.instanceId = instanceId
            self.standardErrorContent = standardErrorContent
            self.documentName = documentName
            self.standardErrorUrl = standardErrorUrl
            self.executionEndDateTime = executionEndDateTime
            self.responseCode = responseCode
            self.standardOutputContent = standardOutputContent
            self.commandId = commandId
            self.statusDetails = statusDetails
            self.executionStartDateTime = executionStartDateTime
        }

    }

    public struct InventoryItemSchema: Serializable, Initializable {
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        var typeName: String = ""
        /// The schema attributes for inventory. This contains data type and attribute name.
        var attributes: [InventoryItemAttribute] = []
        /// The schema version for the inventory item.
        var version: String? = nil

        public init() {}

        public init(typeName: String, attributes: [InventoryItemAttribute], version: String? = nil) {
            self.typeName = typeName
            self.attributes = attributes
            self.version = version
        }

    }

    public struct UpdateAssociationResult: Serializable, Initializable {
        /// The description of the association that was updated.
        var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

    }

    public struct UpdateManagedInstanceRoleResult: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeInstanceInformationResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty. 
        var nextToken: String? = nil
        /// The instance information list.
        var instanceInformationList: [InstanceInformation]? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceInformationList: [InstanceInformation]? = nil) {
            self.nextToken = nextToken
            self.instanceInformationList = instanceInformationList
        }

    }

    public struct PatchStatus: Serializable, Initializable {
        /// The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
        var approvalDate: Date? = nil
        /// The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED).
        var deploymentStatus: String? = nil

        public init() {}

        public init(approvalDate: Date? = nil, deploymentStatus: String? = nil) {
            self.approvalDate = approvalDate
            self.deploymentStatus = deploymentStatus
        }

    }

    public struct StartAutomationExecutionRequest: Serializable, Initializable {
        /// A key-value map of execution parameters, which match the declared parameters in the Automation document.
        var parameters: [String: [String]]? = nil
        /// The name of the Automation document to use for this execution.
        var documentName: String = ""
        /// The version of the Automation document to use for this execution.
        var documentVersion: String? = nil

        public init() {}

        public init(parameters: [String: [String]]? = nil, documentName: String, documentVersion: String? = nil) {
            self.parameters = parameters
            self.documentName = documentName
            self.documentVersion = documentVersion
        }

    }

    public struct UpdateDocumentRequest: Serializable, Initializable {
        /// The content in a document that you want to update.
        var content: String = ""
        /// The name of the document that you want to update.
        var name: String = ""
        /// The version of the document that you want to update.
        var documentVersion: String? = nil

        public init() {}

        public init(content: String, name: String, documentVersion: String? = nil) {
            self.content = content
            self.name = name
            self.documentVersion = documentVersion
        }

    }

    public struct GetMaintenanceWindowExecutionResult: Serializable, Initializable {
        /// The time the Maintenance Window finished executing.
        var endTime: Date? = nil
        /// The ID of the task executions from the Maintenance Window execution.
        var taskIds: [String]? = nil
        /// The time the Maintenance Window started executing.
        var startTime: Date? = nil
        /// The status of the Maintenance Window execution.
        var status: String? = nil
        /// The ID of the Maintenance Window execution.
        var windowExecutionId: String? = nil
        /// The details explaining the Status. Only available for certain status values.
        var statusDetails: String? = nil

        public init() {}

        public init(endTime: Date? = nil, taskIds: [String]? = nil, startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, statusDetails: String? = nil) {
            self.endTime = endTime
            self.taskIds = taskIds
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.statusDetails = statusDetails
        }

    }

    public struct DescribePatchGroupStateResult: Serializable, Initializable {
        /// The number of instances with missing patches from the patch baseline.
        var instancesWithMissingPatches: Int32? = nil
        /// The number of instances in the patch group.
        var instances: Int32? = nil
        /// The number of instances with patches that aren’t applicable.
        var instancesWithNotApplicablePatches: Int32? = nil
        /// The number of instances with installed patches.
        var instancesWithInstalledPatches: Int32? = nil
        /// The number of instances with patches from the patch baseline that failed to install.
        var instancesWithFailedPatches: Int32? = nil
        /// The number of instances with patches installed that aren’t defined in the patch baseline.
        var instancesWithInstalledOtherPatches: Int32? = nil

        public init() {}

        public init(instancesWithMissingPatches: Int32? = nil, instances: Int32? = nil, instancesWithNotApplicablePatches: Int32? = nil, instancesWithInstalledPatches: Int32? = nil, instancesWithFailedPatches: Int32? = nil, instancesWithInstalledOtherPatches: Int32? = nil) {
            self.instancesWithMissingPatches = instancesWithMissingPatches
            self.instances = instances
            self.instancesWithNotApplicablePatches = instancesWithNotApplicablePatches
            self.instancesWithInstalledPatches = instancesWithInstalledPatches
            self.instancesWithFailedPatches = instancesWithFailedPatches
            self.instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatches
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The value of the tag.
        var value: String = ""
        /// The name of the tag.
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct RegisterTaskWithMaintenanceWindowResult: Serializable, Initializable {
        /// The id of the task in the Maintenance Window.
        var windowTaskId: String? = nil

        public init() {}

        public init(windowTaskId: String? = nil) {
            self.windowTaskId = windowTaskId
        }

    }

    public struct DescribeAssociationRequest: Serializable, Initializable {
        /// The name of the SSM document.
        var name: String? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The association ID for which you want information.
        var associationId: String? = nil

        public init() {}

        public init(name: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.associationId = associationId
        }

    }

    public struct MaintenanceWindowIdentity: Serializable, Initializable {
        /// The ID of the Maintenance Window.
        var windowId: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        var duration: Int32? = nil
        /// The name of the Maintenance Window.
        var name: String? = nil
        /// Whether the Maintenance Window is enabled.
        var enabled: Bool? = nil

        public init() {}

        public init(windowId: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil, name: String? = nil, enabled: Bool? = nil) {
            self.windowId = windowId
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.enabled = enabled
        }

    }

    public struct DeregisterManagedInstanceRequest: Serializable, Initializable {
        /// The ID assigned to the managed instance when you registered it using the activation process. 
        var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

    }

    public struct DocumentDefaultVersionDescription: Serializable, Initializable {
        /// The name of the document.
        var name: String? = nil
        /// The default version of the document.
        var defaultVersion: String? = nil

        public init() {}

        public init(name: String? = nil, defaultVersion: String? = nil) {
            self.name = name
            self.defaultVersion = defaultVersion
        }

    }

    public struct AutomationExecutionFilter: Serializable, Initializable {
        /// The aspect of the Automation execution information that should be limited.
        var key: String = ""
        /// The values used to limit the execution information associated with the filter's key.
        var values: [String] = []

        public init() {}

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

    }

    public struct CreateActivationRequest: Serializable, Initializable {
        /// The date by which this activation request should expire. The default value is 24 hours.
        var expirationDate: Date? = nil
        /// A user-defined description of the resource that you want to register with Amazon EC2. 
        var description: String? = nil
        /// Specify the maximum number of managed instances you want to register. The default value is 1 instance.
        var registrationLimit: Int32? = nil
        /// The name of the registered, managed instance as it will appear in the Amazon EC2 console or when you use the AWS command line tools to list EC2 resources.
        var defaultInstanceName: String? = nil
        /// The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance. 
        var iamRole: String = ""

        public init() {}

        public init(expirationDate: Date? = nil, description: String? = nil, registrationLimit: Int32? = nil, defaultInstanceName: String? = nil, iamRole: String) {
            self.expirationDate = expirationDate
            self.description = description
            self.registrationLimit = registrationLimit
            self.defaultInstanceName = defaultInstanceName
            self.iamRole = iamRole
        }

    }

    public struct AddTagsToResourceRequest: Serializable, Initializable {
        /// The resource ID you want to tag.
        var resourceId: String = ""
        ///  One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. 
        var tags: [Tag] = []
        /// Specifies the type of resource you are tagging.
        var resourceType: String = ""

        public init() {}

        public init(resourceId: String, tags: [Tag], resourceType: String) {
            self.resourceId = resourceId
            self.tags = tags
            self.resourceType = resourceType
        }

    }

    public struct MaintenanceWindowTask: Serializable, Initializable {
        /// The Maintenance Window ID where the task is registered.
        var windowId: String? = nil
        /// The ARN of the task to execute.
        var taskArn: String? = nil
        /// The role that should be assumed when executing the task
        var serviceRoleArn: String? = nil
        /// The maximum number of errors allowed before this task stops being scheduled.
        var maxErrors: String? = nil
        /// The parameters that should be passed to the task when it is executed.
        var taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil
        /// The task ID.
        var windowTaskId: String? = nil
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        var targets: [Target]? = nil
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        var priority: Int32? = nil
        /// Information about an Amazon S3 bucket to write task-level logs to.
        var loggingInfo: LoggingInfo? = nil
        /// The maximum number of targets this task can be run for in parallel.
        var maxConcurrency: String? = nil
        /// The type of task.
        var type: String? = nil

        public init() {}

        public init(windowId: String? = nil, taskArn: String? = nil, serviceRoleArn: String? = nil, maxErrors: String? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String? = nil, targets: [Target]? = nil, priority: Int32? = nil, loggingInfo: LoggingInfo? = nil, maxConcurrency: String? = nil, type: String? = nil) {
            self.windowId = windowId
            self.taskArn = taskArn
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.priority = priority
            self.loggingInfo = loggingInfo
            self.maxConcurrency = maxConcurrency
            self.type = type
        }

    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsResult: Serializable, Initializable {
        /// Information about the task invocation results per invocation.
        var windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskInvocationIdentities = windowExecutionTaskInvocationIdentities
            self.nextToken = nextToken
        }

    }

    public struct DescribeInstancePatchesResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// Each entry in the array is a structure containing: Title (string) KBId (string) Classification (string) Severity (string) State (string – “INSTALLED”, “INSTALLED_OTHER”, “MISSING”, “NOT_APPLICABLE”, “FAILED”) InstalledTime (DateTime) InstalledBy (string)
        var patches: [PatchComplianceData]? = nil

        public init() {}

        public init(nextToken: String? = nil, patches: [PatchComplianceData]? = nil) {
            self.nextToken = nextToken
            self.patches = patches
        }

    }

    public struct RemoveTagsFromResourceResult: Serializable, Initializable {

        public init() {}

    }

    public struct PatchGroupPatchBaselineMapping: Serializable, Initializable {
        /// The name of the patch group registered with the patch baseline.
        var patchGroup: String? = nil
        /// The patch baseline the patch group is registered with.
        var baselineIdentity: PatchBaselineIdentity? = nil

        public init() {}

        public init(patchGroup: String? = nil, baselineIdentity: PatchBaselineIdentity? = nil) {
            self.patchGroup = patchGroup
            self.baselineIdentity = baselineIdentity
        }

    }

    public struct CreatePatchBaselineResult: Serializable, Initializable {
        /// The ID of the created patch baseline.
        var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

    }

    public struct DeleteMaintenanceWindowRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window to delete.
        var windowId: String = ""

        public init() {}

        public init(windowId: String) {
            self.windowId = windowId
        }

    }

    public struct DescribePatchGroupsRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of patch groups to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct GetPatchBaselineForPatchGroupRequest: Serializable, Initializable {
        /// The name of the patch group whose patch baseline should be retrieved.
        var patchGroup: String = ""

        public init() {}

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

    }

    public struct DescribeActivationsFilter: Serializable, Initializable {
        /// The name of the filter.
        var filterKey: String? = nil
        /// The filter values.
        var filterValues: [String]? = nil

        public init() {}

        public init(filterKey: String? = nil, filterValues: [String]? = nil) {
            self.filterKey = filterKey
            self.filterValues = filterValues
        }

    }

    public struct ListTagsForResourceRequest: Serializable, Initializable {
        /// The resource ID for which you want to see a list of tags.
        var resourceId: String = ""
        /// Returns a list of tags for a specific resource type.
        var resourceType: String = ""

        public init() {}

        public init(resourceId: String, resourceType: String) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

    }

    public struct GetAutomationExecutionRequest: Serializable, Initializable {
        /// The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated.
        var automationExecutionId: String = ""

        public init() {}

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

    }

    public struct Parameter: Serializable, Initializable {
        /// The type of parameter. Valid values include the following: String, String list, Secure string.
        var type: String? = nil
        /// The parameter value.
        var value: String? = nil
        /// The name of the parameter.
        var name: String? = nil

        public init() {}

        public init(type: String? = nil, value: String? = nil, name: String? = nil) {
            self.type = type
            self.value = value
            self.name = name
        }

    }

    public struct CreateActivationResult: Serializable, Initializable {
        /// The ID number generated by the system when it processed the activation. The activation ID functions like a user name.
        var activationId: String? = nil
        /// The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID. 
        var activationCode: String? = nil

        public init() {}

        public init(activationId: String? = nil, activationCode: String? = nil) {
            self.activationId = activationId
            self.activationCode = activationCode
        }

    }

    public struct DescribeMaintenanceWindowExecutionTasksResult: Serializable, Initializable {
        /// Information about the task executions.
        var windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskIdentities = windowExecutionTaskIdentities
            self.nextToken = nextToken
        }

    }

    public struct DescribeInstanceAssociationsStatusRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The instance IDs for which you want association status information.
        var instanceId: String = ""
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

    }

    public struct PutParameterResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListDocumentVersionsResult: Serializable, Initializable {
        /// The document versions.
        var documentVersions: [DocumentVersionInfo]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(documentVersions: [DocumentVersionInfo]? = nil, nextToken: String? = nil) {
            self.documentVersions = documentVersions
            self.nextToken = nextToken
        }

    }

    public struct ListInventoryEntriesRequest: Serializable, Initializable {
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        var filters: [InventoryFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The instance ID for which you want inventory information.
        var instanceId: String = ""
        /// The type of inventory item for which you want information.
        var typeName: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, filters: [InventoryFilter]? = nil, nextToken: String? = nil, instanceId: String, typeName: String) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.typeName = typeName
        }

    }

    public struct UpdateAssociationRequest: Serializable, Initializable {
        /// An Amazon S3 bucket where you want to store the results of this request.  "{ \"S3Location\": { \"OutputS3Region\": \"&lt;region&gt;\", \"OutputS3BucketName\": \"bucket name\", \"OutputS3KeyPrefix\": \"folder name\" } }" 
        var outputLocation: InstanceAssociationOutputLocation? = nil
        /// The ID of the association you want to update. 
        var associationId: String = ""
        /// The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}
        var parameters: [String: [String]]? = nil
        /// The cron expression used to schedule the association that you want to update. Supported expressions are every half, 1, 2, 4, 8 or 12 hour(s); every specified day and time of the week. For example: cron(0 0/30 * 1/1 * ? *) to run every thirty minutes; cron(0 0 0/4 1/1 * ? *) to run every four hours; and cron(0 0 10 ? * SUN *) to run every Sunday at 10 a.m.
        var scheduleExpression: String? = nil
        /// The document version you want update for the association. 
        var documentVersion: String? = nil

        public init() {}

        public init(outputLocation: InstanceAssociationOutputLocation? = nil, associationId: String, parameters: [String: [String]]? = nil, scheduleExpression: String? = nil, documentVersion: String? = nil) {
            self.outputLocation = outputLocation
            self.associationId = associationId
            self.parameters = parameters
            self.scheduleExpression = scheduleExpression
            self.documentVersion = documentVersion
        }

    }

    public struct GetCommandInvocationRequest: Serializable, Initializable {
        /// (Required) The parent command ID of the invocation plugin.
        var commandId: String = ""
        /// (Optional) The name of the plugin for which you want detailed results. If the SSM document contains only one plugin, the name can be omitted and the details will be returned.
        var pluginName: String? = nil
        /// (Required) The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        var instanceId: String = ""

        public init() {}

        public init(commandId: String, pluginName: String? = nil, instanceId: String) {
            self.commandId = commandId
            self.pluginName = pluginName
            self.instanceId = instanceId
        }

    }

    public struct MaintenanceWindowExecutionTaskInvocationIdentity: Serializable, Initializable {
        /// The time the invocation started.
        var startTime: Date? = nil
        /// The status of the task invocation.
        var status: String? = nil
        /// The ID of the Maintenance Window execution that ran the task.
        var windowExecutionId: String? = nil
        /// The ID of the task invocation.
        var invocationId: String? = nil
        /// The parameters that were provided for the invocation when it was executed.
        var parameters: String? = nil
        /// The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID.
        var executionId: String? = nil
        /// The time the invocation finished.
        var endTime: Date? = nil
        /// The ID of the target definition in this Maintenance Window the invocation was performed for.
        var windowTargetId: String? = nil
        /// The ID of the specific task execution in the Maintenance Window execution.
        var taskExecutionId: String? = nil
        /// The details explaining the status of the task invocation. Only available for certain Status values. 
        var statusDetails: String? = nil
        /// User-provided value that was specified when the target was registered with the Maintenance Window. This was also included in any CloudWatch events raised during the task invocation.
        var ownerInformation: String? = nil

        public init() {}

        public init(startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, invocationId: String? = nil, parameters: String? = nil, executionId: String? = nil, endTime: Date? = nil, windowTargetId: String? = nil, taskExecutionId: String? = nil, statusDetails: String? = nil, ownerInformation: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.invocationId = invocationId
            self.parameters = parameters
            self.executionId = executionId
            self.endTime = endTime
            self.windowTargetId = windowTargetId
            self.taskExecutionId = taskExecutionId
            self.statusDetails = statusDetails
            self.ownerInformation = ownerInformation
        }

    }

    public struct DeleteAssociationResult: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateDocumentDefaultVersionResult: Serializable, Initializable {
        /// The description of a custom document that you want to set as the default version.
        var description: DocumentDefaultVersionDescription? = nil

        public init() {}

        public init(description: DocumentDefaultVersionDescription? = nil) {
            self.description = description
        }

    }

    public struct CreateAssociationBatchResult: Serializable, Initializable {
        /// Information about the associations that succeeded.
        var successful: [AssociationDescription]? = nil
        /// Information about the associations that failed.
        var failed: [FailedCreateAssociation]? = nil

        public init() {}

        public init(successful: [AssociationDescription]? = nil, failed: [FailedCreateAssociation]? = nil) {
            self.successful = successful
            self.failed = failed
        }

    }

    public struct InstancePatchState: Serializable, Initializable {
        /// The number of patches not specified in the patch baseline that are installed on the instance.
        var installedOtherCount: Int32? = nil
        /// The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install.
        var failedCount: Int32? = nil
        /// The time the most recent patching operation completed on the instance.
        var operationEndTime: Date = Date()
        /// The name of the patch group the managed instance belongs to.
        var patchGroup: String = ""
        /// The ID of the patch baseline used to patch the instance.
        var baselineId: String = ""
        /// The number of patches from the patch baseline that are applicable for the instance but aren’t currently installed.
        var missingCount: Int32? = nil
        /// The ID of the managed instance the high-level patch compliance information was collected for.
        var instanceId: String = ""
        /// The type of patching operation that was performed: SCAN (assess patch compliance state) or INSTALL (install missing patches).
        var operation: String = ""
        /// The number of patches from the patch baseline that aren’t applicable for the instance and hence aren’t installed on the instance.
        var notApplicableCount: Int32? = nil
        /// The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected.
        var snapshotId: String? = nil
        /// The number of patches from the patch baseline that are installed on the instance.
        var installedCount: Int32? = nil
        /// The time the most recent patching operation was started on the instance.
        var operationStartTime: Date = Date()
        /// Placeholder information, this field will always be empty in the current release of the service.
        var ownerInformation: String? = nil

        public init() {}

        public init(installedOtherCount: Int32? = nil, failedCount: Int32? = nil, operationEndTime: Date, patchGroup: String, baselineId: String, missingCount: Int32? = nil, instanceId: String, operation: String, notApplicableCount: Int32? = nil, snapshotId: String? = nil, installedCount: Int32? = nil, operationStartTime: Date, ownerInformation: String? = nil) {
            self.installedOtherCount = installedOtherCount
            self.failedCount = failedCount
            self.operationEndTime = operationEndTime
            self.patchGroup = patchGroup
            self.baselineId = baselineId
            self.missingCount = missingCount
            self.instanceId = instanceId
            self.operation = operation
            self.notApplicableCount = notApplicableCount
            self.snapshotId = snapshotId
            self.installedCount = installedCount
            self.operationStartTime = operationStartTime
            self.ownerInformation = ownerInformation
        }

    }

    public struct MaintenanceWindowExecutionTaskIdentity: Serializable, Initializable {
        /// The time the task execution started.
        var startTime: Date? = nil
        /// The status of the task execution.
        var status: String? = nil
        /// The ID of the Maintenance Window execution that ran the task.
        var windowExecutionId: String? = nil
        /// The ARN of the executed task.
        var taskArn: String? = nil
        /// The type of executed task.
        var taskType: String? = nil
        /// The time the task execution finished.
        var endTime: Date? = nil
        /// The ID of the specific task execution in the Maintenance Window execution.
        var taskExecutionId: String? = nil
        /// The details explaining the status of the task execution. Only available for certain status values.
        var statusDetails: String? = nil

        public init() {}

        public init(startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, taskArn: String? = nil, taskType: String? = nil, endTime: Date? = nil, taskExecutionId: String? = nil, statusDetails: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.taskArn = taskArn
            self.taskType = taskType
            self.endTime = endTime
            self.taskExecutionId = taskExecutionId
            self.statusDetails = statusDetails
        }

    }

    public struct MaintenanceWindowExecution: Serializable, Initializable {
        /// The time the execution finished.
        var endTime: Date? = nil
        /// The ID of the Maintenance Window.
        var windowId: String? = nil
        /// The time the execution started.
        var startTime: Date? = nil
        /// The status of the execution.
        var status: String? = nil
        /// The ID of the Maintenance Window execution.
        var windowExecutionId: String? = nil
        /// The details explaining the Status. Only available for certain status values.
        var statusDetails: String? = nil

        public init() {}

        public init(endTime: Date? = nil, windowId: String? = nil, startTime: Date? = nil, status: String? = nil, windowExecutionId: String? = nil, statusDetails: String? = nil) {
            self.endTime = endTime
            self.windowId = windowId
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.statusDetails = statusDetails
        }

    }

    public struct PutInventoryResult: Serializable, Initializable {

        public init() {}

    }

    public struct ListDocumentsResult: Serializable, Initializable {
        /// The names of the SSM documents.
        var documentIdentifiers: [DocumentIdentifier]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(documentIdentifiers: [DocumentIdentifier]? = nil, nextToken: String? = nil) {
            self.documentIdentifiers = documentIdentifiers
            self.nextToken = nextToken
        }

    }

    public struct DescribeAvailablePatchesRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// Filters used to scope down the returned patches.
        var filters: [PatchOrchestratorFilter]? = nil
        /// The maximum number of patches to return (per page).
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [PatchOrchestratorFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

    }

    public struct ListTagsForResourceResult: Serializable, Initializable {
        /// A list of tags.
        var tagList: [Tag]? = nil

        public init() {}

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

    }

    public struct StepExecution: Serializable, Initializable {
        /// If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated.
        var executionEndTime: Date? = nil
        /// The name of this execution step.
        var stepName: String? = nil
        /// The action this step performs. The action determines the behavior of the step.
        var action: String? = nil
        /// Fully-resolved values passed into the step before execution.
        var inputs: [String: String]? = nil
        /// If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated.
        var executionStartTime: Date? = nil
        /// Returned values from the execution of the step.
        var outputs: [String: [String]]? = nil
        /// The response code returned by the execution of the step.
        var responseCode: String? = nil
        /// If a step failed, this message explains why the execution failed.
        var failureMessage: String? = nil
        /// The execution status for this step. Valid values include: Pending, InProgress, Success, Cancelled, Failed, and TimedOut.
        var stepStatus: String? = nil
        /// A message associated with the response code for an execution.
        var response: String? = nil

        public init() {}

        public init(executionEndTime: Date? = nil, stepName: String? = nil, action: String? = nil, inputs: [String: String]? = nil, executionStartTime: Date? = nil, outputs: [String: [String]]? = nil, responseCode: String? = nil, failureMessage: String? = nil, stepStatus: String? = nil, response: String? = nil) {
            self.executionEndTime = executionEndTime
            self.stepName = stepName
            self.action = action
            self.inputs = inputs
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.responseCode = responseCode
            self.failureMessage = failureMessage
            self.stepStatus = stepStatus
            self.response = response
        }

    }

    public struct AssociationOverview: Serializable, Initializable {
        /// The status of the association. Status can be: Pending, Success, or Failed.
        var status: String? = nil
        /// Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status.
        var associationStatusAggregatedCount: [String: Int32]? = nil
        /// A detailed status of the association.
        var detailedStatus: String? = nil

        public init() {}

        public init(status: String? = nil, associationStatusAggregatedCount: [String: Int32]? = nil, detailedStatus: String? = nil) {
            self.status = status
            self.associationStatusAggregatedCount = associationStatusAggregatedCount
            self.detailedStatus = detailedStatus
        }

    }

    public struct GetMaintenanceWindowExecutionTaskResult: Serializable, Initializable {
        /// The priority of the task.
        var priority: Int32? = nil
        /// The role that was assumed when executing the task.
        var serviceRole: String? = nil
        /// The ID of the specific task execution in the Maintenance Window task that was retrieved.
        var taskExecutionId: String? = nil
        /// The time the task execution started.
        var startTime: Date? = nil
        /// The ID of the Maintenance Window execution that includes the task.
        var windowExecutionId: String? = nil
        /// The ARN of the executed task.
        var taskArn: String? = nil
        /// The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.
        var maxErrors: String? = nil
        /// The status of the task.
        var status: String? = nil
        /// The parameters passed to the task when it was executed. The map has the following format: Key: string, 1 ≤ length ≤ 255 Value: an array of strings where each string 1 ≤ length ≤ 255
        var taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]? = nil
        /// The time the task execution completed.
        var endTime: Date? = nil
        /// The defined maximum number of task executions that could be run in parallel.
        var maxConcurrency: String? = nil
        /// The type of task executed.
        var type: String? = nil
        /// The details explaining the Status. Only available for certain status values.
        var statusDetails: String? = nil

        public init() {}

        public init(priority: Int32? = nil, serviceRole: String? = nil, taskExecutionId: String? = nil, startTime: Date? = nil, windowExecutionId: String? = nil, taskArn: String? = nil, maxErrors: String? = nil, status: String? = nil, taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]? = nil, endTime: Date? = nil, maxConcurrency: String? = nil, type: String? = nil, statusDetails: String? = nil) {
            self.priority = priority
            self.serviceRole = serviceRole
            self.taskExecutionId = taskExecutionId
            self.startTime = startTime
            self.windowExecutionId = windowExecutionId
            self.taskArn = taskArn
            self.maxErrors = maxErrors
            self.status = status
            self.taskParameters = taskParameters
            self.endTime = endTime
            self.maxConcurrency = maxConcurrency
            self.type = type
            self.statusDetails = statusDetails
        }

    }

    public struct CreateDocumentResult: Serializable, Initializable {
        /// Information about the SSM document.
        var documentDescription: DocumentDescription? = nil

        public init() {}

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

    }

    public struct DescribeMaintenanceWindowExecutionsResult: Serializable, Initializable {
        /// Information about the Maintenance Windows execution.
        var windowExecutions: [MaintenanceWindowExecution]? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil

        public init() {}

        public init(windowExecutions: [MaintenanceWindowExecution]? = nil, nextToken: String? = nil) {
            self.windowExecutions = windowExecutions
            self.nextToken = nextToken
        }

    }

    public struct ListCommandInvocationsRequest: Serializable, Initializable {
        /// (Optional) If set this returns the response of the command executions and any command output. By default this is set to False. 
        var details: Bool? = nil
        /// (Optional) One or more filters. Use a filter to return a more specific list of results.
        var filters: [CommandFilter]? = nil
        /// (Optional) The invocations for a specific command ID.
        var commandId: String? = nil
        /// (Optional) The command execution details for a specific instance ID.
        var instanceId: String? = nil
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(details: Bool? = nil, filters: [CommandFilter]? = nil, commandId: String? = nil, instanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.details = details
            self.filters = filters
            self.commandId = commandId
            self.instanceId = instanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct GetPatchBaselineResult: Serializable, Initializable {
        /// The ID of the retrieved patch baseline.
        var baselineId: String? = nil
        /// The date the patch baseline was last modified.
        var modifiedDate: Date? = nil
        /// A list of explicitly approved patches for the baseline.
        var approvedPatches: [String]? = nil
        /// The name of the patch baseline.
        var name: String? = nil
        /// A list of explicitly rejected patches for the baseline.
        var rejectedPatches: [String]? = nil
        /// A set of rules used to include patches in the baseline.
        var approvalRules: PatchRuleGroup? = nil
        /// A set of global filters used to exclude patches from the baseline.
        var globalFilters: PatchFilterGroup? = nil
        /// The date the patch baseline was created.
        var createdDate: Date? = nil
        /// Patch groups included in the patch baseline.
        var patchGroups: [String]? = nil
        /// A description of the patch baseline.
        var description: String? = nil

        public init() {}

        public init(baselineId: String? = nil, modifiedDate: Date? = nil, approvedPatches: [String]? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, createdDate: Date? = nil, patchGroups: [String]? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.modifiedDate = modifiedDate
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.createdDate = createdDate
            self.patchGroups = patchGroups
            self.description = description
        }

    }

    public struct CreateAssociationResult: Serializable, Initializable {
        /// Information about the association.
        var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

    }

    public struct DescribeMaintenanceWindowsResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// Information about the Maintenance Windows.
        var windowIdentities: [MaintenanceWindowIdentity]? = nil

        public init() {}

        public init(nextToken: String? = nil, windowIdentities: [MaintenanceWindowIdentity]? = nil) {
            self.nextToken = nextToken
            self.windowIdentities = windowIdentities
        }

    }

    public struct DescribeAvailablePatchesResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// An array of patches. Each entry in the array is a patch structure.
        var patches: [Patch]? = nil

        public init() {}

        public init(nextToken: String? = nil, patches: [Patch]? = nil) {
            self.nextToken = nextToken
            self.patches = patches
        }

    }

    public struct InventoryResultEntity: Serializable, Initializable {
        /// ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID. 
        var id: String? = nil
        /// The data section in the inventory result entity json.
        var data: [String: InventoryResultItem]? = nil

        public init() {}

        public init(id: String? = nil, data: [String: InventoryResultItem]? = nil) {
            self.id = id
            self.data = data
        }

    }

    public struct UpdateMaintenanceWindowRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window to update.
        var windowId: String = ""
        /// The name of the Maintenance Window.
        var name: String? = nil
        /// Whether the Maintenance Window is enabled.
        var enabled: Bool? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        var allowUnassociatedTargets: Bool? = nil
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        var schedule: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        var duration: Int32? = nil

        public init() {}

        public init(windowId: String, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil) {
            self.windowId = windowId
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
        }

    }

    public struct DescribeParametersRequest: Serializable, Initializable {
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// One or more filters. Use a filter to return a more specific list of results.
        var filters: [ParametersFilter]? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, filters: [ParametersFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

    }

    public struct InstancePatchStateFilter: Serializable, Initializable {
        /// The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan.
        var type: String = ""
        /// The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount.
        var key: String = ""
        /// The value for the filter, must be an integer greater than or equal to 0.
        var values: [String] = []

        public init() {}

        public init(type: String, key: String, values: [String]) {
            self.type = type
            self.key = key
            self.values = values
        }

    }

    public struct GetDocumentResult: Serializable, Initializable {
        /// The contents of the SSM document.
        var content: String? = nil
        /// The document type.
        var documentType: String? = nil
        /// The name of the SSM document.
        var name: String? = nil
        /// The document version.
        var documentVersion: String? = nil

        public init() {}

        public init(content: String? = nil, documentType: String? = nil, name: String? = nil, documentVersion: String? = nil) {
            self.content = content
            self.documentType = documentType
            self.name = name
            self.documentVersion = documentVersion
        }

    }

    public struct UpdateManagedInstanceRoleRequest: Serializable, Initializable {
        /// The ID of the managed instance where you want to update the role.
        var instanceId: String = ""
        /// The IAM role you want to assign or change.
        var iamRole: String = ""

        public init() {}

        public init(instanceId: String, iamRole: String) {
            self.instanceId = instanceId
            self.iamRole = iamRole
        }

    }

    public struct PatchRule: Serializable, Initializable {
        /// The patch filter group that defines the criteria for the rule.
        var patchFilterGroup: PatchFilterGroup = PatchFilterGroup()
        /// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
        var approveAfterDays: Int32 = 0

        public init() {}

        public init(patchFilterGroup: PatchFilterGroup, approveAfterDays: Int32) {
            self.patchFilterGroup = patchFilterGroup
            self.approveAfterDays = approveAfterDays
        }

    }

    public struct DeregisterPatchBaselineForPatchGroupResult: Serializable, Initializable {
        /// The ID of the patch baseline the patch group was deregistered from.
        var baselineId: String? = nil
        /// The name of the patch group deregistered from the patch baseline.
        var patchGroup: String? = nil

        public init() {}

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

    }

    public struct GetAutomationExecutionResult: Serializable, Initializable {
        /// Detailed information about the current state of an automation execution.
        var automationExecution: AutomationExecution? = nil

        public init() {}

        public init(automationExecution: AutomationExecution? = nil) {
            self.automationExecution = automationExecution
        }

    }

    public struct DescribeEffectiveInstanceAssociationsResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// The associations for the requested instance.
        var associations: [InstanceAssociation]? = nil

        public init() {}

        public init(nextToken: String? = nil, associations: [InstanceAssociation]? = nil) {
            self.nextToken = nextToken
            self.associations = associations
        }

    }

    public struct UpdateAssociationStatusResult: Serializable, Initializable {
        /// Information about the association.
        var associationDescription: AssociationDescription? = nil

        public init() {}

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

    }

    public struct InstanceAssociationOutputUrl: Serializable, Initializable {
        /// The URL of Amazon S3 bucket where you want to store the results of this request.
        var s3OutputUrl: S3OutputUrl? = nil

        public init() {}

        public init(s3OutputUrl: S3OutputUrl? = nil) {
            self.s3OutputUrl = s3OutputUrl
        }

    }

    public struct InstanceAssociationStatusInfo: Serializable, Initializable {
        /// Status information about the instance association.
        var status: String? = nil
        /// The association ID.
        var associationId: String? = nil
        /// The instance ID where the association was created.
        var instanceId: String? = nil
        /// The name of the association.
        var name: String? = nil
        /// The date the instance association executed. 
        var executionDate: Date? = nil
        /// The association document verions.
        var documentVersion: String? = nil
        /// Summary information about association execution.
        var executionSummary: String? = nil
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        var outputUrl: InstanceAssociationOutputUrl? = nil
        /// An error code returned by the request to create the association.
        var errorCode: String? = nil
        /// Detailed status information about the instance association.
        var detailedStatus: String? = nil

        public init() {}

        public init(status: String? = nil, associationId: String? = nil, instanceId: String? = nil, name: String? = nil, executionDate: Date? = nil, documentVersion: String? = nil, executionSummary: String? = nil, outputUrl: InstanceAssociationOutputUrl? = nil, errorCode: String? = nil, detailedStatus: String? = nil) {
            self.status = status
            self.associationId = associationId
            self.instanceId = instanceId
            self.name = name
            self.executionDate = executionDate
            self.documentVersion = documentVersion
            self.executionSummary = executionSummary
            self.outputUrl = outputUrl
            self.errorCode = errorCode
            self.detailedStatus = detailedStatus
        }

    }

    public struct S3OutputUrl: Serializable, Initializable {
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        var outputUrl: String? = nil

        public init() {}

        public init(outputUrl: String? = nil) {
            self.outputUrl = outputUrl
        }

    }

    public struct GetMaintenanceWindowExecutionRequest: Serializable, Initializable {
        /// The ID of the Maintenance Window execution that includes the task.
        var windowExecutionId: String = ""

        public init() {}

        public init(windowExecutionId: String) {
            self.windowExecutionId = windowExecutionId
        }

    }

    public struct PatchFilter: Serializable, Initializable {
        /// The key for the filter (PRODUCT, CLASSIFICATION, MSRC_SEVERITY, PATCH_ID)
        var key: String = ""
        /// The value for the filter key.
        var values: [String] = []

        public init() {}

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

    }

    public struct GetParametersResult: Serializable, Initializable {
        /// A list of parameters used by the AWS account.
        var parameters: [Parameter]? = nil
        /// A list of parameters that are not formatted correctly or do not run when executed.
        var invalidParameters: [String]? = nil

        public init() {}

        public init(parameters: [Parameter]? = nil, invalidParameters: [String]? = nil) {
            self.parameters = parameters
            self.invalidParameters = invalidParameters
        }

    }

    public struct MaintenanceWindowTarget: Serializable, Initializable {
        /// The Maintenance Window ID where the target is registered.
        var windowId: String? = nil
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        var targets: [Target]? = nil
        /// The ID of the target.
        var windowTargetId: String? = nil
        /// The type of target.
        var resourceType: String? = nil
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        var ownerInformation: String? = nil

        public init() {}

        public init(windowId: String? = nil, targets: [Target]? = nil, windowTargetId: String? = nil, resourceType: String? = nil, ownerInformation: String? = nil) {
            self.windowId = windowId
            self.targets = targets
            self.windowTargetId = windowTargetId
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

    }

    public struct UpdateDocumentDefaultVersionRequest: Serializable, Initializable {
        /// The name of a custom document that you want to set as the default version.
        var name: String = ""
        /// The version of a custom document that you want to set as the default version.
        var documentVersion: String = ""

        public init() {}

        public init(name: String, documentVersion: String) {
            self.name = name
            self.documentVersion = documentVersion
        }

    }

    public struct ListAssociationsResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// The associations.
        var associations: [Association]? = nil

        public init() {}

        public init(nextToken: String? = nil, associations: [Association]? = nil) {
            self.nextToken = nextToken
            self.associations = associations
        }

    }

    public struct DescribeInstancePatchStatesResult: Serializable, Initializable {
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// The high-level patch state for the requested instances.
        var instancePatchStates: [InstancePatchState]? = nil

        public init() {}

        public init(nextToken: String? = nil, instancePatchStates: [InstancePatchState]? = nil) {
            self.nextToken = nextToken
            self.instancePatchStates = instancePatchStates
        }

    }

    public struct RemoveTagsFromResourceRequest: Serializable, Initializable {
        /// The resource ID for which you want to remove tags.
        var resourceId: String = ""
        /// The type of resource of which you want to remove a tag.
        var resourceType: String = ""
        /// Tag keys that you want to remove from the specified resource.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceId: String, resourceType: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.tagKeys = tagKeys
        }

    }

    public struct S3OutputLocation: Serializable, Initializable {
        /// The Amazon S3 bucket subfolder.
        var outputS3KeyPrefix: String? = nil
        /// The name of the Amazon S3 bucket.
        var outputS3BucketName: String? = nil
        /// The Amazon S3 region where the association information is stored.
        var outputS3Region: String? = nil

        public init() {}

        public init(outputS3KeyPrefix: String? = nil, outputS3BucketName: String? = nil, outputS3Region: String? = nil) {
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3BucketName = outputS3BucketName
            self.outputS3Region = outputS3Region
        }

    }

    public struct GetMaintenanceWindowRequest: Serializable, Initializable {
        /// The ID of the desired Maintenance Window.
        var windowId: String = ""

        public init() {}

        public init(windowId: String) {
            self.windowId = windowId
        }

    }

    public struct UpdateMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the created Maintenance Window.
        var windowId: String? = nil
        /// The name of the Maintenance Window.
        var name: String? = nil
        /// Whether the Maintenance Window is enabled.
        var enabled: Bool? = nil
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        var allowUnassociatedTargets: Bool? = nil
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        var schedule: String? = nil
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        var cutoff: Int32? = nil
        /// The duration of the Maintenance Window in hours.
        var duration: Int32? = nil

        public init() {}

        public init(windowId: String? = nil, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil) {
            self.windowId = windowId
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
        }

    }

    public struct DeleteActivationRequest: Serializable, Initializable {
        /// The ID of the activation that you want to delete.
        var activationId: String = ""

        public init() {}

        public init(activationId: String) {
            self.activationId = activationId
        }

    }

    public struct PutInventoryRequest: Serializable, Initializable {
        /// The inventory items that you want to add or update on instances.
        var items: [InventoryItem] = []
        /// One or more instance IDs where you want to add or update inventory items.
        var instanceId: String = ""

        public init() {}

        public init(items: [InventoryItem], instanceId: String) {
            self.items = items
            self.instanceId = instanceId
        }

    }

    public struct DescribeDocumentPermissionResponse: Serializable, Initializable {
        /// The account IDs that have permission to use this document. The ID can be either an AWS account or All.
        var accountIds: [String]? = nil

        public init() {}

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

    }

    public struct AssociationFilter: Serializable, Initializable {
        /// The name of the filter.
        var key: String = ""
        /// The filter value.
        var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

    }

    public struct NotificationConfig: Serializable, Initializable {
        /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        var notificationArn: String? = nil
        /// Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. 
        var notificationType: String? = nil
        /// The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see Monitoring Commands in the Amazon Elastic Compute Cloud User Guide .
        var notificationEvents: [String]? = nil

        public init() {}

        public init(notificationArn: String? = nil, notificationType: String? = nil, notificationEvents: [String]? = nil) {
            self.notificationArn = notificationArn
            self.notificationType = notificationType
            self.notificationEvents = notificationEvents
        }

    }

    public struct PutParameterRequest: Serializable, Initializable {
        /// Information about the parameter that you want to add to the system
        var description: String? = nil
        /// The parameter key ID that you want to add to the system.
        var keyId: String? = nil
        /// The type of parameter that you want to add to the system.
        var type: String = ""
        /// The name of the parameter that you want to add to the system.
        var name: String = ""
        /// The parameter value that you want to add to the system.
        var value: String = ""
        /// Overwrite an existing parameter.
        var overwrite: Bool? = nil

        public init() {}

        public init(description: String? = nil, keyId: String? = nil, type: String, name: String, value: String, overwrite: Bool? = nil) {
            self.description = description
            self.keyId = keyId
            self.type = type
            self.name = name
            self.value = value
            self.overwrite = overwrite
        }

    }

    public struct PatchBaselineIdentity: Serializable, Initializable {
        /// Whether this is the default baseline.
        var defaultBaseline: Bool? = nil
        /// The ID of the patch baseline.
        var baselineId: String? = nil
        /// The name of the patch baseline.
        var baselineName: String? = nil
        /// The description of the patch baseline.
        var baselineDescription: String? = nil

        public init() {}

        public init(defaultBaseline: Bool? = nil, baselineId: String? = nil, baselineName: String? = nil, baselineDescription: String? = nil) {
            self.defaultBaseline = defaultBaseline
            self.baselineId = baselineId
            self.baselineName = baselineName
            self.baselineDescription = baselineDescription
        }

    }

    public struct Association: Serializable, Initializable {
        /// The date on which the association was last run.
        var lastExecutionDate: Date? = nil
        /// The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule.
        var associationId: String? = nil
        /// The ID of the instance.
        var instanceId: String? = nil
        /// The name of the SSM document.
        var name: String? = nil
        /// The version of the document used in the association.
        var documentVersion: String? = nil
        /// The instances targeted by the request to create an association. 
        var targets: [Target]? = nil
        /// Information about the association.
        var overview: AssociationOverview? = nil
        /// A cron expression that specifies a schedule when the association runs.
        var scheduleExpression: String? = nil

        public init() {}

        public init(lastExecutionDate: Date? = nil, associationId: String? = nil, instanceId: String? = nil, name: String? = nil, documentVersion: String? = nil, targets: [Target]? = nil, overview: AssociationOverview? = nil, scheduleExpression: String? = nil) {
            self.lastExecutionDate = lastExecutionDate
            self.associationId = associationId
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.overview = overview
            self.scheduleExpression = scheduleExpression
        }

    }

    public struct Activation: Serializable, Initializable {
        /// The Amazon Identity and Access Management (IAM) role to assign to the managed instance.
        var iamRole: String? = nil
        /// Whether or not the activation is expired.
        var expired: Bool? = nil
        /// The maximum number of managed instances that can be registered using this activation.
        var registrationLimit: Int32? = nil
        /// The date when this activation can no longer be used to register managed instances.
        var expirationDate: Date? = nil
        /// The ID created by Systems Manager when you submitted the activation.
        var activationId: String? = nil
        /// The number of managed instances already registered with this activation.
        var registrationsCount: Int32? = nil
        /// The date the activation was created.
        var createdDate: Date? = nil
        /// A name for the managed instance when it is created.
        var defaultInstanceName: String? = nil
        /// A user defined description of the activation.
        var description: String? = nil

        public init() {}

        public init(iamRole: String? = nil, expired: Bool? = nil, registrationLimit: Int32? = nil, expirationDate: Date? = nil, activationId: String? = nil, registrationsCount: Int32? = nil, createdDate: Date? = nil, defaultInstanceName: String? = nil, description: String? = nil) {
            self.iamRole = iamRole
            self.expired = expired
            self.registrationLimit = registrationLimit
            self.expirationDate = expirationDate
            self.activationId = activationId
            self.registrationsCount = registrationsCount
            self.createdDate = createdDate
            self.defaultInstanceName = defaultInstanceName
            self.description = description
        }

    }

    public struct StartAutomationExecutionResult: Serializable, Initializable {
        /// The unique ID of a newly scheduled automation execution.
        var automationExecutionId: String? = nil

        public init() {}

        public init(automationExecutionId: String? = nil) {
            self.automationExecutionId = automationExecutionId
        }

    }

    public struct ListDocumentsRequest: Serializable, Initializable {
        /// One or more filters. Use a filter to return a more specific list of results.
        var documentFilterList: [DocumentFilter]? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        var nextToken: String? = nil
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(documentFilterList: [DocumentFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.documentFilterList = documentFilterList
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ListInventoryEntriesResult: Serializable, Initializable {
        /// The time that inventory information was collected for the instance(s).
        var captureTime: String? = nil
        /// A list of inventory items on the instance(s).
        var entries: [[String: String]]? = nil
        /// The inventory schema version used by the instance(s).
        var schemaVersion: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        var nextToken: String? = nil
        /// The instance ID targeted by the request to query inventory information.
        var instanceId: String? = nil
        /// The type of inventory item returned by the request.
        var typeName: String? = nil

        public init() {}

        public init(captureTime: String? = nil, entries: [[String: String]]? = nil, schemaVersion: String? = nil, nextToken: String? = nil, instanceId: String? = nil, typeName: String? = nil) {
            self.captureTime = captureTime
            self.entries = entries
            self.schemaVersion = schemaVersion
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.typeName = typeName
        }

    }

    public struct DeleteAssociationRequest: Serializable, Initializable {
        /// The name of the SSM document.
        var name: String? = nil
        /// The ID of the instance.
        var instanceId: String? = nil
        /// The association ID that you want to delete.
        var associationId: String? = nil

        public init() {}

        public init(name: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.associationId = associationId
        }

    }

    public struct EffectivePatch: Serializable, Initializable {
        /// Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch.
        var patch: Patch? = nil
        /// The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.
        var patchStatus: PatchStatus? = nil

        public init() {}

        public init(patch: Patch? = nil, patchStatus: PatchStatus? = nil) {
            self.patch = patch
            self.patchStatus = patchStatus
        }

    }

    public struct DocumentParameter: Serializable, Initializable {
        /// The type of parameter. The type can be either “String” or “StringList”.
        var type: String? = nil
        /// The name of the parameter.
        var name: String? = nil
        /// If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
        var defaultValue: String? = nil
        /// A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
        var description: String? = nil

        public init() {}

        public init(type: String? = nil, name: String? = nil, defaultValue: String? = nil, description: String? = nil) {
            self.type = type
            self.name = name
            self.defaultValue = defaultValue
            self.description = description
        }

    }

    public struct DeleteParameterRequest: Serializable, Initializable {
        /// The name of the parameter to delete.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StopAutomationExecutionRequest: Serializable, Initializable {
        /// The execution ID of the Automation to stop.
        var automationExecutionId: String = ""

        public init() {}

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

    }

    public struct DocumentFilter: Serializable, Initializable {
        /// The name of the filter.
        var key: String = ""
        /// The value of the filter.
        var value: String = ""

        public init() {}

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

    }

    public struct GetDefaultPatchBaselineResult: Serializable, Initializable {
        /// The ID of the default patch baseline.
        var baselineId: String? = nil

        public init() {}

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

    }

    public struct InstanceAssociationOutputLocation: Serializable, Initializable {
        /// An Amazon S3 bucket where you want to store the results of this request.
        var s3Location: S3OutputLocation? = nil

        public init() {}

        public init(s3Location: S3OutputLocation? = nil) {
            self.s3Location = s3Location
        }

    }

    public struct RegisterTargetWithMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the target definition in this Maintenance Window.
        var windowTargetId: String? = nil

        public init() {}

        public init(windowTargetId: String? = nil) {
            self.windowTargetId = windowTargetId
        }

    }

    public struct CreateMaintenanceWindowResult: Serializable, Initializable {
        /// The ID of the created Maintenance Window.
        var windowId: String? = nil

        public init() {}

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

    }

    public struct DocumentVersionInfo: Serializable, Initializable {
        /// The date the document was created.
        var createdDate: Date? = nil
        /// The document name.
        var name: String? = nil
        /// An identifier for the default version of the document.
        var isDefaultVersion: Bool? = nil
        /// The document version.
        var documentVersion: String? = nil

        public init() {}

        public init(createdDate: Date? = nil, name: String? = nil, isDefaultVersion: Bool? = nil, documentVersion: String? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.isDefaultVersion = isDefaultVersion
            self.documentVersion = documentVersion
        }

    }

}