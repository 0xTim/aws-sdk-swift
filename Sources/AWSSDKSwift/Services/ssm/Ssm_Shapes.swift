// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Ssm {

    public struct DescribePatchBaselinesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// Each element in the array is a structure containing:  Key: (string, "NAME_PREFIX" or "OWNER") Value: (array of strings, exactly 1 entry, between 1 and 255 characters)
        public let filters: [PatchOrchestratorFilter]?
        /// The maximum number of patch baselines to return (per page).
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [PatchOrchestratorFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeActivationsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of activations for your AWS account.
        public let activationList: [Activation]?
        /// The token for the next set of items to return. Use this token to get the next set of results. 
        public let nextToken: String?

        public init(activationList: [Activation]? = nil, nextToken: String? = nil) {
            self.activationList = activationList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activationList = "ActivationList"
            case nextToken = "NextToken"
        }
    }

    public struct FailedCreateAssociationList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedCreateAssociationEntry", required: false, type: .list)
        ]
        public let failedCreateAssociationEntry: [FailedCreateAssociation]?

        public init(failedCreateAssociationEntry: [FailedCreateAssociation]? = nil) {
            self.failedCreateAssociationEntry = failedCreateAssociationEntry
        }

        private enum CodingKeys: String, CodingKey {
            case failedCreateAssociationEntry = "FailedCreateAssociationEntry"
        }
    }

    public struct DescribeEffectivePatchesForPatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EffectivePatches", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// An array of patches and patch status.
        public let effectivePatches: [EffectivePatch]?

        public init(nextToken: String? = nil, effectivePatches: [EffectivePatch]? = nil) {
            self.nextToken = nextToken
            self.effectivePatches = effectivePatches
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case effectivePatches = "EffectivePatches"
        }
    }

    public struct UpdateAssociationStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "AssociationStatus", required: true, type: .structure)
        ]
        /// The name of the SSM document.
        public let name: String
        /// The ID of the instance.
        public let instanceId: String
        /// The association status.
        public let associationStatus: AssociationStatus

        public init(name: String, instanceId: String, associationStatus: AssociationStatus) {
            self.name = name
            self.instanceId = instanceId
            self.associationStatus = associationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case instanceId = "InstanceId"
            case associationStatus = "AssociationStatus"
        }
    }

    public struct DeregisterTargetFromMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window the target was removed from.
        public let windowId: String?
        /// The ID of the removed target definition.
        public let windowTargetId: String?

        public init(windowId: String? = nil, windowTargetId: String? = nil) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTargetId = "WindowTargetId"
        }
    }

    public struct GetParameterRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public let withDecryption: Bool?
        /// The name of the parameter you want to query.
        public let name: String

        public init(withDecryption: Bool? = nil, name: String) {
            self.withDecryption = withDecryption
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case withDecryption = "WithDecryption"
            case name = "Name"
        }
    }

    public struct InventoryItemList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        public let item: [InventoryItem]?

        public init(item: [InventoryItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public enum ResourceTypeForTagging: String, CustomStringConvertible, Codable {
        case managedinstance = "ManagedInstance"
        case maintenancewindow = "MaintenanceWindow"
        case parameter = "Parameter"
        public var description: String { return self.rawValue }
    }

    public struct ParametersFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The name of the filter.
        public let key: ParametersFilterKey
        /// The filter values.
        public let values: [String]

        public init(key: ParametersFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public enum InstanceInformationFilterKey: String, CustomStringConvertible, Codable {
        case instanceids = "InstanceIds"
        case agentversion = "AgentVersion"
        case pingstatus = "PingStatus"
        case platformtypes = "PlatformTypes"
        case activationids = "ActivationIds"
        case iamrole = "IamRole"
        case resourcetype = "ResourceType"
        case associationstatus = "AssociationStatus"
        public var description: String { return self.rawValue }
    }

    public enum PlatformType: String, CustomStringConvertible, Codable {
        case windows = "Windows"
        case linux = "Linux"
        public var description: String { return self.rawValue }
    }

    public struct ResultAttribute: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value: AWS:InstanceInformation.
        public let typeName: String

        public init(typeName: String) {
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
        }
    }

    public struct DescribePatchGroupsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mappings", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Each entry in the array contains: PatchGroup: string (between 1 and 256 characters, Regex: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$) PatchBaselineIdentity: A PatchBaselineIdentity element. 
        public let mappings: [PatchGroupPatchBaselineMapping]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(mappings: [PatchGroupPatchBaselineMapping]? = nil, nextToken: String? = nil) {
            self.mappings = mappings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case mappings = "Mappings"
            case nextToken = "NextToken"
        }
    }

    public struct RegisterTargetWithMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window the target should be registered with.
        public let windowId: String
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public let targets: [Target]
        /// User-provided idempotency token.
        public let clientToken: String?
        /// The type of target being registered with the Maintenance Window.
        public let resourceType: MaintenanceWindowResourceType
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public let ownerInformation: String?

        public init(windowId: String, targets: [Target], clientToken: String? = nil, resourceType: MaintenanceWindowResourceType, ownerInformation: String? = nil) {
            self.windowId = windowId
            self.targets = targets
            self.clientToken = clientToken
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case targets = "Targets"
            case clientToken = "ClientToken"
            case resourceType = "ResourceType"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct GetDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The name of the SSM document.
        public let name: String
        /// The document version for which you want information.
        public let documentVersion: String?

        public init(name: String, documentVersion: String? = nil) {
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct FailureDetails: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureType", required: false, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .map), 
            AWSShapeMember(label: "FailureStage", required: false, type: .string)
        ]
        /// The type of Automation failure. Failure types include the following: Action, Permission, Throttling, Verification, Internal.
        public let failureType: String?
        /// Detailed information about the Automation step failure.
        public let details: [String: [String]]?
        /// The stage of the Automation execution when the failure occurred. The stages include the following: InputValidation, PreVerification, Invocation, PostVerification.
        public let failureStage: String?

        public init(failureType: String? = nil, details: [String: [String]]? = nil, failureStage: String? = nil) {
            self.failureType = failureType
            self.details = details
            self.failureStage = failureStage
        }

        private enum CodingKeys: String, CodingKey {
            case failureType = "FailureType"
            case details = "Details"
            case failureStage = "FailureStage"
        }
    }

    public struct DescribeMaintenanceWindowTargetsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the Maintenance Window whose targets should be retrieved.
        public let windowId: String
        /// Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation.
        public let filters: [MaintenanceWindowFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListAssociationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationFilterList", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters. Use a filter to return a more specific list of results.
        public let associationFilterList: AssociationFilterList?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(associationFilterList: AssociationFilterList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.associationFilterList = associationFilterList
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case associationFilterList = "AssociationFilterList"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetInventorySchemaRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The type of inventory item to return.
        public let typeName: String?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(typeName: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.typeName = typeName
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct CreatePatchBaselineRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// User-provided idempotency token.
        public let clientToken: String?
        /// A list of explicitly approved patches for the baseline.
        public let approvedPatches: [String]?
        /// The name of the patch baseline.
        public let name: String
        /// A list of explicitly rejected patches for the baseline.
        public let rejectedPatches: [String]?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// A description of the patch baseline.
        public let description: String?

        public init(clientToken: String? = nil, approvedPatches: [String]? = nil, name: String, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil) {
            self.clientToken = clientToken
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case approvedPatches = "ApprovedPatches"
            case name = "Name"
            case rejectedPatches = "RejectedPatches"
            case approvalRules = "ApprovalRules"
            case globalFilters = "GlobalFilters"
            case description = "Description"
        }
    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "TaskId", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the Maintenance Window execution the task is part of.
        public let windowExecutionId: String
        /// The ID of the specific task in the Maintenance Window task that should be retrieved.
        public let taskId: String
        /// Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED.
        public let filters: [MaintenanceWindowFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(windowExecutionId: String, taskId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
            case taskId = "TaskId"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeInstancePatchesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Each entry in the array is a structure containing: Key (string, between 1 and 128 characters) Values (array of strings, each string between 1 and 256 characters)
        public let filters: [PatchOrchestratorFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the instance whose patch state information should be retrieved.
        public let instanceId: String
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?

        public init(filters: [PatchOrchestratorFilter]? = nil, nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case maxResults = "MaxResults"
        }
    }

    public struct DeregisterTargetFromMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "WindowTargetId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window the target should be removed from.
        public let windowId: String
        /// The ID of the target definition to remove.
        public let windowTargetId: String

        public init(windowId: String, windowTargetId: String) {
            self.windowId = windowId
            self.windowTargetId = windowTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTargetId = "WindowTargetId"
        }
    }

    public struct DeleteResourceDataSyncRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncName", required: true, type: .string)
        ]
        /// The name of the configuration to delete.
        public let syncName: String

        public init(syncName: String) {
            self.syncName = syncName
        }

        private enum CodingKeys: String, CodingKey {
            case syncName = "SyncName"
        }
    }

    public struct DescribeMaintenanceWindowExecutionTasksRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the Maintenance Window execution whose task executions should be retrieved.
        public let windowExecutionId: String
        /// Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED. 
        public let filters: [MaintenanceWindowFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(windowExecutionId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowExecutionId = windowExecutionId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeInstancePatchStatesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: true, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The ID of the instance whose patch state information should be retrieved.
        public let instanceIds: [String]
        /// The maximum number of instances to return (per page).
        public let maxResults: Int32?

        public init(nextToken: String? = nil, instanceIds: [String], maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instanceIds = "InstanceIds"
            case maxResults = "MaxResults"
        }
    }

    public struct SendCommandRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string), 
            AWSShapeMember(label: "DocumentHashType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "DocumentName", required: true, type: .string), 
            AWSShapeMember(label: "DocumentHash", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "TimeoutSeconds", required: false, type: .integer)
        ]
        /// The IAM role that Systems Manager uses to send notifications. 
        public let serviceRoleArn: String?
        /// The name of the S3 bucket where command execution responses should be stored.
        public let outputS3BucketName: String?
        /// Configurations for sending notifications.
        public let notificationConfig: NotificationConfig?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public let comment: String?
        /// (Optional) An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call. For more information about how to use Targets, see Sending Commands to a Fleet.
        public let targets: [Target]?
        /// The directory structure within the S3 bucket where the responses should be stored.
        public let outputS3KeyPrefix: String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        public let documentHashType: DocumentHashType?
        /// The instance IDs where the command should execute. You can specify a maximum of 50 IDs. If you prefer not to list individual instance IDs, you can instead send commands to a fleet of instances using the Targets parameter, which accepts EC2 tags. For more information about how to use Targets, see Sending Commands to a Fleet.
        public let instanceIds: [String]?
        /// The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like 10 or a percentage like 10%. The default value is 50. For more information about how to use MaxErrors, see Using Error Controls.
        public let maxErrors: String?
        /// The required and optional parameters specified in the document being executed.
        public let parameters: [String: [String]]?
        /// Required. The name of the Systems Manager document to execute. This can be a public document or a custom document.
        public let documentName: String
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        public let documentHash: String?
        /// (Optional) The maximum number of instances that are allowed to execute the command at the same time. You can specify a number such as 10 or a percentage such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see Using Concurrency Controls.
        public let maxConcurrency: String?
        /// If this time is reached and the command has not already started executing, it will not execute.
        public let timeoutSeconds: Int32?

        public init(serviceRoleArn: String? = nil, outputS3BucketName: String? = nil, notificationConfig: NotificationConfig? = nil, comment: String? = nil, targets: [Target]? = nil, outputS3KeyPrefix: String? = nil, outputS3Region: String? = nil, documentHashType: DocumentHashType? = nil, instanceIds: [String]? = nil, maxErrors: String? = nil, parameters: [String: [String]]? = nil, documentName: String, documentHash: String? = nil, maxConcurrency: String? = nil, timeoutSeconds: Int32? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.outputS3BucketName = outputS3BucketName
            self.notificationConfig = notificationConfig
            self.comment = comment
            self.targets = targets
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3Region = outputS3Region
            self.documentHashType = documentHashType
            self.instanceIds = instanceIds
            self.maxErrors = maxErrors
            self.parameters = parameters
            self.documentName = documentName
            self.documentHash = documentHash
            self.maxConcurrency = maxConcurrency
            self.timeoutSeconds = timeoutSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRoleArn = "ServiceRoleArn"
            case outputS3BucketName = "OutputS3BucketName"
            case notificationConfig = "NotificationConfig"
            case comment = "Comment"
            case targets = "Targets"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case outputS3Region = "OutputS3Region"
            case documentHashType = "DocumentHashType"
            case instanceIds = "InstanceIds"
            case maxErrors = "MaxErrors"
            case parameters = "Parameters"
            case documentName = "DocumentName"
            case documentHash = "DocumentHash"
            case maxConcurrency = "MaxConcurrency"
            case timeoutSeconds = "TimeoutSeconds"
        }
    }

    public struct GetMaintenanceWindowExecutionTaskRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "TaskId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window execution that includes the task.
        public let windowExecutionId: String
        /// The ID of the specific task execution in the Maintenance Window task that should be retrieved.
        public let taskId: String

        public init(windowExecutionId: String, taskId: String) {
            self.windowExecutionId = windowExecutionId
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
            case taskId = "TaskId"
        }
    }

    public struct CommandPlugin: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ResponseStartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResponseFinishDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Output", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorUrl", required: false, type: .string), 
            AWSShapeMember(label: "StandardOutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .integer), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The status of this plugin. You can execute a document with multiple plugins.
        public let status: CommandPluginStatus?
        /// The time the plugin started executing. 
        public let responseStartDateTime: Double?
        /// The time the plugin stopped executing. Could stop prematurely if, for example, a cancel command was sent. 
        public let responseFinishDateTime: Double?
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript  test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix; i-1234567876543 is the instance ID; awsrunShellScript is the name of the plugin.
        public let outputS3BucketName: String?
        /// The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent. 
        public let name: String?
        /// Output of the plugin execution.
        public let output: String?
        /// The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty.
        public let standardErrorUrl: String?
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If the Amazon S3 bucket for the command was not specified, then this string is empty.
        public let standardOutputUrl: String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:  test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript  test_folder is the name of the Amazon S3 bucket;  ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix; i-1234567876543 is the instance ID; awsrunShellScript is the name of the plugin.
        public let outputS3KeyPrefix: String?
        /// A numeric response code generated after executing the plugin. 
        public let responseCode: Int32?
        /// A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Run Command Status. StatusDetails can be one of the following values:   Pending: The command has not been sent to the instance.   In Progress: The command has been sent to the instance but has not reached a terminal state.   Success: The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Undeliverable: The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public let statusDetails: String?

        public init(status: CommandPluginStatus? = nil, responseStartDateTime: Double? = nil, responseFinishDateTime: Double? = nil, outputS3BucketName: String? = nil, name: String? = nil, output: String? = nil, standardErrorUrl: String? = nil, standardOutputUrl: String? = nil, outputS3Region: String? = nil, outputS3KeyPrefix: String? = nil, responseCode: Int32? = nil, statusDetails: String? = nil) {
            self.status = status
            self.responseStartDateTime = responseStartDateTime
            self.responseFinishDateTime = responseFinishDateTime
            self.outputS3BucketName = outputS3BucketName
            self.name = name
            self.output = output
            self.standardErrorUrl = standardErrorUrl
            self.standardOutputUrl = standardOutputUrl
            self.outputS3Region = outputS3Region
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.responseCode = responseCode
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case responseStartDateTime = "ResponseStartDateTime"
            case responseFinishDateTime = "ResponseFinishDateTime"
            case outputS3BucketName = "OutputS3BucketName"
            case name = "Name"
            case output = "Output"
            case standardErrorUrl = "StandardErrorUrl"
            case standardOutputUrl = "StandardOutputUrl"
            case outputS3Region = "OutputS3Region"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case responseCode = "ResponseCode"
            case statusDetails = "StatusDetails"
        }
    }

    public struct GetDeployablePatchSnapshotForInstanceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDownloadUrl", required: false, type: .string)
        ]
        /// The user-defined snapshot ID.
        public let snapshotId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// A pre-signed Amazon S3 URL that can be used to download the patch snapshot.
        public let snapshotDownloadUrl: String?

        public init(snapshotId: String? = nil, instanceId: String? = nil, snapshotDownloadUrl: String? = nil) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
            self.snapshotDownloadUrl = snapshotDownloadUrl
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case instanceId = "InstanceId"
            case snapshotDownloadUrl = "SnapshotDownloadUrl"
        }
    }

    public struct DocumentFilterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentFilter", required: false, type: .list)
        ]
        public let documentFilter: [DocumentFilter]?

        public init(documentFilter: [DocumentFilter]? = nil) {
            self.documentFilter = documentFilter
        }

        private enum CodingKeys: String, CodingKey {
            case documentFilter = "DocumentFilter"
        }
    }

    public struct DeleteActivationResult: AWSShape {
        /// The key for the payload

    }

    public struct DescribeParametersResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Parameters returned by the request.
        public let parameters: [ParameterMetadata]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(parameters: [ParameterMetadata]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The name of the SSM document.
        public let name: String
        /// The document version for which you want information. Can be a specific version or the default version.
        public let documentVersion: String?

        public init(name: String, documentVersion: String? = nil) {
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct DescribeInstanceAssociationsStatusResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceAssociationStatusInfos", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Status information about the association.
        public let instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(instanceAssociationStatusInfos: [InstanceAssociationStatusInfo]? = nil, nextToken: String? = nil) {
            self.instanceAssociationStatusInfos = instanceAssociationStatusInfos
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceAssociationStatusInfos = "InstanceAssociationStatusInfos"
            case nextToken = "NextToken"
        }
    }

    public struct DeletePatchBaselineRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The ID of the patch baseline to delete.
        public let baselineId: String

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct GetInventoryResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Entities", required: false, type: .structure)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Collection of inventory entities such as a collection of instance inventory. 
        public let entities: InventoryResultEntityList?

        public init(nextToken: String? = nil, entities: InventoryResultEntityList? = nil) {
            self.nextToken = nextToken
            self.entities = entities
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case entities = "Entities"
        }
    }

    public struct DescribeInstancePatchStatesForPatchGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstancePatchStates", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The high-level patch state for the requested instances. 
        public let instancePatchStates: [InstancePatchState]?

        public init(nextToken: String? = nil, instancePatchStates: [InstancePatchState]? = nil) {
            self.nextToken = nextToken
            self.instancePatchStates = instancePatchStates
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instancePatchStates = "InstancePatchStates"
        }
    }

    public struct InstanceInformationFilterValueSet: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInformationFilterValue", required: false, type: .list)
        ]
        public let instanceInformationFilterValue: [String]?

        public init(instanceInformationFilterValue: [String]? = nil) {
            self.instanceInformationFilterValue = instanceInformationFilterValue
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInformationFilterValue = "InstanceInformationFilterValue"
        }
    }

    public struct Command: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "CompletedCount", required: false, type: .integer), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list), 
            AWSShapeMember(label: "TargetCount", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "RequestedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "ExpiresAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "ErrorCount", required: false, type: .integer), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public let outputS3BucketName: String?
        /// Configurations for sending notifications about command status changes. 
        public let notificationConfig: NotificationConfig?
        /// The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable.
        public let completedCount: Int32?
        /// An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call.
        public let targets: [Target]?
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public let outputS3KeyPrefix: String?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public let comment: String?
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes. 
        public let serviceRole: String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?
        /// The instance IDs against which this command was requested.
        public let instanceIds: [String]?
        /// The number of targets for the command.
        public let targetCount: Int32?
        /// The status of the command.
        public let status: CommandStatus?
        /// The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 50. For more information about how to use MaxErrors, see Executing a Command Using Systems Manager Run Command.
        public let maxErrors: String?
        /// The date and time the command was requested.
        public let requestedDateTime: Double?
        /// The parameter values to be inserted in the document when executing the command.
        public let parameters: [String: [String]]?
        /// The name of the document requested for execution.
        public let documentName: String?
        /// The maximum number of instances that are allowed to execute the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see Executing a Command Using Systems Manager Run Command.
        public let maxConcurrency: String?
        /// If this time is reached and the command has not already started executing, it will not execute. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.
        public let expiresAfter: Double?
        /// The number of targets for which the status is Failed or Execution Timed Out.
        public let errorCount: Int32?
        /// A unique identifier for this command.
        public let commandId: String?
        /// A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Run Command Status. StatusDetails can be one of the following values:   Pending: The command has not been sent to any instances.   In Progress: The command has been sent to at least one instance but has not reached a final state on all instances.   Success: The command successfully executed on all invocations. This is a terminal state.   Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.   Execution Timed Out: The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.   Failed: The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.   Incomplete: The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Rate Exceeded: The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before executing it on any instance. This is a terminal state.  
        public let statusDetails: String?

        public init(outputS3BucketName: String? = nil, notificationConfig: NotificationConfig? = nil, completedCount: Int32? = nil, targets: [Target]? = nil, outputS3KeyPrefix: String? = nil, comment: String? = nil, serviceRole: String? = nil, outputS3Region: String? = nil, instanceIds: [String]? = nil, targetCount: Int32? = nil, status: CommandStatus? = nil, maxErrors: String? = nil, requestedDateTime: Double? = nil, parameters: [String: [String]]? = nil, documentName: String? = nil, maxConcurrency: String? = nil, expiresAfter: Double? = nil, errorCount: Int32? = nil, commandId: String? = nil, statusDetails: String? = nil) {
            self.outputS3BucketName = outputS3BucketName
            self.notificationConfig = notificationConfig
            self.completedCount = completedCount
            self.targets = targets
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.comment = comment
            self.serviceRole = serviceRole
            self.outputS3Region = outputS3Region
            self.instanceIds = instanceIds
            self.targetCount = targetCount
            self.status = status
            self.maxErrors = maxErrors
            self.requestedDateTime = requestedDateTime
            self.parameters = parameters
            self.documentName = documentName
            self.maxConcurrency = maxConcurrency
            self.expiresAfter = expiresAfter
            self.errorCount = errorCount
            self.commandId = commandId
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case outputS3BucketName = "OutputS3BucketName"
            case notificationConfig = "NotificationConfig"
            case completedCount = "CompletedCount"
            case targets = "Targets"
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case comment = "Comment"
            case serviceRole = "ServiceRole"
            case outputS3Region = "OutputS3Region"
            case instanceIds = "InstanceIds"
            case targetCount = "TargetCount"
            case status = "Status"
            case maxErrors = "MaxErrors"
            case requestedDateTime = "RequestedDateTime"
            case parameters = "Parameters"
            case documentName = "DocumentName"
            case maxConcurrency = "MaxConcurrency"
            case expiresAfter = "ExpiresAfter"
            case errorCount = "ErrorCount"
            case commandId = "CommandId"
            case statusDetails = "StatusDetails"
        }
    }

    public enum DocumentPermissionType: String, CustomStringConvertible, Codable {
        case share = "Share"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssociationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string)
        ]
        /// The parameters for the documents runtime configuration. 
        public let parameters: [String: [String]]?
        /// The instance ID.
        public let instanceId: String?
        /// The name of the Systems Manager document.
        public let name: String
        /// The document version you want to associate with the target(s). Can be a specific version or the default version.
        public let documentVersion: String?
        /// The targets (either instances or tags) for the association.
        public let targets: [Target]?
        /// An Amazon S3 bucket where you want to store the output details of the request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// A cron expression when the association will be applied to the target(s).
        public let scheduleExpression: String?

        public init(parameters: [String: [String]]? = nil, instanceId: String? = nil, name: String, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.parameters = parameters
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case instanceId = "InstanceId"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case targets = "Targets"
            case outputLocation = "OutputLocation"
            case scheduleExpression = "ScheduleExpression"
        }
    }

    public struct ModifyDocumentPermissionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PermissionType", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "AccountIdsToRemove", required: false, type: .structure), 
            AWSShapeMember(label: "AccountIdsToAdd", required: false, type: .structure)
        ]
        /// The permission type for the document. The permission type can be Share.
        public let permissionType: DocumentPermissionType
        /// The name of the document that you want to share.
        public let name: String
        /// The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or All. This action has a higher priority than AccountIdsToAdd. If you specify an account ID to add and the same ID to remove, the system removes access to the document.
        public let accountIdsToRemove: AccountIdList?
        /// The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or All.
        public let accountIdsToAdd: AccountIdList?

        public init(permissionType: DocumentPermissionType, name: String, accountIdsToRemove: AccountIdList? = nil, accountIdsToAdd: AccountIdList? = nil) {
            self.permissionType = permissionType
            self.name = name
            self.accountIdsToRemove = accountIdsToRemove
            self.accountIdsToAdd = accountIdsToAdd
        }

        private enum CodingKeys: String, CodingKey {
            case permissionType = "PermissionType"
            case name = "Name"
            case accountIdsToRemove = "AccountIdsToRemove"
            case accountIdsToAdd = "AccountIdsToAdd"
        }
    }

    public struct RegisterDefaultPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The ID of the patch baseline that should be the default patch baseline.
        public let baselineId: String

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct AddTagsToResourceResult: AWSShape {
        /// The key for the payload

    }

    public struct PatchComplianceData: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Severity", required: true, type: .string), 
            AWSShapeMember(label: "Classification", required: true, type: .string), 
            AWSShapeMember(label: "InstalledTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Title", required: true, type: .string), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "KBId", required: true, type: .string)
        ]
        /// The severity of the patch (for example, Critical, Important, Moderate).
        public let severity: String
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        public let classification: String
        /// The date/time the patch was installed on the instance.
        public let installedTime: Double
        /// The title of the patch.
        public let title: String
        /// The state of the patch on the instance (INSTALLED, INSTALLED_OTHER, MISSING, NOT_APPLICABLE or FAILED).
        public let state: PatchComplianceDataState
        /// The Microsoft Knowledge Base ID of the patch.
        public let kBId: String

        public init(severity: String, classification: String, installedTime: Double, title: String, state: PatchComplianceDataState, kBId: String) {
            self.severity = severity
            self.classification = classification
            self.installedTime = installedTime
            self.title = title
            self.state = state
            self.kBId = kBId
        }

        private enum CodingKeys: String, CodingKey {
            case severity = "Severity"
            case classification = "Classification"
            case installedTime = "InstalledTime"
            case title = "Title"
            case state = "State"
            case kBId = "KBId"
        }
    }

    public struct DeregisterTaskFromMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string)
        ]
        /// The ID of the Maintenance Window the task was removed from.
        public let windowId: String?
        /// The ID of the task removed from the Maintenance Window.
        public let windowTaskId: String?

        public init(windowId: String? = nil, windowTaskId: String? = nil) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTaskId = "WindowTaskId"
        }
    }

    public struct PatchRuleGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchRules", required: true, type: .list)
        ]
        /// The rules that make up the rule group.
        public let patchRules: [PatchRule]

        public init(patchRules: [PatchRule]) {
            self.patchRules = patchRules
        }

        private enum CodingKeys: String, CodingKey {
            case patchRules = "PatchRules"
        }
    }

    public struct InstanceInformationStringFilterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInformationStringFilter", required: false, type: .list)
        ]
        public let instanceInformationStringFilter: [InstanceInformationStringFilter]?

        public init(instanceInformationStringFilter: [InstanceInformationStringFilter]? = nil) {
            self.instanceInformationStringFilter = instanceInformationStringFilter
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInformationStringFilter = "InstanceInformationStringFilter"
        }
    }

    public struct DescribeMaintenanceWindowTasksRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the Maintenance Window whose tasks should be retrieved.
        public let windowId: String
        /// Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType.
        public let filters: [MaintenanceWindowFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum PatchComplianceDataState: String, CustomStringConvertible, Codable {
        case installed = "INSTALLED"
        case installed_other = "INSTALLED_OTHER"
        case missing = "MISSING"
        case not_applicable = "NOT_APPLICABLE"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAutomationExecutionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// Filters used to limit the scope of executions that are requested.
        public let filters: [AutomationExecutionFilter]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [AutomationExecutionFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct GetMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: false, type: .boolean), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp)
        ]
        /// The ID of the created Maintenance Window.
        public let windowId: String?
        /// The date the Maintenance Window was last modified.
        public let modifiedDate: Double?
        /// The name of the Maintenance Window.
        public let name: String?
        /// Whether the Maintenance Windows is enabled.
        public let enabled: Bool?
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?
        /// The date the Maintenance Window was created.
        public let createdDate: Double?

        public init(windowId: String? = nil, modifiedDate: Double? = nil, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil, createdDate: Double? = nil) {
            self.windowId = windowId
            self.modifiedDate = modifiedDate
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case modifiedDate = "ModifiedDate"
            case name = "Name"
            case enabled = "Enabled"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case schedule = "Schedule"
            case cutoff = "Cutoff"
            case duration = "Duration"
            case createdDate = "CreatedDate"
        }
    }

    public struct LoggingInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "S3Region", required: true, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string)
        ]
        /// (Optional) The Amazon S3 bucket subfolder. 
        public let s3KeyPrefix: String?
        /// The region where the Amazon S3 bucket is located.
        public let s3Region: String
        /// The name of an Amazon S3 bucket where execution logs are stored .
        public let s3BucketName: String

        public init(s3KeyPrefix: String? = nil, s3Region: String, s3BucketName: String) {
            self.s3KeyPrefix = s3KeyPrefix
            self.s3Region = s3Region
            self.s3BucketName = s3BucketName
        }

        private enum CodingKeys: String, CodingKey {
            case s3KeyPrefix = "S3KeyPrefix"
            case s3Region = "S3Region"
            case s3BucketName = "S3BucketName"
        }
    }

    public struct InventoryResultItem: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CaptureTime", required: false, type: .string), 
            AWSShapeMember(label: "Content", required: true, type: .list), 
            AWSShapeMember(label: "SchemaVersion", required: true, type: .string), 
            AWSShapeMember(label: "ContentHash", required: false, type: .string), 
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// The time inventory item data was captured.
        public let captureTime: String?
        /// Contains all the inventory data of the item type. Results include attribute names and values. 
        public let content: [[String: String]]
        /// The schema version for the inventory result item/
        public let schemaVersion: String
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        public let contentHash: String?
        /// The name of the inventory result item type.
        public let typeName: String

        public init(captureTime: String? = nil, content: [[String: String]], schemaVersion: String, contentHash: String? = nil, typeName: String) {
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.contentHash = contentHash
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case captureTime = "CaptureTime"
            case content = "Content"
            case schemaVersion = "SchemaVersion"
            case contentHash = "ContentHash"
            case typeName = "TypeName"
        }
    }

    public struct GetPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string)
        ]
        /// The ID of the patch baseline to retrieve.
        public let baselineId: String

        public init(baselineId: String) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct DeleteDocumentResult: AWSShape {
        /// The key for the payload

    }

    public struct AutomationExecutionMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutedBy", required: false, type: .string), 
            AWSShapeMember(label: "AutomationExecutionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Outputs", required: false, type: .map), 
            AWSShapeMember(label: "LogFile", required: false, type: .string), 
            AWSShapeMember(label: "AutomationExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionEndTime", required: false, type: .timestamp)
        ]
        /// The IAM role ARN of the user who executed the Automation.
        public let executedBy: String?
        /// The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out, or Cancelled.
        public let automationExecutionStatus: AutomationExecutionStatus?
        /// The name of the Automation document used during execution.
        public let documentName: String?
        /// The document version used during the execution.
        public let documentVersion: String?
        /// The time the execution started.&gt;
        public let executionStartTime: Double?
        /// The list of execution outputs as defined in the Automation document.
        public let outputs: [String: [String]]?
        /// An Amazon S3 bucket where execution information is stored.
        public let logFile: String?
        /// The execution ID.
        public let automationExecutionId: String?
        /// The time the execution finished. This is not populated if the execution is still in progress.
        public let executionEndTime: Double?

        public init(executedBy: String? = nil, automationExecutionStatus: AutomationExecutionStatus? = nil, documentName: String? = nil, documentVersion: String? = nil, executionStartTime: Double? = nil, outputs: [String: [String]]? = nil, logFile: String? = nil, automationExecutionId: String? = nil, executionEndTime: Double? = nil) {
            self.executedBy = executedBy
            self.automationExecutionStatus = automationExecutionStatus
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.logFile = logFile
            self.automationExecutionId = automationExecutionId
            self.executionEndTime = executionEndTime
        }

        private enum CodingKeys: String, CodingKey {
            case executedBy = "ExecutedBy"
            case automationExecutionStatus = "AutomationExecutionStatus"
            case documentName = "DocumentName"
            case documentVersion = "DocumentVersion"
            case executionStartTime = "ExecutionStartTime"
            case outputs = "Outputs"
            case logFile = "LogFile"
            case automationExecutionId = "AutomationExecutionId"
            case executionEndTime = "ExecutionEndTime"
        }
    }

    public struct DescribeAssociationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// Information about the association.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct CreateAssociationBatchRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entries", required: true, type: .structure)
        ]
        /// One or more associations.
        public let entries: CreateAssociationBatchRequestEntries

        public init(entries: CreateAssociationBatchRequestEntries) {
            self.entries = entries
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "Entries"
        }
    }

    public struct StopAutomationExecutionResult: AWSShape {
        /// The key for the payload

    }

    public struct GetParameterResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameter", required: false, type: .structure)
        ]
        /// Information about a parameter.
        public let parameter: Parameter?

        public init(parameter: Parameter? = nil) {
            self.parameter = parameter
        }

        private enum CodingKeys: String, CodingKey {
            case parameter = "Parameter"
        }
    }

    public struct MaintenanceWindowFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The name of the filter.
        public let key: String?
        /// The filter values.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct InventoryItem: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CaptureTime", required: true, type: .string), 
            AWSShapeMember(label: "Content", required: false, type: .list), 
            AWSShapeMember(label: "SchemaVersion", required: true, type: .string), 
            AWSShapeMember(label: "ContentHash", required: false, type: .string), 
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// The time the inventory information was collected.
        public let captureTime: String
        /// The inventory data of the inventory type.
        public let content: [[String: String]]?
        /// The schema version for the inventory item.
        public let schemaVersion: String
        /// MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. 
        public let contentHash: String?
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        public let typeName: String

        public init(captureTime: String, content: [[String: String]]? = nil, schemaVersion: String, contentHash: String? = nil, typeName: String) {
            self.captureTime = captureTime
            self.content = content
            self.schemaVersion = schemaVersion
            self.contentHash = contentHash
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case captureTime = "CaptureTime"
            case content = "Content"
            case schemaVersion = "SchemaVersion"
            case contentHash = "ContentHash"
            case typeName = "TypeName"
        }
    }

    public enum AutomationExecutionStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case success = "Success"
        case timedout = "TimedOut"
        case cancelled = "Cancelled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DeletePatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the deleted patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct CancelCommandRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// The ID of the command you want to cancel.
        public let commandId: String
        /// (Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested.
        public let instanceIds: [String]?

        public init(commandId: String, instanceIds: [String]? = nil) {
            self.commandId = commandId
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case instanceIds = "InstanceIds"
        }
    }

    public struct InstanceInformation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastSuccessfulAssociationExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "IsLatestVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "AssociationOverview", required: false, type: .structure), 
            AWSShapeMember(label: "IPAddress", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "ComputerName", required: false, type: .string), 
            AWSShapeMember(label: "AssociationStatus", required: false, type: .string), 
            AWSShapeMember(label: "LastAssociationExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "IamRole", required: false, type: .string), 
            AWSShapeMember(label: "PlatformName", required: false, type: .string), 
            AWSShapeMember(label: "AgentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "PingStatus", required: false, type: .enum), 
            AWSShapeMember(label: "RegistrationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "PlatformType", required: false, type: .enum), 
            AWSShapeMember(label: "ActivationId", required: false, type: .string), 
            AWSShapeMember(label: "LastPingDateTime", required: false, type: .timestamp)
        ]
        /// The last date the association was successfully run.
        public let lastSuccessfulAssociationExecutionDate: Double?
        /// Indicates whether latest version of the SSM Agent is running on your instance. 
        public let isLatestVersion: Bool?
        /// Information about the association.
        public let associationOverview: InstanceAggregatedAssociationOverview?
        /// The IP address of the managed instance.
        public let iPAddress: String?
        /// The type of instance. Instances are either EC2 instances or managed instances. 
        public let resourceType: ResourceType?
        /// The version of the OS platform running on your instance. 
        public let platformVersion: String?
        /// The fully qualified host name of the managed instance.
        public let computerName: String?
        /// The status of the association.
        public let associationStatus: String?
        /// The date the association was last executed.
        public let lastAssociationExecutionDate: Double?
        /// The Amazon Identity and Access Management (IAM) role assigned to EC2 instances or managed instances. 
        public let iamRole: String?
        /// The name of the operating system platform running on your instance. 
        public let platformName: String?
        /// The version of the SSM Agent running on your Linux instance. 
        public let agentVersion: String?
        /// The name of the managed instance.
        public let name: String?
        /// The instance ID. 
        public let instanceId: String?
        /// Connection status of the SSM Agent. 
        public let pingStatus: PingStatus?
        /// The date the server or VM was registered with AWS as a managed instance.
        public let registrationDate: Double?
        /// The operating system platform type. 
        public let platformType: PlatformType?
        /// The activation ID created by Systems Manager when the server or VM was registered.
        public let activationId: String?
        /// The date and time when agent last pinged Systems Manager service. 
        public let lastPingDateTime: Double?

        public init(lastSuccessfulAssociationExecutionDate: Double? = nil, isLatestVersion: Bool? = nil, associationOverview: InstanceAggregatedAssociationOverview? = nil, iPAddress: String? = nil, resourceType: ResourceType? = nil, platformVersion: String? = nil, computerName: String? = nil, associationStatus: String? = nil, lastAssociationExecutionDate: Double? = nil, iamRole: String? = nil, platformName: String? = nil, agentVersion: String? = nil, name: String? = nil, instanceId: String? = nil, pingStatus: PingStatus? = nil, registrationDate: Double? = nil, platformType: PlatformType? = nil, activationId: String? = nil, lastPingDateTime: Double? = nil) {
            self.lastSuccessfulAssociationExecutionDate = lastSuccessfulAssociationExecutionDate
            self.isLatestVersion = isLatestVersion
            self.associationOverview = associationOverview
            self.iPAddress = iPAddress
            self.resourceType = resourceType
            self.platformVersion = platformVersion
            self.computerName = computerName
            self.associationStatus = associationStatus
            self.lastAssociationExecutionDate = lastAssociationExecutionDate
            self.iamRole = iamRole
            self.platformName = platformName
            self.agentVersion = agentVersion
            self.name = name
            self.instanceId = instanceId
            self.pingStatus = pingStatus
            self.registrationDate = registrationDate
            self.platformType = platformType
            self.activationId = activationId
            self.lastPingDateTime = lastPingDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastSuccessfulAssociationExecutionDate = "LastSuccessfulAssociationExecutionDate"
            case isLatestVersion = "IsLatestVersion"
            case associationOverview = "AssociationOverview"
            case iPAddress = "IPAddress"
            case resourceType = "ResourceType"
            case platformVersion = "PlatformVersion"
            case computerName = "ComputerName"
            case associationStatus = "AssociationStatus"
            case lastAssociationExecutionDate = "LastAssociationExecutionDate"
            case iamRole = "IamRole"
            case platformName = "PlatformName"
            case agentVersion = "AgentVersion"
            case name = "Name"
            case instanceId = "InstanceId"
            case pingStatus = "PingStatus"
            case registrationDate = "RegistrationDate"
            case platformType = "PlatformType"
            case activationId = "ActivationId"
            case lastPingDateTime = "LastPingDateTime"
        }
    }

    public enum DocumentType: String, CustomStringConvertible, Codable {
        case command = "Command"
        case policy = "Policy"
        case automation = "Automation"
        public var description: String { return self.rawValue }
    }

    public enum CommandStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case success = "Success"
        case cancelled = "Cancelled"
        case failed = "Failed"
        case timedout = "TimedOut"
        case cancelling = "Cancelling"
        public var description: String { return self.rawValue }
    }

    public struct DescribeActivationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// A filter to view information about your activations.
        public let filters: [DescribeActivationsFilter]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [DescribeActivationsFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowUnassociatedTargets", required: true, type: .boolean), 
            AWSShapeMember(label: "Schedule", required: true, type: .string), 
            AWSShapeMember(label: "Cutoff", required: true, type: .integer), 
            AWSShapeMember(label: "Duration", required: true, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string)
        ]
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32
        /// The name of the Maintenance Window.
        public let name: String
        /// User-provided idempotency token.
        public let clientToken: String?

        public init(allowUnassociatedTargets: Bool, schedule: String, cutoff: Int32, duration: Int32, name: String, clientToken: String? = nil) {
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case schedule = "Schedule"
            case cutoff = "Cutoff"
            case duration = "Duration"
            case name = "Name"
            case clientToken = "ClientToken"
        }
    }

    public enum CommandPluginStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case success = "Success"
        case timedout = "TimedOut"
        case cancelled = "Cancelled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct CommandInvocation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandPlugins", required: false, type: .list), 
            AWSShapeMember(label: "NotificationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "StandardOutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "TraceOutput", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceName", required: false, type: .string), 
            AWSShapeMember(label: "RequestedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorUrl", required: false, type: .string), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        public let commandPlugins: [CommandPlugin]?
        /// Configurations for sending notifications about command status changes on a per instance basis.
        public let notificationConfig: NotificationConfig?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public let comment: String?
        /// The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        public let standardOutputUrl: String?
        /// The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis.
        public let serviceRole: String?
        ///  Gets the trace output sent by the agent. 
        public let traceOutput: String?
        /// Whether or not the invocation succeeded, failed, or is pending.
        public let status: CommandInvocationStatus?
        /// The name of the invocation target. For Amazon EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance.
        public let instanceName: String?
        /// The time and date the request was sent to this instance.
        public let requestedDateTime: Double?
        /// The instance ID in which this invocation was requested.
        public let instanceId: String?
        /// The document name that was requested for execution.
        public let documentName: String?
        /// The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the Amazon S3 bucket was defined for the command.
        public let standardErrorUrl: String?
        /// The command against which this invocation was requested.
        public let commandId: String?
        /// A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Run Command Status. StatusDetails can be one of the following values:   Pending: The command has not been sent to the instance.   In Progress: The command has been sent to the instance but has not reached a terminal state.   Success: The execution of the command or plugin was successfully completed. This is a terminal state.   Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public let statusDetails: String?

        public init(commandPlugins: [CommandPlugin]? = nil, notificationConfig: NotificationConfig? = nil, comment: String? = nil, standardOutputUrl: String? = nil, serviceRole: String? = nil, traceOutput: String? = nil, status: CommandInvocationStatus? = nil, instanceName: String? = nil, requestedDateTime: Double? = nil, instanceId: String? = nil, documentName: String? = nil, standardErrorUrl: String? = nil, commandId: String? = nil, statusDetails: String? = nil) {
            self.commandPlugins = commandPlugins
            self.notificationConfig = notificationConfig
            self.comment = comment
            self.standardOutputUrl = standardOutputUrl
            self.serviceRole = serviceRole
            self.traceOutput = traceOutput
            self.status = status
            self.instanceName = instanceName
            self.requestedDateTime = requestedDateTime
            self.instanceId = instanceId
            self.documentName = documentName
            self.standardErrorUrl = standardErrorUrl
            self.commandId = commandId
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case commandPlugins = "CommandPlugins"
            case notificationConfig = "NotificationConfig"
            case comment = "Comment"
            case standardOutputUrl = "StandardOutputUrl"
            case serviceRole = "ServiceRole"
            case traceOutput = "TraceOutput"
            case status = "Status"
            case instanceName = "InstanceName"
            case requestedDateTime = "RequestedDateTime"
            case instanceId = "InstanceId"
            case documentName = "DocumentName"
            case standardErrorUrl = "StandardErrorUrl"
            case commandId = "CommandId"
            case statusDetails = "StatusDetails"
        }
    }

    public struct DeregisterManagedInstanceResult: AWSShape {
        /// The key for the payload

    }

    public struct DeleteResourceDataSyncResult: AWSShape {
        /// The key for the payload

    }

    public struct InventoryResultEntityList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entity", required: false, type: .list)
        ]
        public let entity: [InventoryResultEntity]?

        public init(entity: [InventoryResultEntity]? = nil) {
            self.entity = entity
        }

        private enum CodingKeys: String, CodingKey {
            case entity = "Entity"
        }
    }

    public struct FailedCreateAssociation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fault", required: false, type: .enum), 
            AWSShapeMember(label: "Entry", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The source of the failure.
        public let fault: Fault?
        /// The association.
        public let entry: CreateAssociationBatchRequestEntry?
        /// A description of the failure.
        public let message: String?

        public init(fault: Fault? = nil, entry: CreateAssociationBatchRequestEntry? = nil, message: String? = nil) {
            self.fault = fault
            self.entry = entry
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case fault = "Fault"
            case entry = "Entry"
            case message = "Message"
        }
    }

    public struct DocumentIdentifier: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "PlatformTypes", required: false, type: .structure), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The schema version.
        public let schemaVersion: String?
        /// The document type.
        public let documentType: DocumentType?
        /// The AWS user account of the person who created the document.
        public let owner: String?
        /// The name of the SSM document.
        public let name: String?
        /// The operating system platform. 
        public let platformTypes: PlatformTypeList?
        /// The document version.
        public let documentVersion: String?

        public init(schemaVersion: String? = nil, documentType: DocumentType? = nil, owner: String? = nil, name: String? = nil, platformTypes: PlatformTypeList? = nil, documentVersion: String? = nil) {
            self.schemaVersion = schemaVersion
            self.documentType = documentType
            self.owner = owner
            self.name = name
            self.platformTypes = platformTypes
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case schemaVersion = "SchemaVersion"
            case documentType = "DocumentType"
            case owner = "Owner"
            case name = "Name"
            case platformTypes = "PlatformTypes"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct GetInventorySchemaResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schemas", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Inventory schemas returned by the request.
        public let schemas: [InventoryItemSchema]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(schemas: [InventoryItemSchema]? = nil, nextToken: String? = nil) {
            self.schemas = schemas
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemas = "Schemas"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string)
        ]
        /// The ID of the deleted Maintenance Window.
        public let windowId: String?

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct GetParameterHistoryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public let withDecryption: Bool?
        /// The name of a parameter you want to query.
        public let name: String
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(withDecryption: Bool? = nil, name: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.withDecryption = withDecryption
            self.name = name
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case withDecryption = "WithDecryption"
            case name = "Name"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetParameterHistoryResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of parameters returned by the request.
        public let parameters: [ParameterHistory]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(parameters: [ParameterHistory]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct ListDocumentVersionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the document about which you want version information.
        public let name: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, name: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.name = name
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case name = "Name"
            case maxResults = "MaxResults"
        }
    }

    public enum DocumentFilterKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case owner = "Owner"
        case platformtypes = "PlatformTypes"
        case documenttype = "DocumentType"
        public var description: String { return self.rawValue }
    }

    public struct ListResourceDataSyncResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDataSyncItems", required: false, type: .list)
        ]
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?
        /// A list of your current Resource Data Sync configurations and their statuses.
        public let resourceDataSyncItems: [ResourceDataSyncItem]?

        public init(nextToken: String? = nil, resourceDataSyncItems: [ResourceDataSyncItem]? = nil) {
            self.nextToken = nextToken
            self.resourceDataSyncItems = resourceDataSyncItems
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceDataSyncItems = "ResourceDataSyncItems"
        }
    }

    public struct Target: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// User-defined criteria for sending commands that target instances that meet the criteria. Key can be tag:&lt;Amazon EC2 tag&gt; or InstanceIds. For more information about how to send commands that target instances using Key,Value parameters, see Executing a Command Using Systems Manager Run Command.
        public let key: String?
        /// User-defined criteria that maps to Key. For example, if you specified tag:ServerRole, you could specify value:WebServer to execute a command on instances that include Amazon EC2 tags of ServerRole,WebServer. For more information about how to send commands that target instances using Key,Value parameters, see Executing a Command Using Systems Manager Run Command.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public enum AssociationStatusName: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case success = "Success"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum PatchOperationType: String, CustomStringConvertible, Codable {
        case scan = "Scan"
        case install = "Install"
        public var description: String { return self.rawValue }
    }

    public struct AssociationDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastUpdateAssociationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Overview", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastSuccessfulExecutionDate", required: false, type: .timestamp)
        ]
        /// The date on which the association was last run.
        public let lastExecutionDate: Double?
        /// The date when the association was last updated.
        public let lastUpdateAssociationDate: Double?
        /// The instances targeted by the request. 
        public let targets: [Target]?
        /// The association status.
        public let status: AssociationStatus?
        /// The association ID.
        public let associationId: String?
        /// A description of the parameters for a document. 
        public let parameters: [String: [String]]?
        /// The name of the SSM document.
        public let name: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The document version.
        public let documentVersion: String?
        /// An Amazon S3 bucket where you want to store the output details of the request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// Information about the association.
        public let overview: AssociationOverview?
        /// A cron expression that specifies a schedule when the association runs.
        public let scheduleExpression: String?
        /// The date when the association was made.
        public let date: Double?
        /// The last date on which the association was successfully run.
        public let lastSuccessfulExecutionDate: Double?

        public init(lastExecutionDate: Double? = nil, lastUpdateAssociationDate: Double? = nil, targets: [Target]? = nil, status: AssociationStatus? = nil, associationId: String? = nil, parameters: [String: [String]]? = nil, name: String? = nil, instanceId: String? = nil, documentVersion: String? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, overview: AssociationOverview? = nil, scheduleExpression: String? = nil, date: Double? = nil, lastSuccessfulExecutionDate: Double? = nil) {
            self.lastExecutionDate = lastExecutionDate
            self.lastUpdateAssociationDate = lastUpdateAssociationDate
            self.targets = targets
            self.status = status
            self.associationId = associationId
            self.parameters = parameters
            self.name = name
            self.instanceId = instanceId
            self.documentVersion = documentVersion
            self.outputLocation = outputLocation
            self.overview = overview
            self.scheduleExpression = scheduleExpression
            self.date = date
            self.lastSuccessfulExecutionDate = lastSuccessfulExecutionDate
        }

        private enum CodingKeys: String, CodingKey {
            case lastExecutionDate = "LastExecutionDate"
            case lastUpdateAssociationDate = "LastUpdateAssociationDate"
            case targets = "Targets"
            case status = "Status"
            case associationId = "AssociationId"
            case parameters = "Parameters"
            case name = "Name"
            case instanceId = "InstanceId"
            case documentVersion = "DocumentVersion"
            case outputLocation = "OutputLocation"
            case overview = "Overview"
            case scheduleExpression = "ScheduleExpression"
            case date = "Date"
            case lastSuccessfulExecutionDate = "LastSuccessfulExecutionDate"
        }
    }

    public struct InstanceAssociation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// The content of the association document for the instance(s).
        public let content: String?
        /// The instance ID.
        public let instanceId: String?
        /// The association ID.
        public let associationId: String?

        public init(content: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.content = content
            self.instanceId = instanceId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case instanceId = "InstanceId"
            case associationId = "AssociationId"
        }
    }

    public struct DeleteParameterResult: AWSShape {
        /// The key for the payload

    }

    public struct InstanceInformationStringFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Values", required: true, type: .structure)
        ]
        /// The filter key name to describe your instances. For example: "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|"AssociationStatus"|"Tag Key"
        public let key: String
        /// The filter values.
        public let values: InstanceInformationFilterValueSet

        public init(key: String, values: InstanceInformationFilterValueSet) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct DeleteDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the document.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DescribeMaintenanceWindowTargetsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the targets in the Maintenance Window.
        public let targets: [MaintenanceWindowTarget]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(targets: [MaintenanceWindowTarget]? = nil, nextToken: String? = nil) {
            self.targets = targets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case nextToken = "NextToken"
        }
    }

    public struct DescribePatchGroupStateRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: true, type: .string)
        ]
        /// The name of the patch group whose patch snapshot should be retrieved.
        public let patchGroup: String

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
        }
    }

    public struct UpdatePatchBaselineRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of the patch baseline to update.
        public let baselineId: String
        /// A list of explicitly approved patches for the baseline.
        public let approvedPatches: [String]?
        /// The name of the patch baseline.
        public let name: String?
        /// A list of explicitly rejected patches for the baseline.
        public let rejectedPatches: [String]?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// A description of the patch baseline.
        public let description: String?

        public init(baselineId: String, approvedPatches: [String]? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case approvedPatches = "ApprovedPatches"
            case name = "Name"
            case rejectedPatches = "RejectedPatches"
            case approvalRules = "ApprovalRules"
            case globalFilters = "GlobalFilters"
            case description = "Description"
        }
    }

    public struct InventoryFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Values", required: true, type: .structure)
        ]
        /// The type of filter. Valid values include the following: "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
        public let `type`: InventoryQueryOperatorType?
        /// The name of the filter key.
        public let key: String
        /// Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal 
        public let values: InventoryFilterValueList

        public init(type: InventoryQueryOperatorType? = nil, key: String, values: InventoryFilterValueList) {
            self.`type` = `type`
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case key = "Key"
            case values = "Values"
        }
    }

    public struct ListCommandsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Commands", required: false, type: .list)
        ]
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// (Optional) The list of commands requested by the user. 
        public let commands: [Command]?

        public init(nextToken: String? = nil, commands: [Command]? = nil) {
            self.nextToken = nextToken
            self.commands = commands
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case commands = "Commands"
        }
    }

    public enum DocumentParameterType: String, CustomStringConvertible, Codable {
        case string = "String"
        case stringlist = "StringList"
        public var description: String { return self.rawValue }
    }

    public struct GetPatchBaselineForPatchGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: false, type: .string)
        ]
        /// The ID of the patch baseline that should be used for the patch group.
        public let baselineId: String?
        /// The name of the patch group.
        public let patchGroup: String?

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case patchGroup = "PatchGroup"
        }
    }

    public struct DescribeEffectivePatchesForPatchBaselineRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the patch baseline to retrieve the effective patches for.
        public let baselineId: String
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?

        public init(baselineId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.baselineId = baselineId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DocumentIdentifierList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentIdentifier", required: false, type: .list)
        ]
        public let documentIdentifier: [DocumentIdentifier]?

        public init(documentIdentifier: [DocumentIdentifier]? = nil) {
            self.documentIdentifier = documentIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case documentIdentifier = "DocumentIdentifier"
        }
    }

    public struct RegisterPatchBaselineForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: true, type: .string)
        ]
        /// The ID of the patch baseline to register the patch group with.
        public let baselineId: String
        /// The name of the patch group that should be registered with the patch baseline.
        public let patchGroup: String

        public init(baselineId: String, patchGroup: String) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case patchGroup = "PatchGroup"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case managedinstance = "ManagedInstance"
        case document = "Document"
        case ec2instance = "EC2Instance"
        public var description: String { return self.rawValue }
    }

    public struct AssociationStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .enum), 
            AWSShapeMember(label: "Date", required: true, type: .timestamp), 
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string)
        ]
        /// The reason for the status.
        public let message: String
        /// The status.
        public let name: AssociationStatusName
        /// The date when the status changed.
        public let date: Double
        /// A user-defined string.
        public let additionalInfo: String?

        public init(message: String, name: AssociationStatusName, date: Double, additionalInfo: String? = nil) {
            self.message = message
            self.name = name
            self.date = date
            self.additionalInfo = additionalInfo
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case name = "Name"
            case date = "Date"
            case additionalInfo = "AdditionalInfo"
        }
    }

    public struct DescribeInstancePatchStatesForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "PatchGroup", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Each entry in the array is a structure containing: Key (string between 1 and 200 characters)  Values (array containing a single string)  Type (string "Equal", "NotEqual", "LessThan", "GreaterThan")
        public let filters: [InstancePatchStateFilter]?
        /// The name of the patch group for which the patch state information should be retrieved.
        public let patchGroup: String
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?

        public init(filters: [InstancePatchStateFilter]? = nil, patchGroup: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.patchGroup = patchGroup
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case patchGroup = "PatchGroup"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeMaintenanceWindowTasksResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tasks", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the tasks in the Maintenance Window.
        public let tasks: [MaintenanceWindowTask]?

        public init(nextToken: String? = nil, tasks: [MaintenanceWindowTask]? = nil) {
            self.nextToken = nextToken
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tasks = "Tasks"
        }
    }

    public enum PatchFilterKey: String, CustomStringConvertible, Codable {
        case product = "PRODUCT"
        case classification = "CLASSIFICATION"
        case msrc_severity = "MSRC_SEVERITY"
        case patch_id = "PATCH_ID"
        public var description: String { return self.rawValue }
    }

    public struct AutomationExecution: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "AutomationExecutionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Outputs", required: false, type: .map), 
            AWSShapeMember(label: "FailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "AutomationExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StepExecutions", required: false, type: .list), 
            AWSShapeMember(label: "ExecutionEndTime", required: false, type: .timestamp)
        ]
        /// The key-value map of execution parameters, which were supplied when calling StartAutomationExecution.
        public let parameters: [String: [String]]?
        /// The execution status of the Automation.
        public let automationExecutionStatus: AutomationExecutionStatus?
        /// The name of the Automation document used during the execution.
        public let documentName: String?
        /// The version of the document to use during execution.
        public let documentVersion: String?
        /// The time the execution started.
        public let executionStartTime: Double?
        /// The list of execution outputs as defined in the automation document.
        public let outputs: [String: [String]]?
        /// A message describing why an execution has failed, if the status is set to Failed.
        public let failureMessage: String?
        /// The execution ID.
        public let automationExecutionId: String?
        /// A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are executed in order.
        public let stepExecutions: [StepExecution]?
        /// The time the execution finished.
        public let executionEndTime: Double?

        public init(parameters: [String: [String]]? = nil, automationExecutionStatus: AutomationExecutionStatus? = nil, documentName: String? = nil, documentVersion: String? = nil, executionStartTime: Double? = nil, outputs: [String: [String]]? = nil, failureMessage: String? = nil, automationExecutionId: String? = nil, stepExecutions: [StepExecution]? = nil, executionEndTime: Double? = nil) {
            self.parameters = parameters
            self.automationExecutionStatus = automationExecutionStatus
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.failureMessage = failureMessage
            self.automationExecutionId = automationExecutionId
            self.stepExecutions = stepExecutions
            self.executionEndTime = executionEndTime
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case automationExecutionStatus = "AutomationExecutionStatus"
            case documentName = "DocumentName"
            case documentVersion = "DocumentVersion"
            case executionStartTime = "ExecutionStartTime"
            case outputs = "Outputs"
            case failureMessage = "FailureMessage"
            case automationExecutionId = "AutomationExecutionId"
            case stepExecutions = "StepExecutions"
            case executionEndTime = "ExecutionEndTime"
        }
    }

    public struct MaintenanceWindowTaskParameterValueExpression: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// This field contains an array of 0 or more strings, each 1 to 255 characters in length.
        public let values: [String]?

        public init(values: [String]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public struct AssociationFilterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationFilter", required: false, type: .list)
        ]
        public let associationFilter: [AssociationFilter]?

        public init(associationFilter: [AssociationFilter]? = nil) {
            self.associationFilter = associationFilter
        }

        private enum CodingKeys: String, CodingKey {
            case associationFilter = "AssociationFilter"
        }
    }

    public struct GetParametersByPathResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of parameters found in the specified hierarchy.
        public let parameters: [Parameter]?
        /// The token for the next set of items to return. Use this token to get the next set of results.
        public let nextToken: String?

        public init(parameters: [Parameter]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct Patch: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "Product", required: false, type: .string), 
            AWSShapeMember(label: "Language", required: false, type: .string), 
            AWSShapeMember(label: "ReleaseDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ProductFamily", required: false, type: .string), 
            AWSShapeMember(label: "Vendor", required: false, type: .string), 
            AWSShapeMember(label: "MsrcNumber", required: false, type: .string), 
            AWSShapeMember(label: "KbNumber", required: false, type: .string), 
            AWSShapeMember(label: "ContentUrl", required: false, type: .string), 
            AWSShapeMember(label: "MsrcSeverity", required: false, type: .string)
        ]
        /// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
        public let classification: String?
        /// The specific product the patch is applicable for (for example, WindowsServer2016).
        public let product: String?
        /// The language of the patch if it's language-specific.
        public let language: String?
        /// The date the patch was released.
        public let releaseDate: Double?
        /// The title of the patch.
        public let title: String?
        /// The ID of the patch (this is different than the Microsoft Knowledge Base ID).
        public let id: String?
        /// The description of the patch.
        public let description: String?
        /// The product family the patch is applicable for (for example, Windows).
        public let productFamily: String?
        /// The name of the vendor providing the patch.
        public let vendor: String?
        /// The ID of the MSRC bulletin the patch is related to.
        public let msrcNumber: String?
        /// The Microsoft Knowledge Base ID of the patch.
        public let kbNumber: String?
        /// The URL where more information can be obtained about the patch.
        public let contentUrl: String?
        /// The severity of the patch (for example Critical, Important, Moderate).
        public let msrcSeverity: String?

        public init(classification: String? = nil, product: String? = nil, language: String? = nil, releaseDate: Double? = nil, title: String? = nil, id: String? = nil, description: String? = nil, productFamily: String? = nil, vendor: String? = nil, msrcNumber: String? = nil, kbNumber: String? = nil, contentUrl: String? = nil, msrcSeverity: String? = nil) {
            self.classification = classification
            self.product = product
            self.language = language
            self.releaseDate = releaseDate
            self.title = title
            self.id = id
            self.description = description
            self.productFamily = productFamily
            self.vendor = vendor
            self.msrcNumber = msrcNumber
            self.kbNumber = kbNumber
            self.contentUrl = contentUrl
            self.msrcSeverity = msrcSeverity
        }

        private enum CodingKeys: String, CodingKey {
            case classification = "Classification"
            case product = "Product"
            case language = "Language"
            case releaseDate = "ReleaseDate"
            case title = "Title"
            case id = "Id"
            case description = "Description"
            case productFamily = "ProductFamily"
            case vendor = "Vendor"
            case msrcNumber = "MsrcNumber"
            case kbNumber = "KbNumber"
            case contentUrl = "ContentUrl"
            case msrcSeverity = "MsrcSeverity"
        }
    }

    public struct DescribeDocumentResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Document", required: false, type: .structure)
        ]
        /// Information about the SSM document.
        public let document: DocumentDescription?

        public init(document: DocumentDescription? = nil) {
            self.document = document
        }

        private enum CodingKeys: String, CodingKey {
            case document = "Document"
        }
    }

    public struct DescribeAutomationExecutionsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AutomationExecutionMetadataList", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The list of details about each automation execution which has occurred which matches the filter specification, if any.
        public let automationExecutionMetadataList: [AutomationExecutionMetadata]?

        public init(nextToken: String? = nil, automationExecutionMetadataList: [AutomationExecutionMetadata]? = nil) {
            self.nextToken = nextToken
            self.automationExecutionMetadataList = automationExecutionMetadataList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case automationExecutionMetadataList = "AutomationExecutionMetadataList"
        }
    }

    public struct RegisterTaskWithMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "TaskArn", required: true, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: true, type: .string), 
            AWSShapeMember(label: "TaskType", required: true, type: .enum), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "MaxConcurrency", required: true, type: .string)
        ]
        /// The id of the Maintenance Window the task should be added to.
        public let windowId: String
        /// The ARN of the task to execute 
        public let taskArn: String
        /// The role that should be assumed when executing the task.
        public let serviceRoleArn: String
        /// The maximum number of errors allowed before this task stops being scheduled.
        public let maxErrors: String
        /// The type of task being registered.
        public let taskType: MaintenanceWindowTaskType
        /// User-provided idempotency token.
        public let clientToken: String?
        /// The parameters that should be passed to the task when it is executed.
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public let targets: [Target]
        /// A structure containing information about an Amazon S3 bucket to write instance-level logs to. 
        public let loggingInfo: LoggingInfo?
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        public let priority: Int32?
        /// The maximum number of targets this task can be run for in parallel.
        public let maxConcurrency: String

        public init(windowId: String, taskArn: String, serviceRoleArn: String, maxErrors: String, taskType: MaintenanceWindowTaskType, clientToken: String? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, targets: [Target], loggingInfo: LoggingInfo? = nil, priority: Int32? = nil, maxConcurrency: String) {
            self.windowId = windowId
            self.taskArn = taskArn
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
            self.taskType = taskType
            self.clientToken = clientToken
            self.taskParameters = taskParameters
            self.targets = targets
            self.loggingInfo = loggingInfo
            self.priority = priority
            self.maxConcurrency = maxConcurrency
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case taskArn = "TaskArn"
            case serviceRoleArn = "ServiceRoleArn"
            case maxErrors = "MaxErrors"
            case taskType = "TaskType"
            case clientToken = "ClientToken"
            case taskParameters = "TaskParameters"
            case targets = "Targets"
            case loggingInfo = "LoggingInfo"
            case priority = "Priority"
            case maxConcurrency = "MaxConcurrency"
        }
    }

    public struct ResultAttributeList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResultAttribute", required: false, type: .list)
        ]
        public let resultAttribute: [ResultAttribute]?

        public init(resultAttribute: [ResultAttribute]? = nil) {
            self.resultAttribute = resultAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case resultAttribute = "ResultAttribute"
        }
    }

    public struct CreateAssociationBatchRequestEntry: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string)
        ]
        /// A description of the parameters for a document. 
        public let parameters: [String: [String]]?
        /// The ID of the instance. 
        public let instanceId: String?
        /// The name of the configuration document. 
        public let name: String
        /// The document version.
        public let documentVersion: String?
        /// The instances targeted by the request.
        public let targets: [Target]?
        /// An Amazon S3 bucket where you want to store the results of this request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// A cron expression that specifies a schedule when the association runs.
        public let scheduleExpression: String?

        public init(parameters: [String: [String]]? = nil, instanceId: String? = nil, name: String, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.parameters = parameters
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case instanceId = "InstanceId"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case targets = "Targets"
            case outputLocation = "OutputLocation"
            case scheduleExpression = "ScheduleExpression"
        }
    }

    public enum NotificationType: String, CustomStringConvertible, Codable {
        case command = "Command"
        case invocation = "Invocation"
        public var description: String { return self.rawValue }
    }

    public struct CancelCommandResult: AWSShape {
        /// The key for the payload

    }

    public enum AssociationFilterKey: String, CustomStringConvertible, Codable {
        case instanceid = "InstanceId"
        case name = "Name"
        case associationid = "AssociationId"
        case associationstatusname = "AssociationStatusName"
        case lastexecutedbefore = "LastExecutedBefore"
        case lastexecutedafter = "LastExecutedAfter"
        public var description: String { return self.rawValue }
    }

    public struct GetDefaultPatchBaselineRequest: AWSShape {
        /// The key for the payload

    }

    public struct ResourceDataSyncS3Destination: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketName", required: true, type: .string), 
            AWSShapeMember(label: "SyncFormat", required: true, type: .enum), 
            AWSShapeMember(label: "Region", required: true, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The name of the Amazon S3 bucket where the aggregated data is stored.
        public let bucketName: String
        /// A supported sync format. The following format is currently supported: JsonSerDe
        public let syncFormat: ResourceDataSyncS3Format
        /// The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.
        public let region: String
        /// An Amazon S3 prefix for the bucket.
        public let prefix: String?

        public init(bucketName: String, syncFormat: ResourceDataSyncS3Format, region: String, prefix: String? = nil) {
            self.bucketName = bucketName
            self.syncFormat = syncFormat
            self.region = region
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "BucketName"
            case syncFormat = "SyncFormat"
            case region = "Region"
            case prefix = "Prefix"
        }
    }

    public struct InstanceInformationFilterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInformationFilter", required: false, type: .list)
        ]
        public let instanceInformationFilter: [InstanceInformationFilter]?

        public init(instanceInformationFilter: [InstanceInformationFilter]? = nil) {
            self.instanceInformationFilter = instanceInformationFilter
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInformationFilter = "InstanceInformationFilter"
        }
    }

    public struct ParameterHistory: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AllowedPattern", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedUser", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of the query key used for this parameter.
        public let keyId: String?
        /// The name of the parameter.
        public let name: String?
        /// Date the parameter was last changed or updated.
        public let lastModifiedDate: Double?
        /// Parameter names can include the following letters and symbols. a-zA-Z0-9_.-
        public let allowedPattern: String?
        /// The type of parameter used.
        public let `type`: ParameterType?
        /// The parameter value.
        public let value: String?
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        public let lastModifiedUser: String?
        /// Information about the parameter.
        public let description: String?

        public init(keyId: String? = nil, name: String? = nil, lastModifiedDate: Double? = nil, allowedPattern: String? = nil, type: ParameterType? = nil, value: String? = nil, lastModifiedUser: String? = nil, description: String? = nil) {
            self.keyId = keyId
            self.name = name
            self.lastModifiedDate = lastModifiedDate
            self.allowedPattern = allowedPattern
            self.`type` = `type`
            self.value = value
            self.lastModifiedUser = lastModifiedUser
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case name = "Name"
            case lastModifiedDate = "LastModifiedDate"
            case allowedPattern = "AllowedPattern"
            case `type` = "Type"
            case value = "Value"
            case lastModifiedUser = "LastModifiedUser"
            case description = "Description"
        }
    }

    public enum MaintenanceWindowTaskType: String, CustomStringConvertible, Codable {
        case run_command = "RUN_COMMAND"
        public var description: String { return self.rawValue }
    }

    public struct PatchOrchestratorFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The key for the filter.
        public let key: String?
        /// The value for the filter.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public enum CommandFilterKey: String, CustomStringConvertible, Codable {
        case invokedafter = "InvokedAfter"
        case invokedbefore = "InvokedBefore"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum ResourceDataSyncS3Format: String, CustomStringConvertible, Codable {
        case jsonserde = "JsonSerDe"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDocumentResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentDescription", required: false, type: .structure)
        ]
        /// A description of the document that was updated.
        public let documentDescription: DocumentDescription?

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

        private enum CodingKeys: String, CodingKey {
            case documentDescription = "DocumentDescription"
        }
    }

    public struct InventoryItemAttribute: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataType", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The data type of the inventory item attribute. 
        public let dataType: InventoryAttributeDataType
        /// Name of the inventory item attribute.
        public let name: String

        public init(dataType: InventoryAttributeDataType, name: String) {
            self.dataType = dataType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case dataType = "DataType"
            case name = "Name"
        }
    }

    public struct DocumentDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sha1", required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "PlatformTypes", required: false, type: .structure), 
            AWSShapeMember(label: "Hash", required: false, type: .string), 
            AWSShapeMember(label: "HashType", required: false, type: .enum)
        ]
        /// The SHA1 hash of the document, which you can use for verification purposes.
        public let sha1: String?
        /// The default version.
        public let defaultVersion: String?
        /// The date when the document was created.
        public let createdDate: Double?
        /// The AWS user account of the person who created the document.
        public let owner: String?
        /// The type of document. 
        public let documentType: DocumentType?
        /// A description of the document. 
        public let description: String?
        /// The status of the SSM document.
        public let status: DocumentStatus?
        /// A description of the parameters for a document.
        public let parameters: DocumentParameterList?
        /// The name of the SSM document.
        public let name: String?
        /// The document version.
        public let documentVersion: String?
        /// The schema version.
        public let schemaVersion: String?
        /// The latest version of the document.
        public let latestVersion: String?
        /// The list of OS platforms compatible with this SSM document. 
        public let platformTypes: PlatformTypeList?
        /// The Sha256 or Sha1 hash created by the system when the document was created.   Sha1 hashes have been deprecated. 
        public let hash: String?
        /// Sha256 or Sha1.  Sha1 hashes have been deprecated. 
        public let hashType: DocumentHashType?

        public init(sha1: String? = nil, defaultVersion: String? = nil, createdDate: Double? = nil, owner: String? = nil, documentType: DocumentType? = nil, description: String? = nil, status: DocumentStatus? = nil, parameters: DocumentParameterList? = nil, name: String? = nil, documentVersion: String? = nil, schemaVersion: String? = nil, latestVersion: String? = nil, platformTypes: PlatformTypeList? = nil, hash: String? = nil, hashType: DocumentHashType? = nil) {
            self.sha1 = sha1
            self.defaultVersion = defaultVersion
            self.createdDate = createdDate
            self.owner = owner
            self.documentType = documentType
            self.description = description
            self.status = status
            self.parameters = parameters
            self.name = name
            self.documentVersion = documentVersion
            self.schemaVersion = schemaVersion
            self.latestVersion = latestVersion
            self.platformTypes = platformTypes
            self.hash = hash
            self.hashType = hashType
        }

        private enum CodingKeys: String, CodingKey {
            case sha1 = "Sha1"
            case defaultVersion = "DefaultVersion"
            case createdDate = "CreatedDate"
            case owner = "Owner"
            case documentType = "DocumentType"
            case description = "Description"
            case status = "Status"
            case parameters = "Parameters"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case schemaVersion = "SchemaVersion"
            case latestVersion = "LatestVersion"
            case platformTypes = "PlatformTypes"
            case hash = "Hash"
            case hashType = "HashType"
        }
    }

    public struct DeregisterPatchBaselineForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: true, type: .string)
        ]
        /// The ID of the patch baseline to deregister the patch group from.
        public let baselineId: String
        /// The name of the patch group that should be deregistered from the patch baseline.
        public let patchGroup: String

        public init(baselineId: String, patchGroup: String) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case patchGroup = "PatchGroup"
        }
    }

    public struct InstanceInformationFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "valueSet", required: true, type: .structure)
        ]
        /// The name of the filter. 
        public let key: InstanceInformationFilterKey
        /// The filter values.
        public let valueSet: InstanceInformationFilterValueSet

        public init(key: InstanceInformationFilterKey, valueSet: InstanceInformationFilterValueSet) {
            self.key = key
            self.valueSet = valueSet
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case valueSet = "valueSet"
        }
    }

    public struct CreateResourceDataSyncResult: AWSShape {
        /// The key for the payload

    }

    public struct DescribeEffectiveInstanceAssociationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instance ID for which you want to view all associations.
        public let instanceId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case maxResults = "MaxResults"
        }
    }

    public struct ModifyDocumentPermissionResponse: AWSShape {
        /// The key for the payload

    }

    public struct PatchFilterGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchFilters", required: true, type: .list)
        ]
        /// The set of patch filters that make up the group.
        public let patchFilters: [PatchFilter]

        public init(patchFilters: [PatchFilter]) {
            self.patchFilters = patchFilters
        }

        private enum CodingKeys: String, CodingKey {
            case patchFilters = "PatchFilters"
        }
    }

    public struct DescribeDocumentPermissionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PermissionType", required: true, type: .enum)
        ]
        /// The name of the document for which you are the owner.
        public let name: String
        /// The permission type for the document. The permission type can be Share.
        public let permissionType: DocumentPermissionType

        public init(name: String, permissionType: DocumentPermissionType) {
            self.name = name
            self.permissionType = permissionType
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case permissionType = "PermissionType"
        }
    }

    public struct RegisterPatchBaselineForPatchGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: false, type: .string)
        ]
        /// The ID of the patch baseline the patch group was registered with.
        public let baselineId: String?
        /// The name of the patch group registered with the patch baseline.
        public let patchGroup: String?

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case patchGroup = "PatchGroup"
        }
    }

    public struct CommandFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: CommandFilterKey
        /// The filter value. 
        public let value: String

        public init(key: CommandFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public enum MaintenanceWindowResourceType: String, CustomStringConvertible, Codable {
        case instance = "INSTANCE"
        public var description: String { return self.rawValue }
    }

    public struct CreateDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum)
        ]
        /// A valid JSON string.
        public let content: String
        /// A name for the Systems Manager document.
        public let name: String
        /// The type of document to create. Valid document types include: Policy, Automation, and Command.
        public let documentType: DocumentType?

        public init(content: String, name: String, documentType: DocumentType? = nil) {
            self.content = content
            self.name = name
            self.documentType = documentType
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case name = "Name"
            case documentType = "DocumentType"
        }
    }

    public struct RegisterDefaultPatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the default patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct GetDeployablePatchSnapshotForInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The user-defined snapshot ID.
        public let snapshotId: String
        /// The ID of the instance for which the appropriate patch snapshot should be retrieved.
        public let instanceId: String

        public init(snapshotId: String, instanceId: String) {
            self.snapshotId = snapshotId
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case instanceId = "InstanceId"
        }
    }

    public struct SendCommandResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Command", required: false, type: .structure)
        ]
        /// The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.
        public let command: Command?

        public init(command: Command? = nil) {
            self.command = command
        }

        private enum CodingKeys: String, CodingKey {
            case command = "Command"
        }
    }

    public struct DeregisterTaskFromMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "WindowTaskId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window the task should be removed from.
        public let windowId: String
        /// The ID of the task to remove from the Maintenance Window.
        public let windowTaskId: String

        public init(windowId: String, windowTaskId: String) {
            self.windowId = windowId
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case windowTaskId = "WindowTaskId"
        }
    }

    public struct GetParametersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean), 
            AWSShapeMember(label: "Names", required: true, type: .list)
        ]
        /// Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.
        public let withDecryption: Bool?
        /// Names of the parameters for which you want to query information.
        public let names: [String]

        public init(withDecryption: Bool? = nil, names: [String]) {
            self.withDecryption = withDecryption
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case withDecryption = "WithDecryption"
            case names = "Names"
        }
    }

    public struct ListCommandInvocationsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CommandInvocations", required: false, type: .list)
        ]
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// (Optional) A list of all invocations. 
        public let commandInvocations: [CommandInvocation]?

        public init(nextToken: String? = nil, commandInvocations: [CommandInvocation]? = nil) {
            self.nextToken = nextToken
            self.commandInvocations = commandInvocations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case commandInvocations = "CommandInvocations"
        }
    }

    public struct DescribeMaintenanceWindowExecutionsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ID of the Maintenance Window whose executions should be retrieved.
        public let windowId: String
        /// Each entry in the array is a structure containing: Key (string, between 1 and 128 characters) Values (array of strings, each string is between 1 and 256 characters) The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.
        public let filters: [MaintenanceWindowFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(windowId: String, filters: [MaintenanceWindowFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.windowId = windowId
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteParametersResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidParameters", required: false, type: .list), 
            AWSShapeMember(label: "DeletedParameters", required: false, type: .list)
        ]
        /// The names of parameters that weren't deleted because the parameters are not valid.
        public let invalidParameters: [String]?
        /// The names of the deleted parameters.
        public let deletedParameters: [String]?

        public init(invalidParameters: [String]? = nil, deletedParameters: [String]? = nil) {
            self.invalidParameters = invalidParameters
            self.deletedParameters = deletedParameters
        }

        private enum CodingKeys: String, CodingKey {
            case invalidParameters = "InvalidParameters"
            case deletedParameters = "DeletedParameters"
        }
    }

    public enum Fault: String, CustomStringConvertible, Codable {
        case client = "Client"
        case server = "Server"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct ListCommandsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// (Optional) One or more filters. Use a filter to return a more specific list of results. 
        public let filters: [CommandFilter]?
        /// (Optional) If provided, lists only the specified command.
        public let commandId: String?
        /// (Optional) Lists commands issued against this instance ID.
        public let instanceId: String?
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(filters: [CommandFilter]? = nil, commandId: String? = nil, instanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.commandId = commandId
            self.instanceId = instanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case commandId = "CommandId"
            case instanceId = "InstanceId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ParameterMetadata: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AllowedPattern", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedUser", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of the query key used for this parameter.
        public let keyId: String?
        /// The parameter name.
        public let name: String?
        /// Date the parameter was last changed or updated.
        public let lastModifiedDate: Double?
        /// A parameter name can include only the following letters and symbols. a-zA-Z0-9_.-
        public let allowedPattern: String?
        /// The type of parameter. Valid parameter types include the following: String, String list, Secure string.
        public let `type`: ParameterType?
        /// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
        public let lastModifiedUser: String?
        /// Description of the parameter actions.
        public let description: String?

        public init(keyId: String? = nil, name: String? = nil, lastModifiedDate: Double? = nil, allowedPattern: String? = nil, type: ParameterType? = nil, lastModifiedUser: String? = nil, description: String? = nil) {
            self.keyId = keyId
            self.name = name
            self.lastModifiedDate = lastModifiedDate
            self.allowedPattern = allowedPattern
            self.`type` = `type`
            self.lastModifiedUser = lastModifiedUser
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case name = "Name"
            case lastModifiedDate = "LastModifiedDate"
            case allowedPattern = "AllowedPattern"
            case `type` = "Type"
            case lastModifiedUser = "LastModifiedUser"
            case description = "Description"
        }
    }

    public enum DescribeActivationsFilterKeys: String, CustomStringConvertible, Codable {
        case activationids = "ActivationIds"
        case defaultinstancename = "DefaultInstanceName"
        case iamrole = "IamRole"
        public var description: String { return self.rawValue }
    }

    public struct DescribeMaintenanceWindowsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// Optional filters used to narrow down the scope of the returned Maintenance Windows. Supported filter keys are Name and Enabled.
        public let filters: [MaintenanceWindowFilter]?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [MaintenanceWindowFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct PlatformTypeList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformType", required: false, type: .list)
        ]
        public let platformType: [PlatformType]?

        public init(platformType: [PlatformType]? = nil) {
            self.platformType = platformType
        }

        private enum CodingKeys: String, CodingKey {
            case platformType = "PlatformType"
        }
    }

    public struct UpdatePatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of the deleted patch baseline.
        public let baselineId: String?
        /// A list of explicitly approved patches for the baseline.
        public let approvedPatches: [String]?
        /// The date when the patch baseline was last modified.
        public let modifiedDate: Double?
        /// The name of the patch baseline.
        public let name: String?
        /// A list of explicitly rejected patches for the baseline.
        public let rejectedPatches: [String]?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// The date when the patch baseline was created.
        public let createdDate: Double?
        /// A description of the Patch Baseline.
        public let description: String?

        public init(baselineId: String? = nil, approvedPatches: [String]? = nil, modifiedDate: Double? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, createdDate: Double? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.modifiedDate = modifiedDate
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.createdDate = createdDate
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case approvedPatches = "ApprovedPatches"
            case modifiedDate = "ModifiedDate"
            case name = "Name"
            case rejectedPatches = "RejectedPatches"
            case approvalRules = "ApprovalRules"
            case globalFilters = "GlobalFilters"
            case createdDate = "CreatedDate"
            case description = "Description"
        }
    }

    public struct DescribeInstanceInformationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInformationFilterList", required: false, type: .structure), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters. Use a filter to return a more specific list of instances.
        public let instanceInformationFilterList: InstanceInformationFilterList?
        /// One or more filters. Use a filter to return a more specific list of instances.
        public let filters: InstanceInformationStringFilterList?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. 
        public let maxResults: Int32?

        public init(instanceInformationFilterList: InstanceInformationFilterList? = nil, filters: InstanceInformationStringFilterList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.instanceInformationFilterList = instanceInformationFilterList
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInformationFilterList = "InstanceInformationFilterList"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetInventoryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "ResultAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: InventoryFilterList?
        /// The list of inventory item types to return.
        public let resultAttributes: ResultAttributeList?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(filters: InventoryFilterList? = nil, resultAttributes: ResultAttributeList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.resultAttributes = resultAttributes
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case resultAttributes = "ResultAttributes"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribePatchBaselinesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of PatchBaselineIdentity elements.
        public let baselineIdentities: [PatchBaselineIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(baselineIdentities: [PatchBaselineIdentity]? = nil, nextToken: String? = nil) {
            self.baselineIdentities = baselineIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case baselineIdentities = "BaselineIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct InstanceAggregatedAssociationOverview: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceAssociationStatusAggregatedCount", required: false, type: .map), 
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string)
        ]
        /// The number of associations for the instance(s).
        public let instanceAssociationStatusAggregatedCount: [String: Int32]?
        /// Detailed status information about the aggregated associations.
        public let detailedStatus: String?

        public init(instanceAssociationStatusAggregatedCount: [String: Int32]? = nil, detailedStatus: String? = nil) {
            self.instanceAssociationStatusAggregatedCount = instanceAssociationStatusAggregatedCount
            self.detailedStatus = detailedStatus
        }

        private enum CodingKeys: String, CodingKey {
            case instanceAssociationStatusAggregatedCount = "InstanceAssociationStatusAggregatedCount"
            case detailedStatus = "DetailedStatus"
        }
    }

    public struct GetCommandInvocationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PluginName", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionElapsedTime", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "StandardOutputUrl", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorContent", required: false, type: .string), 
            AWSShapeMember(label: "DocumentName", required: false, type: .string), 
            AWSShapeMember(label: "StandardErrorUrl", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionEndDateTime", required: false, type: .string), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .integer), 
            AWSShapeMember(label: "StandardOutputContent", required: false, type: .string), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionStartDateTime", required: false, type: .string)
        ]
        /// The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin.
        public let pluginName: String?
        /// Duration since ExecutionStartDateTime.
        public let executionElapsedTime: String?
        /// The comment text for the command.
        public let comment: String?
        /// The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3 bucket was not specified, then this string is empty.
        public let standardOutputUrl: String?
        /// The status of the parent command for this invocation. This status can be different than StatusDetails.
        public let status: CommandInvocationStatus?
        /// The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        public let instanceId: String?
        /// The first 8,000 characters written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        public let standardErrorContent: String?
        /// The name of the document that was executed. For example, AWS-RunShellScript.
        public let documentName: String?
        /// The URL for the complete text written by the plugin to stderr. If the command has not finished executing, then this string is empty.
        public let standardErrorUrl: String?
        /// The date and time the plugin was finished executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the InvokedAfter filter.  aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z  If the plugin has not started to execute, the string is empty.
        public let executionEndDateTime: String?
        /// The error level response code for the plugin script. If the response code is -1, then the command has not started executing on the instance, or it was not received by the instance.
        public let responseCode: Int32?
        /// The first 24,000 characters written by the plugin to stdout. If the command has not finished executing, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.
        public let standardOutputContent: String?
        /// The parent command ID of the invocation plugin.
        public let commandId: String?
        /// A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see Run Command Status. StatusDetails can be one of the following values:   Pending: The command has not been sent to the instance.   In Progress: The command has been sent to the instance but has not reached a terminal state.   Delayed: The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, the instance was stopped, etc. The system will try to deliver the command again.   Success: The command or plugin was executed successfully. This is a terminal state.   Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Execution Timed Out: The command started to execute on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.   Failed: The command wasn't executed successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.   Canceled: The command was terminated before it was completed. This is a terminal state.   Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.   Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.  
        public let statusDetails: String?
        /// The date and time the plugin started executing. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the InvokedBefore filter.  aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z  If the plugin has not started to execute, the string is empty.
        public let executionStartDateTime: String?

        public init(pluginName: String? = nil, executionElapsedTime: String? = nil, comment: String? = nil, standardOutputUrl: String? = nil, status: CommandInvocationStatus? = nil, instanceId: String? = nil, standardErrorContent: String? = nil, documentName: String? = nil, standardErrorUrl: String? = nil, executionEndDateTime: String? = nil, responseCode: Int32? = nil, standardOutputContent: String? = nil, commandId: String? = nil, statusDetails: String? = nil, executionStartDateTime: String? = nil) {
            self.pluginName = pluginName
            self.executionElapsedTime = executionElapsedTime
            self.comment = comment
            self.standardOutputUrl = standardOutputUrl
            self.status = status
            self.instanceId = instanceId
            self.standardErrorContent = standardErrorContent
            self.documentName = documentName
            self.standardErrorUrl = standardErrorUrl
            self.executionEndDateTime = executionEndDateTime
            self.responseCode = responseCode
            self.standardOutputContent = standardOutputContent
            self.commandId = commandId
            self.statusDetails = statusDetails
            self.executionStartDateTime = executionStartDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case pluginName = "PluginName"
            case executionElapsedTime = "ExecutionElapsedTime"
            case comment = "Comment"
            case standardOutputUrl = "StandardOutputUrl"
            case status = "Status"
            case instanceId = "InstanceId"
            case standardErrorContent = "StandardErrorContent"
            case documentName = "DocumentName"
            case standardErrorUrl = "StandardErrorUrl"
            case executionEndDateTime = "ExecutionEndDateTime"
            case responseCode = "ResponseCode"
            case standardOutputContent = "StandardOutputContent"
            case commandId = "CommandId"
            case statusDetails = "StatusDetails"
            case executionStartDateTime = "ExecutionStartDateTime"
        }
    }

    public struct InstanceInformationList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInformation", required: false, type: .list)
        ]
        public let instanceInformation: [InstanceInformation]?

        public init(instanceInformation: [InstanceInformation]? = nil) {
            self.instanceInformation = instanceInformation
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInformation = "InstanceInformation"
        }
    }

    public struct InventoryItemSchema: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .structure), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate.
        public let typeName: String
        /// The schema attributes for inventory. This contains data type and attribute name.
        public let attributes: InventoryItemAttributeList
        /// The schema version for the inventory item.
        public let version: String?

        public init(typeName: String, attributes: InventoryItemAttributeList, version: String? = nil) {
            self.typeName = typeName
            self.attributes = attributes
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case attributes = "Attributes"
            case version = "Version"
        }
    }

    public struct UpdateAssociationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// The description of the association that was updated.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct UpdateManagedInstanceRoleResult: AWSShape {
        /// The key for the payload

    }

    public struct DescribeInstanceInformationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceInformationList", required: false, type: .structure)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty. 
        public let nextToken: String?
        /// The instance information list.
        public let instanceInformationList: InstanceInformationList?

        public init(nextToken: String? = nil, instanceInformationList: InstanceInformationList? = nil) {
            self.nextToken = nextToken
            self.instanceInformationList = instanceInformationList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instanceInformationList = "InstanceInformationList"
        }
    }

    public struct PatchStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApprovalDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .enum)
        ]
        /// The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
        public let approvalDate: Double?
        /// The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED).
        public let deploymentStatus: PatchDeploymentStatus?

        public init(approvalDate: Double? = nil, deploymentStatus: PatchDeploymentStatus? = nil) {
            self.approvalDate = approvalDate
            self.deploymentStatus = deploymentStatus
        }

        private enum CodingKeys: String, CodingKey {
            case approvalDate = "ApprovalDate"
            case deploymentStatus = "DeploymentStatus"
        }
    }

    public struct StartAutomationExecutionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "DocumentName", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// A key-value map of execution parameters, which match the declared parameters in the Automation document.
        public let parameters: [String: [String]]?
        /// The name of the Automation document to use for this execution.
        public let documentName: String
        /// The version of the Automation document to use for this execution.
        public let documentVersion: String?

        public init(parameters: [String: [String]]? = nil, documentName: String, documentVersion: String? = nil) {
            self.parameters = parameters
            self.documentName = documentName
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case documentName = "DocumentName"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct UpdateDocumentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The content in a document that you want to update.
        public let content: String
        /// The name of the document that you want to update.
        public let name: String
        /// The version of the document that you want to update.
        public let documentVersion: String?

        public init(content: String, name: String, documentVersion: String? = nil) {
            self.content = content
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct GetMaintenanceWindowExecutionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskIds", required: false, type: .list), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The time the Maintenance Window finished executing.
        public let endTime: Double?
        /// The ID of the task executions from the Maintenance Window execution.
        public let taskIds: [String]?
        /// The time the Maintenance Window started executing.
        public let startTime: Double?
        /// The status of the Maintenance Window execution.
        public let status: MaintenanceWindowExecutionStatus?
        /// The ID of the Maintenance Window execution.
        public let windowExecutionId: String?
        /// The details explaining the Status. Only available for certain status values.
        public let statusDetails: String?

        public init(endTime: Double? = nil, taskIds: [String]? = nil, startTime: Double? = nil, status: MaintenanceWindowExecutionStatus? = nil, windowExecutionId: String? = nil, statusDetails: String? = nil) {
            self.endTime = endTime
            self.taskIds = taskIds
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case taskIds = "TaskIds"
            case startTime = "StartTime"
            case status = "Status"
            case windowExecutionId = "WindowExecutionId"
            case statusDetails = "StatusDetails"
        }
    }

    public struct DescribePatchGroupStateResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancesWithMissingPatches", required: false, type: .integer), 
            AWSShapeMember(label: "Instances", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithNotApplicablePatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithInstalledPatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithFailedPatches", required: false, type: .integer), 
            AWSShapeMember(label: "InstancesWithInstalledOtherPatches", required: false, type: .integer)
        ]
        /// The number of instances with missing patches from the patch baseline.
        public let instancesWithMissingPatches: Int32?
        /// The number of instances in the patch group.
        public let instances: Int32?
        /// The number of instances with patches that aren't applicable.
        public let instancesWithNotApplicablePatches: Int32?
        /// The number of instances with installed patches.
        public let instancesWithInstalledPatches: Int32?
        /// The number of instances with patches from the patch baseline that failed to install.
        public let instancesWithFailedPatches: Int32?
        /// The number of instances with patches installed that aren't defined in the patch baseline.
        public let instancesWithInstalledOtherPatches: Int32?

        public init(instancesWithMissingPatches: Int32? = nil, instances: Int32? = nil, instancesWithNotApplicablePatches: Int32? = nil, instancesWithInstalledPatches: Int32? = nil, instancesWithFailedPatches: Int32? = nil, instancesWithInstalledOtherPatches: Int32? = nil) {
            self.instancesWithMissingPatches = instancesWithMissingPatches
            self.instances = instances
            self.instancesWithNotApplicablePatches = instancesWithNotApplicablePatches
            self.instancesWithInstalledPatches = instancesWithInstalledPatches
            self.instancesWithFailedPatches = instancesWithFailedPatches
            self.instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatches
        }

        private enum CodingKeys: String, CodingKey {
            case instancesWithMissingPatches = "InstancesWithMissingPatches"
            case instances = "Instances"
            case instancesWithNotApplicablePatches = "InstancesWithNotApplicablePatches"
            case instancesWithInstalledPatches = "InstancesWithInstalledPatches"
            case instancesWithFailedPatches = "InstancesWithFailedPatches"
            case instancesWithInstalledOtherPatches = "InstancesWithInstalledOtherPatches"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String
        /// The name of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct RegisterTaskWithMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string)
        ]
        /// The id of the task in the Maintenance Window.
        public let windowTaskId: String?

        public init(windowTaskId: String? = nil) {
            self.windowTaskId = windowTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case windowTaskId = "WindowTaskId"
        }
    }

    public struct DescribeAssociationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// The name of the SSM document.
        public let name: String?
        /// The instance ID.
        public let instanceId: String?
        /// The association ID for which you want information.
        public let associationId: String?

        public init(name: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case instanceId = "InstanceId"
            case associationId = "AssociationId"
        }
    }

    public struct MaintenanceWindowIdentity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The ID of the Maintenance Window.
        public let windowId: String?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?
        /// The name of the Maintenance Window.
        public let name: String?
        /// Whether the Maintenance Window is enabled.
        public let enabled: Bool?

        public init(windowId: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil, name: String? = nil, enabled: Bool? = nil) {
            self.windowId = windowId
            self.cutoff = cutoff
            self.duration = duration
            self.name = name
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case cutoff = "Cutoff"
            case duration = "Duration"
            case name = "Name"
            case enabled = "Enabled"
        }
    }

    public struct DeregisterManagedInstanceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The ID assigned to the managed instance when you registered it using the activation process. 
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    public struct DocumentDefaultVersionDescription: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", required: false, type: .string)
        ]
        /// The name of the document.
        public let name: String?
        /// The default version of the document.
        public let defaultVersion: String?

        public init(name: String? = nil, defaultVersion: String? = nil) {
            self.name = name
            self.defaultVersion = defaultVersion
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case defaultVersion = "DefaultVersion"
        }
    }

    public struct AutomationExecutionFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The aspect of the Automation execution information that should be limited.
        public let key: AutomationExecutionFilterKey
        /// The values used to limit the execution information associated with the filter's key.
        public let values: [String]

        public init(key: AutomationExecutionFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public enum InventoryQueryOperatorType: String, CustomStringConvertible, Codable {
        case equal = "Equal"
        case notequal = "NotEqual"
        case beginwith = "BeginWith"
        case lessthan = "LessThan"
        case greaterthan = "GreaterThan"
        public var description: String { return self.rawValue }
    }

    public struct CreateActivationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamRole", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistrationLimit", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "ExpirationDate", required: false, type: .timestamp)
        ]
        /// The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance. 
        public let iamRole: String
        /// A userdefined description of the resource that you want to register with Amazon EC2. 
        public let description: String?
        /// Specify the maximum number of managed instances you want to register. The default value is 1 instance.
        public let registrationLimit: Int32?
        /// The name of the registered, managed instance as it will appear in the Amazon EC2 console or when you use the AWS command line tools to list EC2 resources.
        public let defaultInstanceName: String?
        /// The date by which this activation request should expire. The default value is 24 hours.
        public let expirationDate: Double?

        public init(iamRole: String, description: String? = nil, registrationLimit: Int32? = nil, defaultInstanceName: String? = nil, expirationDate: Double? = nil) {
            self.iamRole = iamRole
            self.description = description
            self.registrationLimit = registrationLimit
            self.defaultInstanceName = defaultInstanceName
            self.expirationDate = expirationDate
        }

        private enum CodingKeys: String, CodingKey {
            case iamRole = "IamRole"
            case description = "Description"
            case registrationLimit = "RegistrationLimit"
            case defaultInstanceName = "DefaultInstanceName"
            case expirationDate = "ExpirationDate"
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum)
        ]
        /// The resource ID you want to tag.
        public let resourceId: String
        ///  One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. 
        public let tags: [Tag]
        /// Specifies the type of resource you are tagging.
        public let resourceType: ResourceTypeForTagging

        public init(resourceId: String, tags: [Tag], resourceType: ResourceTypeForTagging) {
            self.resourceId = resourceId
            self.tags = tags
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
            case resourceType = "ResourceType"
        }
    }

    public struct MaintenanceWindowTask: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .map), 
            AWSShapeMember(label: "WindowTaskId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "LoggingInfo", required: false, type: .structure), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The Maintenance Window ID where the task is registered.
        public let windowId: String?
        /// The ARN of the task to execute.
        public let taskArn: String?
        /// The role that should be assumed when executing the task
        public let serviceRoleArn: String?
        /// The maximum number of errors allowed before this task stops being scheduled.
        public let maxErrors: String?
        /// The parameters that should be passed to the task when it is executed.
        public let taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]?
        /// The task ID.
        public let windowTaskId: String?
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public let targets: [Target]?
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        public let priority: Int32?
        /// Information about an Amazon S3 bucket to write task-level logs to.
        public let loggingInfo: LoggingInfo?
        /// The maximum number of targets this task can be run for in parallel.
        public let maxConcurrency: String?
        /// The type of task.
        public let `type`: MaintenanceWindowTaskType?

        public init(windowId: String? = nil, taskArn: String? = nil, serviceRoleArn: String? = nil, maxErrors: String? = nil, taskParameters: [String: MaintenanceWindowTaskParameterValueExpression]? = nil, windowTaskId: String? = nil, targets: [Target]? = nil, priority: Int32? = nil, loggingInfo: LoggingInfo? = nil, maxConcurrency: String? = nil, type: MaintenanceWindowTaskType? = nil) {
            self.windowId = windowId
            self.taskArn = taskArn
            self.serviceRoleArn = serviceRoleArn
            self.maxErrors = maxErrors
            self.taskParameters = taskParameters
            self.windowTaskId = windowTaskId
            self.targets = targets
            self.priority = priority
            self.loggingInfo = loggingInfo
            self.maxConcurrency = maxConcurrency
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case taskArn = "TaskArn"
            case serviceRoleArn = "ServiceRoleArn"
            case maxErrors = "MaxErrors"
            case taskParameters = "TaskParameters"
            case windowTaskId = "WindowTaskId"
            case targets = "Targets"
            case priority = "Priority"
            case loggingInfo = "LoggingInfo"
            case maxConcurrency = "MaxConcurrency"
            case `type` = "Type"
        }
    }

    public struct DescribeMaintenanceWindowExecutionTaskInvocationsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionTaskInvocationIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the task invocation results per invocation.
        public let windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowExecutionTaskInvocationIdentities: [MaintenanceWindowExecutionTaskInvocationIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskInvocationIdentities = windowExecutionTaskInvocationIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionTaskInvocationIdentities = "WindowExecutionTaskInvocationIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct DocumentParameterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentParameter", required: false, type: .list)
        ]
        public let documentParameter: [DocumentParameter]?

        public init(documentParameter: [DocumentParameter]? = nil) {
            self.documentParameter = documentParameter
        }

        private enum CodingKeys: String, CodingKey {
            case documentParameter = "DocumentParameter"
        }
    }

    public struct DescribeInstancePatchesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Patches", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Each entry in the array is a structure containing: Title (string) KBId (string) Classification (string) Severity (string) State (string: "INSTALLED", "INSTALLED OTHER", "MISSING", "NOT APPLICABLE", "FAILED") InstalledTime (DateTime) InstalledBy (string)
        public let patches: [PatchComplianceData]?

        public init(nextToken: String? = nil, patches: [PatchComplianceData]? = nil) {
            self.nextToken = nextToken
            self.patches = patches
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case patches = "Patches"
        }
    }

    public struct RemoveTagsFromResourceResult: AWSShape {
        /// The key for the payload

    }

    public struct PatchGroupPatchBaselineMapping: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: false, type: .string), 
            AWSShapeMember(label: "BaselineIdentity", required: false, type: .structure)
        ]
        /// The name of the patch group registered with the patch baseline.
        public let patchGroup: String?
        /// The patch baseline the patch group is registered with.
        public let baselineIdentity: PatchBaselineIdentity?

        public init(patchGroup: String? = nil, baselineIdentity: PatchBaselineIdentity? = nil) {
            self.patchGroup = patchGroup
            self.baselineIdentity = baselineIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
            case baselineIdentity = "BaselineIdentity"
        }
    }

    public struct CreatePatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the created patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct DeleteMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window to delete.
        public let windowId: String

        public init(windowId: String) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct DescribePatchGroupsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of patch groups to return (per page).
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetPatchBaselineForPatchGroupRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchGroup", required: true, type: .string)
        ]
        /// The name of the patch group whose patch baseline should be retrieved.
        public let patchGroup: String

        public init(patchGroup: String) {
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case patchGroup = "PatchGroup"
        }
    }

    public struct DescribeActivationsFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterKey", required: false, type: .enum), 
            AWSShapeMember(label: "FilterValues", required: false, type: .list)
        ]
        /// The name of the filter.
        public let filterKey: DescribeActivationsFilterKeys?
        /// The filter values.
        public let filterValues: [String]?

        public init(filterKey: DescribeActivationsFilterKeys? = nil, filterValues: [String]? = nil) {
            self.filterKey = filterKey
            self.filterValues = filterValues
        }

        private enum CodingKeys: String, CodingKey {
            case filterKey = "FilterKey"
            case filterValues = "FilterValues"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum)
        ]
        /// The resource ID for which you want to see a list of tags.
        public let resourceId: String
        /// Returns a list of tags for a specific resource type.
        public let resourceType: ResourceTypeForTagging

        public init(resourceId: String, resourceType: ResourceTypeForTagging) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
        }
    }

    public struct GetAutomationExecutionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionId", required: true, type: .string)
        ]
        /// The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated.
        public let automationExecutionId: String

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionId = "AutomationExecutionId"
        }
    }

    public struct Parameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The type of parameter. Valid values include the following: String, String list, Secure string.
        public let `type`: ParameterType?
        /// The parameter value.
        public let value: String?
        /// The name of the parameter.
        public let name: String?

        public init(type: ParameterType? = nil, value: String? = nil, name: String? = nil) {
            self.`type` = `type`
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
            case name = "Name"
        }
    }

    public struct CreateActivationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationId", required: false, type: .string), 
            AWSShapeMember(label: "ActivationCode", required: false, type: .string)
        ]
        /// The ID number generated by the system when it processed the activation. The activation ID functions like a user name.
        public let activationId: String?
        /// The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID. 
        public let activationCode: String?

        public init(activationId: String? = nil, activationCode: String? = nil) {
            self.activationId = activationId
            self.activationCode = activationCode
        }

        private enum CodingKeys: String, CodingKey {
            case activationId = "ActivationId"
            case activationCode = "ActivationCode"
        }
    }

    public struct DescribeMaintenanceWindowExecutionTasksResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionTaskIdentities", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the task executions.
        public let windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowExecutionTaskIdentities: [MaintenanceWindowExecutionTaskIdentity]? = nil, nextToken: String? = nil) {
            self.windowExecutionTaskIdentities = windowExecutionTaskIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionTaskIdentities = "WindowExecutionTaskIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceAssociationsStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instance IDs for which you want association status information.
        public let instanceId: String
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, instanceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case maxResults = "MaxResults"
        }
    }

    public struct PutParameterResult: AWSShape {
        /// The key for the payload

    }

    public struct ListDocumentVersionsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The document versions.
        public let documentVersions: [DocumentVersionInfo]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(documentVersions: [DocumentVersionInfo]? = nil, nextToken: String? = nil) {
            self.documentVersions = documentVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersions = "DocumentVersions"
            case nextToken = "NextToken"
        }
    }

    public struct ListInventoryEntriesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "TypeName", required: true, type: .string)
        ]
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: InventoryFilterList?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instance ID for which you want inventory information.
        public let instanceId: String
        /// The type of inventory item for which you want information.
        public let typeName: String

        public init(maxResults: Int32? = nil, filters: InventoryFilterList? = nil, nextToken: String? = nil, instanceId: String, typeName: String) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case typeName = "TypeName"
        }
    }

    public enum MaintenanceWindowExecutionStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case in_progress = "IN_PROGRESS"
        case success = "SUCCESS"
        case failed = "FAILED"
        case timed_out = "TIMED_OUT"
        case cancelling = "CANCELLING"
        case cancelled = "CANCELLED"
        case skipped_overlapping = "SKIPPED_OVERLAPPING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateAssociationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string)
        ]
        /// The ID of the association you want to update. 
        public let associationId: String
        /// The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}
        public let parameters: [String: [String]]?
        /// The name of the association document.
        public let name: String?
        /// The document version you want update for the association. 
        public let documentVersion: String?
        /// The targets of the association.
        public let targets: [Target]?
        /// An Amazon S3 bucket where you want to store the results of this request.
        public let outputLocation: InstanceAssociationOutputLocation?
        /// The cron expression used to schedule the association that you want to update.
        public let scheduleExpression: String?

        public init(associationId: String, parameters: [String: [String]]? = nil, name: String? = nil, documentVersion: String? = nil, targets: [Target]? = nil, outputLocation: InstanceAssociationOutputLocation? = nil, scheduleExpression: String? = nil) {
            self.associationId = associationId
            self.parameters = parameters
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.outputLocation = outputLocation
            self.scheduleExpression = scheduleExpression
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case parameters = "Parameters"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case targets = "Targets"
            case outputLocation = "OutputLocation"
            case scheduleExpression = "ScheduleExpression"
        }
    }

    public struct GetCommandInvocationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CommandId", required: true, type: .string), 
            AWSShapeMember(label: "PluginName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// (Required) The parent command ID of the invocation plugin.
        public let commandId: String
        /// (Optional) The name of the plugin for which you want detailed results. If the document contains only one plugin, the name can be omitted and the details will be returned.
        public let pluginName: String?
        /// (Required) The ID of the managed instance targeted by the command. A managed instance can be an Amazon EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.
        public let instanceId: String

        public init(commandId: String, pluginName: String? = nil, instanceId: String) {
            self.commandId = commandId
            self.pluginName = pluginName
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case commandId = "CommandId"
            case pluginName = "PluginName"
            case instanceId = "InstanceId"
        }
    }

    public struct MaintenanceWindowExecutionTaskInvocationIdentity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "InvocationId", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string), 
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The time the invocation started.
        public let startTime: Double?
        /// The status of the task invocation.
        public let status: MaintenanceWindowExecutionStatus?
        /// The ID of the Maintenance Window execution that ran the task.
        public let windowExecutionId: String?
        /// The ID of the task invocation.
        public let invocationId: String?
        /// The parameters that were provided for the invocation when it was executed.
        public let parameters: String?
        /// The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID.
        public let executionId: String?
        /// The time the invocation finished.
        public let endTime: Double?
        /// The ID of the target definition in this Maintenance Window the invocation was performed for.
        public let windowTargetId: String?
        /// The ID of the specific task execution in the Maintenance Window execution.
        public let taskExecutionId: String?
        /// The details explaining the status of the task invocation. Only available for certain Status values. 
        public let statusDetails: String?
        /// User-provided value that was specified when the target was registered with the Maintenance Window. This was also included in any CloudWatch events raised during the task invocation.
        public let ownerInformation: String?

        public init(startTime: Double? = nil, status: MaintenanceWindowExecutionStatus? = nil, windowExecutionId: String? = nil, invocationId: String? = nil, parameters: String? = nil, executionId: String? = nil, endTime: Double? = nil, windowTargetId: String? = nil, taskExecutionId: String? = nil, statusDetails: String? = nil, ownerInformation: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.invocationId = invocationId
            self.parameters = parameters
            self.executionId = executionId
            self.endTime = endTime
            self.windowTargetId = windowTargetId
            self.taskExecutionId = taskExecutionId
            self.statusDetails = statusDetails
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case status = "Status"
            case windowExecutionId = "WindowExecutionId"
            case invocationId = "InvocationId"
            case parameters = "Parameters"
            case executionId = "ExecutionId"
            case endTime = "EndTime"
            case windowTargetId = "WindowTargetId"
            case taskExecutionId = "TaskExecutionId"
            case statusDetails = "StatusDetails"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct DeleteAssociationResult: AWSShape {
        /// The key for the payload

    }

    public struct ListResourceDataSyncRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateDocumentDefaultVersionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .structure)
        ]
        /// The description of a custom document that you want to set as the default version.
        public let description: DocumentDefaultVersionDescription?

        public init(description: DocumentDefaultVersionDescription? = nil) {
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
        }
    }

    public enum PingStatus: String, CustomStringConvertible, Codable {
        case online = "Online"
        case connectionlost = "ConnectionLost"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssociationBatchResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", required: false, type: .structure), 
            AWSShapeMember(label: "Failed", required: false, type: .structure)
        ]
        /// Information about the associations that succeeded.
        public let successful: AssociationDescriptionList?
        /// Information about the associations that failed.
        public let failed: FailedCreateAssociationList?

        public init(successful: AssociationDescriptionList? = nil, failed: FailedCreateAssociationList? = nil) {
            self.successful = successful
            self.failed = failed
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "Successful"
            case failed = "Failed"
        }
    }

    public struct AccountIdList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .list)
        ]
        public let accountId: [String]?

        public init(accountId: [String]? = nil) {
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
        }
    }

    public struct InstancePatchState: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstalledOtherCount", required: false, type: .integer), 
            AWSShapeMember(label: "FailedCount", required: false, type: .integer), 
            AWSShapeMember(label: "OperationEndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "PatchGroup", required: true, type: .string), 
            AWSShapeMember(label: "BaselineId", required: true, type: .string), 
            AWSShapeMember(label: "MissingCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "Operation", required: true, type: .enum), 
            AWSShapeMember(label: "NotApplicableCount", required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "InstalledCount", required: false, type: .integer), 
            AWSShapeMember(label: "OperationStartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The number of patches not specified in the patch baseline that are installed on the instance.
        public let installedOtherCount: Int32?
        /// The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install.
        public let failedCount: Int32?
        /// The time the most recent patching operation completed on the instance.
        public let operationEndTime: Double
        /// The name of the patch group the managed instance belongs to.
        public let patchGroup: String
        /// The ID of the patch baseline used to patch the instance.
        public let baselineId: String
        /// The number of patches from the patch baseline that are applicable for the instance but aren't currently installed.
        public let missingCount: Int32?
        /// The ID of the managed instance the high-level patch compliance information was collected for.
        public let instanceId: String
        /// The type of patching operation that was performed: SCAN (assess patch compliance state) or INSTALL (install missing patches).
        public let operation: PatchOperationType
        /// The number of patches from the patch baseline that aren't applicable for the instance and hence aren't installed on the instance.
        public let notApplicableCount: Int32?
        /// The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected.
        public let snapshotId: String?
        /// The number of patches from the patch baseline that are installed on the instance.
        public let installedCount: Int32?
        /// The time the most recent patching operation was started on the instance.
        public let operationStartTime: Double
        /// Placeholder information, this field will always be empty in the current release of the service.
        public let ownerInformation: String?

        public init(installedOtherCount: Int32? = nil, failedCount: Int32? = nil, operationEndTime: Double, patchGroup: String, baselineId: String, missingCount: Int32? = nil, instanceId: String, operation: PatchOperationType, notApplicableCount: Int32? = nil, snapshotId: String? = nil, installedCount: Int32? = nil, operationStartTime: Double, ownerInformation: String? = nil) {
            self.installedOtherCount = installedOtherCount
            self.failedCount = failedCount
            self.operationEndTime = operationEndTime
            self.patchGroup = patchGroup
            self.baselineId = baselineId
            self.missingCount = missingCount
            self.instanceId = instanceId
            self.operation = operation
            self.notApplicableCount = notApplicableCount
            self.snapshotId = snapshotId
            self.installedCount = installedCount
            self.operationStartTime = operationStartTime
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case installedOtherCount = "InstalledOtherCount"
            case failedCount = "FailedCount"
            case operationEndTime = "OperationEndTime"
            case patchGroup = "PatchGroup"
            case baselineId = "BaselineId"
            case missingCount = "MissingCount"
            case instanceId = "InstanceId"
            case operation = "Operation"
            case notApplicableCount = "NotApplicableCount"
            case snapshotId = "SnapshotId"
            case installedCount = "InstalledCount"
            case operationStartTime = "OperationStartTime"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct MaintenanceWindowExecutionTaskIdentity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "TaskType", required: false, type: .enum), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The time the task execution started.
        public let startTime: Double?
        /// The status of the task execution.
        public let status: MaintenanceWindowExecutionStatus?
        /// The ID of the Maintenance Window execution that ran the task.
        public let windowExecutionId: String?
        /// The ARN of the executed task.
        public let taskArn: String?
        /// The type of executed task.
        public let taskType: MaintenanceWindowTaskType?
        /// The time the task execution finished.
        public let endTime: Double?
        /// The ID of the specific task execution in the Maintenance Window execution.
        public let taskExecutionId: String?
        /// The details explaining the status of the task execution. Only available for certain status values.
        public let statusDetails: String?

        public init(startTime: Double? = nil, status: MaintenanceWindowExecutionStatus? = nil, windowExecutionId: String? = nil, taskArn: String? = nil, taskType: MaintenanceWindowTaskType? = nil, endTime: Double? = nil, taskExecutionId: String? = nil, statusDetails: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.taskArn = taskArn
            self.taskType = taskType
            self.endTime = endTime
            self.taskExecutionId = taskExecutionId
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case status = "Status"
            case windowExecutionId = "WindowExecutionId"
            case taskArn = "TaskArn"
            case taskType = "TaskType"
            case endTime = "EndTime"
            case taskExecutionId = "TaskExecutionId"
            case statusDetails = "StatusDetails"
        }
    }

    public struct MaintenanceWindowExecution: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The time the execution finished.
        public let endTime: Double?
        /// The ID of the Maintenance Window.
        public let windowId: String?
        /// The time the execution started.
        public let startTime: Double?
        /// The status of the execution.
        public let status: MaintenanceWindowExecutionStatus?
        /// The ID of the Maintenance Window execution.
        public let windowExecutionId: String?
        /// The details explaining the Status. Only available for certain status values.
        public let statusDetails: String?

        public init(endTime: Double? = nil, windowId: String? = nil, startTime: Double? = nil, status: MaintenanceWindowExecutionStatus? = nil, windowExecutionId: String? = nil, statusDetails: String? = nil) {
            self.endTime = endTime
            self.windowId = windowId
            self.startTime = startTime
            self.status = status
            self.windowExecutionId = windowExecutionId
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case windowId = "WindowId"
            case startTime = "StartTime"
            case status = "Status"
            case windowExecutionId = "WindowExecutionId"
            case statusDetails = "StatusDetails"
        }
    }

    public enum InstancePatchStateOperatorType: String, CustomStringConvertible, Codable {
        case equal = "Equal"
        case notequal = "NotEqual"
        case lessthan = "LessThan"
        case greaterthan = "GreaterThan"
        public var description: String { return self.rawValue }
    }

    public enum DocumentHashType: String, CustomStringConvertible, Codable {
        case sha256 = "Sha256"
        case sha1 = "Sha1"
        public var description: String { return self.rawValue }
    }

    public enum ParameterType: String, CustomStringConvertible, Codable {
        case string = "String"
        case stringlist = "StringList"
        case securestring = "SecureString"
        public var description: String { return self.rawValue }
    }

    public struct AssociationList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", required: false, type: .list)
        ]
        public let association: [Association]?

        public init(association: [Association]? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "Association"
        }
    }

    public struct PutInventoryResult: AWSShape {
        /// The key for the payload

    }

    public struct ListDocumentsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The names of the SSM documents.
        public let documentIdentifiers: DocumentIdentifierList?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(documentIdentifiers: DocumentIdentifierList? = nil, nextToken: String? = nil) {
            self.documentIdentifiers = documentIdentifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentIdentifiers = "DocumentIdentifiers"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAvailablePatchesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// Filters used to scope down the returned patches.
        public let filters: [PatchOrchestratorFilter]?
        /// The maximum number of patches to return (per page).
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [PatchOrchestratorFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]
        /// A list of tags.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct StepExecution: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StepName", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .string), 
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "Inputs", required: false, type: .map), 
            AWSShapeMember(label: "ExecutionStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Outputs", required: false, type: .map), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .string), 
            AWSShapeMember(label: "FailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "StepStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Response", required: false, type: .string)
        ]
        /// If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated.
        public let executionEndTime: Double?
        /// The name of this execution step.
        public let stepName: String?
        /// The action this step performs. The action determines the behavior of the step.
        public let action: String?
        /// Information about the Automation failure.
        public let failureDetails: FailureDetails?
        /// Fully-resolved values passed into the step before execution.
        public let inputs: [String: String]?
        /// If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated.
        public let executionStartTime: Double?
        /// Returned values from the execution of the step.
        public let outputs: [String: [String]]?
        /// The response code returned by the execution of the step.
        public let responseCode: String?
        /// If a step failed, this message explains why the execution failed.
        public let failureMessage: String?
        /// The execution status for this step. Valid values include: Pending, InProgress, Success, Cancelled, Failed, and TimedOut.
        public let stepStatus: AutomationExecutionStatus?
        /// A message associated with the response code for an execution.
        public let response: String?

        public init(executionEndTime: Double? = nil, stepName: String? = nil, action: String? = nil, failureDetails: FailureDetails? = nil, inputs: [String: String]? = nil, executionStartTime: Double? = nil, outputs: [String: [String]]? = nil, responseCode: String? = nil, failureMessage: String? = nil, stepStatus: AutomationExecutionStatus? = nil, response: String? = nil) {
            self.executionEndTime = executionEndTime
            self.stepName = stepName
            self.action = action
            self.failureDetails = failureDetails
            self.inputs = inputs
            self.executionStartTime = executionStartTime
            self.outputs = outputs
            self.responseCode = responseCode
            self.failureMessage = failureMessage
            self.stepStatus = stepStatus
            self.response = response
        }

        private enum CodingKeys: String, CodingKey {
            case executionEndTime = "ExecutionEndTime"
            case stepName = "StepName"
            case action = "Action"
            case failureDetails = "FailureDetails"
            case inputs = "Inputs"
            case executionStartTime = "ExecutionStartTime"
            case outputs = "Outputs"
            case responseCode = "ResponseCode"
            case failureMessage = "FailureMessage"
            case stepStatus = "StepStatus"
            case response = "Response"
        }
    }

    public struct AssociationOverview: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "AssociationStatusAggregatedCount", required: false, type: .map), 
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string)
        ]
        /// The status of the association. Status can be: Pending, Success, or Failed.
        public let status: String?
        /// Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status.
        public let associationStatusAggregatedCount: [String: Int32]?
        /// A detailed status of the association.
        public let detailedStatus: String?

        public init(status: String? = nil, associationStatusAggregatedCount: [String: Int32]? = nil, detailedStatus: String? = nil) {
            self.status = status
            self.associationStatusAggregatedCount = associationStatusAggregatedCount
            self.detailedStatus = detailedStatus
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case associationStatusAggregatedCount = "AssociationStatusAggregatedCount"
            case detailedStatus = "DetailedStatus"
        }
    }

    public struct CreateResourceDataSyncRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncName", required: true, type: .string), 
            AWSShapeMember(label: "S3Destination", required: true, type: .structure)
        ]
        /// A name for the configuration.
        public let syncName: String
        /// Amazon S3 configuration details for the sync.
        public let s3Destination: ResourceDataSyncS3Destination

        public init(syncName: String, s3Destination: ResourceDataSyncS3Destination) {
            self.syncName = syncName
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case syncName = "SyncName"
            case s3Destination = "S3Destination"
        }
    }

    public struct GetMaintenanceWindowExecutionTaskResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "TaskExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WindowExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "TaskArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxErrors", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "TaskParameters", required: false, type: .list), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxConcurrency", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string)
        ]
        /// The priority of the task.
        public let priority: Int32?
        /// The role that was assumed when executing the task.
        public let serviceRole: String?
        /// The ID of the specific task execution in the Maintenance Window task that was retrieved.
        public let taskExecutionId: String?
        /// The time the task execution started.
        public let startTime: Double?
        /// The ID of the Maintenance Window execution that includes the task.
        public let windowExecutionId: String?
        /// The ARN of the executed task.
        public let taskArn: String?
        /// The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.
        public let maxErrors: String?
        /// The status of the task.
        public let status: MaintenanceWindowExecutionStatus?
        /// The parameters passed to the task when it was executed. The map has the following format: Key: string, between 1 and 255 characters Value: an array of strings, each string is between 1 and 255 characters
        public let taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]?
        /// The time the task execution completed.
        public let endTime: Double?
        /// The defined maximum number of task executions that could be run in parallel.
        public let maxConcurrency: String?
        /// The type of task executed.
        public let `type`: MaintenanceWindowTaskType?
        /// The details explaining the Status. Only available for certain status values.
        public let statusDetails: String?

        public init(priority: Int32? = nil, serviceRole: String? = nil, taskExecutionId: String? = nil, startTime: Double? = nil, windowExecutionId: String? = nil, taskArn: String? = nil, maxErrors: String? = nil, status: MaintenanceWindowExecutionStatus? = nil, taskParameters: [[String: MaintenanceWindowTaskParameterValueExpression]]? = nil, endTime: Double? = nil, maxConcurrency: String? = nil, type: MaintenanceWindowTaskType? = nil, statusDetails: String? = nil) {
            self.priority = priority
            self.serviceRole = serviceRole
            self.taskExecutionId = taskExecutionId
            self.startTime = startTime
            self.windowExecutionId = windowExecutionId
            self.taskArn = taskArn
            self.maxErrors = maxErrors
            self.status = status
            self.taskParameters = taskParameters
            self.endTime = endTime
            self.maxConcurrency = maxConcurrency
            self.`type` = `type`
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case serviceRole = "ServiceRole"
            case taskExecutionId = "TaskExecutionId"
            case startTime = "StartTime"
            case windowExecutionId = "WindowExecutionId"
            case taskArn = "TaskArn"
            case maxErrors = "MaxErrors"
            case status = "Status"
            case taskParameters = "TaskParameters"
            case endTime = "EndTime"
            case maxConcurrency = "MaxConcurrency"
            case `type` = "Type"
            case statusDetails = "StatusDetails"
        }
    }

    public struct CreateDocumentResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentDescription", required: false, type: .structure)
        ]
        /// Information about the Systems Manager document.
        public let documentDescription: DocumentDescription?

        public init(documentDescription: DocumentDescription? = nil) {
            self.documentDescription = documentDescription
        }

        private enum CodingKeys: String, CodingKey {
            case documentDescription = "DocumentDescription"
        }
    }

    public struct DescribeMaintenanceWindowExecutionsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the Maintenance Windows execution.
        public let windowExecutions: [MaintenanceWindowExecution]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(windowExecutions: [MaintenanceWindowExecution]? = nil, nextToken: String? = nil) {
            self.windowExecutions = windowExecutions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutions = "WindowExecutions"
            case nextToken = "NextToken"
        }
    }

    public struct ListCommandInvocationsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "CommandId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// (Optional) If set this returns the response of the command executions and any command output. By default this is set to False. 
        public let details: Bool?
        /// (Optional) One or more filters. Use a filter to return a more specific list of results.
        public let filters: [CommandFilter]?
        /// (Optional) The invocations for a specific command ID.
        public let commandId: String?
        /// (Optional) The command execution details for a specific instance ID.
        public let instanceId: String?
        /// (Optional) The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// (Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(details: Bool? = nil, filters: [CommandFilter]? = nil, commandId: String? = nil, instanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.details = details
            self.filters = filters
            self.commandId = commandId
            self.instanceId = instanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
            case filters = "Filters"
            case commandId = "CommandId"
            case instanceId = "InstanceId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetPatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "ApprovedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RejectedPatches", required: false, type: .list), 
            AWSShapeMember(label: "ApprovalRules", required: false, type: .structure), 
            AWSShapeMember(label: "GlobalFilters", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "PatchGroups", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of the retrieved patch baseline.
        public let baselineId: String?
        /// A list of explicitly approved patches for the baseline.
        public let approvedPatches: [String]?
        /// The date the patch baseline was last modified.
        public let modifiedDate: Double?
        /// The name of the patch baseline.
        public let name: String?
        /// A list of explicitly rejected patches for the baseline.
        public let rejectedPatches: [String]?
        /// A set of rules used to include patches in the baseline.
        public let approvalRules: PatchRuleGroup?
        /// A set of global filters used to exclude patches from the baseline.
        public let globalFilters: PatchFilterGroup?
        /// The date the patch baseline was created.
        public let createdDate: Double?
        /// Patch groups included in the patch baseline.
        public let patchGroups: [String]?
        /// A description of the patch baseline.
        public let description: String?

        public init(baselineId: String? = nil, approvedPatches: [String]? = nil, modifiedDate: Double? = nil, name: String? = nil, rejectedPatches: [String]? = nil, approvalRules: PatchRuleGroup? = nil, globalFilters: PatchFilterGroup? = nil, createdDate: Double? = nil, patchGroups: [String]? = nil, description: String? = nil) {
            self.baselineId = baselineId
            self.approvedPatches = approvedPatches
            self.modifiedDate = modifiedDate
            self.name = name
            self.rejectedPatches = rejectedPatches
            self.approvalRules = approvalRules
            self.globalFilters = globalFilters
            self.createdDate = createdDate
            self.patchGroups = patchGroups
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case approvedPatches = "ApprovedPatches"
            case modifiedDate = "ModifiedDate"
            case name = "Name"
            case rejectedPatches = "RejectedPatches"
            case approvalRules = "ApprovalRules"
            case globalFilters = "GlobalFilters"
            case createdDate = "CreatedDate"
            case patchGroups = "PatchGroups"
            case description = "Description"
        }
    }

    public struct CreateAssociationResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// Information about the association.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct DescribeMaintenanceWindowsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowIdentities", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the Maintenance Windows.
        public let windowIdentities: [MaintenanceWindowIdentity]?

        public init(nextToken: String? = nil, windowIdentities: [MaintenanceWindowIdentity]? = nil) {
            self.nextToken = nextToken
            self.windowIdentities = windowIdentities
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case windowIdentities = "WindowIdentities"
        }
    }

    public struct DescribeAvailablePatchesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Patches", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// An array of patches. Each entry in the array is a patch structure.
        public let patches: [Patch]?

        public init(nextToken: String? = nil, patches: [Patch]? = nil) {
            self.nextToken = nextToken
            self.patches = patches
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case patches = "Patches"
        }
    }

    public struct InventoryResultEntity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map)
        ]
        /// ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID. 
        public let id: String?
        /// The data section in the inventory result entity json.
        public let data: [String: InventoryResultItem]?

        public init(id: String? = nil, data: [String: InventoryResultItem]? = nil) {
            self.id = id
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case data = "Data"
        }
    }

    public struct UpdateMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: false, type: .boolean), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Duration", required: false, type: .integer)
        ]
        /// The ID of the Maintenance Window to update.
        public let windowId: String
        /// The name of the Maintenance Window.
        public let name: String?
        /// Whether the Maintenance Window is enabled.
        public let enabled: Bool?
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?

        public init(windowId: String, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil) {
            self.windowId = windowId
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case name = "Name"
            case enabled = "Enabled"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case schedule = "Schedule"
            case cutoff = "Cutoff"
            case duration = "Duration"
        }
    }

    public struct DescribeParametersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterFilters", required: false, type: .list), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Filters to limit the request results.
        public let parameterFilters: [ParameterStringFilter]?
        /// One or more filters. Use a filter to return a more specific list of results.
        public let filters: [ParametersFilter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(parameterFilters: [ParameterStringFilter]? = nil, filters: [ParametersFilter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.parameterFilters = parameterFilters
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case parameterFilters = "ParameterFilters"
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct InstancePatchStateFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan.
        public let `type`: InstancePatchStateOperatorType
        /// The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount.
        public let key: String
        /// The value for the filter, must be an integer greater than or equal to 0.
        public let values: [String]

        public init(type: InstancePatchStateOperatorType, key: String, values: [String]) {
            self.`type` = `type`
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case key = "Key"
            case values = "Values"
        }
    }

    public struct GetDocumentResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "DocumentType", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The contents of the SSM document.
        public let content: String?
        /// The document type.
        public let documentType: DocumentType?
        /// The name of the SSM document.
        public let name: String?
        /// The document version.
        public let documentVersion: String?

        public init(content: String? = nil, documentType: DocumentType? = nil, name: String? = nil, documentVersion: String? = nil) {
            self.content = content
            self.documentType = documentType
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case documentType = "DocumentType"
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct UpdateManagedInstanceRoleRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "IamRole", required: true, type: .string)
        ]
        /// The ID of the managed instance where you want to update the role.
        public let instanceId: String
        /// The IAM role you want to assign or change.
        public let iamRole: String

        public init(instanceId: String, iamRole: String) {
            self.instanceId = instanceId
            self.iamRole = iamRole
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case iamRole = "IamRole"
        }
    }

    public struct PatchRule: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PatchFilterGroup", required: true, type: .structure), 
            AWSShapeMember(label: "ApproveAfterDays", required: true, type: .integer)
        ]
        /// The patch filter group that defines the criteria for the rule.
        public let patchFilterGroup: PatchFilterGroup
        /// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
        public let approveAfterDays: Int32

        public init(patchFilterGroup: PatchFilterGroup, approveAfterDays: Int32) {
            self.patchFilterGroup = patchFilterGroup
            self.approveAfterDays = approveAfterDays
        }

        private enum CodingKeys: String, CodingKey {
            case patchFilterGroup = "PatchFilterGroup"
            case approveAfterDays = "ApproveAfterDays"
        }
    }

    public enum PatchDeploymentStatus: String, CustomStringConvertible, Codable {
        case approved = "APPROVED"
        case pending_approval = "PENDING_APPROVAL"
        case explicit_approved = "EXPLICIT_APPROVED"
        case explicit_rejected = "EXPLICIT_REJECTED"
        public var description: String { return self.rawValue }
    }

    public struct DeregisterPatchBaselineForPatchGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "PatchGroup", required: false, type: .string)
        ]
        /// The ID of the patch baseline the patch group was deregistered from.
        public let baselineId: String?
        /// The name of the patch group deregistered from the patch baseline.
        public let patchGroup: String?

        public init(baselineId: String? = nil, patchGroup: String? = nil) {
            self.baselineId = baselineId
            self.patchGroup = patchGroup
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
            case patchGroup = "PatchGroup"
        }
    }

    public struct GetAutomationExecutionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecution", required: false, type: .structure)
        ]
        /// Detailed information about the current state of an automation execution.
        public let automationExecution: AutomationExecution?

        public init(automationExecution: AutomationExecution? = nil) {
            self.automationExecution = automationExecution
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecution = "AutomationExecution"
        }
    }

    public struct AssociationDescriptionList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .list)
        ]
        public let associationDescription: [AssociationDescription]?

        public init(associationDescription: [AssociationDescription]? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct DescribeEffectiveInstanceAssociationsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Associations", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The associations for the requested instance.
        public let associations: [InstanceAssociation]?

        public init(nextToken: String? = nil, associations: [InstanceAssociation]? = nil) {
            self.nextToken = nextToken
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case associations = "Associations"
        }
    }

    public struct UpdateAssociationStatusResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDescription", required: false, type: .structure)
        ]
        /// Information about the association.
        public let associationDescription: AssociationDescription?

        public init(associationDescription: AssociationDescription? = nil) {
            self.associationDescription = associationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case associationDescription = "AssociationDescription"
        }
    }

    public struct InstanceAssociationOutputUrl: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3OutputUrl", required: false, type: .structure)
        ]
        /// The URL of Amazon S3 bucket where you want to store the results of this request.
        public let s3OutputUrl: S3OutputUrl?

        public init(s3OutputUrl: S3OutputUrl? = nil) {
            self.s3OutputUrl = s3OutputUrl
        }

        private enum CodingKeys: String, CodingKey {
            case s3OutputUrl = "S3OutputUrl"
        }
    }

    public struct InstanceAssociationStatusInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExecutionSummary", required: false, type: .string), 
            AWSShapeMember(label: "OutputUrl", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "DetailedStatus", required: false, type: .string)
        ]
        /// Status information about the instance association.
        public let status: String?
        /// The association ID.
        public let associationId: String?
        /// The instance ID where the association was created.
        public let instanceId: String?
        /// The name of the association.
        public let name: String?
        /// The association document verions.
        public let documentVersion: String?
        /// The date the instance association executed. 
        public let executionDate: Double?
        /// Summary information about association execution.
        public let executionSummary: String?
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        public let outputUrl: InstanceAssociationOutputUrl?
        /// An error code returned by the request to create the association.
        public let errorCode: String?
        /// Detailed status information about the instance association.
        public let detailedStatus: String?

        public init(status: String? = nil, associationId: String? = nil, instanceId: String? = nil, name: String? = nil, documentVersion: String? = nil, executionDate: Double? = nil, executionSummary: String? = nil, outputUrl: InstanceAssociationOutputUrl? = nil, errorCode: String? = nil, detailedStatus: String? = nil) {
            self.status = status
            self.associationId = associationId
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.executionDate = executionDate
            self.executionSummary = executionSummary
            self.outputUrl = outputUrl
            self.errorCode = errorCode
            self.detailedStatus = detailedStatus
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case associationId = "AssociationId"
            case instanceId = "InstanceId"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case executionDate = "ExecutionDate"
            case executionSummary = "ExecutionSummary"
            case outputUrl = "OutputUrl"
            case errorCode = "ErrorCode"
            case detailedStatus = "DetailedStatus"
        }
    }

    public struct S3OutputUrl: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputUrl", required: false, type: .string)
        ]
        /// A URL for an Amazon S3 bucket where you want to store the results of this request.
        public let outputUrl: String?

        public init(outputUrl: String? = nil) {
            self.outputUrl = outputUrl
        }

        private enum CodingKeys: String, CodingKey {
            case outputUrl = "OutputUrl"
        }
    }

    public struct GetMaintenanceWindowExecutionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowExecutionId", required: true, type: .string)
        ]
        /// The ID of the Maintenance Window execution that includes the task.
        public let windowExecutionId: String

        public init(windowExecutionId: String) {
            self.windowExecutionId = windowExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case windowExecutionId = "WindowExecutionId"
        }
    }

    public struct CreateAssociationBatchRequestEntries: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "entries", required: false, type: .list)
        ]
        public let entries: [CreateAssociationBatchRequestEntry]?

        public init(entries: [CreateAssociationBatchRequestEntry]? = nil) {
            self.entries = entries
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "entries"
        }
    }

    public struct PatchFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The key for the filter (PRODUCT, CLASSIFICATION, MSRC_SEVERITY, PATCH_ID)
        public let key: PatchFilterKey
        /// The value for the filter key.
        public let values: [String]

        public init(key: PatchFilterKey, values: [String]) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct GetParametersResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "InvalidParameters", required: false, type: .list)
        ]
        /// A list of details for a parameter.
        public let parameters: [Parameter]?
        /// A list of parameters that are not formatted correctly or do not run when executed.
        public let invalidParameters: [String]?

        public init(parameters: [Parameter]? = nil, invalidParameters: [String]? = nil) {
            self.parameters = parameters
            self.invalidParameters = invalidParameters
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case invalidParameters = "InvalidParameters"
        }
    }

    public struct MaintenanceWindowTarget: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "OwnerInformation", required: false, type: .string)
        ]
        /// The Maintenance Window ID where the target is registered.
        public let windowId: String?
        /// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;.
        public let targets: [Target]?
        /// The ID of the target.
        public let windowTargetId: String?
        /// The type of target.
        public let resourceType: MaintenanceWindowResourceType?
        /// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
        public let ownerInformation: String?

        public init(windowId: String? = nil, targets: [Target]? = nil, windowTargetId: String? = nil, resourceType: MaintenanceWindowResourceType? = nil, ownerInformation: String? = nil) {
            self.windowId = windowId
            self.targets = targets
            self.windowTargetId = windowTargetId
            self.resourceType = resourceType
            self.ownerInformation = ownerInformation
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case targets = "Targets"
            case windowTargetId = "WindowTargetId"
            case resourceType = "ResourceType"
            case ownerInformation = "OwnerInformation"
        }
    }

    public struct InventoryFilterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryFilter", required: false, type: .list)
        ]
        public let inventoryFilter: [InventoryFilter]?

        public init(inventoryFilter: [InventoryFilter]? = nil) {
            self.inventoryFilter = inventoryFilter
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryFilter = "InventoryFilter"
        }
    }

    public struct UpdateDocumentDefaultVersionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: true, type: .string)
        ]
        /// The name of a custom document that you want to set as the default version.
        public let name: String
        /// The version of a custom document that you want to set as the default version.
        public let documentVersion: String

        public init(name: String, documentVersion: String) {
            self.name = name
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case documentVersion = "DocumentVersion"
        }
    }

    public struct ListAssociationsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Associations", required: false, type: .structure)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The associations.
        public let associations: AssociationList?

        public init(nextToken: String? = nil, associations: AssociationList? = nil) {
            self.nextToken = nextToken
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case associations = "Associations"
        }
    }

    public struct DescribeInstancePatchStatesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstancePatchStates", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The high-level patch state for the requested instances.
        public let instancePatchStates: [InstancePatchState]?

        public init(nextToken: String? = nil, instancePatchStates: [InstancePatchState]? = nil) {
            self.nextToken = nextToken
            self.instancePatchStates = instancePatchStates
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case instancePatchStates = "InstancePatchStates"
        }
    }

    public enum ParametersFilterKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case `type` = "Type"
        case keyid = "KeyId"
        public var description: String { return self.rawValue }
    }

    public struct ResourceDataSyncItem: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyncName", required: false, type: .string), 
            AWSShapeMember(label: "LastSyncTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastSuccessfulSyncTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SyncCreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "S3Destination", required: false, type: .structure), 
            AWSShapeMember(label: "LastStatus", required: false, type: .enum)
        ]
        /// The name of the Resource Data Sync.
        public let syncName: String?
        /// The last time the configuration attempted to sync (UTC).
        public let lastSyncTime: Double?
        /// The last time the sync operations returned a status of SUCCESSFUL (UTC).
        public let lastSuccessfulSyncTime: Double?
        /// The date and time the configuration was created (UTC).
        public let syncCreatedTime: Double?
        /// Configuration information for the target Amazon S3 bucket.
        public let s3Destination: ResourceDataSyncS3Destination?
        /// The status reported by the last sync.
        public let lastStatus: LastResourceDataSyncStatus?

        public init(syncName: String? = nil, lastSyncTime: Double? = nil, lastSuccessfulSyncTime: Double? = nil, syncCreatedTime: Double? = nil, s3Destination: ResourceDataSyncS3Destination? = nil, lastStatus: LastResourceDataSyncStatus? = nil) {
            self.syncName = syncName
            self.lastSyncTime = lastSyncTime
            self.lastSuccessfulSyncTime = lastSuccessfulSyncTime
            self.syncCreatedTime = syncCreatedTime
            self.s3Destination = s3Destination
            self.lastStatus = lastStatus
        }

        private enum CodingKeys: String, CodingKey {
            case syncName = "SyncName"
            case lastSyncTime = "LastSyncTime"
            case lastSuccessfulSyncTime = "LastSuccessfulSyncTime"
            case syncCreatedTime = "SyncCreatedTime"
            case s3Destination = "S3Destination"
            case lastStatus = "LastStatus"
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The resource ID for which you want to remove tags.
        public let resourceId: String
        /// The type of resource of which you want to remove a tag.
        public let resourceType: ResourceTypeForTagging
        /// Tag keys that you want to remove from the specified resource.
        public let tagKeys: [String]

        public init(resourceId: String, resourceType: ResourceTypeForTagging, tagKeys: [String]) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case tagKeys = "TagKeys"
        }
    }

    public struct S3OutputLocation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputS3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "OutputS3Region", required: false, type: .string)
        ]
        /// The Amazon S3 bucket subfolder.
        public let outputS3KeyPrefix: String?
        /// The name of the Amazon S3 bucket.
        public let outputS3BucketName: String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon S3 bucket region.
        public let outputS3Region: String?

        public init(outputS3KeyPrefix: String? = nil, outputS3BucketName: String? = nil, outputS3Region: String? = nil) {
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3BucketName = outputS3BucketName
            self.outputS3Region = outputS3Region
        }

        private enum CodingKeys: String, CodingKey {
            case outputS3KeyPrefix = "OutputS3KeyPrefix"
            case outputS3BucketName = "OutputS3BucketName"
            case outputS3Region = "OutputS3Region"
        }
    }

    public struct GetMaintenanceWindowRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: true, type: .string)
        ]
        /// The ID of the desired Maintenance Window.
        public let windowId: String

        public init(windowId: String) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct UpdateMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowUnassociatedTargets", required: false, type: .boolean), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "Cutoff", required: false, type: .integer), 
            AWSShapeMember(label: "Duration", required: false, type: .integer)
        ]
        /// The ID of the created Maintenance Window.
        public let windowId: String?
        /// The name of the Maintenance Window.
        public let name: String?
        /// Whether the Maintenance Window is enabled.
        public let enabled: Bool?
        /// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
        public let allowUnassociatedTargets: Bool?
        /// The schedule of the Maintenance Window in the form of a cron or rate expression.
        public let schedule: String?
        /// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
        public let cutoff: Int32?
        /// The duration of the Maintenance Window in hours.
        public let duration: Int32?

        public init(windowId: String? = nil, name: String? = nil, enabled: Bool? = nil, allowUnassociatedTargets: Bool? = nil, schedule: String? = nil, cutoff: Int32? = nil, duration: Int32? = nil) {
            self.windowId = windowId
            self.name = name
            self.enabled = enabled
            self.allowUnassociatedTargets = allowUnassociatedTargets
            self.schedule = schedule
            self.cutoff = cutoff
            self.duration = duration
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
            case name = "Name"
            case enabled = "Enabled"
            case allowUnassociatedTargets = "AllowUnassociatedTargets"
            case schedule = "Schedule"
            case cutoff = "Cutoff"
            case duration = "Duration"
        }
    }

    public enum CommandInvocationStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case delayed = "Delayed"
        case success = "Success"
        case cancelled = "Cancelled"
        case timedout = "TimedOut"
        case failed = "Failed"
        case cancelling = "Cancelling"
        public var description: String { return self.rawValue }
    }

    public struct GetParametersByPathRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WithDecryption", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterFilters", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: true, type: .string), 
            AWSShapeMember(label: "Recursive", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Retrieve all parameters in a hierarchy with their value decrypted.
        public let withDecryption: Bool?
        /// Filters to limit the request results.
        public let parameterFilters: [ParameterStringFilter]?
        /// The hierarchy for the parameter. Hierarchies start with a forward slash (/) and end with the parameter name. A hierarchy can have a maximum of five levels. Examples: /Environment/Test/DBString003 /Finance/Prod/IAD/OS/WinServ2016/license15
        public let path: String
        /// Retrieve all parameters within a hierarchy.
        public let recursive: Bool?
        /// A token to start the list. Use this token to get the next set of results. 
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(withDecryption: Bool? = nil, parameterFilters: [ParameterStringFilter]? = nil, path: String, recursive: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.withDecryption = withDecryption
            self.parameterFilters = parameterFilters
            self.path = path
            self.recursive = recursive
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case withDecryption = "WithDecryption"
            case parameterFilters = "ParameterFilters"
            case path = "Path"
            case recursive = "Recursive"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteActivationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivationId", required: true, type: .string)
        ]
        /// The ID of the activation that you want to delete.
        public let activationId: String

        public init(activationId: String) {
            self.activationId = activationId
        }

        private enum CodingKeys: String, CodingKey {
            case activationId = "ActivationId"
        }
    }

    public struct PutInventoryRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .structure), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The inventory items that you want to add or update on instances.
        public let items: InventoryItemList
        /// One or more instance IDs where you want to add or update inventory items.
        public let instanceId: String

        public init(items: InventoryItemList, instanceId: String) {
            self.items = items
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case instanceId = "InstanceId"
        }
    }

    public struct DescribeDocumentPermissionResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .structure)
        ]
        /// The account IDs that have permission to use this document. The ID can be either an AWS account or All.
        public let accountIds: AccountIdList?

        public init(accountIds: AccountIdList? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct AssociationFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: AssociationFilterKey
        /// The filter value.
        public let value: String

        public init(key: AssociationFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct NotificationConfig: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationArn", required: false, type: .string), 
            AWSShapeMember(label: "NotificationType", required: false, type: .enum), 
            AWSShapeMember(label: "NotificationEvents", required: false, type: .list)
        ]
        /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        public let notificationArn: String?
        /// Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. 
        public let notificationType: NotificationType?
        /// The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see Setting Up Events and Notifications in the Amazon EC2 Systems Manager User Guide.
        public let notificationEvents: [NotificationEvent]?

        public init(notificationArn: String? = nil, notificationType: NotificationType? = nil, notificationEvents: [NotificationEvent]? = nil) {
            self.notificationArn = notificationArn
            self.notificationType = notificationType
            self.notificationEvents = notificationEvents
        }

        private enum CodingKeys: String, CodingKey {
            case notificationArn = "NotificationArn"
            case notificationType = "NotificationType"
            case notificationEvents = "NotificationEvents"
        }
    }

    public enum DocumentStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case active = "Active"
        case updating = "Updating"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public struct PutParameterRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "AllowedPattern", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Overwrite", required: false, type: .boolean)
        ]
        /// Information about the parameter that you want to add to the system
        public let description: String?
        /// The KMS Key ID that you want to use to encrypt a parameter when you choose the SecureString data type. If you don't specify a key ID, the system uses the default key associated with your AWS account.
        public let keyId: String?
        /// The name of the parameter that you want to add to the system.
        public let name: String
        /// A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: AllowedPattern=^\d+$ 
        public let allowedPattern: String?
        /// The type of parameter that you want to add to the system.
        public let `type`: ParameterType
        /// The parameter value that you want to add to the system.
        public let value: String
        /// Overwrite an existing parameter. If not specified, will default to "false".
        public let overwrite: Bool?

        public init(description: String? = nil, keyId: String? = nil, name: String, allowedPattern: String? = nil, type: ParameterType, value: String, overwrite: Bool? = nil) {
            self.description = description
            self.keyId = keyId
            self.name = name
            self.allowedPattern = allowedPattern
            self.`type` = `type`
            self.value = value
            self.overwrite = overwrite
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case keyId = "KeyId"
            case name = "Name"
            case allowedPattern = "AllowedPattern"
            case `type` = "Type"
            case value = "Value"
            case overwrite = "Overwrite"
        }
    }

    public struct PatchBaselineIdentity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultBaseline", required: false, type: .boolean), 
            AWSShapeMember(label: "BaselineId", required: false, type: .string), 
            AWSShapeMember(label: "BaselineName", required: false, type: .string), 
            AWSShapeMember(label: "BaselineDescription", required: false, type: .string)
        ]
        /// Whether this is the default baseline.
        public let defaultBaseline: Bool?
        /// The ID of the patch baseline.
        public let baselineId: String?
        /// The name of the patch baseline.
        public let baselineName: String?
        /// The description of the patch baseline.
        public let baselineDescription: String?

        public init(defaultBaseline: Bool? = nil, baselineId: String? = nil, baselineName: String? = nil, baselineDescription: String? = nil) {
            self.defaultBaseline = defaultBaseline
            self.baselineId = baselineId
            self.baselineName = baselineName
            self.baselineDescription = baselineDescription
        }

        private enum CodingKeys: String, CodingKey {
            case defaultBaseline = "DefaultBaseline"
            case baselineId = "BaselineId"
            case baselineName = "BaselineName"
            case baselineDescription = "BaselineDescription"
        }
    }

    public struct Association: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastExecutionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "Overview", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduleExpression", required: false, type: .string)
        ]
        /// The date on which the association was last run.
        public let lastExecutionDate: Double?
        /// The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule.
        public let associationId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The name of the SSM document.
        public let name: String?
        /// The version of the document used in the association.
        public let documentVersion: String?
        /// The instances targeted by the request to create an association. 
        public let targets: [Target]?
        /// Information about the association.
        public let overview: AssociationOverview?
        /// A cron expression that specifies a schedule when the association runs.
        public let scheduleExpression: String?

        public init(lastExecutionDate: Double? = nil, associationId: String? = nil, instanceId: String? = nil, name: String? = nil, documentVersion: String? = nil, targets: [Target]? = nil, overview: AssociationOverview? = nil, scheduleExpression: String? = nil) {
            self.lastExecutionDate = lastExecutionDate
            self.associationId = associationId
            self.instanceId = instanceId
            self.name = name
            self.documentVersion = documentVersion
            self.targets = targets
            self.overview = overview
            self.scheduleExpression = scheduleExpression
        }

        private enum CodingKeys: String, CodingKey {
            case lastExecutionDate = "LastExecutionDate"
            case associationId = "AssociationId"
            case instanceId = "InstanceId"
            case name = "Name"
            case documentVersion = "DocumentVersion"
            case targets = "Targets"
            case overview = "Overview"
            case scheduleExpression = "ScheduleExpression"
        }
    }

    public struct Activation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamRole", required: false, type: .string), 
            AWSShapeMember(label: "Expired", required: false, type: .boolean), 
            AWSShapeMember(label: "RegistrationLimit", required: false, type: .integer), 
            AWSShapeMember(label: "ExpirationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ActivationId", required: false, type: .string), 
            AWSShapeMember(label: "RegistrationsCount", required: false, type: .integer), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The Amazon Identity and Access Management (IAM) role to assign to the managed instance.
        public let iamRole: String?
        /// Whether or not the activation is expired.
        public let expired: Bool?
        /// The maximum number of managed instances that can be registered using this activation.
        public let registrationLimit: Int32?
        /// The date when this activation can no longer be used to register managed instances.
        public let expirationDate: Double?
        /// The ID created by Systems Manager when you submitted the activation.
        public let activationId: String?
        /// The number of managed instances already registered with this activation.
        public let registrationsCount: Int32?
        /// The date the activation was created.
        public let createdDate: Double?
        /// A name for the managed instance when it is created.
        public let defaultInstanceName: String?
        /// A user defined description of the activation.
        public let description: String?

        public init(iamRole: String? = nil, expired: Bool? = nil, registrationLimit: Int32? = nil, expirationDate: Double? = nil, activationId: String? = nil, registrationsCount: Int32? = nil, createdDate: Double? = nil, defaultInstanceName: String? = nil, description: String? = nil) {
            self.iamRole = iamRole
            self.expired = expired
            self.registrationLimit = registrationLimit
            self.expirationDate = expirationDate
            self.activationId = activationId
            self.registrationsCount = registrationsCount
            self.createdDate = createdDate
            self.defaultInstanceName = defaultInstanceName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case iamRole = "IamRole"
            case expired = "Expired"
            case registrationLimit = "RegistrationLimit"
            case expirationDate = "ExpirationDate"
            case activationId = "ActivationId"
            case registrationsCount = "RegistrationsCount"
            case createdDate = "CreatedDate"
            case defaultInstanceName = "DefaultInstanceName"
            case description = "Description"
        }
    }

    public struct StartAutomationExecutionResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionId", required: false, type: .string)
        ]
        /// The unique ID of a newly scheduled automation execution.
        public let automationExecutionId: String?

        public init(automationExecutionId: String? = nil) {
            self.automationExecutionId = automationExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionId = "AutomationExecutionId"
        }
    }

    public struct ListDocumentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentFilterList", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters. Use a filter to return a more specific list of results.
        public let documentFilterList: DocumentFilterList?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(documentFilterList: DocumentFilterList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.documentFilterList = documentFilterList
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case documentFilterList = "DocumentFilterList"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListInventoryEntriesResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CaptureTime", required: false, type: .string), 
            AWSShapeMember(label: "Entries", required: false, type: .list), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "TypeName", required: false, type: .string)
        ]
        /// The time that inventory information was collected for the instance(s).
        public let captureTime: String?
        /// A list of inventory items on the instance(s).
        public let entries: [[String: String]]?
        /// The inventory schema version used by the instance(s).
        public let schemaVersion: String?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The instance ID targeted by the request to query inventory information.
        public let instanceId: String?
        /// The type of inventory item returned by the request.
        public let typeName: String?

        public init(captureTime: String? = nil, entries: [[String: String]]? = nil, schemaVersion: String? = nil, nextToken: String? = nil, instanceId: String? = nil, typeName: String? = nil) {
            self.captureTime = captureTime
            self.entries = entries
            self.schemaVersion = schemaVersion
            self.nextToken = nextToken
            self.instanceId = instanceId
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case captureTime = "CaptureTime"
            case entries = "Entries"
            case schemaVersion = "SchemaVersion"
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
            case typeName = "TypeName"
        }
    }

    public struct InventoryFilterValueList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterValue", required: false, type: .list)
        ]
        public let filterValue: [String]?

        public init(filterValue: [String]? = nil) {
            self.filterValue = filterValue
        }

        private enum CodingKeys: String, CodingKey {
            case filterValue = "FilterValue"
        }
    }

    public struct DeleteAssociationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// The name of the Systems Manager document.
        public let name: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The association ID that you want to delete.
        public let associationId: String?

        public init(name: String? = nil, instanceId: String? = nil, associationId: String? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case instanceId = "InstanceId"
            case associationId = "AssociationId"
        }
    }

    public enum AutomationExecutionFilterKey: String, CustomStringConvertible, Codable {
        case documentnameprefix = "DocumentNamePrefix"
        case executionstatus = "ExecutionStatus"
        public var description: String { return self.rawValue }
    }

    public struct EffectivePatch: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Patch", required: false, type: .structure), 
            AWSShapeMember(label: "PatchStatus", required: false, type: .structure)
        ]
        /// Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch.
        public let patch: Patch?
        /// The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.
        public let patchStatus: PatchStatus?

        public init(patch: Patch? = nil, patchStatus: PatchStatus? = nil) {
            self.patch = patch
            self.patchStatus = patchStatus
        }

        private enum CodingKeys: String, CodingKey {
            case patch = "Patch"
            case patchStatus = "PatchStatus"
        }
    }

    public struct DocumentParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of parameter. The type can be either String or StringList.
        public let `type`: DocumentParameterType?
        /// The name of the parameter.
        public let name: String?
        /// If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
        public let defaultValue: String?
        /// A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
        public let description: String?

        public init(type: DocumentParameterType? = nil, name: String? = nil, defaultValue: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.name = name
            self.defaultValue = defaultValue
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case name = "Name"
            case defaultValue = "DefaultValue"
            case description = "Description"
        }
    }

    public struct DeleteParametersRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Names", required: true, type: .list)
        ]
        /// The names of the parameters to delete.
        public let names: [String]

        public init(names: [String]) {
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case names = "Names"
        }
    }

    public struct InventoryItemAttributeList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .list)
        ]
        public let attribute: [InventoryItemAttribute]?

        public init(attribute: [InventoryItemAttribute]? = nil) {
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
        }
    }

    public enum NotificationEvent: String, CustomStringConvertible, Codable {
        case all = "All"
        case inprogress = "InProgress"
        case success = "Success"
        case timedout = "TimedOut"
        case cancelled = "Cancelled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DeleteParameterRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the parameter to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StopAutomationExecutionRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomationExecutionId", required: true, type: .string)
        ]
        /// The execution ID of the Automation to stop.
        public let automationExecutionId: String

        public init(automationExecutionId: String) {
            self.automationExecutionId = automationExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case automationExecutionId = "AutomationExecutionId"
        }
    }

    public struct ParameterStringFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Option", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel.
        public let option: String?
        /// The name of the filter.
        public let key: String
        /// The value you want to search for.
        public let values: [String]?

        public init(option: String? = nil, key: String, values: [String]? = nil) {
            self.option = option
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case option = "Option"
            case key = "Key"
            case values = "Values"
        }
    }

    public struct GetDefaultPatchBaselineResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineId", required: false, type: .string)
        ]
        /// The ID of the default patch baseline.
        public let baselineId: String?

        public init(baselineId: String? = nil) {
            self.baselineId = baselineId
        }

        private enum CodingKeys: String, CodingKey {
            case baselineId = "BaselineId"
        }
    }

    public struct DocumentFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]
        /// The name of the filter.
        public let key: DocumentFilterKey
        /// The value of the filter.
        public let value: String

        public init(key: DocumentFilterKey, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public enum LastResourceDataSyncStatus: String, CustomStringConvertible, Codable {
        case successful = "Successful"
        case failed = "Failed"
        case inprogress = "InProgress"
        public var description: String { return self.rawValue }
    }

    public struct InstanceAssociationOutputLocation: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Location", required: false, type: .structure)
        ]
        /// An Amazon S3 bucket where you want to store the results of this request.
        public let s3Location: S3OutputLocation?

        public init(s3Location: S3OutputLocation? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "S3Location"
        }
    }

    public enum InventoryAttributeDataType: String, CustomStringConvertible, Codable {
        case string = "string"
        case number = "number"
        public var description: String { return self.rawValue }
    }

    public struct RegisterTargetWithMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowTargetId", required: false, type: .string)
        ]
        /// The ID of the target definition in this Maintenance Window.
        public let windowTargetId: String?

        public init(windowTargetId: String? = nil) {
            self.windowTargetId = windowTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case windowTargetId = "WindowTargetId"
        }
    }

    public struct CreateMaintenanceWindowResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowId", required: false, type: .string)
        ]
        /// The ID of the created Maintenance Window.
        public let windowId: String?

        public init(windowId: String? = nil) {
            self.windowId = windowId
        }

        private enum CodingKeys: String, CodingKey {
            case windowId = "WindowId"
        }
    }

    public struct DocumentVersionInfo: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IsDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "DocumentVersion", required: false, type: .string)
        ]
        /// The date the document was created.
        public let createdDate: Double?
        /// The document name.
        public let name: String?
        /// An identifier for the default version of the document.
        public let isDefaultVersion: Bool?
        /// The document version.
        public let documentVersion: String?

        public init(createdDate: Double? = nil, name: String? = nil, isDefaultVersion: Bool? = nil, documentVersion: String? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.isDefaultVersion = isDefaultVersion
            self.documentVersion = documentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case name = "Name"
            case isDefaultVersion = "IsDefaultVersion"
            case documentVersion = "DocumentVersion"
        }
    }

}