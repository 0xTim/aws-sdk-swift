// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DatabaseMigrationService {

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The filter value.
        public let values: [String]
        /// The name of the filter.
        public let name: String

        public init(values: [String], name: String) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetStatus", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .structure)
        ]
        /// The status of the subnet.
        public let subnetStatus: String?
        /// The subnet identifier.
        public let subnetIdentifier: String?
        /// The Availability Zone of the subnet.
        public let subnetAvailabilityZone: AvailabilityZone?

        public init(subnetStatus: String? = nil, subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil) {
            self.subnetStatus = subnetStatus
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case subnetStatus = "SubnetStatus"
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
        }
    }

    public struct DeleteEventSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        /// The event subscription that was deleted.
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DeleteReplicationSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: true, type: .string)
        ]
        /// The subnet group name of the replication instance.
        public let replicationSubnetGroupIdentifier: String

        public init(replicationSubnetGroupIdentifier: String) {
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
        }
    }

    public enum ReloadOptionValue: String, CustomStringConvertible, Codable {
        case dataReload = "data-reload"
        case validateOnly = "validate-only"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReplicationInstanceTaskLogsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(replicationInstanceArn: String, maxRecords: Int32? = nil, marker: String? = nil) {
            self.replicationInstanceArn = replicationInstanceArn
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DescribeReplicationTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTasks", required: false, type: .list)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A description of the replication tasks.
        public let replicationTasks: [ReplicationTask]?

        public init(marker: String? = nil, replicationTasks: [ReplicationTask]? = nil) {
            self.marker = marker
            self.replicationTasks = replicationTasks
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case replicationTasks = "ReplicationTasks"
        }
    }

    public struct RemoveTagsFromResourceResponse: AWSShape {

    }

    public enum StartReplicationTaskTypeValue: String, CustomStringConvertible, Codable {
        case startReplication = "start-replication"
        case resumeProcessing = "resume-processing"
        case reloadTarget = "reload-target"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventSubscriptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscriptionsList", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of event subscriptions.
        public let eventSubscriptionsList: [EventSubscription]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(eventSubscriptionsList: [EventSubscription]? = nil, marker: String? = nil) {
            self.eventSubscriptionsList = eventSubscriptionsList
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscriptionsList = "EventSubscriptionsList"
            case marker = "Marker"
        }
    }

    public struct DeleteReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The deleted replication task.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct DmsTransferSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: false, type: .string)
        ]
        ///  The IAM role that has permission to access the Amazon S3 bucket. 
        public let serviceAccessRoleArn: String?
        ///  The name of the S3 bucket to use. 
        public let bucketName: String?

        public init(serviceAccessRoleArn: String? = nil, bucketName: String? = nil) {
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case bucketName = "BucketName"
        }
    }

    public struct StopReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task stopped.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct StartReplicationTaskAssessmentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        ///  The assessed replication task. 
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct DescribeRefreshSchemasStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RefreshSchemasStatus", required: false, type: .structure)
        ]
        /// The status of the schema.
        public let refreshSchemasStatus: RefreshSchemasStatus?

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

        private enum CodingKeys: String, CodingKey {
            case refreshSchemasStatus = "RefreshSchemasStatus"
        }
    }

    public struct ReplicationInstanceTaskLog: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceTaskLogSize", required: false, type: .long), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskName", required: false, type: .string)
        ]
        /// The size, in bytes, of the replication task log.
        public let replicationInstanceTaskLogSize: Int64?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        /// The name of the replication task.
        public let replicationTaskName: String?

        public init(replicationInstanceTaskLogSize: Int64? = nil, replicationTaskArn: String? = nil, replicationTaskName: String? = nil) {
            self.replicationInstanceTaskLogSize = replicationInstanceTaskLogSize
            self.replicationTaskArn = replicationTaskArn
            self.replicationTaskName = replicationTaskName
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceTaskLogSize = "ReplicationInstanceTaskLogSize"
            case replicationTaskArn = "ReplicationTaskArn"
            case replicationTaskName = "ReplicationTaskName"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | endpoint | migration-task
        public let sourceType: SourceType?
        /// The event message.
        public let message: String?
        ///  The identifier of the event source. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.  Constraints:replication instance, endpoint, migration task
        public let sourceIdentifier: String?
        /// The event categories available for the specified source type.
        public let eventCategories: [String]?
        /// The date of the event.
        public let date: TimeStamp?

        public init(sourceType: SourceType? = nil, message: String? = nil, sourceIdentifier: String? = nil, eventCategories: [String]? = nil, date: TimeStamp? = nil) {
            self.sourceType = sourceType
            self.message = message
            self.sourceIdentifier = sourceIdentifier
            self.eventCategories = eventCategories
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case message = "Message"
            case sourceIdentifier = "SourceIdentifier"
            case eventCategories = "EventCategories"
            case date = "Date"
        }
    }

    public struct AddTagsToResourceResponse: AWSShape {

    }

    public struct CreateEventSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        /// The event subscription that was created.
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct ModifyReplicationSubnetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroup", required: false, type: .structure)
        ]
        /// The modified replication subnet group.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroup = "ReplicationSubnetGroup"
        }
    }

    public struct StartReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task started.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct DeleteReplicationSubnetGroupResponse: AWSShape {

    }

    public struct Connection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: false, type: .string)
        ]
        /// The identifier of the endpoint. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The connection status.
        public let status: String?
        /// The error message when the connection last failed.
        public let lastFailureMessage: String?
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        public let replicationInstanceIdentifier: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?

        public init(endpointIdentifier: String? = nil, status: String? = nil, lastFailureMessage: String? = nil, replicationInstanceIdentifier: String? = nil, replicationInstanceArn: String? = nil, endpointArn: String? = nil) {
            self.endpointIdentifier = endpointIdentifier
            self.status = status
            self.lastFailureMessage = lastFailureMessage
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointIdentifier = "EndpointIdentifier"
            case status = "Status"
            case lastFailureMessage = "LastFailureMessage"
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
        }
    }

    public struct DynamoDbSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceAccessRoleArn", required: true, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) used by the service access IAM role. 
        public let serviceAccessRoleArn: String

        public init(serviceAccessRoleArn: String) {
            self.serviceAccessRoleArn = serviceAccessRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
        }
    }

    public struct DescribeSchemasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schemas", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The described schema.
        public let schemas: [String]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(schemas: [String]? = nil, marker: String? = nil) {
            self.schemas = schemas
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case schemas = "Schemas"
            case marker = "Marker"
        }
    }

    public struct ModifyEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The modified endpoint.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
        }
    }

    public struct CreateReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: true, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "DnsNameServers", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The EC2 Availability Zone that the replication instance will be created in. Default: A random, system-chosen Availability Zone in the endpoint's region.  Example: us-east-1d 
        public let availabilityZone: String?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The AWS KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the KmsKeyId parameter, then AWS DMS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// The compute and memory capacity of the replication instance as specified by the replication instance class.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).  Format: ddd:hh24:mi-ddd:hh24:mi  Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        public let publiclyAccessible: Bool?
        /// A subnet group to associate with the replication instance.
        public let replicationSubnetGroupIdentifier: String?
        /// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
        public let allocatedStorage: Int32?
        /// A list of DNS name servers supported for the replication instance.
        public let dnsNameServers: String?
        /// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window. Default: true 
        public let autoMinorVersionUpgrade: Bool?
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        public let vpcSecurityGroupIds: [String]?
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        public let replicationInstanceIdentifier: String
        /// Tags to be associated with the replication instance.
        public let tags: [Tag]?

        public init(availabilityZone: String? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, replicationInstanceClass: String, multiAZ: Bool? = nil, preferredMaintenanceWindow: String? = nil, publiclyAccessible: Bool? = nil, replicationSubnetGroupIdentifier: String? = nil, allocatedStorage: Int32? = nil, dnsNameServers: String? = nil, autoMinorVersionUpgrade: Bool? = nil, vpcSecurityGroupIds: [String]? = nil, replicationInstanceIdentifier: String, tags: [Tag]? = nil) {
            self.availabilityZone = availabilityZone
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.replicationInstanceClass = replicationInstanceClass
            self.multiAZ = multiAZ
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.allocatedStorage = allocatedStorage
            self.dnsNameServers = dnsNameServers
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case multiAZ = "MultiAZ"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case publiclyAccessible = "PubliclyAccessible"
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case allocatedStorage = "AllocatedStorage"
            case dnsNameServers = "DnsNameServers"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case tags = "Tags"
        }
    }

    public struct DescribeEndpointTypesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// Filters applied to the describe action. Valid filter names: engine-name | endpoint-type
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]
        /// &gt;The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be removed from.
        public let resourceArn: String

        public init(tagKeys: [String], resourceArn: String) {
            self.tagKeys = tagKeys
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case resourceArn = "ResourceArn"
        }
    }

    public struct DescribeAccountAttributesMessage: AWSShape {

    }

    public struct DescribeEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The events described.
        public let events: [Event]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(events: [Event]? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct AccountQuota: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Used", required: false, type: .long), 
            AWSShapeMember(label: "Max", required: false, type: .long), 
            AWSShapeMember(label: "AccountQuotaName", required: false, type: .string)
        ]
        /// The amount currently used toward the quota maximum.
        public let used: Int64?
        /// The maximum allowed value for the quota.
        public let max: Int64?
        /// The name of the AWS DMS quota for this AWS account.
        public let accountQuotaName: String?

        public init(used: Int64? = nil, max: Int64? = nil, accountQuotaName: String? = nil) {
            self.used = used
            self.max = max
            self.accountQuotaName = accountQuotaName
        }

        private enum CodingKeys: String, CodingKey {
            case used = "Used"
            case max = "Max"
            case accountQuotaName = "AccountQuotaName"
        }
    }

    public struct CreateEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIds", required: false, type: .list), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        ///  The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens. 
        public let sourceIds: [String]?
        ///  A list of event categories for a source type that you want to subscribe to. You can see a list of the categories for a given source type by calling the DescribeEventCategories action or in the topic Working with Events and Notifications in the AWS Database Migration Service User Guide. 
        public let eventCategories: [String]?
        /// The name of the AWS DMS event notification subscription.  Constraints: The name must be less than 255 characters. 
        public let subscriptionName: String
        /// A tag to be attached to the event subscription.
        public let tags: [Tag]?
        ///  The type of AWS DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to replication-instance. If this value is not specified, all events are returned.  Valid values: replication-instance | migration-task
        public let sourceType: String?
        ///  The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. 
        public let snsTopicArn: String
        ///  A Boolean value; set to true to activate the subscription, or set to false to create the subscription but not activate it. 
        public let enabled: Bool?

        public init(sourceIds: [String]? = nil, eventCategories: [String]? = nil, subscriptionName: String, tags: [Tag]? = nil, sourceType: String? = nil, snsTopicArn: String, enabled: Bool? = nil) {
            self.sourceIds = sourceIds
            self.eventCategories = eventCategories
            self.subscriptionName = subscriptionName
            self.tags = tags
            self.sourceType = sourceType
            self.snsTopicArn = snsTopicArn
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIds = "SourceIds"
            case eventCategories = "EventCategories"
            case subscriptionName = "SubscriptionName"
            case tags = "Tags"
            case sourceType = "SourceType"
            case snsTopicArn = "SnsTopicArn"
            case enabled = "Enabled"
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String?
        ///  The type of AWS DMS resource that generates the events you want to subscribe to.  Valid values: replication-instance | migration-task
        public let sourceType: String?
        ///  A Boolean value; set to true to activate the subscription. 
        public let enabled: Bool?
        ///  A list of event categories for a source type that you want to subscribe to. Use the DescribeEventCategories action to see a list of event categories. 
        public let eventCategories: [String]?
        /// The name of the AWS DMS event notification subscription to be modified.
        public let subscriptionName: String

        public init(snsTopicArn: String? = nil, sourceType: String? = nil, enabled: Bool? = nil, eventCategories: [String]? = nil, subscriptionName: String) {
            self.snsTopicArn = snsTopicArn
            self.sourceType = sourceType
            self.enabled = enabled
            self.eventCategories = eventCategories
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicArn = "SnsTopicArn"
            case sourceType = "SourceType"
            case enabled = "Enabled"
            case eventCategories = "EventCategories"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | migration-task
        public let sourceType: String?
        /// Filters applied to the action.
        public let filters: [Filter]?

        public init(sourceType: String? = nil, filters: [Filter]? = nil) {
            self.sourceType = sourceType
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case filters = "Filters"
        }
    }

    public struct CreateReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The replication instance that was created.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public struct CreateReplicationSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The EC2 subnet IDs for the subnet group.
        public let subnetIds: [String]
        /// The description for the subnet group.
        public let replicationSubnetGroupDescription: String
        /// The name for the replication subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default". Example: mySubnetgroup 
        public let replicationSubnetGroupIdentifier: String
        /// The tag to be assigned to the subnet group.
        public let tags: [Tag]?

        public init(subnetIds: [String], replicationSubnetGroupDescription: String, replicationSubnetGroupIdentifier: String, tags: [Tag]? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case replicationSubnetGroupDescription = "ReplicationSubnetGroupDescription"
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case tags = "Tags"
        }
    }

    public struct S3Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompressionType", required: false, type: .enum), 
            AWSShapeMember(label: "BucketFolder", required: false, type: .string), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CsvDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "CsvRowDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: false, type: .string), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string)
        ]
        ///  An optional parameter to use GZIP to compress the target files. Set to GZIP to compress the target files. Set to NONE (the default) or do not use to leave the files uncompressed. 
        public let compressionType: CompressionTypeValue?
        ///  An optional parameter to set a folder name in the S3 bucket. If provided, tables are created in the path &lt;bucketFolder&gt;/&lt;schema_name&gt;/&lt;table_name&gt;/. If this parameter is not specified, then the path used is &lt;schema_name&gt;/&lt;table_name&gt;/. 
        public let bucketFolder: String?
        ///  The Amazon Resource Name (ARN) used by the service access IAM role. 
        public let serviceAccessRoleArn: String?
        ///  The delimiter used to separate columns in the source files. The default is a comma. 
        public let csvDelimiter: String?
        ///  The delimiter used to separate rows in the source files. The default is a carriage return (\n). 
        public let csvRowDelimiter: String?
        ///  The name of the S3 bucket. 
        public let bucketName: String?
        ///  The external table definition. 
        public let externalTableDefinition: String?

        public init(compressionType: CompressionTypeValue? = nil, bucketFolder: String? = nil, serviceAccessRoleArn: String? = nil, csvDelimiter: String? = nil, csvRowDelimiter: String? = nil, bucketName: String? = nil, externalTableDefinition: String? = nil) {
            self.compressionType = compressionType
            self.bucketFolder = bucketFolder
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.csvDelimiter = csvDelimiter
            self.csvRowDelimiter = csvRowDelimiter
            self.bucketName = bucketName
            self.externalTableDefinition = externalTableDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case compressionType = "CompressionType"
            case bucketFolder = "BucketFolder"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case csvDelimiter = "CsvDelimiter"
            case csvRowDelimiter = "CsvRowDelimiter"
            case bucketName = "BucketName"
            case externalTableDefinition = "ExternalTableDefinition"
        }
    }

    public struct EventCategoryGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list)
        ]
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | replication-server | security-group | migration-task
        public let sourceType: String?
        ///  A list of event categories for a SourceType that you want to subscribe to. 
        public let eventCategories: [String]?

        public init(sourceType: String? = nil, eventCategories: [String]? = nil) {
            self.sourceType = sourceType
            self.eventCategories = eventCategories
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
        }
    }

    public enum CompressionTypeValue: String, CustomStringConvertible, Codable {
        case none = "none"
        case gzip = "gzip"
        public var description: String { return self.rawValue }
    }

    public struct ReplicationInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationInstancePrivateIpAddresses", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroup", required: false, type: .structure), 
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationInstancePublicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SecondaryAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstancePublicIpAddresses", required: false, type: .list), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "DnsNameServers", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceStatus", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstancePrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "FreeUntil", required: false, type: .timestamp)
        ]
        /// The VPC security group for the instance.
        public let vpcSecurityGroups: [VpcSecurityGroupMembership]?
        /// The private IP address of the replication instance.
        public let replicationInstancePrivateIpAddresses: [String]?
        /// The subnet group for the replication instance.
        public let replicationSubnetGroup: ReplicationSubnetGroup?
        /// The pending modification values.
        public let pendingModifiedValues: ReplicationPendingModifiedValues?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The maintenance window times for the replication instance.
        public let preferredMaintenanceWindow: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        public let publiclyAccessible: Bool?
        /// The public IP address of the replication instance.
        public let replicationInstancePublicIpAddress: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The AWS KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the KmsKeyId parameter, then AWS DMS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// The availability zone of the standby replication instance in a Multi-AZ deployment.
        public let secondaryAvailabilityZone: String?
        /// The public IP address of the replication instance.
        public let replicationInstancePublicIpAddresses: [String]?
        /// The time the replication instance was created.
        public let instanceCreateTime: TimeStamp?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let allocatedStorage: Int32?
        /// The DNS name servers for the replication instance.
        public let dnsNameServers: String?
        /// The status of the replication instance.
        public let replicationInstanceStatus: String?
        /// The private IP address of the replication instance.
        public let replicationInstancePrivateIpAddress: String?
        /// Boolean value indicating if minor version upgrades will be automatically applied to the instance.
        public let autoMinorVersionUpgrade: Bool?
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        public let replicationInstanceIdentifier: String?
        ///  The expiration date of the free replication instance that is part of the Free DMS program. 
        public let freeUntil: TimeStamp?

        public init(vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil, replicationInstancePrivateIpAddresses: [String]? = nil, replicationSubnetGroup: ReplicationSubnetGroup? = nil, pendingModifiedValues: ReplicationPendingModifiedValues? = nil, replicationInstanceClass: String? = nil, multiAZ: Bool? = nil, preferredMaintenanceWindow: String? = nil, availabilityZone: String? = nil, engineVersion: String? = nil, publiclyAccessible: Bool? = nil, replicationInstancePublicIpAddress: String? = nil, replicationInstanceArn: String? = nil, kmsKeyId: String? = nil, secondaryAvailabilityZone: String? = nil, replicationInstancePublicIpAddresses: [String]? = nil, instanceCreateTime: TimeStamp? = nil, allocatedStorage: Int32? = nil, dnsNameServers: String? = nil, replicationInstanceStatus: String? = nil, replicationInstancePrivateIpAddress: String? = nil, autoMinorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String? = nil, freeUntil: TimeStamp? = nil) {
            self.vpcSecurityGroups = vpcSecurityGroups
            self.replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses
            self.replicationSubnetGroup = replicationSubnetGroup
            self.pendingModifiedValues = pendingModifiedValues
            self.replicationInstanceClass = replicationInstanceClass
            self.multiAZ = multiAZ
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.availabilityZone = availabilityZone
            self.engineVersion = engineVersion
            self.publiclyAccessible = publiclyAccessible
            self.replicationInstancePublicIpAddress = replicationInstancePublicIpAddress
            self.replicationInstanceArn = replicationInstanceArn
            self.kmsKeyId = kmsKeyId
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses
            self.instanceCreateTime = instanceCreateTime
            self.allocatedStorage = allocatedStorage
            self.dnsNameServers = dnsNameServers
            self.replicationInstanceStatus = replicationInstanceStatus
            self.replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.freeUntil = freeUntil
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroups = "VpcSecurityGroups"
            case replicationInstancePrivateIpAddresses = "ReplicationInstancePrivateIpAddresses"
            case replicationSubnetGroup = "ReplicationSubnetGroup"
            case pendingModifiedValues = "PendingModifiedValues"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case multiAZ = "MultiAZ"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case availabilityZone = "AvailabilityZone"
            case engineVersion = "EngineVersion"
            case publiclyAccessible = "PubliclyAccessible"
            case replicationInstancePublicIpAddress = "ReplicationInstancePublicIpAddress"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case kmsKeyId = "KmsKeyId"
            case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
            case replicationInstancePublicIpAddresses = "ReplicationInstancePublicIpAddresses"
            case instanceCreateTime = "InstanceCreateTime"
            case allocatedStorage = "AllocatedStorage"
            case dnsNameServers = "DnsNameServers"
            case replicationInstanceStatus = "ReplicationInstanceStatus"
            case replicationInstancePrivateIpAddress = "ReplicationInstancePrivateIpAddress"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case freeUntil = "FreeUntil"
        }
    }

    public enum RefreshSchemasStatusTypeValue: String, CustomStringConvertible, Codable {
        case successful = "successful"
        case failed = "failed"
        case refreshing = "refreshing"
        public var description: String { return self.rawValue }
    }

    public struct RebootReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The replication instance that is being rebooted. 
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public struct ModifyReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The modified replication instance.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public struct DescribeAccountAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuotas", required: false, type: .list)
        ]
        /// Account quota information.
        public let accountQuotas: [AccountQuota]?

        public init(accountQuotas: [AccountQuota]? = nil) {
            self.accountQuotas = accountQuotas
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotas = "AccountQuotas"
        }
    }

    public struct ReloadTablesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TablesToReload", required: true, type: .list), 
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "ReloadOption", required: false, type: .enum)
        ]
        /// The name and schema of the table to be reloaded. 
        public let tablesToReload: [TableToReload]
        /// The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String
        /// Options for reload. Specify data-reload to reload the data and re-validate it if validation is enabled. Specify validate-only to re-validate the table. This option applies only when validation is enabled for the task.  Valid values: data-reload, validate-only Default value is data-reload.
        public let reloadOption: ReloadOptionValue?

        public init(tablesToReload: [TableToReload], replicationTaskArn: String, reloadOption: ReloadOptionValue? = nil) {
            self.tablesToReload = tablesToReload
            self.replicationTaskArn = replicationTaskArn
            self.reloadOption = reloadOption
        }

        private enum CodingKeys: String, CodingKey {
            case tablesToReload = "TablesToReload"
            case replicationTaskArn = "ReplicationTaskArn"
            case reloadOption = "ReloadOption"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case replicationInstance = "replication-instance"
        public var description: String { return self.rawValue }
    }

    public struct ReplicationTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskCreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceEndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskSettings", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "StopReason", required: false, type: .string), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "MigrationType", required: false, type: .enum), 
            AWSShapeMember(label: "ReplicationTaskStartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReplicationTaskStats", required: false, type: .structure), 
            AWSShapeMember(label: "TableMappings", required: false, type: .string), 
            AWSShapeMember(label: "RecoveryCheckpoint", required: false, type: .string), 
            AWSShapeMember(label: "TargetEndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// The date the replication task was created.
        public let replicationTaskCreationDate: TimeStamp?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let sourceEndpointArn: String?
        /// The settings for the replication task.
        public let replicationTaskSettings: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The reason the replication task was stopped.
        public let stopReason: String?
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?
        /// The user-assigned replication task identifier or name. Constraints:   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String?
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?
        /// The last error (failure) message generated for the replication instance.
        public let lastFailureMessage: String?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        /// The type of migration.
        public let migrationType: MigrationTypeValue?
        /// The date the replication task is scheduled to start.
        public let replicationTaskStartDate: TimeStamp?
        /// The statistics for the task, including elapsed time, tables loaded, and table errors.
        public let replicationTaskStats: ReplicationTaskStats?
        /// Table mappings specified in the task.
        public let tableMappings: String?
        /// Indicates the last checkpoint that occurred during a change data capture (CDC) operation. You can provide this value to the CdcStartPosition parameter to start a CDC operation that begins at that checkpoint.
        public let recoveryCheckpoint: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let targetEndpointArn: String?
        /// The status of the replication task.
        public let status: String?

        public init(replicationTaskCreationDate: TimeStamp? = nil, sourceEndpointArn: String? = nil, replicationTaskSettings: String? = nil, replicationInstanceArn: String? = nil, stopReason: String? = nil, cdcStopPosition: String? = nil, replicationTaskIdentifier: String? = nil, cdcStartPosition: String? = nil, lastFailureMessage: String? = nil, replicationTaskArn: String? = nil, migrationType: MigrationTypeValue? = nil, replicationTaskStartDate: TimeStamp? = nil, replicationTaskStats: ReplicationTaskStats? = nil, tableMappings: String? = nil, recoveryCheckpoint: String? = nil, targetEndpointArn: String? = nil, status: String? = nil) {
            self.replicationTaskCreationDate = replicationTaskCreationDate
            self.sourceEndpointArn = sourceEndpointArn
            self.replicationTaskSettings = replicationTaskSettings
            self.replicationInstanceArn = replicationInstanceArn
            self.stopReason = stopReason
            self.cdcStopPosition = cdcStopPosition
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.cdcStartPosition = cdcStartPosition
            self.lastFailureMessage = lastFailureMessage
            self.replicationTaskArn = replicationTaskArn
            self.migrationType = migrationType
            self.replicationTaskStartDate = replicationTaskStartDate
            self.replicationTaskStats = replicationTaskStats
            self.tableMappings = tableMappings
            self.recoveryCheckpoint = recoveryCheckpoint
            self.targetEndpointArn = targetEndpointArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskCreationDate = "ReplicationTaskCreationDate"
            case sourceEndpointArn = "SourceEndpointArn"
            case replicationTaskSettings = "ReplicationTaskSettings"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case stopReason = "StopReason"
            case cdcStopPosition = "CdcStopPosition"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case cdcStartPosition = "CdcStartPosition"
            case lastFailureMessage = "LastFailureMessage"
            case replicationTaskArn = "ReplicationTaskArn"
            case migrationType = "MigrationType"
            case replicationTaskStartDate = "ReplicationTaskStartDate"
            case replicationTaskStats = "ReplicationTaskStats"
            case tableMappings = "TableMappings"
            case recoveryCheckpoint = "RecoveryCheckpoint"
            case targetEndpointArn = "TargetEndpointArn"
            case status = "Status"
        }
    }

    public struct CreateReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string), 
            AWSShapeMember(label: "TableMappings", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationTaskSettings", required: false, type: .string), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string), 
            AWSShapeMember(label: "CdcStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TargetEndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "MigrationType", required: true, type: .enum), 
            AWSShapeMember(label: "SourceEndpointArn", required: true, type: .string)
        ]
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?
        /// When using the AWS CLI or boto3, provide the path of the JSON file that contains the table mappings. Precede the path with "file://". When working with the DMS API, provide the JSON as the parameter value. For example, --table-mappings file://mappingfile.json
        public let tableMappings: String
        /// Settings for the task, such as target metadata settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks in the AWS Database Migration User Guide. 
        public let replicationTaskSettings: String?
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?
        /// Indicates the start time for a change data capture (CDC) operation. Use either CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start. Specifying both values results in an error. Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”
        public let cdcStartTime: TimeStamp?
        /// Tags to be added to the replication instance.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let targetEndpointArn: String
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The replication task identifier. Constraints:   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String
        /// The migration type.
        public let migrationType: MigrationTypeValue
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let sourceEndpointArn: String

        public init(cdcStartPosition: String? = nil, tableMappings: String, replicationTaskSettings: String? = nil, cdcStopPosition: String? = nil, cdcStartTime: TimeStamp? = nil, tags: [Tag]? = nil, targetEndpointArn: String, replicationInstanceArn: String, replicationTaskIdentifier: String, migrationType: MigrationTypeValue, sourceEndpointArn: String) {
            self.cdcStartPosition = cdcStartPosition
            self.tableMappings = tableMappings
            self.replicationTaskSettings = replicationTaskSettings
            self.cdcStopPosition = cdcStopPosition
            self.cdcStartTime = cdcStartTime
            self.tags = tags
            self.targetEndpointArn = targetEndpointArn
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.sourceEndpointArn = sourceEndpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case cdcStartPosition = "CdcStartPosition"
            case tableMappings = "TableMappings"
            case replicationTaskSettings = "ReplicationTaskSettings"
            case cdcStopPosition = "CdcStopPosition"
            case cdcStartTime = "CdcStartTime"
            case tags = "Tags"
            case targetEndpointArn = "TargetEndpointArn"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case migrationType = "MigrationType"
            case sourceEndpointArn = "SourceEndpointArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the AWS DMS resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public enum AuthMechanismValue: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case mongodbCr = "mongodb_cr"
        case scramSha1 = "scram_sha_1"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Secure Sockets Layer (SSL) certificates associated with the replication instance.
        public let certificates: [Certificate]?
        /// The pagination token.
        public let marker: String?

        public init(certificates: [Certificate]? = nil, marker: String? = nil) {
            self.certificates = certificates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case marker = "Marker"
        }
    }

    public struct DeleteCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .structure)
        ]
        /// The Secure Sockets Layer (SSL) certificate.
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct DescribeEndpointTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportedEndpointTypes", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The type of endpoints that are supported.
        public let supportedEndpointTypes: [SupportedEndpointType]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(supportedEndpointTypes: [SupportedEndpointType]? = nil, marker: String? = nil) {
            self.supportedEndpointTypes = supportedEndpointTypes
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case supportedEndpointTypes = "SupportedEndpointTypes"
            case marker = "Marker"
        }
    }

    public struct ReplicationTaskStats: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TablesLoading", required: false, type: .integer), 
            AWSShapeMember(label: "ElapsedTimeMillis", required: false, type: .long), 
            AWSShapeMember(label: "TablesQueued", required: false, type: .integer), 
            AWSShapeMember(label: "TablesLoaded", required: false, type: .integer), 
            AWSShapeMember(label: "TablesErrored", required: false, type: .integer), 
            AWSShapeMember(label: "FullLoadProgressPercent", required: false, type: .integer)
        ]
        /// The number of tables currently loading for this task.
        public let tablesLoading: Int32?
        /// The elapsed time of the task, in milliseconds.
        public let elapsedTimeMillis: Int64?
        /// The number of tables queued for this task.
        public let tablesQueued: Int32?
        /// The number of tables loaded for this task.
        public let tablesLoaded: Int32?
        /// The number of errors that have occurred during this task.
        public let tablesErrored: Int32?
        /// The percent complete for the full load migration task.
        public let fullLoadProgressPercent: Int32?

        public init(tablesLoading: Int32? = nil, elapsedTimeMillis: Int64? = nil, tablesQueued: Int32? = nil, tablesLoaded: Int32? = nil, tablesErrored: Int32? = nil, fullLoadProgressPercent: Int32? = nil) {
            self.tablesLoading = tablesLoading
            self.elapsedTimeMillis = elapsedTimeMillis
            self.tablesQueued = tablesQueued
            self.tablesLoaded = tablesLoaded
            self.tablesErrored = tablesErrored
            self.fullLoadProgressPercent = fullLoadProgressPercent
        }

        private enum CodingKeys: String, CodingKey {
            case tablesLoading = "TablesLoading"
            case elapsedTimeMillis = "ElapsedTimeMillis"
            case tablesQueued = "TablesQueued"
            case tablesLoaded = "TablesLoaded"
            case tablesErrored = "TablesErrored"
            case fullLoadProgressPercent = "FullLoadProgressPercent"
        }
    }

    public struct ModifyEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchSettings", required: false, type: .structure), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "DynamoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "EndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ExtraConnectionAttributes", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "DmsTransferSettings", required: false, type: .structure), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "S3Settings", required: false, type: .structure), 
            AWSShapeMember(label: "MongoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "SslMode", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string)
        ]
        /// Settings in JSON format for the target Elasticsearch endpoint. For more information about the available settings, see Extra Connection Attributes When Using Elasticsearch as a Target for AWS DMS in the AWS Database Migration User Guide. 
        public let elasticsearchSettings: ElasticsearchSettings?
        /// The name of the server where the endpoint database resides.
        public let serverName: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// Settings in JSON format for the target Amazon DynamoDB endpoint. For more information about the available settings, see Using Object Mapping to Migrate Data to DynamoDB in the AWS Database Migration Service User Guide. 
        public let dynamoDbSettings: DynamoDbSettings?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// Additional attributes associated with the connection. To reset this parameter, pass the empty string ("") as an argument.
        public let extraConnectionAttributes: String?
        /// The user name to be used to login to the endpoint database.
        public let username: String?
        /// The settings in JSON format for the DMS transfer type of source endpoint.  Attributes include the following:   serviceAccessRoleArn - The IAM role that has permission to access the Amazon S3 bucket.   BucketName - The name of the S3 bucket to use.   compressionType - An optional parameter to use GZIP to compress the target files. Set to NONE (the default) or do not use to leave the files uncompressed.   Shorthand syntax: ServiceAccessRoleArn=string ,BucketName=string,CompressionType=string JSON syntax:  { "ServiceAccessRoleArn": "string", "BucketName": "string", "CompressionType": "none"|"gzip" } 
        public let dmsTransferSettings: DmsTransferSettings?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String
        /// The Amazon Resource Name (ARN) of the certificate used for SSL connection.
        public let certificateArn: String?
        /// Settings in JSON format for the target Amazon S3 endpoint. For more information about the available settings, see Extra Connection Attributes When Using Amazon S3 as a Target for AWS DMS in the AWS Database Migration Service User Guide. 
        public let s3Settings: S3Settings?
        /// Settings in JSON format for the source MongoDB endpoint. For more information about the available settings, see the configuration properties section in  Using MongoDB as a Target for AWS Database Migration Service in the AWS Database Migration Service User Guide. 
        public let mongoDbSettings: MongoDbSettings?
        /// Settings in JSON format for the target Amazon Kinesis Data Streams endpoint. For more information about the available settings, see Using Object Mapping to Migrate Data to a Kinesis Data Stream in the AWS Database Migration User Guide. 
        public let kinesisSettings: KinesisSettings?
        /// The password to be used to login to the endpoint database.
        public let password: String?
        /// The external table definition.
        public let externalTableDefinition: String?
        /// The type of engine for the endpoint. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String?
        /// The port used by the endpoint database.
        public let port: Int32?
        /// The SSL mode to be used. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        ///  The Amazon Resource Name (ARN) for the service access role you want to use to modify the endpoint. 
        public let serviceAccessRoleArn: String?
        /// The name of the endpoint database.
        public let databaseName: String?

        public init(elasticsearchSettings: ElasticsearchSettings? = nil, serverName: String? = nil, endpointType: ReplicationEndpointTypeValue? = nil, dynamoDbSettings: DynamoDbSettings? = nil, endpointIdentifier: String? = nil, extraConnectionAttributes: String? = nil, username: String? = nil, dmsTransferSettings: DmsTransferSettings? = nil, endpointArn: String, certificateArn: String? = nil, s3Settings: S3Settings? = nil, mongoDbSettings: MongoDbSettings? = nil, kinesisSettings: KinesisSettings? = nil, password: String? = nil, externalTableDefinition: String? = nil, engineName: String? = nil, port: Int32? = nil, sslMode: DmsSslModeValue? = nil, serviceAccessRoleArn: String? = nil, databaseName: String? = nil) {
            self.elasticsearchSettings = elasticsearchSettings
            self.serverName = serverName
            self.endpointType = endpointType
            self.dynamoDbSettings = dynamoDbSettings
            self.endpointIdentifier = endpointIdentifier
            self.extraConnectionAttributes = extraConnectionAttributes
            self.username = username
            self.dmsTransferSettings = dmsTransferSettings
            self.endpointArn = endpointArn
            self.certificateArn = certificateArn
            self.s3Settings = s3Settings
            self.mongoDbSettings = mongoDbSettings
            self.kinesisSettings = kinesisSettings
            self.password = password
            self.externalTableDefinition = externalTableDefinition
            self.engineName = engineName
            self.port = port
            self.sslMode = sslMode
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.databaseName = databaseName
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchSettings = "ElasticsearchSettings"
            case serverName = "ServerName"
            case endpointType = "EndpointType"
            case dynamoDbSettings = "DynamoDbSettings"
            case endpointIdentifier = "EndpointIdentifier"
            case extraConnectionAttributes = "ExtraConnectionAttributes"
            case username = "Username"
            case dmsTransferSettings = "DmsTransferSettings"
            case endpointArn = "EndpointArn"
            case certificateArn = "CertificateArn"
            case s3Settings = "S3Settings"
            case mongoDbSettings = "MongoDbSettings"
            case kinesisSettings = "KinesisSettings"
            case password = "Password"
            case externalTableDefinition = "ExternalTableDefinition"
            case engineName = "EngineName"
            case port = "Port"
            case sslMode = "SslMode"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case databaseName = "DatabaseName"
        }
    }

    public struct DescribeOrderableReplicationInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DeleteReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task to be deleted.
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public enum MessageFormatValue: String, CustomStringConvertible, Codable {
        case json = "json"
        public var description: String { return self.rawValue }
    }

    public struct RefreshSchemasStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "LastRefreshDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: false, type: .string)
        ]
        /// The status of the schema.
        public let status: RefreshSchemasStatusTypeValue?
        /// The last failure message for the schema.
        public let lastFailureMessage: String?
        /// The date the schema was last refreshed.
        public let lastRefreshDate: TimeStamp?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?

        public init(status: RefreshSchemasStatusTypeValue? = nil, lastFailureMessage: String? = nil, lastRefreshDate: TimeStamp? = nil, replicationInstanceArn: String? = nil, endpointArn: String? = nil) {
            self.status = status
            self.lastFailureMessage = lastFailureMessage
            self.lastRefreshDate = lastRefreshDate
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case lastFailureMessage = "LastFailureMessage"
            case lastRefreshDate = "LastRefreshDate"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
        }
    }

    public struct StartReplicationTaskAssessmentMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public struct ModifyReplicationSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationSubnetGroupDescription", required: false, type: .string)
        ]
        /// A list of subnet IDs.
        public let subnetIds: [String]
        /// The name of the replication instance subnet group.
        public let replicationSubnetGroupIdentifier: String
        /// The description of the replication instance subnet group.
        public let replicationSubnetGroupDescription: String?

        public init(subnetIds: [String], replicationSubnetGroupIdentifier: String, replicationSubnetGroupDescription: String? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case replicationSubnetGroupDescription = "ReplicationSubnetGroupDescription"
        }
    }

    public struct DescribeSchemasMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(marker: String? = nil, maxRecords: Int32? = nil, endpointArn: String) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case endpointArn = "EndpointArn"
        }
    }

    public struct RebootReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "ForceFailover", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// If this parameter is true, the reboot is conducted through a Multi-AZ failover. (If the instance isn't configured for Multi-AZ, then you can't specify true.)
        public let forceFailover: Bool?

        public init(replicationInstanceArn: String, forceFailover: Bool? = nil) {
            self.replicationInstanceArn = replicationInstanceArn
            self.forceFailover = forceFailover
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case forceFailover = "ForceFailover"
        }
    }

    public struct Endpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ElasticsearchSettings", required: false, type: .structure), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "DynamoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "EndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "EndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ExtraConnectionAttributes", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "DmsTransferSettings", required: false, type: .structure), 
            AWSShapeMember(label: "EndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "S3Settings", required: false, type: .structure), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "MongoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "KinesisSettings", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "SslMode", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string)
        ]
        /// The expanded name for the engine name. For example, if the EngineName parameter is "aurora," this value would be "Amazon Aurora MySQL."
        public let engineDisplayName: String?
        /// The settings for the Elasticsearch source endpoint. For more information, see the ElasticsearchSettings structure.
        public let elasticsearchSettings: ElasticsearchSettings?
        /// The AWS KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the KmsKeyId parameter, then AWS DMS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// The name of the server at the endpoint.
        public let serverName: String?
        /// The settings for the target DynamoDB database. For more information, see the DynamoDBSettings structure.
        public let dynamoDbSettings: DynamoDbSettings?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// Additional connection attributes used to connect to the endpoint.
        public let extraConnectionAttributes: String?
        /// The user name used to connect to the endpoint.
        public let username: String?
        /// The settings in JSON format for the DMS transfer type of source endpoint.  Possible attributes include the following:    serviceAccessRoleArn - The IAM role that has permission to access the Amazon S3 bucket.    bucketName - The name of the S3 bucket to use.    compressionType - An optional parameter to use GZIP to compress the target files. To use GZIP, set this value to NONE (the default). To keep the files uncompressed, don't use this value.    Shorthand syntax for these attributes is as follows: ServiceAccessRoleArn=string,BucketName=string,CompressionType=string  JSON syntax for these attributes is as follows: { "ServiceAccessRoleArn": "string", "BucketName": "string", "CompressionType": "none"|"gzip" }  
        public let dmsTransferSettings: DmsTransferSettings?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?
        /// The settings for the S3 target endpoint. For more information, see the S3Settings structure.
        public let s3Settings: S3Settings?
        /// The Amazon Resource Name (ARN) used for SSL connection to the endpoint.
        public let certificateArn: String?
        /// The settings for the MongoDB source endpoint. For more information, see the MongoDbSettings structure.
        public let mongoDbSettings: MongoDbSettings?
        ///  Value returned by a call to CreateEndpoint that can be used for cross-account validation. Use it on a subsequent call to CreateEndpoint to create the endpoint with a cross-account. 
        public let externalId: String?
        /// The settings for the Amazon Kinesis source endpoint. For more information, see the KinesisSettings structure.
        public let kinesisSettings: KinesisSettings?
        /// The Amazon Resource Name (ARN) used by the service access IAM role.
        public let serviceAccessRoleArn: String?
        /// The external table definition.
        public let externalTableDefinition: String?
        /// The database engine name. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String?
        /// The port value used to access the endpoint.
        public let port: Int32?
        /// The SSL mode used to connect to the endpoint. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The status of the endpoint.
        public let status: String?
        /// The name of the database at the endpoint.
        public let databaseName: String?

        public init(engineDisplayName: String? = nil, elasticsearchSettings: ElasticsearchSettings? = nil, kmsKeyId: String? = nil, serverName: String? = nil, dynamoDbSettings: DynamoDbSettings? = nil, endpointType: ReplicationEndpointTypeValue? = nil, endpointIdentifier: String? = nil, extraConnectionAttributes: String? = nil, username: String? = nil, dmsTransferSettings: DmsTransferSettings? = nil, endpointArn: String? = nil, s3Settings: S3Settings? = nil, certificateArn: String? = nil, mongoDbSettings: MongoDbSettings? = nil, externalId: String? = nil, kinesisSettings: KinesisSettings? = nil, serviceAccessRoleArn: String? = nil, externalTableDefinition: String? = nil, engineName: String? = nil, port: Int32? = nil, sslMode: DmsSslModeValue? = nil, status: String? = nil, databaseName: String? = nil) {
            self.engineDisplayName = engineDisplayName
            self.elasticsearchSettings = elasticsearchSettings
            self.kmsKeyId = kmsKeyId
            self.serverName = serverName
            self.dynamoDbSettings = dynamoDbSettings
            self.endpointType = endpointType
            self.endpointIdentifier = endpointIdentifier
            self.extraConnectionAttributes = extraConnectionAttributes
            self.username = username
            self.dmsTransferSettings = dmsTransferSettings
            self.endpointArn = endpointArn
            self.s3Settings = s3Settings
            self.certificateArn = certificateArn
            self.mongoDbSettings = mongoDbSettings
            self.externalId = externalId
            self.kinesisSettings = kinesisSettings
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.externalTableDefinition = externalTableDefinition
            self.engineName = engineName
            self.port = port
            self.sslMode = sslMode
            self.status = status
            self.databaseName = databaseName
        }

        private enum CodingKeys: String, CodingKey {
            case engineDisplayName = "EngineDisplayName"
            case elasticsearchSettings = "ElasticsearchSettings"
            case kmsKeyId = "KmsKeyId"
            case serverName = "ServerName"
            case dynamoDbSettings = "DynamoDbSettings"
            case endpointType = "EndpointType"
            case endpointIdentifier = "EndpointIdentifier"
            case extraConnectionAttributes = "ExtraConnectionAttributes"
            case username = "Username"
            case dmsTransferSettings = "DmsTransferSettings"
            case endpointArn = "EndpointArn"
            case s3Settings = "S3Settings"
            case certificateArn = "CertificateArn"
            case mongoDbSettings = "MongoDbSettings"
            case externalId = "ExternalId"
            case kinesisSettings = "KinesisSettings"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case externalTableDefinition = "ExternalTableDefinition"
            case engineName = "EngineName"
            case port = "Port"
            case sslMode = "SslMode"
            case status = "Status"
            case databaseName = "DatabaseName"
        }
    }

    public struct ModifyEventSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        /// The modified event subscription.
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DescribeOrderableReplicationInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableReplicationInstances", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The order-able replication instances available.
        public let orderableReplicationInstances: [OrderableReplicationInstance]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(orderableReplicationInstances: [OrderableReplicationInstance]? = nil, marker: String? = nil) {
            self.orderableReplicationInstances = orderableReplicationInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case orderableReplicationInstances = "OrderableReplicationInstances"
            case marker = "Marker"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificatePem", required: false, type: .string), 
            AWSShapeMember(label: "SigningAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "ValidToDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidFromDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CertificateWallet", required: false, type: .blob), 
            AWSShapeMember(label: "KeyLength", required: false, type: .integer), 
            AWSShapeMember(label: "CertificateCreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CertificateOwner", required: false, type: .string), 
            AWSShapeMember(label: "CertificateIdentifier", required: false, type: .string)
        ]
        /// The contents of the .pem X.509 certificate file for the certificate.
        public let certificatePem: String?
        /// The signing algorithm for the certificate.
        public let signingAlgorithm: String?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// The final date that the certificate is valid.
        public let validToDate: TimeStamp?
        /// The beginning date that the certificate is valid.
        public let validFromDate: TimeStamp?
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        public let certificateWallet: Data?
        /// The key length of the cryptographic algorithm being used.
        public let keyLength: Int32?
        /// The date that the certificate was created.
        public let certificateCreationDate: TimeStamp?
        /// The owner of the certificate.
        public let certificateOwner: String?
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        public let certificateIdentifier: String?

        public init(certificatePem: String? = nil, signingAlgorithm: String? = nil, certificateArn: String? = nil, validToDate: TimeStamp? = nil, validFromDate: TimeStamp? = nil, certificateWallet: Data? = nil, keyLength: Int32? = nil, certificateCreationDate: TimeStamp? = nil, certificateOwner: String? = nil, certificateIdentifier: String? = nil) {
            self.certificatePem = certificatePem
            self.signingAlgorithm = signingAlgorithm
            self.certificateArn = certificateArn
            self.validToDate = validToDate
            self.validFromDate = validFromDate
            self.certificateWallet = certificateWallet
            self.keyLength = keyLength
            self.certificateCreationDate = certificateCreationDate
            self.certificateOwner = certificateOwner
            self.certificateIdentifier = certificateIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case certificatePem = "CertificatePem"
            case signingAlgorithm = "SigningAlgorithm"
            case certificateArn = "CertificateArn"
            case validToDate = "ValidToDate"
            case validFromDate = "ValidFromDate"
            case certificateWallet = "CertificateWallet"
            case keyLength = "KeyLength"
            case certificateCreationDate = "CertificateCreationDate"
            case certificateOwner = "CertificateOwner"
            case certificateIdentifier = "CertificateIdentifier"
        }
    }

    public struct ModifyReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "AllowMajorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string)
        ]
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        public let replicationInstanceIdentifier: String?
        /// Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the replication instance's current version.
        public let allowMajorVersionUpgrade: Bool?
        ///  Indicates that minor version upgrades will be applied automatically to the replication instance during the maintenance window. Changing this parameter does not result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and AWS DMS has enabled auto patching for that engine version. 
        public let autoMinorVersionUpgrade: Bool?
        /// The amount of storage (in gigabytes) to be allocated for the replication instance.
        public let allocatedStorage: Int32?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// Indicates whether the changes should be applied immediately or during the next maintenance window.
        public let applyImmediately: Bool?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter does not result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        public let preferredMaintenanceWindow: String?
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        public let vpcSecurityGroupIds: [String]?
        /// The engine version number of the replication instance.
        public let engineVersion: String?

        public init(replicationInstanceIdentifier: String? = nil, allowMajorVersionUpgrade: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, allocatedStorage: Int32? = nil, multiAZ: Bool? = nil, replicationInstanceClass: String? = nil, replicationInstanceArn: String, applyImmediately: Bool? = nil, preferredMaintenanceWindow: String? = nil, vpcSecurityGroupIds: [String]? = nil, engineVersion: String? = nil) {
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.allocatedStorage = allocatedStorage
            self.multiAZ = multiAZ
            self.replicationInstanceClass = replicationInstanceClass
            self.replicationInstanceArn = replicationInstanceArn
            self.applyImmediately = applyImmediately
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.engineVersion = engineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case allocatedStorage = "AllocatedStorage"
            case multiAZ = "MultiAZ"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case applyImmediately = "ApplyImmediately"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case engineVersion = "EngineVersion"
        }
    }

    public struct ModifyReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task that was modified.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct ImportCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .structure)
        ]
        /// The certificate to be uploaded.
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct RefreshSchemasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RefreshSchemasStatus", required: false, type: .structure)
        ]
        /// The status of the refreshed schema.
        public let refreshSchemasStatus: RefreshSchemasStatus?

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

        private enum CodingKeys: String, CodingKey {
            case refreshSchemasStatus = "RefreshSchemasStatus"
        }
    }

    public struct TestConnectionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
        }
    }

    public struct CreateReplicationSubnetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroup", required: false, type: .structure)
        ]
        /// The replication subnet group that was created.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroup = "ReplicationSubnetGroup"
        }
    }

    public struct DescribeCertificatesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 10
        public let maxRecords: Int32?
        /// Filters applied to the certificate described in the form of key-value pairs.
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct DescribeTableStatisticsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 500.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the describe table statistics action. Valid filter names: schema-name | table-name | table-state A combination of filters creates an AND condition where each record matches all specified filters.
        public let filters: [Filter]?

        public init(replicationTaskArn: String, maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case filters = "Filters"
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: false, type: .string)
        ]
        /// Filters applied to the action.
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the AWS DMS event subscription to be described.
        public let subscriptionName: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil, subscriptionName: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct TableToReload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: false, type: .string)
        ]
        /// The schema name of the table to be reloaded.
        public let schemaName: String?
        /// The table name of the table to be reloaded.
        public let tableName: String?

        public init(schemaName: String? = nil, tableName: String? = nil) {
            self.schemaName = schemaName
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case schemaName = "SchemaName"
            case tableName = "TableName"
        }
    }

    public struct CreateEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The endpoint that was created.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
        }
    }

    public struct TableStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidationState", required: false, type: .string), 
            AWSShapeMember(label: "Ddls", required: false, type: .long), 
            AWSShapeMember(label: "Inserts", required: false, type: .long), 
            AWSShapeMember(label: "ValidationFailedRecords", required: false, type: .long), 
            AWSShapeMember(label: "FullLoadErrorRows", required: false, type: .long), 
            AWSShapeMember(label: "FullLoadRows", required: false, type: .long), 
            AWSShapeMember(label: "Updates", required: false, type: .long), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "TableState", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidationStateDetails", required: false, type: .string), 
            AWSShapeMember(label: "ValidationPendingRecords", required: false, type: .long), 
            AWSShapeMember(label: "Deletes", required: false, type: .long), 
            AWSShapeMember(label: "FullLoadCondtnlChkFailedRows", required: false, type: .long), 
            AWSShapeMember(label: "TableName", required: false, type: .string), 
            AWSShapeMember(label: "ValidationSuspendedRecords", required: false, type: .long)
        ]
        /// The validation state of the table. The parameter can have the following values   Not enabled—Validation is not enabled for the table in the migration task.   Pending records—Some records in the table are waiting for validation.   Mismatched records—Some records in the table do not match between the source and target.   Suspended records—Some records in the table could not be validated.   No primary key—The table could not be validated because it had no primary key.   Table error—The table was not validated because it was in an error state and some data was not migrated.   Validated—All rows in the table were validated. If the table is updated, the status can change from Validated.   Error—The table could not be validated because of an unexpected error.  
        public let validationState: String?
        /// The Data Definition Language (DDL) used to build and modify the structure of your tables.
        public let ddls: Int64?
        /// The number of insert actions performed on a table.
        public let inserts: Int64?
        /// The number of records that failed validation.
        public let validationFailedRecords: Int64?
        /// The number of rows that failed to load during the Full Load operation (valid only for DynamoDB as a target migrations).
        public let fullLoadErrorRows: Int64?
        /// The number of rows added during the Full Load operation.
        public let fullLoadRows: Int64?
        /// The number of update actions performed on a table.
        public let updates: Int64?
        /// The schema name.
        public let schemaName: String?
        /// The state of the tables described. Valid states: Table does not exist | Before load | Full load | Table completed | Table cancelled | Table error | Table all | Table updates | Table is being reloaded
        public let tableState: String?
        /// The last time the table was updated.
        public let lastUpdateTime: TimeStamp?
        /// Additional details about the state of validation.
        public let validationStateDetails: String?
        /// The number of records that have yet to be validated.
        public let validationPendingRecords: Int64?
        /// The number of delete actions performed on a table.
        public let deletes: Int64?
        /// The number of rows that failed conditional checks during the Full Load operation (valid only for DynamoDB as a target migrations).
        public let fullLoadCondtnlChkFailedRows: Int64?
        /// The name of the table.
        public let tableName: String?
        /// The number of records that could not be validated.
        public let validationSuspendedRecords: Int64?

        public init(validationState: String? = nil, ddls: Int64? = nil, inserts: Int64? = nil, validationFailedRecords: Int64? = nil, fullLoadErrorRows: Int64? = nil, fullLoadRows: Int64? = nil, updates: Int64? = nil, schemaName: String? = nil, tableState: String? = nil, lastUpdateTime: TimeStamp? = nil, validationStateDetails: String? = nil, validationPendingRecords: Int64? = nil, deletes: Int64? = nil, fullLoadCondtnlChkFailedRows: Int64? = nil, tableName: String? = nil, validationSuspendedRecords: Int64? = nil) {
            self.validationState = validationState
            self.ddls = ddls
            self.inserts = inserts
            self.validationFailedRecords = validationFailedRecords
            self.fullLoadErrorRows = fullLoadErrorRows
            self.fullLoadRows = fullLoadRows
            self.updates = updates
            self.schemaName = schemaName
            self.tableState = tableState
            self.lastUpdateTime = lastUpdateTime
            self.validationStateDetails = validationStateDetails
            self.validationPendingRecords = validationPendingRecords
            self.deletes = deletes
            self.fullLoadCondtnlChkFailedRows = fullLoadCondtnlChkFailedRows
            self.tableName = tableName
            self.validationSuspendedRecords = validationSuspendedRecords
        }

        private enum CodingKeys: String, CodingKey {
            case validationState = "ValidationState"
            case ddls = "Ddls"
            case inserts = "Inserts"
            case validationFailedRecords = "ValidationFailedRecords"
            case fullLoadErrorRows = "FullLoadErrorRows"
            case fullLoadRows = "FullLoadRows"
            case updates = "Updates"
            case schemaName = "SchemaName"
            case tableState = "TableState"
            case lastUpdateTime = "LastUpdateTime"
            case validationStateDetails = "ValidationStateDetails"
            case validationPendingRecords = "ValidationPendingRecords"
            case deletes = "Deletes"
            case fullLoadCondtnlChkFailedRows = "FullLoadCondtnlChkFailedRows"
            case tableName = "TableName"
            case validationSuspendedRecords = "ValidationSuspendedRecords"
        }
    }

    public struct StartReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string), 
            AWSShapeMember(label: "StartReplicationTaskType", required: true, type: .enum), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string), 
            AWSShapeMember(label: "CdcStartTime", required: false, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) of the replication task to be started.
        public let replicationTaskArn: String
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?
        /// The type of replication task.
        public let startReplicationTaskType: StartReplicationTaskTypeValue
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?
        /// Indicates the start time for a change data capture (CDC) operation. Use either CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start. Specifying both values results in an error. Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”
        public let cdcStartTime: TimeStamp?

        public init(replicationTaskArn: String, cdcStartPosition: String? = nil, startReplicationTaskType: StartReplicationTaskTypeValue, cdcStopPosition: String? = nil, cdcStartTime: TimeStamp? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.cdcStartPosition = cdcStartPosition
            self.startReplicationTaskType = startReplicationTaskType
            self.cdcStopPosition = cdcStopPosition
            self.cdcStartTime = cdcStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case cdcStartPosition = "CdcStartPosition"
            case startReplicationTaskType = "StartReplicationTaskType"
            case cdcStopPosition = "CdcStopPosition"
            case cdcStartTime = "CdcStartTime"
        }
    }

    public struct DescribeConnectionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The filters applied to the connection. Valid filter names: endpoint-arn | replication-instance-arn
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public enum NestingLevelValue: String, CustomStringConvertible, Codable {
        case none = "none"
        case one = "one"
        public var description: String { return self.rawValue }
    }

    public struct MongoDbSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ExtractDocId", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "DocsToInvestigate", required: false, type: .string), 
            AWSShapeMember(label: "AuthType", required: false, type: .enum), 
            AWSShapeMember(label: "NestingLevel", required: false, type: .enum), 
            AWSShapeMember(label: "AuthMechanism", required: false, type: .enum), 
            AWSShapeMember(label: "AuthSource", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: false, type: .string)
        ]
        /// The AWS KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the KmsKeyId parameter, then AWS DMS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        ///  Specifies the document ID. Use this attribute when NestingLevel is set to NONE.  Default value is false. 
        public let extractDocId: String?
        /// The user name you use to access the MongoDB source endpoint. 
        public let username: String?
        ///  The port value for the MongoDB source endpoint. 
        public let port: Int32?
        ///  The database name on the MongoDB source endpoint. 
        public let databaseName: String?
        ///  The name of the server on the MongoDB source endpoint. 
        public let serverName: String?
        ///  Indicates the number of documents to preview to determine the document organization. Use this attribute when NestingLevel is set to ONE.  Must be a positive value greater than 0. Default value is 1000.
        public let docsToInvestigate: String?
        ///  The authentication type you use to access the MongoDB source endpoint. Valid values: NO, PASSWORD  When NO is selected, user name and password parameters are not used and can be empty. 
        public let authType: AuthTypeValue?
        ///  Specifies either document or table mode.  Valid values: NONE, ONE Default value is NONE. Specify NONE to use document mode. Specify ONE to use table mode.
        public let nestingLevel: NestingLevelValue?
        ///  The authentication mechanism you use to access the MongoDB source endpoint. Valid values: DEFAULT, MONGODB_CR, SCRAM_SHA_1  DEFAULT – For MongoDB version 2.x, use MONGODB_CR. For MongoDB version 3.x, use SCRAM_SHA_1. This attribute is not used when authType=No.
        public let authMechanism: AuthMechanismValue?
        ///  The MongoDB database name. This attribute is not used when authType=NO.  The default is admin.
        public let authSource: String?
        ///  The password for the user account you use to access the MongoDB source endpoint. 
        public let password: String?

        public init(kmsKeyId: String? = nil, extractDocId: String? = nil, username: String? = nil, port: Int32? = nil, databaseName: String? = nil, serverName: String? = nil, docsToInvestigate: String? = nil, authType: AuthTypeValue? = nil, nestingLevel: NestingLevelValue? = nil, authMechanism: AuthMechanismValue? = nil, authSource: String? = nil, password: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.extractDocId = extractDocId
            self.username = username
            self.port = port
            self.databaseName = databaseName
            self.serverName = serverName
            self.docsToInvestigate = docsToInvestigate
            self.authType = authType
            self.nestingLevel = nestingLevel
            self.authMechanism = authMechanism
            self.authSource = authSource
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case extractDocId = "ExtractDocId"
            case username = "Username"
            case port = "Port"
            case databaseName = "DatabaseName"
            case serverName = "ServerName"
            case docsToInvestigate = "DocsToInvestigate"
            case authType = "AuthType"
            case nestingLevel = "NestingLevel"
            case authMechanism = "AuthMechanism"
            case authSource = "AuthSource"
            case password = "Password"
        }
    }

    public struct DescribeRefreshSchemasStatusMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct DescribeEndpointsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// Filters applied to the describe action. Valid filter names: endpoint-arn | endpoint-type | endpoint-id | engine-name
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct DescribeReplicationSubnetGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// Filters applied to the describe action.
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct DescribeConnectionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connections", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A description of the connections.
        public let connections: [Connection]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(connections: [Connection]? = nil, marker: String? = nil) {
            self.connections = connections
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "Connections"
            case marker = "Marker"
        }
    }

    public struct AddTagsToResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The tag to be assigned to the DMS resource.
        public let tags: [Tag]
        /// The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be added to. AWS DMS resources include a replication instance, endpoint, and a replication task.
        public let resourceArn: String

        public init(tags: [Tag], resourceArn: String) {
            self.tags = tags
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceArn = "ResourceArn"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the availability zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct TestConnectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connection", required: false, type: .structure)
        ]
        /// The connection tested.
        public let connection: Connection?

        public init(connection: Connection? = nil) {
            self.connection = connection
        }

        private enum CodingKeys: String, CodingKey {
            case connection = "Connection"
        }
    }

    public enum MigrationTypeValue: String, CustomStringConvertible, Codable {
        case fullLoad = "full-load"
        case cdc = "cdc"
        case fullLoadAndCdc = "full-load-and-cdc"
        public var description: String { return self.rawValue }
    }

    public struct KinesisSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageFormat", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "StreamArn", required: false, type: .string)
        ]
        /// The output format for the records created on the endpoint. The message format is JSON.
        public let messageFormat: MessageFormatValue?
        /// The Amazon Resource Name (ARN) for the IAM role that DMS uses to write to the Amazon Kinesis data stream.
        public let serviceAccessRoleArn: String?
        /// The Amazon Resource Name (ARN) for the Amazon Kinesis Data Streams endpoint.
        public let streamArn: String?

        public init(messageFormat: MessageFormatValue? = nil, serviceAccessRoleArn: String? = nil, streamArn: String? = nil) {
            self.messageFormat = messageFormat
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.streamArn = streamArn
        }

        private enum CodingKeys: String, CodingKey {
            case messageFormat = "MessageFormat"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case streamArn = "StreamArn"
        }
    }

    public struct OrderableReplicationInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludedAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "MinAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "MaxAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string)
        ]
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let includedAllocatedStorage: Int32?
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        public let minAllocatedStorage: Int32?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        public let maxAllocatedStorage: Int32?
        /// The default amount of storage (in gigabytes) that is allocated for the replication instance.
        public let defaultAllocatedStorage: Int32?
        /// The version of the replication engine.
        public let engineVersion: String?
        /// The type of storage used by the replication instance.
        public let storageType: String?

        public init(includedAllocatedStorage: Int32? = nil, minAllocatedStorage: Int32? = nil, replicationInstanceClass: String? = nil, maxAllocatedStorage: Int32? = nil, defaultAllocatedStorage: Int32? = nil, engineVersion: String? = nil, storageType: String? = nil) {
            self.includedAllocatedStorage = includedAllocatedStorage
            self.minAllocatedStorage = minAllocatedStorage
            self.replicationInstanceClass = replicationInstanceClass
            self.maxAllocatedStorage = maxAllocatedStorage
            self.defaultAllocatedStorage = defaultAllocatedStorage
            self.engineVersion = engineVersion
            self.storageType = storageType
        }

        private enum CodingKeys: String, CodingKey {
            case includedAllocatedStorage = "IncludedAllocatedStorage"
            case minAllocatedStorage = "MinAllocatedStorage"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case defaultAllocatedStorage = "DefaultAllocatedStorage"
            case engineVersion = "EngineVersion"
            case storageType = "StorageType"
        }
    }

    public struct DescribeReplicationSubnetGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroups", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A description of the replication subnet groups.
        public let replicationSubnetGroups: [ReplicationSubnetGroup]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(replicationSubnetGroups: [ReplicationSubnetGroup]? = nil, marker: String? = nil) {
            self.replicationSubnetGroups = replicationSubnetGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroups = "ReplicationSubnetGroups"
            case marker = "Marker"
        }
    }

    public struct DescribeEventCategoriesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoryGroupList", required: false, type: .list)
        ]
        /// A list of event categories.
        public let eventCategoryGroupList: [EventCategoryGroup]?

        public init(eventCategoryGroupList: [EventCategoryGroup]? = nil) {
            self.eventCategoryGroupList = eventCategoryGroupList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoryGroupList = "EventCategoryGroupList"
        }
    }

    public struct ElasticsearchSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FullLoadErrorPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "EndpointUri", required: true, type: .string), 
            AWSShapeMember(label: "ErrorRetryDuration", required: false, type: .integer)
        ]
        /// The maximum percentage of records that can fail to be written before a full load operation stops. 
        public let fullLoadErrorPercentage: Int32?
        /// The Amazon Resource Name (ARN) used by service to access the IAM role.
        public let serviceAccessRoleArn: String
        /// The endpoint for the ElasticSearch cluster.
        public let endpointUri: String
        /// The maximum number of seconds that DMS retries failed API requests to the Elasticsearch cluster.
        public let errorRetryDuration: Int32?

        public init(fullLoadErrorPercentage: Int32? = nil, serviceAccessRoleArn: String, endpointUri: String, errorRetryDuration: Int32? = nil) {
            self.fullLoadErrorPercentage = fullLoadErrorPercentage
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.endpointUri = endpointUri
            self.errorRetryDuration = errorRetryDuration
        }

        private enum CodingKeys: String, CodingKey {
            case fullLoadErrorPercentage = "FullLoadErrorPercentage"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case endpointUri = "EndpointUri"
            case errorRetryDuration = "ErrorRetryDuration"
        }
    }

    public struct ReplicationPendingModifiedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string)
        ]
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let allocatedStorage: Int32?
        /// The engine version number of the replication instance.
        public let engineVersion: String?

        public init(replicationInstanceClass: String? = nil, multiAZ: Bool? = nil, allocatedStorage: Int32? = nil, engineVersion: String? = nil) {
            self.replicationInstanceClass = replicationInstanceClass
            self.multiAZ = multiAZ
            self.allocatedStorage = allocatedStorage
            self.engineVersion = engineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceClass = "ReplicationInstanceClass"
            case multiAZ = "MultiAZ"
            case allocatedStorage = "AllocatedStorage"
            case engineVersion = "EngineVersion"
        }
    }

    public struct DeleteReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance to be deleted.
        public let replicationInstanceArn: String

        public init(replicationInstanceArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
        }
    }

    public struct DescribeReplicationInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstances", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The replication instances described.
        public let replicationInstances: [ReplicationInstance]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(replicationInstances: [ReplicationInstance]? = nil, marker: String? = nil) {
            self.replicationInstances = replicationInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstances = "ReplicationInstances"
            case marker = "Marker"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// A list of event categories for a source type that you want to subscribe to.
        public let eventCategories: [String]?
        /// Filters applied to the action.
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The type of AWS DMS resource that generates events. Valid values: replication-instance | migration-task
        public let sourceType: SourceType?
        /// The end time for the events to be listed.
        public let endTime: TimeStamp?
        ///  The identifier of the event source. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It cannot end with a hyphen or contain two consecutive hyphens. 
        public let sourceIdentifier: String?
        /// The start time for the events to be listed.
        public let startTime: TimeStamp?
        /// The duration of the events to be listed.
        public let duration: Int32?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(eventCategories: [String]? = nil, filters: [Filter]? = nil, marker: String? = nil, sourceType: SourceType? = nil, endTime: TimeStamp? = nil, sourceIdentifier: String? = nil, startTime: TimeStamp? = nil, duration: Int32? = nil, maxRecords: Int32? = nil) {
            self.eventCategories = eventCategories
            self.filters = filters
            self.marker = marker
            self.sourceType = sourceType
            self.endTime = endTime
            self.sourceIdentifier = sourceIdentifier
            self.startTime = startTime
            self.duration = duration
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategories = "EventCategories"
            case filters = "Filters"
            case marker = "Marker"
            case sourceType = "SourceType"
            case endTime = "EndTime"
            case sourceIdentifier = "SourceIdentifier"
            case startTime = "StartTime"
            case duration = "Duration"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The name of the DMS event notification subscription to be deleted.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct CreateReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task that was created.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct DescribeReplicationInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// Filters applied to the describe action. Valid filter names: replication-instance-arn | replication-instance-id | replication-instance-class | engine-version
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct ReplicationSubnetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationSubnetGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .list)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// The description of the replication subnet group.
        public let replicationSubnetGroupDescription: String?
        /// The identifier of the replication instance subnet group.
        public let replicationSubnetGroupIdentifier: String?
        /// The status of the subnet group.
        public let subnetGroupStatus: String?
        /// The subnets that are in the subnet group.
        public let subnets: [Subnet]?

        public init(vpcId: String? = nil, replicationSubnetGroupDescription: String? = nil, replicationSubnetGroupIdentifier: String? = nil, subnetGroupStatus: String? = nil, subnets: [Subnet]? = nil) {
            self.vpcId = vpcId
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case replicationSubnetGroupDescription = "ReplicationSubnetGroupDescription"
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case subnetGroupStatus = "SubnetGroupStatus"
            case subnets = "Subnets"
        }
    }

    public enum ReplicationEndpointTypeValue: String, CustomStringConvertible, Codable {
        case source = "source"
        case target = "target"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReplicationTaskAssessmentResultsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskAssessmentResults", required: false, type: .list), 
            AWSShapeMember(label: "BucketName", required: false, type: .string)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  The task assessment report. 
        public let replicationTaskAssessmentResults: [ReplicationTaskAssessmentResult]?
        /// - The Amazon S3 bucket where the task assessment report is located. 
        public let bucketName: String?

        public init(marker: String? = nil, replicationTaskAssessmentResults: [ReplicationTaskAssessmentResult]? = nil, bucketName: String? = nil) {
            self.marker = marker
            self.replicationTaskAssessmentResults = replicationTaskAssessmentResults
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case replicationTaskAssessmentResults = "ReplicationTaskAssessmentResults"
            case bucketName = "BucketName"
        }
    }

    public struct ReloadTablesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String?

        public init(replicationTaskArn: String? = nil) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public struct DescribeReplicationTaskAssessmentResultsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// - The Amazon Resource Name (ARN) string that uniquely identifies the task. When this input parameter is specified the API will return only one result and ignore the values of the max-records and marker parameters. 
        public let replicationTaskArn: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(marker: String? = nil, replicationTaskArn: String? = nil, maxRecords: Int32? = nil) {
            self.marker = marker
            self.replicationTaskArn = replicationTaskArn
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case replicationTaskArn = "ReplicationTaskArn"
            case maxRecords = "MaxRecords"
        }
    }

    public enum AuthTypeValue: String, CustomStringConvertible, Codable {
        case no = "no"
        case password = "password"
        public var description: String { return self.rawValue }
    }

    public struct SupportedEndpointType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "EngineDisplayName", required: false, type: .string), 
            AWSShapeMember(label: "SupportsCDC", required: false, type: .boolean), 
            AWSShapeMember(label: "EndpointType", required: false, type: .enum)
        ]
        /// The database engine name. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String?
        /// The expanded name for the engine name. For example, if the EngineName parameter is "aurora," this value would be "Amazon Aurora MySQL."
        public let engineDisplayName: String?
        /// Indicates if Change Data Capture (CDC) is supported.
        public let supportsCDC: Bool?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?

        public init(engineName: String? = nil, engineDisplayName: String? = nil, supportsCDC: Bool? = nil, endpointType: ReplicationEndpointTypeValue? = nil) {
            self.engineName = engineName
            self.engineDisplayName = engineDisplayName
            self.supportsCDC = supportsCDC
            self.endpointType = endpointType
        }

        private enum CodingKeys: String, CodingKey {
            case engineName = "EngineName"
            case engineDisplayName = "EngineDisplayName"
            case supportsCDC = "SupportsCDC"
            case endpointType = "EndpointType"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]
        /// A list of tags for the resource.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct RefreshSchemasMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
        }
    }

    public struct DeleteReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The replication instance that was deleted.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "CustomerAwsId", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionCreationTime", required: false, type: .string), 
            AWSShapeMember(label: "SourceIdsList", required: false, type: .list), 
            AWSShapeMember(label: "CustSubscriptionId", required: false, type: .string), 
            AWSShapeMember(label: "EventCategoriesList", required: false, type: .list)
        ]
        /// Boolean value that indicates if the event subscription is enabled.
        public let enabled: Bool?
        /// The status of the AWS DMS event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that AWS DMS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public let status: String?
        /// The AWS customer account associated with the AWS DMS event notification subscription.
        public let customerAwsId: String?
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | replication-server | security-group | migration-task
        public let sourceType: String?
        /// The topic ARN of the AWS DMS event notification subscription.
        public let snsTopicArn: String?
        /// The time the RDS event notification subscription was created.
        public let subscriptionCreationTime: String?
        /// A list of source Ids for the event subscription.
        public let sourceIdsList: [String]?
        /// The AWS DMS event notification subscription Id.
        public let custSubscriptionId: String?
        /// A lists of event categories.
        public let eventCategoriesList: [String]?

        public init(enabled: Bool? = nil, status: String? = nil, customerAwsId: String? = nil, sourceType: String? = nil, snsTopicArn: String? = nil, subscriptionCreationTime: String? = nil, sourceIdsList: [String]? = nil, custSubscriptionId: String? = nil, eventCategoriesList: [String]? = nil) {
            self.enabled = enabled
            self.status = status
            self.customerAwsId = customerAwsId
            self.sourceType = sourceType
            self.snsTopicArn = snsTopicArn
            self.subscriptionCreationTime = subscriptionCreationTime
            self.sourceIdsList = sourceIdsList
            self.custSubscriptionId = custSubscriptionId
            self.eventCategoriesList = eventCategoriesList
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case status = "Status"
            case customerAwsId = "CustomerAwsId"
            case sourceType = "SourceType"
            case snsTopicArn = "SnsTopicArn"
            case subscriptionCreationTime = "SubscriptionCreationTime"
            case sourceIdsList = "SourceIdsList"
            case custSubscriptionId = "CustSubscriptionId"
            case eventCategoriesList = "EventCategoriesList"
        }
    }

    public struct CreateEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchSettings", required: false, type: .structure), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", required: true, type: .enum), 
            AWSShapeMember(label: "DynamoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "EndpointIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ExtraConnectionAttributes", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "DmsTransferSettings", required: false, type: .structure), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "S3Settings", required: false, type: .structure), 
            AWSShapeMember(label: "MongoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "SslMode", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string)
        ]
        /// Settings in JSON format for the target Elasticsearch endpoint. For more information about the available settings, see Extra Connection Attributes When Using Elasticsearch as a Target for AWS DMS in the AWS Database Migration User Guide. 
        public let elasticsearchSettings: ElasticsearchSettings?
        /// The AWS KMS key identifier to use to encrypt the connection parameters. If you don't specify a value for the KmsKeyId parameter, then AWS DMS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// The name of the server where the endpoint database resides.
        public let serverName: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue
        /// Settings in JSON format for the target Amazon DynamoDB endpoint. For more information about the available settings, see Using Object Mapping to Migrate Data to DynamoDB in the AWS Database Migration Service User Guide. 
        public let dynamoDbSettings: DynamoDbSettings?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String
        /// Additional attributes associated with the connection.
        public let extraConnectionAttributes: String?
        /// The user name to be used to log in to the endpoint database.
        public let username: String?
        /// The settings in JSON format for the DMS transfer type of source endpoint.  Possible attributes include the following:    serviceAccessRoleArn - The IAM role that has permission to access the Amazon S3 bucket.    bucketName - The name of the S3 bucket to use.    compressionType - An optional parameter to use GZIP to compress the target files. To use GZIP, set this value to NONE (the default). To keep the files uncompressed, don't use this value.    Shorthand syntax for these attributes is as follows: ServiceAccessRoleArn=string,BucketName=string,CompressionType=string  JSON syntax for these attributes is as follows: { "ServiceAccessRoleArn": "string", "BucketName": "string", "CompressionType": "none"|"gzip" }  
        public let dmsTransferSettings: DmsTransferSettings?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// Settings in JSON format for the target Amazon S3 endpoint. For more information about the available settings, see Extra Connection Attributes When Using Amazon S3 as a Target for AWS DMS in the AWS Database Migration Service User Guide. 
        public let s3Settings: S3Settings?
        /// Settings in JSON format for the source MongoDB endpoint. For more information about the available settings, see the configuration properties section in  Using MongoDB as a Target for AWS Database Migration Service in the AWS Database Migration Service User Guide. 
        public let mongoDbSettings: MongoDbSettings?
        /// Settings in JSON format for the target Amazon Kinesis Data Streams endpoint. For more information about the available settings, see Using Object Mapping to Migrate Data to a Kinesis Data Stream in the AWS Database Migration User Guide. 
        public let kinesisSettings: KinesisSettings?
        /// The password to be used to log in to the endpoint database.
        public let password: String?
        /// The external table definition. 
        public let externalTableDefinition: String?
        /// The type of engine for the endpoint. Valid values, depending on the EndPointType value, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String
        /// The port used by the endpoint database.
        public let port: Int32?
        /// The Secure Sockets Layer (SSL) mode to use for the SSL connection. The SSL mode can be one of four values: none, require, verify-ca, verify-full. The default value is none.
        public let sslMode: DmsSslModeValue?
        /// Tags to be added to the endpoint.
        public let tags: [Tag]?
        ///  The Amazon Resource Name (ARN) for the service access role that you want to use to create the endpoint. 
        public let serviceAccessRoleArn: String?
        /// The name of the endpoint database.
        public let databaseName: String?

        public init(elasticsearchSettings: ElasticsearchSettings? = nil, kmsKeyId: String? = nil, serverName: String? = nil, endpointType: ReplicationEndpointTypeValue, dynamoDbSettings: DynamoDbSettings? = nil, endpointIdentifier: String, extraConnectionAttributes: String? = nil, username: String? = nil, dmsTransferSettings: DmsTransferSettings? = nil, certificateArn: String? = nil, s3Settings: S3Settings? = nil, mongoDbSettings: MongoDbSettings? = nil, kinesisSettings: KinesisSettings? = nil, password: String? = nil, externalTableDefinition: String? = nil, engineName: String, port: Int32? = nil, sslMode: DmsSslModeValue? = nil, tags: [Tag]? = nil, serviceAccessRoleArn: String? = nil, databaseName: String? = nil) {
            self.elasticsearchSettings = elasticsearchSettings
            self.kmsKeyId = kmsKeyId
            self.serverName = serverName
            self.endpointType = endpointType
            self.dynamoDbSettings = dynamoDbSettings
            self.endpointIdentifier = endpointIdentifier
            self.extraConnectionAttributes = extraConnectionAttributes
            self.username = username
            self.dmsTransferSettings = dmsTransferSettings
            self.certificateArn = certificateArn
            self.s3Settings = s3Settings
            self.mongoDbSettings = mongoDbSettings
            self.kinesisSettings = kinesisSettings
            self.password = password
            self.externalTableDefinition = externalTableDefinition
            self.engineName = engineName
            self.port = port
            self.sslMode = sslMode
            self.tags = tags
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.databaseName = databaseName
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchSettings = "ElasticsearchSettings"
            case kmsKeyId = "KmsKeyId"
            case serverName = "ServerName"
            case endpointType = "EndpointType"
            case dynamoDbSettings = "DynamoDbSettings"
            case endpointIdentifier = "EndpointIdentifier"
            case extraConnectionAttributes = "ExtraConnectionAttributes"
            case username = "Username"
            case dmsTransferSettings = "DmsTransferSettings"
            case certificateArn = "CertificateArn"
            case s3Settings = "S3Settings"
            case mongoDbSettings = "MongoDbSettings"
            case kinesisSettings = "KinesisSettings"
            case password = "Password"
            case externalTableDefinition = "ExternalTableDefinition"
            case engineName = "EngineName"
            case port = "Port"
            case sslMode = "SslMode"
            case tags = "Tags"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case databaseName = "DatabaseName"
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .string)
        ]
        /// The status of the VPC security group.
        public let status: String?
        /// The VPC security group Id.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct DescribeEndpointsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoints", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Endpoint description.
        public let endpoints: [Endpoint]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(endpoints: [Endpoint]? = nil, marker: String? = nil) {
            self.endpoints = endpoints
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
            case marker = "Marker"
        }
    }

    public struct StopReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name(ARN) of the replication task to be stopped.
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public enum DmsSslModeValue: String, CustomStringConvertible, Codable {
        case none = "none"
        case require = "require"
        case verifyCa = "verify-ca"
        case verifyFull = "verify-full"
        public var description: String { return self.rawValue }
    }

    public struct DeleteCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted certificate.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public struct DeleteEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The endpoint that was deleted.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
        }
    }

    public struct ReplicationTaskAssessmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssessmentStatus", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "S3ObjectUrl", required: false, type: .string), 
            AWSShapeMember(label: "AssessmentResultsFile", required: false, type: .string), 
            AWSShapeMember(label: "AssessmentResults", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskLastAssessmentDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: false, type: .string)
        ]
        ///  The status of the task assessment. 
        public let assessmentStatus: String?
        /// The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String?
        ///  The URL of the S3 object containing the task assessment results. 
        public let s3ObjectUrl: String?
        ///  The file containing the results of the task assessment. 
        public let assessmentResultsFile: String?
        ///  The task assessment results in JSON format. 
        public let assessmentResults: String?
        /// The date the task assessment was completed. 
        public let replicationTaskLastAssessmentDate: TimeStamp?
        ///  The replication task identifier of the task on which the task assessment was run. 
        public let replicationTaskIdentifier: String?

        public init(assessmentStatus: String? = nil, replicationTaskArn: String? = nil, s3ObjectUrl: String? = nil, assessmentResultsFile: String? = nil, assessmentResults: String? = nil, replicationTaskLastAssessmentDate: TimeStamp? = nil, replicationTaskIdentifier: String? = nil) {
            self.assessmentStatus = assessmentStatus
            self.replicationTaskArn = replicationTaskArn
            self.s3ObjectUrl = s3ObjectUrl
            self.assessmentResultsFile = assessmentResultsFile
            self.assessmentResults = assessmentResults
            self.replicationTaskLastAssessmentDate = replicationTaskLastAssessmentDate
            self.replicationTaskIdentifier = replicationTaskIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentStatus = "AssessmentStatus"
            case replicationTaskArn = "ReplicationTaskArn"
            case s3ObjectUrl = "S3ObjectUrl"
            case assessmentResultsFile = "AssessmentResultsFile"
            case assessmentResults = "AssessmentResults"
            case replicationTaskLastAssessmentDate = "ReplicationTaskLastAssessmentDate"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
        }
    }

    public struct DescribeTableStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableStatistics", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The table statistics.
        public let tableStatistics: [TableStatistics]?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(tableStatistics: [TableStatistics]? = nil, replicationTaskArn: String? = nil, marker: String? = nil) {
            self.tableStatistics = tableStatistics
            self.replicationTaskArn = replicationTaskArn
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case tableStatistics = "TableStatistics"
            case replicationTaskArn = "ReplicationTaskArn"
            case marker = "Marker"
        }
    }

    public struct ImportCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificatePem", required: false, type: .string), 
            AWSShapeMember(label: "CertificateWallet", required: false, type: .blob), 
            AWSShapeMember(label: "CertificateIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The contents of the .pem X.509 certificate file for the certificate.
        public let certificatePem: String?
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        public let certificateWallet: Data?
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        public let certificateIdentifier: String
        /// The tags associated with the certificate.
        public let tags: [Tag]?

        public init(certificatePem: String? = nil, certificateWallet: Data? = nil, certificateIdentifier: String, tags: [Tag]? = nil) {
            self.certificatePem = certificatePem
            self.certificateWallet = certificateWallet
            self.certificateIdentifier = certificateIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case certificatePem = "CertificatePem"
            case certificateWallet = "CertificateWallet"
            case certificateIdentifier = "CertificateIdentifier"
            case tags = "Tags"
        }
    }

    public struct DescribeReplicationTasksMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// Filters applied to the describe action. Valid filter names: replication-task-arn | replication-task-id | migration-type | endpoint-arn | replication-instance-arn
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct ModifyReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CdcStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TableMappings", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskSettings", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MigrationType", required: false, type: .enum), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string)
        ]
        /// Indicates the start time for a change data capture (CDC) operation. Use either CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start. Specifying both values results in an error. Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”
        public let cdcStartTime: TimeStamp?
        /// When using the AWS CLI or boto3, provide the path of the JSON file that contains the table mappings. Precede the path with "file://". When working with the DMS API, provide the JSON as the parameter value. For example, --table-mappings file://mappingfile.json
        public let tableMappings: String?
        /// JSON file that contains settings for the task, such as target metadata settings.
        public let replicationTaskSettings: String?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?
        /// The replication task identifier. Constraints:   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String?
        /// The migration type. Valid values: full-load | cdc | full-load-and-cdc
        public let migrationType: MigrationTypeValue?
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?

        public init(cdcStartTime: TimeStamp? = nil, tableMappings: String? = nil, replicationTaskSettings: String? = nil, replicationTaskArn: String, cdcStopPosition: String? = nil, replicationTaskIdentifier: String? = nil, migrationType: MigrationTypeValue? = nil, cdcStartPosition: String? = nil) {
            self.cdcStartTime = cdcStartTime
            self.tableMappings = tableMappings
            self.replicationTaskSettings = replicationTaskSettings
            self.replicationTaskArn = replicationTaskArn
            self.cdcStopPosition = cdcStopPosition
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.cdcStartPosition = cdcStartPosition
        }

        private enum CodingKeys: String, CodingKey {
            case cdcStartTime = "CdcStartTime"
            case tableMappings = "TableMappings"
            case replicationTaskSettings = "ReplicationTaskSettings"
            case replicationTaskArn = "ReplicationTaskArn"
            case cdcStopPosition = "CdcStopPosition"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case migrationType = "MigrationType"
            case cdcStartPosition = "CdcStartPosition"
        }
    }

    public struct DeleteEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct DescribeReplicationInstanceTaskLogsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceTaskLogs", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// An array of replication task log metadata. Each member of the array contains the replication task name, ARN, and task log size (in bytes). 
        public let replicationInstanceTaskLogs: [ReplicationInstanceTaskLog]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(replicationInstanceArn: String? = nil, replicationInstanceTaskLogs: [ReplicationInstanceTaskLog]? = nil, marker: String? = nil) {
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationInstanceTaskLogs = replicationInstanceTaskLogs
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case replicationInstanceTaskLogs = "ReplicationInstanceTaskLogs"
            case marker = "Marker"
        }
    }

}