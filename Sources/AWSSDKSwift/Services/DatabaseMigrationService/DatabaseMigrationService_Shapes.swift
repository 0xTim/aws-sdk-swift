// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DatabaseMigrationService {

    public struct TableToReload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string)
        ]
        /// The table name of the table to be reloaded.
        public let tableName: String?
        /// The schema name of the table to be reloaded.
        public let schemaName: String?

        public init(tableName: String? = nil, schemaName: String? = nil) {
            self.tableName = tableName
            self.schemaName = schemaName
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case schemaName = "SchemaName"
        }
    }

    public struct DeleteEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct ModifyReplicationSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationSubnetGroupDescription", required: false, type: .string)
        ]
        /// A list of subnet IDs.
        public let subnetIds: [String]
        /// The name of the replication instance subnet group.
        public let replicationSubnetGroupIdentifier: String
        /// The description of the replication instance subnet group.
        public let replicationSubnetGroupDescription: String?

        public init(subnetIds: [String], replicationSubnetGroupIdentifier: String, replicationSubnetGroupDescription: String? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case replicationSubnetGroupDescription = "ReplicationSubnetGroupDescription"
        }
    }

    public struct DescribeRefreshSchemasStatusMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct DescribeReplicationInstanceTaskLogsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(replicationInstanceArn: String, maxRecords: Int32? = nil, marker: String? = nil) {
            self.replicationInstanceArn = replicationInstanceArn
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DescribeReplicationInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Filters applied to the describe action. Valid filter names: replication-instance-arn | replication-instance-id | replication-instance-class | engine-version
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DescribeReplicationSubnetGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Filters applied to the describe action.
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public enum MigrationTypeValue: String, CustomStringConvertible, Codable {
        case fullLoad = "full-load"
        case cdc = "cdc"
        case fullLoadAndCdc = "full-load-and-cdc"
        public var description: String { return self.rawValue }
    }

    public struct ModifyReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task that was modified.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct DescribeSchemasMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(endpointArn: String, maxRecords: Int32? = nil, marker: String? = nil) {
            self.endpointArn = endpointArn
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public enum AuthMechanismValue: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case mongodbCr = "mongodb_cr"
        case scramSha1 = "scram_sha_1"
        public var description: String { return self.rawValue }
    }

    public struct StartReplicationTaskAssessmentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        ///  The assessed replication task. 
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct DeleteReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The replication instance that was deleted.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public enum StartReplicationTaskTypeValue: String, CustomStringConvertible, Codable {
        case startReplication = "start-replication"
        case resumeProcessing = "resume-processing"
        case reloadTarget = "reload-target"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCertificatesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Filters applied to the certificate described in the form of key-value pairs.
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 10
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]
        /// A list of tags for the resource.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct DescribeCertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Secure Sockets Layer (SSL) certificates associated with the replication instance.
        public let certificates: [Certificate]?
        /// The pagination token.
        public let marker: String?

        public init(certificates: [Certificate]? = nil, marker: String? = nil) {
            self.certificates = certificates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case marker = "Marker"
        }
    }

    public struct AddTagsToResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be added to. AWS DMS resources include a replication instance, endpoint, and a replication task.
        public let resourceArn: String
        /// The tag to be assigned to the DMS resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct StopReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task stopped.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case replicationInstance = "replication-instance"
        public var description: String { return self.rawValue }
    }

    public struct DeleteEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The endpoint that was deleted.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
        }
    }

    public struct CreateReplicationSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroupDescription", required: true, type: .string)
        ]
        /// The name for the replication subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default". Example: mySubnetgroup 
        public let replicationSubnetGroupIdentifier: String
        /// The tag to be assigned to the subnet group.
        public let tags: [Tag]?
        /// The EC2 subnet IDs for the subnet group.
        public let subnetIds: [String]
        /// The description for the subnet group.
        public let replicationSubnetGroupDescription: String

        public init(replicationSubnetGroupIdentifier: String, tags: [Tag]? = nil, subnetIds: [String], replicationSubnetGroupDescription: String) {
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.tags = tags
            self.subnetIds = subnetIds
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case tags = "Tags"
            case subnetIds = "SubnetIds"
            case replicationSubnetGroupDescription = "ReplicationSubnetGroupDescription"
        }
    }

    public struct ReplicationTaskStats: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FullLoadProgressPercent", required: false, type: .integer), 
            AWSShapeMember(label: "TablesErrored", required: false, type: .integer), 
            AWSShapeMember(label: "TablesQueued", required: false, type: .integer), 
            AWSShapeMember(label: "TablesLoaded", required: false, type: .integer), 
            AWSShapeMember(label: "TablesLoading", required: false, type: .integer), 
            AWSShapeMember(label: "ElapsedTimeMillis", required: false, type: .long)
        ]
        /// The percent complete for the full load migration task.
        public let fullLoadProgressPercent: Int32?
        /// The number of errors that have occurred during this task.
        public let tablesErrored: Int32?
        /// The number of tables queued for this task.
        public let tablesQueued: Int32?
        /// The number of tables loaded for this task.
        public let tablesLoaded: Int32?
        /// The number of tables currently loading for this task.
        public let tablesLoading: Int32?
        /// The elapsed time of the task, in milliseconds.
        public let elapsedTimeMillis: Int64?

        public init(fullLoadProgressPercent: Int32? = nil, tablesErrored: Int32? = nil, tablesQueued: Int32? = nil, tablesLoaded: Int32? = nil, tablesLoading: Int32? = nil, elapsedTimeMillis: Int64? = nil) {
            self.fullLoadProgressPercent = fullLoadProgressPercent
            self.tablesErrored = tablesErrored
            self.tablesQueued = tablesQueued
            self.tablesLoaded = tablesLoaded
            self.tablesLoading = tablesLoading
            self.elapsedTimeMillis = elapsedTimeMillis
        }

        private enum CodingKeys: String, CodingKey {
            case fullLoadProgressPercent = "FullLoadProgressPercent"
            case tablesErrored = "TablesErrored"
            case tablesQueued = "TablesQueued"
            case tablesLoaded = "TablesLoaded"
            case tablesLoading = "TablesLoading"
            case elapsedTimeMillis = "ElapsedTimeMillis"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SourceType", required: false, type: .string)
        ]
        /// Filters applied to the action.
        public let filters: [Filter]?
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | migration-task
        public let sourceType: String?

        public init(filters: [Filter]? = nil, sourceType: String? = nil) {
            self.filters = filters
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case sourceType = "SourceType"
        }
    }

    public struct CreateEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: true, type: .string), 
            AWSShapeMember(label: "SourceIds", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        ///  The type of AWS DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to replication-instance. If this value is not specified, all events are returned.  Valid values: replication-instance | migration-task
        public let sourceType: String?
        ///  A list of event categories for a source type that you want to subscribe to. You can see a list of the categories for a given source type by calling the DescribeEventCategories action or in the topic  Working with Events and Notifications in the AWS Database Migration Service User Guide. 
        public let eventCategories: [String]?
        ///  A Boolean value; set to true to activate the subscription, or set to false to create the subscription but not activate it. 
        public let enabled: Bool?
        /// The name of the AWS DMS event notification subscription.  Constraints: The name must be less than 255 characters. 
        public let subscriptionName: String
        ///  The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. 
        public let snsTopicArn: String
        ///  The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens. 
        public let sourceIds: [String]?
        /// A tag to be attached to the event subscription.
        public let tags: [Tag]?

        public init(sourceType: String? = nil, eventCategories: [String]? = nil, enabled: Bool? = nil, subscriptionName: String, snsTopicArn: String, sourceIds: [String]? = nil, tags: [Tag]? = nil) {
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.subscriptionName = subscriptionName
            self.snsTopicArn = snsTopicArn
            self.sourceIds = sourceIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
            case enabled = "Enabled"
            case subscriptionName = "SubscriptionName"
            case snsTopicArn = "SnsTopicArn"
            case sourceIds = "SourceIds"
            case tags = "Tags"
        }
    }

    public struct CreateReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task that was created.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct StartReplicationTaskAssessmentMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public struct DescribeAccountAttributesMessage: AWSShape {

    }

    public struct CreateReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskSettings", required: false, type: .string), 
            AWSShapeMember(label: "MigrationType", required: true, type: .enum), 
            AWSShapeMember(label: "CdcStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string), 
            AWSShapeMember(label: "TableMappings", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TargetEndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "SourceEndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?
        /// Settings for the task, such as target metadata settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks.
        public let replicationTaskSettings: String?
        /// The migration type.
        public let migrationType: MigrationTypeValue
        /// Indicates the start time for a change data capture (CDC) operation. Use either CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start. Specifying both values results in an error. Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”
        public let cdcStartTime: TimeStamp?
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?
        /// When using the AWS CLI or boto3, provide the path of the JSON file that contains the table mappings. Precede the path with "file://". When working with the DMS API, provide the JSON as the parameter value. For example, --table-mappings file://mappingfile.json
        public let tableMappings: String
        /// The replication task identifier. Constraints:   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String
        /// Tags to be added to the replication instance.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let targetEndpointArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let sourceEndpointArn: String

        public init(replicationInstanceArn: String, cdcStartPosition: String? = nil, replicationTaskSettings: String? = nil, migrationType: MigrationTypeValue, cdcStartTime: TimeStamp? = nil, cdcStopPosition: String? = nil, tableMappings: String, replicationTaskIdentifier: String, tags: [Tag]? = nil, targetEndpointArn: String, sourceEndpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.cdcStartPosition = cdcStartPosition
            self.replicationTaskSettings = replicationTaskSettings
            self.migrationType = migrationType
            self.cdcStartTime = cdcStartTime
            self.cdcStopPosition = cdcStopPosition
            self.tableMappings = tableMappings
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.tags = tags
            self.targetEndpointArn = targetEndpointArn
            self.sourceEndpointArn = sourceEndpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case cdcStartPosition = "CdcStartPosition"
            case replicationTaskSettings = "ReplicationTaskSettings"
            case migrationType = "MigrationType"
            case cdcStartTime = "CdcStartTime"
            case cdcStopPosition = "CdcStopPosition"
            case tableMappings = "TableMappings"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case tags = "Tags"
            case targetEndpointArn = "TargetEndpointArn"
            case sourceEndpointArn = "SourceEndpointArn"
        }
    }

    public enum CompressionTypeValue: String, CustomStringConvertible, Codable {
        case none = "none"
        case gzip = "gzip"
        public var description: String { return self.rawValue }
    }

    public struct ModifyReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The modified replication instance.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public enum RefreshSchemasStatusTypeValue: String, CustomStringConvertible, Codable {
        case successful = "successful"
        case failed = "failed"
        case refreshing = "refreshing"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The events described.
        public let events: [Event]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(events: [Event]? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct DeleteReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance to be deleted.
        public let replicationInstanceArn: String

        public init(replicationInstanceArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
        }
    }

    public struct DeleteReplicationSubnetGroupResponse: AWSShape {

    }

    public struct DmsTransferSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: false, type: .string)
        ]
        ///  The IAM role that has permission to access the Amazon S3 bucket. 
        public let serviceAccessRoleArn: String?
        ///  The name of the S3 bucket to use. 
        public let bucketName: String?

        public init(serviceAccessRoleArn: String? = nil, bucketName: String? = nil) {
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case bucketName = "BucketName"
        }
    }

    public struct DeleteReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The deleted replication task.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct Endpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExtraConnectionAttributes", required: false, type: .string), 
            AWSShapeMember(label: "EngineDisplayName", required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "EndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DmsTransferSettings", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "SslMode", required: false, type: .enum), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "S3Settings", required: false, type: .structure), 
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "MongoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DynamoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "EngineName", required: false, type: .string)
        ]
        /// Additional connection attributes used to connect to the endpoint.
        public let extraConnectionAttributes: String?
        /// The expanded name for the engine name. For example, if the EngineName parameter is "aurora," this value would be "Amazon Aurora MySQL."
        public let engineDisplayName: String?
        /// The Amazon Resource Name (ARN) used for SSL connection to the endpoint.
        public let certificateArn: String?
        /// The name of the database at the endpoint.
        public let databaseName: String?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The name of the server at the endpoint.
        public let serverName: String?
        /// The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?
        ///  The settings in JSON format for the DMS Transfer type source endpoint.  Attributes include:   serviceAccessRoleArn - The IAM role that has permission to access the Amazon S3 bucket.   bucketName - The name of the S3 bucket to use.   compressionType - An optional parameter to use GZIP to compress the target files. Set to NONE (the default) or do not use to leave the files uncompressed.   Shorthand syntax: ServiceAccessRoleArn=string ,BucketName=string,CompressionType=string JSON syntax:  { "ServiceAccessRoleArn": "string", "BucketName": "string", "CompressionType": "none"|"gzip" } 
        public let dmsTransferSettings: DmsTransferSettings?
        /// The Amazon Resource Name (ARN) used by the service access IAM role.
        public let serviceAccessRoleArn: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// The SSL mode used to connect to the endpoint. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The external table definition.
        public let externalTableDefinition: String?
        /// The settings for the S3 target endpoint. For more information, see the S3Settings structure.
        public let s3Settings: S3Settings?
        ///  Value returned by a call to CreateEndpoint that can be used for cross-account validation. Use it on a subsequent call to CreateEndpoint to create the endpoint with a cross-account. 
        public let externalId: String?
        /// The settings for the MongoDB source endpoint. For more information, see the MongoDbSettings structure.
        public let mongoDbSettings: MongoDbSettings?
        /// The status of the endpoint.
        public let status: String?
        /// The settings for the target DynamoDB database. For more information, see the DynamoDBSettings structure.
        public let dynamoDbSettings: DynamoDbSettings?
        /// The user name used to connect to the endpoint.
        public let username: String?
        /// The port value used to access the endpoint.
        public let port: Int32?
        /// The database engine name. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String?

        public init(extraConnectionAttributes: String? = nil, engineDisplayName: String? = nil, certificateArn: String? = nil, databaseName: String? = nil, endpointIdentifier: String? = nil, serverName: String? = nil, kmsKeyId: String? = nil, dmsTransferSettings: DmsTransferSettings? = nil, serviceAccessRoleArn: String? = nil, endpointArn: String? = nil, endpointType: ReplicationEndpointTypeValue? = nil, sslMode: DmsSslModeValue? = nil, externalTableDefinition: String? = nil, s3Settings: S3Settings? = nil, externalId: String? = nil, mongoDbSettings: MongoDbSettings? = nil, status: String? = nil, dynamoDbSettings: DynamoDbSettings? = nil, username: String? = nil, port: Int32? = nil, engineName: String? = nil) {
            self.extraConnectionAttributes = extraConnectionAttributes
            self.engineDisplayName = engineDisplayName
            self.certificateArn = certificateArn
            self.databaseName = databaseName
            self.endpointIdentifier = endpointIdentifier
            self.serverName = serverName
            self.kmsKeyId = kmsKeyId
            self.dmsTransferSettings = dmsTransferSettings
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.endpointArn = endpointArn
            self.endpointType = endpointType
            self.sslMode = sslMode
            self.externalTableDefinition = externalTableDefinition
            self.s3Settings = s3Settings
            self.externalId = externalId
            self.mongoDbSettings = mongoDbSettings
            self.status = status
            self.dynamoDbSettings = dynamoDbSettings
            self.username = username
            self.port = port
            self.engineName = engineName
        }

        private enum CodingKeys: String, CodingKey {
            case extraConnectionAttributes = "ExtraConnectionAttributes"
            case engineDisplayName = "EngineDisplayName"
            case certificateArn = "CertificateArn"
            case databaseName = "DatabaseName"
            case endpointIdentifier = "EndpointIdentifier"
            case serverName = "ServerName"
            case kmsKeyId = "KmsKeyId"
            case dmsTransferSettings = "DmsTransferSettings"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case endpointArn = "EndpointArn"
            case endpointType = "EndpointType"
            case sslMode = "SslMode"
            case externalTableDefinition = "ExternalTableDefinition"
            case s3Settings = "S3Settings"
            case externalId = "ExternalId"
            case mongoDbSettings = "MongoDbSettings"
            case status = "Status"
            case dynamoDbSettings = "DynamoDbSettings"
            case username = "Username"
            case port = "Port"
            case engineName = "EngineName"
        }
    }

    public struct ModifyEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExtraConnectionAttributes", required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "EndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "DmsTransferSettings", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "EndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "SslMode", required: false, type: .enum), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "S3Settings", required: false, type: .structure), 
            AWSShapeMember(label: "MongoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "DynamoDbSettings", required: false, type: .structure)
        ]
        /// Additional attributes associated with the connection. To reset this parameter, pass the empty string ("") as an argument.
        public let extraConnectionAttributes: String?
        /// The Amazon Resource Name (ARN) of the certificate used for SSL connection.
        public let certificateArn: String?
        /// The name of the endpoint database.
        public let databaseName: String?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The name of the server where the endpoint database resides.
        public let serverName: String?
        ///  The settings in JSON format for the DMS Transfer type source endpoint.  Attributes include:   serviceAccessRoleArn - The IAM role that has permission to access the Amazon S3 bucket.   BucketName - The name of the S3 bucket to use.   compressionType - An optional parameter to use GZIP to compress the target files. Set to NONE (the default) or do not use to leave the files uncompressed.   Shorthand syntax: ServiceAccessRoleArn=string ,BucketName=string,CompressionType=string JSON syntax:  { "ServiceAccessRoleArn": "string", "BucketName": "string", "CompressionType": "none"|"gzip" } 
        public let dmsTransferSettings: DmsTransferSettings?
        ///  The Amazon Resource Name (ARN) for the service access role you want to use to modify the endpoint. 
        public let serviceAccessRoleArn: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// The SSL mode to be used. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The external table definition.
        public let externalTableDefinition: String?
        /// The password to be used to login to the endpoint database.
        public let password: String?
        /// Settings in JSON format for the target S3 endpoint. For more information about the available settings, see the Extra Connection Attributes section at  Using Amazon S3 as a Target for AWS Database Migration Service. 
        public let s3Settings: S3Settings?
        /// Settings in JSON format for the source MongoDB endpoint. For more information about the available settings, see the Configuration Properties When Using MongoDB as a Source for AWS Database Migration Service section at  Using Amazon S3 as a Target for AWS Database Migration Service. 
        public let mongoDbSettings: MongoDbSettings?
        /// The port used by the endpoint database.
        public let port: Int32?
        /// The type of engine for the endpoint. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String?
        /// The user name to be used to login to the endpoint database.
        public let username: String?
        /// Settings in JSON format for the target Amazon DynamoDB endpoint. For more information about the available settings, see the Using Object Mapping to Migrate Data to DynamoDB section at  Using an Amazon DynamoDB Database as a Target for AWS Database Migration Service. 
        public let dynamoDbSettings: DynamoDbSettings?

        public init(extraConnectionAttributes: String? = nil, certificateArn: String? = nil, databaseName: String? = nil, endpointIdentifier: String? = nil, serverName: String? = nil, dmsTransferSettings: DmsTransferSettings? = nil, serviceAccessRoleArn: String? = nil, endpointArn: String, endpointType: ReplicationEndpointTypeValue? = nil, sslMode: DmsSslModeValue? = nil, externalTableDefinition: String? = nil, password: String? = nil, s3Settings: S3Settings? = nil, mongoDbSettings: MongoDbSettings? = nil, port: Int32? = nil, engineName: String? = nil, username: String? = nil, dynamoDbSettings: DynamoDbSettings? = nil) {
            self.extraConnectionAttributes = extraConnectionAttributes
            self.certificateArn = certificateArn
            self.databaseName = databaseName
            self.endpointIdentifier = endpointIdentifier
            self.serverName = serverName
            self.dmsTransferSettings = dmsTransferSettings
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.endpointArn = endpointArn
            self.endpointType = endpointType
            self.sslMode = sslMode
            self.externalTableDefinition = externalTableDefinition
            self.password = password
            self.s3Settings = s3Settings
            self.mongoDbSettings = mongoDbSettings
            self.port = port
            self.engineName = engineName
            self.username = username
            self.dynamoDbSettings = dynamoDbSettings
        }

        private enum CodingKeys: String, CodingKey {
            case extraConnectionAttributes = "ExtraConnectionAttributes"
            case certificateArn = "CertificateArn"
            case databaseName = "DatabaseName"
            case endpointIdentifier = "EndpointIdentifier"
            case serverName = "ServerName"
            case dmsTransferSettings = "DmsTransferSettings"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case endpointArn = "EndpointArn"
            case endpointType = "EndpointType"
            case sslMode = "SslMode"
            case externalTableDefinition = "ExternalTableDefinition"
            case password = "Password"
            case s3Settings = "S3Settings"
            case mongoDbSettings = "MongoDbSettings"
            case port = "Port"
            case engineName = "EngineName"
            case username = "Username"
            case dynamoDbSettings = "DynamoDbSettings"
        }
    }

    public struct S3Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CsvDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "CompressionType", required: false, type: .enum), 
            AWSShapeMember(label: "CsvRowDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: false, type: .string), 
            AWSShapeMember(label: "BucketFolder", required: false, type: .string)
        ]
        ///  The delimiter used to separate columns in the source files. The default is a comma. 
        public let csvDelimiter: String?
        ///  The external table definition. 
        public let externalTableDefinition: String?
        ///  An optional parameter to use GZIP to compress the target files. Set to GZIP to compress the target files. Set to NONE (the default) or do not use to leave the files uncompressed. 
        public let compressionType: CompressionTypeValue?
        ///  The delimiter used to separate rows in the source files. The default is a carriage return (\n). 
        public let csvRowDelimiter: String?
        ///  The Amazon Resource Name (ARN) used by the service access IAM role. 
        public let serviceAccessRoleArn: String?
        ///  The name of the S3 bucket. 
        public let bucketName: String?
        ///  An optional parameter to set a folder name in the S3 bucket. If provided, tables are created in the path &lt;bucketFolder&gt;/&lt;schema_name&gt;/&lt;table_name&gt;/. If this parameter is not specified, then the path used is &lt;schema_name&gt;/&lt;table_name&gt;/. 
        public let bucketFolder: String?

        public init(csvDelimiter: String? = nil, externalTableDefinition: String? = nil, compressionType: CompressionTypeValue? = nil, csvRowDelimiter: String? = nil, serviceAccessRoleArn: String? = nil, bucketName: String? = nil, bucketFolder: String? = nil) {
            self.csvDelimiter = csvDelimiter
            self.externalTableDefinition = externalTableDefinition
            self.compressionType = compressionType
            self.csvRowDelimiter = csvRowDelimiter
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.bucketName = bucketName
            self.bucketFolder = bucketFolder
        }

        private enum CodingKeys: String, CodingKey {
            case csvDelimiter = "CsvDelimiter"
            case externalTableDefinition = "ExternalTableDefinition"
            case compressionType = "CompressionType"
            case csvRowDelimiter = "CsvRowDelimiter"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case bucketName = "BucketName"
            case bucketFolder = "BucketFolder"
        }
    }

    public struct RefreshSchemasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RefreshSchemasStatus", required: false, type: .structure)
        ]
        /// The status of the refreshed schema.
        public let refreshSchemasStatus: RefreshSchemasStatus?

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

        private enum CodingKeys: String, CodingKey {
            case refreshSchemasStatus = "RefreshSchemasStatus"
        }
    }

    public struct TestConnectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connection", required: false, type: .structure)
        ]
        /// The connection tested.
        public let connection: Connection?

        public init(connection: Connection? = nil) {
            self.connection = connection
        }

        private enum CodingKeys: String, CodingKey {
            case connection = "Connection"
        }
    }

    public struct CreateEventSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        /// The event subscription that was created.
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DescribeEventSubscriptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "EventSubscriptionsList", required: false, type: .list)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A list of event subscriptions.
        public let eventSubscriptionsList: [EventSubscription]?

        public init(marker: String? = nil, eventSubscriptionsList: [EventSubscription]? = nil) {
            self.marker = marker
            self.eventSubscriptionsList = eventSubscriptionsList
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case eventSubscriptionsList = "EventSubscriptionsList"
        }
    }

    public struct DescribeSchemasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schemas", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The described schema.
        public let schemas: [String]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(schemas: [String]? = nil, marker: String? = nil) {
            self.schemas = schemas
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case schemas = "Schemas"
            case marker = "Marker"
        }
    }

    public struct DescribeTableStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "TableStatistics", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        /// The table statistics.
        public let tableStatistics: [TableStatistics]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(replicationTaskArn: String? = nil, tableStatistics: [TableStatistics]? = nil, marker: String? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.tableStatistics = tableStatistics
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case tableStatistics = "TableStatistics"
            case marker = "Marker"
        }
    }

    public struct CreateReplicationSubnetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroup", required: false, type: .structure)
        ]
        /// The replication subnet group that was created.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroup = "ReplicationSubnetGroup"
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// Filters applied to the action.
        public let filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the AWS DMS event subscription to be described.
        public let subscriptionName: String?

        public init(maxRecords: Int32? = nil, filters: [Filter]? = nil, marker: String? = nil, subscriptionName: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct CreateReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The replication instance that was created.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public struct ReplicationSubnetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "SubnetGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroupDescription", required: false, type: .string)
        ]
        /// The identifier of the replication instance subnet group.
        public let replicationSubnetGroupIdentifier: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The status of the subnet group.
        public let subnetGroupStatus: String?
        /// The subnets that are in the subnet group.
        public let subnets: [Subnet]?
        /// The description of the replication subnet group.
        public let replicationSubnetGroupDescription: String?

        public init(replicationSubnetGroupIdentifier: String? = nil, vpcId: String? = nil, subnetGroupStatus: String? = nil, subnets: [Subnet]? = nil, replicationSubnetGroupDescription: String? = nil) {
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.vpcId = vpcId
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case vpcId = "VpcId"
            case subnetGroupStatus = "SubnetGroupStatus"
            case subnets = "Subnets"
            case replicationSubnetGroupDescription = "ReplicationSubnetGroupDescription"
        }
    }

    public struct ReloadTablesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String?

        public init(replicationTaskArn: String? = nil) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String?
        ///  The type of AWS DMS resource that generates the events you want to subscribe to.  Valid values: replication-instance | migration-task
        public let sourceType: String?
        ///  A list of event categories for a source type that you want to subscribe to. Use the DescribeEventCategories action to see a list of event categories. 
        public let eventCategories: [String]?
        ///  A Boolean value; set to true to activate the subscription. 
        public let enabled: Bool?
        /// The name of the AWS DMS event notification subscription to be modified.
        public let subscriptionName: String

        public init(snsTopicArn: String? = nil, sourceType: String? = nil, eventCategories: [String]? = nil, enabled: Bool? = nil, subscriptionName: String) {
            self.snsTopicArn = snsTopicArn
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicArn = "SnsTopicArn"
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
            case enabled = "Enabled"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct StopReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name(ARN) of the replication task to be stopped.
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public struct RemoveTagsFromResourceResponse: AWSShape {

    }

    public struct ModifyReplicationSubnetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroup", required: false, type: .structure)
        ]
        /// The modified replication subnet group.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroup = "ReplicationSubnetGroup"
        }
    }

    public struct DescribeRefreshSchemasStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RefreshSchemasStatus", required: false, type: .structure)
        ]
        /// The status of the schema.
        public let refreshSchemasStatus: RefreshSchemasStatus?

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

        private enum CodingKeys: String, CodingKey {
            case refreshSchemasStatus = "RefreshSchemasStatus"
        }
    }

    public struct ReloadTablesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "ReloadOption", required: false, type: .enum), 
            AWSShapeMember(label: "TablesToReload", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String
        /// Options for reload. Specify data-reload to reload the data and re-validate it if validation is enabled. Specify validate-only to re-validate the table. This option applies only when validation is enabled for the task.  Valid values: data-reload, validate-only Default value is data-reload.
        public let reloadOption: ReloadOptionValue?
        /// The name and schema of the table to be reloaded. 
        public let tablesToReload: [TableToReload]

        public init(replicationTaskArn: String, reloadOption: ReloadOptionValue? = nil, tablesToReload: [TableToReload]) {
            self.replicationTaskArn = replicationTaskArn
            self.reloadOption = reloadOption
            self.tablesToReload = tablesToReload
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case reloadOption = "ReloadOption"
            case tablesToReload = "TablesToReload"
        }
    }

    public struct RebootReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "ForceFailover", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// If this parameter is true, the reboot is conducted through a Multi-AZ failover. (If the instance isn't configured for Multi-AZ, then you can't specify true.)
        public let forceFailover: Bool?

        public init(replicationInstanceArn: String, forceFailover: Bool? = nil) {
            self.replicationInstanceArn = replicationInstanceArn
            self.forceFailover = forceFailover
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case forceFailover = "ForceFailover"
        }
    }

    public struct ModifyEventSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        /// The modified event subscription.
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct RefreshSchemasStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastRefreshDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string)
        ]
        /// The date the schema was last refreshed.
        public let lastRefreshDate: TimeStamp?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?
        /// The status of the schema.
        public let status: RefreshSchemasStatusTypeValue?
        /// The last failure message for the schema.
        public let lastFailureMessage: String?

        public init(lastRefreshDate: TimeStamp? = nil, replicationInstanceArn: String? = nil, endpointArn: String? = nil, status: RefreshSchemasStatusTypeValue? = nil, lastFailureMessage: String? = nil) {
            self.lastRefreshDate = lastRefreshDate
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
            self.status = status
            self.lastFailureMessage = lastFailureMessage
        }

        private enum CodingKeys: String, CodingKey {
            case lastRefreshDate = "LastRefreshDate"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
            case status = "Status"
            case lastFailureMessage = "LastFailureMessage"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the availability zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct TableStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidationSuspendedRecords", required: false, type: .long), 
            AWSShapeMember(label: "ValidationPendingRecords", required: false, type: .long), 
            AWSShapeMember(label: "Inserts", required: false, type: .long), 
            AWSShapeMember(label: "ValidationState", required: false, type: .string), 
            AWSShapeMember(label: "Updates", required: false, type: .long), 
            AWSShapeMember(label: "ValidationFailedRecords", required: false, type: .long), 
            AWSShapeMember(label: "FullLoadRows", required: false, type: .long), 
            AWSShapeMember(label: "FullLoadCondtnlChkFailedRows", required: false, type: .long), 
            AWSShapeMember(label: "ValidationStateDetails", required: false, type: .string), 
            AWSShapeMember(label: "FullLoadErrorRows", required: false, type: .long), 
            AWSShapeMember(label: "TableState", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: false, type: .string), 
            AWSShapeMember(label: "Ddls", required: false, type: .long), 
            AWSShapeMember(label: "LastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Deletes", required: false, type: .long)
        ]
        /// The number of records that could not be validated.
        public let validationSuspendedRecords: Int64?
        /// The number of records that have yet to be validated.
        public let validationPendingRecords: Int64?
        /// The number of insert actions performed on a table.
        public let inserts: Int64?
        /// The validation state of the table. The parameter can have the following values   Not enabled—Validation is not enabled for the table in the migration task.   Pending records—Some records in the table are waiting for validation.   Mismatched records—Some records in the table do not match between the source and target.   Suspended records—Some records in the table could not be validated.   No primary key—The table could not be validated because it had no primary key.   Table error—The table was not validated because it was in an error state and some data was not migrated.   Validated—All rows in the table were validated. If the table is updated, the status can change from Validated.   Error—The table could not be validated because of an unexpected error.  
        public let validationState: String?
        /// The number of update actions performed on a table.
        public let updates: Int64?
        /// The number of records that failed validation.
        public let validationFailedRecords: Int64?
        /// The number of rows added during the Full Load operation.
        public let fullLoadRows: Int64?
        /// The number of rows that failed conditional checks during the Full Load operation (valid only for DynamoDB as a target migrations).
        public let fullLoadCondtnlChkFailedRows: Int64?
        /// Additional details about the state of validation.
        public let validationStateDetails: String?
        /// The number of rows that failed to load during the Full Load operation (valid only for DynamoDB as a target migrations).
        public let fullLoadErrorRows: Int64?
        /// The state of the tables described. Valid states: Table does not exist | Before load | Full load | Table completed | Table cancelled | Table error | Table all | Table updates | Table is being reloaded
        public let tableState: String?
        /// The schema name.
        public let schemaName: String?
        /// The name of the table.
        public let tableName: String?
        /// The Data Definition Language (DDL) used to build and modify the structure of your tables.
        public let ddls: Int64?
        /// The last time the table was updated.
        public let lastUpdateTime: TimeStamp?
        /// The number of delete actions performed on a table.
        public let deletes: Int64?

        public init(validationSuspendedRecords: Int64? = nil, validationPendingRecords: Int64? = nil, inserts: Int64? = nil, validationState: String? = nil, updates: Int64? = nil, validationFailedRecords: Int64? = nil, fullLoadRows: Int64? = nil, fullLoadCondtnlChkFailedRows: Int64? = nil, validationStateDetails: String? = nil, fullLoadErrorRows: Int64? = nil, tableState: String? = nil, schemaName: String? = nil, tableName: String? = nil, ddls: Int64? = nil, lastUpdateTime: TimeStamp? = nil, deletes: Int64? = nil) {
            self.validationSuspendedRecords = validationSuspendedRecords
            self.validationPendingRecords = validationPendingRecords
            self.inserts = inserts
            self.validationState = validationState
            self.updates = updates
            self.validationFailedRecords = validationFailedRecords
            self.fullLoadRows = fullLoadRows
            self.fullLoadCondtnlChkFailedRows = fullLoadCondtnlChkFailedRows
            self.validationStateDetails = validationStateDetails
            self.fullLoadErrorRows = fullLoadErrorRows
            self.tableState = tableState
            self.schemaName = schemaName
            self.tableName = tableName
            self.ddls = ddls
            self.lastUpdateTime = lastUpdateTime
            self.deletes = deletes
        }

        private enum CodingKeys: String, CodingKey {
            case validationSuspendedRecords = "ValidationSuspendedRecords"
            case validationPendingRecords = "ValidationPendingRecords"
            case inserts = "Inserts"
            case validationState = "ValidationState"
            case updates = "Updates"
            case validationFailedRecords = "ValidationFailedRecords"
            case fullLoadRows = "FullLoadRows"
            case fullLoadCondtnlChkFailedRows = "FullLoadCondtnlChkFailedRows"
            case validationStateDetails = "ValidationStateDetails"
            case fullLoadErrorRows = "FullLoadErrorRows"
            case tableState = "TableState"
            case schemaName = "SchemaName"
            case tableName = "TableName"
            case ddls = "Ddls"
            case lastUpdateTime = "LastUpdateTime"
            case deletes = "Deletes"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string)
        ]
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | endpoint | migration-task
        public let sourceType: SourceType?
        /// The event message.
        public let message: String?
        /// The date of the event.
        public let date: TimeStamp?
        /// The event categories available for the specified source type.
        public let eventCategories: [String]?
        ///  The identifier of the event source. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.  Constraints:replication instance, endpoint, migration task
        public let sourceIdentifier: String?

        public init(sourceType: SourceType? = nil, message: String? = nil, date: TimeStamp? = nil, eventCategories: [String]? = nil, sourceIdentifier: String? = nil) {
            self.sourceType = sourceType
            self.message = message
            self.date = date
            self.eventCategories = eventCategories
            self.sourceIdentifier = sourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case message = "Message"
            case date = "Date"
            case eventCategories = "EventCategories"
            case sourceIdentifier = "SourceIdentifier"
        }
    }

    public struct StartReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string), 
            AWSShapeMember(label: "StartReplicationTaskType", required: true, type: .enum), 
            AWSShapeMember(label: "CdcStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task to be started.
        public let replicationTaskArn: String
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?
        /// The type of replication task.
        public let startReplicationTaskType: StartReplicationTaskTypeValue
        /// Indicates the start time for a change data capture (CDC) operation. Use either CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start. Specifying both values results in an error. Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”
        public let cdcStartTime: TimeStamp?
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?

        public init(replicationTaskArn: String, cdcStartPosition: String? = nil, startReplicationTaskType: StartReplicationTaskTypeValue, cdcStartTime: TimeStamp? = nil, cdcStopPosition: String? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.cdcStartPosition = cdcStartPosition
            self.startReplicationTaskType = startReplicationTaskType
            self.cdcStartTime = cdcStartTime
            self.cdcStopPosition = cdcStopPosition
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case cdcStartPosition = "CdcStartPosition"
            case startReplicationTaskType = "StartReplicationTaskType"
            case cdcStartTime = "CdcStartTime"
            case cdcStopPosition = "CdcStopPosition"
        }
    }

    public struct DescribeReplicationSubnetGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroups", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A description of the replication subnet groups.
        public let replicationSubnetGroups: [ReplicationSubnetGroup]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(replicationSubnetGroups: [ReplicationSubnetGroup]? = nil, marker: String? = nil) {
            self.replicationSubnetGroups = replicationSubnetGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroups = "ReplicationSubnetGroups"
            case marker = "Marker"
        }
    }

    public enum ReloadOptionValue: String, CustomStringConvertible, Codable {
        case dataReload = "data-reload"
        case validateOnly = "validate-only"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReplicationTaskAssessmentResultsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskAssessmentResults", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "BucketName", required: false, type: .string)
        ]
        ///  The task assessment report. 
        public let replicationTaskAssessmentResults: [ReplicationTaskAssessmentResult]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// - The Amazon S3 bucket where the task assessment report is located. 
        public let bucketName: String?

        public init(replicationTaskAssessmentResults: [ReplicationTaskAssessmentResult]? = nil, marker: String? = nil, bucketName: String? = nil) {
            self.replicationTaskAssessmentResults = replicationTaskAssessmentResults
            self.marker = marker
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskAssessmentResults = "ReplicationTaskAssessmentResults"
            case marker = "Marker"
            case bucketName = "BucketName"
        }
    }

    public struct ReplicationTaskAssessmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskLastAssessmentDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "S3ObjectUrl", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "AssessmentResults", required: false, type: .string), 
            AWSShapeMember(label: "AssessmentResultsFile", required: false, type: .string), 
            AWSShapeMember(label: "AssessmentStatus", required: false, type: .string)
        ]
        /// The date the task assessment was completed. 
        public let replicationTaskLastAssessmentDate: TimeStamp?
        ///  The URL of the S3 object containing the task assessment results. 
        public let s3ObjectUrl: String?
        ///  The replication task identifier of the task on which the task assessment was run. 
        public let replicationTaskIdentifier: String?
        /// The Amazon Resource Name (ARN) of the replication task. 
        public let replicationTaskArn: String?
        ///  The task assessment results in JSON format. 
        public let assessmentResults: String?
        ///  The file containing the results of the task assessment. 
        public let assessmentResultsFile: String?
        ///  The status of the task assessment. 
        public let assessmentStatus: String?

        public init(replicationTaskLastAssessmentDate: TimeStamp? = nil, s3ObjectUrl: String? = nil, replicationTaskIdentifier: String? = nil, replicationTaskArn: String? = nil, assessmentResults: String? = nil, assessmentResultsFile: String? = nil, assessmentStatus: String? = nil) {
            self.replicationTaskLastAssessmentDate = replicationTaskLastAssessmentDate
            self.s3ObjectUrl = s3ObjectUrl
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.replicationTaskArn = replicationTaskArn
            self.assessmentResults = assessmentResults
            self.assessmentResultsFile = assessmentResultsFile
            self.assessmentStatus = assessmentStatus
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskLastAssessmentDate = "ReplicationTaskLastAssessmentDate"
            case s3ObjectUrl = "S3ObjectUrl"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case replicationTaskArn = "ReplicationTaskArn"
            case assessmentResults = "AssessmentResults"
            case assessmentResultsFile = "AssessmentResultsFile"
            case assessmentStatus = "AssessmentStatus"
        }
    }

    public struct TestConnectionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
        }
    }

    public struct DescribeEndpointTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportedEndpointTypes", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The type of endpoints that are supported.
        public let supportedEndpointTypes: [SupportedEndpointType]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(supportedEndpointTypes: [SupportedEndpointType]? = nil, marker: String? = nil) {
            self.supportedEndpointTypes = supportedEndpointTypes
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case supportedEndpointTypes = "SupportedEndpointTypes"
            case marker = "Marker"
        }
    }

    public struct ModifyEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The modified endpoint.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
        }
    }

    public struct DescribeOrderableReplicationInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableReplicationInstances", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The order-able replication instances available.
        public let orderableReplicationInstances: [OrderableReplicationInstance]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(orderableReplicationInstances: [OrderableReplicationInstance]? = nil, marker: String? = nil) {
            self.orderableReplicationInstances = orderableReplicationInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case orderableReplicationInstances = "OrderableReplicationInstances"
            case marker = "Marker"
        }
    }

    public struct DescribeReplicationTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTasks", required: false, type: .list)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A description of the replication tasks.
        public let replicationTasks: [ReplicationTask]?

        public init(marker: String? = nil, replicationTasks: [ReplicationTask]? = nil) {
            self.marker = marker
            self.replicationTasks = replicationTasks
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case replicationTasks = "ReplicationTasks"
        }
    }

    public struct DeleteEventSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        /// The event subscription that was deleted.
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct AddTagsToResourceResponse: AWSShape {

    }

    public struct DeleteReplicationSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: true, type: .string)
        ]
        /// The subnet group name of the replication instance.
        public let replicationSubnetGroupIdentifier: String

        public init(replicationSubnetGroupIdentifier: String) {
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
        }
    }

    public struct ModifyReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskSettings", required: false, type: .string), 
            AWSShapeMember(label: "MigrationType", required: false, type: .enum), 
            AWSShapeMember(label: "CdcStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string), 
            AWSShapeMember(label: "TableMappings", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string)
        ]
        /// JSON file that contains settings for the task, such as target metadata settings.
        public let replicationTaskSettings: String?
        /// The migration type. Valid values: full-load | cdc | full-load-and-cdc
        public let migrationType: MigrationTypeValue?
        /// Indicates the start time for a change data capture (CDC) operation. Use either CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start. Specifying both values results in an error. Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”
        public let cdcStartTime: TimeStamp?
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?
        /// When using the AWS CLI or boto3, provide the path of the JSON file that contains the table mappings. Precede the path with "file://". When working with the DMS API, provide the JSON as the parameter value. For example, --table-mappings file://mappingfile.json
        public let tableMappings: String?
        /// The replication task identifier. Constraints:   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?

        public init(replicationTaskSettings: String? = nil, migrationType: MigrationTypeValue? = nil, cdcStartTime: TimeStamp? = nil, cdcStopPosition: String? = nil, tableMappings: String? = nil, replicationTaskIdentifier: String? = nil, replicationTaskArn: String, cdcStartPosition: String? = nil) {
            self.replicationTaskSettings = replicationTaskSettings
            self.migrationType = migrationType
            self.cdcStartTime = cdcStartTime
            self.cdcStopPosition = cdcStopPosition
            self.tableMappings = tableMappings
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.replicationTaskArn = replicationTaskArn
            self.cdcStartPosition = cdcStartPosition
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskSettings = "ReplicationTaskSettings"
            case migrationType = "MigrationType"
            case cdcStartTime = "CdcStartTime"
            case cdcStopPosition = "CdcStopPosition"
            case tableMappings = "TableMappings"
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case replicationTaskArn = "ReplicationTaskArn"
            case cdcStartPosition = "CdcStartPosition"
        }
    }

    public struct DescribeEventCategoriesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoryGroupList", required: false, type: .list)
        ]
        /// A list of event categories.
        public let eventCategoryGroupList: [EventCategoryGroup]?

        public init(eventCategoryGroupList: [EventCategoryGroup]? = nil) {
            self.eventCategoryGroupList = eventCategoryGroupList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoryGroupList = "EventCategoryGroupList"
        }
    }

    public struct DescribeReplicationTasksMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Filters applied to the describe action. Valid filter names: replication-task-arn | replication-task-id | migration-type | endpoint-arn | replication-instance-arn
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct ImportCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "CertificateWallet", required: false, type: .blob), 
            AWSShapeMember(label: "CertificatePem", required: false, type: .string)
        ]
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        public let certificateIdentifier: String
        /// The tags associated with the certificate.
        public let tags: [Tag]?
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        public let certificateWallet: Data?
        /// The contents of the .pem X.509 certificate file for the certificate.
        public let certificatePem: String?

        public init(certificateIdentifier: String, tags: [Tag]? = nil, certificateWallet: Data? = nil, certificatePem: String? = nil) {
            self.certificateIdentifier = certificateIdentifier
            self.tags = tags
            self.certificateWallet = certificateWallet
            self.certificatePem = certificatePem
        }

        private enum CodingKeys: String, CodingKey {
            case certificateIdentifier = "CertificateIdentifier"
            case tags = "Tags"
            case certificateWallet = "CertificateWallet"
            case certificatePem = "CertificatePem"
        }
    }

    public struct DescribeOrderableReplicationInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct DescribeConnectionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The filters applied to the connection. Valid filter names: endpoint-arn | replication-instance-arn
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct RefreshSchemasMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointArn = "EndpointArn"
        }
    }

    public enum DmsSslModeValue: String, CustomStringConvertible, Codable {
        case none = "none"
        case require = "require"
        case verifyCa = "verify-ca"
        case verifyFull = "verify-full"
        public var description: String { return self.rawValue }
    }

    public struct RebootReplicationInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstance", required: false, type: .structure)
        ]
        /// The replication instance that is being rebooted. 
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstance = "ReplicationInstance"
        }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetStatus", required: false, type: .string)
        ]
        /// The subnet identifier.
        public let subnetIdentifier: String?
        /// The Availability Zone of the subnet.
        public let subnetAvailabilityZone: AvailabilityZone?
        /// The status of the subnet.
        public let subnetStatus: String?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetStatus = "SubnetStatus"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The filter value.
        public let values: [String]
        /// The name of the filter.
        public let name: String

        public init(values: [String], name: String) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    public enum AuthTypeValue: String, CustomStringConvertible, Codable {
        case no = "no"
        case password = "password"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAccountAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuotas", required: false, type: .list)
        ]
        /// Account quota information.
        public let accountQuotas: [AccountQuota]?

        public init(accountQuotas: [AccountQuota]? = nil) {
            self.accountQuotas = accountQuotas
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotas = "AccountQuotas"
        }
    }

    public struct DescribeTableStatisticsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String
        /// Filters applied to the describe table statistics action. Valid filter names: schema-name | table-name | table-state A combination of filters creates an AND condition where each record matches all specified filters.
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 500.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(replicationTaskArn: String, filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public enum NestingLevelValue: String, CustomStringConvertible, Codable {
        case none = "none"
        case one = "one"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReplicationInstanceTaskLogsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceTaskLogs", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// An array of replication task log metadata. Each member of the array contains the replication task name, ARN, and task log size (in bytes). 
        public let replicationInstanceTaskLogs: [ReplicationInstanceTaskLog]?

        public init(replicationInstanceArn: String? = nil, marker: String? = nil, replicationInstanceTaskLogs: [ReplicationInstanceTaskLog]? = nil) {
            self.replicationInstanceArn = replicationInstanceArn
            self.marker = marker
            self.replicationInstanceTaskLogs = replicationInstanceTaskLogs
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceArn = "ReplicationInstanceArn"
            case marker = "Marker"
            case replicationInstanceTaskLogs = "ReplicationInstanceTaskLogs"
        }
    }

    public struct SupportedEndpointType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDisplayName", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "SupportsCDC", required: false, type: .boolean)
        ]
        /// The expanded name for the engine name. For example, if the EngineName parameter is "aurora," this value would be "Amazon Aurora MySQL."
        public let engineDisplayName: String?
        /// The database engine name. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// Indicates if Change Data Capture (CDC) is supported.
        public let supportsCDC: Bool?

        public init(engineDisplayName: String? = nil, engineName: String? = nil, endpointType: ReplicationEndpointTypeValue? = nil, supportsCDC: Bool? = nil) {
            self.engineDisplayName = engineDisplayName
            self.engineName = engineName
            self.endpointType = endpointType
            self.supportsCDC = supportsCDC
        }

        private enum CodingKeys: String, CodingKey {
            case engineDisplayName = "EngineDisplayName"
            case engineName = "EngineName"
            case endpointType = "EndpointType"
            case supportsCDC = "SupportsCDC"
        }
    }

    public struct ReplicationPendingModifiedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string)
        ]
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let allocatedStorage: Int32?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?

        public init(allocatedStorage: Int32? = nil, multiAZ: Bool? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil) {
            self.allocatedStorage = allocatedStorage
            self.multiAZ = multiAZ
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case multiAZ = "MultiAZ"
            case engineVersion = "EngineVersion"
            case replicationInstanceClass = "ReplicationInstanceClass"
        }
    }

    public struct ImportCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .structure)
        ]
        /// The certificate to be uploaded.
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct Connection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string)
        ]
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        public let replicationInstanceIdentifier: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The identifier of the endpoint. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?
        /// The connection status.
        public let status: String?
        /// The error message when the connection last failed.
        public let lastFailureMessage: String?

        public init(replicationInstanceIdentifier: String? = nil, replicationInstanceArn: String? = nil, endpointIdentifier: String? = nil, endpointArn: String? = nil, status: String? = nil, lastFailureMessage: String? = nil) {
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointIdentifier = endpointIdentifier
            self.endpointArn = endpointArn
            self.status = status
            self.lastFailureMessage = lastFailureMessage
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case endpointIdentifier = "EndpointIdentifier"
            case endpointArn = "EndpointArn"
            case status = "Status"
            case lastFailureMessage = "LastFailureMessage"
        }
    }

    public struct DeleteReplicationTaskMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task to be deleted.
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct AccountQuota: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuotaName", required: false, type: .string), 
            AWSShapeMember(label: "Used", required: false, type: .long), 
            AWSShapeMember(label: "Max", required: false, type: .long)
        ]
        /// The name of the AWS DMS quota for this AWS account.
        public let accountQuotaName: String?
        /// The amount currently used toward the quota maximum.
        public let used: Int64?
        /// The maximum allowed value for the quota.
        public let max: Int64?

        public init(accountQuotaName: String? = nil, used: Int64? = nil, max: Int64? = nil) {
            self.accountQuotaName = accountQuotaName
            self.used = used
            self.max = max
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotaName = "AccountQuotaName"
            case used = "Used"
            case max = "Max"
        }
    }

    public struct StartReplicationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTask", required: false, type: .structure)
        ]
        /// The replication task started.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTask = "ReplicationTask"
        }
    }

    public struct OrderableReplicationInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "MinAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "IncludedAllocatedStorage", required: false, type: .integer)
        ]
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        public let maxAllocatedStorage: Int32?
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        public let minAllocatedStorage: Int32?
        /// The type of storage used by the replication instance.
        public let storageType: String?
        /// The default amount of storage (in gigabytes) that is allocated for the replication instance.
        public let defaultAllocatedStorage: Int32?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The version of the replication engine.
        public let engineVersion: String?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let includedAllocatedStorage: Int32?

        public init(maxAllocatedStorage: Int32? = nil, minAllocatedStorage: Int32? = nil, storageType: String? = nil, defaultAllocatedStorage: Int32? = nil, replicationInstanceClass: String? = nil, engineVersion: String? = nil, includedAllocatedStorage: Int32? = nil) {
            self.maxAllocatedStorage = maxAllocatedStorage
            self.minAllocatedStorage = minAllocatedStorage
            self.storageType = storageType
            self.defaultAllocatedStorage = defaultAllocatedStorage
            self.replicationInstanceClass = replicationInstanceClass
            self.engineVersion = engineVersion
            self.includedAllocatedStorage = includedAllocatedStorage
        }

        private enum CodingKeys: String, CodingKey {
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case minAllocatedStorage = "MinAllocatedStorage"
            case storageType = "StorageType"
            case defaultAllocatedStorage = "DefaultAllocatedStorage"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case engineVersion = "EngineVersion"
            case includedAllocatedStorage = "IncludedAllocatedStorage"
        }
    }

    public enum ReplicationEndpointTypeValue: String, CustomStringConvertible, Codable {
        case source = "source"
        case target = "target"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) string that uniquely identifies the AWS DMS resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct CreateEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The endpoint that was created.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
        }
    }

    public struct DescribeReplicationTaskAssessmentResultsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// - The Amazon Resource Name (ARN) string that uniquely identifies the task. When this input parameter is specified the API will return only one result and ignore the values of the max-records and marker parameters. 
        public let replicationTaskArn: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(replicationTaskArn: String? = nil, marker: String? = nil, maxRecords: Int32? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEndpointsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Filters applied to the describe action. Valid filter names: endpoint-arn | endpoint-type | endpoint-id | engine-name
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct CreateReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroupIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: true, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .list)
        ]
        /// The KMS key identifier that will be used to encrypt the content on the replication instance. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// Tags to be associated with the replication instance.
        public let tags: [Tag]?
        /// A subnet group to associate with the replication instance.
        public let replicationSubnetGroupIdentifier: String?
        /// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window. Default: true 
        public let autoMinorVersionUpgrade: Bool?
        /// The EC2 Availability Zone that the replication instance will be created in. Default: A random, system-chosen Availability Zone in the endpoint's region.  Example: us-east-1d 
        public let availabilityZone: String?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).  Format: ddd:hh24:mi-ddd:hh24:mi  Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        public let replicationInstanceIdentifier: String
        /// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
        public let allocatedStorage: Int32?
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        public let publiclyAccessible: Bool?
        /// The compute and memory capacity of the replication instance as specified by the replication instance class.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        public let vpcSecurityGroupIds: [String]?

        public init(kmsKeyId: String? = nil, multiAZ: Bool? = nil, tags: [Tag]? = nil, replicationSubnetGroupIdentifier: String? = nil, autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, engineVersion: String? = nil, preferredMaintenanceWindow: String? = nil, replicationInstanceIdentifier: String, allocatedStorage: Int32? = nil, publiclyAccessible: Bool? = nil, replicationInstanceClass: String, vpcSecurityGroupIds: [String]? = nil) {
            self.kmsKeyId = kmsKeyId
            self.multiAZ = multiAZ
            self.tags = tags
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.engineVersion = engineVersion
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.allocatedStorage = allocatedStorage
            self.publiclyAccessible = publiclyAccessible
            self.replicationInstanceClass = replicationInstanceClass
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case multiAZ = "MultiAZ"
            case tags = "Tags"
            case replicationSubnetGroupIdentifier = "ReplicationSubnetGroupIdentifier"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case engineVersion = "EngineVersion"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case allocatedStorage = "AllocatedStorage"
            case publiclyAccessible = "PubliclyAccessible"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct MongoDbSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DocsToInvestigate", required: false, type: .string), 
            AWSShapeMember(label: "NestingLevel", required: false, type: .enum), 
            AWSShapeMember(label: "AuthSource", required: false, type: .string), 
            AWSShapeMember(label: "AuthType", required: false, type: .enum), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ExtractDocId", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "AuthMechanism", required: false, type: .enum)
        ]
        ///  The name of the server on the MongoDB source endpoint. 
        public let serverName: String?
        /// The user name you use to access the MongoDB source endpoint. 
        public let username: String?
        ///  The database name on the MongoDB source endpoint. 
        public let databaseName: String?
        ///  The port value for the MongoDB source endpoint. 
        public let port: Int32?
        ///  Indicates the number of documents to preview to determine the document organization. Use this attribute when NestingLevel is set to ONE.  Must be a positive value greater than 0. Default value is 1000.
        public let docsToInvestigate: String?
        ///  Specifies either document or table mode.  Valid values: NONE, ONE Default value is NONE. Specify NONE to use document mode. Specify ONE to use table mode.
        public let nestingLevel: NestingLevelValue?
        ///  The MongoDB database name. This attribute is not used when authType=NO.  The default is admin.
        public let authSource: String?
        ///  The authentication type you use to access the MongoDB source endpoint. Valid values: NO, PASSWORD  When NO is selected, user name and password parameters are not used and can be empty. 
        public let authType: AuthTypeValue?
        ///  The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. 
        public let kmsKeyId: String?
        ///  Specifies the document ID. Use this attribute when NestingLevel is set to NONE.  Default value is false. 
        public let extractDocId: String?
        ///  The password for the user account you use to access the MongoDB source endpoint. 
        public let password: String?
        ///  The authentication mechanism you use to access the MongoDB source endpoint. Valid values: DEFAULT, MONGODB_CR, SCRAM_SHA_1  DEFAULT – For MongoDB version 2.x, use MONGODB_CR. For MongoDB version 3.x, use SCRAM_SHA_1. This attribute is not used when authType=No.
        public let authMechanism: AuthMechanismValue?

        public init(serverName: String? = nil, username: String? = nil, databaseName: String? = nil, port: Int32? = nil, docsToInvestigate: String? = nil, nestingLevel: NestingLevelValue? = nil, authSource: String? = nil, authType: AuthTypeValue? = nil, kmsKeyId: String? = nil, extractDocId: String? = nil, password: String? = nil, authMechanism: AuthMechanismValue? = nil) {
            self.serverName = serverName
            self.username = username
            self.databaseName = databaseName
            self.port = port
            self.docsToInvestigate = docsToInvestigate
            self.nestingLevel = nestingLevel
            self.authSource = authSource
            self.authType = authType
            self.kmsKeyId = kmsKeyId
            self.extractDocId = extractDocId
            self.password = password
            self.authMechanism = authMechanism
        }

        private enum CodingKeys: String, CodingKey {
            case serverName = "ServerName"
            case username = "Username"
            case databaseName = "DatabaseName"
            case port = "Port"
            case docsToInvestigate = "DocsToInvestigate"
            case nestingLevel = "NestingLevel"
            case authSource = "AuthSource"
            case authType = "AuthType"
            case kmsKeyId = "KmsKeyId"
            case extractDocId = "ExtractDocId"
            case password = "Password"
            case authMechanism = "AuthMechanism"
        }
    }

    public struct EventCategoryGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "SourceType", required: false, type: .string)
        ]
        ///  A list of event categories for a SourceType that you want to subscribe to. 
        public let eventCategories: [String]?
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | replication-server | security-group | migration-task
        public let sourceType: String?

        public init(eventCategories: [String]? = nil, sourceType: String? = nil) {
            self.eventCategories = eventCategories
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategories = "EventCategories"
            case sourceType = "SourceType"
        }
    }

    public struct DescribeReplicationInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstances", required: false, type: .list)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The replication instances described.
        public let replicationInstances: [ReplicationInstance]?

        public init(marker: String? = nil, replicationInstances: [ReplicationInstance]? = nil) {
            self.marker = marker
            self.replicationInstances = replicationInstances
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case replicationInstances = "ReplicationInstances"
        }
    }

    public struct ModifyReplicationInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "AllowMajorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean)
        ]
        /// The amount of storage (in gigabytes) to be allocated for the replication instance.
        public let allocatedStorage: Int32?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        public let vpcSecurityGroupIds: [String]?
        /// Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the replication instance's current version.
        public let allowMajorVersionUpgrade: Bool?
        ///  Indicates that minor version upgrades will be applied automatically to the replication instance during the maintenance window. Changing this parameter does not result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and AWS DMS has enabled auto patching for that engine version. 
        public let autoMinorVersionUpgrade: Bool?
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        public let replicationInstanceIdentifier: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter does not result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        public let preferredMaintenanceWindow: String?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// Indicates whether the changes should be applied immediately or during the next maintenance window.
        public let applyImmediately: Bool?

        public init(allocatedStorage: Int32? = nil, replicationInstanceArn: String, multiAZ: Bool? = nil, vpcSecurityGroupIds: [String]? = nil, allowMajorVersionUpgrade: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String? = nil, replicationInstanceClass: String? = nil, preferredMaintenanceWindow: String? = nil, engineVersion: String? = nil, applyImmediately: Bool? = nil) {
            self.allocatedStorage = allocatedStorage
            self.replicationInstanceArn = replicationInstanceArn
            self.multiAZ = multiAZ
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.engineVersion = engineVersion
            self.applyImmediately = applyImmediately
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case multiAZ = "MultiAZ"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case engineVersion = "EngineVersion"
            case applyImmediately = "ApplyImmediately"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategoriesList", required: false, type: .list), 
            AWSShapeMember(label: "SourceIdsList", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionCreationTime", required: false, type: .string), 
            AWSShapeMember(label: "CustomerAwsId", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "CustSubscriptionId", required: false, type: .string)
        ]
        ///  The type of AWS DMS resource that generates events.  Valid values: replication-instance | replication-server | security-group | migration-task
        public let sourceType: String?
        /// A lists of event categories.
        public let eventCategoriesList: [String]?
        /// A list of source Ids for the event subscription.
        public let sourceIdsList: [String]?
        /// The status of the AWS DMS event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that AWS DMS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public let status: String?
        /// The time the RDS event notification subscription was created.
        public let subscriptionCreationTime: String?
        /// The AWS customer account associated with the AWS DMS event notification subscription.
        public let customerAwsId: String?
        /// Boolean value that indicates if the event subscription is enabled.
        public let enabled: Bool?
        /// The topic ARN of the AWS DMS event notification subscription.
        public let snsTopicArn: String?
        /// The AWS DMS event notification subscription Id.
        public let custSubscriptionId: String?

        public init(sourceType: String? = nil, eventCategoriesList: [String]? = nil, sourceIdsList: [String]? = nil, status: String? = nil, subscriptionCreationTime: String? = nil, customerAwsId: String? = nil, enabled: Bool? = nil, snsTopicArn: String? = nil, custSubscriptionId: String? = nil) {
            self.sourceType = sourceType
            self.eventCategoriesList = eventCategoriesList
            self.sourceIdsList = sourceIdsList
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.snsTopicArn = snsTopicArn
            self.custSubscriptionId = custSubscriptionId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategoriesList = "EventCategoriesList"
            case sourceIdsList = "SourceIdsList"
            case status = "Status"
            case subscriptionCreationTime = "SubscriptionCreationTime"
            case customerAwsId = "CustomerAwsId"
            case enabled = "Enabled"
            case snsTopicArn = "SnsTopicArn"
            case custSubscriptionId = "CustSubscriptionId"
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .string)
        ]
        /// The status of the VPC security group.
        public let status: String?
        /// The VPC security group Id.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct ReplicationInstanceTaskLog: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceTaskLogSize", required: false, type: .long), 
            AWSShapeMember(label: "ReplicationTaskName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        /// The size, in bytes, of the replication task log.
        public let replicationInstanceTaskLogSize: Int64?
        /// The name of the replication task.
        public let replicationTaskName: String?

        public init(replicationTaskArn: String? = nil, replicationInstanceTaskLogSize: Int64? = nil, replicationTaskName: String? = nil) {
            self.replicationTaskArn = replicationTaskArn
            self.replicationInstanceTaskLogSize = replicationInstanceTaskLogSize
            self.replicationTaskName = replicationTaskName
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskArn = "ReplicationTaskArn"
            case replicationInstanceTaskLogSize = "ReplicationInstanceTaskLogSize"
            case replicationTaskName = "ReplicationTaskName"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventCategories", required: false, type: .list), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The duration of the events to be listed.
        public let duration: Int32?
        /// The type of AWS DMS resource that generates events. Valid values: replication-instance | migration-task
        public let sourceType: SourceType?
        ///  The identifier of the event source. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It cannot end with a hyphen or contain two consecutive hyphens. 
        public let sourceIdentifier: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The start time for the events to be listed.
        public let startTime: TimeStamp?
        /// The end time for the events to be listed.
        public let endTime: TimeStamp?
        /// A list of event categories for a source type that you want to subscribe to.
        public let eventCategories: [String]?
        /// Filters applied to the action.
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(duration: Int32? = nil, sourceType: SourceType? = nil, sourceIdentifier: String? = nil, marker: String? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, eventCategories: [String]? = nil, filters: [Filter]? = nil, maxRecords: Int32? = nil) {
            self.duration = duration
            self.sourceType = sourceType
            self.sourceIdentifier = sourceIdentifier
            self.marker = marker
            self.startTime = startTime
            self.endTime = endTime
            self.eventCategories = eventCategories
            self.filters = filters
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case sourceType = "SourceType"
            case sourceIdentifier = "SourceIdentifier"
            case marker = "Marker"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case eventCategories = "EventCategories"
            case filters = "Filters"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEndpointTypesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Filters applied to the describe action. Valid filter names: engine-name | endpoint-type
        public let filters: [Filter]?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: [Filter]? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "CertificatePem", required: false, type: .string), 
            AWSShapeMember(label: "ValidFromDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "CertificateCreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "KeyLength", required: false, type: .integer), 
            AWSShapeMember(label: "CertificateOwner", required: false, type: .string), 
            AWSShapeMember(label: "ValidToDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "SigningAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "CertificateWallet", required: false, type: .blob)
        ]
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        public let certificateIdentifier: String?
        /// The contents of the .pem X.509 certificate file for the certificate.
        public let certificatePem: String?
        /// The beginning date that the certificate is valid.
        public let validFromDate: TimeStamp?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// The date that the certificate was created.
        public let certificateCreationDate: TimeStamp?
        /// The key length of the cryptographic algorithm being used.
        public let keyLength: Int32?
        /// The owner of the certificate.
        public let certificateOwner: String?
        /// The final date that the certificate is valid.
        public let validToDate: TimeStamp?
        /// The signing algorithm for the certificate.
        public let signingAlgorithm: String?
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        public let certificateWallet: Data?

        public init(certificateIdentifier: String? = nil, certificatePem: String? = nil, validFromDate: TimeStamp? = nil, certificateArn: String? = nil, certificateCreationDate: TimeStamp? = nil, keyLength: Int32? = nil, certificateOwner: String? = nil, validToDate: TimeStamp? = nil, signingAlgorithm: String? = nil, certificateWallet: Data? = nil) {
            self.certificateIdentifier = certificateIdentifier
            self.certificatePem = certificatePem
            self.validFromDate = validFromDate
            self.certificateArn = certificateArn
            self.certificateCreationDate = certificateCreationDate
            self.keyLength = keyLength
            self.certificateOwner = certificateOwner
            self.validToDate = validToDate
            self.signingAlgorithm = signingAlgorithm
            self.certificateWallet = certificateWallet
        }

        private enum CodingKeys: String, CodingKey {
            case certificateIdentifier = "CertificateIdentifier"
            case certificatePem = "CertificatePem"
            case validFromDate = "ValidFromDate"
            case certificateArn = "CertificateArn"
            case certificateCreationDate = "CertificateCreationDate"
            case keyLength = "KeyLength"
            case certificateOwner = "CertificateOwner"
            case validToDate = "ValidToDate"
            case signingAlgorithm = "SigningAlgorithm"
            case certificateWallet = "CertificateWallet"
        }
    }

    public struct ReplicationTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationTaskIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SourceEndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskStats", required: false, type: .structure), 
            AWSShapeMember(label: "TargetEndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "MigrationType", required: false, type: .enum), 
            AWSShapeMember(label: "ReplicationTaskCreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "StopReason", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskSettings", required: false, type: .string), 
            AWSShapeMember(label: "CdcStartPosition", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationTaskStartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TableMappings", required: false, type: .string), 
            AWSShapeMember(label: "LastFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "RecoveryCheckpoint", required: false, type: .string), 
            AWSShapeMember(label: "CdcStopPosition", required: false, type: .string)
        ]
        /// The user-assigned replication task identifier or name. Constraints:   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let sourceEndpointArn: String?
        /// The statistics for the task, including elapsed time, tables loaded, and table errors.
        public let replicationTaskStats: ReplicationTaskStats?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let targetEndpointArn: String?
        /// The type of migration.
        public let migrationType: MigrationTypeValue?
        /// The date the replication task was created.
        public let replicationTaskCreationDate: TimeStamp?
        /// The reason the replication task was stopped.
        public let stopReason: String?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The settings for the replication task.
        public let replicationTaskSettings: String?
        /// Indicates when you want a change data capture (CDC) operation to start. Use either CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start. Specifying both values results in an error.  The value can be in date, checkpoint, or LSN/SCN format. Date Example: --cdc-start-position “2018-03-08T12:12:12” Checkpoint Example: --cdc-start-position "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93" LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”
        public let cdcStartPosition: String?
        /// The date the replication task is scheduled to start.
        public let replicationTaskStartDate: TimeStamp?
        /// Table mappings specified in the task.
        public let tableMappings: String?
        /// The last error (failure) message generated for the replication instance.
        public let lastFailureMessage: String?
        /// The status of the replication task.
        public let status: String?
        /// Indicates the last checkpoint that occurred during a change data capture (CDC) operation. You can provide this value to the CdcStartPosition parameter to start a CDC operation that begins at that checkpoint.
        public let recoveryCheckpoint: String?
        /// Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time. Server time example: --cdc-stop-position “server_time:3018-02-09T12:12:12” Commit time example: --cdc-stop-position “commit_time: 3018-02-09T12:12:12 “
        public let cdcStopPosition: String?

        public init(replicationTaskIdentifier: String? = nil, sourceEndpointArn: String? = nil, replicationTaskStats: ReplicationTaskStats? = nil, targetEndpointArn: String? = nil, migrationType: MigrationTypeValue? = nil, replicationTaskCreationDate: TimeStamp? = nil, stopReason: String? = nil, replicationTaskArn: String? = nil, replicationInstanceArn: String? = nil, replicationTaskSettings: String? = nil, cdcStartPosition: String? = nil, replicationTaskStartDate: TimeStamp? = nil, tableMappings: String? = nil, lastFailureMessage: String? = nil, status: String? = nil, recoveryCheckpoint: String? = nil, cdcStopPosition: String? = nil) {
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.sourceEndpointArn = sourceEndpointArn
            self.replicationTaskStats = replicationTaskStats
            self.targetEndpointArn = targetEndpointArn
            self.migrationType = migrationType
            self.replicationTaskCreationDate = replicationTaskCreationDate
            self.stopReason = stopReason
            self.replicationTaskArn = replicationTaskArn
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationTaskSettings = replicationTaskSettings
            self.cdcStartPosition = cdcStartPosition
            self.replicationTaskStartDate = replicationTaskStartDate
            self.tableMappings = tableMappings
            self.lastFailureMessage = lastFailureMessage
            self.status = status
            self.recoveryCheckpoint = recoveryCheckpoint
            self.cdcStopPosition = cdcStopPosition
        }

        private enum CodingKeys: String, CodingKey {
            case replicationTaskIdentifier = "ReplicationTaskIdentifier"
            case sourceEndpointArn = "SourceEndpointArn"
            case replicationTaskStats = "ReplicationTaskStats"
            case targetEndpointArn = "TargetEndpointArn"
            case migrationType = "MigrationType"
            case replicationTaskCreationDate = "ReplicationTaskCreationDate"
            case stopReason = "StopReason"
            case replicationTaskArn = "ReplicationTaskArn"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case replicationTaskSettings = "ReplicationTaskSettings"
            case cdcStartPosition = "CdcStartPosition"
            case replicationTaskStartDate = "ReplicationTaskStartDate"
            case tableMappings = "TableMappings"
            case lastFailureMessage = "LastFailureMessage"
            case status = "Status"
            case recoveryCheckpoint = "RecoveryCheckpoint"
            case cdcStopPosition = "CdcStopPosition"
        }
    }

    public struct DeleteCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .structure)
        ]
        /// The Secure Sockets Layer (SSL) certificate.
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct DynamoDbSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceAccessRoleArn", required: true, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) used by the service access IAM role. 
        public let serviceAccessRoleArn: String

        public init(serviceAccessRoleArn: String) {
            self.serviceAccessRoleArn = serviceAccessRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
        }
    }

    public struct DescribeEndpointsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoints", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Endpoint description.
        public let endpoints: [Endpoint]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(endpoints: [Endpoint]? = nil, marker: String? = nil) {
            self.endpoints = endpoints
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
            case marker = "Marker"
        }
    }

    public struct DeleteCertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted certificate.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
        }
    }

    public struct CreateEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExtraConnectionAttributes", required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "EndpointIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ServerName", required: false, type: .string), 
            AWSShapeMember(label: "DmsTransferSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ServiceAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", required: true, type: .enum), 
            AWSShapeMember(label: "SslMode", required: false, type: .enum), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "ExternalTableDefinition", required: false, type: .string), 
            AWSShapeMember(label: "S3Settings", required: false, type: .structure), 
            AWSShapeMember(label: "MongoDbSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "EngineName", required: true, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "DynamoDbSettings", required: false, type: .structure)
        ]
        /// Additional attributes associated with the connection.
        public let extraConnectionAttributes: String?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?
        /// The name of the endpoint database.
        public let databaseName: String?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String
        /// The name of the server where the endpoint database resides.
        public let serverName: String?
        ///  The settings in JSON format for the DMS Transfer type source endpoint.  Attributes include:   serviceAccessRoleArn - The IAM role that has permission to access the Amazon S3 bucket.   bucketName - The name of the S3 bucket to use.   compressionType - An optional parameter to use GZIP to compress the target files. Set to NONE (the default) or do not use to leave the files uncompressed.   Shorthand syntax: ServiceAccessRoleArn=string ,BucketName=string,CompressionType=string JSON syntax:  { "ServiceAccessRoleArn": "string", "BucketName": "string", "CompressionType": "none"|"gzip" } 
        public let dmsTransferSettings: DmsTransferSettings?
        /// Tags to be added to the endpoint.
        public let tags: [Tag]?
        ///  The Amazon Resource Name (ARN) for the service access role you want to use to create the endpoint. 
        public let serviceAccessRoleArn: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue
        /// The SSL mode to use for the SSL connection. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The password to be used to login to the endpoint database.
        public let password: String?
        /// The external table definition. 
        public let externalTableDefinition: String?
        /// Settings in JSON format for the target Amazon S3 endpoint. For more information about the available settings, see the Extra Connection Attributes section at  Using Amazon S3 as a Target for AWS Database Migration Service. 
        public let s3Settings: S3Settings?
        /// Settings in JSON format for the source MongoDB endpoint. For more information about the available settings, see the Configuration Properties When Using MongoDB as a Source for AWS Database Migration Service section at  Using MongoDB as a Target for AWS Database Migration Service. 
        public let mongoDbSettings: MongoDbSettings?
        /// The port used by the endpoint database.
        public let port: Int32?
        /// The type of engine for the endpoint. Valid values, depending on the EndPointType, include mysql, oracle, postgres, mariadb, aurora, aurora-postgresql, redshift, s3, db2, azuredb, sybase, dynamodb, mongodb, and sqlserver.
        public let engineName: String
        /// The user name to be used to login to the endpoint database.
        public let username: String?
        /// Settings in JSON format for the target Amazon DynamoDB endpoint. For more information about the available settings, see the Using Object Mapping to Migrate Data to DynamoDB section at  Using an Amazon DynamoDB Database as a Target for AWS Database Migration Service. 
        public let dynamoDbSettings: DynamoDbSettings?

        public init(extraConnectionAttributes: String? = nil, certificateArn: String? = nil, kmsKeyId: String? = nil, databaseName: String? = nil, endpointIdentifier: String, serverName: String? = nil, dmsTransferSettings: DmsTransferSettings? = nil, tags: [Tag]? = nil, serviceAccessRoleArn: String? = nil, endpointType: ReplicationEndpointTypeValue, sslMode: DmsSslModeValue? = nil, password: String? = nil, externalTableDefinition: String? = nil, s3Settings: S3Settings? = nil, mongoDbSettings: MongoDbSettings? = nil, port: Int32? = nil, engineName: String, username: String? = nil, dynamoDbSettings: DynamoDbSettings? = nil) {
            self.extraConnectionAttributes = extraConnectionAttributes
            self.certificateArn = certificateArn
            self.kmsKeyId = kmsKeyId
            self.databaseName = databaseName
            self.endpointIdentifier = endpointIdentifier
            self.serverName = serverName
            self.dmsTransferSettings = dmsTransferSettings
            self.tags = tags
            self.serviceAccessRoleArn = serviceAccessRoleArn
            self.endpointType = endpointType
            self.sslMode = sslMode
            self.password = password
            self.externalTableDefinition = externalTableDefinition
            self.s3Settings = s3Settings
            self.mongoDbSettings = mongoDbSettings
            self.port = port
            self.engineName = engineName
            self.username = username
            self.dynamoDbSettings = dynamoDbSettings
        }

        private enum CodingKeys: String, CodingKey {
            case extraConnectionAttributes = "ExtraConnectionAttributes"
            case certificateArn = "CertificateArn"
            case kmsKeyId = "KmsKeyId"
            case databaseName = "DatabaseName"
            case endpointIdentifier = "EndpointIdentifier"
            case serverName = "ServerName"
            case dmsTransferSettings = "DmsTransferSettings"
            case tags = "Tags"
            case serviceAccessRoleArn = "ServiceAccessRoleArn"
            case endpointType = "EndpointType"
            case sslMode = "SslMode"
            case password = "Password"
            case externalTableDefinition = "ExternalTableDefinition"
            case s3Settings = "S3Settings"
            case mongoDbSettings = "MongoDbSettings"
            case port = "Port"
            case engineName = "EngineName"
            case username = "Username"
            case dynamoDbSettings = "DynamoDbSettings"
        }
    }

    public struct DescribeConnectionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connections", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A description of the connections.
        public let connections: [Connection]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(connections: [Connection]? = nil, marker: String? = nil) {
            self.connections = connections
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "Connections"
            case marker = "Marker"
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The name of the DMS event notification subscription to be deleted.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// &gt;The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be removed from.
        public let resourceArn: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct ReplicationInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationInstancePublicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstancePrivateIpAddresses", required: false, type: .list), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "FreeUntil", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReplicationInstancePublicIpAddresses", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationInstanceStatus", required: false, type: .string), 
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstancePrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SecondaryAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationSubnetGroup", required: false, type: .structure)
        ]
        /// The public IP address of the replication instance.
        public let replicationInstancePublicIpAddress: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The private IP address of the replication instance.
        public let replicationInstancePrivateIpAddresses: [String]?
        /// The time the replication instance was created.
        public let instanceCreateTime: TimeStamp?
        /// The KMS key identifier that is used to encrypt the content on the replication instance. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        ///  The expiration date of the free replication instance that is part of the Free DMS program. 
        public let freeUntil: TimeStamp?
        /// The public IP address of the replication instance.
        public let replicationInstancePublicIpAddresses: [String]?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// Boolean value indicating if minor version upgrades will be automatically applied to the instance.
        public let autoMinorVersionUpgrade: Bool?
        /// The status of the replication instance.
        public let replicationInstanceStatus: String?
        /// The pending modification values.
        public let pendingModifiedValues: ReplicationPendingModifiedValues?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The private IP address of the replication instance.
        public let replicationInstancePrivateIpAddress: String?
        /// The maintenance window times for the replication instance.
        public let preferredMaintenanceWindow: String?
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        public let replicationInstanceIdentifier: String?
        /// The availability zone of the standby replication instance in a Multi-AZ deployment.
        public let secondaryAvailabilityZone: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let allocatedStorage: Int32?
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        public let publiclyAccessible: Bool?
        /// The VPC security group for the instance.
        public let vpcSecurityGroups: [VpcSecurityGroupMembership]?
        /// The subnet group for the replication instance.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationInstancePublicIpAddress: String? = nil, replicationInstanceClass: String? = nil, replicationInstancePrivateIpAddresses: [String]? = nil, instanceCreateTime: TimeStamp? = nil, kmsKeyId: String? = nil, multiAZ: Bool? = nil, freeUntil: TimeStamp? = nil, replicationInstancePublicIpAddresses: [String]? = nil, replicationInstanceArn: String? = nil, autoMinorVersionUpgrade: Bool? = nil, replicationInstanceStatus: String? = nil, pendingModifiedValues: ReplicationPendingModifiedValues? = nil, engineVersion: String? = nil, replicationInstancePrivateIpAddress: String? = nil, preferredMaintenanceWindow: String? = nil, replicationInstanceIdentifier: String? = nil, secondaryAvailabilityZone: String? = nil, availabilityZone: String? = nil, allocatedStorage: Int32? = nil, publiclyAccessible: Bool? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil, replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationInstancePublicIpAddress = replicationInstancePublicIpAddress
            self.replicationInstanceClass = replicationInstanceClass
            self.replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses
            self.instanceCreateTime = instanceCreateTime
            self.kmsKeyId = kmsKeyId
            self.multiAZ = multiAZ
            self.freeUntil = freeUntil
            self.replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses
            self.replicationInstanceArn = replicationInstanceArn
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.replicationInstanceStatus = replicationInstanceStatus
            self.pendingModifiedValues = pendingModifiedValues
            self.engineVersion = engineVersion
            self.replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.availabilityZone = availabilityZone
            self.allocatedStorage = allocatedStorage
            self.publiclyAccessible = publiclyAccessible
            self.vpcSecurityGroups = vpcSecurityGroups
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationInstancePublicIpAddress = "ReplicationInstancePublicIpAddress"
            case replicationInstanceClass = "ReplicationInstanceClass"
            case replicationInstancePrivateIpAddresses = "ReplicationInstancePrivateIpAddresses"
            case instanceCreateTime = "InstanceCreateTime"
            case kmsKeyId = "KmsKeyId"
            case multiAZ = "MultiAZ"
            case freeUntil = "FreeUntil"
            case replicationInstancePublicIpAddresses = "ReplicationInstancePublicIpAddresses"
            case replicationInstanceArn = "ReplicationInstanceArn"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case replicationInstanceStatus = "ReplicationInstanceStatus"
            case pendingModifiedValues = "PendingModifiedValues"
            case engineVersion = "EngineVersion"
            case replicationInstancePrivateIpAddress = "ReplicationInstancePrivateIpAddress"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
            case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
            case availabilityZone = "AvailabilityZone"
            case allocatedStorage = "AllocatedStorage"
            case publiclyAccessible = "PubliclyAccessible"
            case vpcSecurityGroups = "VpcSecurityGroups"
            case replicationSubnetGroup = "ReplicationSubnetGroup"
        }
    }

}