// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Comprehend {

    public struct DetectDominantLanguageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Languages", required: false, type: .list)
        ]
        /// The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languages: [DominantLanguage]?

        public init(languages: [DominantLanguage]? = nil) {
            self.languages = languages
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "Languages"
        }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable {
        case en = "en"
        case es = "es"
        public var description: String { return self.rawValue }
    }

    public struct ListDominantLanguageDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DominantLanguageDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let dominantLanguageDetectionJobPropertiesList: [DominantLanguageDetectionJobProperties]?

        public init(nextToken: String? = nil, dominantLanguageDetectionJobPropertiesList: [DominantLanguageDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.dominantLanguageDetectionJobPropertiesList = dominantLanguageDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case dominantLanguageDetectionJobPropertiesList = "DominantLanguageDetectionJobPropertiesList"
        }
    }

    public struct StartEntitiesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure)
        ]
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig

        public init(clientRequestToken: String? = nil, jobName: String? = nil, languageCode: LanguageCode, dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig) {
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
            self.languageCode = languageCode
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
            case languageCode = "LanguageCode"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
        }
    }

    public struct TopicsDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp)
        ]
        /// Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeAfter: TimeStamp?
        public let jobName: String?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeBefore: TimeStamp?

        public init(jobStatus: JobStatus? = nil, submitTimeAfter: TimeStamp? = nil, jobName: String? = nil, submitTimeBefore: TimeStamp? = nil) {
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.jobName = jobName
            self.submitTimeBefore = submitTimeBefore
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobName = "JobName"
            case submitTimeBefore = "SubmitTimeBefore"
        }
    }

    public struct StartSentimentDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct ListEntitiesDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: EntitiesDetectionJobFilter?
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(filter: EntitiesDetectionJobFilter? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetectSentimentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectSentimentItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectSentimentItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct StopEntitiesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopEntitiesDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the entities detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct DetectKeyPhrasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrases", required: false, type: .list)
        ]
        /// A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. 
        public let keyPhrases: [KeyPhrase]?

        public init(keyPhrases: [KeyPhrase]? = nil) {
            self.keyPhrases = keyPhrases
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrases = "KeyPhrases"
        }
    }

    public struct DescribeSentimentDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DescribeEntitiesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntitiesDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with an entities detection job.
        public let entitiesDetectionJobProperties: EntitiesDetectionJobProperties?

        public init(entitiesDetectionJobProperties: EntitiesDetectionJobProperties? = nil) {
            self.entitiesDetectionJobProperties = entitiesDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case entitiesDetectionJobProperties = "EntitiesDetectionJobProperties"
        }
    }

    public struct PartOfSpeechTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .enum), 
            AWSShapeMember(label: "Score", required: false, type: .float)
        ]
        /// Identifies the part of speech that the token represents.
        public let tag: PartOfSpeechTagType?
        /// The confidence that Amazon Comprehend has that the part of speech was correctly identified.
        public let score: Float?

        public init(tag: PartOfSpeechTagType? = nil, score: Float? = nil) {
            self.tag = tag
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case score = "Score"
        }
    }

    public struct ListKeyPhrasesDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "KeyPhrasesDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let keyPhrasesDetectionJobPropertiesList: [KeyPhrasesDetectionJobProperties]?

        public init(nextToken: String? = nil, keyPhrasesDetectionJobPropertiesList: [KeyPhrasesDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.keyPhrasesDetectionJobPropertiesList = keyPhrasesDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case keyPhrasesDetectionJobPropertiesList = "KeyPhrasesDetectionJobPropertiesList"
        }
    }

    public struct EntitiesDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp)
        ]
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters on the name of the job.
        public let jobName: String?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?

        public init(jobStatus: JobStatus? = nil, submitTimeAfter: TimeStamp? = nil, jobName: String? = nil, submitTimeBefore: TimeStamp? = nil) {
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.jobName = jobName
            self.submitTimeBefore = submitTimeBefore
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobName = "JobName"
            case submitTimeBefore = "SubmitTimeBefore"
        }
    }

    public struct KeyPhrase: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Score", required: false, type: .float), 
            AWSShapeMember(label: "Text", required: false, type: .string)
        ]
        /// A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let beginOffset: Int32?
        /// A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let endOffset: Int32?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?
        /// The text of a key noun phrase.
        public let text: String?

        public init(beginOffset: Int32? = nil, endOffset: Int32? = nil, score: Float? = nil, text: String? = nil) {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.score = score
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case beginOffset = "BeginOffset"
            case endOffset = "EndOffset"
            case score = "Score"
            case text = "Text"
        }
    }

    public struct BatchDetectDominantLanguageItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Languages", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more DominantLanguage objects describing the dominant languages in the document.
        public let languages: [DominantLanguage]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(languages: [DominantLanguage]? = nil, index: Int32? = nil) {
            self.languages = languages
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "Languages"
            case index = "Index"
        }
    }

    public enum EntityType: String, CustomStringConvertible, Codable {
        case person = "PERSON"
        case location = "LOCATION"
        case organization = "ORGANIZATION"
        case commercialItem = "COMMERCIAL_ITEM"
        case event = "EVENT"
        case date = "DATE"
        case quantity = "QUANTITY"
        case title = "TITLE"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct StopSentimentDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the sentiment detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct BatchDetectSentimentItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SentimentScore", required: false, type: .structure), 
            AWSShapeMember(label: "Sentiment", required: false, type: .enum), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.
        public let sentimentScore: SentimentScore?
        /// The sentiment detected in the document.
        public let sentiment: SentimentType?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(sentimentScore: SentimentScore? = nil, sentiment: SentimentType? = nil, index: Int32? = nil) {
            self.sentimentScore = sentimentScore
            self.sentiment = sentiment
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case sentimentScore = "SentimentScore"
            case sentiment = "Sentiment"
            case index = "Index"
        }
    }

    public enum SyntaxLanguageCode: String, CustomStringConvertible, Codable {
        case en = "en"
        public var description: String { return self.rawValue }
    }

    public enum InputFormat: String, CustomStringConvertible, Codable {
        case oneDocPerFile = "ONE_DOC_PER_FILE"
        case oneDocPerLine = "ONE_DOC_PER_LINE"
        public var description: String { return self.rawValue }
    }

    public struct BatchDetectEntitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(textList: [String], languageCode: LanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct ListSentimentDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: SentimentDetectionJobFilter?
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(filter: SentimentDetectionJobFilter? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetectDominantLanguageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectDominantLanguageItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectDominantLanguageItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct BatchDetectSyntaxItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "SyntaxTokens", required: false, type: .list)
        ]
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// The syntax tokens for the words in the document, one token for each word.
        public let syntaxTokens: [SyntaxToken]?

        public init(index: Int32? = nil, syntaxTokens: [SyntaxToken]? = nil) {
            self.index = index
            self.syntaxTokens = syntaxTokens
        }

        private enum CodingKeys: String, CodingKey {
            case index = "Index"
            case syntaxTokens = "SyntaxTokens"
        }
    }

    public struct DetectSentimentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(languageCode: LanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct BatchDetectSyntaxRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: SyntaxLanguageCode

        public init(textList: [String], languageCode: SyntaxLanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct ListKeyPhrasesDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: KeyPhrasesDetectionJobFilter?
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(filter: KeyPhrasesDetectionJobFilter? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct KeyPhrasesDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The input data configuration that you supplied when you created the key phrases detection job.
        public let inputDataConfig: InputDataConfig?
        /// A description of the status of a job.
        public let message: String?
        /// The current status of the key phrases detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The language code of the input documents.
        public let languageCode: LanguageCode?
        /// The output data configuration that you supplied when you created the key phrases detection job.
        public let outputDataConfig: OutputDataConfig?
        /// The time that the key phrases detection job completed.
        public let endTime: TimeStamp?
        /// The name that you assigned the key phrases detection job.
        public let jobName: String?
        /// The identifier assigned to the key phrases detection job.
        public let jobId: String?
        /// The time that the key phrases detection job was submitted for processing.
        public let submitTime: TimeStamp?

        public init(inputDataConfig: InputDataConfig? = nil, message: String? = nil, jobStatus: JobStatus? = nil, dataAccessRoleArn: String? = nil, languageCode: LanguageCode? = nil, outputDataConfig: OutputDataConfig? = nil, endTime: TimeStamp? = nil, jobName: String? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil) {
            self.inputDataConfig = inputDataConfig
            self.message = message
            self.jobStatus = jobStatus
            self.dataAccessRoleArn = dataAccessRoleArn
            self.languageCode = languageCode
            self.outputDataConfig = outputDataConfig
            self.endTime = endTime
            self.jobName = jobName
            self.jobId = jobId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case inputDataConfig = "InputDataConfig"
            case message = "Message"
            case jobStatus = "JobStatus"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case languageCode = "LanguageCode"
            case outputDataConfig = "OutputDataConfig"
            case endTime = "EndTime"
            case jobName = "JobName"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
        }
    }

    public struct BatchDetectEntitiesItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entities", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more Entity objects, one for each entity detected in the document.
        public let entities: [Entity]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(entities: [Entity]? = nil, index: Int32? = nil) {
            self.entities = entities
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "Entities"
            case index = "Index"
        }
    }

    public struct BatchDetectSentimentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(textList: [String], languageCode: LanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct DescribeEntitiesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct StopDominantLanguageDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the dominant language detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct BatchDetectKeyPhrasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(textList: [String], languageCode: LanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct BatchDetectEntitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectEntitiesItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectEntitiesItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct DetectEntitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entities", required: false, type: .list)
        ]
        /// A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. For a list of entity types, see how-entities. 
        public let entities: [Entity]?

        public init(entities: [Entity]? = nil) {
            self.entities = entities
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "Entities"
        }
    }

    public struct DescribeKeyPhrasesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrasesDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a key phrases detection job. 
        public let keyPhrasesDetectionJobProperties: KeyPhrasesDetectionJobProperties?

        public init(keyPhrasesDetectionJobProperties: KeyPhrasesDetectionJobProperties? = nil) {
            self.keyPhrasesDetectionJobProperties = keyPhrasesDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrasesDetectionJobProperties = "KeyPhrasesDetectionJobProperties"
        }
    }

    public struct DetectEntitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(languageCode: LanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct StartEntitiesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct DescribeDominantLanguageDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DominantLanguageDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a dominant language detection job.
        public let dominantLanguageDetectionJobProperties: DominantLanguageDetectionJobProperties?

        public init(dominantLanguageDetectionJobProperties: DominantLanguageDetectionJobProperties? = nil) {
            self.dominantLanguageDetectionJobProperties = dominantLanguageDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case dominantLanguageDetectionJobProperties = "DominantLanguageDetectionJobProperties"
        }
    }

    public struct StartKeyPhrasesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure)
        ]
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig

        public init(clientRequestToken: String? = nil, jobName: String? = nil, languageCode: LanguageCode, dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig) {
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
            self.languageCode = languageCode
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
            case languageCode = "LanguageCode"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
        }
    }

    public struct KeyPhrasesDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp)
        ]
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters on the name of the job.
        public let jobName: String?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?

        public init(jobStatus: JobStatus? = nil, submitTimeAfter: TimeStamp? = nil, jobName: String? = nil, submitTimeBefore: TimeStamp? = nil) {
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.jobName = jobName
            self.submitTimeBefore = submitTimeBefore
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobName = "JobName"
            case submitTimeBefore = "SubmitTimeBefore"
        }
    }

    public struct ListTopicsDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.
        public let filter: TopicsDetectionJobFilter?
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(filter: TopicsDetectionJobFilter? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetectKeyPhrasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectKeyPhrasesItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectKeyPhrasesItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct ListSentimentDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SentimentDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let sentimentDetectionJobPropertiesList: [SentimentDetectionJobProperties]?

        public init(nextToken: String? = nil, sentimentDetectionJobPropertiesList: [SentimentDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.sentimentDetectionJobPropertiesList = sentimentDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case sentimentDetectionJobPropertiesList = "SentimentDetectionJobPropertiesList"
        }
    }

    public struct StopSentimentDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopSentimentDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the sentiment detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct DetectSentimentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sentiment", required: false, type: .enum), 
            AWSShapeMember(label: "SentimentScore", required: false, type: .structure)
        ]
        /// The inferred sentiment that Amazon Comprehend has the highest level of confidence in.
        public let sentiment: SentimentType?
        /// An object that lists the sentiments, and their corresponding confidence levels.
        public let sentimentScore: SentimentScore?

        public init(sentiment: SentimentType? = nil, sentimentScore: SentimentScore? = nil) {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }

        private enum CodingKeys: String, CodingKey {
            case sentiment = "Sentiment"
            case sentimentScore = "SentimentScore"
        }
    }

    public struct DetectSyntaxResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyntaxTokens", required: false, type: .list)
        ]
        /// A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see how-syntax.
        public let syntaxTokens: [SyntaxToken]?

        public init(syntaxTokens: [SyntaxToken]? = nil) {
            self.syntaxTokens = syntaxTokens
        }

        private enum CodingKeys: String, CodingKey {
            case syntaxTokens = "SyntaxTokens"
        }
    }

    public enum PartOfSpeechTagType: String, CustomStringConvertible, Codable {
        case adj = "ADJ"
        case adp = "ADP"
        case adv = "ADV"
        case aux = "AUX"
        case conj = "CONJ"
        case det = "DET"
        case intj = "INTJ"
        case noun = "NOUN"
        case num = "NUM"
        case o = "O"
        case part = "PART"
        case pron = "PRON"
        case propn = "PROPN"
        case punct = "PUNCT"
        case sconj = "SCONJ"
        case sym = "SYM"
        case verb = "VERB"
        public var description: String { return self.rawValue }
    }

    public struct TopicsDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberOfTopics", required: false, type: .integer), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The number of topics to detect supplied when you created the topic detection job. The default is 10. 
        public let numberOfTopics: Int32?
        /// The input data configuration supplied when you created the topic detection job.
        public let inputDataConfig: InputDataConfig?
        /// A description for the status of a job.
        public let message: String?
        /// The current status of the topic detection job. If the status is Failed, the reason for the failure is shown in the Message field.
        public let jobStatus: JobStatus?
        /// The time that the topic detection job was completed.
        public let endTime: TimeStamp?
        /// The output data configuration supplied when you created the topic detection job.
        public let outputDataConfig: OutputDataConfig?
        /// The name of the topic detection job.
        public let jobName: String?
        /// The identifier assigned to the topic detection job.
        public let jobId: String?
        /// The time that the topic detection job was submitted for processing.
        public let submitTime: TimeStamp?

        public init(numberOfTopics: Int32? = nil, inputDataConfig: InputDataConfig? = nil, message: String? = nil, jobStatus: JobStatus? = nil, endTime: TimeStamp? = nil, outputDataConfig: OutputDataConfig? = nil, jobName: String? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil) {
            self.numberOfTopics = numberOfTopics
            self.inputDataConfig = inputDataConfig
            self.message = message
            self.jobStatus = jobStatus
            self.endTime = endTime
            self.outputDataConfig = outputDataConfig
            self.jobName = jobName
            self.jobId = jobId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfTopics = "NumberOfTopics"
            case inputDataConfig = "InputDataConfig"
            case message = "Message"
            case jobStatus = "JobStatus"
            case endTime = "EndTime"
            case outputDataConfig = "OutputDataConfig"
            case jobName = "JobName"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
        }
    }

    public enum SentimentType: String, CustomStringConvertible, Codable {
        case positive = "POSITIVE"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case mixed = "MIXED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTopicsDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicsDetectionJobProperties", required: false, type: .structure)
        ]
        /// The list of properties for the requested job.
        public let topicsDetectionJobProperties: TopicsDetectionJobProperties?

        public init(topicsDetectionJobProperties: TopicsDetectionJobProperties? = nil) {
            self.topicsDetectionJobProperties = topicsDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case topicsDetectionJobProperties = "TopicsDetectionJobProperties"
        }
    }

    public struct DescribeTopicsDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier assigned by the user to the detection job.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct StartTopicsDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberOfTopics", required: false, type: .integer), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure)
        ]
        /// The number of topics to detect.
        public let numberOfTopics: Int32?
        /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files. The output is a compressed archive with two files, topic-terms.csv that lists the terms associated with each topic, and doc-topics.csv that lists the documents associated with each topic
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig

        public init(numberOfTopics: Int32? = nil, clientRequestToken: String? = nil, jobName: String? = nil, dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig) {
            self.numberOfTopics = numberOfTopics
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfTopics = "NumberOfTopics"
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
        }
    }

    public struct BatchDetectDominantLanguageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters and must contain fewer than 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]

        public init(textList: [String]) {
            self.textList = textList
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
        }
    }

    public struct StartTopicsDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job:    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the DescribeTopicDetectionJob operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of the job, use this identifier with the DescribeTopicDetectionJob operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct InputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string), 
            AWSShapeMember(label: "InputFormat", required: false, type: .enum)
        ]
        /// The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files.  For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
        public let s3Uri: String
        /// Specifies how the text in an input file should be processed:    ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.    ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.  
        public let inputFormat: InputFormat?

        public init(s3Uri: String, inputFormat: InputFormat? = nil) {
            self.s3Uri = s3Uri
            self.inputFormat = inputFormat
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
            case inputFormat = "InputFormat"
        }
    }

    public struct StopEntitiesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the entities detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DescribeSentimentDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SentimentDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a sentiment detection job.
        public let sentimentDetectionJobProperties: SentimentDetectionJobProperties?

        public init(sentimentDetectionJobProperties: SentimentDetectionJobProperties? = nil) {
            self.sentimentDetectionJobProperties = sentimentDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case sentimentDetectionJobProperties = "SentimentDetectionJobProperties"
        }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case stopRequested = "STOP_REQUESTED"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public struct StartDominantLanguageDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure)
        ]
        /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// An identifier for the job.
        public let jobName: String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig

        public init(clientRequestToken: String? = nil, jobName: String? = nil, dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig) {
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
        }
    }

    public struct ListDominantLanguageDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: DominantLanguageDetectionJobFilter?
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(filter: DominantLanguageDetectionJobFilter? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListTopicsDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TopicsDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let topicsDetectionJobPropertiesList: [TopicsDetectionJobProperties]?

        public init(nextToken: String? = nil, topicsDetectionJobPropertiesList: [TopicsDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.topicsDetectionJobPropertiesList = topicsDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case topicsDetectionJobPropertiesList = "TopicsDetectionJobPropertiesList"
        }
    }

    public struct ListEntitiesDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EntitiesDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let entitiesDetectionJobPropertiesList: [EntitiesDetectionJobProperties]?

        public init(nextToken: String? = nil, entitiesDetectionJobPropertiesList: [EntitiesDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.entitiesDetectionJobPropertiesList = entitiesDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case entitiesDetectionJobPropertiesList = "EntitiesDetectionJobPropertiesList"
        }
    }

    public struct OutputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        /// When you use the OutputDataConfig object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file. When the topic detection job is finished, the service creates an output file in a directory specific to the job. The S3Uri field contains the location of the output file, called output.tar.gz. It is a compressed archive that contains the ouput of the operation.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct SentimentDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp)
        ]
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters on the name of the job.
        public let jobName: String?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?

        public init(jobStatus: JobStatus? = nil, submitTimeAfter: TimeStamp? = nil, jobName: String? = nil, submitTimeBefore: TimeStamp? = nil) {
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.jobName = jobName
            self.submitTimeBefore = submitTimeBefore
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobName = "JobName"
            case submitTimeBefore = "SubmitTimeBefore"
        }
    }

    public struct DominantLanguageDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The input data configuration that you supplied when you created the dominant language detection job.
        public let inputDataConfig: InputDataConfig?
        /// A description for the status of a job.
        public let message: String?
        /// The current status of the dominant language detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The time that the dominant language detection job completed.
        public let endTime: TimeStamp?
        /// The output data configuration that you supplied when you created the dominant language detection job.
        public let outputDataConfig: OutputDataConfig?
        /// The name that you assigned to the dominant language detection job.
        public let jobName: String?
        /// The identifier assigned to the dominant language detection job.
        public let jobId: String?
        /// The time that the dominant language detection job was submitted for processing.
        public let submitTime: TimeStamp?

        public init(inputDataConfig: InputDataConfig? = nil, message: String? = nil, jobStatus: JobStatus? = nil, dataAccessRoleArn: String? = nil, endTime: TimeStamp? = nil, outputDataConfig: OutputDataConfig? = nil, jobName: String? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil) {
            self.inputDataConfig = inputDataConfig
            self.message = message
            self.jobStatus = jobStatus
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.outputDataConfig = outputDataConfig
            self.jobName = jobName
            self.jobId = jobId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case inputDataConfig = "InputDataConfig"
            case message = "Message"
            case jobStatus = "JobStatus"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case endTime = "EndTime"
            case outputDataConfig = "OutputDataConfig"
            case jobName = "JobName"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
        }
    }

    public struct DetectDominantLanguageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// A UTF-8 text string. Each string should contain at least 20 characters and must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(text: String) {
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    public struct BatchDetectSyntaxResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectSyntaxItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectSyntaxItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct DetectKeyPhrasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(languageCode: LanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct DominantLanguageDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp)
        ]
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters on the name of the job.
        public let jobName: String?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?

        public init(jobStatus: JobStatus? = nil, submitTimeAfter: TimeStamp? = nil, jobName: String? = nil, submitTimeBefore: TimeStamp? = nil) {
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.jobName = jobName
            self.submitTimeBefore = submitTimeBefore
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobName = "JobName"
            case submitTimeBefore = "SubmitTimeBefore"
        }
    }

    public struct StartKeyPhrasesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct SentimentDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The input data configuration that you supplied when you created the sentiment detection job.
        public let inputDataConfig: InputDataConfig?
        /// A description of the status of a job.
        public let message: String?
        /// The current status of the sentiment detection job. If the status is FAILED, the Messages field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The language code of the input documents.
        public let languageCode: LanguageCode?
        /// The output data configuration that you supplied when you created the sentiment detection job.
        public let outputDataConfig: OutputDataConfig?
        /// The time that the sentiment detection job ended.
        public let endTime: TimeStamp?
        /// The name that you assigned to the sentiment detection job
        public let jobName: String?
        /// The identifier assigned to the sentiment detection job.
        public let jobId: String?
        /// The time that the sentiment detection job was submitted for processing.
        public let submitTime: TimeStamp?

        public init(inputDataConfig: InputDataConfig? = nil, message: String? = nil, jobStatus: JobStatus? = nil, dataAccessRoleArn: String? = nil, languageCode: LanguageCode? = nil, outputDataConfig: OutputDataConfig? = nil, endTime: TimeStamp? = nil, jobName: String? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil) {
            self.inputDataConfig = inputDataConfig
            self.message = message
            self.jobStatus = jobStatus
            self.dataAccessRoleArn = dataAccessRoleArn
            self.languageCode = languageCode
            self.outputDataConfig = outputDataConfig
            self.endTime = endTime
            self.jobName = jobName
            self.jobId = jobId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case inputDataConfig = "InputDataConfig"
            case message = "Message"
            case jobStatus = "JobStatus"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case languageCode = "LanguageCode"
            case outputDataConfig = "OutputDataConfig"
            case endTime = "EndTime"
            case jobName = "JobName"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
        }
    }

    public struct StartDominantLanguageDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct Entity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Score", required: false, type: .float), 
            AWSShapeMember(label: "Text", required: false, type: .string)
        ]
        /// The entity's type.
        public let `type`: EntityType?
        /// A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. 
        public let endOffset: Int32?
        /// A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let beginOffset: Int32?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?
        /// The text of the entity.
        public let text: String?

        public init(type: EntityType? = nil, endOffset: Int32? = nil, beginOffset: Int32? = nil, score: Float? = nil, text: String? = nil) {
            self.`type` = `type`
            self.endOffset = endOffset
            self.beginOffset = beginOffset
            self.score = score
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case endOffset = "EndOffset"
            case beginOffset = "BeginOffset"
            case score = "Score"
            case text = "Text"
        }
    }

    public struct BatchItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string)
        ]
        /// A text description of the error.
        public let errorMessage: String?
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// The numeric error code of the error.
        public let errorCode: String?

        public init(errorMessage: String? = nil, index: Int32? = nil, errorCode: String? = nil) {
            self.errorMessage = errorMessage
            self.index = index
            self.errorCode = errorCode
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case index = "Index"
            case errorCode = "ErrorCode"
        }
    }

    public struct BatchDetectKeyPhrasesItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrases", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more KeyPhrase objects, one for each key phrase detected in the document.
        public let keyPhrases: [KeyPhrase]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(keyPhrases: [KeyPhrase]? = nil, index: Int32? = nil) {
            self.keyPhrases = keyPhrases
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrases = "KeyPhrases"
            case index = "Index"
        }
    }

    public struct StopDominantLanguageDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopDominantLanguageDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the dominant language detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct SentimentScore: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Positive", required: false, type: .float), 
            AWSShapeMember(label: "Neutral", required: false, type: .float), 
            AWSShapeMember(label: "Negative", required: false, type: .float), 
            AWSShapeMember(label: "Mixed", required: false, type: .float)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public let positive: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public let neutral: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public let negative: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public let mixed: Float?

        public init(positive: Float? = nil, neutral: Float? = nil, negative: Float? = nil, mixed: Float? = nil) {
            self.positive = positive
            self.neutral = neutral
            self.negative = negative
            self.mixed = mixed
        }

        private enum CodingKeys: String, CodingKey {
            case positive = "Positive"
            case neutral = "Neutral"
            case negative = "Negative"
            case mixed = "Mixed"
        }
    }

    public struct StartSentimentDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure)
        ]
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files. 
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig

        public init(clientRequestToken: String? = nil, jobName: String? = nil, languageCode: LanguageCode, dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig) {
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
            self.languageCode = languageCode
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
            case languageCode = "LanguageCode"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
        }
    }

    public struct EntitiesDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The input data configuration that you supplied when you created the entities detection job.
        public let inputDataConfig: InputDataConfig?
        /// A description of the status of a job.
        public let message: String?
        /// The current status of the entities detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The language code of the input documents.
        public let languageCode: LanguageCode?
        /// The output data configuration that you supplied when you created the entities detection job. 
        public let outputDataConfig: OutputDataConfig?
        /// The time that the entities detection job completed
        public let endTime: TimeStamp?
        /// The name that you assigned the entities detection job.
        public let jobName: String?
        /// The identifier assigned to the entities detection job.
        public let jobId: String?
        /// The time that the entities detection job was submitted for processing.
        public let submitTime: TimeStamp?

        public init(inputDataConfig: InputDataConfig? = nil, message: String? = nil, jobStatus: JobStatus? = nil, dataAccessRoleArn: String? = nil, languageCode: LanguageCode? = nil, outputDataConfig: OutputDataConfig? = nil, endTime: TimeStamp? = nil, jobName: String? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil) {
            self.inputDataConfig = inputDataConfig
            self.message = message
            self.jobStatus = jobStatus
            self.dataAccessRoleArn = dataAccessRoleArn
            self.languageCode = languageCode
            self.outputDataConfig = outputDataConfig
            self.endTime = endTime
            self.jobName = jobName
            self.jobId = jobId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case inputDataConfig = "InputDataConfig"
            case message = "Message"
            case jobStatus = "JobStatus"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case languageCode = "LanguageCode"
            case outputDataConfig = "OutputDataConfig"
            case endTime = "EndTime"
            case jobName = "JobName"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
        }
    }

    public struct SyntaxToken: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartOfSpeech", required: false, type: .structure), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "TokenId", required: false, type: .integer)
        ]
        /// Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see how-syntax.
        public let partOfSpeech: PartOfSpeechTag?
        /// The zero-based offset from the beginning of the source text to the first character in the word.
        public let beginOffset: Int32?
        /// The zero-based offset from the beginning of the source text to the last character in the word.
        public let endOffset: Int32?
        /// The word that was recognized in the source text.
        public let text: String?
        /// A unique identifier for a token.
        public let tokenId: Int32?

        public init(partOfSpeech: PartOfSpeechTag? = nil, beginOffset: Int32? = nil, endOffset: Int32? = nil, text: String? = nil, tokenId: Int32? = nil) {
            self.partOfSpeech = partOfSpeech
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.text = text
            self.tokenId = tokenId
        }

        private enum CodingKeys: String, CodingKey {
            case partOfSpeech = "PartOfSpeech"
            case beginOffset = "BeginOffset"
            case endOffset = "EndOffset"
            case text = "Text"
            case tokenId = "TokenId"
        }
    }

    public struct DominantLanguage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: false, type: .string), 
            AWSShapeMember(label: "Score", required: false, type: .float)
        ]
        /// The RFC 5646 language code for the dominant language. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languageCode: String?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?

        public init(languageCode: String? = nil, score: Float? = nil) {
            self.languageCode = languageCode
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case score = "Score"
        }
    }

    public struct StopKeyPhrasesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the key phrases detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DetectSyntaxRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The language code of the input documents. You can specify English ("en") or Spanish ("es").
        public let languageCode: SyntaxLanguageCode
        /// A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded characters.
        public let text: String

        public init(languageCode: SyntaxLanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct DescribeDominantLanguageDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DescribeKeyPhrasesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct StopKeyPhrasesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopKeyPhrasesDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the key phrases detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

}