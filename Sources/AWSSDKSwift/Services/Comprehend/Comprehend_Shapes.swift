// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Comprehend {

    public struct DescribeSentimentDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SentimentDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a sentiment detection job.
        public let sentimentDetectionJobProperties: SentimentDetectionJobProperties?

        public init(sentimentDetectionJobProperties: SentimentDetectionJobProperties? = nil) {
            self.sentimentDetectionJobProperties = sentimentDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case sentimentDetectionJobProperties = "SentimentDetectionJobProperties"
        }
    }

    public struct BatchDetectSentimentItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sentiment", required: false, type: .enum), 
            AWSShapeMember(label: "SentimentScore", required: false, type: .structure), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// The sentiment detected in the document.
        public let sentiment: SentimentType?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.
        public let sentimentScore: SentimentScore?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(sentiment: SentimentType? = nil, sentimentScore: SentimentScore? = nil, index: Int32? = nil) {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case sentiment = "Sentiment"
            case sentimentScore = "SentimentScore"
            case index = "Index"
        }
    }

    public struct StartEntitiesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.   STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.   STOPPED - The job was successfully stopped without completing.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct ListSentimentDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: SentimentDetectionJobFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: SentimentDetectionJobFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct StartDocumentClassificationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "DocumentClassifierArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String
        /// The Amazon Resource Name (ARN) of the document classifier to use to process the job.
        public let documentClassifierArn: String
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig
        /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?

        public init(dataAccessRoleArn: String, documentClassifierArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig, clientRequestToken: String? = nil, jobName: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.documentClassifierArn = documentClassifierArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case documentClassifierArn = "DocumentClassifierArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
        }
    }

    public struct ListTopicsDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.
        public let filter: TopicsDetectionJobFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: TopicsDetectionJobFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct ListTopicsDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicsDetectionJobPropertiesList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list containing the properties of each job that is returned.
        public let topicsDetectionJobPropertiesList: [TopicsDetectionJobProperties]?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(topicsDetectionJobPropertiesList: [TopicsDetectionJobProperties]? = nil, nextToken: String? = nil) {
            self.topicsDetectionJobPropertiesList = topicsDetectionJobPropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case topicsDetectionJobPropertiesList = "TopicsDetectionJobPropertiesList"
            case nextToken = "NextToken"
        }
    }

    public struct DetectEntitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(text: String, languageCode: LanguageCode) {
            self.text = text
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case languageCode = "LanguageCode"
        }
    }

    public struct EntityRecognizerInputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityList", required: false, type: .structure), 
            AWSShapeMember(label: "Annotations", required: false, type: .structure), 
            AWSShapeMember(label: "Documents", required: true, type: .structure), 
            AWSShapeMember(label: "EntityTypes", required: true, type: .list)
        ]
        /// S3 location of the entity list for an entity recognizer.
        public let entityList: EntityRecognizerEntityList?
        /// S3 location of the annotations file for an entity recognizer.
        public let annotations: EntityRecognizerAnnotations?
        /// S3 location of the documents folder for an entity recognizer
        public let documents: EntityRecognizerDocuments
        /// The entity types in the input data for an entity recognizer.
        public let entityTypes: [EntityTypesListItem]

        public init(entityList: EntityRecognizerEntityList? = nil, annotations: EntityRecognizerAnnotations? = nil, documents: EntityRecognizerDocuments, entityTypes: [EntityTypesListItem]) {
            self.entityList = entityList
            self.annotations = annotations
            self.documents = documents
            self.entityTypes = entityTypes
        }

        private enum CodingKeys: String, CodingKey {
            case entityList = "EntityList"
            case annotations = "Annotations"
            case documents = "Documents"
            case entityTypes = "EntityTypes"
        }
    }

    public struct BatchDetectDominantLanguageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters and must contain fewer than 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]

        public init(textList: [String]) {
            self.textList = textList
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
        }
    }

    public struct DescribeKeyPhrasesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrasesDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a key phrases detection job. 
        public let keyPhrasesDetectionJobProperties: KeyPhrasesDetectionJobProperties?

        public init(keyPhrasesDetectionJobProperties: KeyPhrasesDetectionJobProperties? = nil) {
            self.keyPhrasesDetectionJobProperties = keyPhrasesDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrasesDetectionJobProperties = "KeyPhrasesDetectionJobProperties"
        }
    }

    public struct StartTopicsDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "NumberOfTopics", required: false, type: .integer), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// The number of topics to detect.
        public let numberOfTopics: Int32?
        /// Specifies where to send the output files. The output is a compressed archive with two files, topic-terms.csv that lists the terms associated with each topic, and doc-topics.csv that lists the documents associated with each topic
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig
        /// The identifier of the job.
        public let jobName: String?
        /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?

        public init(dataAccessRoleArn: String, numberOfTopics: Int32? = nil, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig, jobName: String? = nil, clientRequestToken: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.numberOfTopics = numberOfTopics
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
            self.jobName = jobName
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case numberOfTopics = "NumberOfTopics"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
            case jobName = "JobName"
            case clientRequestToken = "ClientRequestToken"
        }
    }

    public struct CreateEntityRecognizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityRecognizerArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public let entityRecognizerArn: String?

        public init(entityRecognizerArn: String? = nil) {
            self.entityRecognizerArn = entityRecognizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case entityRecognizerArn = "EntityRecognizerArn"
        }
    }

    public struct EntityRecognizerMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberOfTestDocuments", required: false, type: .integer), 
            AWSShapeMember(label: "EvaluationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "NumberOfTrainedDocuments", required: false, type: .integer), 
            AWSShapeMember(label: "EntityTypes", required: false, type: .list)
        ]
        ///  The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.
        public let numberOfTestDocuments: Int32?
        ///  Detailed information about the accuracy of an entity recognizer.
        public let evaluationMetrics: EntityRecognizerEvaluationMetrics?
        ///  The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.
        public let numberOfTrainedDocuments: Int32?
        /// Entity types from the metadata of an entity recognizer.
        public let entityTypes: [EntityRecognizerMetadataEntityTypesListItem]?

        public init(numberOfTestDocuments: Int32? = nil, evaluationMetrics: EntityRecognizerEvaluationMetrics? = nil, numberOfTrainedDocuments: Int32? = nil, entityTypes: [EntityRecognizerMetadataEntityTypesListItem]? = nil) {
            self.numberOfTestDocuments = numberOfTestDocuments
            self.evaluationMetrics = evaluationMetrics
            self.numberOfTrainedDocuments = numberOfTrainedDocuments
            self.entityTypes = entityTypes
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfTestDocuments = "NumberOfTestDocuments"
            case evaluationMetrics = "EvaluationMetrics"
            case numberOfTrainedDocuments = "NumberOfTrainedDocuments"
            case entityTypes = "EntityTypes"
        }
    }

    public struct DetectKeyPhrasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrases", required: false, type: .list)
        ]
        /// A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. 
        public let keyPhrases: [KeyPhrase]?

        public init(keyPhrases: [KeyPhrase]? = nil) {
            self.keyPhrases = keyPhrases
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrases = "KeyPhrases"
        }
    }

    public struct EntityRecognizerProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "TrainingEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "RecognizerMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "EntityRecognizerArn", required: false, type: .string), 
            AWSShapeMember(label: "TrainingStartTime", required: false, type: .timestamp)
        ]
        /// The time that the recognizer creation completed.
        public let endTime: TimeStamp?
        ///  The language of the input documents. All documents must be in the same language. Only English ("en") is currently supported.
        public let languageCode: LanguageCode?
        ///  A description of the status of the recognizer.
        public let message: String?
        /// The time that training of the entity recognizer was completed.
        public let trainingEndTime: TimeStamp?
        /// Provides the status of the entity recognizer.
        public let status: ModelStatus?
        /// The input data properties of an entity recognizer.
        public let inputDataConfig: EntityRecognizerInputDataConfig?
        /// The time that the recognizer was submitted for processing.
        public let submitTime: TimeStamp?
        ///  The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        ///  Provides information about an entity recognizer.
        public let recognizerMetadata: EntityRecognizerMetadata?
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public let entityRecognizerArn: String?
        /// The time that training of the entity recognizer started.
        public let trainingStartTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, message: String? = nil, trainingEndTime: TimeStamp? = nil, status: ModelStatus? = nil, inputDataConfig: EntityRecognizerInputDataConfig? = nil, submitTime: TimeStamp? = nil, dataAccessRoleArn: String? = nil, recognizerMetadata: EntityRecognizerMetadata? = nil, entityRecognizerArn: String? = nil, trainingStartTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.languageCode = languageCode
            self.message = message
            self.trainingEndTime = trainingEndTime
            self.status = status
            self.inputDataConfig = inputDataConfig
            self.submitTime = submitTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.recognizerMetadata = recognizerMetadata
            self.entityRecognizerArn = entityRecognizerArn
            self.trainingStartTime = trainingStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case languageCode = "LanguageCode"
            case message = "Message"
            case trainingEndTime = "TrainingEndTime"
            case status = "Status"
            case inputDataConfig = "InputDataConfig"
            case submitTime = "SubmitTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case recognizerMetadata = "RecognizerMetadata"
            case entityRecognizerArn = "EntityRecognizerArn"
            case trainingStartTime = "TrainingStartTime"
        }
    }

    public struct StartDominantLanguageDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig
        /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// An identifier for the job.
        public let jobName: String?

        public init(dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig, clientRequestToken: String? = nil, jobName: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
        }
    }

    public struct DocumentClassificationJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DocumentClassifierArn", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure)
        ]
        /// The time that the document classification job completed.
        public let endTime: TimeStamp?
        /// The Amazon Resource Name (ARN) that identifies the document classifier. 
        public let documentClassifierArn: String?
        /// A description of the status of the job.
        public let message: String?
        /// The name that you assigned to the document classification job.
        public let jobName: String?
        /// The input data configuration that you supplied when you created the document classification job.
        public let inputDataConfig: InputDataConfig?
        /// The identifier assigned to the document classification job.
        public let jobId: String?
        /// The time that the document classification job was submitted for processing.
        public let submitTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The current status of the document classification job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The output data configuration that you supplied when you created the document classification job.
        public let outputDataConfig: OutputDataConfig?

        public init(endTime: TimeStamp? = nil, documentClassifierArn: String? = nil, message: String? = nil, jobName: String? = nil, inputDataConfig: InputDataConfig? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil, dataAccessRoleArn: String? = nil, jobStatus: JobStatus? = nil, outputDataConfig: OutputDataConfig? = nil) {
            self.endTime = endTime
            self.documentClassifierArn = documentClassifierArn
            self.message = message
            self.jobName = jobName
            self.inputDataConfig = inputDataConfig
            self.jobId = jobId
            self.submitTime = submitTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.jobStatus = jobStatus
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case documentClassifierArn = "DocumentClassifierArn"
            case message = "Message"
            case jobName = "JobName"
            case inputDataConfig = "InputDataConfig"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case jobStatus = "JobStatus"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public struct PartOfSpeechTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .enum), 
            AWSShapeMember(label: "Score", required: false, type: .float)
        ]
        /// Identifies the part of speech that the token represents.
        public let tag: PartOfSpeechTagType?
        /// The confidence that Amazon Comprehend has that the part of speech was correctly identified.
        public let score: Float?

        public init(tag: PartOfSpeechTagType? = nil, score: Float? = nil) {
            self.tag = tag
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case score = "Score"
        }
    }

    public struct OutputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        /// When you use the OutputDataConfig object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file. When the topic detection job is finished, the service creates an output file in a directory specific to the job. The S3Uri field contains the location of the output file, called output.tar.gz. It is a compressed archive that contains the ouput of the operation.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct BatchItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// A text description of the error.
        public let errorMessage: String?
        /// The numeric error code of the error.
        public let errorCode: String?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(errorMessage: String? = nil, errorCode: String? = nil, index: Int32? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case index = "Index"
        }
    }

    public struct TopicsDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "NumberOfTopics", required: false, type: .integer), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure)
        ]
        /// The time that the topic detection job was completed.
        public let endTime: TimeStamp?
        /// The name of the topic detection job.
        public let jobName: String?
        /// A description for the status of a job.
        public let message: String?
        /// The input data configuration supplied when you created the topic detection job.
        public let inputDataConfig: InputDataConfig?
        /// The time that the topic detection job was submitted for processing.
        public let submitTime: TimeStamp?
        /// The identifier assigned to the topic detection job.
        public let jobId: String?
        /// The current status of the topic detection job. If the status is Failed, the reason for the failure is shown in the Message field.
        public let jobStatus: JobStatus?
        /// The number of topics to detect supplied when you created the topic detection job. The default is 10. 
        public let numberOfTopics: Int32?
        /// The output data configuration supplied when you created the topic detection job.
        public let outputDataConfig: OutputDataConfig?

        public init(endTime: TimeStamp? = nil, jobName: String? = nil, message: String? = nil, inputDataConfig: InputDataConfig? = nil, submitTime: TimeStamp? = nil, jobId: String? = nil, jobStatus: JobStatus? = nil, numberOfTopics: Int32? = nil, outputDataConfig: OutputDataConfig? = nil) {
            self.endTime = endTime
            self.jobName = jobName
            self.message = message
            self.inputDataConfig = inputDataConfig
            self.submitTime = submitTime
            self.jobId = jobId
            self.jobStatus = jobStatus
            self.numberOfTopics = numberOfTopics
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case jobName = "JobName"
            case message = "Message"
            case inputDataConfig = "InputDataConfig"
            case submitTime = "SubmitTime"
            case jobId = "JobId"
            case jobStatus = "JobStatus"
            case numberOfTopics = "NumberOfTopics"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public enum InputFormat: String, CustomStringConvertible, Codable {
        case oneDocPerFile = "ONE_DOC_PER_FILE"
        case oneDocPerLine = "ONE_DOC_PER_LINE"
        public var description: String { return self.rawValue }
    }

    public struct BatchDetectSyntaxRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: SyntaxLanguageCode

        public init(textList: [String], languageCode: SyntaxLanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct DetectDominantLanguageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// A UTF-8 text string. Each string should contain at least 20 characters and must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(text: String) {
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    public struct StartTopicsDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job:    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the DescribeTopicDetectionJob operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of the job, use this identifier with the DescribeTopicDetectionJob operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct ClassifierMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberOfTestDocuments", required: false, type: .integer), 
            AWSShapeMember(label: "NumberOfLabels", required: false, type: .integer), 
            AWSShapeMember(label: "EvaluationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "NumberOfTrainedDocuments", required: false, type: .integer)
        ]
        /// The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents.
        public let numberOfTestDocuments: Int32?
        /// The number of labels in the input data. 
        public let numberOfLabels: Int32?
        ///  Describes the result metrics for the test data associated with an documentation classifier.
        public let evaluationMetrics: ClassifierEvaluationMetrics?
        /// The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.
        public let numberOfTrainedDocuments: Int32?

        public init(numberOfTestDocuments: Int32? = nil, numberOfLabels: Int32? = nil, evaluationMetrics: ClassifierEvaluationMetrics? = nil, numberOfTrainedDocuments: Int32? = nil) {
            self.numberOfTestDocuments = numberOfTestDocuments
            self.numberOfLabels = numberOfLabels
            self.evaluationMetrics = evaluationMetrics
            self.numberOfTrainedDocuments = numberOfTrainedDocuments
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfTestDocuments = "NumberOfTestDocuments"
            case numberOfLabels = "NumberOfLabels"
            case evaluationMetrics = "EvaluationMetrics"
            case numberOfTrainedDocuments = "NumberOfTrainedDocuments"
        }
    }

    public struct StartKeyPhrasesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?

        public init(dataAccessRoleArn: String, languageCode: LanguageCode, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig, clientRequestToken: String? = nil, jobName: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.languageCode = languageCode
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case languageCode = "LanguageCode"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
        }
    }

    public struct StopKeyPhrasesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the key phrases detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct EntityTypesListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]
        /// Entity type of an item on an entity type list.
        public let `type`: String

        public init(type: String) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct ListEntityRecognizersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityRecognizerPropertiesList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of properties of an entity recognizer.
        public let entityRecognizerPropertiesList: [EntityRecognizerProperties]?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(entityRecognizerPropertiesList: [EntityRecognizerProperties]? = nil, nextToken: String? = nil) {
            self.entityRecognizerPropertiesList = entityRecognizerPropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entityRecognizerPropertiesList = "EntityRecognizerPropertiesList"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDocumentClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "DocumentClassifierName", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String
        /// The name of the document classifier.
        public let documentClassifierName: String
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: DocumentClassifierInputDataConfig
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?

        public init(dataAccessRoleArn: String, documentClassifierName: String, languageCode: LanguageCode, inputDataConfig: DocumentClassifierInputDataConfig, clientRequestToken: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.documentClassifierName = documentClassifierName
            self.languageCode = languageCode
            self.inputDataConfig = inputDataConfig
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case documentClassifierName = "DocumentClassifierName"
            case languageCode = "LanguageCode"
            case inputDataConfig = "InputDataConfig"
            case clientRequestToken = "ClientRequestToken"
        }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case stopRequested = "STOP_REQUESTED"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public struct ListDocumentClassificationJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassificationJobPropertiesList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list containing the properties of each job returned.
        public let documentClassificationJobPropertiesList: [DocumentClassificationJobProperties]?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(documentClassificationJobPropertiesList: [DocumentClassificationJobProperties]? = nil, nextToken: String? = nil) {
            self.documentClassificationJobPropertiesList = documentClassificationJobPropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassificationJobPropertiesList = "DocumentClassificationJobPropertiesList"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetectKeyPhrasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectKeyPhrasesItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectKeyPhrasesItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct DescribeEntityRecognizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityRecognizerProperties", required: false, type: .structure)
        ]
        /// Describes information associated with an entity recognizer.
        public let entityRecognizerProperties: EntityRecognizerProperties?

        public init(entityRecognizerProperties: EntityRecognizerProperties? = nil) {
            self.entityRecognizerProperties = entityRecognizerProperties
        }

        private enum CodingKeys: String, CodingKey {
            case entityRecognizerProperties = "EntityRecognizerProperties"
        }
    }

    public struct ListEntitiesDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: EntitiesDetectionJobFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: EntitiesDetectionJobFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct DetectSyntaxRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded characters.
        public let text: String
        /// The language code of the input documents. You can specify English ("en") or Spanish ("es").
        public let languageCode: SyntaxLanguageCode

        public init(text: String, languageCode: SyntaxLanguageCode) {
            self.text = text
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case languageCode = "LanguageCode"
        }
    }

    public struct DominantLanguageDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure)
        ]
        /// The time that the dominant language detection job completed.
        public let endTime: TimeStamp?
        /// The name that you assigned to the dominant language detection job.
        public let jobName: String?
        /// A description for the status of a job.
        public let message: String?
        /// The input data configuration that you supplied when you created the dominant language detection job.
        public let inputDataConfig: InputDataConfig?
        /// The time that the dominant language detection job was submitted for processing.
        public let submitTime: TimeStamp?
        /// The identifier assigned to the dominant language detection job.
        public let jobId: String?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The current status of the dominant language detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The output data configuration that you supplied when you created the dominant language detection job.
        public let outputDataConfig: OutputDataConfig?

        public init(endTime: TimeStamp? = nil, jobName: String? = nil, message: String? = nil, inputDataConfig: InputDataConfig? = nil, submitTime: TimeStamp? = nil, jobId: String? = nil, dataAccessRoleArn: String? = nil, jobStatus: JobStatus? = nil, outputDataConfig: OutputDataConfig? = nil) {
            self.endTime = endTime
            self.jobName = jobName
            self.message = message
            self.inputDataConfig = inputDataConfig
            self.submitTime = submitTime
            self.jobId = jobId
            self.dataAccessRoleArn = dataAccessRoleArn
            self.jobStatus = jobStatus
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case jobName = "JobName"
            case message = "Message"
            case inputDataConfig = "InputDataConfig"
            case submitTime = "SubmitTime"
            case jobId = "JobId"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case jobStatus = "JobStatus"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public struct BatchDetectEntitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(textList: [String], languageCode: LanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct DescribeDominantLanguageDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DominantLanguageDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a dominant language detection job.
        public let dominantLanguageDetectionJobProperties: DominantLanguageDetectionJobProperties?

        public init(dominantLanguageDetectionJobProperties: DominantLanguageDetectionJobProperties? = nil) {
            self.dominantLanguageDetectionJobProperties = dominantLanguageDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case dominantLanguageDetectionJobProperties = "DominantLanguageDetectionJobProperties"
        }
    }

    public struct DescribeDocumentClassificationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassificationJobProperties", required: false, type: .structure)
        ]
        /// An object that describes the properties associated with the document classification job.
        public let documentClassificationJobProperties: DocumentClassificationJobProperties?

        public init(documentClassificationJobProperties: DocumentClassificationJobProperties? = nil) {
            self.documentClassificationJobProperties = documentClassificationJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassificationJobProperties = "DocumentClassificationJobProperties"
        }
    }

    public struct EntityRecognizerFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeBefore: TimeStamp?
        /// The status of an entity recognizer.
        public let status: ModelStatus?

        public init(submitTimeAfter: TimeStamp? = nil, submitTimeBefore: TimeStamp? = nil, status: ModelStatus? = nil) {
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeAfter = "SubmitTimeAfter"
            case submitTimeBefore = "SubmitTimeBefore"
            case status = "Status"
        }
    }

    public struct EntityRecognizerEvaluationMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Recall", required: false, type: .double), 
            AWSShapeMember(label: "Precision", required: false, type: .double), 
            AWSShapeMember(label: "F1Score", required: false, type: .double)
        ]
        /// A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.
        public let recall: Double?
        /// A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. 
        public let precision: Double?
        /// A measure of how accurate the recognizer results are for the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. 
        public let f1Score: Double?

        public init(recall: Double? = nil, precision: Double? = nil, f1Score: Double? = nil) {
            self.recall = recall
            self.precision = precision
            self.f1Score = f1Score
        }

        private enum CodingKeys: String, CodingKey {
            case recall = "Recall"
            case precision = "Precision"
            case f1Score = "F1Score"
        }
    }

    public struct StopDominantLanguageDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the dominant language detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DetectSentimentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(text: String, languageCode: LanguageCode) {
            self.text = text
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case languageCode = "LanguageCode"
        }
    }

    public struct DominantLanguageDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters on the name of the job.
        public let jobName: String?

        public init(submitTimeBefore: TimeStamp? = nil, submitTimeAfter: TimeStamp? = nil, jobStatus: JobStatus? = nil, jobName: String? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.submitTimeAfter = submitTimeAfter
            self.jobStatus = jobStatus
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobStatus = "JobStatus"
            case jobName = "JobName"
        }
    }

    public struct KeyPhrasesDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters on the name of the job.
        public let jobName: String?

        public init(submitTimeBefore: TimeStamp? = nil, submitTimeAfter: TimeStamp? = nil, jobStatus: JobStatus? = nil, jobName: String? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.submitTimeAfter = submitTimeAfter
            self.jobStatus = jobStatus
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobStatus = "JobStatus"
            case jobName = "JobName"
        }
    }

    public struct DocumentClassifierProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentClassifierArn", required: false, type: .string), 
            AWSShapeMember(label: "TrainingEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ClassifierMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "TrainingStartTime", required: false, type: .timestamp)
        ]
        /// The time that training the document classifier completed.
        public let endTime: TimeStamp?
        /// The language code for the language of the documents that the classifier was trained on.
        public let languageCode: LanguageCode?
        /// The Amazon Resource Name (ARN) that identifies the document classifier.
        public let documentClassifierArn: String?
        /// The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.
        public let trainingEndTime: TimeStamp?
        /// Additional information about the status of the classifier.
        public let message: String?
        /// The status of the document classifier. The the status is TRAINED the classifier is ready to use. If the status is FAILED you can see additional information about why the classifier wasn't trained in the Message field.
        public let status: ModelStatus?
        /// The input data configuration that you supplied when you created the document classifier for training.
        public let inputDataConfig: DocumentClassifierInputDataConfig?
        /// The time that the document classifier was submitted for training.
        public let submitTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.
        public let classifierMetadata: ClassifierMetadata?
        /// Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. 
        public let trainingStartTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, documentClassifierArn: String? = nil, trainingEndTime: TimeStamp? = nil, message: String? = nil, status: ModelStatus? = nil, inputDataConfig: DocumentClassifierInputDataConfig? = nil, submitTime: TimeStamp? = nil, dataAccessRoleArn: String? = nil, classifierMetadata: ClassifierMetadata? = nil, trainingStartTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.languageCode = languageCode
            self.documentClassifierArn = documentClassifierArn
            self.trainingEndTime = trainingEndTime
            self.message = message
            self.status = status
            self.inputDataConfig = inputDataConfig
            self.submitTime = submitTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.classifierMetadata = classifierMetadata
            self.trainingStartTime = trainingStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case languageCode = "LanguageCode"
            case documentClassifierArn = "DocumentClassifierArn"
            case trainingEndTime = "TrainingEndTime"
            case message = "Message"
            case status = "Status"
            case inputDataConfig = "InputDataConfig"
            case submitTime = "SubmitTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case classifierMetadata = "ClassifierMetadata"
            case trainingStartTime = "TrainingStartTime"
        }
    }

    public struct DescribeKeyPhrasesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct BatchDetectEntitiesItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entities", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more Entity objects, one for each entity detected in the document.
        public let entities: [Entity]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(entities: [Entity]? = nil, index: Int32? = nil) {
            self.entities = entities
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "Entities"
            case index = "Index"
        }
    }

    public struct KeyPhrase: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Score", required: false, type: .float), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?
        /// A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let endOffset: Int32?
        /// The text of a key noun phrase.
        public let text: String?
        /// A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let beginOffset: Int32?

        public init(score: Float? = nil, endOffset: Int32? = nil, text: String? = nil, beginOffset: Int32? = nil) {
            self.score = score
            self.endOffset = endOffset
            self.text = text
            self.beginOffset = beginOffset
        }

        private enum CodingKeys: String, CodingKey {
            case score = "Score"
            case endOffset = "EndOffset"
            case text = "Text"
            case beginOffset = "BeginOffset"
        }
    }

    public struct CreateEntityRecognizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "RecognizerName", required: true, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String
        ///  The language of the input documents. All documents must be in the same language. Only English ("en") is currently supported. 
        public let languageCode: LanguageCode
        /// The name given to the newly created recognizer. Recognizer names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name must be unique in the account/region.
        public let recognizerName: String
        /// Specifies the format and location of the input data. The S3 bucket containing the input data must be located in the same region as the entity recognizer being created. 
        public let inputDataConfig: EntityRecognizerInputDataConfig
        ///  A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?

        public init(dataAccessRoleArn: String, languageCode: LanguageCode, recognizerName: String, inputDataConfig: EntityRecognizerInputDataConfig, clientRequestToken: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.languageCode = languageCode
            self.recognizerName = recognizerName
            self.inputDataConfig = inputDataConfig
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case languageCode = "LanguageCode"
            case recognizerName = "RecognizerName"
            case inputDataConfig = "InputDataConfig"
            case clientRequestToken = "ClientRequestToken"
        }
    }

    public struct StartKeyPhrasesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct EntityRecognizerMetadataEntityTypesListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// Type of entity from the list of entity types in the metadata of an entity recognizer. 
        public let `type`: String?

        public init(type: String? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct DescribeEntitiesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntitiesDetectionJobProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with an entities detection job.
        public let entitiesDetectionJobProperties: EntitiesDetectionJobProperties?

        public init(entitiesDetectionJobProperties: EntitiesDetectionJobProperties? = nil) {
            self.entitiesDetectionJobProperties = entitiesDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case entitiesDetectionJobProperties = "EntitiesDetectionJobProperties"
        }
    }

    public struct DetectKeyPhrasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(text: String, languageCode: LanguageCode) {
            self.text = text
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case languageCode = "LanguageCode"
        }
    }

    public enum ModelStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case training = "TRAINING"
        case deleting = "DELETING"
        case inError = "IN_ERROR"
        case trained = "TRAINED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDocumentClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassifierArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the document classifier. 
        public let documentClassifierArn: String

        public init(documentClassifierArn: String) {
            self.documentClassifierArn = documentClassifierArn
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassifierArn = "DocumentClassifierArn"
        }
    }

    public struct BatchDetectEntitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectEntitiesItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectEntitiesItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct ListDominantLanguageDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: DominantLanguageDetectionJobFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: DominantLanguageDetectionJobFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetectSentimentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectSentimentItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectSentimentItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct ListKeyPhrasesDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: KeyPhrasesDetectionJobFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: KeyPhrasesDetectionJobFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct EntitiesDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "EntityRecognizerArn", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure)
        ]
        /// The time that the entities detection job completed
        public let endTime: TimeStamp?
        /// The language code of the input documents.
        public let languageCode: LanguageCode?
        /// A description of the status of a job.
        public let message: String?
        /// The name that you assigned the entities detection job.
        public let jobName: String?
        /// The input data configuration that you supplied when you created the entities detection job.
        public let inputDataConfig: InputDataConfig?
        /// The identifier assigned to the entities detection job.
        public let jobId: String?
        /// The time that the entities detection job was submitted for processing.
        public let submitTime: TimeStamp?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public let entityRecognizerArn: String?
        /// The current status of the entities detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The output data configuration that you supplied when you created the entities detection job. 
        public let outputDataConfig: OutputDataConfig?

        public init(endTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, message: String? = nil, jobName: String? = nil, inputDataConfig: InputDataConfig? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil, dataAccessRoleArn: String? = nil, entityRecognizerArn: String? = nil, jobStatus: JobStatus? = nil, outputDataConfig: OutputDataConfig? = nil) {
            self.endTime = endTime
            self.languageCode = languageCode
            self.message = message
            self.jobName = jobName
            self.inputDataConfig = inputDataConfig
            self.jobId = jobId
            self.submitTime = submitTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.entityRecognizerArn = entityRecognizerArn
            self.jobStatus = jobStatus
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case languageCode = "LanguageCode"
            case message = "Message"
            case jobName = "JobName"
            case inputDataConfig = "InputDataConfig"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case entityRecognizerArn = "EntityRecognizerArn"
            case jobStatus = "JobStatus"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public struct ListKeyPhrasesDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "KeyPhrasesDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let keyPhrasesDetectionJobPropertiesList: [KeyPhrasesDetectionJobProperties]?

        public init(nextToken: String? = nil, keyPhrasesDetectionJobPropertiesList: [KeyPhrasesDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.keyPhrasesDetectionJobPropertiesList = keyPhrasesDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case keyPhrasesDetectionJobPropertiesList = "KeyPhrasesDetectionJobPropertiesList"
        }
    }

    public enum SentimentType: String, CustomStringConvertible, Codable {
        case positive = "POSITIVE"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case mixed = "MIXED"
        public var description: String { return self.rawValue }
    }

    public enum SyntaxLanguageCode: String, CustomStringConvertible, Codable {
        case en = "en"
        case es = "es"
        case fr = "fr"
        case de = "de"
        case it = "it"
        case pt = "pt"
        public var description: String { return self.rawValue }
    }

    public struct ClassifierEvaluationMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Recall", required: false, type: .double), 
            AWSShapeMember(label: "Precision", required: false, type: .double), 
            AWSShapeMember(label: "Accuracy", required: false, type: .double), 
            AWSShapeMember(label: "F1Score", required: false, type: .double)
        ]
        /// A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. 
        public let recall: Double?
        /// A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.
        public let precision: Double?
        /// The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.
        public let accuracy: Double?
        /// A measure of how accurate the classifier results are for the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. 
        public let f1Score: Double?

        public init(recall: Double? = nil, precision: Double? = nil, accuracy: Double? = nil, f1Score: Double? = nil) {
            self.recall = recall
            self.precision = precision
            self.accuracy = accuracy
            self.f1Score = f1Score
        }

        private enum CodingKeys: String, CodingKey {
            case recall = "Recall"
            case precision = "Precision"
            case accuracy = "Accuracy"
            case f1Score = "F1Score"
        }
    }

    public enum EntityType: String, CustomStringConvertible, Codable {
        case person = "PERSON"
        case location = "LOCATION"
        case organization = "ORGANIZATION"
        case commercialItem = "COMMERCIAL_ITEM"
        case event = "EVENT"
        case date = "DATE"
        case quantity = "QUANTITY"
        case title = "TITLE"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDocumentClassifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassifierProperties", required: false, type: .structure)
        ]
        /// An object that contains the properties associated with a document classifier.
        public let documentClassifierProperties: DocumentClassifierProperties?

        public init(documentClassifierProperties: DocumentClassifierProperties? = nil) {
            self.documentClassifierProperties = documentClassifierProperties
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassifierProperties = "DocumentClassifierProperties"
        }
    }

    public struct BatchDetectSyntaxItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "SyntaxTokens", required: false, type: .list)
        ]
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// The syntax tokens for the words in the document, one token for each word.
        public let syntaxTokens: [SyntaxToken]?

        public init(index: Int32? = nil, syntaxTokens: [SyntaxToken]? = nil) {
            self.index = index
            self.syntaxTokens = syntaxTokens
        }

        private enum CodingKeys: String, CodingKey {
            case index = "Index"
            case syntaxTokens = "SyntaxTokens"
        }
    }

    public struct DetectSyntaxResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyntaxTokens", required: false, type: .list)
        ]
        /// A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see how-syntax.
        public let syntaxTokens: [SyntaxToken]?

        public init(syntaxTokens: [SyntaxToken]? = nil) {
            self.syntaxTokens = syntaxTokens
        }

        private enum CodingKeys: String, CodingKey {
            case syntaxTokens = "SyntaxTokens"
        }
    }

    public struct ListDominantLanguageDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DominantLanguageDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let dominantLanguageDetectionJobPropertiesList: [DominantLanguageDetectionJobProperties]?

        public init(nextToken: String? = nil, dominantLanguageDetectionJobPropertiesList: [DominantLanguageDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.dominantLanguageDetectionJobPropertiesList = dominantLanguageDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case dominantLanguageDetectionJobPropertiesList = "DominantLanguageDetectionJobPropertiesList"
        }
    }

    public struct BatchDetectDominantLanguageItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Languages", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more DominantLanguage objects describing the dominant languages in the document.
        public let languages: [DominantLanguage]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(languages: [DominantLanguage]? = nil, index: Int32? = nil) {
            self.languages = languages
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "Languages"
            case index = "Index"
        }
    }

    public struct DescribeDocumentClassificationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct SentimentScore: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mixed", required: false, type: .float), 
            AWSShapeMember(label: "Positive", required: false, type: .float), 
            AWSShapeMember(label: "Negative", required: false, type: .float), 
            AWSShapeMember(label: "Neutral", required: false, type: .float)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public let mixed: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public let positive: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public let negative: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public let neutral: Float?

        public init(mixed: Float? = nil, positive: Float? = nil, negative: Float? = nil, neutral: Float? = nil) {
            self.mixed = mixed
            self.positive = positive
            self.negative = negative
            self.neutral = neutral
        }

        private enum CodingKeys: String, CodingKey {
            case mixed = "Mixed"
            case positive = "Positive"
            case negative = "Negative"
            case neutral = "Neutral"
        }
    }

    public struct SyntaxToken: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartOfSpeech", required: false, type: .structure), 
            AWSShapeMember(label: "TokenId", required: false, type: .integer), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer)
        ]
        /// Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see how-syntax.
        public let partOfSpeech: PartOfSpeechTag?
        /// A unique identifier for a token.
        public let tokenId: Int32?
        /// The zero-based offset from the beginning of the source text to the last character in the word.
        public let endOffset: Int32?
        /// The word that was recognized in the source text.
        public let text: String?
        /// The zero-based offset from the beginning of the source text to the first character in the word.
        public let beginOffset: Int32?

        public init(partOfSpeech: PartOfSpeechTag? = nil, tokenId: Int32? = nil, endOffset: Int32? = nil, text: String? = nil, beginOffset: Int32? = nil) {
            self.partOfSpeech = partOfSpeech
            self.tokenId = tokenId
            self.endOffset = endOffset
            self.text = text
            self.beginOffset = beginOffset
        }

        private enum CodingKeys: String, CodingKey {
            case partOfSpeech = "PartOfSpeech"
            case tokenId = "TokenId"
            case endOffset = "EndOffset"
            case text = "Text"
            case beginOffset = "BeginOffset"
        }
    }

    public struct ListEntityRecognizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        ///  The maximum number of results to return on each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the list of entities returned. You can filter on Status, SubmitTimeBefore, or SubmitTimeAfter. You can only set one filter at a time.
        public let filter: EntityRecognizerFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: EntityRecognizerFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetectKeyPhrasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(textList: [String], languageCode: LanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct StopSentimentDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopSentimentDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the sentiment detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct DominantLanguage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: false, type: .string), 
            AWSShapeMember(label: "Score", required: false, type: .float)
        ]
        /// The RFC 5646 language code for the dominant language. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languageCode: String?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?

        public init(languageCode: String? = nil, score: Float? = nil) {
            self.languageCode = languageCode
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case score = "Score"
        }
    }

    public struct CreateDocumentClassifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassifierArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the document classifier.
        public let documentClassifierArn: String?

        public init(documentClassifierArn: String? = nil) {
            self.documentClassifierArn = documentClassifierArn
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassifierArn = "DocumentClassifierArn"
        }
    }

    public struct Entity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Score", required: false, type: .float), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer)
        ]
        /// The entity's type.
        public let `type`: EntityType?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?
        /// A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. 
        public let endOffset: Int32?
        /// The text of the entity.
        public let text: String?
        /// A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let beginOffset: Int32?

        public init(type: EntityType? = nil, score: Float? = nil, endOffset: Int32? = nil, text: String? = nil, beginOffset: Int32? = nil) {
            self.`type` = `type`
            self.score = score
            self.endOffset = endOffset
            self.text = text
            self.beginOffset = beginOffset
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case score = "Score"
            case endOffset = "EndOffset"
            case text = "Text"
            case beginOffset = "BeginOffset"
        }
    }

    public struct EntityRecognizerDocuments: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        ///  Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct DescribeTopicsDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier assigned by the user to the detection job.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DetectSentimentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sentiment", required: false, type: .enum), 
            AWSShapeMember(label: "SentimentScore", required: false, type: .structure)
        ]
        /// The inferred sentiment that Amazon Comprehend has the highest level of confidence in.
        public let sentiment: SentimentType?
        /// An object that lists the sentiments, and their corresponding confidence levels.
        public let sentimentScore: SentimentScore?

        public init(sentiment: SentimentType? = nil, sentimentScore: SentimentScore? = nil) {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }

        private enum CodingKeys: String, CodingKey {
            case sentiment = "Sentiment"
            case sentimentScore = "SentimentScore"
        }
    }

    public struct ListEntitiesDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EntitiesDetectionJobPropertiesList", required: false, type: .list)
        ]
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// A list containing the properties of each job that is returned.
        public let entitiesDetectionJobPropertiesList: [EntitiesDetectionJobProperties]?

        public init(nextToken: String? = nil, entitiesDetectionJobPropertiesList: [EntitiesDetectionJobProperties]? = nil) {
            self.nextToken = nextToken
            self.entitiesDetectionJobPropertiesList = entitiesDetectionJobPropertiesList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case entitiesDetectionJobPropertiesList = "EntitiesDetectionJobPropertiesList"
        }
    }

    public struct DescribeEntitiesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct StartEntitiesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "EntityRecognizerArn", required: false, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure)
        ]
        /// The language of the input documents. All documents must be in the same language. You can specify any of the languages supported by Amazon Comprehend: English ("en"), Spanish ("es"), French ("fr"), German ("de"), Italian ("it"), or Portuguese ("pt"). If custom entities recognition is used, this parameter is ignored and the language used for training the model is used instead.
        public let languageCode: LanguageCode
        /// The identifier of the job.
        public let jobName: String?
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used by the StartEntitiesDetectionJob. This ARN is optional and is only used for a custom entity recognition job.
        public let entityRecognizerArn: String?
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig

        public init(languageCode: LanguageCode, jobName: String? = nil, inputDataConfig: InputDataConfig, dataAccessRoleArn: String, clientRequestToken: String? = nil, entityRecognizerArn: String? = nil, outputDataConfig: OutputDataConfig) {
            self.languageCode = languageCode
            self.jobName = jobName
            self.inputDataConfig = inputDataConfig
            self.dataAccessRoleArn = dataAccessRoleArn
            self.clientRequestToken = clientRequestToken
            self.entityRecognizerArn = entityRecognizerArn
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case jobName = "JobName"
            case inputDataConfig = "InputDataConfig"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case clientRequestToken = "ClientRequestToken"
            case entityRecognizerArn = "EntityRecognizerArn"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public struct TopicsDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        public let jobName: String?

        public init(submitTimeBefore: TimeStamp? = nil, submitTimeAfter: TimeStamp? = nil, jobStatus: JobStatus? = nil, jobName: String? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.submitTimeAfter = submitTimeAfter
            self.jobStatus = jobStatus
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobStatus = "JobStatus"
            case jobName = "JobName"
        }
    }

    public struct BatchDetectDominantLanguageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectDominantLanguageItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectDominantLanguageItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct KeyPhrasesDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure)
        ]
        /// The time that the key phrases detection job completed.
        public let endTime: TimeStamp?
        /// The language code of the input documents.
        public let languageCode: LanguageCode?
        /// A description of the status of a job.
        public let message: String?
        /// The name that you assigned the key phrases detection job.
        public let jobName: String?
        /// The input data configuration that you supplied when you created the key phrases detection job.
        public let inputDataConfig: InputDataConfig?
        /// The identifier assigned to the key phrases detection job.
        public let jobId: String?
        /// The time that the key phrases detection job was submitted for processing.
        public let submitTime: TimeStamp?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The current status of the key phrases detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The output data configuration that you supplied when you created the key phrases detection job.
        public let outputDataConfig: OutputDataConfig?

        public init(endTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, message: String? = nil, jobName: String? = nil, inputDataConfig: InputDataConfig? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil, dataAccessRoleArn: String? = nil, jobStatus: JobStatus? = nil, outputDataConfig: OutputDataConfig? = nil) {
            self.endTime = endTime
            self.languageCode = languageCode
            self.message = message
            self.jobName = jobName
            self.inputDataConfig = inputDataConfig
            self.jobId = jobId
            self.submitTime = submitTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.jobStatus = jobStatus
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case languageCode = "LanguageCode"
            case message = "Message"
            case jobName = "JobName"
            case inputDataConfig = "InputDataConfig"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case jobStatus = "JobStatus"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public struct StopEntitiesDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the entities detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct EntityRecognizerAnnotations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        ///  Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct StopKeyPhrasesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopKeyPhrasesDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the key phrases detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct DeleteEntityRecognizerResponse: AWSShape {

    }

    public struct StopEntitiesDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopEntitiesDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the entities detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct BatchDetectKeyPhrasesItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrases", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more KeyPhrase objects, one for each key phrase detected in the document.
        public let keyPhrases: [KeyPhrase]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(keyPhrases: [KeyPhrase]? = nil, index: Int32? = nil) {
            self.keyPhrases = keyPhrases
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrases = "KeyPhrases"
            case index = "Index"
        }
    }

    public struct BatchDetectSentimentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode

        public init(textList: [String], languageCode: LanguageCode) {
            self.textList = textList
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
            case languageCode = "LanguageCode"
        }
    }

    public struct DetectEntitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entities", required: false, type: .list)
        ]
        /// A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. For a list of entity types, see how-entities. 
        public let entities: [Entity]?

        public init(entities: [Entity]? = nil) {
            self.entities = entities
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "Entities"
        }
    }

    public struct ListDocumentClassificationJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the jobs that are returned. You can filter jobs on their names, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: DocumentClassificationJobFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: DocumentClassificationJobFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct DocumentClassifierFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of classifiers based on status. 
        public let status: ModelStatus?

        public init(submitTimeAfter: TimeStamp? = nil, submitTimeBefore: TimeStamp? = nil, status: ModelStatus? = nil) {
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeAfter = "SubmitTimeAfter"
            case submitTimeBefore = "SubmitTimeBefore"
            case status = "Status"
        }
    }

    public struct BatchDetectSyntaxResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectSyntaxItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectSyntaxItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct StopDominantLanguageDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopDominantLanguageDetectionJob operation.
        public let jobStatus: JobStatus?
        /// The identifier of the dominant language detection job to stop.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct SentimentDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters on the name of the job.
        public let jobName: String?

        public init(submitTimeBefore: TimeStamp? = nil, submitTimeAfter: TimeStamp? = nil, jobStatus: JobStatus? = nil, jobName: String? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.submitTimeAfter = submitTimeAfter
            self.jobStatus = jobStatus
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobStatus = "JobStatus"
            case jobName = "JobName"
        }
    }

    public struct DeleteEntityRecognizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityRecognizerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public let entityRecognizerArn: String

        public init(entityRecognizerArn: String) {
            self.entityRecognizerArn = entityRecognizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case entityRecognizerArn = "EntityRecognizerArn"
        }
    }

    public struct DescribeDocumentClassifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassifierArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the document classifier. The operation returns this identifier in its response.
        public let documentClassifierArn: String

        public init(documentClassifierArn: String) {
            self.documentClassifierArn = documentClassifierArn
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassifierArn = "DocumentClassifierArn"
        }
    }

    public struct ListSentimentDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SentimentDetectionJobPropertiesList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list containing the properties of each job that is returned.
        public let sentimentDetectionJobPropertiesList: [SentimentDetectionJobProperties]?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(sentimentDetectionJobPropertiesList: [SentimentDetectionJobProperties]? = nil, nextToken: String? = nil) {
            self.sentimentDetectionJobPropertiesList = sentimentDetectionJobPropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case sentimentDetectionJobPropertiesList = "SentimentDetectionJobPropertiesList"
            case nextToken = "NextToken"
        }
    }

    public struct StartSentimentDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions.
        public let dataAccessRoleArn: String
        /// The language of the input documents. You can specify English ("en") or Spanish ("es"). All documents must be in the same language.
        public let languageCode: LanguageCode
        /// Specifies where to send the output files. 
        public let outputDataConfig: OutputDataConfig
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig
        /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The identifier of the job.
        public let jobName: String?

        public init(dataAccessRoleArn: String, languageCode: LanguageCode, outputDataConfig: OutputDataConfig, inputDataConfig: InputDataConfig, clientRequestToken: String? = nil, jobName: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.languageCode = languageCode
            self.outputDataConfig = outputDataConfig
            self.inputDataConfig = inputDataConfig
            self.clientRequestToken = clientRequestToken
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case languageCode = "LanguageCode"
            case outputDataConfig = "OutputDataConfig"
            case inputDataConfig = "InputDataConfig"
            case clientRequestToken = "ClientRequestToken"
            case jobName = "JobName"
        }
    }

    public struct EntityRecognizerEntityList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        /// Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct InputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputFormat", required: false, type: .enum), 
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        /// Specifies how the text in an input file should be processed:    ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.    ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.  
        public let inputFormat: InputFormat?
        /// The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files.  For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
        public let s3Uri: String

        public init(inputFormat: InputFormat? = nil, s3Uri: String) {
            self.inputFormat = inputFormat
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case inputFormat = "InputFormat"
            case s3Uri = "S3Uri"
        }
    }

    public struct SentimentDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataAccessRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure)
        ]
        /// The time that the sentiment detection job ended.
        public let endTime: TimeStamp?
        /// The language code of the input documents.
        public let languageCode: LanguageCode?
        /// A description of the status of a job.
        public let message: String?
        /// The name that you assigned to the sentiment detection job
        public let jobName: String?
        /// The input data configuration that you supplied when you created the sentiment detection job.
        public let inputDataConfig: InputDataConfig?
        /// The identifier assigned to the sentiment detection job.
        public let jobId: String?
        /// The time that the sentiment detection job was submitted for processing.
        public let submitTime: TimeStamp?
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public let dataAccessRoleArn: String?
        /// The current status of the sentiment detection job. If the status is FAILED, the Messages field shows the reason for the failure.
        public let jobStatus: JobStatus?
        /// The output data configuration that you supplied when you created the sentiment detection job.
        public let outputDataConfig: OutputDataConfig?

        public init(endTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, message: String? = nil, jobName: String? = nil, inputDataConfig: InputDataConfig? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil, dataAccessRoleArn: String? = nil, jobStatus: JobStatus? = nil, outputDataConfig: OutputDataConfig? = nil) {
            self.endTime = endTime
            self.languageCode = languageCode
            self.message = message
            self.jobName = jobName
            self.inputDataConfig = inputDataConfig
            self.jobId = jobId
            self.submitTime = submitTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.jobStatus = jobStatus
            self.outputDataConfig = outputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case languageCode = "LanguageCode"
            case message = "Message"
            case jobName = "JobName"
            case inputDataConfig = "InputDataConfig"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case jobStatus = "JobStatus"
            case outputDataConfig = "OutputDataConfig"
        }
    }

    public struct DocumentClassifierInputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        /// The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files. For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct DescribeTopicsDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicsDetectionJobProperties", required: false, type: .structure)
        ]
        /// The list of properties for the requested job.
        public let topicsDetectionJobProperties: TopicsDetectionJobProperties?

        public init(topicsDetectionJobProperties: TopicsDetectionJobProperties? = nil) {
            self.topicsDetectionJobProperties = topicsDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case topicsDetectionJobProperties = "TopicsDetectionJobProperties"
        }
    }

    public struct ListDocumentClassifiersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in each page. The default is 100.
        public let maxResults: Int32?
        /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
        public let filter: DocumentClassifierFilter?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filter: DocumentClassifierFilter? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filter = "Filter"
            case nextToken = "NextToken"
        }
    }

    public struct EntitiesDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters on the name of the job.
        public let jobName: String?

        public init(submitTimeBefore: TimeStamp? = nil, submitTimeAfter: TimeStamp? = nil, jobStatus: JobStatus? = nil, jobName: String? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.submitTimeAfter = submitTimeAfter
            self.jobStatus = jobStatus
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobStatus = "JobStatus"
            case jobName = "JobName"
        }
    }

    public struct DocumentClassificationJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobName", required: false, type: .string)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeBefore: TimeStamp?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeAfter: TimeStamp?
        /// Filters the list based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters on the name of the job.
        public let jobName: String?

        public init(submitTimeBefore: TimeStamp? = nil, submitTimeAfter: TimeStamp? = nil, jobStatus: JobStatus? = nil, jobName: String? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.submitTimeAfter = submitTimeAfter
            self.jobStatus = jobStatus
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case submitTimeAfter = "SubmitTimeAfter"
            case jobStatus = "JobStatus"
            case jobName = "JobName"
        }
    }

    public struct DescribeEntityRecognizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntityRecognizerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public let entityRecognizerArn: String

        public init(entityRecognizerArn: String) {
            self.entityRecognizerArn = entityRecognizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case entityRecognizerArn = "EntityRecognizerArn"
        }
    }

    public enum PartOfSpeechTagType: String, CustomStringConvertible, Codable {
        case adj = "ADJ"
        case adp = "ADP"
        case adv = "ADV"
        case aux = "AUX"
        case conj = "CONJ"
        case cconj = "CCONJ"
        case det = "DET"
        case intj = "INTJ"
        case noun = "NOUN"
        case num = "NUM"
        case o = "O"
        case part = "PART"
        case pron = "PRON"
        case propn = "PROPN"
        case punct = "PUNCT"
        case sconj = "SCONJ"
        case sym = "SYM"
        case verb = "VERB"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDocumentClassifierResponse: AWSShape {

    }

    public struct StartSentimentDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct DescribeDominantLanguageDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct StartDocumentClassificationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job:   SUBMITTED - The job has been received and queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. For details, use the operation.   STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.   STOPPED - The job was successfully stopped without completing.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of the job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct StartDominantLanguageDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "JobId", required: false, type: .string)
        ]
        /// The status of the job.    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the operation.  
        public let jobStatus: JobStatus?
        /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
        public let jobId: String?

        public init(jobStatus: JobStatus? = nil, jobId: String? = nil) {
            self.jobStatus = jobStatus
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobStatus = "JobStatus"
            case jobId = "JobId"
        }
    }

    public struct StopSentimentDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier of the sentiment detection job to stop.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DetectDominantLanguageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Languages", required: false, type: .list)
        ]
        /// The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languages: [DominantLanguage]?

        public init(languages: [DominantLanguage]? = nil) {
            self.languages = languages
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "Languages"
        }
    }

    public struct ListDocumentClassifiersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentClassifierPropertiesList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list containing the properties of each job returned.
        public let documentClassifierPropertiesList: [DocumentClassifierProperties]?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(documentClassifierPropertiesList: [DocumentClassifierProperties]? = nil, nextToken: String? = nil) {
            self.documentClassifierPropertiesList = documentClassifierPropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentClassifierPropertiesList = "DocumentClassifierPropertiesList"
            case nextToken = "NextToken"
        }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable {
        case en = "en"
        case es = "es"
        case fr = "fr"
        case de = "de"
        case it = "it"
        case pt = "pt"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSentimentDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

}